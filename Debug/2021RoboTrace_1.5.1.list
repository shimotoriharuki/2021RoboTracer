
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178c0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  08017a80  08017a80  00027a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801859c  0801859c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801859c  0801859c  0002859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185a4  080185a4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080185a4  080185a4  000285a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185ac  080185ac  000285ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080185b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003bc30  200001e0  0801878c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003be10  0801878c  0003be10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037405  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a2b  00000000  00000000  00067611  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021b0  00000000  00000000  0006f040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ee0  00000000  00000000  000711f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037733  00000000  00000000  000730d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b4f  00000000  00000000  000aa803  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110748  00000000  00000000  000d0352  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3f8  00000000  00000000  001e0b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017a68 	.word	0x08017a68

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017a68 	.word	0x08017a68

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 fc9a 	bl	8008910 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039908 	.word	0x20039908

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fc82 	bl	8008910 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039908 	.word	0x20039908

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fb0b 	bl	800863c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 f872 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 f86c 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 f866 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 f860 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 f85a 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 f854 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 f84e 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 f848 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 f842 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 f83c 	bl	8007110 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 f830 	bl	8007110 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 f82a 	bl	8007110 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fbf5 	bl	8014918 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b fa4a 	bl	800c640 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b fa46 	bl	800c640 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20039b5c 	.word	0x20039b5c
 80011d0:	20039840 	.word	0x20039840
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_ZN7Encoder8clearCntEv+0x3c>)
 8001432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_ZN7Encoder8clearCntEv+0x40>)
 800143a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010000 	.word	0x40010000
 8001458:	40010400 	.word	0x40010400

0800145c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f977 	bl	800178c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800149e:	f000 f98b 	bl	80017b8 <fopen_folder_and_file>

	return ret;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <user_fclose+0x1c>)
 80014b8:	f00f fe1c 	bl	80110f4 <f_close>

	return ret;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2003874c 	.word	0x2003874c

080014cc <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	81fb      	strh	r3, [r7, #14]
 80014e4:	e030      	b.n	8001548 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f840 	bl	8000578 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001500:	4a17      	ldr	r2, [pc, #92]	; (8001560 <sd_write_float+0x94>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <sd_write_float+0x98>)
 8001506:	f012 fa77 	bl	80139f8 <sniprintf>

		if(state == ADD_WRITE){
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <sd_write_float+0x9c>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <sd_write_float+0x9c>)
 8001518:	f00f fe60 	bl	80111dc <f_lseek>
 800151c:	e003      	b.n	8001526 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800151e:	2100      	movs	r1, #0
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <sd_write_float+0x9c>)
 8001522:	f00f fe5b 	bl	80111dc <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <sd_write_float+0x98>)
 8001528:	f7fe fe6a 	bl	8000200 <strlen>
 800152c:	4602      	mov	r2, r0
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <sd_write_float+0xa0>)
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <sd_write_float+0x98>)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <sd_write_float+0x9c>)
 8001534:	f00f fbc9 	bl	8010cca <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001538:	f000 f958 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 800153c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3301      	adds	r3, #1
 8001544:	b29b      	uxth	r3, r3
 8001546:	81fb      	strh	r3, [r7, #14]
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbc8      	blt.n	80014e6 <sd_write_float+0x1a>
	}
	return ret;
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	08017a80 	.word	0x08017a80
 8001564:	200386bc 	.word	0x200386bc
 8001568:	2003874c 	.word	0x2003874c
 800156c:	2003873c 	.word	0x2003873c

08001570 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f900 	bl	800178c <create_path>

	if(state == OVER_WRITE){
 800158c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <sd_write_array_float+0xb0>)
 8001596:	f00f fdd7 	bl	8011148 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <sd_write_array_float+0xb4>)
 800159c:	f010 f842 	bl	8011624 <f_unlink>
		f_chdir("..");
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <sd_write_array_float+0xb8>)
 80015a2:	f00f fdd1 	bl	8011148 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015a6:	f000 f907 	bl	80017b8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	e028      	b.n	8001602 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffdb 	bl	8000578 <__aeabi_f2d>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <sd_write_array_float+0xbc>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <sd_write_array_float+0xc0>)
 80015d0:	f012 fa12 	bl	80139f8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_float+0xc4>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <sd_write_array_float+0xc4>)
 80015dc:	f00f fdfe 	bl	80111dc <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_float+0xc0>)
 80015e2:	f7fe fe0d 	bl	8000200 <strlen>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_float+0xc8>)
 80015ea:	4911      	ldr	r1, [pc, #68]	; (8001630 <sd_write_array_float+0xc0>)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_float+0xc4>)
 80015ee:	f00f fb6c 	bl	8010cca <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015f2:	f000 f8fb 	bl	80017ec <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	82fb      	strh	r3, [r7, #22]
 8001602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbd0      	blt.n	80015b0 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <sd_write_array_float+0xc4>)
 8001610:	f00f fd70 	bl	80110f4 <f_close>

	return ret;
 8001614:	7d7b      	ldrb	r3, [r7, #21]
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	200385bc 	.word	0x200385bc
 8001624:	2003747c 	.word	0x2003747c
 8001628:	08017a9c 	.word	0x08017a9c
 800162c:	08017a80 	.word	0x08017a80
 8001630:	200386bc 	.word	0x200386bc
 8001634:	2003874c 	.word	0x2003874c
 8001638:	2003873c 	.word	0x2003873c

0800163c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f898 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f8ac 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_float+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_float+0x84>)
 8001672:	f012 fa15 	bl	8013aa0 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_float+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_float+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_float+0x84>)
 800169c:	f010 f9a0 	bl	80119e0 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f8a1 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_float+0x88>)
 80016ac:	f00f fd22 	bl	80110f4 <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08017a8c 	.word	0x08017a8c
 80016c0:	200386bc 	.word	0x200386bc
 80016c4:	2003874c 	.word	0x2003874c

080016c8 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f852 	bl	800178c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e8:	f000 f866 	bl	80017b8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ec:	e019      	b.n	8001722 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4913      	ldr	r1, [pc, #76]	; (8001748 <sd_read_array_double+0x80>)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <sd_read_array_double+0x84>)
 80016fe:	f012 f9cf 	bl	8013aa0 <siscanf>
		i++;
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800170e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	429a      	cmp	r2, r3
 8001718:	db03      	blt.n	8001722 <sd_read_array_double+0x5a>
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <sd_read_array_double+0x88>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <sd_read_array_double+0x84>)
 8001728:	f010 f95a 	bl	80119e0 <f_gets>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1dd      	bne.n	80016ee <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001732:	f000 f85b 	bl	80017ec <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <sd_read_array_double+0x88>)
 8001738:	f00f fcdc 	bl	80110f4 <f_close>

	return ret;
 800173c:	7d7b      	ldrb	r3, [r7, #21]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	08017a98 	.word	0x08017a98
 800174c:	200386bc 	.word	0x200386bc
 8001750:	2003874c 	.word	0x2003874c

08001754 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800175e:	2201      	movs	r2, #1
 8001760:	4908      	ldr	r1, [pc, #32]	; (8001784 <sd_mount+0x30>)
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <sd_mount+0x34>)
 8001764:	f00e ff3e 	bl	80105e4 <f_mount>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <sd_mount+0x20>
 800176e:	2301      	movs	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	e001      	b.n	8001778 <sd_mount+0x24>
	else ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001778:	79fb      	ldrb	r3, [r7, #7]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08017aa8 	.word	0x08017aa8
 8001788:	2003757c 	.word	0x2003757c

0800178c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <create_path+0x24>)
 800179a:	f012 f9f0 	bl	8013b7e <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <create_path+0x28>)
 80017a2:	f012 f9ec 	bl	8013b7e <strcpy>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200385bc 	.word	0x200385bc
 80017b4:	2003747c 	.word	0x2003747c

080017b8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <fopen_folder_and_file+0x24>)
 80017be:	f00f fff3 	bl	80117a8 <f_mkdir>

	f_chdir(dirpath);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <fopen_folder_and_file+0x24>)
 80017c4:	f00f fcc0 	bl	8011148 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c8:	2213      	movs	r2, #19
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x28>)
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <fopen_folder_and_file+0x2c>)
 80017ce:	f00e ff4f 	bl	8010670 <f_open>

	f_chdir("..");
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <fopen_folder_and_file+0x30>)
 80017d4:	f00f fcb8 	bl	8011148 <f_chdir>


}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200385bc 	.word	0x200385bc
 80017e0:	2003747c 	.word	0x2003747c
 80017e4:	2003874c 	.word	0x2003874c
 80017e8:	08017a9c 	.word	0x08017a9c

080017ec <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e007      	b.n	8001808 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <bufclear+0x30>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	ddf4      	ble.n	80017f8 <bufclear+0xc>
	}
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200386bc 	.word	0x200386bc

08001820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <read_byte+0x54>)
 800183c:	f006 fefe 	bl	800863c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001840:	f107 010f 	add.w	r1, r7, #15
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <read_byte+0x58>)
 800184a:	f00a f8bf 	bl	800b9cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800184e:	f107 010e 	add.w	r1, r7, #14
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <read_byte+0x58>)
 8001858:	f00a f9ec 	bl	800bc34 <HAL_SPI_Receive>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <read_byte+0x54>)
 8001864:	f006 feea 	bl	800863c <HAL_GPIO_WritePin>

	return val;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	200397e8 	.word	0x200397e8

0800187c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <write_byte+0x54>)
 800189e:	f006 fecd 	bl	800863c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	; 0x64
 80018a8:	2201      	movs	r2, #1
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <write_byte+0x58>)
 80018ac:	f00a f88e 	bl	800b9cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018b0:	1db9      	adds	r1, r7, #6
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <write_byte+0x58>)
 80018b8:	f00a f888 	bl	800b9cc <HAL_SPI_Transmit>
	CS_SET;
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <write_byte+0x54>)
 80018c4:	f006 feba 	bl	800863c <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	200397e8 	.word	0x200397e8

080018d8 <IMU_init>:

uint16_t IMU_init() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ff9c 	bl	8001820 <read_byte>
 80018e8:	4603      	mov	r3, r0
 80018ea:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018ec:	797b      	ldrb	r3, [r7, #5]
 80018ee:	2be0      	cmp	r3, #224	; 0xe0
 80018f0:	d119      	bne.n	8001926 <IMU_init+0x4e>
		ret = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018f6:	2101      	movs	r1, #1
 80018f8:	2006      	movs	r0, #6
 80018fa:	f7ff ffbf 	bl	800187c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018fe:	2110      	movs	r1, #16
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff ffbb 	bl	800187c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001906:	2120      	movs	r1, #32
 8001908:	207f      	movs	r0, #127	; 0x7f
 800190a:	f7ff ffb7 	bl	800187c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800190e:	2106      	movs	r1, #6
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffb3 	bl	800187c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001916:	2106      	movs	r1, #6
 8001918:	2014      	movs	r0, #20
 800191a:	f7ff ffaf 	bl	800187c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800191e:	2100      	movs	r1, #0
 8001920:	207f      	movs	r0, #127	; 0x7f
 8001922:	f7ff ffab 	bl	800187c <write_byte>
	}
	return ret;
 8001926:	88fb      	ldrh	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <read_gyro_data>:

void read_gyro_data() {
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001934:	2033      	movs	r0, #51	; 0x33
 8001936:	f7ff ff73 	bl	8001820 <read_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21c      	sxth	r4, r3
 8001940:	2034      	movs	r0, #52	; 0x34
 8001942:	f7ff ff6d 	bl	8001820 <read_byte>
 8001946:	4603      	mov	r3, r0
 8001948:	b21b      	sxth	r3, r3
 800194a:	4323      	orrs	r3, r4
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <read_gyro_data+0x64>)
 8001950:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001952:	2035      	movs	r0, #53	; 0x35
 8001954:	f7ff ff64 	bl	8001820 <read_byte>
 8001958:	4603      	mov	r3, r0
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21c      	sxth	r4, r3
 800195e:	2036      	movs	r0, #54	; 0x36
 8001960:	f7ff ff5e 	bl	8001820 <read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	b21b      	sxth	r3, r3
 8001968:	4323      	orrs	r3, r4
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <read_gyro_data+0x68>)
 800196e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001970:	2037      	movs	r0, #55	; 0x37
 8001972:	f7ff ff55 	bl	8001820 <read_byte>
 8001976:	4603      	mov	r3, r0
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21c      	sxth	r4, r3
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f7ff ff4f 	bl	8001820 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	b21b      	sxth	r3, r3
 8001986:	4323      	orrs	r3, r4
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <read_gyro_data+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20039784 	.word	0x20039784
 8001998:	20039782 	.word	0x20039782
 800199c:	2003977c 	.word	0x2003977c

080019a0 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	805a      	strh	r2, [r3, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	809a      	strh	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	80da      	strh	r2, [r3, #6]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	811a      	strh	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	815a      	strh	r2, [r3, #10]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
{

}
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019ec:	f7ff ff74 	bl	80018d8 <IMU_init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <_ZN3IMU4initEv+0x50>)
 80019fa:	f011 ff67 	bl	80138cc <iprintf>

	lcd_clear();
 80019fe:	f7ff fb4f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb5b 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <_ZN3IMU4initEv+0x54>)
 8001a0c:	f7ff fb82 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb54 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_ZN3IMU4initEv+0x58>)
 8001a1e:	f7ff fb79 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a26:	f005 fb73 	bl	8007110 <HAL_Delay>

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08017aac 	.word	0x08017aac
 8001a38:	08017abc 	.word	0x08017abc
 8001a3c:	08017ac8 	.word	0x08017ac8

08001a40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a48:	f7ff ff72 	bl	8001930 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd6f 	bl	8000554 <__aeabi_i2d>
 8001a76:	a316      	add	r3, pc, #88	; (adr r3, 8001ad0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	4625      	mov	r5, r4
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd60 	bl	8000554 <__aeabi_i2d>
 8001a94:	a310      	add	r3, pc, #64	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x98>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdc5 	bl	8000628 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fc09 	bl	80002bc <__adddf3>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	f7ff f869 	bl	8000b88 <__aeabi_d2iz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_ZN3IMU12updateValuesEv+0xac>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad0:	eb851eb8 	.word	0xeb851eb8
 8001ad4:	3f9eb851 	.word	0x3f9eb851
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	20039784 	.word	0x20039784
 8001ae4:	20039782 	.word	0x20039782
 8001ae8:	2003977c 	.word	0x2003977c
 8001aec:	20000210 	.word	0x20000210

08001af0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	a316      	add	r3, pc, #88	; (adr r3, 8001b74 <_ZN3IMU8getOmegaEv+0x84>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feac 	bl	800087c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b2e:	a313      	add	r3, pc, #76	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe fd76 	bl	8000628 <__aeabi_dmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <_ZN3IMU8getOmegaEv+0x80>)
 8001b4a:	f7fe fe97 	bl	800087c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7ff f85f 	bl	8000c18 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	40668000 	.word	0x40668000
 8001b74:	66666666 	.word	0x66666666
 8001b78:	40306666 	.word	0x40306666
 8001b7c:	54411744 	.word	0x54411744
 8001b80:	400921fb 	.word	0x400921fb

08001b84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b8c:	466b      	mov	r3, sp
 8001b8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f005 fabc 	bl	8007110 <HAL_Delay>
	lcd_clear();
 8001b98:	f7ff fa82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fa8e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ba4:	4840      	ldr	r0, [pc, #256]	; (8001ca8 <_ZN3IMU11calibrationEv+0x124>)
 8001ba6:	f7ff fab5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001baa:	2101      	movs	r1, #1
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fa87 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bb2:	483e      	ldr	r0, [pc, #248]	; (8001cac <_ZN3IMU11calibrationEv+0x128>)
 8001bb4:	f7ff faae 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bbe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	61bd      	str	r5, [r7, #24]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0154      	lsls	r4, r2, #5
 8001bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bde:	014b      	lsls	r3, r1, #5
 8001be0:	462b      	mov	r3, r5
 8001be2:	3301      	adds	r3, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3303      	adds	r3, #3
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	466b      	mov	r3, sp
 8001c0e:	3303      	adds	r3, #3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	83fb      	strh	r3, [r7, #30]
 8001c1a:	8bfa      	ldrh	r2, [r7, #30]
 8001c1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	da13      	bge.n	8001c4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f005 fa66 	bl	8007110 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	e7e6      	b.n	8001c1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	462b      	mov	r3, r5
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00e      	beq.n	8001c82 <_ZN3IMU11calibrationEv+0xfe>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e7ec      	b.n	8001c5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c9c:	46b5      	mov	sp, r6
}
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	08017acc 	.word	0x08017acc
 8001cac:	08017ad8 	.word	0x08017ad8

08001cb0 <_ZN3IMU12getOffsetValEv>:

float IMU::getOffsetVal()
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	return offset_;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	ee07 3a90 	vmov	s15, r3
}
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	1dfa      	adds	r2, r7, #7
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <INA260_read+0x50>)
 8001cee:	f006 fe0f 	bl	8008910 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	b299      	uxth	r1, r3
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <INA260_read+0x50>)
 8001d02:	f006 ff03 	bl	8008b0c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2003999c 	.word	0x2003999c

08001d24 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	717b      	strb	r3, [r7, #5]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	737b      	strb	r3, [r7, #13]
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d4e:	793b      	ldrb	r3, [r7, #4]
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <INA260_write+0x48>)
 8001d5e:	f006 fdd7 	bl	8008910 <HAL_I2C_Master_Transmit>
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2003999c 	.word	0x2003999c

08001d70 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	79ba      	ldrb	r2, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ffcb 	bl	8001d24 <INA260_write>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	21df      	movs	r1, #223	; 0xdf
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffe2 	bl	8001d70 <setConfig>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
{

}
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dde:	f006 fc15 	bl	800860c <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x2e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4823      	ldr	r0, [pc, #140]	; (8001e8c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dfe:	f006 fc05 	bl	800860c <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <_ZN8JoyStick8getValueEv+0x4e>
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e20:	f006 fbf4 	bl	800860c <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x70>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e40:	f006 fbe4 	bl	800860c <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0x90>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e60:	f006 fbd4 	bl	800860c <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <_ZN8JoyStick8getValueEv+0xb0>
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020400 	.word	0x40020400

08001e94 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b52      	cmp	r3, #82	; 0x52
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4856      	ldr	r0, [pc, #344]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 fbc5 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4853      	ldr	r0, [pc, #332]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fbbf 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fbb9 	bl	800863c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eca:	e098      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b47      	cmp	r3, #71	; 0x47
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	484b      	ldr	r0, [pc, #300]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 fbaf 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4848      	ldr	r0, [pc, #288]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fba9 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4845      	ldr	r0, [pc, #276]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fba3 	bl	800863c <HAL_GPIO_WritePin>
}
 8001ef6:	e082      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b42      	cmp	r3, #66	; 0x42
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4840      	ldr	r0, [pc, #256]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fb99 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	483d      	ldr	r0, [pc, #244]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fb93 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	483a      	ldr	r0, [pc, #232]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fb8d 	bl	800863c <HAL_GPIO_WritePin>
}
 8001f22:	e06c      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b43      	cmp	r3, #67	; 0x43
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fb83 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4832      	ldr	r0, [pc, #200]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fb7d 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	482f      	ldr	r0, [pc, #188]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fb77 	bl	800863c <HAL_GPIO_WritePin>
}
 8001f4e:	e056      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b4d      	cmp	r3, #77	; 0x4d
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fb6d 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4827      	ldr	r0, [pc, #156]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fb67 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fb61 	bl	800863c <HAL_GPIO_WritePin>
}
 8001f7a:	e040      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b59      	cmp	r3, #89	; 0x59
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fb57 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fb51 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fb4b 	bl	800863c <HAL_GPIO_WritePin>
}
 8001fa6:	e02a      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b57      	cmp	r3, #87	; 0x57
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4814      	ldr	r0, [pc, #80]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fb41 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fb3b 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fb35 	bl	800863c <HAL_GPIO_WritePin>
}
 8001fd2:	e014      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fd8:	d111      	bne.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fb2b 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fb25 	bl	800863c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fb1f 	bl	800863c <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020000 	.word	0x40020000

0800200c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	4613      	mov	r3, r2
 800201a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800201c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800202c:	f006 fb06 	bl	800863c <HAL_GPIO_WritePin>
 8002030:	e009      	b.n	8002046 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002042:	f006 fafb 	bl	800863c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d106      	bne.n	800205c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4808      	ldr	r0, [pc, #32]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002056:	f006 faf1 	bl	800863c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800205a:	e009      	b.n	8002070 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800205c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800206c:	f006 fae6 	bl	800863c <HAL_GPIO_WritePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020000 	.word	0x40020000

0800207c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe92 	bl	8001db4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	331c      	adds	r3, #28
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d008      	beq.n	80020b8 <_ZN10LineSensorC1Ev+0x3c>
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	3302      	adds	r3, #2
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	e7f2      	b.n	800209e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d009      	beq.n	80020e6 <_ZN10LineSensorC1Ev+0x6a>
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	3304      	adds	r3, #4
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
 80020e4:	e7f1      	b.n	80020ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d009      	beq.n	8002114 <_ZN10LineSensorC1Ev+0x98>
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	617b      	str	r3, [r7, #20]
		m = 0;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3304      	adds	r3, #4
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e7f1      	b.n	80020f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d009      	beq.n	8002142 <_ZN10LineSensorC1Ev+0xc6>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002138:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	3304      	adds	r3, #4
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002140:	e7f1      	b.n	8002126 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3748      	adds	r7, #72	; 0x48
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	220e      	movs	r2, #14
 8002158:	4619      	mov	r1, r3
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800215c:	f005 f83e 	bl	80071dc <HAL_ADC_Start_DMA>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200398c0 	.word	0x200398c0

0800216c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b0d      	cmp	r3, #13
 800217c:	dc2f      	bgt.n	80021de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3392      	adds	r3, #146	; 0x92
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	33a0      	adds	r3, #160	; 0xa0
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	3306      	adds	r3, #6
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7cc      	b.n	8002178 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	d902      	bls.n	80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]


}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	2000021c 	.word	0x2000021c

08002208 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800221a:	2b0d      	cmp	r3, #13
 800221c:	f200 80b8 	bhi.w	8002390 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002226:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800222a:	2b09      	cmp	r3, #9
 800222c:	d81c      	bhi.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800222e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002232:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002236:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4423      	add	r3, r4
 8002246:	3306      	adds	r3, #6
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3304      	adds	r3, #4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	008b      	lsls	r3, r1, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440b      	add	r3, r1
 8002258:	3b30      	subs	r3, #48	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800225c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002260:	3301      	adds	r3, #1
 8002262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002266:	e7de      	b.n	8002226 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800226e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002272:	2b09      	cmp	r3, #9
 8002274:	d84d      	bhi.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	3301      	adds	r3, #1
 800227c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002280:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002284:	2b09      	cmp	r3, #9
 8002286:	d83e      	bhi.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002288:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002292:	4413      	add	r3, r2
 8002294:	3b30      	subs	r3, #48	; 0x30
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a4:	4413      	add	r3, r2
 80022a6:	3b30      	subs	r3, #48	; 0x30
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d521      	bpl.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	4413      	add	r3, r2
 80022c2:	3b30      	subs	r3, #48	; 0x30
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022d6:	440a      	add	r2, r1
 80022d8:	3a30      	subs	r2, #48	; 0x30
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440b      	add	r3, r1
 80022e4:	3b30      	subs	r3, #48	; 0x30
 80022e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022f2:	4413      	add	r3, r2
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	e7bc      	b.n	8002280 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800230a:	3301      	adds	r3, #1
 800230c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002310:	e7ad      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f92f 	bl	8000578 <__aeabi_f2d>
 800231a:	a32a      	add	r3, pc, #168	; (adr r3, 80023c4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f982 	bl	8000628 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4625      	mov	r5, r4
 800232a:	461c      	mov	r4, r3
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f91d 	bl	8000578 <__aeabi_f2d>
 800233e:	a31c      	add	r3, pc, #112	; (adr r3, 80023b0 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	461a      	mov	r2, r3
 800235a:	4623      	mov	r3, r4
 800235c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc58 	bl	8000c18 <__aeabi_d2f>
 8002368:	4601      	mov	r1, r0
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800238e:	e742      	b.n	8002216 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002398:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	; 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	f3af 8000 	nop.w
 80023b0:	66666666 	.word	0x66666666
 80023b4:	3fee6666 	.word	0x3fee6666
 80023b8:	20000220 	.word	0x20000220
 80023bc:	20000214 	.word	0x20000214
 80023c0:	20000218 	.word	0x20000218
 80023c4:	9999999a 	.word	0x9999999a
 80023c8:	3fa99999 	.word	0x3fa99999

080023cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b0a9      	sub	sp, #164	; 0xa4
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	f004 fe9b 	bl	8007110 <HAL_Delay>

	lcd_clear();
 80023da:	f7fe fe61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fe6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023e6:	48b1      	ldr	r0, [pc, #708]	; (80026ac <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023e8:	f7fe fe94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fe66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023f4:	48ae      	ldr	r0, [pc, #696]	; (80026b0 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023f6:	f7fe fe8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002400:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d823      	bhi.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002408:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	32b0      	adds	r2, #176	; 0xb0
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	440a      	add	r2, r1
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002420:	440b      	add	r3, r1
 8002422:	3b60      	subs	r3, #96	; 0x60
 8002424:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002426:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800242a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800243e:	440b      	add	r3, r1
 8002440:	3b98      	subs	r3, #152	; 0x98
 8002442:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002448:	3301      	adds	r3, #1
 800244a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800244e:	e7d7      	b.n	8002400 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcb8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800245c:	4603      	mov	r3, r0
 800245e:	2b02      	cmp	r3, #2
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d079      	beq.n	8002560 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002472:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d850      	bhi.n	800251c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002484:	4413      	add	r3, r2
 8002486:	3b60      	subs	r3, #96	; 0x60
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	33b0      	adds	r3, #176	; 0xb0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d50f      	bpl.n	80024c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	32b0      	adds	r2, #176	; 0xb0
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	440a      	add	r2, r1
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024be:	440b      	add	r3, r1
 80024c0:	3b60      	subs	r3, #96	; 0x60
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e024      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024d0:	4413      	add	r3, r2
 80024d2:	3b98      	subs	r3, #152	; 0x98
 80024d4:	ed93 7a00 	vldr	s14, [r3]
 80024d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	33b0      	adds	r3, #176	; 0xb0
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd0e      	ble.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024f2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	32b0      	adds	r2, #176	; 0xb0
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	440a      	add	r2, r1
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800250a:	440b      	add	r3, r1
 800250c:	3b98      	subs	r3, #152	; 0x98
 800250e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002514:	3301      	adds	r3, #1
 8002516:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800251a:	e7aa      	b.n	8002472 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f856 	bl	80035d4 <_ZN12RotarySwitch8getValueEv>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800253e:	2201      	movs	r2, #1
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd61 	bl	800200c <_ZN3LED2LREaa>
 800254a:	e781      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002552:	2200      	movs	r2, #0
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd57 	bl	800200c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800255e:	e777      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800257e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002582:	429a      	cmp	r2, r3
 8002584:	d016      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffef 	bl	8000578 <__aeabi_f2d>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	4844      	ldr	r0, [pc, #272]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025a4:	f011 f992 	bl	80138cc <iprintf>
	for(const auto &m : max_values){
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	3304      	adds	r3, #4
 80025ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b2:	e7e2      	b.n	800257a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 80025b4:	200a      	movs	r0, #10
 80025b6:	f011 f9a1 	bl	80138fc <putchar>
	for(const auto &m : min_values){
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d014      	beq.n	8002606 <_ZN10LineSensor11calibrationEv+0x23a>
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffc6 	bl	8000578 <__aeabi_f2d>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	482f      	ldr	r0, [pc, #188]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025f6:	f011 f969 	bl	80138cc <iprintf>
	for(const auto &m : min_values){
 80025fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fe:	3304      	adds	r3, #4
 8002600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002604:	e7e5      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 8002606:	200a      	movs	r0, #10
 8002608:	f011 f978 	bl	80138fc <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800260c:	2300      	movs	r3, #0
 800260e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	2b0d      	cmp	r3, #13
 8002618:	d826      	bhi.n	8002668 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800261a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002624:	4413      	add	r3, r2
 8002626:	3b60      	subs	r3, #96	; 0x60
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002636:	4413      	add	r3, r2
 8002638:	3b98      	subs	r3, #152	; 0x98
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002646:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80026b8 <_ZN10LineSensor11calibrationEv+0x2ec>
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	3392      	adds	r3, #146	; 0x92
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800265c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002660:	3301      	adds	r3, #1
 8002662:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002666:	e7d4      	b.n	8002612 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800266e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d815      	bhi.n	80026a2 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002676:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800267a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002684:	440a      	add	r2, r1
 8002686:	3a98      	subs	r2, #152	; 0x98
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	33a0      	adds	r3, #160	; 0xa0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002696:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800269a:	3301      	adds	r3, #1
 800269c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026a0:	e7e5      	b.n	800266e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026a2:	bf00      	nop
 80026a4:	37a4      	adds	r7, #164	; 0xa4
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08017ae4 	.word	0x08017ae4
 80026b0:	08017af0 	.word	0x08017af0
 80026b4:	08017afc 	.word	0x08017afc
 80026b8:	447a0000 	.word	0x447a0000

080026bc <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d012      	beq.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002728 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	db02      	blt.n	8002700 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3304      	adds	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e7e8      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	2b0d      	cmp	r3, #13
 800270c:	d902      	bls.n	8002714 <_ZN10LineSensor13emergencyStopEv+0x58>
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
 8002712:	e001      	b.n	8002718 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002718:	7dfb      	ldrb	r3, [r7, #23]

}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	44160000 	.word	0x44160000

0800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_target_omega;
float monitor_r;

float mon_diff, mon_diff_lpf;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	0000      	movs	r0, r0
 8002784:	0000      	movs	r0, r0
	...

08002788 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80027b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80027c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80027d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80027dc:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80027fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002808:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002814:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002820:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800282c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002830:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002834:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <_ZN9LineTrace9calcErrorEv+0x130>)
 800283c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fe99 	bl	8000578 <__aeabi_f2d>
 8002846:	a318      	add	r3, pc, #96	; (adr r3, 80028a8 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd feec 	bl	8000628 <__aeabi_dmul>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	4625      	mov	r5, r4
 8002856:	461c      	mov	r4, r3
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <_ZN9LineTrace9calcErrorEv+0x134>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe8b 	bl	8000578 <__aeabi_f2d>
 8002862:	a313      	add	r3, pc, #76	; (adr r3, 80028b0 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fede 	bl	8000628 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fd fd22 	bl	80002bc <__adddf3>
 8002878:	4603      	mov	r3, r0
 800287a:	460c      	mov	r4, r1
 800287c:	4618      	mov	r0, r3
 800287e:	4621      	mov	r1, r4
 8002880:	f7fe f9ca 	bl	8000c18 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <_ZN9LineTrace9calcErrorEv+0x138>)
 800288c:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <_ZN9LineTrace9calcErrorEv+0x134>)
 8002892:	6013      	str	r3, [r2, #0]

	return diff;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	ee07 3a90 	vmov	s15, r3

}
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bdb0      	pop	{r4, r5, r7, pc}
 80028a4:	f3af 8000 	nop.w
 80028a8:	47ae147b 	.word	0x47ae147b
 80028ac:	3fb47ae1 	.word	0x3fb47ae1
 80028b0:	d70a3d71 	.word	0xd70a3d71
 80028b4:	3fed70a3 	.word	0x3fed70a3
 80028b8:	20000258 	.word	0x20000258
 80028bc:	20000260 	.word	0x20000260
 80028c0:	2000025c 	.word	0x2000025c
 80028c4:	00000000 	.word	0x00000000

080028c8 <_ZN9LineTrace23pidAngularVelocityTraceEv>:
	pre_diff = diff;

}

void LineTrace::pidAngularVelocityTrace()
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff59 	bl	8002788 <_ZN9LineTrace9calcErrorEv>
 80028d6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;
	float target_omega = 0;
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

	p = kp_velo_ * diff;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ee:	edc7 7a03 	vstr	s15, [r7, #12]
	d = kd_velo_ * (diff - pre_diff) / DELTA_T;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80028f8:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	edd7 6a05 	vldr	s13, [r7, #20]
 8002902:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	ee17 0a90 	vmov	r0, s15
 800290e:	f7fd fe33 	bl	8000578 <__aeabi_f2d>
 8002912:	a329      	add	r3, pc, #164	; (adr r3, 80029b8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ffb0 	bl	800087c <__aeabi_ddiv>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	4618      	mov	r0, r3
 8002922:	4621      	mov	r1, r4
 8002924:	f7fe f978 	bl	8000c18 <__aeabi_d2f>
 8002928:	4603      	mov	r3, r0
 800292a:	60bb      	str	r3, [r7, #8]
	i += ki_velo_ * diff * DELTA_T;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fe21 	bl	8000578 <__aeabi_f2d>
 8002936:	4604      	mov	r4, r0
 8002938:	460d      	mov	r5, r1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002940:	edd7 7a05 	vldr	s15, [r7, #20]
 8002944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002948:	ee17 0a90 	vmov	r0, s15
 800294c:	f7fd fe14 	bl	8000578 <__aeabi_f2d>
 8002950:	a319      	add	r3, pc, #100	; (adr r3, 80029b8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fe67 	bl	8000628 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fcab 	bl	80002bc <__adddf3>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	4618      	mov	r0, r3
 800296c:	4621      	mov	r1, r4
 800296e:	f7fe f953 	bl	8000c18 <__aeabi_d2f>
 8002972:	4602      	mov	r2, r0
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002976:	601a      	str	r2, [r3, #0]

	target_omega = p + d + i;
 8002978:	ed97 7a03 	vldr	s14, [r7, #12]
 800297c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	edc7 7a04 	vstr	s15, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800299c:	edd7 0a04 	vldr	s1, [r7, #16]
 80029a0:	eeb0 0a67 	vmov.f32	s0, s15
 80029a4:	4610      	mov	r0, r2
 80029a6:	f001 f967 	bl	8003c78 <_ZN12VelocityCtrl11setVelocityEff>

	pre_diff = diff;
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	6013      	str	r3, [r2, #0]

}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}
 80029b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029bc:	3f50624d 	.word	0x3f50624d
 80029c0:	20000264 	.word	0x20000264
 80029c4:	20000268 	.word	0x20000268

080029c8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	float temp_kp_v, temp_ki_v, temp_kd_v;
	sd_read_array_float("PARAMS", "KP_V.TXT", 1, &temp_kp_v);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2201      	movs	r2, #1
 80029d6:	4912      	ldr	r1, [pc, #72]	; (8002a20 <_ZN9LineTrace4initEv+0x58>)
 80029d8:	4812      	ldr	r0, [pc, #72]	; (8002a24 <_ZN9LineTrace4initEv+0x5c>)
 80029da:	f7fe fe2f 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_V.TXT", 1, &temp_ki_v);
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	2201      	movs	r2, #1
 80029e4:	4910      	ldr	r1, [pc, #64]	; (8002a28 <_ZN9LineTrace4initEv+0x60>)
 80029e6:	480f      	ldr	r0, [pc, #60]	; (8002a24 <_ZN9LineTrace4initEv+0x5c>)
 80029e8:	f7fe fe28 	bl	800163c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_V.TXT", 1, &temp_kd_v);
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	2201      	movs	r2, #1
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <_ZN9LineTrace4initEv+0x64>)
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <_ZN9LineTrace4initEv+0x5c>)
 80029f6:	f7fe fe21 	bl	800163c <sd_read_array_float>
	setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 80029fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a02:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a06:	eeb0 1a66 	vmov.f32	s2, s13
 8002a0a:	eef0 0a47 	vmov.f32	s1, s14
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f825 	bl	8002a62 <_ZN9LineTrace11setVeloGainEfff>

}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	08017b3c 	.word	0x08017b3c
 8002a24:	08017b48 	.word	0x08017b48
 8002a28:	08017b50 	.word	0x08017b50
 8002a2c:	08017b5c 	.word	0x08017b5c

08002a30 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a40:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	615a      	str	r2, [r3, #20]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <_ZN9LineTrace11setVeloGainEfff>:


void LineTrace::setVeloGain(float kp, float ki, float kd)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a6e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a72:	ed87 1a00 	vstr	s2, [r7]
	kp_velo_ = kp;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	61da      	str	r2, [r3, #28]
	ki_velo_ = ki;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
	kd_velo_ = kd;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_ZN9LineTrace6getKpVEv>:
{
	return kd_;
}

float LineTrace::getKpV()
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	return kp_velo_;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	ee07 3a90 	vmov	s15, r3
}
 8002aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN9LineTrace6getKiVEv>:
float LineTrace::getKiV()
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	return ki_velo_;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	ee07 3a90 	vmov	s15, r3
}
 8002ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_ZN9LineTrace6getKdVEv>:
float LineTrace::getKdV()
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	return kd_velo_;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	ee07 3a90 	vmov	s15, r3
}
 8002ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	0000      	movs	r0, r0
 8002b2c:	0000      	movs	r0, r0
	...

08002b30 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <_ZN9LineTrace4flipEv+0x5c>
		//pidTrace();
		pidAngularVelocityTrace();
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fec0 	bl	80028c8 <_ZN9LineTrace23pidAngularVelocityTraceEv>
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fdb5 	bl	80026bc <_ZN10LineSensor13emergencyStopEv>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d011      	beq.n	8002b7c <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002b98 <_ZN9LineTrace4flipEv+0x68>
 8002b60:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002b98 <_ZN9LineTrace4flipEv+0x68>
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa0b 	bl	8002f80 <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fa49 	bl	800200c <_ZN3LED2LREaa>
			led_.LR(0, -1);

		}
	}

}
 8002b7a:	e007      	b.n	8002b8c <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fa40 	bl	800200c <_ZN3LED2LREaa>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f3af 8000 	nop.w
	...

08002ba0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	0000      	movs	r0, r0
	...

08002bc0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002bf0 <_ZN9LineTrace4stopEv+0x30>
 8002bd8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002bf0 <_ZN9LineTrace4stopEv+0x30>
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f9cf 	bl	8002f80 <_ZN5Motor8setRatioEdd>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w
	...

08002bf8 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c10:	3302      	adds	r3, #2
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002c28:	3306      	adds	r3, #6
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002c48:	f7fe fd84 	bl	8001754 <sd_mount>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d019      	beq.n	8002c90 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002c5c:	481b      	ldr	r0, [pc, #108]	; (8002ccc <_ZN6Logger10sdCardInitEv+0x90>)
 8002c5e:	f010 febd 	bl	80139dc <puts>

	  lcd_clear();
 8002c62:	f7fe fa1d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c66:	2100      	movs	r1, #0
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fa29 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002c6e:	4818      	ldr	r0, [pc, #96]	; (8002cd0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002c70:	f7fe fa50 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002c74:	2101      	movs	r1, #1
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fe fa22 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002c7c:	4815      	ldr	r0, [pc, #84]	; (8002cd4 <_ZN6Logger10sdCardInitEv+0x98>)
 8002c7e:	f7fe fa49 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c86:	f004 fa43 	bl	8007110 <HAL_Delay>

	  ret = true;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e018      	b.n	8002cc2 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002c90:	4811      	ldr	r0, [pc, #68]	; (8002cd8 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002c92:	f010 fea3 	bl	80139dc <puts>

	  lcd_clear();
 8002c96:	f7fe fa03 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe fa0f 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002ca2:	480b      	ldr	r0, [pc, #44]	; (8002cd0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002ca4:	f7fe fa36 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe fa08 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002cb0:	480a      	ldr	r0, [pc, #40]	; (8002cdc <_ZN6Logger10sdCardInitEv+0xa0>)
 8002cb2:	f7fe fa2f 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cba:	f004 fa29 	bl	8007110 <HAL_Delay>

	  ret = false;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	08017b68 	.word	0x08017b68
 8002cd0:	08017b78 	.word	0x08017b78
 8002cd4:	08017b84 	.word	0x08017b84
 8002cd8:	08017b8c 	.word	0x08017b8c
 8002cdc:	08017b9c 	.word	0x08017b9c

08002ce0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d024      	beq.n	8002d42 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002cfe:	3302      	adds	r3, #2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d12:	3302      	adds	r3, #2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d20:	3302      	adds	r3, #2
 8002d22:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d905      	bls.n	8002d42 <_ZN6Logger8storeLogEf+0x62>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
	}
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d027      	beq.n	8002db6 <_ZN6Logger9storeLog2Ef+0x68>
		store_data_float2_[log_index_tim2_] = data;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002d76:	3310      	adds	r3, #16
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d86:	3304      	adds	r3, #4
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d94:	3304      	adds	r3, #4
 8002d96:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002d9e:	3304      	adds	r3, #4
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d905      	bls.n	8002db6 <_ZN6Logger9storeLog2Ef+0x68>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002db0:	3304      	adds	r3, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	801a      	strh	r2, [r3, #0]
	}
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af02      	add	r7, sp, #8
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	68b8      	ldr	r0, [r7, #8]
 8002dde:	f7fe fbc7 	bl	8001570 <sd_write_array_float>
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af02      	add	r7, sp, #8
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	2200      	movs	r2, #0
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68b8      	ldr	r0, [r7, #8]
 8002e0a:	f7fe fbb1 	bl	8001570 <sd_write_array_float>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002e2a:	3380      	adds	r3, #128	; 0x80
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68b8      	ldr	r0, [r7, #8]
 8002e38:	f7fe fb9a 	bl	8001570 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f503 33cb 	add.w	r3, r3, #103936	; 0x19600
 8002e42:	3340      	adds	r3, #64	; 0x40
 8002e44:	2200      	movs	r2, #0
 8002e46:	9200      	str	r2, [sp, #0]
 8002e48:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	68b8      	ldr	r0, [r7, #8]
 8002e50:	f7fe fb8e 	bl	8001570 <sd_write_array_float>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	805a      	strh	r2, [r3, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <_ZN5Motor4initEv>:

void Motor::init()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <_ZN5Motor4initEv+0x20>)
 8002ec8:	f009 faea 	bl	800c4a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ecc:	210c      	movs	r1, #12
 8002ece:	4803      	ldr	r0, [pc, #12]	; (8002edc <_ZN5Motor4initEv+0x20>)
 8002ed0:	f009 fae6 	bl	800c4a0 <HAL_TIM_PWM_Start>

}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20039880 	.word	0x20039880

08002ee0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0d      	bge.n	8002f0e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ef8:	481f      	ldr	r0, [pc, #124]	; (8002f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8002efa:	f005 fb9f 	bl	800863c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	425b      	negs	r3, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	81fb      	strh	r3, [r7, #14]
 8002f0c:	e00a      	b.n	8002f24 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f14:	4818      	ldr	r0, [pc, #96]	; (8002f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f16:	f005 fb91 	bl	800863c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da0d      	bge.n	8002f4a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f34:	4810      	ldr	r0, [pc, #64]	; (8002f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f36:	f005 fb81 	bl	800863c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	425b      	negs	r3, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	81bb      	strh	r3, [r7, #12]
 8002f48:	e00a      	b.n	8002f60 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f50:	4809      	ldr	r0, [pc, #36]	; (8002f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8002f52:	f005 fb73 	bl	800863c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002f60:	89fa      	ldrh	r2, [r7, #14]
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002f68:	89ba      	ldrh	r2, [r7, #12]
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	20039880 	.word	0x20039880

08002f80 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6178      	str	r0, [r7, #20]
 8002f88:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f8c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <_ZN5Motor8setRatioEdd+0xd8>)
 8002f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f9a:	f7fd fdd5 	bl	8000b48 <__aeabi_dcmpgt>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <_ZN5Motor8setRatioEdd+0x30>
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	4c2b      	ldr	r4, [pc, #172]	; (8003058 <_ZN5Motor8setRatioEdd+0xd8>)
 8002faa:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002fae:	e00e      	b.n	8002fce <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fba:	f7fd fda7 	bl	8000b0c <__aeabi_dcmplt>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <_ZN5Motor8setRatioEdd+0x4e>
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	4c24      	ldr	r4, [pc, #144]	; (800305c <_ZN5Motor8setRatioEdd+0xdc>)
 8002fca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fd8:	f7fd fdb6 	bl	8000b48 <__aeabi_dcmpgt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <_ZN5Motor8setRatioEdd+0x6e>
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	4c1c      	ldr	r4, [pc, #112]	; (8003058 <_ZN5Motor8setRatioEdd+0xd8>)
 8002fe8:	e9c7 3400 	strd	r3, r4, [r7]
 8002fec:	e00e      	b.n	800300c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff8:	f7fd fd88 	bl	8000b0c <__aeabi_dcmplt>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <_ZN5Motor8setRatioEdd+0x8c>
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	4c15      	ldr	r4, [pc, #84]	; (800305c <_ZN5Motor8setRatioEdd+0xdc>)
 8003008:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_ZN5Motor8setRatioEdd+0xe0>)
 8003012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003016:	f7fd fb07 	bl	8000628 <__aeabi_dmul>
 800301a:	4603      	mov	r3, r0
 800301c:	460c      	mov	r4, r1
 800301e:	4618      	mov	r0, r3
 8003020:	4621      	mov	r1, r4
 8003022:	f7fd fdb1 	bl	8000b88 <__aeabi_d2iz>
 8003026:	4603      	mov	r3, r0
 8003028:	b21a      	sxth	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <_ZN5Motor8setRatioEdd+0xe0>)
 8003034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003038:	f7fd faf6 	bl	8000628 <__aeabi_dmul>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	4618      	mov	r0, r3
 8003042:	4621      	mov	r1, r4
 8003044:	f7fd fda0 	bl	8000b88 <__aeabi_d2iz>
 8003048:	4603      	mov	r3, r0
 800304a:	b21a      	sxth	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	805a      	strh	r2, [r3, #2]

}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	3ff00000 	.word	0x3ff00000
 800305c:	bff00000 	.word	0xbff00000
 8003060:	409c2000 	.word	0x409c2000

08003064 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8003064:	b490      	push	{r4, r7}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f04f 0400 	mov.w	r4, #0
 800307c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc90      	pop	{r4, r7}
 80030b8:	4770      	bx	lr
 80030ba:	0000      	movs	r0, r0
 80030bc:	0000      	movs	r0, r0
	...

080030c0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fd0e 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 80030d4:	ee10 3a10 	vmov	r3, s0
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fa4d 	bl	8000578 <__aeabi_f2d>
 80030de:	4603      	mov	r3, r0
 80030e0:	460c      	mov	r4, r1
 80030e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f976 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 80030f0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80030f4:	a357      	add	r3, pc, #348	; (adr r3, 8003254 <_ZN8Odometry12calcPotitionEv+0x194>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030fe:	f7fd fa93 	bl	8000628 <__aeabi_dmul>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fd fa30 	bl	8000578 <__aeabi_f2d>
 8003118:	4682      	mov	sl, r0
 800311a:	468b      	mov	fp, r1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003130:	f7fd fba4 	bl	800087c <__aeabi_ddiv>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4640      	mov	r0, r8
 800313a:	4649      	mov	r1, r9
 800313c:	f7fd f8be 	bl	80002bc <__adddf3>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	ec43 2b17 	vmov	d7, r2, r3
 8003148:	eeb0 0a47 	vmov.f32	s0, s14
 800314c:	eef0 0a67 	vmov.f32	s1, s15
 8003150:	f00e fcea 	bl	8011b28 <cos>
 8003154:	ec53 2b10 	vmov	r2, r3, d0
 8003158:	4650      	mov	r0, sl
 800315a:	4659      	mov	r1, fp
 800315c:	f7fd fa64 	bl	8000628 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd f8a8 	bl	80002bc <__adddf3>
 800316c:	4603      	mov	r3, r0
 800316e:	460c      	mov	r4, r1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7fd f9fb 	bl	8000578 <__aeabi_f2d>
 8003182:	4682      	mov	sl, r0
 8003184:	468b      	mov	fp, r1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319a:	f7fd fb6f 	bl	800087c <__aeabi_ddiv>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4640      	mov	r0, r8
 80031a4:	4649      	mov	r1, r9
 80031a6:	f7fd f889 	bl	80002bc <__adddf3>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	ec43 2b17 	vmov	d7, r2, r3
 80031b2:	eeb0 0a47 	vmov.f32	s0, s14
 80031b6:	eef0 0a67 	vmov.f32	s1, s15
 80031ba:	f00e fcf9 	bl	8011bb0 <sin>
 80031be:	ec53 2b10 	vmov	r2, r3, d0
 80031c2:	4650      	mov	r0, sl
 80031c4:	4659      	mov	r1, fp
 80031c6:	f7fd fa2f 	bl	8000628 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4620      	mov	r0, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	f7fd f873 	bl	80002bc <__adddf3>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80031ec:	461a      	mov	r2, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7fd f864 	bl	80002bc <__adddf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003204:	4618      	mov	r0, r3
 8003206:	4621      	mov	r1, r4
 8003208:	f7fd fd06 	bl	8000c18 <__aeabi_d2f>
 800320c:	4602      	mov	r2, r0
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003210:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003218:	4618      	mov	r0, r3
 800321a:	4621      	mov	r1, r4
 800321c:	f7fd fcfc 	bl	8000c18 <__aeabi_d2f>
 8003220:	4602      	mov	r2, r0
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <_ZN8Odometry12calcPotitionEv+0x18c>)
 8003224:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800322c:	4618      	mov	r0, r3
 800322e:	4621      	mov	r1, r4
 8003230:	f7fd fcf2 	bl	8000c18 <__aeabi_d2f>
 8003234:	4602      	mov	r2, r0
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003244:	f3af 8000 	nop.w
 8003248:	2000026c 	.word	0x2000026c
 800324c:	20000270 	.word	0x20000270
 8003250:	20000274 	.word	0x20000274
 8003254:	d2f1a9fc 	.word	0xd2f1a9fc
 8003258:	3f50624d 	.word	0x3f50624d

0800325c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff2b 	bl	80030c0 <_ZN8Odometry12calcPotitionEv>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003272:	b490      	push	{r4, r7}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
	x_ = 0;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f04f 0400 	mov.w	r4, #0
 8003284:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f04f 0400 	mov.w	r4, #0
 8003292:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc90      	pop	{r4, r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80032b0:	b490      	push	{r4, r7}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80032ee:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80032f2:	2200      	movs	r2, #0
 80032f4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <_ZN13PathFollowingC1Ev+0xec>)
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <_ZN13PathFollowingC1Ev+0xec>)
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <_ZN13PathFollowingC1Ev+0xec>)
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f04f 0400 	mov.w	r4, #0
 800332a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f04f 0400 	mov.w	r4, #0
 8003338:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f04f 0400 	mov.w	r4, #0
 8003346:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800334a:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	f04f 0400 	mov.w	r4, #0
 8003354:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003358:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <_ZN13PathFollowingC1Ev+0xf0>)
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	f04f 0400 	mov.w	r4, #0
 8003370:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <_ZN13PathFollowingC1Ev+0xf4>)
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <_ZN13PathFollowingC1Ev+0xf4>)
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bc90      	pop	{r4, r7}
 800339a:	4770      	bx	lr
 800339c:	20039d80 	.word	0x20039d80
 80033a0:	20039d10 	.word	0x20039d10
 80033a4:	20039d70 	.word	0x20039d70

080033a8 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80033b0:	f001 fcd4 	bl	8004d5c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80033b4:	f107 0318 	add.w	r3, r7, #24
 80033b8:	2201      	movs	r2, #1
 80033ba:	4915      	ldr	r1, [pc, #84]	; (8003410 <_ZN13PathFollowing4initEv+0x68>)
 80033bc:	4815      	ldr	r0, [pc, #84]	; (8003414 <_ZN13PathFollowing4initEv+0x6c>)
 80033be:	f7fe f983 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	2201      	movs	r2, #1
 80033c8:	4913      	ldr	r1, [pc, #76]	; (8003418 <_ZN13PathFollowing4initEv+0x70>)
 80033ca:	4812      	ldr	r0, [pc, #72]	; (8003414 <_ZN13PathFollowing4initEv+0x6c>)
 80033cc:	f7fe f97c 	bl	80016c8 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	2201      	movs	r2, #1
 80033d6:	4911      	ldr	r1, [pc, #68]	; (800341c <_ZN13PathFollowing4initEv+0x74>)
 80033d8:	480e      	ldr	r0, [pc, #56]	; (8003414 <_ZN13PathFollowing4initEv+0x6c>)
 80033da:	f7fe f975 	bl	80016c8 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80033de:	ed97 7b06 	vldr	d7, [r7, #24]
 80033e2:	ed97 6b04 	vldr	d6, [r7, #16]
 80033e6:	ed97 5b02 	vldr	d5, [r7, #8]
 80033ea:	eeb0 2a45 	vmov.f32	s4, s10
 80033ee:	eef0 2a65 	vmov.f32	s5, s11
 80033f2:	eeb0 1a46 	vmov.f32	s2, s12
 80033f6:	eef0 1a66 	vmov.f32	s3, s13
 80033fa:	eeb0 0a47 	vmov.f32	s0, s14
 80033fe:	eef0 0a67 	vmov.f32	s1, s15
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f80c 	bl	8003420 <_ZN13PathFollowing7setGainEddd>
}
 8003408:	bf00      	nop
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	08017ba4 	.word	0x08017ba4
 8003414:	08017bac 	.word	0x08017bac
 8003418:	08017bb4 	.word	0x08017bb4
 800341c:	08017bbc 	.word	0x08017bbc

08003420 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003420:	b490      	push	{r4, r7}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	61f8      	str	r0, [r7, #28]
 8003428:	ed87 0b04 	vstr	d0, [r7, #16]
 800342c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003430:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003436:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800343a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800343e:	4a07      	ldr	r2, [pc, #28]	; (800345c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003440:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003444:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800344a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800344e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003452:	bf00      	nop
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bc90      	pop	{r4, r7}
 800345a:	4770      	bx	lr
 800345c:	20039d80 	.word	0x20039d80

08003460 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003460:	b490      	push	{r4, r7}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <_ZN13PathFollowing8getKxValEv+0x24>)
 800346a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800346e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003472:	eeb0 0a47 	vmov.f32	s0, s14
 8003476:	eef0 0a67 	vmov.f32	s1, s15
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bc90      	pop	{r4, r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20039d80 	.word	0x20039d80

08003488 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003488:	b490      	push	{r4, r7}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <_ZN13PathFollowing8getKyValEv+0x24>)
 8003492:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003496:	ec44 3b17 	vmov	d7, r3, r4
}
 800349a:	eeb0 0a47 	vmov.f32	s0, s14
 800349e:	eef0 0a67 	vmov.f32	s1, s15
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc90      	pop	{r4, r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20039d80 	.word	0x20039d80

080034b0 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 80034b0:	b490      	push	{r4, r7}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <_ZN13PathFollowing8getKtValEv+0x24>)
 80034ba:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80034be:	ec44 3b17 	vmov	d7, r3, r4
}
 80034c2:	eeb0 0a47 	vmov.f32	s0, s14
 80034c6:	eef0 0a67 	vmov.f32	s1, s15
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc90      	pop	{r4, r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20039d80 	.word	0x20039d80

080034d8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80034e0:	2088      	movs	r0, #136	; 0x88
 80034e2:	f7fe fc58 	bl	8001d96 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80034e6:	2080      	movs	r0, #128	; 0x80
 80034e8:	f7fe fc55 	bl	8001d96 <INA260_init>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003500:	2188      	movs	r1, #136	; 0x88
 8003502:	2002      	movs	r0, #2
 8003504:	f7fe fbe4 	bl	8001cd0 <INA260_read>
 8003508:	4603      	mov	r3, r0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f822 	bl	8000554 <__aeabi_i2d>
 8003510:	a30c      	add	r3, pc, #48	; (adr r3, 8003544 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fd f887 	bl	8000628 <__aeabi_dmul>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	4618      	mov	r0, r3
 8003520:	4621      	mov	r1, r4
 8003522:	f7fd fb79 	bl	8000c18 <__aeabi_d2f>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a03      	ldr	r2, [pc, #12]	; (8003540 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bd90      	pop	{r4, r7, pc}
 800353c:	f3af 8000 	nop.w
 8003540:	20000278 	.word	0x20000278
 8003544:	47ae147b 	.word	0x47ae147b
 8003548:	3f547ae1 	.word	0x3f547ae1

0800354c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	ee07 3a90 	vmov	s15, r3

}
 800355c:	eeb0 0a67 	vmov.f32	s0, s15
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	0000      	movs	r0, r0
 800356c:	0000      	movs	r0, r0
	...

08003570 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fc fff9 	bl	8000578 <__aeabi_f2d>
 8003586:	a311      	add	r3, pc, #68	; (adr r3, 80035cc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fd fabe 	bl	8000b0c <__aeabi_dcmplt>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e002      	b.n	80035aa <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000027c 	.word	0x2000027c
 80035cc:	9999999a 	.word	0x9999999a
 80035d0:	401d9999 	.word	0x401d9999

080035d4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80035e0:	2102      	movs	r1, #2
 80035e2:	4822      	ldr	r0, [pc, #136]	; (800366c <_ZN12RotarySwitch8getValueEv+0x98>)
 80035e4:	f005 f812 	bl	800860c <HAL_GPIO_ReadPin>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <_ZN12RotarySwitch8getValueEv+0x2c>
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003600:	2108      	movs	r1, #8
 8003602:	481a      	ldr	r0, [pc, #104]	; (800366c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003604:	f005 f802 	bl	800860c <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003620:	2110      	movs	r1, #16
 8003622:	4812      	ldr	r0, [pc, #72]	; (800366c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003624:	f004 fff2 	bl	800860c <HAL_GPIO_ReadPin>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	480a      	ldr	r0, [pc, #40]	; (800366c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003644:	f004 ffe2 	bl	800860c <HAL_GPIO_ReadPin>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	f043 0308 	orr.w	r3, r3, #8
 800365e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003660:	89fb      	ldrh	r3, [r7, #14]

}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40020c00 	.word	0x40020c00

08003670 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
{

}
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	2b04      	cmp	r3, #4
 8003698:	d111      	bne.n	80036be <_ZN10SideSensor12updateStatusEt+0x36>
 800369a:	4b28      	ldr	r3, [pc, #160]	; (800373c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f083 0301 	eor.w	r3, r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e010      	b.n	80036e0 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d10d      	bne.n	80036e0 <_ZN10SideSensor12updateStatusEt+0x58>
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d111      	bne.n	800370c <_ZN10SideSensor12updateStatusEt+0x84>
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f083 0301 	eor.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 800370a:	e011      	b.n	8003730 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003712:	d10d      	bne.n	8003730 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	f083 0302 	eor.w	r3, r3, #2
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	2000027e 	.word	0x2000027e
 8003740:	2000027f 	.word	0x2000027f

08003744 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003754:	3308      	adds	r3, #8
 8003756:	4611      	mov	r1, r2
 8003758:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800375c:	4618      	mov	r0, r3
 800375e:	f00f fa63 	bl	8012c28 <memcpy>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	08017be0 	.word	0x08017be0

08003798 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ed97 0a00 	vldr	s0, [r7]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fa92 	bl	8002ce0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80037c6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7ff fabf 	bl	8002d4e <_ZN6Logger9storeLog2Ef>
	}

}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff faea 	bl	8002dc2 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a06      	ldr	r2, [pc, #24]	; (800380c <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff faf7 	bl	8002dea <_ZN6Logger9saveLogs2EPKcS1_>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	08017dd4 	.word	0x08017dd4
 8003808:	08017de0 	.word	0x08017de0
 800380c:	08017dec 	.word	0x08017dec

08003810 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800381e:	2b00      	cmp	r3, #0
 8003820:	d046      	beq.n	80038b0 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3204      	adds	r2, #4
 8003834:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003850:	3301      	adds	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003862:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800386a:	2bf9      	cmp	r3, #249	; 0xf9
 800386c:	d903      	bls.n	8003876 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	22fa      	movs	r2, #250	; 0xfa
 8003872:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685c      	ldr	r4, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fe79 	bl	8000578 <__aeabi_f2d>
 8003886:	4605      	mov	r5, r0
 8003888:	460e      	mov	r6, r1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003890:	eef1 7a67 	vneg.f32	s15, s15
 8003894:	ee17 3a90 	vmov	r3, s15
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fe6d 	bl	8000578 <__aeabi_f2d>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	ec43 2b11 	vmov	d1, r2, r3
 80038a6:	ec46 5b10 	vmov	d0, r5, r6
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff fb68 	bl	8002f80 <_ZN5Motor8setRatioEdd>

	}

}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	20000280 	.word	0x20000280

080038bc <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fab7 	bl	8002e5c <_ZN6Logger5startEv>
	processing_flag_ = true;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fab4 	bl	8002e7a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003940 <_ZN20SystemIdentification4stopEv+0x40>
 800392a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003940 <_ZN20SystemIdentification4stopEv+0x40>
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fb26 	bl	8002f80 <_ZN5Motor8setRatioEdd>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	f3af 8000 	nop.w
	...

08003948 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	615a      	str	r2, [r3, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	635a      	str	r2, [r3, #52]	; 0x34

}
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f107 020c 	add.w	r2, r7, #12
 80039e0:	f107 0110 	add.w	r1, r7, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fce5 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80039ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80039ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80039fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039fe:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7fc fdb8 	bl	8000578 <__aeabi_f2d>
 8003a08:	a30b      	add	r3, pc, #44	; (adr r3, 8003a38 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fc fe0b 	bl	8000628 <__aeabi_dmul>
 8003a12:	4603      	mov	r3, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	4618      	mov	r0, r3
 8003a18:	4621      	mov	r1, r4
 8003a1a:	f7fd f8fd 	bl	8000c18 <__aeabi_d2f>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	ee07 3a90 	vmov	s15, r3
}
 8003a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	1ab1d998 	.word	0x1ab1d998
 8003a3c:	3f7830b5 	.word	0x3f7830b5

08003a40 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	ed2d 8b02 	vpush	{d8}
 8003a46:	b08d      	sub	sp, #52	; 0x34
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	ed93 7a00 	vldr	s14, [r3]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	ed93 8a01 	vldr	s16, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f840 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8003a70:	eef0 7a40 	vmov.f32	s15, s0
 8003a74:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003a78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fd70 	bl	8000578 <__aeabi_f2d>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	ee17 0a90 	vmov	r0, s15
 8003aae:	f7fc fd63 	bl	8000578 <__aeabi_f2d>
 8003ab2:	a36b      	add	r3, pc, #428	; (adr r3, 8003c60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fdb6 	bl	8000628 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc fbfa 	bl	80002bc <__adddf3>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	4618      	mov	r0, r3
 8003ace:	4621      	mov	r1, r4
 8003ad0:	f7fd f8a2 	bl	8000c18 <__aeabi_d2f>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003ad8:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ae0:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003aea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	ee17 0a90 	vmov	r0, s15
 8003af6:	f7fc fd3f 	bl	8000578 <__aeabi_f2d>
 8003afa:	a359      	add	r3, pc, #356	; (adr r3, 8003c60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc fd92 	bl	8000628 <__aeabi_dmul>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	f7fd f884 	bl	8000c18 <__aeabi_d2f>
 8003b10:	4603      	mov	r3, r0
 8003b12:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003b26:	4b52      	ldr	r3, [pc, #328]	; (8003c70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fd24 	bl	8000578 <__aeabi_f2d>
 8003b30:	4604      	mov	r4, r0
 8003b32:	460d      	mov	r5, r1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003b3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	ee17 0a90 	vmov	r0, s15
 8003b46:	f7fc fd17 	bl	8000578 <__aeabi_f2d>
 8003b4a:	a345      	add	r3, pc, #276	; (adr r3, 8003c60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f7fc fd6a 	bl	8000628 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fbae 	bl	80002bc <__adddf3>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	4618      	mov	r0, r3
 8003b66:	4621      	mov	r1, r4
 8003b68:	f7fd f856 	bl	8000c18 <__aeabi_d2f>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003b70:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b78:	4b3e      	ldr	r3, [pc, #248]	; (8003c74 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003b82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8a:	ee17 0a90 	vmov	r0, s15
 8003b8e:	f7fc fcf3 	bl	8000578 <__aeabi_f2d>
 8003b92:	a333      	add	r3, pc, #204	; (adr r3, 8003c60 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f7fc fd46 	bl	8000628 <__aeabi_dmul>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	f7fd f838 	bl	8000c18 <__aeabi_d2f>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003bac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc2:	edc7 7a05 	vstr	s15, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8003bca:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bce:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be0:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003be4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003be8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	eef1 7a67 	vneg.f32	s15, s15
 8003bfe:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003c06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c12:	ee17 0a90 	vmov	r0, s15
 8003c16:	f7fc fcaf 	bl	8000578 <__aeabi_f2d>
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	460e      	mov	r6, r1
 8003c1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2a:	ee17 0a90 	vmov	r0, s15
 8003c2e:	f7fc fca3 	bl	8000578 <__aeabi_f2d>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	ec43 2b11 	vmov	d1, r2, r3
 8003c3a:	ec46 5b10 	vmov	d0, r5, r6
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff f99e 	bl	8002f80 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	3734      	adds	r7, #52	; 0x34
 8003c54:	46bd      	mov	sp, r7
 8003c56:	ecbd 8b02 	vpop	{d8}
 8003c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5c:	f3af 8000 	nop.w
 8003c60:	d2f1a9fc 	.word	0xd2f1a9fc
 8003c64:	3f50624d 	.word	0x3f50624d
 8003c68:	2000028c 	.word	0x2000028c
 8003c6c:	20000284 	.word	0x20000284
 8003c70:	20000290 	.word	0x20000290
 8003c74:	20000288 	.word	0x20000288

08003c78 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c84:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cac:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cb0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	615a      	str	r2, [r3, #20]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cde:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ce2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fe5f 	bl	80039d0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fe8f 	bl	8003a40 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003d78 <_ZN12VelocityCtrl4stopEv+0x30>
 8003d60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003d78 <_ZN12VelocityCtrl4stopEv+0x30>
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f90b 	bl	8002f80 <_ZN5Motor8setRatioEdd>

}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	f3af 8000 	nop.w
	...

08003d80 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	ee07 3a90 	vmov	s15, r3
}
 8003d90:	eeb0 0a67 	vmov.f32	s0, s15
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003da6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003daa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d013      	beq.n	8003dde <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003db6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dba:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003dbe:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003dc6:	e000      	b.n	8003dca <ITM_SendChar+0x2c>
    {
      __NOP();
 8003dc8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003dca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f9      	beq.n	8003dc8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003dde:	687b      	ldr	r3, [r7, #4]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e009      	b.n	8003e12 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	60ba      	str	r2, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ffc9 	bl	8003d9e <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	dbf1      	blt.n	8003dfe <_write+0x12>
  }
  return len;
 8003e1a:	687b      	ldr	r3, [r7, #4]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 ff45 	bl	8005cc0 <cppExit>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10e      	bne.n	8003e70 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003e52:	f001 fea7 	bl	8005ba4 <cppFlip1ms>

		tim6_timer++;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e5e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d902      	bls.n	8003e70 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003e7a:	f001 fef9 	bl	8005c70 <cppFlip100ns>

		tim7_timer++;
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e86:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d902      	bls.n	8003e98 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003ea2:	f001 feef 	bl	8005c84 <cppFlip10ms>

		tim13_timer++;
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003eae:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d902      	bls.n	8003ec0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
	}

}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40001000 	.word	0x40001000
 8003ecc:	200399f0 	.word	0x200399f0
 8003ed0:	0001869f 	.word	0x0001869f
 8003ed4:	40001400 	.word	0x40001400
 8003ed8:	20039a34 	.word	0x20039a34
 8003edc:	40001c00 	.word	0x40001c00
 8003ee0:	20039a38 	.word	0x20039a38

08003ee4 <init>:

void init()
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eee:	4808      	ldr	r0, [pc, #32]	; (8003f10 <init+0x2c>)
 8003ef0:	f004 fba4 	bl	800863c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003ef4:	4807      	ldr	r0, [pc, #28]	; (8003f14 <init+0x30>)
 8003ef6:	f008 fa84 	bl	800c402 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003efa:	4807      	ldr	r0, [pc, #28]	; (8003f18 <init+0x34>)
 8003efc:	f008 fa81 	bl	800c402 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003f00:	4806      	ldr	r0, [pc, #24]	; (8003f1c <init+0x38>)
 8003f02:	f008 fa7e 	bl	800c402 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003f06:	f001 fd93 	bl	8005a30 <cppInit>

	//path_following_initialize();

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	20039b1c 	.word	0x20039b1c
 8003f18:	20039cc0 	.word	0x20039cc0
 8003f1c:	20039a3c 	.word	0x20039a3c

08003f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f24:	f003 f882 	bl	800702c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f28:	f000 f82a 	bl	8003f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f2c:	f000 fdbc 	bl	8004aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f30:	f000 fd8a 	bl	8004a48 <MX_DMA_Init>
  MX_I2C2_Init();
 8003f34:	f000 f9e8 	bl	8004308 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003f38:	f000 fa14 	bl	8004364 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003f3c:	f000 fa32 	bl	80043a4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003f40:	f000 fa66 	bl	8004410 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003f44:	f000 fb70 	bl	8004628 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003f48:	f000 fc3c 	bl	80047c4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003f4c:	f000 fd52 	bl	80049f4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003f50:	f00a fa2a 	bl	800e3a8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003f54:	f000 fbcc 	bl	80046f0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003f58:	f000 f9a8 	bl	80042ac <MX_I2C1_Init>
  MX_TIM3_Init();
 8003f5c:	f000 fb00 	bl	8004560 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003f60:	f000 fc88 	bl	8004874 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003f64:	f000 fcd4 	bl	8004910 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003f68:	f000 f898 	bl	800409c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003f6c:	f000 fbf6 	bl	800475c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003f70:	f000 fd1c 	bl	80049ac <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003f74:	f7ff ffb6 	bl	8003ee4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003f78:	f001 feb2 	bl	8005ce0 <cppLoop>
 8003f7c:	e7fc      	b.n	8003f78 <main+0x58>
	...

08003f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a4      	sub	sp, #144	; 0x90
 8003f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f8a:	2234      	movs	r2, #52	; 0x34
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f00e fe55 	bl	8012c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	223c      	movs	r2, #60	; 0x3c
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f00e fe46 	bl	8012c3e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <SystemClock_Config+0x114>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a36      	ldr	r2, [pc, #216]	; (8004094 <SystemClock_Config+0x114>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <SystemClock_Config+0x114>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <SystemClock_Config+0x118>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a30      	ldr	r2, [pc, #192]	; (8004098 <SystemClock_Config+0x118>)
 8003fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <SystemClock_Config+0x118>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ffc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ffe:	2308      	movs	r3, #8
 8004000:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004002:	23b4      	movs	r3, #180	; 0xb4
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004008:	2302      	movs	r3, #2
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800400e:	2308      	movs	r3, #8
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800401a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800401e:	4618      	mov	r0, r3
 8004020:	f005 ff46 	bl	8009eb0 <HAL_RCC_OscConfig>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800402a:	f000 fe93 	bl	8004d54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800402e:	f005 fac1 	bl	80095b4 <HAL_PWREx_EnableOverDrive>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004038:	f000 fe8c 	bl	8004d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800403c:	230f      	movs	r3, #15
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004040:	2302      	movs	r3, #2
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004044:	2300      	movs	r3, #0
 8004046:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800404c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800404e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004058:	2105      	movs	r1, #5
 800405a:	4618      	mov	r0, r3
 800405c:	f005 fafa 	bl	8009654 <HAL_RCC_ClockConfig>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004066:	f000 fe75 	bl	8004d54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800406a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800406e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004070:	2300      	movs	r3, #0
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004074:	2300      	movs	r3, #0
 8004076:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	4618      	mov	r0, r3
 800407e:	f005 fcd9 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004088:	f000 fe64 	bl	8004d54 <Error_Handler>
  }
}
 800408c:	bf00      	nop
 800408e:	3790      	adds	r7, #144	; 0x90
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	40007000 	.word	0x40007000

0800409c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040a2:	463b      	mov	r3, r7
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80040ae:	4b7c      	ldr	r3, [pc, #496]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040b0:	4a7c      	ldr	r2, [pc, #496]	; (80042a4 <MX_ADC2_Init+0x208>)
 80040b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040b4:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80040bc:	4b78      	ldr	r3, [pc, #480]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80040c2:	4b77      	ldr	r3, [pc, #476]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80040c8:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80040ce:	4b74      	ldr	r3, [pc, #464]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040d6:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040d8:	2200      	movs	r2, #0
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040dc:	4b70      	ldr	r3, [pc, #448]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040de:	4a72      	ldr	r2, [pc, #456]	; (80042a8 <MX_ADC2_Init+0x20c>)
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040e2:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80040e8:	4b6d      	ldr	r3, [pc, #436]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040ea:	220e      	movs	r2, #14
 80040ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80040ee:	4b6c      	ldr	r3, [pc, #432]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040f6:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80040fc:	4868      	ldr	r0, [pc, #416]	; (80042a0 <MX_ADC2_Init+0x204>)
 80040fe:	f003 f829 	bl	8007154 <HAL_ADC_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004108:	f000 fe24 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800410c:	230a      	movs	r3, #10
 800410e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004110:	2301      	movs	r3, #1
 8004112:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004114:	2306      	movs	r3, #6
 8004116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004118:	463b      	mov	r3, r7
 800411a:	4619      	mov	r1, r3
 800411c:	4860      	ldr	r0, [pc, #384]	; (80042a0 <MX_ADC2_Init+0x204>)
 800411e:	f003 f96d 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004128:	f000 fe14 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800412c:	230b      	movs	r3, #11
 800412e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004130:	2302      	movs	r3, #2
 8004132:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004134:	463b      	mov	r3, r7
 8004136:	4619      	mov	r1, r3
 8004138:	4859      	ldr	r0, [pc, #356]	; (80042a0 <MX_ADC2_Init+0x204>)
 800413a:	f003 f95f 	bl	80073fc <HAL_ADC_ConfigChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004144:	f000 fe06 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004148:	230c      	movs	r3, #12
 800414a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800414c:	2303      	movs	r3, #3
 800414e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004150:	463b      	mov	r3, r7
 8004152:	4619      	mov	r1, r3
 8004154:	4852      	ldr	r0, [pc, #328]	; (80042a0 <MX_ADC2_Init+0x204>)
 8004156:	f003 f951 	bl	80073fc <HAL_ADC_ConfigChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004160:	f000 fdf8 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004164:	230d      	movs	r3, #13
 8004166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004168:	2304      	movs	r3, #4
 800416a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800416c:	463b      	mov	r3, r7
 800416e:	4619      	mov	r1, r3
 8004170:	484b      	ldr	r0, [pc, #300]	; (80042a0 <MX_ADC2_Init+0x204>)
 8004172:	f003 f943 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800417c:	f000 fdea 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004180:	2300      	movs	r3, #0
 8004182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004184:	2305      	movs	r3, #5
 8004186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004188:	463b      	mov	r3, r7
 800418a:	4619      	mov	r1, r3
 800418c:	4844      	ldr	r0, [pc, #272]	; (80042a0 <MX_ADC2_Init+0x204>)
 800418e:	f003 f935 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004198:	f000 fddc 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800419c:	2301      	movs	r3, #1
 800419e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80041a0:	2306      	movs	r3, #6
 80041a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041a4:	463b      	mov	r3, r7
 80041a6:	4619      	mov	r1, r3
 80041a8:	483d      	ldr	r0, [pc, #244]	; (80042a0 <MX_ADC2_Init+0x204>)
 80041aa:	f003 f927 	bl	80073fc <HAL_ADC_ConfigChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80041b4:	f000 fdce 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80041b8:	2302      	movs	r3, #2
 80041ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80041bc:	2307      	movs	r3, #7
 80041be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041c0:	463b      	mov	r3, r7
 80041c2:	4619      	mov	r1, r3
 80041c4:	4836      	ldr	r0, [pc, #216]	; (80042a0 <MX_ADC2_Init+0x204>)
 80041c6:	f003 f919 	bl	80073fc <HAL_ADC_ConfigChannel>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80041d0:	f000 fdc0 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80041d4:	2303      	movs	r3, #3
 80041d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80041d8:	2308      	movs	r3, #8
 80041da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041dc:	463b      	mov	r3, r7
 80041de:	4619      	mov	r1, r3
 80041e0:	482f      	ldr	r0, [pc, #188]	; (80042a0 <MX_ADC2_Init+0x204>)
 80041e2:	f003 f90b 	bl	80073fc <HAL_ADC_ConfigChannel>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80041ec:	f000 fdb2 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80041f0:	2304      	movs	r3, #4
 80041f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80041f4:	2309      	movs	r3, #9
 80041f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041f8:	463b      	mov	r3, r7
 80041fa:	4619      	mov	r1, r3
 80041fc:	4828      	ldr	r0, [pc, #160]	; (80042a0 <MX_ADC2_Init+0x204>)
 80041fe:	f003 f8fd 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004208:	f000 fda4 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800420c:	2305      	movs	r3, #5
 800420e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004210:	230a      	movs	r3, #10
 8004212:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004214:	463b      	mov	r3, r7
 8004216:	4619      	mov	r1, r3
 8004218:	4821      	ldr	r0, [pc, #132]	; (80042a0 <MX_ADC2_Init+0x204>)
 800421a:	f003 f8ef 	bl	80073fc <HAL_ADC_ConfigChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004224:	f000 fd96 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004228:	2306      	movs	r3, #6
 800422a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800422c:	230b      	movs	r3, #11
 800422e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004230:	463b      	mov	r3, r7
 8004232:	4619      	mov	r1, r3
 8004234:	481a      	ldr	r0, [pc, #104]	; (80042a0 <MX_ADC2_Init+0x204>)
 8004236:	f003 f8e1 	bl	80073fc <HAL_ADC_ConfigChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004240:	f000 fd88 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004244:	2307      	movs	r3, #7
 8004246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004248:	230c      	movs	r3, #12
 800424a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800424c:	463b      	mov	r3, r7
 800424e:	4619      	mov	r1, r3
 8004250:	4813      	ldr	r0, [pc, #76]	; (80042a0 <MX_ADC2_Init+0x204>)
 8004252:	f003 f8d3 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800425c:	f000 fd7a 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004260:	2308      	movs	r3, #8
 8004262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004264:	230d      	movs	r3, #13
 8004266:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004268:	463b      	mov	r3, r7
 800426a:	4619      	mov	r1, r3
 800426c:	480c      	ldr	r0, [pc, #48]	; (80042a0 <MX_ADC2_Init+0x204>)
 800426e:	f003 f8c5 	bl	80073fc <HAL_ADC_ConfigChannel>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004278:	f000 fd6c 	bl	8004d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800427c:	2309      	movs	r3, #9
 800427e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004280:	230e      	movs	r3, #14
 8004282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004284:	463b      	mov	r3, r7
 8004286:	4619      	mov	r1, r3
 8004288:	4805      	ldr	r0, [pc, #20]	; (80042a0 <MX_ADC2_Init+0x204>)
 800428a:	f003 f8b7 	bl	80073fc <HAL_ADC_ConfigChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004294:	f000 fd5e 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200398c0 	.word	0x200398c0
 80042a4:	40012100 	.word	0x40012100
 80042a8:	0f000001 	.word	0x0f000001

080042ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <MX_I2C1_Init+0x50>)
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <MX_I2C1_Init+0x54>)
 80042b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <MX_I2C1_Init+0x50>)
 80042b8:	4a12      	ldr	r2, [pc, #72]	; (8004304 <MX_I2C1_Init+0x58>)
 80042ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <MX_I2C1_Init+0x50>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <MX_I2C1_Init+0x50>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <MX_I2C1_Init+0x50>)
 80042ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <MX_I2C1_Init+0x50>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <MX_I2C1_Init+0x50>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <MX_I2C1_Init+0x50>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <MX_I2C1_Init+0x50>)
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042e8:	4804      	ldr	r0, [pc, #16]	; (80042fc <MX_I2C1_Init+0x50>)
 80042ea:	f004 f9d9 	bl	80086a0 <HAL_I2C_Init>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042f4:	f000 fd2e 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20039908 	.word	0x20039908
 8004300:	40005400 	.word	0x40005400
 8004304:	000186a0 	.word	0x000186a0

08004308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <MX_I2C2_Init+0x50>)
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <MX_I2C2_Init+0x54>)
 8004310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_I2C2_Init+0x50>)
 8004314:	4a12      	ldr	r2, [pc, #72]	; (8004360 <MX_I2C2_Init+0x58>)
 8004316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_I2C2_Init+0x50>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_I2C2_Init+0x50>)
 8004320:	2200      	movs	r2, #0
 8004322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_I2C2_Init+0x50>)
 8004326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800432a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <MX_I2C2_Init+0x50>)
 800432e:	2200      	movs	r2, #0
 8004330:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_I2C2_Init+0x50>)
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <MX_I2C2_Init+0x50>)
 800433a:	2200      	movs	r2, #0
 800433c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_I2C2_Init+0x50>)
 8004340:	2280      	movs	r2, #128	; 0x80
 8004342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_I2C2_Init+0x50>)
 8004346:	f004 f9ab 	bl	80086a0 <HAL_I2C_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004350:	f000 fd00 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2003999c 	.word	0x2003999c
 800435c:	40005800 	.word	0x40005800
 8004360:	000186a0 	.word	0x000186a0

08004364 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <MX_SDIO_SD_Init+0x38>)
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <MX_SDIO_SD_Init+0x3c>)
 800436c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <MX_SDIO_SD_Init+0x38>)
 8004370:	2200      	movs	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <MX_SDIO_SD_Init+0x38>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <MX_SDIO_SD_Init+0x38>)
 800437c:	2200      	movs	r2, #0
 800437e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <MX_SDIO_SD_Init+0x38>)
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <MX_SDIO_SD_Init+0x38>)
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <MX_SDIO_SD_Init+0x38>)
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20039b9c 	.word	0x20039b9c
 80043a0:	40012c00 	.word	0x40012c00

080043a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <MX_SPI2_Init+0x64>)
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <MX_SPI2_Init+0x68>)
 80043ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <MX_SPI2_Init+0x64>)
 80043b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <MX_SPI2_Init+0x64>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <MX_SPI2_Init+0x64>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <MX_SPI2_Init+0x64>)
 80043c4:	2202      	movs	r2, #2
 80043c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <MX_SPI2_Init+0x64>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <MX_SPI2_Init+0x64>)
 80043d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <MX_SPI2_Init+0x64>)
 80043d8:	2228      	movs	r2, #40	; 0x28
 80043da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <MX_SPI2_Init+0x64>)
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <MX_SPI2_Init+0x64>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e8:	4b07      	ldr	r3, [pc, #28]	; (8004408 <MX_SPI2_Init+0x64>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <MX_SPI2_Init+0x64>)
 80043f0:	220a      	movs	r2, #10
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043f4:	4804      	ldr	r0, [pc, #16]	; (8004408 <MX_SPI2_Init+0x64>)
 80043f6:	f007 fa85 	bl	800b904 <HAL_SPI_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004400:	f000 fca8 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200397e8 	.word	0x200397e8
 800440c:	40003800 	.word	0x40003800

08004410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09a      	sub	sp, #104	; 0x68
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004416:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f00e fc0d 	bl	8012c3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800442e:	f107 0320 	add.w	r3, r7, #32
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	615a      	str	r2, [r3, #20]
 8004440:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004442:	463b      	mov	r3, r7
 8004444:	2220      	movs	r2, #32
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f00e fbf8 	bl	8012c3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800444e:	4b42      	ldr	r3, [pc, #264]	; (8004558 <MX_TIM1_Init+0x148>)
 8004450:	4a42      	ldr	r2, [pc, #264]	; (800455c <MX_TIM1_Init+0x14c>)
 8004452:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <MX_TIM1_Init+0x148>)
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445a:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <MX_TIM1_Init+0x148>)
 800445c:	2200      	movs	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004460:	4b3d      	ldr	r3, [pc, #244]	; (8004558 <MX_TIM1_Init+0x148>)
 8004462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <MX_TIM1_Init+0x148>)
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800446e:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <MX_TIM1_Init+0x148>)
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004474:	4b38      	ldr	r3, [pc, #224]	; (8004558 <MX_TIM1_Init+0x148>)
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800447a:	4837      	ldr	r0, [pc, #220]	; (8004558 <MX_TIM1_Init+0x148>)
 800447c:	f007 ffe5 	bl	800c44a <HAL_TIM_PWM_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004486:	f000 fc65 	bl	8004d54 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800448a:	2303      	movs	r3, #3
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800448e:	2300      	movs	r3, #0
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004492:	2301      	movs	r3, #1
 8004494:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004496:	2300      	movs	r3, #0
 8004498:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800449e:	2300      	movs	r3, #0
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044a2:	2301      	movs	r3, #1
 80044a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044a6:	2300      	movs	r3, #0
 80044a8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80044ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044b2:	4619      	mov	r1, r3
 80044b4:	4828      	ldr	r0, [pc, #160]	; (8004558 <MX_TIM1_Init+0x148>)
 80044b6:	f008 f831 	bl	800c51c <HAL_TIM_Encoder_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80044c0:	f000 fc48 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044d0:	4619      	mov	r1, r3
 80044d2:	4821      	ldr	r0, [pc, #132]	; (8004558 <MX_TIM1_Init+0x148>)
 80044d4:	f008 fd58 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80044de:	f000 fc39 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044e2:	2360      	movs	r3, #96	; 0x60
 80044e4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044fe:	f107 0320 	add.w	r3, r7, #32
 8004502:	2208      	movs	r2, #8
 8004504:	4619      	mov	r1, r3
 8004506:	4814      	ldr	r0, [pc, #80]	; (8004558 <MX_TIM1_Init+0x148>)
 8004508:	f008 f9da 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004512:	f000 fc1f 	bl	8004d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004516:	2300      	movs	r3, #0
 8004518:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800452a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800452e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004534:	463b      	mov	r3, r7
 8004536:	4619      	mov	r1, r3
 8004538:	4807      	ldr	r0, [pc, #28]	; (8004558 <MX_TIM1_Init+0x148>)
 800453a:	f008 fda1 	bl	800d080 <HAL_TIMEx_ConfigBreakDeadTime>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004544:	f000 fc06 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004548:	4803      	ldr	r0, [pc, #12]	; (8004558 <MX_TIM1_Init+0x148>)
 800454a:	f000 fff3 	bl	8005534 <HAL_TIM_MspPostInit>

}
 800454e:	bf00      	nop
 8004550:	3768      	adds	r7, #104	; 0x68
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20039b5c 	.word	0x20039b5c
 800455c:	40010000 	.word	0x40010000

08004560 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004566:	f107 0320 	add.w	r3, r7, #32
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	611a      	str	r2, [r3, #16]
 800457e:	615a      	str	r2, [r3, #20]
 8004580:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <MX_TIM3_Init+0xc0>)
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <MX_TIM3_Init+0xc4>)
 8004586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <MX_TIM3_Init+0xc0>)
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <MX_TIM3_Init+0xc0>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <MX_TIM3_Init+0xc0>)
 8004596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800459a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <MX_TIM3_Init+0xc0>)
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <MX_TIM3_Init+0xc0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045a8:	481d      	ldr	r0, [pc, #116]	; (8004620 <MX_TIM3_Init+0xc0>)
 80045aa:	f007 ff4e 	bl	800c44a <HAL_TIM_PWM_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80045b4:	f000 fbce 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045c0:	f107 0320 	add.w	r3, r7, #32
 80045c4:	4619      	mov	r1, r3
 80045c6:	4816      	ldr	r0, [pc, #88]	; (8004620 <MX_TIM3_Init+0xc0>)
 80045c8:	f008 fcde 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80045d2:	f000 fbbf 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045d6:	2360      	movs	r3, #96	; 0x60
 80045d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2200      	movs	r2, #0
 80045ea:	4619      	mov	r1, r3
 80045ec:	480c      	ldr	r0, [pc, #48]	; (8004620 <MX_TIM3_Init+0xc0>)
 80045ee:	f008 f967 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80045f8:	f000 fbac 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	2204      	movs	r2, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4807      	ldr	r0, [pc, #28]	; (8004620 <MX_TIM3_Init+0xc0>)
 8004604:	f008 f95c 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800460e:	f000 fba1 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004612:	4803      	ldr	r0, [pc, #12]	; (8004620 <MX_TIM3_Init+0xc0>)
 8004614:	f000 ff8e 	bl	8005534 <HAL_TIM_MspPostInit>

}
 8004618:	bf00      	nop
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200399f4 	.word	0x200399f4
 8004624:	40000400 	.word	0x40000400

08004628 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800462e:	f107 0320 	add.w	r3, r7, #32
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	609a      	str	r2, [r3, #8]
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	611a      	str	r2, [r3, #16]
 8004646:	615a      	str	r2, [r3, #20]
 8004648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <MX_TIM4_Init+0xc0>)
 800464c:	4a27      	ldr	r2, [pc, #156]	; (80046ec <MX_TIM4_Init+0xc4>)
 800464e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <MX_TIM4_Init+0xc0>)
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <MX_TIM4_Init+0xc0>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <MX_TIM4_Init+0xc0>)
 800465e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004662:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <MX_TIM4_Init+0xc0>)
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <MX_TIM4_Init+0xc0>)
 800466c:	2200      	movs	r2, #0
 800466e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004670:	481d      	ldr	r0, [pc, #116]	; (80046e8 <MX_TIM4_Init+0xc0>)
 8004672:	f007 feea 	bl	800c44a <HAL_TIM_PWM_Init>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800467c:	f000 fb6a 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004688:	f107 0320 	add.w	r3, r7, #32
 800468c:	4619      	mov	r1, r3
 800468e:	4816      	ldr	r0, [pc, #88]	; (80046e8 <MX_TIM4_Init+0xc0>)
 8004690:	f008 fc7a 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800469a:	f000 fb5b 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800469e:	2360      	movs	r3, #96	; 0x60
 80046a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	2208      	movs	r2, #8
 80046b2:	4619      	mov	r1, r3
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <MX_TIM4_Init+0xc0>)
 80046b6:	f008 f903 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80046c0:	f000 fb48 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046c4:	1d3b      	adds	r3, r7, #4
 80046c6:	220c      	movs	r2, #12
 80046c8:	4619      	mov	r1, r3
 80046ca:	4807      	ldr	r0, [pc, #28]	; (80046e8 <MX_TIM4_Init+0xc0>)
 80046cc:	f008 f8f8 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80046d6:	f000 fb3d 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046da:	4803      	ldr	r0, [pc, #12]	; (80046e8 <MX_TIM4_Init+0xc0>)
 80046dc:	f000 ff2a 	bl	8005534 <HAL_TIM_MspPostInit>

}
 80046e0:	bf00      	nop
 80046e2:	3728      	adds	r7, #40	; 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20039880 	.word	0x20039880
 80046ec:	40000800 	.word	0x40000800

080046f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f6:	463b      	mov	r3, r7
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <MX_TIM6_Init+0x64>)
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <MX_TIM6_Init+0x68>)
 8004702:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <MX_TIM6_Init+0x64>)
 8004706:	2259      	movs	r2, #89	; 0x59
 8004708:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <MX_TIM6_Init+0x64>)
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <MX_TIM6_Init+0x64>)
 8004712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004716:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <MX_TIM6_Init+0x64>)
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800471e:	480d      	ldr	r0, [pc, #52]	; (8004754 <MX_TIM6_Init+0x64>)
 8004720:	f007 fe44 	bl	800c3ac <HAL_TIM_Base_Init>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800472a:	f000 fb13 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004736:	463b      	mov	r3, r7
 8004738:	4619      	mov	r1, r3
 800473a:	4806      	ldr	r0, [pc, #24]	; (8004754 <MX_TIM6_Init+0x64>)
 800473c:	f008 fc24 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004746:	f000 fb05 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20039b1c 	.word	0x20039b1c
 8004758:	40001000 	.word	0x40001000

0800475c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004762:	463b      	mov	r3, r7
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <MX_TIM7_Init+0x60>)
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <MX_TIM7_Init+0x64>)
 800476e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <MX_TIM7_Init+0x60>)
 8004772:	22b3      	movs	r2, #179	; 0xb3
 8004774:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <MX_TIM7_Init+0x60>)
 8004778:	2200      	movs	r2, #0
 800477a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <MX_TIM7_Init+0x60>)
 800477e:	2231      	movs	r2, #49	; 0x31
 8004780:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <MX_TIM7_Init+0x60>)
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004788:	480c      	ldr	r0, [pc, #48]	; (80047bc <MX_TIM7_Init+0x60>)
 800478a:	f007 fe0f 	bl	800c3ac <HAL_TIM_Base_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004794:	f000 fade 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047a0:	463b      	mov	r3, r7
 80047a2:	4619      	mov	r1, r3
 80047a4:	4805      	ldr	r0, [pc, #20]	; (80047bc <MX_TIM7_Init+0x60>)
 80047a6:	f008 fbef 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80047b0:	f000 fad0 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20039cc0 	.word	0x20039cc0
 80047c0:	40001400 	.word	0x40001400

080047c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	2224      	movs	r2, #36	; 0x24
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00e fa33 	bl	8012c3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <MX_TIM8_Init+0xa8>)
 80047e2:	4a23      	ldr	r2, [pc, #140]	; (8004870 <MX_TIM8_Init+0xac>)
 80047e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <MX_TIM8_Init+0xa8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	; (800486c <MX_TIM8_Init+0xa8>)
 80047ee:	2210      	movs	r2, #16
 80047f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <MX_TIM8_Init+0xa8>)
 80047f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <MX_TIM8_Init+0xa8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <MX_TIM8_Init+0xa8>)
 8004802:	2200      	movs	r2, #0
 8004804:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <MX_TIM8_Init+0xa8>)
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800480c:	2303      	movs	r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004828:	2300      	movs	r3, #0
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	4619      	mov	r1, r3
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <MX_TIM8_Init+0xa8>)
 8004838:	f007 fe70 	bl	800c51c <HAL_TIM_Encoder_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004842:	f000 fa87 	bl	8004d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4806      	ldr	r0, [pc, #24]	; (800486c <MX_TIM8_Init+0xa8>)
 8004854:	f008 fb98 	bl	800cf88 <HAL_TIMEx_MasterConfigSynchronization>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800485e:	f000 fa79 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004862:	bf00      	nop
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20039840 	.word	0x20039840
 8004870:	40010400 	.word	0x40010400

08004874 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
 8004888:	615a      	str	r2, [r3, #20]
 800488a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <MX_TIM10_Init+0x94>)
 800488e:	4a1f      	ldr	r2, [pc, #124]	; (800490c <MX_TIM10_Init+0x98>)
 8004890:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004892:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <MX_TIM10_Init+0x94>)
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <MX_TIM10_Init+0x94>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800489e:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <MX_TIM10_Init+0x94>)
 80048a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <MX_TIM10_Init+0x94>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ac:	4b16      	ldr	r3, [pc, #88]	; (8004908 <MX_TIM10_Init+0x94>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80048b2:	4815      	ldr	r0, [pc, #84]	; (8004908 <MX_TIM10_Init+0x94>)
 80048b4:	f007 fd7a 	bl	800c3ac <HAL_TIM_Base_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80048be:	f000 fa49 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80048c2:	4811      	ldr	r0, [pc, #68]	; (8004908 <MX_TIM10_Init+0x94>)
 80048c4:	f007 fdc1 	bl	800c44a <HAL_TIM_PWM_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80048ce:	f000 fa41 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048d2:	2360      	movs	r3, #96	; 0x60
 80048d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	2200      	movs	r2, #0
 80048e6:	4619      	mov	r1, r3
 80048e8:	4807      	ldr	r0, [pc, #28]	; (8004908 <MX_TIM10_Init+0x94>)
 80048ea:	f007 ffe9 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80048f4:	f000 fa2e 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80048f8:	4803      	ldr	r0, [pc, #12]	; (8004908 <MX_TIM10_Init+0x94>)
 80048fa:	f000 fe1b 	bl	8005534 <HAL_TIM_MspPostInit>

}
 80048fe:	bf00      	nop
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2003995c 	.word	0x2003995c
 800490c:	40014400 	.word	0x40014400

08004910 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	611a      	str	r2, [r3, #16]
 8004924:	615a      	str	r2, [r3, #20]
 8004926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <MX_TIM11_Init+0x94>)
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <MX_TIM11_Init+0x98>)
 800492c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004934:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <MX_TIM11_Init+0x94>)
 800493c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004940:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004948:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <MX_TIM11_Init+0x94>)
 800494a:	2200      	movs	r2, #0
 800494c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800494e:	4815      	ldr	r0, [pc, #84]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004950:	f007 fd2c 	bl	800c3ac <HAL_TIM_Base_Init>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800495a:	f000 f9fb 	bl	8004d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800495e:	4811      	ldr	r0, [pc, #68]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004960:	f007 fd73 	bl	800c44a <HAL_TIM_PWM_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800496a:	f000 f9f3 	bl	8004d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800496e:	2360      	movs	r3, #96	; 0x60
 8004970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	2200      	movs	r2, #0
 8004982:	4619      	mov	r1, r3
 8004984:	4807      	ldr	r0, [pc, #28]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004986:	f007 ff9b 	bl	800c8c0 <HAL_TIM_PWM_ConfigChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004990:	f000 f9e0 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004994:	4803      	ldr	r0, [pc, #12]	; (80049a4 <MX_TIM11_Init+0x94>)
 8004996:	f000 fdcd 	bl	8005534 <HAL_TIM_MspPostInit>

}
 800499a:	bf00      	nop
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20039a7c 	.word	0x20039a7c
 80049a8:	40014800 	.word	0x40014800

080049ac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <MX_TIM13_Init+0x40>)
 80049b2:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <MX_TIM13_Init+0x44>)
 80049b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <MX_TIM13_Init+0x40>)
 80049b8:	2259      	movs	r2, #89	; 0x59
 80049ba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <MX_TIM13_Init+0x40>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <MX_TIM13_Init+0x40>)
 80049c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80049c8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <MX_TIM13_Init+0x40>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <MX_TIM13_Init+0x40>)
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_TIM13_Init+0x40>)
 80049d8:	f007 fce8 	bl	800c3ac <HAL_TIM_Base_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80049e2:	f000 f9b7 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20039a3c 	.word	0x20039a3c
 80049f0:	40001c00 	.word	0x40001c00

080049f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <MX_USART2_UART_Init+0x50>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a2a:	4805      	ldr	r0, [pc, #20]	; (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a2c:	f008 fb8e 	bl	800d14c <HAL_UART_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a36:	f000 f98d 	bl	8004d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20039c20 	.word	0x20039c20
 8004a44:	40004400 	.word	0x40004400

08004a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <MX_DMA_Init+0x5c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <MX_DMA_Init+0x5c>)
 8004a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <MX_DMA_Init+0x5c>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	203a      	movs	r0, #58	; 0x3a
 8004a70:	f003 f84f 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004a74:	203a      	movs	r0, #58	; 0x3a
 8004a76:	f003 f868 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	203b      	movs	r0, #59	; 0x3b
 8004a80:	f003 f847 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004a84:	203b      	movs	r0, #59	; 0x3b
 8004a86:	f003 f860 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2045      	movs	r0, #69	; 0x45
 8004a90:	f003 f83f 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004a94:	2045      	movs	r0, #69	; 0x45
 8004a96:	f003 f858 	bl	8007b4a <HAL_NVIC_EnableIRQ>

}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aae:	f107 031c 	add.w	r3, r7, #28
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	4b9c      	ldr	r3, [pc, #624]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a9b      	ldr	r2, [pc, #620]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004ac8:	f043 0310 	orr.w	r3, r3, #16
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	4b95      	ldr	r3, [pc, #596]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a94      	ldr	r2, [pc, #592]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aea:	4b92      	ldr	r3, [pc, #584]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	4b8e      	ldr	r3, [pc, #568]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a8d      	ldr	r2, [pc, #564]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b8b      	ldr	r3, [pc, #556]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	4b87      	ldr	r3, [pc, #540]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a86      	ldr	r2, [pc, #536]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30
 8004b22:	4b84      	ldr	r3, [pc, #528]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	4b80      	ldr	r3, [pc, #512]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4a7f      	ldr	r2, [pc, #508]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b38:	f043 0302 	orr.w	r3, r3, #2
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a78      	ldr	r2, [pc, #480]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b54:	f043 0308 	orr.w	r3, r3, #8
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b76      	ldr	r3, [pc, #472]	; (8004d34 <MX_GPIO_Init+0x28c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b66:	2200      	movs	r2, #0
 8004b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b6c:	4872      	ldr	r0, [pc, #456]	; (8004d38 <MX_GPIO_Init+0x290>)
 8004b6e:	f003 fd65 	bl	800863c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004b72:	2200      	movs	r2, #0
 8004b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b78:	4870      	ldr	r0, [pc, #448]	; (8004d3c <MX_GPIO_Init+0x294>)
 8004b7a:	f003 fd5f 	bl	800863c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b84:	486e      	ldr	r0, [pc, #440]	; (8004d40 <MX_GPIO_Init+0x298>)
 8004b86:	f003 fd59 	bl	800863c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004b90:	486c      	ldr	r0, [pc, #432]	; (8004d44 <MX_GPIO_Init+0x29c>)
 8004b92:	f003 fd53 	bl	800863c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b96:	2304      	movs	r3, #4
 8004b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004b9a:	4b6b      	ldr	r3, [pc, #428]	; (8004d48 <MX_GPIO_Init+0x2a0>)
 8004b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ba2:	f107 031c 	add.w	r3, r7, #28
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4863      	ldr	r0, [pc, #396]	; (8004d38 <MX_GPIO_Init+0x290>)
 8004baa:	f003 fb85 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004bae:	230f      	movs	r3, #15
 8004bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bba:	f107 031c 	add.w	r3, r7, #28
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4862      	ldr	r0, [pc, #392]	; (8004d4c <MX_GPIO_Init+0x2a4>)
 8004bc2:	f003 fb79 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004bc6:	23e1      	movs	r3, #225	; 0xe1
 8004bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	485a      	ldr	r0, [pc, #360]	; (8004d44 <MX_GPIO_Init+0x29c>)
 8004bda:	f003 fb6d 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004bde:	2303      	movs	r3, #3
 8004be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004be2:	2303      	movs	r3, #3
 8004be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bea:	f107 031c 	add.w	r3, r7, #28
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4852      	ldr	r0, [pc, #328]	; (8004d3c <MX_GPIO_Init+0x294>)
 8004bf2:	f003 fb61 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f107 031c 	add.w	r3, r7, #28
 8004c06:	4619      	mov	r1, r3
 8004c08:	484c      	ldr	r0, [pc, #304]	; (8004d3c <MX_GPIO_Init+0x294>)
 8004c0a:	f003 fb55 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004c0e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	4619      	mov	r1, r3
 8004c22:	4845      	ldr	r0, [pc, #276]	; (8004d38 <MX_GPIO_Init+0x290>)
 8004c24:	f003 fb48 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	4619      	mov	r1, r3
 8004c40:	483d      	ldr	r0, [pc, #244]	; (8004d38 <MX_GPIO_Init+0x290>)
 8004c42:	f003 fb39 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c58:	f107 031c 	add.w	r3, r7, #28
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4837      	ldr	r0, [pc, #220]	; (8004d3c <MX_GPIO_Init+0x294>)
 8004c60:	f003 fb2a 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c6a:	4b39      	ldr	r3, [pc, #228]	; (8004d50 <MX_GPIO_Init+0x2a8>)
 8004c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c72:	f107 031c 	add.w	r3, r7, #28
 8004c76:	4619      	mov	r1, r3
 8004c78:	4831      	ldr	r0, [pc, #196]	; (8004d40 <MX_GPIO_Init+0x298>)
 8004c7a:	f003 fb1d 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c84:	2301      	movs	r3, #1
 8004c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c90:	f107 031c 	add.w	r3, r7, #28
 8004c94:	4619      	mov	r1, r3
 8004c96:	482a      	ldr	r0, [pc, #168]	; (8004d40 <MX_GPIO_Init+0x298>)
 8004c98:	f003 fb0e 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004caa:	2300      	movs	r3, #0
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cae:	f107 031c 	add.w	r3, r7, #28
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4822      	ldr	r0, [pc, #136]	; (8004d40 <MX_GPIO_Init+0x298>)
 8004cb6:	f003 faff 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004cba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004cbe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	f107 031c 	add.w	r3, r7, #28
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	481c      	ldr	r0, [pc, #112]	; (8004d44 <MX_GPIO_Init+0x29c>)
 8004cd4:	f003 faf0 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce6:	f107 031c 	add.w	r3, r7, #28
 8004cea:	4619      	mov	r1, r3
 8004cec:	4815      	ldr	r0, [pc, #84]	; (8004d44 <MX_GPIO_Init+0x29c>)
 8004cee:	f003 fae3 	bl	80082b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8004cf2:	239b      	movs	r3, #155	; 0x9b
 8004cf4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cfe:	f107 031c 	add.w	r3, r7, #28
 8004d02:	4619      	mov	r1, r3
 8004d04:	480e      	ldr	r0, [pc, #56]	; (8004d40 <MX_GPIO_Init+0x298>)
 8004d06:	f003 fad7 	bl	80082b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2008      	movs	r0, #8
 8004d10:	f002 feff 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004d14:	2008      	movs	r0, #8
 8004d16:	f002 ff18 	bl	8007b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2017      	movs	r0, #23
 8004d20:	f002 fef7 	bl	8007b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d24:	2017      	movs	r0, #23
 8004d26:	f002 ff10 	bl	8007b4a <HAL_NVIC_EnableIRQ>

}
 8004d2a:	bf00      	nop
 8004d2c:	3730      	adds	r7, #48	; 0x30
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40020400 	.word	0x40020400
 8004d40:	40020c00 	.word	0x40020c00
 8004d44:	40020000 	.word	0x40020000
 8004d48:	10310000 	.word	0x10310000
 8004d4c:	40020800 	.word	0x40020800
 8004d50:	10110000 	.word	0x10110000

08004d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d5a:	e7fe      	b.n	8004d5a <Error_Handler+0x6>

08004d5c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_MspInit+0x4c>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <HAL_MspInit+0x4c>)
 8004d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d80:	6453      	str	r3, [r2, #68]	; 0x44
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <HAL_MspInit+0x4c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_MspInit+0x4c>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <HAL_MspInit+0x4c>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_MspInit+0x4c>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_ADC_MspInit+0x148>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	f040 808e 	bne.w	8004efc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	4b48      	ldr	r3, [pc, #288]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	4a47      	ldr	r2, [pc, #284]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dee:	6453      	str	r3, [r2, #68]	; 0x44
 8004df0:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e06:	f043 0304 	orr.w	r3, r3, #4
 8004e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0c:	4b3e      	ldr	r3, [pc, #248]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	4a39      	ldr	r2, [pc, #228]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6313      	str	r3, [r2, #48]	; 0x30
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	6313      	str	r3, [r2, #48]	; 0x30
 8004e44:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_ADC_MspInit+0x14c>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e50:	230f      	movs	r3, #15
 8004e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e54:	2303      	movs	r3, #3
 8004e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e5c:	f107 031c 	add.w	r3, r7, #28
 8004e60:	4619      	mov	r1, r3
 8004e62:	482a      	ldr	r0, [pc, #168]	; (8004f0c <HAL_ADC_MspInit+0x150>)
 8004e64:	f003 fa28 	bl	80082b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e68:	23ff      	movs	r3, #255	; 0xff
 8004e6a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e74:	f107 031c 	add.w	r3, r7, #28
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4825      	ldr	r0, [pc, #148]	; (8004f10 <HAL_ADC_MspInit+0x154>)
 8004e7c:	f003 fa1c 	bl	80082b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e80:	2303      	movs	r3, #3
 8004e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e84:	2303      	movs	r3, #3
 8004e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	4619      	mov	r1, r3
 8004e92:	4820      	ldr	r0, [pc, #128]	; (8004f14 <HAL_ADC_MspInit+0x158>)
 8004e94:	f003 fa10 	bl	80082b8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004e9a:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <HAL_ADC_MspInit+0x160>)
 8004e9c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004eb2:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eb8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ec4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ec8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ed8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eda:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004ee0:	480d      	ldr	r0, [pc, #52]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ee2:	f002 fe4d 	bl	8007b80 <HAL_DMA_Init>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004eec:	f7ff ff32 	bl	8004d54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef6:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <HAL_ADC_MspInit+0x15c>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004efc:	bf00      	nop
 8004efe:	3730      	adds	r7, #48	; 0x30
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40012100 	.word	0x40012100
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40020800 	.word	0x40020800
 8004f10:	40020000 	.word	0x40020000
 8004f14:	40020400 	.word	0x40020400
 8004f18:	20039c60 	.word	0x20039c60
 8004f1c:	40026440 	.word	0x40026440

08004f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 031c 	add.w	r3, r7, #28
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a32      	ldr	r2, [pc, #200]	; (8005008 <HAL_I2C_MspInit+0xe8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d12c      	bne.n	8004f9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	4b31      	ldr	r3, [pc, #196]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a30      	ldr	r2, [pc, #192]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b2e      	ldr	r3, [pc, #184]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f5e:	23c0      	movs	r3, #192	; 0xc0
 8004f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f62:	2312      	movs	r3, #18
 8004f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f66:	2301      	movs	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f6e:	2304      	movs	r3, #4
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f72:	f107 031c 	add.w	r3, r7, #28
 8004f76:	4619      	mov	r1, r3
 8004f78:	4825      	ldr	r0, [pc, #148]	; (8005010 <HAL_I2C_MspInit+0xf0>)
 8004f7a:	f003 f99d 	bl	80082b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a21      	ldr	r2, [pc, #132]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f9a:	e031      	b.n	8005000 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <HAL_I2C_MspInit+0xf4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d12c      	bne.n	8005000 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fc8:	2312      	movs	r3, #18
 8004fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	480c      	ldr	r0, [pc, #48]	; (8005010 <HAL_I2C_MspInit+0xf0>)
 8004fe0:	f003 f96a 	bl	80082b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	4a07      	ldr	r2, [pc, #28]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004fee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_I2C_MspInit+0xec>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40005400 	.word	0x40005400
 800500c:	40023800 	.word	0x40023800
 8005010:	40020400 	.word	0x40020400
 8005014:	40005800 	.word	0x40005800

08005018 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a69      	ldr	r2, [pc, #420]	; (80051dc <HAL_SD_MspInit+0x1c4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	f040 80cb 	bne.w	80051d2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	4a66      	ldr	r2, [pc, #408]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 8005046:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800504a:	6453      	str	r3, [r2, #68]	; 0x44
 800504c:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	4b60      	ldr	r3, [pc, #384]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	4a5f      	ldr	r2, [pc, #380]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 8005062:	f043 0304 	orr.w	r3, r3, #4
 8005066:	6313      	str	r3, [r2, #48]	; 0x30
 8005068:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	4b59      	ldr	r3, [pc, #356]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	4a58      	ldr	r2, [pc, #352]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 800507e:	f043 0308 	orr.w	r3, r3, #8
 8005082:	6313      	str	r3, [r2, #48]	; 0x30
 8005084:	4b56      	ldr	r3, [pc, #344]	; (80051e0 <HAL_SD_MspInit+0x1c8>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005090:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005094:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	2302      	movs	r3, #2
 8005098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509e:	2303      	movs	r3, #3
 80050a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050a2:	230c      	movs	r3, #12
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	4619      	mov	r1, r3
 80050ac:	484d      	ldr	r0, [pc, #308]	; (80051e4 <HAL_SD_MspInit+0x1cc>)
 80050ae:	f003 f903 	bl	80082b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050b2:	2304      	movs	r3, #4
 80050b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b6:	2302      	movs	r3, #2
 80050b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050be:	2303      	movs	r3, #3
 80050c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050c2:	230c      	movs	r3, #12
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	4619      	mov	r1, r3
 80050cc:	4846      	ldr	r0, [pc, #280]	; (80051e8 <HAL_SD_MspInit+0x1d0>)
 80050ce:	f003 f8f3 	bl	80082b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80050d2:	4b46      	ldr	r3, [pc, #280]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050d4:	4a46      	ldr	r2, [pc, #280]	; (80051f0 <HAL_SD_MspInit+0x1d8>)
 80050d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80050d8:	4b44      	ldr	r3, [pc, #272]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050de:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050e0:	4b42      	ldr	r3, [pc, #264]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e6:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050ec:	4b3f      	ldr	r3, [pc, #252]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050f4:	4b3d      	ldr	r3, [pc, #244]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050fc:	4b3b      	ldr	r3, [pc, #236]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 80050fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005102:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005104:	4b39      	ldr	r3, [pc, #228]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005106:	2220      	movs	r2, #32
 8005108:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800510a:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 800510c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005110:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005114:	2204      	movs	r2, #4
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005118:	4b34      	ldr	r3, [pc, #208]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 800511a:	2203      	movs	r2, #3
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800511e:	4b33      	ldr	r3, [pc, #204]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005120:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005124:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005126:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005128:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800512e:	482f      	ldr	r0, [pc, #188]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005130:	f002 fd26 	bl	8007b80 <HAL_DMA_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800513a:	f7ff fe0b 	bl	8004d54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_SD_MspInit+0x1d4>)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 800514c:	4a2a      	ldr	r2, [pc, #168]	; (80051f8 <HAL_SD_MspInit+0x1e0>)
 800514e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005156:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005158:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 800515a:	2240      	movs	r2, #64	; 0x40
 800515c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005164:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800516a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 800516e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005172:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800517a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 800517e:	2220      	movs	r2, #32
 8005180:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005184:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005188:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800518a:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 800518c:	2204      	movs	r2, #4
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005192:	2203      	movs	r2, #3
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 8005198:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800519c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800519e:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 80051a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80051a6:	4813      	ldr	r0, [pc, #76]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 80051a8:	f002 fcea 	bl	8007b80 <HAL_DMA_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80051b2:	f7ff fdcf 	bl	8004d54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <HAL_SD_MspInit+0x1dc>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	2031      	movs	r0, #49	; 0x31
 80051c8:	f002 fca3 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80051cc:	2031      	movs	r0, #49	; 0x31
 80051ce:	f002 fcbc 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80051d2:	bf00      	nop
 80051d4:	3728      	adds	r7, #40	; 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40020800 	.word	0x40020800
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	20039788 	.word	0x20039788
 80051f0:	40026458 	.word	0x40026458
 80051f4:	20039abc 	.word	0x20039abc
 80051f8:	400264a0 	.word	0x400264a0

080051fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <HAL_SPI_MspInit+0x84>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d12c      	bne.n	8005278 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_SPI_MspInit+0x88>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	4a17      	ldr	r2, [pc, #92]	; (8005284 <HAL_SPI_MspInit+0x88>)
 8005228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_SPI_MspInit+0x88>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_SPI_MspInit+0x88>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <HAL_SPI_MspInit+0x88>)
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	6313      	str	r3, [r2, #48]	; 0x30
 800524a:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <HAL_SPI_MspInit+0x88>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005256:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800525a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005264:	2303      	movs	r3, #3
 8005266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005268:	2305      	movs	r3, #5
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4619      	mov	r1, r3
 8005272:	4805      	ldr	r0, [pc, #20]	; (8005288 <HAL_SPI_MspInit+0x8c>)
 8005274:	f003 f820 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005278:	bf00      	nop
 800527a:	3728      	adds	r7, #40	; 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40003800 	.word	0x40003800
 8005284:	40023800 	.word	0x40023800
 8005288:	40020400 	.word	0x40020400

0800528c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HAL_TIM_PWM_MspInit+0xd4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d12d      	bne.n	800530a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052d4:	f043 0310 	orr.w	r3, r3, #16
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b22      	ldr	r3, [pc, #136]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80052e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2302      	movs	r3, #2
 80052ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052f8:	2301      	movs	r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052fc:	f107 031c 	add.w	r3, r7, #28
 8005300:	4619      	mov	r1, r3
 8005302:	4819      	ldr	r0, [pc, #100]	; (8005368 <HAL_TIM_PWM_MspInit+0xdc>)
 8005304:	f002 ffd8 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005308:	e026      	b.n	8005358 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_TIM_PWM_MspInit+0xe0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10e      	bne.n	8005332 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 800531e:	f043 0302 	orr.w	r3, r3, #2
 8005322:	6413      	str	r3, [r2, #64]	; 0x40
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	693b      	ldr	r3, [r7, #16]
}
 8005330:	e012      	b.n	8005358 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <HAL_TIM_PWM_MspInit+0xe4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10d      	bne.n	8005358 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	4a07      	ldr	r2, [pc, #28]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6413      	str	r3, [r2, #64]	; 0x40
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_TIM_PWM_MspInit+0xd8>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	bf00      	nop
 800535a:	3730      	adds	r7, #48	; 0x30
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40010000 	.word	0x40010000
 8005364:	40023800 	.word	0x40023800
 8005368:	40021000 	.word	0x40021000
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800

08005374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a3e      	ldr	r2, [pc, #248]	; (800547c <HAL_TIM_Base_MspInit+0x108>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d116      	bne.n	80053b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005390:	f043 0310 	orr.w	r3, r3, #16
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
 8005396:	4b3a      	ldr	r3, [pc, #232]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2101      	movs	r1, #1
 80053a6:	2036      	movs	r0, #54	; 0x36
 80053a8:	f002 fbb3 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053ac:	2036      	movs	r0, #54	; 0x36
 80053ae:	f002 fbcc 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80053b2:	e05e      	b.n	8005472 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a32      	ldr	r2, [pc, #200]	; (8005484 <HAL_TIM_Base_MspInit+0x110>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d116      	bne.n	80053ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	6413      	str	r3, [r2, #64]	; 0x40
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	2037      	movs	r0, #55	; 0x37
 80053e0:	f002 fb97 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053e4:	2037      	movs	r0, #55	; 0x37
 80053e6:	f002 fbb0 	bl	8007b4a <HAL_NVIC_EnableIRQ>
}
 80053ea:	e042      	b.n	8005472 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a25      	ldr	r2, [pc, #148]	; (8005488 <HAL_TIM_Base_MspInit+0x114>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	4a20      	ldr	r2, [pc, #128]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005404:	6453      	str	r3, [r2, #68]	; 0x44
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	e02e      	b.n	8005472 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <HAL_TIM_Base_MspInit+0x118>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10e      	bne.n	800543c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800542c:	6453      	str	r3, [r2, #68]	; 0x44
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
}
 800543a:	e01a      	b.n	8005472 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_TIM_Base_MspInit+0x11c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d115      	bne.n	8005472 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005454:	6413      	str	r3, [r2, #64]	; 0x40
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_TIM_Base_MspInit+0x10c>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	202c      	movs	r0, #44	; 0x2c
 8005468:	f002 fb53 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800546c:	202c      	movs	r0, #44	; 0x2c
 800546e:	f002 fb6c 	bl	8007b4a <HAL_NVIC_EnableIRQ>
}
 8005472:	bf00      	nop
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40001000 	.word	0x40001000
 8005480:	40023800 	.word	0x40023800
 8005484:	40001400 	.word	0x40001400
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800
 8005490:	40001c00 	.word	0x40001c00

08005494 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_TIM_Encoder_MspInit+0x94>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d133      	bne.n	800551e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054c0:	f043 0302 	orr.w	r3, r3, #2
 80054c4:	6453      	str	r3, [r2, #68]	; 0x44
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a14      	ldr	r2, [pc, #80]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_TIM_Encoder_MspInit+0x98>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054ee:	23c0      	movs	r3, #192	; 0xc0
 80054f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054fe:	2303      	movs	r3, #3
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	4619      	mov	r1, r3
 8005508:	4809      	ldr	r0, [pc, #36]	; (8005530 <HAL_TIM_Encoder_MspInit+0x9c>)
 800550a:	f002 fed5 	bl	80082b8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800550e:	2200      	movs	r2, #0
 8005510:	2100      	movs	r1, #0
 8005512:	202c      	movs	r0, #44	; 0x2c
 8005514:	f002 fafd 	bl	8007b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005518:	202c      	movs	r0, #44	; 0x2c
 800551a:	f002 fb16 	bl	8007b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800551e:	bf00      	nop
 8005520:	3728      	adds	r7, #40	; 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40010400 	.word	0x40010400
 800552c:	40023800 	.word	0x40023800
 8005530:	40020800 	.word	0x40020800

08005534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08c      	sub	sp, #48	; 0x30
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800553c:	f107 031c 	add.w	r3, r7, #28
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5c      	ldr	r2, [pc, #368]	; (80056c4 <HAL_TIM_MspPostInit+0x190>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d11f      	bne.n	8005596 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4a5a      	ldr	r2, [pc, #360]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005560:	f043 0310 	orr.w	r3, r3, #16
 8005564:	6313      	str	r3, [r2, #48]	; 0x30
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	2302      	movs	r3, #2
 800557a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	2300      	movs	r3, #0
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005584:	2301      	movs	r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005588:	f107 031c 	add.w	r3, r7, #28
 800558c:	4619      	mov	r1, r3
 800558e:	484f      	ldr	r0, [pc, #316]	; (80056cc <HAL_TIM_MspPostInit+0x198>)
 8005590:	f002 fe92 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005594:	e091      	b.n	80056ba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a4d      	ldr	r2, [pc, #308]	; (80056d0 <HAL_TIM_MspPostInit+0x19c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d11e      	bne.n	80055de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	4b48      	ldr	r3, [pc, #288]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055aa:	f043 0302 	orr.w	r3, r3, #2
 80055ae:	6313      	str	r3, [r2, #48]	; 0x30
 80055b0:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055bc:	2330      	movs	r3, #48	; 0x30
 80055be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c0:	2302      	movs	r3, #2
 80055c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c8:	2300      	movs	r3, #0
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055cc:	2302      	movs	r3, #2
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d0:	f107 031c 	add.w	r3, r7, #28
 80055d4:	4619      	mov	r1, r3
 80055d6:	483f      	ldr	r0, [pc, #252]	; (80056d4 <HAL_TIM_MspPostInit+0x1a0>)
 80055d8:	f002 fe6e 	bl	80082b8 <HAL_GPIO_Init>
}
 80055dc:	e06d      	b.n	80056ba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a3d      	ldr	r2, [pc, #244]	; (80056d8 <HAL_TIM_MspPostInit+0x1a4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d11f      	bne.n	8005628 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055f2:	f043 0308 	orr.w	r3, r3, #8
 80055f6:	6313      	str	r3, [r2, #48]	; 0x30
 80055f8:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2302      	movs	r3, #2
 800560c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005612:	2300      	movs	r3, #0
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005616:	2302      	movs	r3, #2
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800561a:	f107 031c 	add.w	r3, r7, #28
 800561e:	4619      	mov	r1, r3
 8005620:	482e      	ldr	r0, [pc, #184]	; (80056dc <HAL_TIM_MspPostInit+0x1a8>)
 8005622:	f002 fe49 	bl	80082b8 <HAL_GPIO_Init>
}
 8005626:	e048      	b.n	80056ba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <HAL_TIM_MspPostInit+0x1ac>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d11f      	bne.n	8005672 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	6313      	str	r3, [r2, #48]	; 0x30
 8005642:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800564e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005654:	2302      	movs	r3, #2
 8005656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005658:	2300      	movs	r3, #0
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565c:	2300      	movs	r3, #0
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005660:	2303      	movs	r3, #3
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005664:	f107 031c 	add.w	r3, r7, #28
 8005668:	4619      	mov	r1, r3
 800566a:	481a      	ldr	r0, [pc, #104]	; (80056d4 <HAL_TIM_MspPostInit+0x1a0>)
 800566c:	f002 fe24 	bl	80082b8 <HAL_GPIO_Init>
}
 8005670:	e023      	b.n	80056ba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_TIM_MspPostInit+0x1b0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d11e      	bne.n	80056ba <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 8005686:	f043 0302 	orr.w	r3, r3, #2
 800568a:	6313      	str	r3, [r2, #48]	; 0x30
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <HAL_TIM_MspPostInit+0x194>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800569c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569e:	2302      	movs	r3, #2
 80056a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a6:	2300      	movs	r3, #0
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80056aa:	2303      	movs	r3, #3
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ae:	f107 031c 	add.w	r3, r7, #28
 80056b2:	4619      	mov	r1, r3
 80056b4:	4807      	ldr	r0, [pc, #28]	; (80056d4 <HAL_TIM_MspPostInit+0x1a0>)
 80056b6:	f002 fdff 	bl	80082b8 <HAL_GPIO_Init>
}
 80056ba:	bf00      	nop
 80056bc:	3730      	adds	r7, #48	; 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40023800 	.word	0x40023800
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40020400 	.word	0x40020400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40020c00 	.word	0x40020c00
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f0:	f107 0314 	add.w	r3, r7, #20
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_UART_MspInit+0x84>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d12b      	bne.n	8005762 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	4b18      	ldr	r3, [pc, #96]	; (8005770 <HAL_UART_MspInit+0x88>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_UART_MspInit+0x88>)
 8005714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005718:	6413      	str	r3, [r2, #64]	; 0x40
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_UART_MspInit+0x88>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_UART_MspInit+0x88>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <HAL_UART_MspInit+0x88>)
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	6313      	str	r3, [r2, #48]	; 0x30
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_UART_MspInit+0x88>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005742:	2360      	movs	r3, #96	; 0x60
 8005744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005746:	2302      	movs	r3, #2
 8005748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574e:	2303      	movs	r3, #3
 8005750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005752:	2307      	movs	r3, #7
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	4619      	mov	r1, r3
 800575c:	4805      	ldr	r0, [pc, #20]	; (8005774 <HAL_UART_MspInit+0x8c>)
 800575e:	f002 fdab 	bl	80082b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005762:	bf00      	nop
 8005764:	3728      	adds	r7, #40	; 0x28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40004400 	.word	0x40004400
 8005770:	40023800 	.word	0x40023800
 8005774:	40020c00 	.word	0x40020c00

08005778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800577c:	e7fe      	b.n	800577c <NMI_Handler+0x4>

0800577e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005782:	e7fe      	b.n	8005782 <HardFault_Handler+0x4>

08005784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005788:	e7fe      	b.n	8005788 <MemManage_Handler+0x4>

0800578a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800578e:	e7fe      	b.n	800578e <BusFault_Handler+0x4>

08005790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005794:	e7fe      	b.n	8005794 <UsageFault_Handler+0x4>

08005796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005796:	b480      	push	{r7}
 8005798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800579a:	bf00      	nop
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057c4:	f001 fc84 	bl	80070d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}

080057cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057d0:	2004      	movs	r0, #4
 80057d2:	f002 ff4d 	bl	8008670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}

080057da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057e2:	f002 ff45 	bl	8008670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057f0:	4803      	ldr	r0, [pc, #12]	; (8005800 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80057f2:	f006 ff5c 	bl	800c6ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80057f6:	4803      	ldr	r0, [pc, #12]	; (8005804 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80057f8:	f006 ff59 	bl	800c6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20039840 	.word	0x20039840
 8005804:	20039a3c 	.word	0x20039a3c

08005808 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <SDIO_IRQHandler+0x10>)
 800580e:	f004 fff5 	bl	800a7fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20039b9c 	.word	0x20039b9c

0800581c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <TIM6_DAC_IRQHandler+0x10>)
 8005822:	f006 ff44 	bl	800c6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20039b1c 	.word	0x20039b1c

08005830 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <TIM7_IRQHandler+0x10>)
 8005836:	f006 ff3a 	bl	800c6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20039cc0 	.word	0x20039cc0

08005844 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005848:	4802      	ldr	r0, [pc, #8]	; (8005854 <DMA2_Stream2_IRQHandler+0x10>)
 800584a:	f002 fac1 	bl	8007dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20039c60 	.word	0x20039c60

08005858 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800585c:	4802      	ldr	r0, [pc, #8]	; (8005868 <DMA2_Stream3_IRQHandler+0x10>)
 800585e:	f002 fab7 	bl	8007dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005862:	bf00      	nop
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20039788 	.word	0x20039788

0800586c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005870:	4802      	ldr	r0, [pc, #8]	; (800587c <DMA2_Stream6_IRQHandler+0x10>)
 8005872:	f002 faad 	bl	8007dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20039abc 	.word	0x20039abc

08005880 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e00a      	b.n	80058a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005892:	f3af 8000 	nop.w
 8005896:	4601      	mov	r1, r0
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	60ba      	str	r2, [r7, #8]
 800589e:	b2ca      	uxtb	r2, r1
 80058a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3301      	adds	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	dbf0      	blt.n	8005892 <_read+0x12>
	}

return len;
 80058b0:	687b      	ldr	r3, [r7, #4]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
	return -1;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058e2:	605a      	str	r2, [r3, #4]
	return 0;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_isatty>:

int _isatty(int file)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
	return 1;
 80058fa:	2301      	movs	r3, #1
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
	return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800592c:	4a14      	ldr	r2, [pc, #80]	; (8005980 <_sbrk+0x5c>)
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <_sbrk+0x60>)
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005938:	4b13      	ldr	r3, [pc, #76]	; (8005988 <_sbrk+0x64>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <_sbrk+0x64>)
 8005942:	4a12      	ldr	r2, [pc, #72]	; (800598c <_sbrk+0x68>)
 8005944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <_sbrk+0x64>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d207      	bcs.n	8005964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005954:	f00d f93e 	bl	8012bd4 <__errno>
 8005958:	4602      	mov	r2, r0
 800595a:	230c      	movs	r3, #12
 800595c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	e009      	b.n	8005978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <_sbrk+0x64>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <_sbrk+0x64>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	4a05      	ldr	r2, [pc, #20]	; (8005988 <_sbrk+0x64>)
 8005974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20050000 	.word	0x20050000
 8005984:	00000800 	.word	0x00000800
 8005988:	20000294 	.word	0x20000294
 800598c:	2003be10 	.word	0x2003be10

08005990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005994:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <SystemInit+0x28>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <SystemInit+0x28>)
 800599c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <SystemInit+0x28>)
 80059a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059aa:	609a      	str	r2, [r3, #8]
#endif
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
	lcd_clear();
 80059c0:	f7fb fb6e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2000      	movs	r0, #0
 80059c8:	f7fb fb7a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80059cc:	4814      	ldr	r0, [pc, #80]	; (8005a20 <batteryLowMode+0x64>)
 80059ce:	f7fb fba1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059d2:	2101      	movs	r1, #1
 80059d4:	2000      	movs	r0, #0
 80059d6:	f7fb fb73 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80059da:	4812      	ldr	r0, [pc, #72]	; (8005a24 <batteryLowMode+0x68>)
 80059dc:	f7fb fb9a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80059e0:	2152      	movs	r1, #82	; 0x52
 80059e2:	4811      	ldr	r0, [pc, #68]	; (8005a28 <batteryLowMode+0x6c>)
 80059e4:	f7fc fa56 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059e8:	2064      	movs	r0, #100	; 0x64
 80059ea:	f001 fb91 	bl	8007110 <HAL_Delay>
		led.fullColor('Y');
 80059ee:	2159      	movs	r1, #89	; 0x59
 80059f0:	480d      	ldr	r0, [pc, #52]	; (8005a28 <batteryLowMode+0x6c>)
 80059f2:	f7fc fa4f 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059f6:	2064      	movs	r0, #100	; 0x64
 80059f8:	f001 fb8a 	bl	8007110 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80059fc:	480b      	ldr	r0, [pc, #44]	; (8005a2c <batteryLowMode+0x70>)
 80059fe:	f7fc f9e5 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0e6      	beq.n	80059e0 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a16:	f001 fb7b 	bl	8007110 <HAL_Delay>
			break;
 8005a1a:	bf00      	nop
		}
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	08017df8 	.word	0x08017df8
 8005a24:	08017e00 	.word	0x08017e00
 8005a28:	200005a0 	.word	0x200005a0
 8005a2c:	20000594 	.word	0x20000594

08005a30 <cppInit>:

void cppInit(void)
{
 8005a30:	b598      	push	{r3, r4, r7, lr}
 8005a32:	af00      	add	r7, sp, #0
	lcd_init();
 8005a34:	f7fb faf0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005a38:	4844      	ldr	r0, [pc, #272]	; (8005b4c <cppInit+0x11c>)
 8005a3a:	f7fd fd4d 	bl	80034d8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005a3e:	2064      	movs	r0, #100	; 0x64
 8005a40:	f001 fb66 	bl	8007110 <HAL_Delay>
	power_sensor.updateValues();
 8005a44:	4841      	ldr	r0, [pc, #260]	; (8005b4c <cppInit+0x11c>)
 8005a46:	f7fd fd57 	bl	80034f8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005a4a:	f7fb fb29 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fb fb35 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005a56:	483e      	ldr	r0, [pc, #248]	; (8005b50 <cppInit+0x120>)
 8005a58:	f7fb fb5c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fb fb2e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005a64:	4839      	ldr	r0, [pc, #228]	; (8005b4c <cppInit+0x11c>)
 8005a66:	f7fd fd71 	bl	800354c <_ZN11PowerSensor17getButteryVoltageEv>
 8005a6a:	ee10 3a10 	vmov	r3, s0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fa fd82 	bl	8000578 <__aeabi_f2d>
 8005a74:	4603      	mov	r3, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	4835      	ldr	r0, [pc, #212]	; (8005b54 <cppInit+0x124>)
 8005a7e:	f7fb fb49 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a86:	f001 fb43 	bl	8007110 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a8a:	4830      	ldr	r0, [pc, #192]	; (8005b4c <cppInit+0x11c>)
 8005a8c:	f7fd fd70 	bl	8003570 <_ZN11PowerSensor12butteryCheckEv>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <cppInit+0x6a>
 8005a96:	f7ff ff91 	bl	80059bc <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a9a:	482f      	ldr	r0, [pc, #188]	; (8005b58 <cppInit+0x128>)
 8005a9c:	f7fd f8ce 	bl	8002c3c <_ZN6Logger10sdCardInitEv>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <cppInit+0x86>
		led.fullColor('G');
 8005aa6:	2147      	movs	r1, #71	; 0x47
 8005aa8:	482c      	ldr	r0, [pc, #176]	; (8005b5c <cppInit+0x12c>)
 8005aaa:	f7fc f9f3 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005aae:	2064      	movs	r0, #100	; 0x64
 8005ab0:	f001 fb2e 	bl	8007110 <HAL_Delay>
 8005ab4:	e006      	b.n	8005ac4 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005ab6:	2152      	movs	r1, #82	; 0x52
 8005ab8:	4828      	ldr	r0, [pc, #160]	; (8005b5c <cppInit+0x12c>)
 8005aba:	f7fc f9eb 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005abe:	2064      	movs	r0, #100	; 0x64
 8005ac0:	f001 fb26 	bl	8007110 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005ac4:	4826      	ldr	r0, [pc, #152]	; (8005b60 <cppInit+0x130>)
 8005ac6:	f7fc fb41 	bl	800214c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005aca:	4826      	ldr	r0, [pc, #152]	; (8005b64 <cppInit+0x134>)
 8005acc:	f7fd f9f6 	bl	8002ebc <_ZN5Motor4initEv>
	encoder.init();
 8005ad0:	4825      	ldr	r0, [pc, #148]	; (8005b68 <cppInit+0x138>)
 8005ad2:	f7fb fb63 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005ad6:	4825      	ldr	r0, [pc, #148]	; (8005b6c <cppInit+0x13c>)
 8005ad8:	f7fb ff84 	bl	80019e4 <_ZN3IMU4initEv>
	line_trace.init();
 8005adc:	4824      	ldr	r0, [pc, #144]	; (8005b70 <cppInit+0x140>)
 8005ade:	f7fc ff73 	bl	80029c8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005ae2:	481f      	ldr	r0, [pc, #124]	; (8005b60 <cppInit+0x130>)
 8005ae4:	f7fc fc72 	bl	80023cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aec:	f001 fb10 	bl	8007110 <HAL_Delay>

	led.fullColor('M');
 8005af0:	214d      	movs	r1, #77	; 0x4d
 8005af2:	481a      	ldr	r0, [pc, #104]	; (8005b5c <cppInit+0x12c>)
 8005af4:	f7fc f9ce 	bl	8001e94 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005af8:	481c      	ldr	r0, [pc, #112]	; (8005b6c <cppInit+0x13c>)
 8005afa:	f7fc f843 	bl	8001b84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005afe:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8005b74 <cppInit+0x144>
 8005b02:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005b78 <cppInit+0x148>
 8005b06:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005b7c <cppInit+0x14c>
 8005b0a:	4819      	ldr	r0, [pc, #100]	; (8005b70 <cppInit+0x140>)
 8005b0c:	f7fc ff90 	bl	8002a30 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(3.0983, 23.773, 0.036866);
 8005b10:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005b80 <cppInit+0x150>
 8005b14:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005b84 <cppInit+0x154>
 8005b18:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005b88 <cppInit+0x158>
 8005b1c:	481b      	ldr	r0, [pc, #108]	; (8005b8c <cppInit+0x15c>)
 8005b1e:	f7fe f8bf 	bl	8003ca0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.35757, 4.0392, 0.0046799);
 8005b22:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8005b90 <cppInit+0x160>
 8005b26:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005b94 <cppInit+0x164>
 8005b2a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005b98 <cppInit+0x168>
 8005b2e:	4817      	ldr	r0, [pc, #92]	; (8005b8c <cppInit+0x15c>)
 8005b30:	f7fe f8cf 	bl	8003cd2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005b34:	480c      	ldr	r0, [pc, #48]	; (8005b68 <cppInit+0x138>)
 8005b36:	f7fb fc60 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005b3a:	4818      	ldr	r0, [pc, #96]	; (8005b9c <cppInit+0x16c>)
 8005b3c:	f7fd fb99 	bl	8003272 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005b40:	4817      	ldr	r0, [pc, #92]	; (8005ba0 <cppInit+0x170>)
 8005b42:	f7fd fc31 	bl	80033a8 <_ZN13PathFollowing4initEv>

}
 8005b46:	bf00      	nop
 8005b48:	bd98      	pop	{r3, r4, r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200005a4 	.word	0x200005a4
 8005b50:	08017e04 	.word	0x08017e04
 8005b54:	08017e0c 	.word	0x08017e0c
 8005b58:	200005c4 	.word	0x200005c4
 8005b5c:	200005a0 	.word	0x200005a0
 8005b60:	20000298 	.word	0x20000298
 8005b64:	2000059c 	.word	0x2000059c
 8005b68:	2001f9cc 	.word	0x2001f9cc
 8005b6c:	200005b0 	.word	0x200005b0
 8005b70:	2001fa1c 	.word	0x2001fa1c
 8005b74:	00000000 	.word	0x00000000
 8005b78:	360637bd 	.word	0x360637bd
 8005b7c:	3a03126f 	.word	0x3a03126f
 8005b80:	3d1700ce 	.word	0x3d1700ce
 8005b84:	41be2f1b 	.word	0x41be2f1b
 8005b88:	40464a8c 	.word	0x40464a8c
 8005b8c:	2001f9e4 	.word	0x2001f9e4
 8005b90:	3b9959d9 	.word	0x3b9959d9
 8005b94:	40814120 	.word	0x40814120
 8005b98:	3eb7136a 	.word	0x3eb7136a
 8005b9c:	2001fa88 	.word	0x2001fa88
 8005ba0:	2001fcc8 	.word	0x2001fcc8

08005ba4 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005ba8:	4825      	ldr	r0, [pc, #148]	; (8005c40 <cppFlip1ms+0x9c>)
 8005baa:	f7fc fb2d 	bl	8002208 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005bae:	4825      	ldr	r0, [pc, #148]	; (8005c44 <cppFlip1ms+0xa0>)
 8005bb0:	f7fb ff46 	bl	8001a40 <_ZN3IMU12updateValuesEv>
	mon_zg = imu.getOmega();
 8005bb4:	4823      	ldr	r0, [pc, #140]	; (8005c44 <cppFlip1ms+0xa0>)
 8005bb6:	f7fb ff9b 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005bba:	eef0 7a40 	vmov.f32	s15, s0
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <cppFlip1ms+0xa4>)
 8005bc0:	edc3 7a00 	vstr	s15, [r3]
	mon_offset = imu.getOffsetVal();
 8005bc4:	481f      	ldr	r0, [pc, #124]	; (8005c44 <cppFlip1ms+0xa0>)
 8005bc6:	f7fc f873 	bl	8001cb0 <_ZN3IMU12getOffsetValEv>
 8005bca:	eef0 7a40 	vmov.f32	s15, s0
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <cppFlip1ms+0xa8>)
 8005bd0:	edc3 7a00 	vstr	s15, [r3]
	encoder.updateCnt();
 8005bd4:	481e      	ldr	r0, [pc, #120]	; (8005c50 <cppFlip1ms+0xac>)
 8005bd6:	f7fb fb03 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005bda:	481e      	ldr	r0, [pc, #120]	; (8005c54 <cppFlip1ms+0xb0>)
 8005bdc:	f7fc ffa8 	bl	8002b30 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005be0:	481d      	ldr	r0, [pc, #116]	; (8005c58 <cppFlip1ms+0xb4>)
 8005be2:	f7fe f88f 	bl	8003d04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005be6:	481d      	ldr	r0, [pc, #116]	; (8005c5c <cppFlip1ms+0xb8>)
 8005be8:	f7fd fb38 	bl	800325c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005bec:	481c      	ldr	r0, [pc, #112]	; (8005c60 <cppFlip1ms+0xbc>)
 8005bee:	f7fd f977 	bl	8002ee0 <_ZN5Motor9motorCtrlEv>

	logger.storeLog(velocity_ctrl.getCurrentVelocity());
 8005bf2:	4819      	ldr	r0, [pc, #100]	; (8005c58 <cppFlip1ms+0xb4>)
 8005bf4:	f7fe f8c4 	bl	8003d80 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8005bf8:	eef0 7a40 	vmov.f32	s15, s0
 8005bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005c00:	4818      	ldr	r0, [pc, #96]	; (8005c64 <cppFlip1ms+0xc0>)
 8005c02:	f7fd f86d 	bl	8002ce0 <_ZN6Logger8storeLogEf>
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <cppFlip1ms+0xc4>)
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <cppFlip1ms+0xc4>)
 8005c10:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <cppFlip1ms+0xc4>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d90c      	bls.n	8005c34 <cppFlip1ms+0x90>
		sys_ident.inOutputStore(imu.getOmega());
 8005c1a:	480a      	ldr	r0, [pc, #40]	; (8005c44 <cppFlip1ms+0xa0>)
 8005c1c:	f7fb ff68 	bl	8001af0 <_ZN3IMU8getOmegaEv>
 8005c20:	eef0 7a40 	vmov.f32	s15, s0
 8005c24:	eeb0 0a67 	vmov.f32	s0, s15
 8005c28:	4810      	ldr	r0, [pc, #64]	; (8005c6c <cppFlip1ms+0xc8>)
 8005c2a:	f7fd fdb5 	bl	8003798 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <cppFlip1ms+0xc4>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005c34:	4806      	ldr	r0, [pc, #24]	; (8005c50 <cppFlip1ms+0xac>)
 8005c36:	f7fb fbef 	bl	8001418 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000298 	.word	0x20000298
 8005c44:	200005b0 	.word	0x200005b0
 8005c48:	200373f4 	.word	0x200373f4
 8005c4c:	200373f8 	.word	0x200373f8
 8005c50:	2001f9cc 	.word	0x2001f9cc
 8005c54:	2001fa1c 	.word	0x2001fa1c
 8005c58:	2001f9e4 	.word	0x2001f9e4
 8005c5c:	2001fa88 	.word	0x2001fa88
 8005c60:	2000059c 	.word	0x2000059c
 8005c64:	200005c4 	.word	0x200005c4
 8005c68:	200373fc 	.word	0x200373fc
 8005c6c:	2001fab8 	.word	0x2001fab8

08005c70 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005c74:	4802      	ldr	r0, [pc, #8]	; (8005c80 <cppFlip100ns+0x10>)
 8005c76:	f7fc fa79 	bl	800216c <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000298 	.word	0x20000298

08005c84 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <cppFlip10ms+0x30>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <cppFlip10ms+0x30>)
 8005c92:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <cppFlip10ms+0x30>)
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d905      	bls.n	8005ca8 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8005c9c:	4806      	ldr	r0, [pc, #24]	; (8005cb8 <cppFlip10ms+0x34>)
 8005c9e:	f7fd fdb7 	bl	8003810 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8005ca2:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <cppFlip10ms+0x30>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <cppFlip10ms+0x30>)
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <cppFlip10ms+0x38>)
 8005cae:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200373fe 	.word	0x200373fe
 8005cb8:	2001fab8 	.word	0x2001fab8
 8005cbc:	200373f0 	.word	0x200373f0

08005cc0 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4803      	ldr	r0, [pc, #12]	; (8005cdc <cppExit+0x1c>)
 8005cd0:	f7fd fcda 	bl	8003688 <_ZN10SideSensor12updateStatusEt>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000590 	.word	0x20000590

08005ce0 <cppLoop>:

void cppLoop(void)
{
 8005ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	b08b      	sub	sp, #44	; 0x2c
 8005ce6:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005ce8:	48b9      	ldr	r0, [pc, #740]	; (8005fd0 <cppLoop+0x2f0>)
 8005cea:	f7fd fc73 	bl	80035d4 <_ZN12RotarySwitch8getValueEv>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	f201 80bb 	bhi.w	8006e6c <cppLoop+0x118c>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <cppLoop+0x1c>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	080061f7 	.word	0x080061f7
 8005d04:	08006285 	.word	0x08006285
 8005d08:	08006365 	.word	0x08006365
 8005d0c:	0800641f 	.word	0x0800641f
 8005d10:	080064ad 	.word	0x080064ad
 8005d14:	08006573 	.word	0x08006573
 8005d18:	08006691 	.word	0x08006691
 8005d1c:	08006731 	.word	0x08006731
 8005d20:	08006c65 	.word	0x08006c65
 8005d24:	08006d01 	.word	0x08006d01
 8005d28:	08006d9b 	.word	0x08006d9b
 8005d2c:	08006dc5 	.word	0x08006dc5
 8005d30:	08006def 	.word	0x08006def
 8005d34:	08006e19 	.word	0x08006e19
 8005d38:	08006e43 	.word	0x08006e43
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8005d3c:	2152      	movs	r1, #82	; 0x52
 8005d3e:	48a5      	ldr	r0, [pc, #660]	; (8005fd4 <cppLoop+0x2f4>)
 8005d40:	f7fc f8a8 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005d44:	f7fb f9ac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d48:	2100      	movs	r1, #0
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fb f9b8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKpV()*1000);
 8005d50:	48a1      	ldr	r0, [pc, #644]	; (8005fd8 <cppLoop+0x2f8>)
 8005d52:	f7fc fe9f 	bl	8002a94 <_ZN9LineTrace6getKpVEv>
 8005d56:	eeb0 7a40 	vmov.f32	s14, s0
 8005d5a:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8005fdc <cppLoop+0x2fc>
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	ee17 0a90 	vmov	r0, s15
 8005d66:	f7fa fc07 	bl	8000578 <__aeabi_f2d>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	461a      	mov	r2, r3
 8005d70:	4623      	mov	r3, r4
 8005d72:	489b      	ldr	r0, [pc, #620]	; (8005fe0 <cppLoop+0x300>)
 8005d74:	f7fb f9ce 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f7fb f9a0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiV()*1000, line_trace.getKdV()*1000);
 8005d80:	4895      	ldr	r0, [pc, #596]	; (8005fd8 <cppLoop+0x2f8>)
 8005d82:	f7fc fe96 	bl	8002ab2 <_ZN9LineTrace6getKiVEv>
 8005d86:	eeb0 7a40 	vmov.f32	s14, s0
 8005d8a:	eddf 7a94 	vldr	s15, [pc, #592]	; 8005fdc <cppLoop+0x2fc>
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	ee17 0a90 	vmov	r0, s15
 8005d96:	f7fa fbef 	bl	8000578 <__aeabi_f2d>
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	488e      	ldr	r0, [pc, #568]	; (8005fd8 <cppLoop+0x2f8>)
 8005da0:	f7fc fe96 	bl	8002ad0 <_ZN9LineTrace6getKdVEv>
 8005da4:	eeb0 7a40 	vmov.f32	s14, s0
 8005da8:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8005fdc <cppLoop+0x2fc>
 8005dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db0:	ee17 0a90 	vmov	r0, s15
 8005db4:	f7fa fbe0 	bl	8000578 <__aeabi_f2d>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	e9cd 3400 	strd	r3, r4, [sp]
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4633      	mov	r3, r6
 8005dc4:	4887      	ldr	r0, [pc, #540]	; (8005fe4 <cppLoop+0x304>)
 8005dc6:	f7fb f9a5 	bl	8001114 <lcd_printf>

		static float adj_kp_v = line_trace.getKpV();
 8005dca:	4b87      	ldr	r3, [pc, #540]	; (8005fe8 <cppLoop+0x308>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f3bf 8f5b 	dmb	ish
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d015      	beq.n	8005e12 <cppLoop+0x132>
 8005de6:	4880      	ldr	r0, [pc, #512]	; (8005fe8 <cppLoop+0x308>)
 8005de8:	f00b fe8f 	bl	8011b0a <__cxa_guard_acquire>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bf14      	ite	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	2300      	moveq	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <cppLoop+0x132>
 8005dfc:	4876      	ldr	r0, [pc, #472]	; (8005fd8 <cppLoop+0x2f8>)
 8005dfe:	f7fc fe49 	bl	8002a94 <_ZN9LineTrace6getKpVEv>
 8005e02:	eef0 7a40 	vmov.f32	s15, s0
 8005e06:	4b79      	ldr	r3, [pc, #484]	; (8005fec <cppLoop+0x30c>)
 8005e08:	edc3 7a00 	vstr	s15, [r3]
 8005e0c:	4876      	ldr	r0, [pc, #472]	; (8005fe8 <cppLoop+0x308>)
 8005e0e:	f00b fe88 	bl	8011b22 <__cxa_guard_release>
		static float adj_ki_v = line_trace.getKiV();
 8005e12:	4b77      	ldr	r3, [pc, #476]	; (8005ff0 <cppLoop+0x310>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f3bf 8f5b 	dmb	ish
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <cppLoop+0x17a>
 8005e2e:	4870      	ldr	r0, [pc, #448]	; (8005ff0 <cppLoop+0x310>)
 8005e30:	f00b fe6b 	bl	8011b0a <__cxa_guard_acquire>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <cppLoop+0x17a>
 8005e44:	4864      	ldr	r0, [pc, #400]	; (8005fd8 <cppLoop+0x2f8>)
 8005e46:	f7fc fe34 	bl	8002ab2 <_ZN9LineTrace6getKiVEv>
 8005e4a:	eef0 7a40 	vmov.f32	s15, s0
 8005e4e:	4b69      	ldr	r3, [pc, #420]	; (8005ff4 <cppLoop+0x314>)
 8005e50:	edc3 7a00 	vstr	s15, [r3]
 8005e54:	4866      	ldr	r0, [pc, #408]	; (8005ff0 <cppLoop+0x310>)
 8005e56:	f00b fe64 	bl	8011b22 <__cxa_guard_release>
		static float adj_kd_v = line_trace.getKdV();
 8005e5a:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <cppLoop+0x318>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f3bf 8f5b 	dmb	ish
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <cppLoop+0x1c2>
 8005e76:	4860      	ldr	r0, [pc, #384]	; (8005ff8 <cppLoop+0x318>)
 8005e78:	f00b fe47 	bl	8011b0a <__cxa_guard_acquire>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf14      	ite	ne
 8005e82:	2301      	movne	r3, #1
 8005e84:	2300      	moveq	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <cppLoop+0x1c2>
 8005e8c:	4852      	ldr	r0, [pc, #328]	; (8005fd8 <cppLoop+0x2f8>)
 8005e8e:	f7fc fe1f 	bl	8002ad0 <_ZN9LineTrace6getKdVEv>
 8005e92:	eef0 7a40 	vmov.f32	s15, s0
 8005e96:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <cppLoop+0x31c>)
 8005e98:	edc3 7a00 	vstr	s15, [r3]
 8005e9c:	4856      	ldr	r0, [pc, #344]	; (8005ff8 <cppLoop+0x318>)
 8005e9e:	f00b fe40 	bl	8011b22 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8005ea2:	4857      	ldr	r0, [pc, #348]	; (8006000 <cppLoop+0x320>)
 8005ea4:	f7fb ff92 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d022      	beq.n	8005efe <cppLoop+0x21e>
			led.LR(-1, 1);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f04f 31ff 	mov.w	r1, #4294967295
 8005ebe:	4845      	ldr	r0, [pc, #276]	; (8005fd4 <cppLoop+0x2f4>)
 8005ec0:	f7fc f8a4 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ec8:	f001 f922 	bl	8007110 <HAL_Delay>

			selector++;
 8005ecc:	4b4d      	ldr	r3, [pc, #308]	; (8006004 <cppLoop+0x324>)
 8005ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	b21a      	sxth	r2, r3
 8005eda:	4b4a      	ldr	r3, [pc, #296]	; (8006004 <cppLoop+0x324>)
 8005edc:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005ede:	4b49      	ldr	r3, [pc, #292]	; (8006004 <cppLoop+0x324>)
 8005ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	dd02      	ble.n	8005eee <cppLoop+0x20e>
 8005ee8:	4b46      	ldr	r3, [pc, #280]	; (8006004 <cppLoop+0x324>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ef4:	4837      	ldr	r0, [pc, #220]	; (8005fd4 <cppLoop+0x2f4>)
 8005ef6:	f7fc f889 	bl	800200c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_V.TXT", 1, &adj_kd_v, OVER_WRITE);
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);

			led.LR(-1, 0);
		}
		break;
 8005efa:	f000 bfb9 	b.w	8006e70 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8005efe:	4840      	ldr	r0, [pc, #256]	; (8006000 <cppLoop+0x320>)
 8005f00:	f7fb ff64 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d079      	beq.n	8006008 <cppLoop+0x328>
			led.LR(-1, 1);
 8005f14:	2201      	movs	r2, #1
 8005f16:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1a:	482e      	ldr	r0, [pc, #184]	; (8005fd4 <cppLoop+0x2f4>)
 8005f1c:	f7fc f876 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8005f20:	2064      	movs	r0, #100	; 0x64
 8005f22:	f001 f8f5 	bl	8007110 <HAL_Delay>
			if(selector == 0){
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <cppLoop+0x324>)
 8005f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <cppLoop+0x278>
				adj_kp_v = adj_kp_v + 0.00001;
 8005f30:	4b2e      	ldr	r3, [pc, #184]	; (8005fec <cppLoop+0x30c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fa fb1f 	bl	8000578 <__aeabi_f2d>
 8005f3a:	a323      	add	r3, pc, #140	; (adr r3, 8005fc8 <cppLoop+0x2e8>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa f9bc 	bl	80002bc <__adddf3>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f7fa fe64 	bl	8000c18 <__aeabi_d2f>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b26      	ldr	r3, [pc, #152]	; (8005fec <cppLoop+0x30c>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e02b      	b.n	8005fb0 <cppLoop+0x2d0>
			else if(selector == 1){
 8005f58:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <cppLoop+0x324>)
 8005f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d113      	bne.n	8005f8a <cppLoop+0x2aa>
				adj_ki_v = adj_ki_v + 0.00001;
 8005f62:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <cppLoop+0x314>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa fb06 	bl	8000578 <__aeabi_f2d>
 8005f6c:	a316      	add	r3, pc, #88	; (adr r3, 8005fc8 <cppLoop+0x2e8>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f9a3 	bl	80002bc <__adddf3>
 8005f76:	4603      	mov	r3, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	f7fa fe4b 	bl	8000c18 <__aeabi_d2f>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <cppLoop+0x314>)
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e012      	b.n	8005fb0 <cppLoop+0x2d0>
				adj_kd_v = adj_kd_v + 0.00001;
 8005f8a:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <cppLoop+0x31c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fa faf2 	bl	8000578 <__aeabi_f2d>
 8005f94:	a30c      	add	r3, pc, #48	; (adr r3, 8005fc8 <cppLoop+0x2e8>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f98f 	bl	80002bc <__adddf3>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	f7fa fe37 	bl	8000c18 <__aeabi_d2f>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <cppLoop+0x31c>)
 8005fae:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8005fb0:	2152      	movs	r1, #82	; 0x52
 8005fb2:	4808      	ldr	r0, [pc, #32]	; (8005fd4 <cppLoop+0x2f4>)
 8005fb4:	f7fb ff6e 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbe:	4805      	ldr	r0, [pc, #20]	; (8005fd4 <cppLoop+0x2f4>)
 8005fc0:	f7fc f824 	bl	800200c <_ZN3LED2LREaa>
		break;
 8005fc4:	f000 bf54 	b.w	8006e70 <cppLoop+0x1190>
 8005fc8:	88e368f1 	.word	0x88e368f1
 8005fcc:	3ee4f8b5 	.word	0x3ee4f8b5
 8005fd0:	20000598 	.word	0x20000598
 8005fd4:	200005a0 	.word	0x200005a0
 8005fd8:	2001fa1c 	.word	0x2001fa1c
 8005fdc:	447a0000 	.word	0x447a0000
 8005fe0:	08017e10 	.word	0x08017e10
 8005fe4:	08017e1c 	.word	0x08017e1c
 8005fe8:	20037408 	.word	0x20037408
 8005fec:	20037404 	.word	0x20037404
 8005ff0:	20037410 	.word	0x20037410
 8005ff4:	2003740c 	.word	0x2003740c
 8005ff8:	20037418 	.word	0x20037418
 8005ffc:	20037414 	.word	0x20037414
 8006000:	20000594 	.word	0x20000594
 8006004:	20037400 	.word	0x20037400
		else if(joy_stick.getValue() == JOY_L){
 8006008:	48c3      	ldr	r0, [pc, #780]	; (8006318 <cppLoop+0x638>)
 800600a:	f7fb fedf 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d059      	beq.n	80060d2 <cppLoop+0x3f2>
			led.LR(-1, 1);
 800601e:	2201      	movs	r2, #1
 8006020:	f04f 31ff 	mov.w	r1, #4294967295
 8006024:	48bd      	ldr	r0, [pc, #756]	; (800631c <cppLoop+0x63c>)
 8006026:	f7fb fff1 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800602a:	2064      	movs	r0, #100	; 0x64
 800602c:	f001 f870 	bl	8007110 <HAL_Delay>
			if(selector == 0){
 8006030:	4bbb      	ldr	r3, [pc, #748]	; (8006320 <cppLoop+0x640>)
 8006032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d113      	bne.n	8006062 <cppLoop+0x382>
				adj_kp_v = adj_kp_v - 0.00001;
 800603a:	4bba      	ldr	r3, [pc, #744]	; (8006324 <cppLoop+0x644>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa fa9a 	bl	8000578 <__aeabi_f2d>
 8006044:	a3b2      	add	r3, pc, #712	; (adr r3, 8006310 <cppLoop+0x630>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f935 	bl	80002b8 <__aeabi_dsub>
 800604e:	4603      	mov	r3, r0
 8006050:	460c      	mov	r4, r1
 8006052:	4618      	mov	r0, r3
 8006054:	4621      	mov	r1, r4
 8006056:	f7fa fddf 	bl	8000c18 <__aeabi_d2f>
 800605a:	4602      	mov	r2, r0
 800605c:	4bb1      	ldr	r3, [pc, #708]	; (8006324 <cppLoop+0x644>)
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	e02b      	b.n	80060ba <cppLoop+0x3da>
			else if(selector == 1){
 8006062:	4baf      	ldr	r3, [pc, #700]	; (8006320 <cppLoop+0x640>)
 8006064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d113      	bne.n	8006094 <cppLoop+0x3b4>
				adj_ki_v = adj_ki_v - 0.00001;
 800606c:	4bae      	ldr	r3, [pc, #696]	; (8006328 <cppLoop+0x648>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fa fa81 	bl	8000578 <__aeabi_f2d>
 8006076:	a3a6      	add	r3, pc, #664	; (adr r3, 8006310 <cppLoop+0x630>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa f91c 	bl	80002b8 <__aeabi_dsub>
 8006080:	4603      	mov	r3, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4618      	mov	r0, r3
 8006086:	4621      	mov	r1, r4
 8006088:	f7fa fdc6 	bl	8000c18 <__aeabi_d2f>
 800608c:	4602      	mov	r2, r0
 800608e:	4ba6      	ldr	r3, [pc, #664]	; (8006328 <cppLoop+0x648>)
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e012      	b.n	80060ba <cppLoop+0x3da>
				adj_kd_v = adj_kd_v - 0.00001;
 8006094:	4ba5      	ldr	r3, [pc, #660]	; (800632c <cppLoop+0x64c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa fa6d 	bl	8000578 <__aeabi_f2d>
 800609e:	a39c      	add	r3, pc, #624	; (adr r3, 8006310 <cppLoop+0x630>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa f908 	bl	80002b8 <__aeabi_dsub>
 80060a8:	4603      	mov	r3, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	4618      	mov	r0, r3
 80060ae:	4621      	mov	r1, r4
 80060b0:	f7fa fdb2 	bl	8000c18 <__aeabi_d2f>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b9d      	ldr	r3, [pc, #628]	; (800632c <cppLoop+0x64c>)
 80060b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80060ba:	2152      	movs	r1, #82	; 0x52
 80060bc:	4897      	ldr	r0, [pc, #604]	; (800631c <cppLoop+0x63c>)
 80060be:	f7fb fee9 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	f04f 31ff 	mov.w	r1, #4294967295
 80060c8:	4894      	ldr	r0, [pc, #592]	; (800631c <cppLoop+0x63c>)
 80060ca:	f7fb ff9f 	bl	800200c <_ZN3LED2LREaa>
		break;
 80060ce:	f000 becf 	b.w	8006e70 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 80060d2:	4891      	ldr	r0, [pc, #580]	; (8006318 <cppLoop+0x638>)
 80060d4:	f7fb fe7a 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b04      	cmp	r3, #4
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03e      	beq.n	8006166 <cppLoop+0x486>
			led.LR(-1, 1);
 80060e8:	2201      	movs	r2, #1
 80060ea:	f04f 31ff 	mov.w	r1, #4294967295
 80060ee:	488b      	ldr	r0, [pc, #556]	; (800631c <cppLoop+0x63c>)
 80060f0:	f7fb ff8c 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80060f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80060f8:	f001 f80a 	bl	8007110 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP_V.TXT", 1, &temp_kp_v);
 80060fc:	f107 031c 	add.w	r3, r7, #28
 8006100:	2201      	movs	r2, #1
 8006102:	498b      	ldr	r1, [pc, #556]	; (8006330 <cppLoop+0x650>)
 8006104:	488b      	ldr	r0, [pc, #556]	; (8006334 <cppLoop+0x654>)
 8006106:	f7fb fa99 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI_V.TXT", 1, &temp_ki_v);
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	2201      	movs	r2, #1
 8006110:	4989      	ldr	r1, [pc, #548]	; (8006338 <cppLoop+0x658>)
 8006112:	4888      	ldr	r0, [pc, #544]	; (8006334 <cppLoop+0x654>)
 8006114:	f7fb fa92 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD_V.TXT", 1, &temp_kd_v);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	2201      	movs	r2, #1
 800611e:	4987      	ldr	r1, [pc, #540]	; (800633c <cppLoop+0x65c>)
 8006120:	4884      	ldr	r0, [pc, #528]	; (8006334 <cppLoop+0x654>)
 8006122:	f7fb fa8b 	bl	800163c <sd_read_array_float>
			line_trace.setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8006126:	edd7 7a07 	vldr	s15, [r7, #28]
 800612a:	ed97 7a06 	vldr	s14, [r7, #24]
 800612e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006132:	eeb0 1a66 	vmov.f32	s2, s13
 8006136:	eef0 0a47 	vmov.f32	s1, s14
 800613a:	eeb0 0a67 	vmov.f32	s0, s15
 800613e:	4880      	ldr	r0, [pc, #512]	; (8006340 <cppLoop+0x660>)
 8006140:	f7fc fc8f 	bl	8002a62 <_ZN9LineTrace11setVeloGainEfff>
			adj_kp_v = temp_kp_v;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4a77      	ldr	r2, [pc, #476]	; (8006324 <cppLoop+0x644>)
 8006148:	6013      	str	r3, [r2, #0]
			adj_ki_v = temp_kp_v;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4a76      	ldr	r2, [pc, #472]	; (8006328 <cppLoop+0x648>)
 800614e:	6013      	str	r3, [r2, #0]
			adj_kd_v = temp_kp_v;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4a76      	ldr	r2, [pc, #472]	; (800632c <cppLoop+0x64c>)
 8006154:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006156:	2200      	movs	r2, #0
 8006158:	f04f 31ff 	mov.w	r1, #4294967295
 800615c:	486f      	ldr	r0, [pc, #444]	; (800631c <cppLoop+0x63c>)
 800615e:	f7fb ff55 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006162:	f000 be85 	b.w	8006e70 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 8006166:	486c      	ldr	r0, [pc, #432]	; (8006318 <cppLoop+0x638>)
 8006168:	f7fb fe30 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800616c:	4603      	mov	r3, r0
 800616e:	2b02      	cmp	r3, #2
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8679 	beq.w	8006e70 <cppLoop+0x1190>
			led.LR(-1, 1);
 800617e:	2201      	movs	r2, #1
 8006180:	f04f 31ff 	mov.w	r1, #4294967295
 8006184:	4865      	ldr	r0, [pc, #404]	; (800631c <cppLoop+0x63c>)
 8006186:	f7fb ff41 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800618a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800618e:	f000 ffbf 	bl	8007110 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_V.TXT", 1, &adj_kp_v, OVER_WRITE);
 8006192:	2300      	movs	r3, #0
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4b63      	ldr	r3, [pc, #396]	; (8006324 <cppLoop+0x644>)
 8006198:	2201      	movs	r2, #1
 800619a:	4965      	ldr	r1, [pc, #404]	; (8006330 <cppLoop+0x650>)
 800619c:	4865      	ldr	r0, [pc, #404]	; (8006334 <cppLoop+0x654>)
 800619e:	f7fb f9e7 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_V.TXT", 1, &adj_ki_v, OVER_WRITE);
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4b60      	ldr	r3, [pc, #384]	; (8006328 <cppLoop+0x648>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	4963      	ldr	r1, [pc, #396]	; (8006338 <cppLoop+0x658>)
 80061ac:	4861      	ldr	r0, [pc, #388]	; (8006334 <cppLoop+0x654>)
 80061ae:	f7fb f9df 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_V.TXT", 1, &adj_kd_v, OVER_WRITE);
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4b5d      	ldr	r3, [pc, #372]	; (800632c <cppLoop+0x64c>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	4960      	ldr	r1, [pc, #384]	; (800633c <cppLoop+0x65c>)
 80061bc:	485d      	ldr	r0, [pc, #372]	; (8006334 <cppLoop+0x654>)
 80061be:	f7fb f9d7 	bl	8001570 <sd_write_array_float>
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);
 80061c2:	4b58      	ldr	r3, [pc, #352]	; (8006324 <cppLoop+0x644>)
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	4b57      	ldr	r3, [pc, #348]	; (8006328 <cppLoop+0x648>)
 80061ca:	ed93 7a00 	vldr	s14, [r3]
 80061ce:	4b57      	ldr	r3, [pc, #348]	; (800632c <cppLoop+0x64c>)
 80061d0:	edd3 6a00 	vldr	s13, [r3]
 80061d4:	eeb0 1a66 	vmov.f32	s2, s13
 80061d8:	eef0 0a47 	vmov.f32	s1, s14
 80061dc:	eeb0 0a67 	vmov.f32	s0, s15
 80061e0:	4857      	ldr	r0, [pc, #348]	; (8006340 <cppLoop+0x660>)
 80061e2:	f7fc fc3e 	bl	8002a62 <_ZN9LineTrace11setVeloGainEfff>
			led.LR(-1, 0);
 80061e6:	2200      	movs	r2, #0
 80061e8:	f04f 31ff 	mov.w	r1, #4294967295
 80061ec:	484b      	ldr	r0, [pc, #300]	; (800631c <cppLoop+0x63c>)
 80061ee:	f7fb ff0d 	bl	800200c <_ZN3LED2LREaa>
		break;
 80061f2:	f000 be3d 	b.w	8006e70 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 80061f6:	2147      	movs	r1, #71	; 0x47
 80061f8:	4848      	ldr	r0, [pc, #288]	; (800631c <cppLoop+0x63c>)
 80061fa:	f7fb fe4b 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061fe:	f7fa ff4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006202:	2100      	movs	r1, #0
 8006204:	2000      	movs	r0, #0
 8006206:	f7fa ff5b 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800620a:	484e      	ldr	r0, [pc, #312]	; (8006344 <cppLoop+0x664>)
 800620c:	f7fa ff82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006210:	2101      	movs	r1, #1
 8006212:	2000      	movs	r0, #0
 8006214:	f7fa ff54 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006218:	484b      	ldr	r0, [pc, #300]	; (8006348 <cppLoop+0x668>)
 800621a:	f7fa ff7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800621e:	483e      	ldr	r0, [pc, #248]	; (8006318 <cppLoop+0x638>)
 8006220:	f7fb fdd4 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006224:	4603      	mov	r3, r0
 8006226:	2b02      	cmp	r3, #2
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 861f 	beq.w	8006e74 <cppLoop+0x1194>
			HAL_Delay(500);
 8006236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800623a:	f000 ff69 	bl	8007110 <HAL_Delay>

			velocity_ctrl.start();
 800623e:	4843      	ldr	r0, [pc, #268]	; (800634c <cppLoop+0x66c>)
 8006240:	f7fd fd73 	bl	8003d2a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006244:	483e      	ldr	r0, [pc, #248]	; (8006340 <cppLoop+0x660>)
 8006246:	f7fc fcab 	bl	8002ba0 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.0);
 800624a:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8006350 <cppLoop+0x670>
 800624e:	483c      	ldr	r0, [pc, #240]	; (8006340 <cppLoop+0x660>)
 8006250:	f7fc fc5c 	bl	8002b0c <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	2101      	movs	r1, #1
 800625a:	4830      	ldr	r0, [pc, #192]	; (800631c <cppLoop+0x63c>)
 800625c:	f7fb fed6 	bl	800200c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8006260:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006264:	f000 ff54 	bl	8007110 <HAL_Delay>

			velocity_ctrl.stop();
 8006268:	4838      	ldr	r0, [pc, #224]	; (800634c <cppLoop+0x66c>)
 800626a:	f7fd fd6d 	bl	8003d48 <_ZN12VelocityCtrl4stopEv>
			line_trace.stop();
 800626e:	4834      	ldr	r0, [pc, #208]	; (8006340 <cppLoop+0x660>)
 8006270:	f7fc fca6 	bl	8002bc0 <_ZN9LineTrace4stopEv>
			led.LR(0, -1);
 8006274:	f04f 32ff 	mov.w	r2, #4294967295
 8006278:	2100      	movs	r1, #0
 800627a:	4828      	ldr	r0, [pc, #160]	; (800631c <cppLoop+0x63c>)
 800627c:	f7fb fec6 	bl	800200c <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006280:	f000 bdf8 	b.w	8006e74 <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 8006284:	2142      	movs	r1, #66	; 0x42
 8006286:	4825      	ldr	r0, [pc, #148]	; (800631c <cppLoop+0x63c>)
 8006288:	f7fb fe04 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800628c:	f7fa ff08 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006290:	2100      	movs	r1, #0
 8006292:	2000      	movs	r0, #0
 8006294:	f7fa ff14 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8006298:	482e      	ldr	r0, [pc, #184]	; (8006354 <cppLoop+0x674>)
 800629a:	f7fa ff3b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800629e:	2101      	movs	r1, #1
 80062a0:	2000      	movs	r0, #0
 80062a2:	f7fa ff0d 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80062a6:	482c      	ldr	r0, [pc, #176]	; (8006358 <cppLoop+0x678>)
 80062a8:	f7fa ff34 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80062ac:	481a      	ldr	r0, [pc, #104]	; (8006318 <cppLoop+0x638>)
 80062ae:	f7fb fd8d 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 85da 	beq.w	8006e78 <cppLoop+0x1198>
			led.LR(-1, 1);
 80062c4:	2201      	movs	r2, #1
 80062c6:	f04f 31ff 	mov.w	r1, #4294967295
 80062ca:	4814      	ldr	r0, [pc, #80]	; (800631c <cppLoop+0x63c>)
 80062cc:	f7fb fe9e 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80062d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80062d4:	f000 ff1c 	bl	8007110 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80062d8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800635c <cppLoop+0x67c>
 80062dc:	4820      	ldr	r0, [pc, #128]	; (8006360 <cppLoop+0x680>)
 80062de:	f7fd faed 	bl	80038bc <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80062e2:	481f      	ldr	r0, [pc, #124]	; (8006360 <cppLoop+0x680>)
 80062e4:	f7fd fafa 	bl	80038dc <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80062e8:	f244 405c 	movw	r0, #17500	; 0x445c
 80062ec:	f000 ff10 	bl	8007110 <HAL_Delay>
			sys_ident.stop();
 80062f0:	481b      	ldr	r0, [pc, #108]	; (8006360 <cppLoop+0x680>)
 80062f2:	f7fd fb05 	bl	8003900 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80062f6:	481a      	ldr	r0, [pc, #104]	; (8006360 <cppLoop+0x680>)
 80062f8:	f7fd fa6e 	bl	80037d8 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80062fc:	2200      	movs	r2, #0
 80062fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006302:	4806      	ldr	r0, [pc, #24]	; (800631c <cppLoop+0x63c>)
 8006304:	f7fb fe82 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006308:	f000 bdb6 	b.w	8006e78 <cppLoop+0x1198>
 800630c:	f3af 8000 	nop.w
 8006310:	88e368f1 	.word	0x88e368f1
 8006314:	3ee4f8b5 	.word	0x3ee4f8b5
 8006318:	20000594 	.word	0x20000594
 800631c:	200005a0 	.word	0x200005a0
 8006320:	20037400 	.word	0x20037400
 8006324:	20037404 	.word	0x20037404
 8006328:	2003740c 	.word	0x2003740c
 800632c:	20037414 	.word	0x20037414
 8006330:	08017e2c 	.word	0x08017e2c
 8006334:	08017e38 	.word	0x08017e38
 8006338:	08017e40 	.word	0x08017e40
 800633c:	08017e4c 	.word	0x08017e4c
 8006340:	2001fa1c 	.word	0x2001fa1c
 8006344:	08017e58 	.word	0x08017e58
 8006348:	08017e64 	.word	0x08017e64
 800634c:	2001f9e4 	.word	0x2001f9e4
 8006350:	00000000 	.word	0x00000000
 8006354:	08017e6c 	.word	0x08017e6c
 8006358:	08017e74 	.word	0x08017e74
 800635c:	3e99999a 	.word	0x3e99999a
 8006360:	2001fab8 	.word	0x2001fab8

	case 3:
		led.fullColor('M');
 8006364:	214d      	movs	r1, #77	; 0x4d
 8006366:	48b2      	ldr	r0, [pc, #712]	; (8006630 <cppLoop+0x950>)
 8006368:	f7fb fd94 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800636c:	f7fa fe98 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006370:	2100      	movs	r1, #0
 8006372:	2000      	movs	r0, #0
 8006374:	f7fa fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006378:	48ae      	ldr	r0, [pc, #696]	; (8006634 <cppLoop+0x954>)
 800637a:	f7fa fecb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800637e:	2101      	movs	r1, #1
 8006380:	2000      	movs	r0, #0
 8006382:	f7fa fe9d 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006386:	48ac      	ldr	r0, [pc, #688]	; (8006638 <cppLoop+0x958>)
 8006388:	f7fa fec4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800638c:	48ab      	ldr	r0, [pc, #684]	; (800663c <cppLoop+0x95c>)
 800638e:	f7fb fd1d 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006392:	4603      	mov	r3, r0
 8006394:	2b02      	cmp	r3, #2
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 856c 	beq.w	8006e7c <cppLoop+0x119c>
			led.LR(-1, 1);
 80063a4:	2201      	movs	r2, #1
 80063a6:	f04f 31ff 	mov.w	r1, #4294967295
 80063aa:	48a1      	ldr	r0, [pc, #644]	; (8006630 <cppLoop+0x950>)
 80063ac:	f7fb fe2e 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80063b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063b4:	f000 feac 	bl	8007110 <HAL_Delay>

			logger.start();
 80063b8:	48a1      	ldr	r0, [pc, #644]	; (8006640 <cppLoop+0x960>)
 80063ba:	f7fc fd4f 	bl	8002e5c <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 80063be:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8006644 <cppLoop+0x964>
 80063c2:	48a1      	ldr	r0, [pc, #644]	; (8006648 <cppLoop+0x968>)
 80063c4:	f7fc fb93 	bl	8002aee <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80063c8:	489f      	ldr	r0, [pc, #636]	; (8006648 <cppLoop+0x968>)
 80063ca:	f7fc fbe9 	bl	8002ba0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 80063ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80063d2:	f000 fe9d 	bl	8007110 <HAL_Delay>

			logger.stop();
 80063d6:	489a      	ldr	r0, [pc, #616]	; (8006640 <cppLoop+0x960>)
 80063d8:	f7fc fd4f 	bl	8002e7a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80063dc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006644 <cppLoop+0x964>
 80063e0:	4899      	ldr	r0, [pc, #612]	; (8006648 <cppLoop+0x968>)
 80063e2:	f7fc fb84 	bl	8002aee <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80063e6:	4898      	ldr	r0, [pc, #608]	; (8006648 <cppLoop+0x968>)
 80063e8:	f7fc fbea 	bl	8002bc0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	2101      	movs	r1, #1
 80063f2:	488f      	ldr	r0, [pc, #572]	; (8006630 <cppLoop+0x950>)
 80063f4:	f7fb fe0a 	bl	800200c <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 80063f8:	4a94      	ldr	r2, [pc, #592]	; (800664c <cppLoop+0x96c>)
 80063fa:	4995      	ldr	r1, [pc, #596]	; (8006650 <cppLoop+0x970>)
 80063fc:	4890      	ldr	r0, [pc, #576]	; (8006640 <cppLoop+0x960>)
 80063fe:	f7fc fce0 	bl	8002dc2 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	2100      	movs	r1, #0
 8006408:	4889      	ldr	r0, [pc, #548]	; (8006630 <cppLoop+0x950>)
 800640a:	f7fb fdff 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 800640e:	2200      	movs	r2, #0
 8006410:	f04f 31ff 	mov.w	r1, #4294967295
 8006414:	4886      	ldr	r0, [pc, #536]	; (8006630 <cppLoop+0x950>)
 8006416:	f7fb fdf9 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 800641a:	f000 bd2f 	b.w	8006e7c <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 800641e:	2159      	movs	r1, #89	; 0x59
 8006420:	4883      	ldr	r0, [pc, #524]	; (8006630 <cppLoop+0x950>)
 8006422:	f7fb fd37 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006426:	f7fa fe3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800642a:	2100      	movs	r1, #0
 800642c:	2000      	movs	r0, #0
 800642e:	f7fa fe47 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006432:	4888      	ldr	r0, [pc, #544]	; (8006654 <cppLoop+0x974>)
 8006434:	f7fa fe6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006438:	2101      	movs	r1, #1
 800643a:	2000      	movs	r0, #0
 800643c:	f7fa fe40 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006440:	487d      	ldr	r0, [pc, #500]	; (8006638 <cppLoop+0x958>)
 8006442:	f7fa fe67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006446:	487d      	ldr	r0, [pc, #500]	; (800663c <cppLoop+0x95c>)
 8006448:	f7fb fcc0 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800644c:	4603      	mov	r3, r0
 800644e:	2b02      	cmp	r3, #2
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8511 	beq.w	8006e80 <cppLoop+0x11a0>
			led.LR(-1, 1);
 800645e:	2201      	movs	r2, #1
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	4872      	ldr	r0, [pc, #456]	; (8006630 <cppLoop+0x950>)
 8006466:	f7fb fdd1 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800646a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800646e:	f000 fe4f 	bl	8007110 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006472:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8006644 <cppLoop+0x964>
 8006476:	4874      	ldr	r0, [pc, #464]	; (8006648 <cppLoop+0x968>)
 8006478:	f7fc fb48 	bl	8002b0c <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 800647c:	4876      	ldr	r0, [pc, #472]	; (8006658 <cppLoop+0x978>)
 800647e:	f7fd fc54 	bl	8003d2a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006482:	4871      	ldr	r0, [pc, #452]	; (8006648 <cppLoop+0x968>)
 8006484:	f7fc fb8c 	bl	8002ba0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006488:	f242 7010 	movw	r0, #10000	; 0x2710
 800648c:	f000 fe40 	bl	8007110 <HAL_Delay>

			line_trace.stop();
 8006490:	486d      	ldr	r0, [pc, #436]	; (8006648 <cppLoop+0x968>)
 8006492:	f7fc fb95 	bl	8002bc0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006496:	4870      	ldr	r0, [pc, #448]	; (8006658 <cppLoop+0x978>)
 8006498:	f7fd fc56 	bl	8003d48 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 31ff 	mov.w	r1, #4294967295
 80064a2:	4863      	ldr	r0, [pc, #396]	; (8006630 <cppLoop+0x950>)
 80064a4:	f7fb fdb2 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 80064a8:	f000 bcea 	b.w	8006e80 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 80064ac:	2143      	movs	r1, #67	; 0x43
 80064ae:	4860      	ldr	r0, [pc, #384]	; (8006630 <cppLoop+0x950>)
 80064b0:	f7fb fcf0 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80064b4:	f7fa fdf4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80064b8:	2100      	movs	r1, #0
 80064ba:	2000      	movs	r0, #0
 80064bc:	f7fa fe00 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80064c0:	4866      	ldr	r0, [pc, #408]	; (800665c <cppLoop+0x97c>)
 80064c2:	f7fa fe27 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80064c6:	2101      	movs	r1, #1
 80064c8:	2000      	movs	r0, #0
 80064ca:	f7fa fdf9 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80064ce:	4864      	ldr	r0, [pc, #400]	; (8006660 <cppLoop+0x980>)
 80064d0:	f7fa fe20 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80064d4:	4859      	ldr	r0, [pc, #356]	; (800663c <cppLoop+0x95c>)
 80064d6:	f7fb fc79 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b02      	cmp	r3, #2
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 84cc 	beq.w	8006e84 <cppLoop+0x11a4>
			led.LR(-1, 1);
 80064ec:	2201      	movs	r2, #1
 80064ee:	f04f 31ff 	mov.w	r1, #4294967295
 80064f2:	484f      	ldr	r0, [pc, #316]	; (8006630 <cppLoop+0x950>)
 80064f4:	f7fb fd8a 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80064f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064fc:	f000 fe08 	bl	8007110 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006500:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8006664 <cppLoop+0x984>
 8006504:	4850      	ldr	r0, [pc, #320]	; (8006648 <cppLoop+0x968>)
 8006506:	f7fc faf2 	bl	8002aee <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800650a:	484f      	ldr	r0, [pc, #316]	; (8006648 <cppLoop+0x968>)
 800650c:	f7fc fb48 	bl	8002ba0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006514:	f000 fdfc 	bl	8007110 <HAL_Delay>

			led.fullColor('R');
 8006518:	2152      	movs	r1, #82	; 0x52
 800651a:	4845      	ldr	r0, [pc, #276]	; (8006630 <cppLoop+0x950>)
 800651c:	f7fb fcba 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006520:	4851      	ldr	r0, [pc, #324]	; (8006668 <cppLoop+0x988>)
 8006522:	f7fa ff9b 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006526:	4850      	ldr	r0, [pc, #320]	; (8006668 <cppLoop+0x988>)
 8006528:	f7fa ff67 	bl	80013fa <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800652c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006530:	f000 fdee 	bl	8007110 <HAL_Delay>

			line_trace.stop();
 8006534:	4844      	ldr	r0, [pc, #272]	; (8006648 <cppLoop+0x968>)
 8006536:	f7fc fb43 	bl	8002bc0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800653a:	494c      	ldr	r1, [pc, #304]	; (800666c <cppLoop+0x98c>)
 800653c:	484c      	ldr	r0, [pc, #304]	; (8006670 <cppLoop+0x990>)
 800653e:	f7fa ffa3 	bl	8001488 <user_fopen>
			float d = encoder.getDistance();
 8006542:	4849      	ldr	r0, [pc, #292]	; (8006668 <cppLoop+0x988>)
 8006544:	f7fa ff4a 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8006548:	eef0 7a40 	vmov.f32	s15, s0
 800654c:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006550:	f107 0310 	add.w	r3, r7, #16
 8006554:	2201      	movs	r2, #1
 8006556:	4619      	mov	r1, r3
 8006558:	2001      	movs	r0, #1
 800655a:	f7fa ffb7 	bl	80014cc <sd_write_float>
			user_fclose();
 800655e:	f7fa ffa5 	bl	80014ac <user_fclose>

			led.LR(-1, 0);
 8006562:	2200      	movs	r2, #0
 8006564:	f04f 31ff 	mov.w	r1, #4294967295
 8006568:	4831      	ldr	r0, [pc, #196]	; (8006630 <cppLoop+0x950>)
 800656a:	f7fb fd4f 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 800656e:	f000 bc89 	b.w	8006e84 <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 8006572:	2152      	movs	r1, #82	; 0x52
 8006574:	482e      	ldr	r0, [pc, #184]	; (8006630 <cppLoop+0x950>)
 8006576:	f7fb fc8d 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800657a:	f7fa fd91 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800657e:	2100      	movs	r1, #0
 8006580:	2000      	movs	r0, #0
 8006582:	f7fa fd9d 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006586:	483b      	ldr	r0, [pc, #236]	; (8006674 <cppLoop+0x994>)
 8006588:	f7fa fdc4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800658c:	2101      	movs	r1, #1
 800658e:	2000      	movs	r0, #0
 8006590:	f7fa fd96 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006594:	4838      	ldr	r0, [pc, #224]	; (8006678 <cppLoop+0x998>)
 8006596:	f7fa fdbd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800659a:	4828      	ldr	r0, [pc, #160]	; (800663c <cppLoop+0x95c>)
 800659c:	f7fb fc16 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	bf0c      	ite	eq
 80065a6:	2301      	moveq	r3, #1
 80065a8:	2300      	movne	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 846b 	beq.w	8006e88 <cppLoop+0x11a8>
			HAL_Delay(500);
 80065b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065b6:	f000 fdab 	bl	8007110 <HAL_Delay>
			led.LR(-1, 1);
 80065ba:	2201      	movs	r2, #1
 80065bc:	f04f 31ff 	mov.w	r1, #4294967295
 80065c0:	481b      	ldr	r0, [pc, #108]	; (8006630 <cppLoop+0x950>)
 80065c2:	f7fb fd23 	bl	800200c <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80065c6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800667c <cppLoop+0x99c>
 80065ca:	481f      	ldr	r0, [pc, #124]	; (8006648 <cppLoop+0x968>)
 80065cc:	f7fc fa8f 	bl	8002aee <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80065d0:	481d      	ldr	r0, [pc, #116]	; (8006648 <cppLoop+0x968>)
 80065d2:	f7fc fae5 	bl	8002ba0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80065d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065da:	f000 fd99 	bl	8007110 <HAL_Delay>

			led.fullColor('R');
 80065de:	2152      	movs	r1, #82	; 0x52
 80065e0:	4813      	ldr	r0, [pc, #76]	; (8006630 <cppLoop+0x950>)
 80065e2:	f7fb fc57 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80065e6:	4820      	ldr	r0, [pc, #128]	; (8006668 <cppLoop+0x988>)
 80065e8:	f7fa ff38 	bl	800145c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80065ec:	481e      	ldr	r0, [pc, #120]	; (8006668 <cppLoop+0x988>)
 80065ee:	f7fa ff04 	bl	80013fa <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80065f2:	4823      	ldr	r0, [pc, #140]	; (8006680 <cppLoop+0x9a0>)
 80065f4:	f7fc fe3d 	bl	8003272 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80065f8:	4811      	ldr	r0, [pc, #68]	; (8006640 <cppLoop+0x960>)
 80065fa:	f7fc fc2f 	bl	8002e5c <_ZN6Logger5startEv>

			HAL_Delay(3000);
 80065fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006602:	f000 fd85 	bl	8007110 <HAL_Delay>

			line_trace.stop();
 8006606:	4810      	ldr	r0, [pc, #64]	; (8006648 <cppLoop+0x968>)
 8006608:	f7fc fada 	bl	8002bc0 <_ZN9LineTrace4stopEv>
			logger.stop();
 800660c:	480c      	ldr	r0, [pc, #48]	; (8006640 <cppLoop+0x960>)
 800660e:	f7fc fc34 	bl	8002e7a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <cppLoop+0x9a4>)
 8006614:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <cppLoop+0x9a8>)
 8006616:	491d      	ldr	r1, [pc, #116]	; (800668c <cppLoop+0x9ac>)
 8006618:	4809      	ldr	r0, [pc, #36]	; (8006640 <cppLoop+0x960>)
 800661a:	f7fc fbfc 	bl	8002e16 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800661e:	2200      	movs	r2, #0
 8006620:	f04f 31ff 	mov.w	r1, #4294967295
 8006624:	4802      	ldr	r0, [pc, #8]	; (8006630 <cppLoop+0x950>)
 8006626:	f7fb fcf1 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 800662a:	f000 bc2d 	b.w	8006e88 <cppLoop+0x11a8>
 800662e:	bf00      	nop
 8006630:	200005a0 	.word	0x200005a0
 8006634:	08017e7c 	.word	0x08017e7c
 8006638:	08017e84 	.word	0x08017e84
 800663c:	20000594 	.word	0x20000594
 8006640:	200005c4 	.word	0x200005c4
 8006644:	3dcccccd 	.word	0x3dcccccd
 8006648:	2001fa1c 	.word	0x2001fa1c
 800664c:	08017e8c 	.word	0x08017e8c
 8006650:	08017e98 	.word	0x08017e98
 8006654:	08017ea8 	.word	0x08017ea8
 8006658:	2001f9e4 	.word	0x2001f9e4
 800665c:	08017eb4 	.word	0x08017eb4
 8006660:	08017ebc 	.word	0x08017ebc
 8006664:	00000000 	.word	0x00000000
 8006668:	2001f9cc 	.word	0x2001f9cc
 800666c:	08017ec8 	.word	0x08017ec8
 8006670:	08017ed0 	.word	0x08017ed0
 8006674:	08017edc 	.word	0x08017edc
 8006678:	08017e74 	.word	0x08017e74
 800667c:	3d8f5c29 	.word	0x3d8f5c29
 8006680:	2001fa88 	.word	0x2001fa88
 8006684:	08017ee8 	.word	0x08017ee8
 8006688:	08017ef4 	.word	0x08017ef4
 800668c:	08017f00 	.word	0x08017f00

	case 7:
		led.fullColor('G');
 8006690:	2147      	movs	r1, #71	; 0x47
 8006692:	48b3      	ldr	r0, [pc, #716]	; (8006960 <cppLoop+0xc80>)
 8006694:	f7fb fbfe 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006698:	f7fa fd02 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800669c:	2100      	movs	r1, #0
 800669e:	2000      	movs	r0, #0
 80066a0:	f7fa fd0e 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 80066a4:	48af      	ldr	r0, [pc, #700]	; (8006964 <cppLoop+0xc84>)
 80066a6:	f7fa fd35 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80066aa:	2101      	movs	r1, #1
 80066ac:	2000      	movs	r0, #0
 80066ae:	f7fa fd07 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 80066b2:	48ad      	ldr	r0, [pc, #692]	; (8006968 <cppLoop+0xc88>)
 80066b4:	f7fa fd2e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80066b8:	48ac      	ldr	r0, [pc, #688]	; (800696c <cppLoop+0xc8c>)
 80066ba:	f7fb fb87 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	bf0c      	ite	eq
 80066c4:	2301      	moveq	r3, #1
 80066c6:	2300      	movne	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 83de 	beq.w	8006e8c <cppLoop+0x11ac>
			led.LR(-1, 1);
 80066d0:	2201      	movs	r2, #1
 80066d2:	f04f 31ff 	mov.w	r1, #4294967295
 80066d6:	48a2      	ldr	r0, [pc, #648]	; (8006960 <cppLoop+0xc80>)
 80066d8:	f7fb fc98 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80066dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80066e0:	f000 fd16 	bl	8007110 <HAL_Delay>

			led.fullColor('R');
 80066e4:	2152      	movs	r1, #82	; 0x52
 80066e6:	489e      	ldr	r0, [pc, #632]	; (8006960 <cppLoop+0xc80>)
 80066e8:	f7fb fbd4 	bl	8001e94 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80066ec:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8006970 <cppLoop+0xc90>
 80066f0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8006974 <cppLoop+0xc94>
 80066f4:	48a0      	ldr	r0, [pc, #640]	; (8006978 <cppLoop+0xc98>)
 80066f6:	f7fd fabf 	bl	8003c78 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80066fa:	489f      	ldr	r0, [pc, #636]	; (8006978 <cppLoop+0xc98>)
 80066fc:	f7fd fb15 	bl	8003d2a <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006704:	f000 fd04 	bl	8007110 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006708:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8006974 <cppLoop+0xc94>
 800670c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006974 <cppLoop+0xc94>
 8006710:	4899      	ldr	r0, [pc, #612]	; (8006978 <cppLoop+0xc98>)
 8006712:	f7fd fab1 	bl	8003c78 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006716:	2064      	movs	r0, #100	; 0x64
 8006718:	f000 fcfa 	bl	8007110 <HAL_Delay>
			velocity_ctrl.stop();
 800671c:	4896      	ldr	r0, [pc, #600]	; (8006978 <cppLoop+0xc98>)
 800671e:	f7fd fb13 	bl	8003d48 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006722:	2200      	movs	r2, #0
 8006724:	f04f 31ff 	mov.w	r1, #4294967295
 8006728:	488d      	ldr	r0, [pc, #564]	; (8006960 <cppLoop+0xc80>)
 800672a:	f7fb fc6f 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 800672e:	e3ad      	b.n	8006e8c <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006730:	2142      	movs	r1, #66	; 0x42
 8006732:	488b      	ldr	r0, [pc, #556]	; (8006960 <cppLoop+0xc80>)
 8006734:	f7fb fbae 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006738:	f7fa fcb2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800673c:	2100      	movs	r1, #0
 800673e:	2000      	movs	r0, #0
 8006740:	f7fa fcbe 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006744:	488d      	ldr	r0, [pc, #564]	; (800697c <cppLoop+0xc9c>)
 8006746:	f7fc fe8b 	bl	8003460 <_ZN13PathFollowing8getKxValEv>
 800674a:	ec51 0b10 	vmov	r0, r1, d0
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	4b8b      	ldr	r3, [pc, #556]	; (8006980 <cppLoop+0xca0>)
 8006754:	f7f9 ff68 	bl	8000628 <__aeabi_dmul>
 8006758:	4603      	mov	r3, r0
 800675a:	460c      	mov	r4, r1
 800675c:	461a      	mov	r2, r3
 800675e:	4623      	mov	r3, r4
 8006760:	4888      	ldr	r0, [pc, #544]	; (8006984 <cppLoop+0xca4>)
 8006762:	f7fa fcd7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006766:	2101      	movs	r1, #1
 8006768:	2000      	movs	r0, #0
 800676a:	f7fa fca9 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 800676e:	4883      	ldr	r0, [pc, #524]	; (800697c <cppLoop+0xc9c>)
 8006770:	f7fc fe8a 	bl	8003488 <_ZN13PathFollowing8getKyValEv>
 8006774:	ec51 0b10 	vmov	r0, r1, d0
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	4b80      	ldr	r3, [pc, #512]	; (8006980 <cppLoop+0xca0>)
 800677e:	f7f9 ff53 	bl	8000628 <__aeabi_dmul>
 8006782:	4603      	mov	r3, r0
 8006784:	460c      	mov	r4, r1
 8006786:	461d      	mov	r5, r3
 8006788:	4626      	mov	r6, r4
 800678a:	487c      	ldr	r0, [pc, #496]	; (800697c <cppLoop+0xc9c>)
 800678c:	f7fc fe90 	bl	80034b0 <_ZN13PathFollowing8getKtValEv>
 8006790:	ec51 0b10 	vmov	r0, r1, d0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	4b79      	ldr	r3, [pc, #484]	; (8006980 <cppLoop+0xca0>)
 800679a:	f7f9 ff45 	bl	8000628 <__aeabi_dmul>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	e9cd 3400 	strd	r3, r4, [sp]
 80067a6:	462a      	mov	r2, r5
 80067a8:	4633      	mov	r3, r6
 80067aa:	4877      	ldr	r0, [pc, #476]	; (8006988 <cppLoop+0xca8>)
 80067ac:	f7fa fcb2 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 80067b0:	4b76      	ldr	r3, [pc, #472]	; (800698c <cppLoop+0xcac>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f3bf 8f5b 	dmb	ish
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <cppLoop+0xb20>
 80067cc:	486f      	ldr	r0, [pc, #444]	; (800698c <cppLoop+0xcac>)
 80067ce:	f00b f99c 	bl	8011b0a <__cxa_guard_acquire>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00e      	beq.n	8006800 <cppLoop+0xb20>
 80067e2:	4866      	ldr	r0, [pc, #408]	; (800697c <cppLoop+0xc9c>)
 80067e4:	f7fc fe3c 	bl	8003460 <_ZN13PathFollowing8getKxValEv>
 80067e8:	ec54 3b10 	vmov	r3, r4, d0
 80067ec:	4618      	mov	r0, r3
 80067ee:	4621      	mov	r1, r4
 80067f0:	f7fa fa12 	bl	8000c18 <__aeabi_d2f>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <cppLoop+0xcb0>)
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	4864      	ldr	r0, [pc, #400]	; (800698c <cppLoop+0xcac>)
 80067fc:	f00b f991 	bl	8011b22 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006800:	4b64      	ldr	r3, [pc, #400]	; (8006994 <cppLoop+0xcb4>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	f3bf 8f5b 	dmb	ish
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf0c      	ite	eq
 8006812:	2301      	moveq	r3, #1
 8006814:	2300      	movne	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d019      	beq.n	8006850 <cppLoop+0xb70>
 800681c:	485d      	ldr	r0, [pc, #372]	; (8006994 <cppLoop+0xcb4>)
 800681e:	f00b f974 	bl	8011b0a <__cxa_guard_acquire>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <cppLoop+0xb70>
 8006832:	4852      	ldr	r0, [pc, #328]	; (800697c <cppLoop+0xc9c>)
 8006834:	f7fc fe28 	bl	8003488 <_ZN13PathFollowing8getKyValEv>
 8006838:	ec54 3b10 	vmov	r3, r4, d0
 800683c:	4618      	mov	r0, r3
 800683e:	4621      	mov	r1, r4
 8006840:	f7fa f9ea 	bl	8000c18 <__aeabi_d2f>
 8006844:	4602      	mov	r2, r0
 8006846:	4b54      	ldr	r3, [pc, #336]	; (8006998 <cppLoop+0xcb8>)
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	4852      	ldr	r0, [pc, #328]	; (8006994 <cppLoop+0xcb4>)
 800684c:	f00b f969 	bl	8011b22 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006850:	4b52      	ldr	r3, [pc, #328]	; (800699c <cppLoop+0xcbc>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f3bf 8f5b 	dmb	ish
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d019      	beq.n	80068a0 <cppLoop+0xbc0>
 800686c:	484b      	ldr	r0, [pc, #300]	; (800699c <cppLoop+0xcbc>)
 800686e:	f00b f94c 	bl	8011b0a <__cxa_guard_acquire>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <cppLoop+0xbc0>
 8006882:	483e      	ldr	r0, [pc, #248]	; (800697c <cppLoop+0xc9c>)
 8006884:	f7fc fe14 	bl	80034b0 <_ZN13PathFollowing8getKtValEv>
 8006888:	ec54 3b10 	vmov	r3, r4, d0
 800688c:	4618      	mov	r0, r3
 800688e:	4621      	mov	r1, r4
 8006890:	f7fa f9c2 	bl	8000c18 <__aeabi_d2f>
 8006894:	4602      	mov	r2, r0
 8006896:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <cppLoop+0xcc0>)
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	4840      	ldr	r0, [pc, #256]	; (800699c <cppLoop+0xcbc>)
 800689c:	f00b f941 	bl	8011b22 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80068a0:	4832      	ldr	r0, [pc, #200]	; (800696c <cppLoop+0xc8c>)
 80068a2:	f7fb fa93 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	bf0c      	ite	eq
 80068ac:	2301      	moveq	r3, #1
 80068ae:	2300      	movne	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d021      	beq.n	80068fa <cppLoop+0xc1a>
			led.LR(-1, 1);
 80068b6:	2201      	movs	r2, #1
 80068b8:	f04f 31ff 	mov.w	r1, #4294967295
 80068bc:	4828      	ldr	r0, [pc, #160]	; (8006960 <cppLoop+0xc80>)
 80068be:	f7fb fba5 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80068c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80068c6:	f000 fc23 	bl	8007110 <HAL_Delay>

			selector++;
 80068ca:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <cppLoop+0xcc4>)
 80068cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3301      	adds	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	b21a      	sxth	r2, r3
 80068d8:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <cppLoop+0xcc4>)
 80068da:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80068dc:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <cppLoop+0xcc4>)
 80068de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	dd02      	ble.n	80068ec <cppLoop+0xc0c>
 80068e6:	4b2f      	ldr	r3, [pc, #188]	; (80069a4 <cppLoop+0xcc4>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80068ec:	2200      	movs	r2, #0
 80068ee:	f04f 31ff 	mov.w	r1, #4294967295
 80068f2:	481b      	ldr	r0, [pc, #108]	; (8006960 <cppLoop+0xc80>)
 80068f4:	f7fb fb8a 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80068f8:	e2ca      	b.n	8006e90 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 80068fa:	481c      	ldr	r0, [pc, #112]	; (800696c <cppLoop+0xc8c>)
 80068fc:	f7fb fa66 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006900:	4603      	mov	r3, r0
 8006902:	2b10      	cmp	r3, #16
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8082 	beq.w	8006a16 <cppLoop+0xd36>
			led.LR(-1, 1);
 8006912:	2201      	movs	r2, #1
 8006914:	f04f 31ff 	mov.w	r1, #4294967295
 8006918:	4811      	ldr	r0, [pc, #68]	; (8006960 <cppLoop+0xc80>)
 800691a:	f7fb fb77 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800691e:	2064      	movs	r0, #100	; 0x64
 8006920:	f000 fbf6 	bl	8007110 <HAL_Delay>
			if(selector == 0){
 8006924:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <cppLoop+0xcc4>)
 8006926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d13c      	bne.n	80069a8 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <cppLoop+0xcb0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fe20 	bl	8000578 <__aeabi_f2d>
 8006938:	a307      	add	r3, pc, #28	; (adr r3, 8006958 <cppLoop+0xc78>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fcbd 	bl	80002bc <__adddf3>
 8006942:	4603      	mov	r3, r0
 8006944:	460c      	mov	r4, r1
 8006946:	4618      	mov	r0, r3
 8006948:	4621      	mov	r1, r4
 800694a:	f7fa f965 	bl	8000c18 <__aeabi_d2f>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <cppLoop+0xcb0>)
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e054      	b.n	8006a00 <cppLoop+0xd20>
 8006956:	bf00      	nop
 8006958:	88e368f1 	.word	0x88e368f1
 800695c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006960:	200005a0 	.word	0x200005a0
 8006964:	08017f04 	.word	0x08017f04
 8006968:	08017f10 	.word	0x08017f10
 800696c:	20000594 	.word	0x20000594
 8006970:	3fc8f5c3 	.word	0x3fc8f5c3
 8006974:	00000000 	.word	0x00000000
 8006978:	2001f9e4 	.word	0x2001f9e4
 800697c:	2001fcc8 	.word	0x2001fcc8
 8006980:	408f4000 	.word	0x408f4000
 8006984:	08017e10 	.word	0x08017e10
 8006988:	08017e1c 	.word	0x08017e1c
 800698c:	20037420 	.word	0x20037420
 8006990:	2003741c 	.word	0x2003741c
 8006994:	20037428 	.word	0x20037428
 8006998:	20037424 	.word	0x20037424
 800699c:	20037430 	.word	0x20037430
 80069a0:	2003742c 	.word	0x2003742c
 80069a4:	20037400 	.word	0x20037400
			else if(selector == 1){
 80069a8:	4ba3      	ldr	r3, [pc, #652]	; (8006c38 <cppLoop+0xf58>)
 80069aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d113      	bne.n	80069da <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 80069b2:	4ba2      	ldr	r3, [pc, #648]	; (8006c3c <cppLoop+0xf5c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7f9 fdde 	bl	8000578 <__aeabi_f2d>
 80069bc:	a39c      	add	r3, pc, #624	; (adr r3, 8006c30 <cppLoop+0xf50>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 fc7b 	bl	80002bc <__adddf3>
 80069c6:	4603      	mov	r3, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	4618      	mov	r0, r3
 80069cc:	4621      	mov	r1, r4
 80069ce:	f7fa f923 	bl	8000c18 <__aeabi_d2f>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b99      	ldr	r3, [pc, #612]	; (8006c3c <cppLoop+0xf5c>)
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e012      	b.n	8006a00 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 80069da:	4b99      	ldr	r3, [pc, #612]	; (8006c40 <cppLoop+0xf60>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7f9 fdca 	bl	8000578 <__aeabi_f2d>
 80069e4:	a392      	add	r3, pc, #584	; (adr r3, 8006c30 <cppLoop+0xf50>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fc67 	bl	80002bc <__adddf3>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	4618      	mov	r0, r3
 80069f4:	4621      	mov	r1, r4
 80069f6:	f7fa f90f 	bl	8000c18 <__aeabi_d2f>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b90      	ldr	r3, [pc, #576]	; (8006c40 <cppLoop+0xf60>)
 80069fe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006a00:	2152      	movs	r1, #82	; 0x52
 8006a02:	4890      	ldr	r0, [pc, #576]	; (8006c44 <cppLoop+0xf64>)
 8006a04:	f7fb fa46 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a0e:	488d      	ldr	r0, [pc, #564]	; (8006c44 <cppLoop+0xf64>)
 8006a10:	f7fb fafc 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006a14:	e23c      	b.n	8006e90 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 8006a16:	488c      	ldr	r0, [pc, #560]	; (8006c48 <cppLoop+0xf68>)
 8006a18:	f7fb f9d8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d058      	beq.n	8006ade <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a32:	4884      	ldr	r0, [pc, #528]	; (8006c44 <cppLoop+0xf64>)
 8006a34:	f7fb faea 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006a38:	2064      	movs	r0, #100	; 0x64
 8006a3a:	f000 fb69 	bl	8007110 <HAL_Delay>
			if(selector == 0){
 8006a3e:	4b7e      	ldr	r3, [pc, #504]	; (8006c38 <cppLoop+0xf58>)
 8006a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d113      	bne.n	8006a70 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8006a48:	4b80      	ldr	r3, [pc, #512]	; (8006c4c <cppLoop+0xf6c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7f9 fd93 	bl	8000578 <__aeabi_f2d>
 8006a52:	a377      	add	r3, pc, #476	; (adr r3, 8006c30 <cppLoop+0xf50>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fc2e 	bl	80002b8 <__aeabi_dsub>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4618      	mov	r0, r3
 8006a62:	4621      	mov	r1, r4
 8006a64:	f7fa f8d8 	bl	8000c18 <__aeabi_d2f>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b78      	ldr	r3, [pc, #480]	; (8006c4c <cppLoop+0xf6c>)
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e02b      	b.n	8006ac8 <cppLoop+0xde8>
			else if(selector == 1){
 8006a70:	4b71      	ldr	r3, [pc, #452]	; (8006c38 <cppLoop+0xf58>)
 8006a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d113      	bne.n	8006aa2 <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8006a7a:	4b70      	ldr	r3, [pc, #448]	; (8006c3c <cppLoop+0xf5c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7f9 fd7a 	bl	8000578 <__aeabi_f2d>
 8006a84:	a36a      	add	r3, pc, #424	; (adr r3, 8006c30 <cppLoop+0xf50>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fc15 	bl	80002b8 <__aeabi_dsub>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	4618      	mov	r0, r3
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7fa f8bf 	bl	8000c18 <__aeabi_d2f>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <cppLoop+0xf5c>)
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e012      	b.n	8006ac8 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8006aa2:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <cppLoop+0xf60>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 fd66 	bl	8000578 <__aeabi_f2d>
 8006aac:	a360      	add	r3, pc, #384	; (adr r3, 8006c30 <cppLoop+0xf50>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fc01 	bl	80002b8 <__aeabi_dsub>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	460c      	mov	r4, r1
 8006aba:	4618      	mov	r0, r3
 8006abc:	4621      	mov	r1, r4
 8006abe:	f7fa f8ab 	bl	8000c18 <__aeabi_d2f>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b5e      	ldr	r3, [pc, #376]	; (8006c40 <cppLoop+0xf60>)
 8006ac6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006ac8:	2152      	movs	r1, #82	; 0x52
 8006aca:	485e      	ldr	r0, [pc, #376]	; (8006c44 <cppLoop+0xf64>)
 8006acc:	f7fb f9e2 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ad6:	485b      	ldr	r0, [pc, #364]	; (8006c44 <cppLoop+0xf64>)
 8006ad8:	f7fb fa98 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006adc:	e1d8      	b.n	8006e90 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 8006ade:	485a      	ldr	r0, [pc, #360]	; (8006c48 <cppLoop+0xf68>)
 8006ae0:	f7fb f974 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d048      	beq.n	8006b86 <cppLoop+0xea6>
			led.LR(-1, 1);
 8006af4:	2201      	movs	r2, #1
 8006af6:	f04f 31ff 	mov.w	r1, #4294967295
 8006afa:	4852      	ldr	r0, [pc, #328]	; (8006c44 <cppLoop+0xf64>)
 8006afc:	f7fb fa86 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006b00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006b04:	f000 fb04 	bl	8007110 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4950      	ldr	r1, [pc, #320]	; (8006c50 <cppLoop+0xf70>)
 8006b10:	4850      	ldr	r0, [pc, #320]	; (8006c54 <cppLoop+0xf74>)
 8006b12:	f7fa fd93 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	494e      	ldr	r1, [pc, #312]	; (8006c58 <cppLoop+0xf78>)
 8006b1e:	484d      	ldr	r0, [pc, #308]	; (8006c54 <cppLoop+0xf74>)
 8006b20:	f7fa fd8c 	bl	800163c <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	2201      	movs	r2, #1
 8006b28:	494c      	ldr	r1, [pc, #304]	; (8006c5c <cppLoop+0xf7c>)
 8006b2a:	484a      	ldr	r0, [pc, #296]	; (8006c54 <cppLoop+0xf74>)
 8006b2c:	f7fa fd86 	bl	800163c <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fd20 	bl	8000578 <__aeabi_f2d>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7f9 fd1a 	bl	8000578 <__aeabi_f2d>
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7f9 fd14 	bl	8000578 <__aeabi_f2d>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	ec43 2b12 	vmov	d2, r2, r3
 8006b58:	ec49 8b11 	vmov	d1, r8, r9
 8006b5c:	ec45 4b10 	vmov	d0, r4, r5
 8006b60:	483f      	ldr	r0, [pc, #252]	; (8006c60 <cppLoop+0xf80>)
 8006b62:	f7fc fc5d 	bl	8003420 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a38      	ldr	r2, [pc, #224]	; (8006c4c <cppLoop+0xf6c>)
 8006b6a:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4a33      	ldr	r2, [pc, #204]	; (8006c3c <cppLoop+0xf5c>)
 8006b70:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <cppLoop+0xf60>)
 8006b76:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b7e:	4831      	ldr	r0, [pc, #196]	; (8006c44 <cppLoop+0xf64>)
 8006b80:	f7fb fa44 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006b84:	e184      	b.n	8006e90 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 8006b86:	4830      	ldr	r0, [pc, #192]	; (8006c48 <cppLoop+0xf68>)
 8006b88:	f7fb f920 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	bf0c      	ite	eq
 8006b92:	2301      	moveq	r3, #1
 8006b94:	2300      	movne	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8179 	beq.w	8006e90 <cppLoop+0x11b0>
			led.LR(-1, 1);
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ba4:	4827      	ldr	r0, [pc, #156]	; (8006c44 <cppLoop+0xf64>)
 8006ba6:	f7fb fa31 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006baa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006bae:	f000 faaf 	bl	8007110 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <cppLoop+0xf6c>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4925      	ldr	r1, [pc, #148]	; (8006c50 <cppLoop+0xf70>)
 8006bbc:	4825      	ldr	r0, [pc, #148]	; (8006c54 <cppLoop+0xf74>)
 8006bbe:	f7fa fcd7 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <cppLoop+0xf5c>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4923      	ldr	r1, [pc, #140]	; (8006c58 <cppLoop+0xf78>)
 8006bcc:	4821      	ldr	r0, [pc, #132]	; (8006c54 <cppLoop+0xf74>)
 8006bce:	f7fa fccf 	bl	8001570 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <cppLoop+0xf60>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	4920      	ldr	r1, [pc, #128]	; (8006c5c <cppLoop+0xf7c>)
 8006bdc:	481d      	ldr	r0, [pc, #116]	; (8006c54 <cppLoop+0xf74>)
 8006bde:	f7fa fcc7 	bl	8001570 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8006be2:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <cppLoop+0xf6c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fcc6 	bl	8000578 <__aeabi_f2d>
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <cppLoop+0xf5c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7f9 fcbf 	bl	8000578 <__aeabi_f2d>
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	4689      	mov	r9, r1
 8006bfe:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <cppLoop+0xf60>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fcb8 	bl	8000578 <__aeabi_f2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	ec43 2b12 	vmov	d2, r2, r3
 8006c10:	ec49 8b11 	vmov	d1, r8, r9
 8006c14:	ec45 4b10 	vmov	d0, r4, r5
 8006c18:	4811      	ldr	r0, [pc, #68]	; (8006c60 <cppLoop+0xf80>)
 8006c1a:	f7fc fc01 	bl	8003420 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f04f 31ff 	mov.w	r1, #4294967295
 8006c24:	4807      	ldr	r0, [pc, #28]	; (8006c44 <cppLoop+0xf64>)
 8006c26:	f7fb f9f1 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006c2a:	e131      	b.n	8006e90 <cppLoop+0x11b0>
 8006c2c:	f3af 8000 	nop.w
 8006c30:	88e368f1 	.word	0x88e368f1
 8006c34:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c38:	20037400 	.word	0x20037400
 8006c3c:	20037424 	.word	0x20037424
 8006c40:	2003742c 	.word	0x2003742c
 8006c44:	200005a0 	.word	0x200005a0
 8006c48:	20000594 	.word	0x20000594
 8006c4c:	2003741c 	.word	0x2003741c
 8006c50:	08017f18 	.word	0x08017f18
 8006c54:	08017e38 	.word	0x08017e38
 8006c58:	08017f20 	.word	0x08017f20
 8006c5c:	08017f28 	.word	0x08017f28
 8006c60:	2001fcc8 	.word	0x2001fcc8

	case 9:
		led.fullColor('M');
 8006c64:	214d      	movs	r1, #77	; 0x4d
 8006c66:	4898      	ldr	r0, [pc, #608]	; (8006ec8 <cppLoop+0x11e8>)
 8006c68:	f7fb f914 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c6c:	f7fa fa18 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c70:	2100      	movs	r1, #0
 8006c72:	2000      	movs	r0, #0
 8006c74:	f7fa fa24 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8006c78:	4894      	ldr	r0, [pc, #592]	; (8006ecc <cppLoop+0x11ec>)
 8006c7a:	f7fa fa4b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c7e:	2101      	movs	r1, #1
 8006c80:	2000      	movs	r0, #0
 8006c82:	f7fa fa1d 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006c86:	4892      	ldr	r0, [pc, #584]	; (8006ed0 <cppLoop+0x11f0>)
 8006c88:	f7fa fa44 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c8c:	4891      	ldr	r0, [pc, #580]	; (8006ed4 <cppLoop+0x11f4>)
 8006c8e:	f7fb f89d 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	bf0c      	ite	eq
 8006c98:	2301      	moveq	r3, #1
 8006c9a:	2300      	movne	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80f8 	beq.w	8006e94 <cppLoop+0x11b4>
			HAL_Delay(1500);
 8006ca4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006ca8:	f000 fa32 	bl	8007110 <HAL_Delay>
			led.LR(-1, 1);
 8006cac:	2201      	movs	r2, #1
 8006cae:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb2:	4885      	ldr	r0, [pc, #532]	; (8006ec8 <cppLoop+0x11e8>)
 8006cb4:	f7fb f9aa 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006cb8:	4887      	ldr	r0, [pc, #540]	; (8006ed8 <cppLoop+0x11f8>)
 8006cba:	f7fc f8cf 	bl	8002e5c <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006cbe:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8006eb0 <cppLoop+0x11d0>
 8006cc2:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8006eb8 <cppLoop+0x11d8>
 8006cc6:	4885      	ldr	r0, [pc, #532]	; (8006edc <cppLoop+0x11fc>)
 8006cc8:	f7fc f95a 	bl	8002f80 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cd0:	f000 fa1e 	bl	8007110 <HAL_Delay>

			logger.stop();
 8006cd4:	4880      	ldr	r0, [pc, #512]	; (8006ed8 <cppLoop+0x11f8>)
 8006cd6:	f7fc f8d0 	bl	8002e7a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8006cda:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8006ec0 <cppLoop+0x11e0>
 8006cde:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8006ec0 <cppLoop+0x11e0>
 8006ce2:	487e      	ldr	r0, [pc, #504]	; (8006edc <cppLoop+0x11fc>)
 8006ce4:	f7fc f94c 	bl	8002f80 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8006ce8:	4a7d      	ldr	r2, [pc, #500]	; (8006ee0 <cppLoop+0x1200>)
 8006cea:	497e      	ldr	r1, [pc, #504]	; (8006ee4 <cppLoop+0x1204>)
 8006cec:	487a      	ldr	r0, [pc, #488]	; (8006ed8 <cppLoop+0x11f8>)
 8006cee:	f7fc f868 	bl	8002dc2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf8:	4873      	ldr	r0, [pc, #460]	; (8006ec8 <cppLoop+0x11e8>)
 8006cfa:	f7fb f987 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006cfe:	e0c9      	b.n	8006e94 <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8006d00:	2159      	movs	r1, #89	; 0x59
 8006d02:	4871      	ldr	r0, [pc, #452]	; (8006ec8 <cppLoop+0x11e8>)
 8006d04:	f7fb f8c6 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d08:	f7fa f9ca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f7fa f9d6 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006d14:	4874      	ldr	r0, [pc, #464]	; (8006ee8 <cppLoop+0x1208>)
 8006d16:	f7fa f9fd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f7fa f9cf 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006d22:	4872      	ldr	r0, [pc, #456]	; (8006eec <cppLoop+0x120c>)
 8006d24:	f7fa f9f6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d28:	486a      	ldr	r0, [pc, #424]	; (8006ed4 <cppLoop+0x11f4>)
 8006d2a:	f7fb f84f 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80ac 	beq.w	8006e98 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8006d40:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006d44:	f000 f9e4 	bl	8007110 <HAL_Delay>
			led.LR(-1, 1);
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4e:	485e      	ldr	r0, [pc, #376]	; (8006ec8 <cppLoop+0x11e8>)
 8006d50:	f7fb f95c 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 8006d54:	4860      	ldr	r0, [pc, #384]	; (8006ed8 <cppLoop+0x11f8>)
 8006d56:	f7fc f881 	bl	8002e5c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8006d5a:	4865      	ldr	r0, [pc, #404]	; (8006ef0 <cppLoop+0x1210>)
 8006d5c:	f7fc ffe5 	bl	8003d2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.8, 0);
 8006d60:	eddf 0a64 	vldr	s1, [pc, #400]	; 8006ef4 <cppLoop+0x1214>
 8006d64:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8006ef8 <cppLoop+0x1218>
 8006d68:	4861      	ldr	r0, [pc, #388]	; (8006ef0 <cppLoop+0x1210>)
 8006d6a:	f7fc ff85 	bl	8003c78 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d72:	f000 f9cd 	bl	8007110 <HAL_Delay>

			logger.stop();
 8006d76:	4858      	ldr	r0, [pc, #352]	; (8006ed8 <cppLoop+0x11f8>)
 8006d78:	f7fc f87f 	bl	8002e7a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006d7c:	485c      	ldr	r0, [pc, #368]	; (8006ef0 <cppLoop+0x1210>)
 8006d7e:	f7fc ffe3 	bl	8003d48 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006d82:	4a5e      	ldr	r2, [pc, #376]	; (8006efc <cppLoop+0x121c>)
 8006d84:	4957      	ldr	r1, [pc, #348]	; (8006ee4 <cppLoop+0x1204>)
 8006d86:	4854      	ldr	r0, [pc, #336]	; (8006ed8 <cppLoop+0x11f8>)
 8006d88:	f7fc f81b 	bl	8002dc2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d92:	484d      	ldr	r0, [pc, #308]	; (8006ec8 <cppLoop+0x11e8>)
 8006d94:	f7fb f93a 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006d98:	e07e      	b.n	8006e98 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 8006d9a:	2143      	movs	r1, #67	; 0x43
 8006d9c:	484a      	ldr	r0, [pc, #296]	; (8006ec8 <cppLoop+0x11e8>)
 8006d9e:	f7fb f879 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006da2:	f7fa f97d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006da6:	2100      	movs	r1, #0
 8006da8:	2000      	movs	r0, #0
 8006daa:	f7fa f989 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 8006dae:	4854      	ldr	r0, [pc, #336]	; (8006f00 <cppLoop+0x1220>)
 8006db0:	f7fa f9b0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006db4:	2101      	movs	r1, #1
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7fa f982 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006dbc:	4851      	ldr	r0, [pc, #324]	; (8006f04 <cppLoop+0x1224>)
 8006dbe:	f7fa f9a9 	bl	8001114 <lcd_printf>

		break;
 8006dc2:	e06a      	b.n	8006e9a <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 8006dc4:	2152      	movs	r1, #82	; 0x52
 8006dc6:	4840      	ldr	r0, [pc, #256]	; (8006ec8 <cppLoop+0x11e8>)
 8006dc8:	f7fb f864 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006dcc:	f7fa f968 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f7fa f974 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8006dd8:	484b      	ldr	r0, [pc, #300]	; (8006f08 <cppLoop+0x1228>)
 8006dda:	f7fa f99b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006dde:	2101      	movs	r1, #1
 8006de0:	2000      	movs	r0, #0
 8006de2:	f7fa f96d 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006de6:	4847      	ldr	r0, [pc, #284]	; (8006f04 <cppLoop+0x1224>)
 8006de8:	f7fa f994 	bl	8001114 <lcd_printf>

		break;
 8006dec:	e055      	b.n	8006e9a <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 8006dee:	2147      	movs	r1, #71	; 0x47
 8006df0:	4835      	ldr	r0, [pc, #212]	; (8006ec8 <cppLoop+0x11e8>)
 8006df2:	f7fb f84f 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006df6:	f7fa f953 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f7fa f95f 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8006e02:	4842      	ldr	r0, [pc, #264]	; (8006f0c <cppLoop+0x122c>)
 8006e04:	f7fa f986 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e08:	2101      	movs	r1, #1
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f7fa f958 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e10:	483c      	ldr	r0, [pc, #240]	; (8006f04 <cppLoop+0x1224>)
 8006e12:	f7fa f97f 	bl	8001114 <lcd_printf>

		break;
 8006e16:	e040      	b.n	8006e9a <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8006e18:	2142      	movs	r1, #66	; 0x42
 8006e1a:	482b      	ldr	r0, [pc, #172]	; (8006ec8 <cppLoop+0x11e8>)
 8006e1c:	f7fb f83a 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e20:	f7fa f93e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e24:	2100      	movs	r1, #0
 8006e26:	2000      	movs	r0, #0
 8006e28:	f7fa f94a 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8006e2c:	4838      	ldr	r0, [pc, #224]	; (8006f10 <cppLoop+0x1230>)
 8006e2e:	f7fa f971 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e32:	2101      	movs	r1, #1
 8006e34:	2000      	movs	r0, #0
 8006e36:	f7fa f943 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e3a:	4832      	ldr	r0, [pc, #200]	; (8006f04 <cppLoop+0x1224>)
 8006e3c:	f7fa f96a 	bl	8001114 <lcd_printf>

		break;
 8006e40:	e02b      	b.n	8006e9a <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 8006e42:	214d      	movs	r1, #77	; 0x4d
 8006e44:	4820      	ldr	r0, [pc, #128]	; (8006ec8 <cppLoop+0x11e8>)
 8006e46:	f7fb f825 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e4a:	f7fa f929 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e4e:	2100      	movs	r1, #0
 8006e50:	2000      	movs	r0, #0
 8006e52:	f7fa f935 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8006e56:	482f      	ldr	r0, [pc, #188]	; (8006f14 <cppLoop+0x1234>)
 8006e58:	f7fa f95c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f7fa f92e 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8006e64:	4827      	ldr	r0, [pc, #156]	; (8006f04 <cppLoop+0x1224>)
 8006e66:	f7fa f955 	bl	8001114 <lcd_printf>

		break;
 8006e6a:	e016      	b.n	8006e9a <cppLoop+0x11ba>

	default:
		break;
 8006e6c:	bf00      	nop
 8006e6e:	e014      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e70:	bf00      	nop
 8006e72:	e012      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e74:	bf00      	nop
 8006e76:	e010      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e78:	bf00      	nop
 8006e7a:	e00e      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e7c:	bf00      	nop
 8006e7e:	e00c      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e80:	bf00      	nop
 8006e82:	e00a      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e84:	bf00      	nop
 8006e86:	e008      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e88:	bf00      	nop
 8006e8a:	e006      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e8c:	bf00      	nop
 8006e8e:	e004      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e90:	bf00      	nop
 8006e92:	e002      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e94:	bf00      	nop
 8006e96:	e000      	b.n	8006e9a <cppLoop+0x11ba>
		break;
 8006e98:	bf00      	nop

	}

	HAL_Delay(30);
 8006e9a:	201e      	movs	r0, #30
 8006e9c:	f000 f938 	bl	8007110 <HAL_Delay>

}
 8006ea0:	bf00      	nop
 8006ea2:	3724      	adds	r7, #36	; 0x24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w
 8006eb0:	33333333 	.word	0x33333333
 8006eb4:	bfd33333 	.word	0xbfd33333
 8006eb8:	33333333 	.word	0x33333333
 8006ebc:	3fd33333 	.word	0x3fd33333
	...
 8006ec8:	200005a0 	.word	0x200005a0
 8006ecc:	08017f30 	.word	0x08017f30
 8006ed0:	08017e74 	.word	0x08017e74
 8006ed4:	20000594 	.word	0x20000594
 8006ed8:	200005c4 	.word	0x200005c4
 8006edc:	2000059c 	.word	0x2000059c
 8006ee0:	08017f38 	.word	0x08017f38
 8006ee4:	08017f44 	.word	0x08017f44
 8006ee8:	08017f50 	.word	0x08017f50
 8006eec:	08017f54 	.word	0x08017f54
 8006ef0:	2001f9e4 	.word	0x2001f9e4
 8006ef4:	00000000 	.word	0x00000000
 8006ef8:	3f4ccccd 	.word	0x3f4ccccd
 8006efc:	08017f60 	.word	0x08017f60
 8006f00:	08017f6c 	.word	0x08017f6c
 8006f04:	08017f78 	.word	0x08017f78
 8006f08:	08017f84 	.word	0x08017f84
 8006f0c:	08017f90 	.word	0x08017f90
 8006f10:	08017f9c 	.word	0x08017f9c
 8006f14:	08017fa8 	.word	0x08017fa8

08006f18 <_Z41__static_initialization_and_destruction_0ii>:
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d133      	bne.n	8006f90 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d12e      	bne.n	8006f90 <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 8006f32:	4819      	ldr	r0, [pc, #100]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006f34:	f7fb f8a2 	bl	800207c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006f38:	4818      	ldr	r0, [pc, #96]	; (8006f9c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006f3a:	f7fc fb99 	bl	8003670 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006f3e:	4818      	ldr	r0, [pc, #96]	; (8006fa0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006f40:	f7fa ff38 	bl	8001db4 <_ZN8JoyStickC1Ev>
Motor motor;
 8006f44:	4817      	ldr	r0, [pc, #92]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006f46:	f7fb ffa7 	bl	8002e98 <_ZN5MotorC1Ev>
IMU imu;
 8006f4a:	4817      	ldr	r0, [pc, #92]	; (8006fa8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f4c:	f7fa fd28 	bl	80019a0 <_ZN3IMUC1Ev>
Logger logger;
 8006f50:	4816      	ldr	r0, [pc, #88]	; (8006fac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f52:	f7fb fe51 	bl	8002bf8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8006f56:	4816      	ldr	r0, [pc, #88]	; (8006fb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f58:	f7fa f8fc 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006f5c:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f5e:	4a14      	ldr	r2, [pc, #80]	; (8006fb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f60:	4910      	ldr	r1, [pc, #64]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006f62:	4814      	ldr	r0, [pc, #80]	; (8006fb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f64:	f7fc fcf0 	bl	8003948 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8006f68:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f6a:	4a0b      	ldr	r2, [pc, #44]	; (8006f98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006f6c:	490d      	ldr	r1, [pc, #52]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006f6e:	4812      	ldr	r0, [pc, #72]	; (8006fb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006f70:	f7fb fbdc 	bl	800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006f78:	490d      	ldr	r1, [pc, #52]	; (8006fb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8006f7a:	4810      	ldr	r0, [pc, #64]	; (8006fbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006f7c:	f7fc f872 	bl	8003064 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 8006f80:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006f82:	490a      	ldr	r1, [pc, #40]	; (8006fac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006f84:	480e      	ldr	r0, [pc, #56]	; (8006fc0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006f86:	f7fc fbdd 	bl	8003744 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8006f8a:	480e      	ldr	r0, [pc, #56]	; (8006fc4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006f8c:	f7fc f990 	bl	80032b0 <_ZN13PathFollowingC1Ev>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000298 	.word	0x20000298
 8006f9c:	20000590 	.word	0x20000590
 8006fa0:	20000594 	.word	0x20000594
 8006fa4:	2000059c 	.word	0x2000059c
 8006fa8:	200005b0 	.word	0x200005b0
 8006fac:	200005c4 	.word	0x200005c4
 8006fb0:	2001f9cc 	.word	0x2001f9cc
 8006fb4:	2001f9e4 	.word	0x2001f9e4
 8006fb8:	2001fa1c 	.word	0x2001fa1c
 8006fbc:	2001fa88 	.word	0x2001fa88
 8006fc0:	2001fab8 	.word	0x2001fab8
 8006fc4:	2001fcc8 	.word	0x2001fcc8

08006fc8 <_GLOBAL__sub_I_line_sensor>:
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f7ff ffa1 	bl	8006f18 <_Z41__static_initialization_and_destruction_0ii>
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006fde:	e003      	b.n	8006fe8 <LoopCopyDataInit>

08006fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006fe6:	3104      	adds	r1, #4

08006fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006fe8:	480b      	ldr	r0, [pc, #44]	; (8007018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006fea:	4b0c      	ldr	r3, [pc, #48]	; (800701c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006ff0:	d3f6      	bcc.n	8006fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006ff4:	e002      	b.n	8006ffc <LoopFillZerobss>

08006ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ff8:	f842 3b04 	str.w	r3, [r2], #4

08006ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007000:	d3f9      	bcc.n	8006ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007002:	f7fe fcc5 	bl	8005990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007006:	f00b fdeb 	bl	8012be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800700a:	f7fc ff89 	bl	8003f20 <main>
  bx  lr    
 800700e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007010:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007014:	080185b0 	.word	0x080185b0
  ldr  r0, =_sdata
 8007018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800701c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007020:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007024:	2003be10 	.word	0x2003be10

08007028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007028:	e7fe      	b.n	8007028 <ADC_IRQHandler>
	...

0800702c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <HAL_Init+0x40>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a0d      	ldr	r2, [pc, #52]	; (800706c <HAL_Init+0x40>)
 8007036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800703a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_Init+0x40>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <HAL_Init+0x40>)
 8007042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <HAL_Init+0x40>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_Init+0x40>)
 800704e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007054:	2003      	movs	r0, #3
 8007056:	f000 fd51 	bl	8007afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800705a:	2000      	movs	r0, #0
 800705c:	f000 f808 	bl	8007070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007060:	f7fd fe84 	bl	8004d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40023c00 	.word	0x40023c00

08007070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <HAL_InitTick+0x54>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_InitTick+0x58>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007086:	fbb3 f3f1 	udiv	r3, r3, r1
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fd69 	bl	8007b66 <HAL_SYSTICK_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e00e      	b.n	80070bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b0f      	cmp	r3, #15
 80070a2:	d80a      	bhi.n	80070ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070a4:	2200      	movs	r2, #0
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	f000 fd31 	bl	8007b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070b0:	4a06      	ldr	r2, [pc, #24]	; (80070cc <HAL_InitTick+0x5c>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e000      	b.n	80070bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000000 	.word	0x20000000
 80070c8:	20000008 	.word	0x20000008
 80070cc:	20000004 	.word	0x20000004

080070d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_IncTick+0x20>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_IncTick+0x24>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <HAL_IncTick+0x24>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000008 	.word	0x20000008
 80070f4:	20039d98 	.word	0x20039d98

080070f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return uwTick;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <HAL_GetTick+0x14>)
 80070fe:	681b      	ldr	r3, [r3, #0]
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20039d98 	.word	0x20039d98

08007110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007118:	f7ff ffee 	bl	80070f8 <HAL_GetTick>
 800711c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d005      	beq.n	8007136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_Delay+0x40>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007136:	bf00      	nop
 8007138:	f7ff ffde 	bl	80070f8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	429a      	cmp	r2, r3
 8007146:	d8f7      	bhi.n	8007138 <HAL_Delay+0x28>
  {
  }
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000008 	.word	0x20000008

08007154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e033      	b.n	80071d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fd fe22 	bl	8004dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	d118      	bne.n	80071c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800719a:	f023 0302 	bic.w	r3, r3, #2
 800719e:	f043 0202 	orr.w	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa5a 	bl	8007660 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	f043 0201 	orr.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
 80071c2:	e001      	b.n	80071c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_ADC_Start_DMA+0x1e>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e0cc      	b.n	8007394 <HAL_ADC_Start_DMA+0x1b8>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d018      	beq.n	8007242 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007220:	4b5e      	ldr	r3, [pc, #376]	; (800739c <HAL_ADC_Start_DMA+0x1c0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5e      	ldr	r2, [pc, #376]	; (80073a0 <HAL_ADC_Start_DMA+0x1c4>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	0c9a      	lsrs	r2, r3, #18
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007234:	e002      	b.n	800723c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3b01      	subs	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f9      	bne.n	8007236 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	f040 80a0 	bne.w	8007392 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800727c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d106      	bne.n	80072a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	f023 0206 	bic.w	r2, r3, #6
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	645a      	str	r2, [r3, #68]	; 0x44
 800729e:	e002      	b.n	80072a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072ae:	4b3d      	ldr	r3, [pc, #244]	; (80073a4 <HAL_ADC_Start_DMA+0x1c8>)
 80072b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	4a3c      	ldr	r2, [pc, #240]	; (80073a8 <HAL_ADC_Start_DMA+0x1cc>)
 80072b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	4a3b      	ldr	r2, [pc, #236]	; (80073ac <HAL_ADC_Start_DMA+0x1d0>)
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	4a3a      	ldr	r2, [pc, #232]	; (80073b0 <HAL_ADC_Start_DMA+0x1d4>)
 80072c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80072d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80072e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	334c      	adds	r3, #76	; 0x4c
 80072fe:	4619      	mov	r1, r3
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f000 fcea 	bl	8007cdc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	2b00      	cmp	r3, #0
 8007312:	d12a      	bne.n	800736a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <HAL_ADC_Start_DMA+0x1d8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d015      	beq.n	800734a <HAL_ADC_Start_DMA+0x16e>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <HAL_ADC_Start_DMA+0x1dc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d105      	bne.n	8007334 <HAL_ADC_Start_DMA+0x158>
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_ADC_Start_DMA+0x1c8>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a20      	ldr	r2, [pc, #128]	; (80073bc <HAL_ADC_Start_DMA+0x1e0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d129      	bne.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
 800733e:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <HAL_ADC_Start_DMA+0x1c8>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d823      	bhi.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11c      	bne.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	e013      	b.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <HAL_ADC_Start_DMA+0x1d8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10e      	bne.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007390:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000000 	.word	0x20000000
 80073a0:	431bde83 	.word	0x431bde83
 80073a4:	40012300 	.word	0x40012300
 80073a8:	08007859 	.word	0x08007859
 80073ac:	08007913 	.word	0x08007913
 80073b0:	0800792f 	.word	0x0800792f
 80073b4:	40012000 	.word	0x40012000
 80073b8:	40012100 	.word	0x40012100
 80073bc:	40012200 	.word	0x40012200

080073c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x1c>
 8007414:	2302      	movs	r3, #2
 8007416:	e113      	b.n	8007640 <HAL_ADC_ConfigChannel+0x244>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b09      	cmp	r3, #9
 8007426:	d925      	bls.n	8007474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68d9      	ldr	r1, [r3, #12]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	3b1e      	subs	r3, #30
 800743e:	2207      	movs	r2, #7
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43da      	mvns	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	400a      	ands	r2, r1
 800744c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68d9      	ldr	r1, [r3, #12]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	4618      	mov	r0, r3
 8007460:	4603      	mov	r3, r0
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4403      	add	r3, r0
 8007466:	3b1e      	subs	r3, #30
 8007468:	409a      	lsls	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	e022      	b.n	80074ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6919      	ldr	r1, [r3, #16]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	2207      	movs	r2, #7
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43da      	mvns	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	400a      	ands	r2, r1
 8007496:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4618      	mov	r0, r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4403      	add	r3, r0
 80074b0:	409a      	lsls	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b06      	cmp	r3, #6
 80074c0:	d824      	bhi.n	800750c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	3b05      	subs	r3, #5
 80074d4:	221f      	movs	r2, #31
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43da      	mvns	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	400a      	ands	r2, r1
 80074e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4618      	mov	r0, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	3b05      	subs	r3, #5
 80074fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	635a      	str	r2, [r3, #52]	; 0x34
 800750a:	e04c      	b.n	80075a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b0c      	cmp	r3, #12
 8007512:	d824      	bhi.n	800755e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	3b23      	subs	r3, #35	; 0x23
 8007526:	221f      	movs	r2, #31
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	43da      	mvns	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	400a      	ands	r2, r1
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	4618      	mov	r0, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	3b23      	subs	r3, #35	; 0x23
 8007550:	fa00 f203 	lsl.w	r2, r0, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
 800755c:	e023      	b.n	80075a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	3b41      	subs	r3, #65	; 0x41
 8007570:	221f      	movs	r2, #31
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43da      	mvns	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	400a      	ands	r2, r1
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	4618      	mov	r0, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	3b41      	subs	r3, #65	; 0x41
 800759a:	fa00 f203 	lsl.w	r2, r0, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075a6:	4b29      	ldr	r3, [pc, #164]	; (800764c <HAL_ADC_ConfigChannel+0x250>)
 80075a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a28      	ldr	r2, [pc, #160]	; (8007650 <HAL_ADC_ConfigChannel+0x254>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d10f      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x1d8>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b12      	cmp	r3, #18
 80075ba:	d10b      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <HAL_ADC_ConfigChannel+0x254>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d12b      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x23a>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <HAL_ADC_ConfigChannel+0x258>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <HAL_ADC_ConfigChannel+0x1f4>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b11      	cmp	r3, #17
 80075ee:	d122      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a11      	ldr	r2, [pc, #68]	; (8007654 <HAL_ADC_ConfigChannel+0x258>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d111      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007612:	4b11      	ldr	r3, [pc, #68]	; (8007658 <HAL_ADC_ConfigChannel+0x25c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a11      	ldr	r2, [pc, #68]	; (800765c <HAL_ADC_ConfigChannel+0x260>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	0c9a      	lsrs	r2, r3, #18
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007628:	e002      	b.n	8007630 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f9      	bne.n	800762a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40012300 	.word	0x40012300
 8007650:	40012000 	.word	0x40012000
 8007654:	10000012 	.word	0x10000012
 8007658:	20000000 	.word	0x20000000
 800765c:	431bde83 	.word	0x431bde83

08007660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007668:	4b79      	ldr	r3, [pc, #484]	; (8007850 <ADC_Init+0x1f0>)
 800766a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6859      	ldr	r1, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	021a      	lsls	r2, r3, #8
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80076b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6899      	ldr	r1, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	4a58      	ldr	r2, [pc, #352]	; (8007854 <ADC_Init+0x1f4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d022      	beq.n	800773e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6899      	ldr	r1, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6899      	ldr	r1, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]
 800773c:	e00f      	b.n	800775e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800774c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800775c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0202 	bic.w	r2, r2, #2
 800776c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6899      	ldr	r1, [r3, #8]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7e1b      	ldrb	r3, [r3, #24]
 8007778:	005a      	lsls	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01b      	beq.n	80077c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80077aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	3b01      	subs	r3, #1
 80077b8:	035a      	lsls	r2, r3, #13
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	e007      	b.n	80077d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	051a      	lsls	r2, r3, #20
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6899      	ldr	r1, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007816:	025a      	lsls	r2, r3, #9
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	029a      	lsls	r2, r3, #10
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	40012300 	.word	0x40012300
 8007854:	0f000001 	.word	0x0f000001

08007858 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d13c      	bne.n	80078ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d12b      	bne.n	80078e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007890:	2b00      	cmp	r3, #0
 8007892:	d127      	bne.n	80078e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d006      	beq.n	80078b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d119      	bne.n	80078e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0220 	bic.w	r2, r2, #32
 80078be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	f043 0201 	orr.w	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fd6b 	bl	80073c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80078ea:	e00e      	b.n	800790a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fd75 	bl	80073e8 <HAL_ADC_ErrorCallback>
}
 80078fe:	e004      	b.n	800790a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fd57 	bl	80073d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2240      	movs	r2, #64	; 0x40
 8007940:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff fd4a 	bl	80073e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <__NVIC_SetPriorityGrouping>:
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007978:	4013      	ands	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800798e:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <__NVIC_SetPriorityGrouping+0x44>)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	60d3      	str	r3, [r2, #12]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	e000ed00 	.word	0xe000ed00

080079a4 <__NVIC_GetPriorityGrouping>:
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <__NVIC_GetPriorityGrouping+0x18>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f003 0307 	and.w	r3, r3, #7
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <__NVIC_EnableIRQ>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db0b      	blt.n	80079ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	f003 021f 	and.w	r2, r3, #31
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <__NVIC_EnableIRQ+0x38>)
 80079da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2001      	movs	r0, #1
 80079e2:	fa00 f202 	lsl.w	r2, r0, r2
 80079e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	e000e100 	.word	0xe000e100

080079fc <__NVIC_SetPriority>:
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db0a      	blt.n	8007a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	490c      	ldr	r1, [pc, #48]	; (8007a48 <__NVIC_SetPriority+0x4c>)
 8007a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1a:	0112      	lsls	r2, r2, #4
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	440b      	add	r3, r1
 8007a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a24:	e00a      	b.n	8007a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4908      	ldr	r1, [pc, #32]	; (8007a4c <__NVIC_SetPriority+0x50>)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	3b04      	subs	r3, #4
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	440b      	add	r3, r1
 8007a3a:	761a      	strb	r2, [r3, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	e000e100 	.word	0xe000e100
 8007a4c:	e000ed00 	.word	0xe000ed00

08007a50 <NVIC_EncodePriority>:
{
 8007a50:	b480      	push	{r7}
 8007a52:	b089      	sub	sp, #36	; 0x24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f1c3 0307 	rsb	r3, r3, #7
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	bf28      	it	cs
 8007a6e:	2304      	movcs	r3, #4
 8007a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3304      	adds	r3, #4
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d902      	bls.n	8007a80 <NVIC_EncodePriority+0x30>
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3b03      	subs	r3, #3
 8007a7e:	e000      	b.n	8007a82 <NVIC_EncodePriority+0x32>
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43da      	mvns	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	401a      	ands	r2, r3
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a98:	f04f 31ff 	mov.w	r1, #4294967295
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	43d9      	mvns	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa8:	4313      	orrs	r3, r2
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3724      	adds	r7, #36	; 0x24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <SysTick_Config>:
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ac8:	d301      	bcc.n	8007ace <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007aca:	2301      	movs	r3, #1
 8007acc:	e00f      	b.n	8007aee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ace:	4a0a      	ldr	r2, [pc, #40]	; (8007af8 <SysTick_Config+0x40>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ad6:	210f      	movs	r1, #15
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	f7ff ff8e 	bl	80079fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <SysTick_Config+0x40>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <SysTick_Config+0x40>)
 8007ae8:	2207      	movs	r2, #7
 8007aea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	e000e010 	.word	0xe000e010

08007afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff29 	bl	800795c <__NVIC_SetPriorityGrouping>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	4603      	mov	r3, r0
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b24:	f7ff ff3e 	bl	80079a4 <__NVIC_GetPriorityGrouping>
 8007b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7ff ff8e 	bl	8007a50 <NVIC_EncodePriority>
 8007b34:	4602      	mov	r2, r0
 8007b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff ff5d 	bl	80079fc <__NVIC_SetPriority>
}
 8007b42:	bf00      	nop
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	4603      	mov	r3, r0
 8007b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff ff31 	bl	80079c0 <__NVIC_EnableIRQ>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff ffa2 	bl	8007ab8 <SysTick_Config>
 8007b74:	4603      	mov	r3, r0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b8c:	f7ff fab4 	bl	80070f8 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e099      	b.n	8007cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bbc:	e00f      	b.n	8007bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bbe:	f7ff fa9b 	bl	80070f8 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d908      	bls.n	8007bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e078      	b.n	8007cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e8      	bne.n	8007bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4b38      	ldr	r3, [pc, #224]	; (8007cd8 <HAL_DMA_Init+0x158>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d107      	bne.n	8007c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	4313      	orrs	r3, r2
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d117      	bne.n	8007ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00e      	beq.n	8007ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa9d 	bl	80081c4 <DMA_CheckFifoParam>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2240      	movs	r2, #64	; 0x40
 8007c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e016      	b.n	8007cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa54 	bl	8008158 <DMA_CalcBaseAndBitshift>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb8:	223f      	movs	r2, #63	; 0x3f
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	f010803f 	.word	0xf010803f

08007cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_DMA_Start_IT+0x26>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e040      	b.n	8007d84 <HAL_DMA_Start_IT+0xa8>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d12f      	bne.n	8007d76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f9e6 	bl	80080fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	223f      	movs	r2, #63	; 0x3f
 8007d36:	409a      	lsls	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0216 	orr.w	r2, r2, #22
 8007d4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0208 	orr.w	r2, r2, #8
 8007d62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e005      	b.n	8007d82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d004      	beq.n	8007daa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e00c      	b.n	8007dc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2205      	movs	r2, #5
 8007dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ddc:	4b92      	ldr	r3, [pc, #584]	; (8008028 <HAL_DMA_IRQHandler+0x258>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a92      	ldr	r2, [pc, #584]	; (800802c <HAL_DMA_IRQHandler+0x25c>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	0a9b      	lsrs	r3, r3, #10
 8007de8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01a      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d013      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0204 	bic.w	r2, r2, #4
 8007e22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e28:	2208      	movs	r2, #8
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e34:	f043 0201 	orr.w	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d012      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	2201      	movs	r2, #1
 8007e60:	409a      	lsls	r2, r3
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	f043 0202 	orr.w	r2, r3, #2
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e76:	2204      	movs	r2, #4
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d012      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e94:	2204      	movs	r2, #4
 8007e96:	409a      	lsls	r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea0:	f043 0204 	orr.w	r2, r3, #4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	2210      	movs	r2, #16
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d043      	beq.n	8007f40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03c      	beq.n	8007f40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eca:	2210      	movs	r2, #16
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d018      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d108      	bne.n	8007f00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d024      	beq.n	8007f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	e01f      	b.n	8007f40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01b      	beq.n	8007f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
 8007f10:	e016      	b.n	8007f40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0208 	bic.w	r2, r2, #8
 8007f2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f44:	2220      	movs	r2, #32
 8007f46:	409a      	lsls	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 808e 	beq.w	800806e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8086 	beq.w	800806e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f66:	2220      	movs	r2, #32
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d136      	bne.n	8007fe8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0216 	bic.w	r2, r2, #22
 8007f88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695a      	ldr	r2, [r3, #20]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <HAL_DMA_IRQHandler+0x1da>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0208 	bic.w	r2, r2, #8
 8007fb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbe:	223f      	movs	r2, #63	; 0x3f
 8007fc0:	409a      	lsls	r2, r3
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d07d      	beq.n	80080da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
        }
        return;
 8007fe6:	e078      	b.n	80080da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01c      	beq.n	8008030 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d108      	bne.n	8008016 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008008:	2b00      	cmp	r3, #0
 800800a:	d030      	beq.n	800806e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
 8008014:	e02b      	b.n	800806e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d027      	beq.n	800806e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	e022      	b.n	800806e <HAL_DMA_IRQHandler+0x29e>
 8008028:	20000000 	.word	0x20000000
 800802c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10f      	bne.n	800805e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0210 	bic.w	r2, r2, #16
 800804c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	2b00      	cmp	r3, #0
 8008074:	d032      	beq.n	80080dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d022      	beq.n	80080c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2205      	movs	r2, #5
 8008086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	3301      	adds	r3, #1
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d307      	bcc.n	80080b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f2      	bne.n	800809a <HAL_DMA_IRQHandler+0x2ca>
 80080b4:	e000      	b.n	80080b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80080b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d005      	beq.n	80080dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
 80080d8:	e000      	b.n	80080dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80080da:	bf00      	nop
    }
  }
}
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d108      	bne.n	800813c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800813a:	e007      	b.n	800814c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	3b10      	subs	r3, #16
 8008168:	4a14      	ldr	r2, [pc, #80]	; (80081bc <DMA_CalcBaseAndBitshift+0x64>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	091b      	lsrs	r3, r3, #4
 8008170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008172:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <DMA_CalcBaseAndBitshift+0x68>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b03      	cmp	r3, #3
 8008184:	d909      	bls.n	800819a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	659a      	str	r2, [r3, #88]	; 0x58
 8008198:	e007      	b.n	80081aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	aaaaaaab 	.word	0xaaaaaaab
 80081c0:	08017fe8 	.word	0x08017fe8

080081c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11f      	bne.n	800821e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d855      	bhi.n	8008290 <DMA_CheckFifoParam+0xcc>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <DMA_CheckFifoParam+0x28>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	0800820f 	.word	0x0800820f
 80081f4:	080081fd 	.word	0x080081fd
 80081f8:	08008291 	.word	0x08008291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d045      	beq.n	8008294 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800820c:	e042      	b.n	8008294 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008216:	d13f      	bne.n	8008298 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800821c:	e03c      	b.n	8008298 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	d121      	bne.n	800826c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b03      	cmp	r3, #3
 800822c:	d836      	bhi.n	800829c <DMA_CheckFifoParam+0xd8>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <DMA_CheckFifoParam+0x70>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008245 	.word	0x08008245
 8008238:	0800824b 	.word	0x0800824b
 800823c:	08008245 	.word	0x08008245
 8008240:	0800825d 	.word	0x0800825d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
      break;
 8008248:	e02f      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d024      	beq.n	80082a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800825a:	e021      	b.n	80082a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008264:	d11e      	bne.n	80082a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800826a:	e01b      	b.n	80082a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d902      	bls.n	8008278 <DMA_CheckFifoParam+0xb4>
 8008272:	2b03      	cmp	r3, #3
 8008274:	d003      	beq.n	800827e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008276:	e018      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
      break;
 800827c:	e015      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00e      	beq.n	80082a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
      break;
 800828e:	e00b      	b.n	80082a8 <DMA_CheckFifoParam+0xe4>
      break;
 8008290:	bf00      	nop
 8008292:	e00a      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;
 8008294:	bf00      	nop
 8008296:	e008      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;
 8008298:	bf00      	nop
 800829a:	e006      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;
 800829c:	bf00      	nop
 800829e:	e004      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;
 80082a0:	bf00      	nop
 80082a2:	e002      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;   
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <DMA_CheckFifoParam+0xe6>
      break;
 80082a8:	bf00      	nop
    }
  } 
  
  return status; 
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b089      	sub	sp, #36	; 0x24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	e177      	b.n	80085c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082d4:	2201      	movs	r2, #1
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4013      	ands	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	f040 8166 	bne.w	80085be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d00b      	beq.n	8008312 <HAL_GPIO_Init+0x5a>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d007      	beq.n	8008312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008306:	2b11      	cmp	r3, #17
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b12      	cmp	r3, #18
 8008310:	d130      	bne.n	8008374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	2203      	movs	r2, #3
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	43db      	mvns	r3, r3
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	4013      	ands	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4313      	orrs	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008348:	2201      	movs	r2, #1
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	43db      	mvns	r3, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	091b      	lsrs	r3, r3, #4
 800835e:	f003 0201 	and.w	r2, r3, #1
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	4313      	orrs	r3, r2
 800836c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	2203      	movs	r2, #3
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	43db      	mvns	r3, r3
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	4013      	ands	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	4313      	orrs	r3, r2
 800839c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d003      	beq.n	80083b4 <HAL_GPIO_Init+0xfc>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b12      	cmp	r3, #18
 80083b2:	d123      	bne.n	80083fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	08da      	lsrs	r2, r3, #3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3208      	adds	r2, #8
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	220f      	movs	r2, #15
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	43db      	mvns	r3, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	4013      	ands	r3, r2
 80083d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	08da      	lsrs	r2, r3, #3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3208      	adds	r2, #8
 80083f6:	69b9      	ldr	r1, [r7, #24]
 80083f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	2203      	movs	r2, #3
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	43db      	mvns	r3, r3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	4013      	ands	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f003 0203 	and.w	r2, r3, #3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	4313      	orrs	r3, r2
 8008428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80c0 	beq.w	80085be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	4b65      	ldr	r3, [pc, #404]	; (80085d8 <HAL_GPIO_Init+0x320>)
 8008444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008446:	4a64      	ldr	r2, [pc, #400]	; (80085d8 <HAL_GPIO_Init+0x320>)
 8008448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800844c:	6453      	str	r3, [r2, #68]	; 0x44
 800844e:	4b62      	ldr	r3, [pc, #392]	; (80085d8 <HAL_GPIO_Init+0x320>)
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800845a:	4a60      	ldr	r2, [pc, #384]	; (80085dc <HAL_GPIO_Init+0x324>)
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	089b      	lsrs	r3, r3, #2
 8008460:	3302      	adds	r3, #2
 8008462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	220f      	movs	r2, #15
 8008472:	fa02 f303 	lsl.w	r3, r2, r3
 8008476:	43db      	mvns	r3, r3
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	4013      	ands	r3, r2
 800847c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a57      	ldr	r2, [pc, #348]	; (80085e0 <HAL_GPIO_Init+0x328>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d037      	beq.n	80084f6 <HAL_GPIO_Init+0x23e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a56      	ldr	r2, [pc, #344]	; (80085e4 <HAL_GPIO_Init+0x32c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d031      	beq.n	80084f2 <HAL_GPIO_Init+0x23a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a55      	ldr	r2, [pc, #340]	; (80085e8 <HAL_GPIO_Init+0x330>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d02b      	beq.n	80084ee <HAL_GPIO_Init+0x236>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a54      	ldr	r2, [pc, #336]	; (80085ec <HAL_GPIO_Init+0x334>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d025      	beq.n	80084ea <HAL_GPIO_Init+0x232>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a53      	ldr	r2, [pc, #332]	; (80085f0 <HAL_GPIO_Init+0x338>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01f      	beq.n	80084e6 <HAL_GPIO_Init+0x22e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a52      	ldr	r2, [pc, #328]	; (80085f4 <HAL_GPIO_Init+0x33c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d019      	beq.n	80084e2 <HAL_GPIO_Init+0x22a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a51      	ldr	r2, [pc, #324]	; (80085f8 <HAL_GPIO_Init+0x340>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <HAL_GPIO_Init+0x226>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a50      	ldr	r2, [pc, #320]	; (80085fc <HAL_GPIO_Init+0x344>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00d      	beq.n	80084da <HAL_GPIO_Init+0x222>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a4f      	ldr	r2, [pc, #316]	; (8008600 <HAL_GPIO_Init+0x348>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <HAL_GPIO_Init+0x21e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a4e      	ldr	r2, [pc, #312]	; (8008604 <HAL_GPIO_Init+0x34c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d101      	bne.n	80084d2 <HAL_GPIO_Init+0x21a>
 80084ce:	2309      	movs	r3, #9
 80084d0:	e012      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084d2:	230a      	movs	r3, #10
 80084d4:	e010      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084d6:	2308      	movs	r3, #8
 80084d8:	e00e      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084da:	2307      	movs	r3, #7
 80084dc:	e00c      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084de:	2306      	movs	r3, #6
 80084e0:	e00a      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084e2:	2305      	movs	r3, #5
 80084e4:	e008      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084e6:	2304      	movs	r3, #4
 80084e8:	e006      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084ea:	2303      	movs	r3, #3
 80084ec:	e004      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e002      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <HAL_GPIO_Init+0x240>
 80084f6:	2300      	movs	r3, #0
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	f002 0203 	and.w	r2, r2, #3
 80084fe:	0092      	lsls	r2, r2, #2
 8008500:	4093      	lsls	r3, r2
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	4313      	orrs	r3, r2
 8008506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008508:	4934      	ldr	r1, [pc, #208]	; (80085dc <HAL_GPIO_Init+0x324>)
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	089b      	lsrs	r3, r3, #2
 800850e:	3302      	adds	r3, #2
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008516:	4b3c      	ldr	r3, [pc, #240]	; (8008608 <HAL_GPIO_Init+0x350>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	43db      	mvns	r3, r3
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	4013      	ands	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800853a:	4a33      	ldr	r2, [pc, #204]	; (8008608 <HAL_GPIO_Init+0x350>)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008540:	4b31      	ldr	r3, [pc, #196]	; (8008608 <HAL_GPIO_Init+0x350>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	43db      	mvns	r3, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4013      	ands	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008564:	4a28      	ldr	r2, [pc, #160]	; (8008608 <HAL_GPIO_Init+0x350>)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800856a:	4b27      	ldr	r3, [pc, #156]	; (8008608 <HAL_GPIO_Init+0x350>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	43db      	mvns	r3, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	4013      	ands	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4313      	orrs	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800858e:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <HAL_GPIO_Init+0x350>)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008594:	4b1c      	ldr	r3, [pc, #112]	; (8008608 <HAL_GPIO_Init+0x350>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	43db      	mvns	r3, r3
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	4013      	ands	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085b8:	4a13      	ldr	r2, [pc, #76]	; (8008608 <HAL_GPIO_Init+0x350>)
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	3301      	adds	r3, #1
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	f67f ae84 	bls.w	80082d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80085cc:	bf00      	nop
 80085ce:	3724      	adds	r7, #36	; 0x24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	40023800 	.word	0x40023800
 80085dc:	40013800 	.word	0x40013800
 80085e0:	40020000 	.word	0x40020000
 80085e4:	40020400 	.word	0x40020400
 80085e8:	40020800 	.word	0x40020800
 80085ec:	40020c00 	.word	0x40020c00
 80085f0:	40021000 	.word	0x40021000
 80085f4:	40021400 	.word	0x40021400
 80085f8:	40021800 	.word	0x40021800
 80085fc:	40021c00 	.word	0x40021c00
 8008600:	40022000 	.word	0x40022000
 8008604:	40022400 	.word	0x40022400
 8008608:	40013c00 	.word	0x40013c00

0800860c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691a      	ldr	r2, [r3, #16]
 800861c:	887b      	ldrh	r3, [r7, #2]
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e001      	b.n	800862e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
 8008648:	4613      	mov	r3, r2
 800864a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800864c:	787b      	ldrb	r3, [r7, #1]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008652:	887a      	ldrh	r2, [r7, #2]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008658:	e003      	b.n	8008662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800865a:	887b      	ldrh	r3, [r7, #2]
 800865c:	041a      	lsls	r2, r3, #16
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	619a      	str	r2, [r3, #24]
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
	...

08008670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800867a:	4b08      	ldr	r3, [pc, #32]	; (800869c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008686:	4a05      	ldr	r2, [pc, #20]	; (800869c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	4618      	mov	r0, r3
 8008690:	f7fb fbc8 	bl	8003e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40013c00 	.word	0x40013c00

080086a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e11f      	b.n	80088f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7fc fc2a 	bl	8004f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2224      	movs	r2, #36	; 0x24
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008704:	f001 f96e 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 8008708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	4a7b      	ldr	r2, [pc, #492]	; (80088fc <HAL_I2C_Init+0x25c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d807      	bhi.n	8008724 <HAL_I2C_Init+0x84>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4a7a      	ldr	r2, [pc, #488]	; (8008900 <HAL_I2C_Init+0x260>)
 8008718:	4293      	cmp	r3, r2
 800871a:	bf94      	ite	ls
 800871c:	2301      	movls	r3, #1
 800871e:	2300      	movhi	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	e006      	b.n	8008732 <HAL_I2C_Init+0x92>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4a77      	ldr	r2, [pc, #476]	; (8008904 <HAL_I2C_Init+0x264>)
 8008728:	4293      	cmp	r3, r2
 800872a:	bf94      	ite	ls
 800872c:	2301      	movls	r3, #1
 800872e:	2300      	movhi	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0db      	b.n	80088f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4a72      	ldr	r2, [pc, #456]	; (8008908 <HAL_I2C_Init+0x268>)
 800873e:	fba2 2303 	umull	r2, r3, r2, r3
 8008742:	0c9b      	lsrs	r3, r3, #18
 8008744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	430a      	orrs	r2, r1
 8008758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a64      	ldr	r2, [pc, #400]	; (80088fc <HAL_I2C_Init+0x25c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d802      	bhi.n	8008774 <HAL_I2C_Init+0xd4>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	3301      	adds	r3, #1
 8008772:	e009      	b.n	8008788 <HAL_I2C_Init+0xe8>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	4a63      	ldr	r2, [pc, #396]	; (800890c <HAL_I2C_Init+0x26c>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	099b      	lsrs	r3, r3, #6
 8008786:	3301      	adds	r3, #1
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	430b      	orrs	r3, r1
 800878e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800879a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4956      	ldr	r1, [pc, #344]	; (80088fc <HAL_I2C_Init+0x25c>)
 80087a4:	428b      	cmp	r3, r1
 80087a6:	d80d      	bhi.n	80087c4 <HAL_I2C_Init+0x124>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	1e59      	subs	r1, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80087b6:	3301      	adds	r3, #1
 80087b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087bc:	2b04      	cmp	r3, #4
 80087be:	bf38      	it	cc
 80087c0:	2304      	movcc	r3, #4
 80087c2:	e04f      	b.n	8008864 <HAL_I2C_Init+0x1c4>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d111      	bne.n	80087f0 <HAL_I2C_Init+0x150>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1e58      	subs	r0, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6859      	ldr	r1, [r3, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	440b      	add	r3, r1
 80087da:	fbb0 f3f3 	udiv	r3, r0, r3
 80087de:	3301      	adds	r3, #1
 80087e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e012      	b.n	8008816 <HAL_I2C_Init+0x176>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	1e58      	subs	r0, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6859      	ldr	r1, [r3, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	0099      	lsls	r1, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	fbb0 f3f3 	udiv	r3, r0, r3
 8008806:	3301      	adds	r3, #1
 8008808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800880c:	2b00      	cmp	r3, #0
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_I2C_Init+0x17e>
 800881a:	2301      	movs	r3, #1
 800881c:	e022      	b.n	8008864 <HAL_I2C_Init+0x1c4>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10e      	bne.n	8008844 <HAL_I2C_Init+0x1a4>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	1e58      	subs	r0, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6859      	ldr	r1, [r3, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	440b      	add	r3, r1
 8008834:	fbb0 f3f3 	udiv	r3, r0, r3
 8008838:	3301      	adds	r3, #1
 800883a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800883e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008842:	e00f      	b.n	8008864 <HAL_I2C_Init+0x1c4>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1e58      	subs	r0, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6859      	ldr	r1, [r3, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	0099      	lsls	r1, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	fbb0 f3f3 	udiv	r3, r0, r3
 800885a:	3301      	adds	r3, #1
 800885c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	6809      	ldr	r1, [r1, #0]
 8008868:	4313      	orrs	r3, r2
 800886a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6911      	ldr	r1, [r2, #16]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	68d2      	ldr	r2, [r2, #12]
 800889e:	4311      	orrs	r1, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695a      	ldr	r2, [r3, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	000186a0 	.word	0x000186a0
 8008900:	001e847f 	.word	0x001e847f
 8008904:	003d08ff 	.word	0x003d08ff
 8008908:	431bde83 	.word	0x431bde83
 800890c:	10624dd3 	.word	0x10624dd3

08008910 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af02      	add	r7, sp, #8
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	461a      	mov	r2, r3
 800891c:	460b      	mov	r3, r1
 800891e:	817b      	strh	r3, [r7, #10]
 8008920:	4613      	mov	r3, r2
 8008922:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008924:	f7fe fbe8 	bl	80070f8 <HAL_GetTick>
 8008928:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b20      	cmp	r3, #32
 8008934:	f040 80e0 	bne.w	8008af8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2319      	movs	r3, #25
 800893e:	2201      	movs	r2, #1
 8008940:	4970      	ldr	r1, [pc, #448]	; (8008b04 <HAL_I2C_Master_Transmit+0x1f4>)
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fc58 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
 8008950:	e0d3      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_I2C_Master_Transmit+0x50>
 800895c:	2302      	movs	r3, #2
 800895e:	e0cc      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b01      	cmp	r3, #1
 8008974:	d007      	beq.n	8008986 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0201 	orr.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2221      	movs	r2, #33	; 0x21
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2210      	movs	r2, #16
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	893a      	ldrh	r2, [r7, #8]
 80089b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4a50      	ldr	r2, [pc, #320]	; (8008b08 <HAL_I2C_Master_Transmit+0x1f8>)
 80089c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089c8:	8979      	ldrh	r1, [r7, #10]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fac2 	bl	8008f58 <I2C_MasterRequestWrite>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e08d      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089f4:	e066      	b.n	8008ac4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6a39      	ldr	r1, [r7, #32]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fcd2 	bl	80093a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00d      	beq.n	8008a22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d107      	bne.n	8008a1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e06b      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d11b      	bne.n	8008a98 <HAL_I2C_Master_Transmit+0x188>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	6a39      	ldr	r1, [r7, #32]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fcc2 	bl	8009426 <I2C_WaitOnBTFFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d107      	bne.n	8008ac0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008abe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e01a      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d194      	bne.n	80089f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e000      	b.n	8008afa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	00100002 	.word	0x00100002
 8008b08:	ffff0000 	.word	0xffff0000

08008b0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08c      	sub	sp, #48	; 0x30
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	461a      	mov	r2, r3
 8008b18:	460b      	mov	r3, r1
 8008b1a:	817b      	strh	r3, [r7, #10]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b20:	f7fe faea 	bl	80070f8 <HAL_GetTick>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	f040 820b 	bne.w	8008f4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2319      	movs	r3, #25
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	497c      	ldr	r1, [pc, #496]	; (8008d30 <HAL_I2C_Master_Receive+0x224>)
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fb5a 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	e1fe      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2C_Master_Receive+0x50>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e1f7      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d007      	beq.n	8008b82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2222      	movs	r2, #34	; 0x22
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	893a      	ldrh	r2, [r7, #8]
 8008bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a5c      	ldr	r2, [pc, #368]	; (8008d34 <HAL_I2C_Master_Receive+0x228>)
 8008bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bc4:	8979      	ldrh	r1, [r7, #10]
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fa46 	bl	800905c <I2C_MasterRequestRead>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e1b8      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d113      	bne.n	8008c0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be2:	2300      	movs	r3, #0
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	623b      	str	r3, [r7, #32]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	623b      	str	r3, [r7, #32]
 8008bf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e18c      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d11b      	bne.n	8008c4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e16c      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d11b      	bne.n	8008c8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c72:	2300      	movs	r3, #0
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	e14c      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008cb0:	e138      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	f200 80f1 	bhi.w	8008e9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d123      	bne.n	8008d0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 fbed 	bl	80094a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e139      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d0a:	e10b      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d14e      	bne.n	8008db2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	4906      	ldr	r1, [pc, #24]	; (8008d38 <HAL_I2C_Master_Receive+0x22c>)
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 fa6a 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e10e      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
 8008d2e:	bf00      	nop
 8008d30:	00100002 	.word	0x00100002
 8008d34:	ffff0000 	.word	0xffff0000
 8008d38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	691a      	ldr	r2, [r3, #16]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	b2d2      	uxtb	r2, r2
 8008d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	3b01      	subs	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008db0:	e0b8      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	2200      	movs	r2, #0
 8008dba:	4966      	ldr	r1, [pc, #408]	; (8008f54 <HAL_I2C_Master_Receive+0x448>)
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fa1b 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e0bf      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2200      	movs	r2, #0
 8008e16:	494f      	ldr	r1, [pc, #316]	; (8008f54 <HAL_I2C_Master_Receive+0x448>)
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f9ed 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e091      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e9c:	e042      	b.n	8008f24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 fb00 	bl	80094a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e04c      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d118      	bne.n	8008f24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f47f aec2 	bne.w	8008cb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	e000      	b.n	8008f4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008f4a:	2302      	movs	r3, #2
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3728      	adds	r7, #40	; 0x28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	00010004 	.word	0x00010004

08008f58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	460b      	mov	r3, r1
 8008f66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d006      	beq.n	8008f82 <I2C_MasterRequestWrite+0x2a>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d003      	beq.n	8008f82 <I2C_MasterRequestWrite+0x2a>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f80:	d108      	bne.n	8008f94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e00b      	b.n	8008fac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	2b12      	cmp	r3, #18
 8008f9a:	d107      	bne.n	8008fac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008faa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f91d 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00d      	beq.n	8008fe0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd2:	d103      	bne.n	8008fdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e035      	b.n	800904c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe8:	d108      	bne.n	8008ffc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fea:	897b      	ldrh	r3, [r7, #10]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ff8:	611a      	str	r2, [r3, #16]
 8008ffa:	e01b      	b.n	8009034 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008ffc:	897b      	ldrh	r3, [r7, #10]
 8008ffe:	11db      	asrs	r3, r3, #7
 8009000:	b2db      	uxtb	r3, r3
 8009002:	f003 0306 	and.w	r3, r3, #6
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f063 030f 	orn	r3, r3, #15
 800900c:	b2da      	uxtb	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	490e      	ldr	r1, [pc, #56]	; (8009054 <I2C_MasterRequestWrite+0xfc>)
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 f943 	bl	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e010      	b.n	800904c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800902a:	897b      	ldrh	r3, [r7, #10]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	4907      	ldr	r1, [pc, #28]	; (8009058 <I2C_MasterRequestWrite+0x100>)
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f933 	bl	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	00010008 	.word	0x00010008
 8009058:	00010002 	.word	0x00010002

0800905c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af02      	add	r7, sp, #8
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	460b      	mov	r3, r1
 800906a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009080:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d006      	beq.n	8009096 <I2C_MasterRequestRead+0x3a>
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d003      	beq.n	8009096 <I2C_MasterRequestRead+0x3a>
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009094:	d108      	bne.n	80090a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	e00b      	b.n	80090c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	2b11      	cmp	r3, #17
 80090ae:	d107      	bne.n	80090c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f893 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00d      	beq.n	80090f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e6:	d103      	bne.n	80090f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e079      	b.n	80091e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090fc:	d108      	bne.n	8009110 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	b2da      	uxtb	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	611a      	str	r2, [r3, #16]
 800910e:	e05f      	b.n	80091d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009110:	897b      	ldrh	r3, [r7, #10]
 8009112:	11db      	asrs	r3, r3, #7
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0306 	and.w	r3, r3, #6
 800911a:	b2db      	uxtb	r3, r3
 800911c:	f063 030f 	orn	r3, r3, #15
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4930      	ldr	r1, [pc, #192]	; (80091f0 <I2C_MasterRequestRead+0x194>)
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f8b9 	bl	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e054      	b.n	80091e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800913e:	897b      	ldrh	r3, [r7, #10]
 8009140:	b2da      	uxtb	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	4929      	ldr	r1, [pc, #164]	; (80091f4 <I2C_MasterRequestRead+0x198>)
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f8a9 	bl	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e044      	b.n	80091e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009182:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 f831 	bl	80091f8 <I2C_WaitOnFlagUntilTimeout>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00d      	beq.n	80091b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091aa:	d103      	bne.n	80091b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e017      	b.n	80091e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80091b8:	897b      	ldrh	r3, [r7, #10]
 80091ba:	11db      	asrs	r3, r3, #7
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0306 	and.w	r3, r3, #6
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f063 030e 	orn	r3, r3, #14
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	4907      	ldr	r1, [pc, #28]	; (80091f4 <I2C_MasterRequestRead+0x198>)
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 f865 	bl	80092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e000      	b.n	80091e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	00010008 	.word	0x00010008
 80091f4:	00010002 	.word	0x00010002

080091f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009208:	e025      	b.n	8009256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d021      	beq.n	8009256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009212:	f7fd ff71 	bl	80070f8 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d302      	bcc.n	8009228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d116      	bne.n	8009256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	f043 0220 	orr.w	r2, r3, #32
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e023      	b.n	800929e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	0c1b      	lsrs	r3, r3, #16
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d10d      	bne.n	800927c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	43da      	mvns	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4013      	ands	r3, r2
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	e00c      	b.n	8009296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	43da      	mvns	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4013      	ands	r3, r2
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf0c      	ite	eq
 800928e:	2301      	moveq	r3, #1
 8009290:	2300      	movne	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	429a      	cmp	r2, r3
 800929a:	d0b6      	beq.n	800920a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
 80092b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092b4:	e051      	b.n	800935a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c4:	d123      	bne.n	800930e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f043 0204 	orr.w	r2, r3, #4
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e046      	b.n	800939c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d021      	beq.n	800935a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009316:	f7fd feef 	bl	80070f8 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	429a      	cmp	r2, r3
 8009324:	d302      	bcc.n	800932c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d116      	bne.n	800935a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009346:	f043 0220 	orr.w	r2, r3, #32
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e020      	b.n	800939c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b01      	cmp	r3, #1
 8009362:	d10c      	bne.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	43da      	mvns	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4013      	ands	r3, r2
 8009370:	b29b      	uxth	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	bf14      	ite	ne
 8009376:	2301      	movne	r3, #1
 8009378:	2300      	moveq	r3, #0
 800937a:	b2db      	uxtb	r3, r3
 800937c:	e00b      	b.n	8009396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	43da      	mvns	r2, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4013      	ands	r3, r2
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	bf14      	ite	ne
 8009390:	2301      	movne	r3, #1
 8009392:	2300      	moveq	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d18d      	bne.n	80092b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093b0:	e02d      	b.n	800940e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 f8ce 	bl	8009554 <I2C_IsAcknowledgeFailed>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e02d      	b.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d021      	beq.n	800940e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ca:	f7fd fe95 	bl	80070f8 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d302      	bcc.n	80093e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d116      	bne.n	800940e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f043 0220 	orr.w	r2, r3, #32
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e007      	b.n	800941e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d1ca      	bne.n	80093b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009432:	e02d      	b.n	8009490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f88d 	bl	8009554 <I2C_IsAcknowledgeFailed>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e02d      	b.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d021      	beq.n	8009490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944c:	f7fd fe54 	bl	80070f8 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	d302      	bcc.n	8009462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d116      	bne.n	8009490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	f043 0220 	orr.w	r2, r3, #32
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e007      	b.n	80094a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b04      	cmp	r3, #4
 800949c:	d1ca      	bne.n	8009434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094b4:	e042      	b.n	800953c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b10      	cmp	r3, #16
 80094c2:	d119      	bne.n	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f06f 0210 	mvn.w	r2, #16
 80094cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e029      	b.n	800954c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f8:	f7fd fdfe 	bl	80070f8 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d116      	bne.n	800953c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	f043 0220 	orr.w	r2, r3, #32
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e007      	b.n	800954c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d1b5      	bne.n	80094b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956a:	d11b      	bne.n	80095a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	f043 0204 	orr.w	r2, r3, #4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e000      	b.n	80095a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80095be:	2300      	movs	r3, #0
 80095c0:	603b      	str	r3, [r7, #0]
 80095c2:	4b20      	ldr	r3, [pc, #128]	; (8009644 <HAL_PWREx_EnableOverDrive+0x90>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <HAL_PWREx_EnableOverDrive+0x90>)
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095cc:	6413      	str	r3, [r2, #64]	; 0x40
 80095ce:	4b1d      	ldr	r3, [pc, #116]	; (8009644 <HAL_PWREx_EnableOverDrive+0x90>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80095da:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <HAL_PWREx_EnableOverDrive+0x94>)
 80095dc:	2201      	movs	r2, #1
 80095de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095e0:	f7fd fd8a 	bl	80070f8 <HAL_GetTick>
 80095e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095e6:	e009      	b.n	80095fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095e8:	f7fd fd86 	bl	80070f8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095f6:	d901      	bls.n	80095fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e01f      	b.n	800963c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095fc:	4b13      	ldr	r3, [pc, #76]	; (800964c <HAL_PWREx_EnableOverDrive+0x98>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009608:	d1ee      	bne.n	80095e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800960a:	4b11      	ldr	r3, [pc, #68]	; (8009650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800960c:	2201      	movs	r2, #1
 800960e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009610:	f7fd fd72 	bl	80070f8 <HAL_GetTick>
 8009614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009616:	e009      	b.n	800962c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009618:	f7fd fd6e 	bl	80070f8 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009626:	d901      	bls.n	800962c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e007      	b.n	800963c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800962c:	4b07      	ldr	r3, [pc, #28]	; (800964c <HAL_PWREx_EnableOverDrive+0x98>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009638:	d1ee      	bne.n	8009618 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40023800 	.word	0x40023800
 8009648:	420e0040 	.word	0x420e0040
 800964c:	40007000 	.word	0x40007000
 8009650:	420e0044 	.word	0x420e0044

08009654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0cc      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009668:	4b68      	ldr	r3, [pc, #416]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d90c      	bls.n	8009690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b65      	ldr	r3, [pc, #404]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b63      	ldr	r3, [pc, #396]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e0b8      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d020      	beq.n	80096de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096a8:	4b59      	ldr	r3, [pc, #356]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a58      	ldr	r2, [pc, #352]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096c0:	4b53      	ldr	r3, [pc, #332]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a52      	ldr	r2, [pc, #328]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096cc:	4b50      	ldr	r3, [pc, #320]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	494d      	ldr	r1, [pc, #308]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d044      	beq.n	8009774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d107      	bne.n	8009702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096f2:	4b47      	ldr	r3, [pc, #284]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d119      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e07f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d003      	beq.n	8009712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800970e:	2b03      	cmp	r3, #3
 8009710:	d107      	bne.n	8009722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009712:	4b3f      	ldr	r3, [pc, #252]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e06f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009722:	4b3b      	ldr	r3, [pc, #236]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e067      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009732:	4b37      	ldr	r3, [pc, #220]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f023 0203 	bic.w	r2, r3, #3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	4934      	ldr	r1, [pc, #208]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	4313      	orrs	r3, r2
 8009742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009744:	f7fd fcd8 	bl	80070f8 <HAL_GetTick>
 8009748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974a:	e00a      	b.n	8009762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800974c:	f7fd fcd4 	bl	80070f8 <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	f241 3288 	movw	r2, #5000	; 0x1388
 800975a:	4293      	cmp	r3, r2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e04f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009762:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 020c 	and.w	r2, r3, #12
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	429a      	cmp	r2, r3
 8009772:	d1eb      	bne.n	800974c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009774:	4b25      	ldr	r3, [pc, #148]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d20c      	bcs.n	800979c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009782:	4b22      	ldr	r3, [pc, #136]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800978a:	4b20      	ldr	r3, [pc, #128]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d001      	beq.n	800979c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e032      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097a8:	4b19      	ldr	r3, [pc, #100]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	4916      	ldr	r1, [pc, #88]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	490e      	ldr	r1, [pc, #56]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097da:	f000 f821 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 80097de:	4601      	mov	r1, r0
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	091b      	lsrs	r3, r3, #4
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <HAL_RCC_ClockConfig+0x1c0>)
 80097ec:	5cd3      	ldrb	r3, [r2, r3]
 80097ee:	fa21 f303 	lsr.w	r3, r1, r3
 80097f2:	4a09      	ldr	r2, [pc, #36]	; (8009818 <HAL_RCC_ClockConfig+0x1c4>)
 80097f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <HAL_RCC_ClockConfig+0x1c8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fd fc38 	bl	8007070 <HAL_InitTick>

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40023c00 	.word	0x40023c00
 8009810:	40023800 	.word	0x40023800
 8009814:	08017fd0 	.word	0x08017fd0
 8009818:	20000000 	.word	0x20000000
 800981c:	20000004 	.word	0x20000004

08009820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	2300      	movs	r3, #0
 8009830:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009836:	4b63      	ldr	r3, [pc, #396]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b04      	cmp	r3, #4
 8009840:	d007      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x32>
 8009842:	2b08      	cmp	r3, #8
 8009844:	d008      	beq.n	8009858 <HAL_RCC_GetSysClockFreq+0x38>
 8009846:	2b00      	cmp	r3, #0
 8009848:	f040 80b4 	bne.w	80099b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800984c:	4b5e      	ldr	r3, [pc, #376]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800984e:	60bb      	str	r3, [r7, #8]
       break;
 8009850:	e0b3      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009852:	4b5d      	ldr	r3, [pc, #372]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009854:	60bb      	str	r3, [r7, #8]
      break;
 8009856:	e0b0      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009858:	4b5a      	ldr	r3, [pc, #360]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009860:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009862:	4b58      	ldr	r3, [pc, #352]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d04a      	beq.n	8009904 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800986e:	4b55      	ldr	r3, [pc, #340]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	099b      	lsrs	r3, r3, #6
 8009874:	f04f 0400 	mov.w	r4, #0
 8009878:	f240 11ff 	movw	r1, #511	; 0x1ff
 800987c:	f04f 0200 	mov.w	r2, #0
 8009880:	ea03 0501 	and.w	r5, r3, r1
 8009884:	ea04 0602 	and.w	r6, r4, r2
 8009888:	4629      	mov	r1, r5
 800988a:	4632      	mov	r2, r6
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	f04f 0400 	mov.w	r4, #0
 8009894:	0154      	lsls	r4, r2, #5
 8009896:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800989a:	014b      	lsls	r3, r1, #5
 800989c:	4619      	mov	r1, r3
 800989e:	4622      	mov	r2, r4
 80098a0:	1b49      	subs	r1, r1, r5
 80098a2:	eb62 0206 	sbc.w	r2, r2, r6
 80098a6:	f04f 0300 	mov.w	r3, #0
 80098aa:	f04f 0400 	mov.w	r4, #0
 80098ae:	0194      	lsls	r4, r2, #6
 80098b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80098b4:	018b      	lsls	r3, r1, #6
 80098b6:	1a5b      	subs	r3, r3, r1
 80098b8:	eb64 0402 	sbc.w	r4, r4, r2
 80098bc:	f04f 0100 	mov.w	r1, #0
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	00e2      	lsls	r2, r4, #3
 80098c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80098ca:	00d9      	lsls	r1, r3, #3
 80098cc:	460b      	mov	r3, r1
 80098ce:	4614      	mov	r4, r2
 80098d0:	195b      	adds	r3, r3, r5
 80098d2:	eb44 0406 	adc.w	r4, r4, r6
 80098d6:	f04f 0100 	mov.w	r1, #0
 80098da:	f04f 0200 	mov.w	r2, #0
 80098de:	02a2      	lsls	r2, r4, #10
 80098e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80098e4:	0299      	lsls	r1, r3, #10
 80098e6:	460b      	mov	r3, r1
 80098e8:	4614      	mov	r4, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	4621      	mov	r1, r4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f04f 0400 	mov.w	r4, #0
 80098f4:	461a      	mov	r2, r3
 80098f6:	4623      	mov	r3, r4
 80098f8:	f7f7 f9de 	bl	8000cb8 <__aeabi_uldivmod>
 80098fc:	4603      	mov	r3, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	e049      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009904:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	099b      	lsrs	r3, r3, #6
 800990a:	f04f 0400 	mov.w	r4, #0
 800990e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	ea03 0501 	and.w	r5, r3, r1
 800991a:	ea04 0602 	and.w	r6, r4, r2
 800991e:	4629      	mov	r1, r5
 8009920:	4632      	mov	r2, r6
 8009922:	f04f 0300 	mov.w	r3, #0
 8009926:	f04f 0400 	mov.w	r4, #0
 800992a:	0154      	lsls	r4, r2, #5
 800992c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009930:	014b      	lsls	r3, r1, #5
 8009932:	4619      	mov	r1, r3
 8009934:	4622      	mov	r2, r4
 8009936:	1b49      	subs	r1, r1, r5
 8009938:	eb62 0206 	sbc.w	r2, r2, r6
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	f04f 0400 	mov.w	r4, #0
 8009944:	0194      	lsls	r4, r2, #6
 8009946:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800994a:	018b      	lsls	r3, r1, #6
 800994c:	1a5b      	subs	r3, r3, r1
 800994e:	eb64 0402 	sbc.w	r4, r4, r2
 8009952:	f04f 0100 	mov.w	r1, #0
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	00e2      	lsls	r2, r4, #3
 800995c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009960:	00d9      	lsls	r1, r3, #3
 8009962:	460b      	mov	r3, r1
 8009964:	4614      	mov	r4, r2
 8009966:	195b      	adds	r3, r3, r5
 8009968:	eb44 0406 	adc.w	r4, r4, r6
 800996c:	f04f 0100 	mov.w	r1, #0
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	02a2      	lsls	r2, r4, #10
 8009976:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800997a:	0299      	lsls	r1, r3, #10
 800997c:	460b      	mov	r3, r1
 800997e:	4614      	mov	r4, r2
 8009980:	4618      	mov	r0, r3
 8009982:	4621      	mov	r1, r4
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f04f 0400 	mov.w	r4, #0
 800998a:	461a      	mov	r2, r3
 800998c:	4623      	mov	r3, r4
 800998e:	f7f7 f993 	bl	8000cb8 <__aeabi_uldivmod>
 8009992:	4603      	mov	r3, r0
 8009994:	460c      	mov	r4, r1
 8009996:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	3301      	adds	r3, #1
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b0:	60bb      	str	r3, [r7, #8]
      break;
 80099b2:	e002      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80099b6:	60bb      	str	r3, [r7, #8]
      break;
 80099b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099ba:	68bb      	ldr	r3, [r7, #8]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c4:	40023800 	.word	0x40023800
 80099c8:	00f42400 	.word	0x00f42400

080099cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099d0:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80099d2:	681b      	ldr	r3, [r3, #0]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000000 	.word	0x20000000

080099e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80099e8:	f7ff fff0 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 80099ec:	4601      	mov	r1, r0
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	0a9b      	lsrs	r3, r3, #10
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	4a03      	ldr	r2, [pc, #12]	; (8009a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099fa:	5cd3      	ldrb	r3, [r2, r3]
 80099fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	40023800 	.word	0x40023800
 8009a08:	08017fe0 	.word	0x08017fe0

08009a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a10:	f7ff ffdc 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 8009a14:	4601      	mov	r1, r0
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	0b5b      	lsrs	r3, r3, #13
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	4a03      	ldr	r2, [pc, #12]	; (8009a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a22:	5cd3      	ldrb	r3, [r2, r3]
 8009a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	08017fe0 	.word	0x08017fe0

08009a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a5c:	4b66      	ldr	r3, [pc, #408]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a62:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6a:	4963      	ldr	r1, [pc, #396]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00a      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009a7e:	4b5e      	ldr	r3, [pc, #376]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	495a      	ldr	r1, [pc, #360]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d105      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d075      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ab8:	4b50      	ldr	r3, [pc, #320]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009abe:	f7fd fb1b 	bl	80070f8 <HAL_GetTick>
 8009ac2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ac4:	e008      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ac6:	f7fd fb17 	bl	80070f8 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e1dc      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ad8:	4b47      	ldr	r3, [pc, #284]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1f0      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d009      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	019a      	lsls	r2, r3, #6
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	071b      	lsls	r3, r3, #28
 8009afc:	493e      	ldr	r1, [pc, #248]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01f      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009b10:	4b39      	ldr	r3, [pc, #228]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b16:	0f1b      	lsrs	r3, r3, #28
 8009b18:	f003 0307 	and.w	r3, r3, #7
 8009b1c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	019a      	lsls	r2, r3, #6
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	061b      	lsls	r3, r3, #24
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	071b      	lsls	r3, r3, #28
 8009b30:	4931      	ldr	r1, [pc, #196]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009b38:	4b2f      	ldr	r3, [pc, #188]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3e:	f023 021f 	bic.w	r2, r3, #31
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	492b      	ldr	r1, [pc, #172]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	019a      	lsls	r2, r3, #6
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	061b      	lsls	r3, r3, #24
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	071b      	lsls	r3, r3, #28
 8009b70:	4921      	ldr	r1, [pc, #132]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b78:	4b20      	ldr	r3, [pc, #128]	; (8009bfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b7e:	f7fd fabb 	bl	80070f8 <HAL_GetTick>
 8009b82:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b84:	e008      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b86:	f7fd fab7 	bl	80070f8 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e17c      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b98:	4b17      	ldr	r3, [pc, #92]	; (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d112      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10c      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80ce 	beq.w	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bd2:	f040 80c8 	bne.w	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009bdc:	f7fd fa8c 	bl	80070f8 <HAL_GetTick>
 8009be0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009be2:	e00f      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009be4:	f7fd fa88 	bl	80070f8 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d908      	bls.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e14d      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009bf6:	bf00      	nop
 8009bf8:	40023800 	.word	0x40023800
 8009bfc:	42470068 	.word	0x42470068
 8009c00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c04:	4ba5      	ldr	r3, [pc, #660]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c10:	d0e8      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 0304 	and.w	r3, r3, #4
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d02e      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009c1e:	4b9f      	ldr	r3, [pc, #636]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c30:	4b9a      	ldr	r3, [pc, #616]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	0f1b      	lsrs	r3, r3, #28
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	019a      	lsls	r2, r3, #6
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	085b      	lsrs	r3, r3, #1
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	061b      	lsls	r3, r3, #24
 8009c54:	431a      	orrs	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	071b      	lsls	r3, r3, #28
 8009c5a:	4990      	ldr	r1, [pc, #576]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c62:	4b8e      	ldr	r3, [pc, #568]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	3b01      	subs	r3, #1
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	4989      	ldr	r1, [pc, #548]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0308 	and.w	r3, r3, #8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d02c      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009c88:	4b84      	ldr	r3, [pc, #528]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	0c1b      	lsrs	r3, r3, #16
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	3301      	adds	r3, #1
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c9a:	4b80      	ldr	r3, [pc, #512]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca0:	0e1b      	lsrs	r3, r3, #24
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	019a      	lsls	r2, r3, #6
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	085b      	lsrs	r3, r3, #1
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	041b      	lsls	r3, r3, #16
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	061b      	lsls	r3, r3, #24
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	071b      	lsls	r3, r3, #28
 8009cc4:	4975      	ldr	r1, [pc, #468]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ccc:	4b73      	ldr	r3, [pc, #460]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	4970      	ldr	r1, [pc, #448]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d024      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf6:	d11f      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009cf8:	4b68      	ldr	r3, [pc, #416]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfe:	0e1b      	lsrs	r3, r3, #24
 8009d00:	f003 030f 	and.w	r3, r3, #15
 8009d04:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d06:	4b65      	ldr	r3, [pc, #404]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	0f1b      	lsrs	r3, r3, #28
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	019a      	lsls	r2, r3, #6
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	085b      	lsrs	r3, r3, #1
 8009d20:	3b01      	subs	r3, #1
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	431a      	orrs	r2, r3
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	061b      	lsls	r3, r3, #24
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	071b      	lsls	r3, r3, #28
 8009d30:	495a      	ldr	r1, [pc, #360]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009d38:	4b59      	ldr	r3, [pc, #356]	; (8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d3e:	f7fd f9db 	bl	80070f8 <HAL_GetTick>
 8009d42:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d44:	e008      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009d46:	f7fd f9d7 	bl	80070f8 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d901      	bls.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e09c      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d58:	4b50      	ldr	r3, [pc, #320]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d64:	d1ef      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8083 	beq.w	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d74:	2300      	movs	r3, #0
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	4b48      	ldr	r3, [pc, #288]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	4a47      	ldr	r2, [pc, #284]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d82:	6413      	str	r3, [r2, #64]	; 0x40
 8009d84:	4b45      	ldr	r3, [pc, #276]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8c:	60bb      	str	r3, [r7, #8]
 8009d8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009d90:	4b44      	ldr	r3, [pc, #272]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a43      	ldr	r2, [pc, #268]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d9a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d9c:	f7fd f9ac 	bl	80070f8 <HAL_GetTick>
 8009da0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009da2:	e008      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009da4:	f7fd f9a8 	bl	80070f8 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d901      	bls.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e06d      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009db6:	4b3b      	ldr	r3, [pc, #236]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0f0      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009dc2:	4b36      	ldr	r3, [pc, #216]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dca:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d02f      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d028      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009de0:	4b2e      	ldr	r3, [pc, #184]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009dea:	4b2f      	ldr	r3, [pc, #188]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009df0:	4b2d      	ldr	r3, [pc, #180]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009df6:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009dfc:	4b27      	ldr	r3, [pc, #156]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d114      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009e08:	f7fd f976 	bl	80070f8 <HAL_GetTick>
 8009e0c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e0e:	e00a      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e10:	f7fd f972 	bl	80070f8 <HAL_GetTick>
 8009e14:	4602      	mov	r2, r0
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e035      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0ee      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e3e:	d10d      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009e40:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e54:	4911      	ldr	r1, [pc, #68]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	608b      	str	r3, [r1, #8]
 8009e5a:	e005      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009e5c:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	4a0e      	ldr	r2, [pc, #56]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009e66:	6093      	str	r3, [r2, #8]
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e74:	4909      	ldr	r1, [pc, #36]	; (8009e9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009e8e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	40023800 	.word	0x40023800
 8009ea0:	42470070 	.word	0x42470070
 8009ea4:	40007000 	.word	0x40007000
 8009ea8:	42470e40 	.word	0x42470e40
 8009eac:	424711e0 	.word	0x424711e0

08009eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d075      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009ec8:	4ba2      	ldr	r3, [pc, #648]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 030c 	and.w	r3, r3, #12
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d00c      	beq.n	8009eee <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ed4:	4b9f      	ldr	r3, [pc, #636]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d112      	bne.n	8009f06 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ee0:	4b9c      	ldr	r3, [pc, #624]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eec:	d10b      	bne.n	8009f06 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eee:	4b99      	ldr	r3, [pc, #612]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d05b      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x102>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d157      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e20b      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0e:	d106      	bne.n	8009f1e <HAL_RCC_OscConfig+0x6e>
 8009f10:	4b90      	ldr	r3, [pc, #576]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a8f      	ldr	r2, [pc, #572]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	e01d      	b.n	8009f5a <HAL_RCC_OscConfig+0xaa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f26:	d10c      	bne.n	8009f42 <HAL_RCC_OscConfig+0x92>
 8009f28:	4b8a      	ldr	r3, [pc, #552]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a89      	ldr	r2, [pc, #548]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	4b87      	ldr	r3, [pc, #540]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a86      	ldr	r2, [pc, #536]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	e00b      	b.n	8009f5a <HAL_RCC_OscConfig+0xaa>
 8009f42:	4b84      	ldr	r3, [pc, #528]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a83      	ldr	r2, [pc, #524]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	4b81      	ldr	r3, [pc, #516]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a80      	ldr	r2, [pc, #512]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d013      	beq.n	8009f8a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f62:	f7fd f8c9 	bl	80070f8 <HAL_GetTick>
 8009f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f6a:	f7fd f8c5 	bl	80070f8 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b64      	cmp	r3, #100	; 0x64
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e1d0      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f7c:	4b75      	ldr	r3, [pc, #468]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0xba>
 8009f88:	e014      	b.n	8009fb4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8a:	f7fd f8b5 	bl	80070f8 <HAL_GetTick>
 8009f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f90:	e008      	b.n	8009fa4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f92:	f7fd f8b1 	bl	80070f8 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b64      	cmp	r3, #100	; 0x64
 8009f9e:	d901      	bls.n	8009fa4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e1bc      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fa4:	4b6b      	ldr	r3, [pc, #428]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1f0      	bne.n	8009f92 <HAL_RCC_OscConfig+0xe2>
 8009fb0:	e000      	b.n	8009fb4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d063      	beq.n	800a088 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009fc0:	4b64      	ldr	r3, [pc, #400]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f003 030c 	and.w	r3, r3, #12
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fcc:	4b61      	ldr	r3, [pc, #388]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d11c      	bne.n	800a012 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fd8:	4b5e      	ldr	r3, [pc, #376]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d116      	bne.n	800a012 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fe4:	4b5b      	ldr	r3, [pc, #364]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_RCC_OscConfig+0x14c>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d001      	beq.n	8009ffc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e190      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ffc:	4b55      	ldr	r3, [pc, #340]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4952      	ldr	r1, [pc, #328]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a010:	e03a      	b.n	800a088 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d020      	beq.n	800a05c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a01a:	4b4f      	ldr	r3, [pc, #316]	; (800a158 <HAL_RCC_OscConfig+0x2a8>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a020:	f7fd f86a 	bl	80070f8 <HAL_GetTick>
 800a024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a028:	f7fd f866 	bl	80070f8 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e171      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a03a:	4b46      	ldr	r3, [pc, #280]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a046:	4b43      	ldr	r3, [pc, #268]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	493f      	ldr	r1, [pc, #252]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a056:	4313      	orrs	r3, r2
 800a058:	600b      	str	r3, [r1, #0]
 800a05a:	e015      	b.n	800a088 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a05c:	4b3e      	ldr	r3, [pc, #248]	; (800a158 <HAL_RCC_OscConfig+0x2a8>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a062:	f7fd f849 	bl	80070f8 <HAL_GetTick>
 800a066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a068:	e008      	b.n	800a07c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a06a:	f7fd f845 	bl	80070f8 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d901      	bls.n	800a07c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e150      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a07c:	4b35      	ldr	r3, [pc, #212]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1f0      	bne.n	800a06a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d030      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d016      	beq.n	800a0ca <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a09c:	4b2f      	ldr	r3, [pc, #188]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a2:	f7fd f829 	bl	80070f8 <HAL_GetTick>
 800a0a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0a8:	e008      	b.n	800a0bc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0aa:	f7fd f825 	bl	80070f8 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d901      	bls.n	800a0bc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e130      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0bc:	4b25      	ldr	r3, [pc, #148]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0f0      	beq.n	800a0aa <HAL_RCC_OscConfig+0x1fa>
 800a0c8:	e015      	b.n	800a0f6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d0:	f7fd f812 	bl	80070f8 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0d8:	f7fd f80e 	bl	80070f8 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e119      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0ea:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 809f 	beq.w	800a242 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a104:	2300      	movs	r3, #0
 800a106:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a108:	4b12      	ldr	r3, [pc, #72]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10f      	bne.n	800a134 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11c:	4a0d      	ldr	r2, [pc, #52]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a11e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a122:	6413      	str	r3, [r2, #64]	; 0x40
 800a124:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <HAL_RCC_OscConfig+0x2a4>)
 800a126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a130:	2301      	movs	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a134:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d120      	bne.n	800a182 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a06      	ldr	r2, [pc, #24]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a14a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a14c:	f7fc ffd4 	bl	80070f8 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a152:	e010      	b.n	800a176 <HAL_RCC_OscConfig+0x2c6>
 800a154:	40023800 	.word	0x40023800
 800a158:	42470000 	.word	0x42470000
 800a15c:	42470e80 	.word	0x42470e80
 800a160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a164:	f7fc ffc8 	bl	80070f8 <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d901      	bls.n	800a176 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e0d3      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a176:	4b6c      	ldr	r3, [pc, #432]	; (800a328 <HAL_RCC_OscConfig+0x478>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0f0      	beq.n	800a164 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d106      	bne.n	800a198 <HAL_RCC_OscConfig+0x2e8>
 800a18a:	4b68      	ldr	r3, [pc, #416]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	4a67      	ldr	r2, [pc, #412]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a190:	f043 0301 	orr.w	r3, r3, #1
 800a194:	6713      	str	r3, [r2, #112]	; 0x70
 800a196:	e01c      	b.n	800a1d2 <HAL_RCC_OscConfig+0x322>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	d10c      	bne.n	800a1ba <HAL_RCC_OscConfig+0x30a>
 800a1a0:	4b62      	ldr	r3, [pc, #392]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a4:	4a61      	ldr	r2, [pc, #388]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1a6:	f043 0304 	orr.w	r3, r3, #4
 800a1aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ac:	4b5f      	ldr	r3, [pc, #380]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	4a5e      	ldr	r2, [pc, #376]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b8:	e00b      	b.n	800a1d2 <HAL_RCC_OscConfig+0x322>
 800a1ba:	4b5c      	ldr	r3, [pc, #368]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	4a5b      	ldr	r2, [pc, #364]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c6:	4b59      	ldr	r3, [pc, #356]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ca:	4a58      	ldr	r2, [pc, #352]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1cc:	f023 0304 	bic.w	r3, r3, #4
 800a1d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d015      	beq.n	800a206 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1da:	f7fc ff8d 	bl	80070f8 <HAL_GetTick>
 800a1de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e0:	e00a      	b.n	800a1f8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1e2:	f7fc ff89 	bl	80070f8 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d901      	bls.n	800a1f8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e092      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1f8:	4b4c      	ldr	r3, [pc, #304]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0ee      	beq.n	800a1e2 <HAL_RCC_OscConfig+0x332>
 800a204:	e014      	b.n	800a230 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a206:	f7fc ff77 	bl	80070f8 <HAL_GetTick>
 800a20a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a20c:	e00a      	b.n	800a224 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a20e:	f7fc ff73 	bl	80070f8 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d901      	bls.n	800a224 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e07c      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a224:	4b41      	ldr	r3, [pc, #260]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1ee      	bne.n	800a20e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d105      	bne.n	800a242 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a236:	4b3d      	ldr	r3, [pc, #244]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	4a3c      	ldr	r2, [pc, #240]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a23c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d068      	beq.n	800a31c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a24a:	4b38      	ldr	r3, [pc, #224]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f003 030c 	and.w	r3, r3, #12
 800a252:	2b08      	cmp	r3, #8
 800a254:	d060      	beq.n	800a318 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d145      	bne.n	800a2ea <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25e:	4b34      	ldr	r3, [pc, #208]	; (800a330 <HAL_RCC_OscConfig+0x480>)
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a264:	f7fc ff48 	bl	80070f8 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a26c:	f7fc ff44 	bl	80070f8 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e04f      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a27e:	4b2b      	ldr	r3, [pc, #172]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f0      	bne.n	800a26c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69da      	ldr	r2, [r3, #28]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	019b      	lsls	r3, r3, #6
 800a29a:	431a      	orrs	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	041b      	lsls	r3, r3, #16
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	061b      	lsls	r3, r3, #24
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	071b      	lsls	r3, r3, #28
 800a2b6:	491d      	ldr	r1, [pc, #116]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2bc:	4b1c      	ldr	r3, [pc, #112]	; (800a330 <HAL_RCC_OscConfig+0x480>)
 800a2be:	2201      	movs	r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2c2:	f7fc ff19 	bl	80070f8 <HAL_GetTick>
 800a2c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2c8:	e008      	b.n	800a2dc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2ca:	f7fc ff15 	bl	80070f8 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e020      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2dc:	4b13      	ldr	r3, [pc, #76]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0f0      	beq.n	800a2ca <HAL_RCC_OscConfig+0x41a>
 800a2e8:	e018      	b.n	800a31c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ea:	4b11      	ldr	r3, [pc, #68]	; (800a330 <HAL_RCC_OscConfig+0x480>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f0:	f7fc ff02 	bl	80070f8 <HAL_GetTick>
 800a2f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f6:	e008      	b.n	800a30a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2f8:	f7fc fefe 	bl	80070f8 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d901      	bls.n	800a30a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e009      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a30a:	4b08      	ldr	r3, [pc, #32]	; (800a32c <HAL_RCC_OscConfig+0x47c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f0      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x448>
 800a316:	e001      	b.n	800a31c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	40007000 	.word	0x40007000
 800a32c:	40023800 	.word	0x40023800
 800a330:	42470060 	.word	0x42470060

0800a334 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e022      	b.n	800a38c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7fa fe5d 	bl	8005018 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2203      	movs	r2, #3
 800a362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f814 	bl	800a394 <HAL_SD_InitCard>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e00a      	b.n	800a38c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a394:	b5b0      	push	{r4, r5, r7, lr}
 800a396:	b08e      	sub	sp, #56	; 0x38
 800a398:	af04      	add	r7, sp, #16
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a39c:	2300      	movs	r3, #0
 800a39e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a3b0:	2376      	movs	r3, #118	; 0x76
 800a3b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681d      	ldr	r5, [r3, #0]
 800a3b8:	466c      	mov	r4, sp
 800a3ba:	f107 0314 	add.w	r3, r7, #20
 800a3be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f003 fa87 	bl	800d8e0 <SDIO_Init>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e031      	b.n	800a448 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <HAL_SD_InitCard+0xbc>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f003 fabf 	bl	800d972 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a3f4:	4b16      	ldr	r3, [pc, #88]	; (800a450 <HAL_SD_InitCard+0xbc>)
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 ffc6 	bl	800b38c <SD_PowerON>
 800a400:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e013      	b.n	800a448 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fee5 	bl	800b1f0 <SD_InitCard>
 800a426:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3728      	adds	r7, #40	; 0x28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bdb0      	pop	{r4, r5, r7, pc}
 800a450:	422580a0 	.word	0x422580a0

0800a454 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	; 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d107      	bne.n	800a47c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e0c7      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	f040 80c0 	bne.w	800a60a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d907      	bls.n	800a4ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e0ae      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a4cc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	4a50      	ldr	r2, [pc, #320]	; (800a614 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a4d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	4a4f      	ldr	r2, [pc, #316]	; (800a618 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a4dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3380      	adds	r3, #128	; 0x80
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	025b      	lsls	r3, r3, #9
 800a4f8:	089b      	lsrs	r3, r3, #2
 800a4fa:	f7fd fbef 	bl	8007cdc <HAL_DMA_Start_IT>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d017      	beq.n	800a534 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a512:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a40      	ldr	r2, [pc, #256]	; (800a61c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e06b      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a534:	4b3a      	ldr	r3, [pc, #232]	; (800a620 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d002      	beq.n	800a548 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	025b      	lsls	r3, r3, #9
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a550:	4618      	mov	r0, r3
 800a552:	f003 faa1 	bl	800da98 <SDMMC_CmdBlockLength>
 800a556:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00f      	beq.n	800a57e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a2e      	ldr	r2, [pc, #184]	; (800a61c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a564:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	431a      	orrs	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e046      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a57e:	f04f 33ff 	mov.w	r3, #4294967295
 800a582:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	025b      	lsls	r3, r3, #9
 800a588:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a58a:	2390      	movs	r3, #144	; 0x90
 800a58c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a58e:	2302      	movs	r3, #2
 800a590:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a592:	2300      	movs	r3, #0
 800a594:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a596:	2301      	movs	r3, #1
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f107 0210 	add.w	r2, r7, #16
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f003 fa4b 	bl	800da40 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d90a      	bls.n	800a5c6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2282      	movs	r2, #130	; 0x82
 800a5b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f003 faaf 	bl	800db20 <SDMMC_CmdReadMultiBlock>
 800a5c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a5c4:	e009      	b.n	800a5da <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2281      	movs	r2, #129	; 0x81
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f003 fa82 	bl	800dadc <SDMMC_CmdReadSingleBlock>
 800a5d8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d012      	beq.n	800a606 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a0d      	ldr	r2, [pc, #52]	; (800a61c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e002      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	e000      	b.n	800a60c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a60a:	2302      	movs	r3, #2
  }
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3730      	adds	r7, #48	; 0x30
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	0800afff 	.word	0x0800afff
 800a618:	0800b071 	.word	0x0800b071
 800a61c:	004005ff 	.word	0x004005ff
 800a620:	4225858c 	.word	0x4225858c

0800a624 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08c      	sub	sp, #48	; 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d107      	bne.n	800a64c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e0ca      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b01      	cmp	r3, #1
 800a656:	f040 80c3 	bne.w	800a7e0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	441a      	add	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d907      	bls.n	800a67e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e0b1      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2203      	movs	r2, #3
 800a682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 021a 	orr.w	r2, r2, #26
 800a69c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a2:	4a52      	ldr	r2, [pc, #328]	; (800a7ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a6a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	4a51      	ldr	r2, [pc, #324]	; (800a7f0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a6ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d002      	beq.n	800a6c4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	025b      	lsls	r3, r3, #9
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f003 f9e3 	bl	800da98 <SDMMC_CmdBlockLength>
 800a6d2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00f      	beq.n	800a6fa <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a45      	ldr	r2, [pc, #276]	; (800a7f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a6e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e073      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d90a      	bls.n	800a716 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	22a0      	movs	r2, #160	; 0xa0
 800a704:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a70c:	4618      	mov	r0, r3
 800a70e:	f003 fa4b 	bl	800dba8 <SDMMC_CmdWriteMultiBlock>
 800a712:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a714:	e009      	b.n	800a72a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2290      	movs	r2, #144	; 0x90
 800a71a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a722:	4618      	mov	r0, r3
 800a724:	f003 fa1e 	bl	800db64 <SDMMC_CmdWriteSingleBlock>
 800a728:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d012      	beq.n	800a756 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a2f      	ldr	r2, [pc, #188]	; (800a7f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a736:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	431a      	orrs	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e045      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a756:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a758:	2201      	movs	r2, #1
 800a75a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3380      	adds	r3, #128	; 0x80
 800a768:	461a      	mov	r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	025b      	lsls	r3, r3, #9
 800a76e:	089b      	lsrs	r3, r3, #2
 800a770:	f7fd fab4 	bl	8007cdc <HAL_DMA_Start_IT>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01a      	beq.n	800a7b0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 021a 	bic.w	r2, r2, #26
 800a788:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e018      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	025b      	lsls	r3, r3, #9
 800a7ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a7bc:	2390      	movs	r3, #144	; 0x90
 800a7be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f107 0210 	add.w	r2, r7, #16
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f003 f932 	bl	800da40 <SDIO_ConfigData>

      return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e000      	b.n	800a7e2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a7e0:	2302      	movs	r3, #2
  }
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3730      	adds	r7, #48	; 0x30
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800afd5 	.word	0x0800afd5
 800a7f0:	0800b071 	.word	0x0800b071
 800a7f4:	004005ff 	.word	0x004005ff
 800a7f8:	4225858c 	.word	0x4225858c

0800a7fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a808:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d008      	beq.n	800a82a <HAL_SD_IRQHandler+0x2e>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 0308 	and.w	r3, r3, #8
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 ffc8 	bl	800b7b8 <SD_Read_IT>
 800a828:	e155      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 808f 	beq.w	800a958 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a852:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a856:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 0201 	bic.w	r2, r2, #1
 800a866:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f003 0308 	and.w	r3, r3, #8
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d039      	beq.n	800a8e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <HAL_SD_IRQHandler+0x8a>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f003 0320 	and.w	r3, r3, #32
 800a882:	2b00      	cmp	r3, #0
 800a884:	d011      	beq.n	800a8aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f003 f9ae 	bl	800dbec <SDMMC_CmdStopTransfer>
 800a890:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d008      	beq.n	800a8aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f91f 	bl	800aae8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f240 523a 	movw	r2, #1338	; 0x53a
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d104      	bne.n	800a8d6 <HAL_SD_IRQHandler+0xda>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f003 fe04 	bl	800e4e4 <HAL_SD_RxCpltCallback>
 800a8dc:	e0fb      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f003 fdf6 	bl	800e4d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a8e4:	e0f7      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80f2 	beq.w	800aad6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f003 0320 	and.w	r3, r3, #32
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d011      	beq.n	800a920 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4618      	mov	r0, r3
 800a902:	f003 f973 	bl	800dbec <SDMMC_CmdStopTransfer>
 800a906:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	431a      	orrs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8e4 	bl	800aae8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	f040 80d5 	bne.w	800aad6 <HAL_SD_IRQHandler+0x2da>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	f040 80cf 	bne.w	800aad6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0208 	bic.w	r2, r2, #8
 800a946:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f003 fdbd 	bl	800e4d0 <HAL_SD_TxCpltCallback>
}
 800a956:	e0be      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <HAL_SD_IRQHandler+0x17c>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 ff72 	bl	800b85a <SD_Write_IT>
 800a976:	e0ae      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 80a7 	beq.w	800aad6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99a:	f043 0202 	orr.w	r2, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	f003 0308 	and.w	r3, r3, #8
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d005      	beq.n	800a9bc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	f043 0208 	orr.w	r2, r3, #8
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d005      	beq.n	800a9d6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	f043 0220 	orr.w	r2, r3, #32
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	f043 0210 	orr.w	r2, r3, #16
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f240 523a 	movw	r2, #1338	; 0x53a
 800a9f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aa08:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f003 f8ec 	bl	800dbec <SDMMC_CmdStopTransfer>
 800aa14:	4602      	mov	r2, r0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f855 	bl	800aae8 <HAL_SD_ErrorCallback>
}
 800aa3e:	e04a      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d045      	beq.n	800aad6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <HAL_SD_IRQHandler+0x262>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d011      	beq.n	800aa82 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <HAL_SD_IRQHandler+0x2e4>)
 800aa64:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fd f98e 	bl	8007d8c <HAL_DMA_Abort_IT>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d02f      	beq.n	800aad6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fb4a 	bl	800b114 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aa80:	e029      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <HAL_SD_IRQHandler+0x29a>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d011      	beq.n	800aaba <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	4a12      	ldr	r2, [pc, #72]	; (800aae4 <HAL_SD_IRQHandler+0x2e8>)
 800aa9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fd f972 	bl	8007d8c <HAL_DMA_Abort_IT>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d013      	beq.n	800aad6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fb65 	bl	800b182 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aab8:	e00d      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f003 fcf4 	bl	800e4bc <HAL_SD_AbortCallback>
}
 800aad4:	e7ff      	b.n	800aad6 <HAL_SD_IRQHandler+0x2da>
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	0800b115 	.word	0x0800b115
 800aae4:	0800b183 	.word	0x0800b183

0800aae8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab0a:	0f9b      	lsrs	r3, r3, #30
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab16:	0e9b      	lsrs	r3, r3, #26
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab28:	0e1b      	lsrs	r3, r3, #24
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0303 	and.w	r3, r3, #3
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab3a:	0c1b      	lsrs	r3, r3, #16
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5c:	0d1b      	lsrs	r3, r3, #20
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab7a:	0bdb      	lsrs	r3, r3, #15
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab8c:	0b9b      	lsrs	r3, r3, #14
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab9e:	0b5b      	lsrs	r3, r3, #13
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb0:	0b1b      	lsrs	r3, r3, #12
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2200      	movs	r2, #0
 800abc2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d163      	bne.n	800ac94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd0:	009a      	lsls	r2, r3, #2
 800abd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800abd6:	4013      	ands	r3, r2
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800abdc:	0f92      	lsrs	r2, r2, #30
 800abde:	431a      	orrs	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe8:	0edb      	lsrs	r3, r3, #27
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfa:	0e1b      	lsrs	r3, r3, #24
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0c:	0d5b      	lsrs	r3, r3, #21
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac1e:	0c9b      	lsrs	r3, r3, #18
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac30:	0bdb      	lsrs	r3, r3, #15
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f003 0307 	and.w	r3, r3, #7
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	7e1b      	ldrb	r3, [r3, #24]
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	3302      	adds	r3, #2
 800ac54:	2201      	movs	r2, #1
 800ac56:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ac5e:	fb02 f203 	mul.w	r2, r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	7a1b      	ldrb	r3, [r3, #8]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	f003 030f 	and.w	r3, r3, #15
 800ac70:	2201      	movs	r2, #1
 800ac72:	409a      	lsls	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ac80:	0a52      	lsrs	r2, r2, #9
 800ac82:	fb02 f203 	mul.w	r2, r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac90:	661a      	str	r2, [r3, #96]	; 0x60
 800ac92:	e031      	b.n	800acf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d11d      	bne.n	800acd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aca0:	041b      	lsls	r3, r3, #16
 800aca2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acaa:	0c1b      	lsrs	r3, r3, #16
 800acac:	431a      	orrs	r2, r3
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	3301      	adds	r3, #1
 800acb8:	029a      	lsls	r2, r3, #10
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800accc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	661a      	str	r2, [r3, #96]	; 0x60
 800acd6:	e00f      	b.n	800acf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a58      	ldr	r2, [pc, #352]	; (800ae40 <HAL_SD_GetCardCSD+0x344>)
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e09d      	b.n	800ae34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfc:	0b9b      	lsrs	r3, r3, #14
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad0e:	09db      	lsrs	r3, r3, #7
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad30:	0fdb      	lsrs	r3, r3, #31
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3c:	0f5b      	lsrs	r3, r3, #29
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0303 	and.w	r3, r3, #3
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4e:	0e9b      	lsrs	r3, r3, #26
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad60:	0d9b      	lsrs	r3, r3, #22
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad72:	0d5b      	lsrs	r3, r3, #21
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	0c1b      	lsrs	r3, r3, #16
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada2:	0bdb      	lsrs	r3, r3, #15
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb6:	0b9b      	lsrs	r3, r3, #14
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adca:	0b5b      	lsrs	r3, r3, #13
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	b2da      	uxtb	r2, r3
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adde:	0b1b      	lsrs	r3, r3, #12
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf2:	0a9b      	lsrs	r3, r3, #10
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1a:	085b      	lsrs	r3, r3, #1
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	004005ff 	.word	0x004005ff

0800ae44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae9c:	b5b0      	push	{r4, r5, r7, lr}
 800ae9e:	b08e      	sub	sp, #56	; 0x38
 800aea0:	af04      	add	r7, sp, #16
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2203      	movs	r2, #3
 800aeaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d02e      	beq.n	800af14 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aebc:	d106      	bne.n	800aecc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	639a      	str	r2, [r3, #56]	; 0x38
 800aeca:	e029      	b.n	800af20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aed2:	d10a      	bne.n	800aeea <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fb0f 	bl	800b4f8 <SD_WideBus_Enable>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	639a      	str	r2, [r3, #56]	; 0x38
 800aee8:	e01a      	b.n	800af20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10a      	bne.n	800af06 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fb4c 	bl	800b58e <SD_WideBus_Disable>
 800aef6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	431a      	orrs	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	639a      	str	r2, [r3, #56]	; 0x38
 800af04:	e00c      	b.n	800af20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	639a      	str	r2, [r3, #56]	; 0x38
 800af12:	e005      	b.n	800af20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d009      	beq.n	800af3c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a18      	ldr	r2, [pc, #96]	; (800af90 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800af2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e024      	b.n	800af86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681d      	ldr	r5, [r3, #0]
 800af62:	466c      	mov	r4, sp
 800af64:	f107 0318 	add.w	r3, r7, #24
 800af68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af70:	f107 030c 	add.w	r3, r7, #12
 800af74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af76:	4628      	mov	r0, r5
 800af78:	f002 fcb2 	bl	800d8e0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bdb0      	pop	{r4, r5, r7, pc}
 800af8e:	bf00      	nop
 800af90:	004005ff 	.word	0x004005ff

0800af94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800afa0:	f107 030c 	add.w	r3, r7, #12
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa7e 	bl	800b4a8 <SD_SendStatus>
 800afac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d005      	beq.n	800afc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	431a      	orrs	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	0a5b      	lsrs	r3, r3, #9
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800afca:	693b      	ldr	r3, [r7, #16]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aff0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b010:	2b82      	cmp	r3, #130	; 0x82
 800b012:	d111      	bne.n	800b038 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f002 fde7 	bl	800dbec <SDMMC_CmdStopTransfer>
 800b01e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d008      	beq.n	800b038 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	431a      	orrs	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7ff fd58 	bl	800aae8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 0208 	bic.w	r2, r2, #8
 800b046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f240 523a 	movw	r2, #1338	; 0x53a
 800b050:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f003 fa3f 	bl	800e4e4 <HAL_SD_RxCpltCallback>
#endif
}
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7fd f830 	bl	80080e4 <HAL_DMA_GetError>
 800b084:	4603      	mov	r3, r0
 800b086:	2b02      	cmp	r3, #2
 800b088:	d03e      	beq.n	800b108 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b090:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b098:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d002      	beq.n	800b0a6 <SD_DMAError+0x36>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d12d      	bne.n	800b102 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a19      	ldr	r2, [pc, #100]	; (800b110 <SD_DMAError+0xa0>)
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b0bc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b0ca:	6978      	ldr	r0, [r7, #20]
 800b0cc:	f7ff ff62 	bl	800af94 <HAL_SD_GetCardState>
 800b0d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b06      	cmp	r3, #6
 800b0d6:	d002      	beq.n	800b0de <SD_DMAError+0x6e>
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	d10a      	bne.n	800b0f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fd82 	bl	800dbec <SDMMC_CmdStopTransfer>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2200      	movs	r2, #0
 800b100:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b102:	6978      	ldr	r0, [r7, #20]
 800b104:	f7ff fcf0 	bl	800aae8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	004005ff 	.word	0x004005ff

0800b114 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b120:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f240 523a 	movw	r2, #1338	; 0x53a
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7ff ff31 	bl	800af94 <HAL_SD_GetCardState>
 800b132:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b06      	cmp	r3, #6
 800b146:	d002      	beq.n	800b14e <SD_DMATxAbort+0x3a>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d10a      	bne.n	800b164 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4618      	mov	r0, r3
 800b154:	f002 fd4a 	bl	800dbec <SDMMC_CmdStopTransfer>
 800b158:	4602      	mov	r2, r0
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15e:	431a      	orrs	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f003 f9a5 	bl	800e4bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b172:	e002      	b.n	800b17a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7ff fcb7 	bl	800aae8 <HAL_SD_ErrorCallback>
}
 800b17a:	bf00      	nop
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f240 523a 	movw	r2, #1338	; 0x53a
 800b198:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f7ff fefa 	bl	800af94 <HAL_SD_GetCardState>
 800b1a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2b06      	cmp	r3, #6
 800b1b4:	d002      	beq.n	800b1bc <SD_DMARxAbort+0x3a>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b05      	cmp	r3, #5
 800b1ba:	d10a      	bne.n	800b1d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f002 fd13 	bl	800dbec <SDMMC_CmdStopTransfer>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d103      	bne.n	800b1e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f003 f96e 	bl	800e4bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b1e0:	e002      	b.n	800b1e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fc80 	bl	800aae8 <HAL_SD_ErrorCallback>
}
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b094      	sub	sp, #80	; 0x50
 800b1f4:	af04      	add	r7, sp, #16
 800b1f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f002 fbc5 	bl	800d990 <SDIO_GetPowerState>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b20c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b210:	e0b7      	b.n	800b382 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	2b03      	cmp	r3, #3
 800b218:	d02f      	beq.n	800b27a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f002 fdee 	bl	800de00 <SDMMC_CmdSendCID>
 800b224:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <SD_InitCard+0x40>
    {
      return errorstate;
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	e0a8      	b.n	800b382 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f002 fbef 	bl	800da1a <SDIO_GetResponse>
 800b23c:	4602      	mov	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2104      	movs	r1, #4
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 fbe6 	bl	800da1a <SDIO_GetResponse>
 800b24e:	4602      	mov	r2, r0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2108      	movs	r1, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f002 fbdd 	bl	800da1a <SDIO_GetResponse>
 800b260:	4602      	mov	r2, r0
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	210c      	movs	r1, #12
 800b26c:	4618      	mov	r0, r3
 800b26e:	f002 fbd4 	bl	800da1a <SDIO_GetResponse>
 800b272:	4602      	mov	r2, r0
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d00d      	beq.n	800b29e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f107 020e 	add.w	r2, r7, #14
 800b28a:	4611      	mov	r1, r2
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 fdf4 	bl	800de7a <SDMMC_CmdSetRelAdd>
 800b292:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <SD_InitCard+0xae>
    {
      return errorstate;
 800b29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29c:	e071      	b.n	800b382 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d036      	beq.n	800b314 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b2a6:	89fb      	ldrh	r3, [r7, #14]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b6:	041b      	lsls	r3, r3, #16
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f002 fdbe 	bl	800de3c <SDMMC_CmdSendCSD>
 800b2c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <SD_InitCard+0xdc>
    {
      return errorstate;
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ca:	e05a      	b.n	800b382 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f002 fba1 	bl	800da1a <SDIO_GetResponse>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2104      	movs	r1, #4
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f002 fb98 	bl	800da1a <SDIO_GetResponse>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2108      	movs	r1, #8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f002 fb8f 	bl	800da1a <SDIO_GetResponse>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	210c      	movs	r1, #12
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 fb86 	bl	800da1a <SDIO_GetResponse>
 800b30e:	4602      	mov	r2, r0
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2104      	movs	r1, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f002 fb7d 	bl	800da1a <SDIO_GetResponse>
 800b320:	4603      	mov	r3, r0
 800b322:	0d1a      	lsrs	r2, r3, #20
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b328:	f107 0310 	add.w	r3, r7, #16
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fbe4 	bl	800aafc <HAL_SD_GetCardCSD>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b33a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b33e:	e020      	b.n	800b382 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6819      	ldr	r1, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	f04f 0400 	mov.w	r4, #0
 800b34e:	461a      	mov	r2, r3
 800b350:	4623      	mov	r3, r4
 800b352:	4608      	mov	r0, r1
 800b354:	f002 fc6c 	bl	800dc30 <SDMMC_CmdSelDesel>
 800b358:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <SD_InitCard+0x174>
  {
    return errorstate;
 800b360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b362:	e00e      	b.n	800b382 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681d      	ldr	r5, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	466c      	mov	r4, sp
 800b36c:	f103 0210 	add.w	r2, r3, #16
 800b370:	ca07      	ldmia	r2, {r0, r1, r2}
 800b372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b376:	3304      	adds	r3, #4
 800b378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b37a:	4628      	mov	r0, r5
 800b37c:	f002 fab0 	bl	800d8e0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3740      	adds	r7, #64	; 0x40
 800b386:	46bd      	mov	sp, r7
 800b388:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b38c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	2300      	movs	r3, #0
 800b39e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f002 fc66 	bl	800dc76 <SDMMC_CmdGoIdleState>
 800b3aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	e072      	b.n	800b49c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f002 fc79 	bl	800dcb2 <SDMMC_CmdOperCond>
 800b3c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00d      	beq.n	800b3e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 fc4f 	bl	800dc76 <SDMMC_CmdGoIdleState>
 800b3d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <SD_PowerON+0x5e>
    {
      return errorstate;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	e05b      	b.n	800b49c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d137      	bne.n	800b462 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f002 fc79 	bl	800dcf0 <SDMMC_CmdAppCommand>
 800b3fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d02d      	beq.n	800b462 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b40a:	e047      	b.n	800b49c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f002 fc6c 	bl	800dcf0 <SDMMC_CmdAppCommand>
 800b418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <SD_PowerON+0x98>
    {
      return errorstate;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	e03b      	b.n	800b49c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	491e      	ldr	r1, [pc, #120]	; (800b4a4 <SD_PowerON+0x118>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f002 fc82 	bl	800dd34 <SDMMC_CmdAppOperCommand>
 800b430:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b43c:	e02e      	b.n	800b49c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2100      	movs	r1, #0
 800b444:	4618      	mov	r0, r3
 800b446:	f002 fae8 	bl	800da1a <SDIO_GetResponse>
 800b44a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	0fdb      	lsrs	r3, r3, #31
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <SD_PowerON+0xcc>
 800b454:	2301      	movs	r3, #1
 800b456:	e000      	b.n	800b45a <SD_PowerON+0xce>
 800b458:	2300      	movs	r3, #0
 800b45a:	613b      	str	r3, [r7, #16]

    count++;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3301      	adds	r3, #1
 800b460:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b468:	4293      	cmp	r3, r2
 800b46a:	d802      	bhi.n	800b472 <SD_PowerON+0xe6>
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0cc      	beq.n	800b40c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b478:	4293      	cmp	r3, r2
 800b47a:	d902      	bls.n	800b482 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b47c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b480:	e00c      	b.n	800b49c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	645a      	str	r2, [r3, #68]	; 0x44
 800b492:	e002      	b.n	800b49a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	c1100000 	.word	0xc1100000

0800b4a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b4b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4bc:	e018      	b.n	800b4f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c6:	041b      	lsls	r3, r3, #16
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f002 fcf6 	bl	800debc <SDMMC_CmdSendStatus>
 800b4d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	e009      	b.n	800b4f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f002 fa99 	bl	800da1a <SDIO_GetResponse>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b500:	2300      	movs	r3, #0
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	2300      	movs	r3, #0
 800b506:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2100      	movs	r1, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f002 fa83 	bl	800da1a <SDIO_GetResponse>
 800b514:	4603      	mov	r3, r0
 800b516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b51e:	d102      	bne.n	800b526 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b524:	e02f      	b.n	800b586 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b526:	f107 030c 	add.w	r3, r7, #12
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f879 	bl	800b624 <SD_FindSCR>
 800b532:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	e023      	b.n	800b586 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01c      	beq.n	800b582 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b550:	041b      	lsls	r3, r3, #16
 800b552:	4619      	mov	r1, r3
 800b554:	4610      	mov	r0, r2
 800b556:	f002 fbcb 	bl	800dcf0 <SDMMC_CmdAppCommand>
 800b55a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	e00f      	b.n	800b586 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2102      	movs	r1, #2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f002 fc04 	bl	800dd7a <SDMMC_CmdBusWidth>
 800b572:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	e003      	b.n	800b586 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b57e:	2300      	movs	r3, #0
 800b580:	e001      	b.n	800b586 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b582:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	2300      	movs	r3, #0
 800b59c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f002 fa38 	bl	800da1a <SDIO_GetResponse>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5b4:	d102      	bne.n	800b5bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b5b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5ba:	e02f      	b.n	800b61c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f82e 	bl	800b624 <SD_FindSCR>
 800b5c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	e023      	b.n	800b61c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d01c      	beq.n	800b618 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	041b      	lsls	r3, r3, #16
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	f002 fb80 	bl	800dcf0 <SDMMC_CmdAppCommand>
 800b5f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	e00f      	b.n	800b61c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f002 fbb9 	bl	800dd7a <SDMMC_CmdBusWidth>
 800b608:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	e003      	b.n	800b61c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b614:	2300      	movs	r3, #0
 800b616:	e001      	b.n	800b61c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b618:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b624:	b590      	push	{r4, r7, lr}
 800b626:	b08f      	sub	sp, #60	; 0x3c
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b62e:	f7fb fd63 	bl	80070f8 <HAL_GetTick>
 800b632:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b638:	2300      	movs	r3, #0
 800b63a:	60bb      	str	r3, [r7, #8]
 800b63c:	2300      	movs	r3, #0
 800b63e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2108      	movs	r1, #8
 800b64a:	4618      	mov	r0, r3
 800b64c:	f002 fa24 	bl	800da98 <SDMMC_CmdBlockLength>
 800b650:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	e0a9      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	041b      	lsls	r3, r3, #16
 800b666:	4619      	mov	r1, r3
 800b668:	4610      	mov	r0, r2
 800b66a:	f002 fb41 	bl	800dcf0 <SDMMC_CmdAppCommand>
 800b66e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	e09a      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b67a:	f04f 33ff 	mov.w	r3, #4294967295
 800b67e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b680:	2308      	movs	r3, #8
 800b682:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b684:	2330      	movs	r3, #48	; 0x30
 800b686:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b688:	2302      	movs	r3, #2
 800b68a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b690:	2301      	movs	r3, #1
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f107 0210 	add.w	r2, r7, #16
 800b69c:	4611      	mov	r1, r2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f002 f9ce 	bl	800da40 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f002 fb88 	bl	800ddbe <SDMMC_CmdSendSCR>
 800b6ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d022      	beq.n	800b6fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	e07a      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00e      	beq.n	800b6e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6819      	ldr	r1, [r3, #0]
 800b6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	f107 0208 	add.w	r2, r7, #8
 800b6d4:	18d4      	adds	r4, r2, r3
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	f002 f92d 	bl	800d936 <SDIO_ReadFIFO>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	6023      	str	r3, [r4, #0]
      index++;
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6e6:	f7fb fd07 	bl	80070f8 <HAL_GetTick>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d102      	bne.n	800b6fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6fa:	e059      	b.n	800b7b0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b702:	f240 432a 	movw	r3, #1066	; 0x42a
 800b706:	4013      	ands	r3, r2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0d6      	beq.n	800b6ba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b712:	f003 0308 	and.w	r3, r3, #8
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2208      	movs	r2, #8
 800b720:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b722:	2308      	movs	r3, #8
 800b724:	e044      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2202      	movs	r2, #2
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b73c:	2302      	movs	r3, #2
 800b73e:	e037      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d005      	beq.n	800b75a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2220      	movs	r2, #32
 800b754:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b756:	2320      	movs	r3, #32
 800b758:	e02a      	b.n	800b7b0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f240 523a 	movw	r2, #1338	; 0x53a
 800b762:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	061a      	lsls	r2, r3, #24
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	021b      	lsls	r3, r3, #8
 800b76c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b770:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	0a1b      	lsrs	r3, r3, #8
 800b776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b77a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	0e1b      	lsrs	r3, r3, #24
 800b780:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	601a      	str	r2, [r3, #0]
    scr++;
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	3304      	adds	r3, #4
 800b78a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	061a      	lsls	r2, r3, #24
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	021b      	lsls	r3, r3, #8
 800b794:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b798:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	0a1b      	lsrs	r3, r3, #8
 800b79e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b7a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	0e1b      	lsrs	r3, r3, #24
 800b7a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	373c      	adds	r7, #60	; 0x3c
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd90      	pop	{r4, r7, pc}

0800b7b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d03f      	beq.n	800b852 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	e033      	b.n	800b840 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f002 f8aa 	bl	800d936 <SDIO_ReadFIFO>
 800b7e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3301      	adds	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	0c1b      	lsrs	r3, r3, #16
 800b812:	b2da      	uxtb	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3301      	adds	r3, #1
 800b81c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	3b01      	subs	r3, #1
 800b822:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	0e1b      	lsrs	r3, r3, #24
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	3b01      	subs	r3, #1
 800b838:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	3301      	adds	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b07      	cmp	r3, #7
 800b844:	d9c8      	bls.n	800b7d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b852:	bf00      	nop
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b086      	sub	sp, #24
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d043      	beq.n	800b8fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	e037      	b.n	800b8ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3301      	adds	r3, #1
 800b884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3b01      	subs	r3, #1
 800b88a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	021a      	lsls	r2, r3, #8
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	4313      	orrs	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	041a      	lsls	r2, r3, #16
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	061a      	lsls	r2, r3, #24
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f107 0208 	add.w	r2, r7, #8
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f002 f836 	bl	800d950 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b07      	cmp	r3, #7
 800b8ee:	d9c4      	bls.n	800b87a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b8fc:	bf00      	nop
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e056      	b.n	800b9c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d106      	bne.n	800b936 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f7f9 fc63 	bl	80051fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2202      	movs	r2, #2
 800b93a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b94c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	431a      	orrs	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	431a      	orrs	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	431a      	orrs	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b972:	431a      	orrs	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	431a      	orrs	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	ea42 0103 	orr.w	r1, r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	0c1b      	lsrs	r3, r3, #16
 800b994:	f003 0104 	and.w	r1, r3, #4
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	69da      	ldr	r2, [r3, #28]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	603b      	str	r3, [r7, #0]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d101      	bne.n	800b9ee <HAL_SPI_Transmit+0x22>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e11e      	b.n	800bc2c <HAL_SPI_Transmit+0x260>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9f6:	f7fb fb7f 	bl	80070f8 <HAL_GetTick>
 800b9fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b9fc:	88fb      	ldrh	r3, [r7, #6]
 800b9fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d002      	beq.n	800ba12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba10:	e103      	b.n	800bc1a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_SPI_Transmit+0x52>
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba22:	e0fa      	b.n	800bc1a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2203      	movs	r2, #3
 800ba28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	88fa      	ldrh	r2, [r7, #6]
 800ba3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	88fa      	ldrh	r2, [r7, #6]
 800ba42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba6a:	d107      	bne.n	800ba7c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba86:	2b40      	cmp	r3, #64	; 0x40
 800ba88:	d007      	beq.n	800ba9a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baa2:	d14b      	bne.n	800bb3c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <HAL_SPI_Transmit+0xe6>
 800baac:	8afb      	ldrh	r3, [r7, #22]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d13e      	bne.n	800bb30 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	881a      	ldrh	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac2:	1c9a      	adds	r2, r3, #2
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bad6:	e02b      	b.n	800bb30 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d112      	bne.n	800bb0c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baea:	881a      	ldrh	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	1c9a      	adds	r2, r3, #2
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	3b01      	subs	r3, #1
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb0a:	e011      	b.n	800bb30 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb0c:	f7fb faf4 	bl	80070f8 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d803      	bhi.n	800bb24 <HAL_SPI_Transmit+0x158>
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d102      	bne.n	800bb2a <HAL_SPI_Transmit+0x15e>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb2e:	e074      	b.n	800bc1a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1ce      	bne.n	800bad8 <HAL_SPI_Transmit+0x10c>
 800bb3a:	e04c      	b.n	800bbd6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <HAL_SPI_Transmit+0x17e>
 800bb44:	8afb      	ldrh	r3, [r7, #22]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d140      	bne.n	800bbcc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	330c      	adds	r3, #12
 800bb54:	7812      	ldrb	r2, [r2, #0]
 800bb56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bb70:	e02c      	b.n	800bbcc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0302 	and.w	r3, r3, #2
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d113      	bne.n	800bba8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	330c      	adds	r3, #12
 800bb8a:	7812      	ldrb	r2, [r2, #0]
 800bb8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	86da      	strh	r2, [r3, #54]	; 0x36
 800bba6:	e011      	b.n	800bbcc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bba8:	f7fb faa6 	bl	80070f8 <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d803      	bhi.n	800bbc0 <HAL_SPI_Transmit+0x1f4>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbe:	d102      	bne.n	800bbc6 <HAL_SPI_Transmit+0x1fa>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bbca:	e026      	b.n	800bc1a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1cd      	bne.n	800bb72 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 fba4 	bl	800c328 <SPI_EndRxTxTransaction>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	613b      	str	r3, [r7, #16]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	77fb      	strb	r3, [r7, #31]
 800bc16:	e000      	b.n	800bc1a <HAL_SPI_Transmit+0x24e>
  }

error:
 800bc18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	4613      	mov	r3, r2
 800bc42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc50:	d112      	bne.n	800bc78 <HAL_SPI_Receive+0x44>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10e      	bne.n	800bc78 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc62:	88fa      	ldrh	r2, [r7, #6]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	68b9      	ldr	r1, [r7, #8]
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 f8e9 	bl	800be46 <HAL_SPI_TransmitReceive>
 800bc74:	4603      	mov	r3, r0
 800bc76:	e0e2      	b.n	800be3e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d101      	bne.n	800bc86 <HAL_SPI_Receive+0x52>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e0db      	b.n	800be3e <HAL_SPI_Receive+0x20a>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc8e:	f7fb fa33 	bl	80070f8 <HAL_GetTick>
 800bc92:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d002      	beq.n	800bca6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bca0:	2302      	movs	r3, #2
 800bca2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bca4:	e0c2      	b.n	800be2c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <HAL_SPI_Receive+0x7e>
 800bcac:	88fb      	ldrh	r3, [r7, #6]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcb6:	e0b9      	b.n	800be2c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	88fa      	ldrh	r2, [r7, #6]
 800bcd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	88fa      	ldrh	r2, [r7, #6]
 800bcd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcfe:	d107      	bne.n	800bd10 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1a:	2b40      	cmp	r3, #64	; 0x40
 800bd1c:	d007      	beq.n	800bd2e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d162      	bne.n	800bdfc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd36:	e02e      	b.n	800bd96 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d115      	bne.n	800bd72 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f103 020c 	add.w	r2, r3, #12
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd70:	e011      	b.n	800bd96 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd72:	f7fb f9c1 	bl	80070f8 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d803      	bhi.n	800bd8a <HAL_SPI_Receive+0x156>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d102      	bne.n	800bd90 <HAL_SPI_Receive+0x15c>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd94:	e04a      	b.n	800be2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1cb      	bne.n	800bd38 <HAL_SPI_Receive+0x104>
 800bda0:	e031      	b.n	800be06 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d113      	bne.n	800bdd8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdba:	b292      	uxth	r2, r2
 800bdbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	1c9a      	adds	r2, r3, #2
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdd6:	e011      	b.n	800bdfc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdd8:	f7fb f98e 	bl	80070f8 <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d803      	bhi.n	800bdf0 <HAL_SPI_Receive+0x1bc>
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdee:	d102      	bne.n	800bdf6 <HAL_SPI_Receive+0x1c2>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d102      	bne.n	800bdfc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bdfa:	e017      	b.n	800be2c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be00:	b29b      	uxth	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1cd      	bne.n	800bda2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 fa27 	bl	800c25e <SPI_EndRxTransaction>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2220      	movs	r2, #32
 800be1a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	75fb      	strb	r3, [r7, #23]
 800be28:	e000      	b.n	800be2c <HAL_SPI_Receive+0x1f8>
  }

error :
 800be2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b08c      	sub	sp, #48	; 0x30
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be54:	2301      	movs	r3, #1
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_SPI_TransmitReceive+0x26>
 800be68:	2302      	movs	r3, #2
 800be6a:	e18a      	b.n	800c182 <HAL_SPI_TransmitReceive+0x33c>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be74:	f7fb f940 	bl	80070f8 <HAL_GetTick>
 800be78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800be8a:	887b      	ldrh	r3, [r7, #2]
 800be8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be92:	2b01      	cmp	r3, #1
 800be94:	d00f      	beq.n	800beb6 <HAL_SPI_TransmitReceive+0x70>
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be9c:	d107      	bne.n	800beae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <HAL_SPI_TransmitReceive+0x68>
 800bea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d003      	beq.n	800beb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800beae:	2302      	movs	r3, #2
 800beb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800beb4:	e15b      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <HAL_SPI_TransmitReceive+0x82>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <HAL_SPI_TransmitReceive+0x82>
 800bec2:	887b      	ldrh	r3, [r7, #2]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bece:	e14e      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d003      	beq.n	800bee4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2205      	movs	r2, #5
 800bee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	887a      	ldrh	r2, [r7, #2]
 800bef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	887a      	ldrh	r2, [r7, #2]
 800befa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	887a      	ldrh	r2, [r7, #2]
 800bf06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	887a      	ldrh	r2, [r7, #2]
 800bf0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf24:	2b40      	cmp	r3, #64	; 0x40
 800bf26:	d007      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf40:	d178      	bne.n	800c034 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <HAL_SPI_TransmitReceive+0x10a>
 800bf4a:	8b7b      	ldrh	r3, [r7, #26]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d166      	bne.n	800c01e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf54:	881a      	ldrh	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf60:	1c9a      	adds	r2, r3, #2
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf74:	e053      	b.n	800c01e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f003 0302 	and.w	r3, r3, #2
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d11b      	bne.n	800bfbc <HAL_SPI_TransmitReceive+0x176>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d016      	beq.n	800bfbc <HAL_SPI_TransmitReceive+0x176>
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d113      	bne.n	800bfbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf98:	881a      	ldrh	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa4:	1c9a      	adds	r2, r3, #2
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d119      	bne.n	800bffe <HAL_SPI_TransmitReceive+0x1b8>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d014      	beq.n	800bffe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68da      	ldr	r2, [r3, #12]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfde:	b292      	uxth	r2, r2
 800bfe0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe6:	1c9a      	adds	r2, r3, #2
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	3b01      	subs	r3, #1
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bffa:	2301      	movs	r3, #1
 800bffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bffe:	f7fb f87b 	bl	80070f8 <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d807      	bhi.n	800c01e <HAL_SPI_TransmitReceive+0x1d8>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c014:	d003      	beq.n	800c01e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c016:	2303      	movs	r3, #3
 800c018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c01c:	e0a7      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c022:	b29b      	uxth	r3, r3
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1a6      	bne.n	800bf76 <HAL_SPI_TransmitReceive+0x130>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1a1      	bne.n	800bf76 <HAL_SPI_TransmitReceive+0x130>
 800c032:	e07c      	b.n	800c12e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <HAL_SPI_TransmitReceive+0x1fc>
 800c03c:	8b7b      	ldrh	r3, [r7, #26]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d16b      	bne.n	800c11a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	330c      	adds	r3, #12
 800c04c:	7812      	ldrb	r2, [r2, #0]
 800c04e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c05e:	b29b      	uxth	r3, r3
 800c060:	3b01      	subs	r3, #1
 800c062:	b29a      	uxth	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c068:	e057      	b.n	800c11a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b02      	cmp	r3, #2
 800c076:	d11c      	bne.n	800c0b2 <HAL_SPI_TransmitReceive+0x26c>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d017      	beq.n	800c0b2 <HAL_SPI_TransmitReceive+0x26c>
 800c082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c084:	2b01      	cmp	r3, #1
 800c086:	d114      	bne.n	800c0b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	330c      	adds	r3, #12
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d119      	bne.n	800c0f4 <HAL_SPI_TransmitReceive+0x2ae>
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d014      	beq.n	800c0f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	b2d2      	uxtb	r2, r2
 800c0d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c0f4:	f7fb f800 	bl	80070f8 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c100:	429a      	cmp	r2, r3
 800c102:	d803      	bhi.n	800c10c <HAL_SPI_TransmitReceive+0x2c6>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d102      	bne.n	800c112 <HAL_SPI_TransmitReceive+0x2cc>
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d103      	bne.n	800c11a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c118:	e029      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c11e:	b29b      	uxth	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1a2      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x224>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c128:	b29b      	uxth	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d19d      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 f8f8 	bl	800c328 <SPI_EndRxTxTransaction>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2220      	movs	r2, #32
 800c148:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c14a:	e010      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10b      	bne.n	800c16c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c154:	2300      	movs	r3, #0
 800c156:	617b      	str	r3, [r7, #20]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	e000      	b.n	800c16e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c16c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c17e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c182:	4618      	mov	r0, r3
 800c184:	3730      	adds	r7, #48	; 0x30
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	603b      	str	r3, [r7, #0]
 800c196:	4613      	mov	r3, r2
 800c198:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c19a:	e04c      	b.n	800c236 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a2:	d048      	beq.n	800c236 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c1a4:	f7fa ffa8 	bl	80070f8 <HAL_GetTick>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d902      	bls.n	800c1ba <SPI_WaitFlagStateUntilTimeout+0x30>
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d13d      	bne.n	800c236 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1d2:	d111      	bne.n	800c1f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1dc:	d004      	beq.n	800c1e8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1e6:	d107      	bne.n	800c1f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c200:	d10f      	bne.n	800c222 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e00f      	b.n	800c256 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689a      	ldr	r2, [r3, #8]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	4013      	ands	r3, r2
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	429a      	cmp	r2, r3
 800c244:	bf0c      	ite	eq
 800c246:	2301      	moveq	r3, #1
 800c248:	2300      	movne	r3, #0
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	461a      	mov	r2, r3
 800c24e:	79fb      	ldrb	r3, [r7, #7]
 800c250:	429a      	cmp	r2, r3
 800c252:	d1a3      	bne.n	800c19c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b086      	sub	sp, #24
 800c262:	af02      	add	r7, sp, #8
 800c264:	60f8      	str	r0, [r7, #12]
 800c266:	60b9      	str	r1, [r7, #8]
 800c268:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c272:	d111      	bne.n	800c298 <SPI_EndRxTransaction+0x3a>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c27c:	d004      	beq.n	800c288 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c286:	d107      	bne.n	800c298 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c296:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2a0:	d12a      	bne.n	800c2f8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2aa:	d012      	beq.n	800c2d2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2180      	movs	r1, #128	; 0x80
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff ff67 	bl	800c18a <SPI_WaitFlagStateUntilTimeout>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d02d      	beq.n	800c31e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c6:	f043 0220 	orr.w	r2, r3, #32
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e026      	b.n	800c320 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2101      	movs	r1, #1
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff ff54 	bl	800c18a <SPI_WaitFlagStateUntilTimeout>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01a      	beq.n	800c31e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ec:	f043 0220 	orr.w	r2, r3, #32
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e013      	b.n	800c320 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2200      	movs	r2, #0
 800c300:	2101      	movs	r1, #1
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7ff ff41 	bl	800c18a <SPI_WaitFlagStateUntilTimeout>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d007      	beq.n	800c31e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c312:	f043 0220 	orr.w	r2, r3, #32
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e000      	b.n	800c320 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af02      	add	r7, sp, #8
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c334:	4b1b      	ldr	r3, [pc, #108]	; (800c3a4 <SPI_EndRxTxTransaction+0x7c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a1b      	ldr	r2, [pc, #108]	; (800c3a8 <SPI_EndRxTxTransaction+0x80>)
 800c33a:	fba2 2303 	umull	r2, r3, r2, r3
 800c33e:	0d5b      	lsrs	r3, r3, #21
 800c340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c344:	fb02 f303 	mul.w	r3, r2, r3
 800c348:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c352:	d112      	bne.n	800c37a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2200      	movs	r2, #0
 800c35c:	2180      	movs	r1, #128	; 0x80
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff ff13 	bl	800c18a <SPI_WaitFlagStateUntilTimeout>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d016      	beq.n	800c398 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36e:	f043 0220 	orr.w	r2, r3, #32
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e00f      	b.n	800c39a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00a      	beq.n	800c396 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	3b01      	subs	r3, #1
 800c384:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c390:	2b80      	cmp	r3, #128	; 0x80
 800c392:	d0f2      	beq.n	800c37a <SPI_EndRxTxTransaction+0x52>
 800c394:	e000      	b.n	800c398 <SPI_EndRxTxTransaction+0x70>
        break;
 800c396:	bf00      	nop
  }

  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000000 	.word	0x20000000
 800c3a8:	165e9f81 	.word	0x165e9f81

0800c3ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e01d      	b.n	800c3fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7f8 ffce 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f000 fb56 	bl	800ca9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c402:	b480      	push	{r7}
 800c404:	b085      	sub	sp, #20
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f042 0201 	orr.w	r2, r2, #1
 800c418:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	f003 0307 	and.w	r3, r3, #7
 800c424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b06      	cmp	r3, #6
 800c42a:	d007      	beq.n	800c43c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f042 0201 	orr.w	r2, r2, #1
 800c43a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e01d      	b.n	800c498 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f7f8 ff0b 	bl	800528c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2202      	movs	r2, #2
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f000 fb07 	bl	800ca9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fd42 	bl	800cf3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a15      	ldr	r2, [pc, #84]	; (800c514 <HAL_TIM_PWM_Start+0x74>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_TIM_PWM_Start+0x2c>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a14      	ldr	r2, [pc, #80]	; (800c518 <HAL_TIM_PWM_Start+0x78>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d101      	bne.n	800c4d0 <HAL_TIM_PWM_Start+0x30>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e000      	b.n	800c4d2 <HAL_TIM_PWM_Start+0x32>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b06      	cmp	r3, #6
 800c4f6:	d007      	beq.n	800c508 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f042 0201 	orr.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	40010000 	.word	0x40010000
 800c518:	40010400 	.word	0x40010400

0800c51c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e083      	b.n	800c638 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d106      	bne.n	800c54a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7f8 ffa5 	bl	8005494 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2202      	movs	r2, #2
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	6812      	ldr	r2, [r2, #0]
 800c55c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c560:	f023 0307 	bic.w	r3, r3, #7
 800c564:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4619      	mov	r1, r3
 800c570:	4610      	mov	r0, r2
 800c572:	f000 fa93 	bl	800ca9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	4313      	orrs	r3, r2
 800c596:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c59e:	f023 0303 	bic.w	r3, r3, #3
 800c5a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	021b      	lsls	r3, r3, #8
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c5bc:	f023 030c 	bic.w	r3, r3, #12
 800c5c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	69db      	ldr	r3, [r3, #28]
 800c5d6:	021b      	lsls	r3, r3, #8
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	691b      	ldr	r3, [r3, #16]
 800c5e4:	011a      	lsls	r2, r3, #4
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	031b      	lsls	r3, r3, #12
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c5fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c602:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	4313      	orrs	r3, r2
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	4313      	orrs	r3, r2
 800c614:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <HAL_TIM_Encoder_Start+0x16>
 800c650:	2b04      	cmp	r3, #4
 800c652:	d008      	beq.n	800c666 <HAL_TIM_Encoder_Start+0x26>
 800c654:	e00f      	b.n	800c676 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2201      	movs	r2, #1
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fc6c 	bl	800cf3c <TIM_CCxChannelCmd>
      break;
 800c664:	e016      	b.n	800c694 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2201      	movs	r2, #1
 800c66c:	2104      	movs	r1, #4
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fc64 	bl	800cf3c <TIM_CCxChannelCmd>
      break;
 800c674:	e00e      	b.n	800c694 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2201      	movs	r2, #1
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 fc5c 	bl	800cf3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2201      	movs	r2, #1
 800c68a:	2104      	movs	r1, #4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fc55 	bl	800cf3c <TIM_CCxChannelCmd>
      break;
 800c692:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f042 0201 	orr.w	r2, r2, #1
 800c6a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f003 0302 	and.w	r3, r3, #2
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d122      	bne.n	800c70a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d11b      	bne.n	800c70a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f06f 0202 	mvn.w	r2, #2
 800c6da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f9b5 	bl	800ca60 <HAL_TIM_IC_CaptureCallback>
 800c6f6:	e005      	b.n	800c704 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f9a7 	bl	800ca4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f9b8 	bl	800ca74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	f003 0304 	and.w	r3, r3, #4
 800c714:	2b04      	cmp	r3, #4
 800c716:	d122      	bne.n	800c75e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f003 0304 	and.w	r3, r3, #4
 800c722:	2b04      	cmp	r3, #4
 800c724:	d11b      	bne.n	800c75e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f06f 0204 	mvn.w	r2, #4
 800c72e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f98b 	bl	800ca60 <HAL_TIM_IC_CaptureCallback>
 800c74a:	e005      	b.n	800c758 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f97d 	bl	800ca4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f98e 	bl	800ca74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	f003 0308 	and.w	r3, r3, #8
 800c768:	2b08      	cmp	r3, #8
 800c76a:	d122      	bne.n	800c7b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	f003 0308 	and.w	r3, r3, #8
 800c776:	2b08      	cmp	r3, #8
 800c778:	d11b      	bne.n	800c7b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f06f 0208 	mvn.w	r2, #8
 800c782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2204      	movs	r2, #4
 800c788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	f003 0303 	and.w	r3, r3, #3
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f961 	bl	800ca60 <HAL_TIM_IC_CaptureCallback>
 800c79e:	e005      	b.n	800c7ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f953 	bl	800ca4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f964 	bl	800ca74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	f003 0310 	and.w	r3, r3, #16
 800c7bc:	2b10      	cmp	r3, #16
 800c7be:	d122      	bne.n	800c806 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	f003 0310 	and.w	r3, r3, #16
 800c7ca:	2b10      	cmp	r3, #16
 800c7cc:	d11b      	bne.n	800c806 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f06f 0210 	mvn.w	r2, #16
 800c7d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2208      	movs	r2, #8
 800c7dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	69db      	ldr	r3, [r3, #28]
 800c7e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f937 	bl	800ca60 <HAL_TIM_IC_CaptureCallback>
 800c7f2:	e005      	b.n	800c800 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f929 	bl	800ca4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f93a 	bl	800ca74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	2b01      	cmp	r3, #1
 800c812:	d10e      	bne.n	800c832 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d107      	bne.n	800c832 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f06f 0201 	mvn.w	r2, #1
 800c82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7f7 fb07 	bl	8003e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83c:	2b80      	cmp	r3, #128	; 0x80
 800c83e:	d10e      	bne.n	800c85e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84a:	2b80      	cmp	r3, #128	; 0x80
 800c84c:	d107      	bne.n	800c85e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fc6d 	bl	800d138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d10e      	bne.n	800c88a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c876:	2b40      	cmp	r3, #64	; 0x40
 800c878:	d107      	bne.n	800c88a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f8ff 	bl	800ca88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	f003 0320 	and.w	r3, r3, #32
 800c894:	2b20      	cmp	r3, #32
 800c896:	d10e      	bne.n	800c8b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b20      	cmp	r3, #32
 800c8a4:	d107      	bne.n	800c8b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f06f 0220 	mvn.w	r2, #32
 800c8ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fc37 	bl	800d124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d101      	bne.n	800c8da <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e0b4      	b.n	800ca44 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b0c      	cmp	r3, #12
 800c8ee:	f200 809f 	bhi.w	800ca30 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c92d 	.word	0x0800c92d
 800c8fc:	0800ca31 	.word	0x0800ca31
 800c900:	0800ca31 	.word	0x0800ca31
 800c904:	0800ca31 	.word	0x0800ca31
 800c908:	0800c96d 	.word	0x0800c96d
 800c90c:	0800ca31 	.word	0x0800ca31
 800c910:	0800ca31 	.word	0x0800ca31
 800c914:	0800ca31 	.word	0x0800ca31
 800c918:	0800c9af 	.word	0x0800c9af
 800c91c:	0800ca31 	.word	0x0800ca31
 800c920:	0800ca31 	.word	0x0800ca31
 800c924:	0800ca31 	.word	0x0800ca31
 800c928:	0800c9ef 	.word	0x0800c9ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f952 	bl	800cbdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0208 	orr.w	r2, r2, #8
 800c946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	699a      	ldr	r2, [r3, #24]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f022 0204 	bic.w	r2, r2, #4
 800c956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6999      	ldr	r1, [r3, #24]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	691a      	ldr	r2, [r3, #16]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	430a      	orrs	r2, r1
 800c968:	619a      	str	r2, [r3, #24]
      break;
 800c96a:	e062      	b.n	800ca32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68b9      	ldr	r1, [r7, #8]
 800c972:	4618      	mov	r0, r3
 800c974:	f000 f9a2 	bl	800ccbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6999      	ldr	r1, [r3, #24]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	021a      	lsls	r2, r3, #8
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	430a      	orrs	r2, r1
 800c9aa:	619a      	str	r2, [r3, #24]
      break;
 800c9ac:	e041      	b.n	800ca32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68b9      	ldr	r1, [r7, #8]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 f9f7 	bl	800cda8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f042 0208 	orr.w	r2, r2, #8
 800c9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69da      	ldr	r2, [r3, #28]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0204 	bic.w	r2, r2, #4
 800c9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69d9      	ldr	r1, [r3, #28]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	691a      	ldr	r2, [r3, #16]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	61da      	str	r2, [r3, #28]
      break;
 800c9ec:	e021      	b.n	800ca32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fa4b 	bl	800ce90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	69da      	ldr	r2, [r3, #28]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	69d9      	ldr	r1, [r3, #28]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	021a      	lsls	r2, r3, #8
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	61da      	str	r2, [r3, #28]
      break;
 800ca2e:	e000      	b.n	800ca32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ca30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a40      	ldr	r2, [pc, #256]	; (800cbb0 <TIM_Base_SetConfig+0x114>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d013      	beq.n	800cadc <TIM_Base_SetConfig+0x40>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caba:	d00f      	beq.n	800cadc <TIM_Base_SetConfig+0x40>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a3d      	ldr	r2, [pc, #244]	; (800cbb4 <TIM_Base_SetConfig+0x118>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d00b      	beq.n	800cadc <TIM_Base_SetConfig+0x40>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a3c      	ldr	r2, [pc, #240]	; (800cbb8 <TIM_Base_SetConfig+0x11c>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d007      	beq.n	800cadc <TIM_Base_SetConfig+0x40>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a3b      	ldr	r2, [pc, #236]	; (800cbbc <TIM_Base_SetConfig+0x120>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d003      	beq.n	800cadc <TIM_Base_SetConfig+0x40>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a3a      	ldr	r2, [pc, #232]	; (800cbc0 <TIM_Base_SetConfig+0x124>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d108      	bne.n	800caee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4313      	orrs	r3, r2
 800caec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a2f      	ldr	r2, [pc, #188]	; (800cbb0 <TIM_Base_SetConfig+0x114>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d02b      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cafc:	d027      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a2c      	ldr	r2, [pc, #176]	; (800cbb4 <TIM_Base_SetConfig+0x118>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d023      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a2b      	ldr	r2, [pc, #172]	; (800cbb8 <TIM_Base_SetConfig+0x11c>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d01f      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a2a      	ldr	r2, [pc, #168]	; (800cbbc <TIM_Base_SetConfig+0x120>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d01b      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a29      	ldr	r2, [pc, #164]	; (800cbc0 <TIM_Base_SetConfig+0x124>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d017      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a28      	ldr	r2, [pc, #160]	; (800cbc4 <TIM_Base_SetConfig+0x128>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d013      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a27      	ldr	r2, [pc, #156]	; (800cbc8 <TIM_Base_SetConfig+0x12c>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d00f      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a26      	ldr	r2, [pc, #152]	; (800cbcc <TIM_Base_SetConfig+0x130>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d00b      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a25      	ldr	r2, [pc, #148]	; (800cbd0 <TIM_Base_SetConfig+0x134>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d007      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a24      	ldr	r2, [pc, #144]	; (800cbd4 <TIM_Base_SetConfig+0x138>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d003      	beq.n	800cb4e <TIM_Base_SetConfig+0xb2>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a23      	ldr	r2, [pc, #140]	; (800cbd8 <TIM_Base_SetConfig+0x13c>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d108      	bne.n	800cb60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <TIM_Base_SetConfig+0x114>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d003      	beq.n	800cb94 <TIM_Base_SetConfig+0xf8>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a0c      	ldr	r2, [pc, #48]	; (800cbc0 <TIM_Base_SetConfig+0x124>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d103      	bne.n	800cb9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	691a      	ldr	r2, [r3, #16]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	615a      	str	r2, [r3, #20]
}
 800cba2:	bf00      	nop
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	40010000 	.word	0x40010000
 800cbb4:	40000400 	.word	0x40000400
 800cbb8:	40000800 	.word	0x40000800
 800cbbc:	40000c00 	.word	0x40000c00
 800cbc0:	40010400 	.word	0x40010400
 800cbc4:	40014000 	.word	0x40014000
 800cbc8:	40014400 	.word	0x40014400
 800cbcc:	40014800 	.word	0x40014800
 800cbd0:	40001800 	.word	0x40001800
 800cbd4:	40001c00 	.word	0x40001c00
 800cbd8:	40002000 	.word	0x40002000

0800cbdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	f023 0201 	bic.w	r2, r3, #1
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f023 0303 	bic.w	r3, r3, #3
 800cc12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f023 0302 	bic.w	r3, r3, #2
 800cc24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a20      	ldr	r2, [pc, #128]	; (800ccb4 <TIM_OC1_SetConfig+0xd8>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d003      	beq.n	800cc40 <TIM_OC1_SetConfig+0x64>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a1f      	ldr	r2, [pc, #124]	; (800ccb8 <TIM_OC1_SetConfig+0xdc>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d10c      	bne.n	800cc5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f023 0308 	bic.w	r3, r3, #8
 800cc46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f023 0304 	bic.w	r3, r3, #4
 800cc58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a15      	ldr	r2, [pc, #84]	; (800ccb4 <TIM_OC1_SetConfig+0xd8>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d003      	beq.n	800cc6a <TIM_OC1_SetConfig+0x8e>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a14      	ldr	r2, [pc, #80]	; (800ccb8 <TIM_OC1_SetConfig+0xdc>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d111      	bne.n	800cc8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	621a      	str	r2, [r3, #32]
}
 800cca8:	bf00      	nop
 800ccaa:	371c      	adds	r7, #28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	40010000 	.word	0x40010000
 800ccb8:	40010400 	.word	0x40010400

0800ccbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	f023 0210 	bic.w	r2, r3, #16
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	021b      	lsls	r3, r3, #8
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f023 0320 	bic.w	r3, r3, #32
 800cd06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a22      	ldr	r2, [pc, #136]	; (800cda0 <TIM_OC2_SetConfig+0xe4>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d003      	beq.n	800cd24 <TIM_OC2_SetConfig+0x68>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a21      	ldr	r2, [pc, #132]	; (800cda4 <TIM_OC2_SetConfig+0xe8>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d10d      	bne.n	800cd40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	011b      	lsls	r3, r3, #4
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a17      	ldr	r2, [pc, #92]	; (800cda0 <TIM_OC2_SetConfig+0xe4>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d003      	beq.n	800cd50 <TIM_OC2_SetConfig+0x94>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a16      	ldr	r2, [pc, #88]	; (800cda4 <TIM_OC2_SetConfig+0xe8>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d113      	bne.n	800cd78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	621a      	str	r2, [r3, #32]
}
 800cd92:	bf00      	nop
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	40010000 	.word	0x40010000
 800cda4:	40010400 	.word	0x40010400

0800cda8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a21      	ldr	r2, [pc, #132]	; (800ce88 <TIM_OC3_SetConfig+0xe0>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d003      	beq.n	800ce0e <TIM_OC3_SetConfig+0x66>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4a20      	ldr	r2, [pc, #128]	; (800ce8c <TIM_OC3_SetConfig+0xe4>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d10d      	bne.n	800ce2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	021b      	lsls	r3, r3, #8
 800ce1c:	697a      	ldr	r2, [r7, #20]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4a16      	ldr	r2, [pc, #88]	; (800ce88 <TIM_OC3_SetConfig+0xe0>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d003      	beq.n	800ce3a <TIM_OC3_SetConfig+0x92>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4a15      	ldr	r2, [pc, #84]	; (800ce8c <TIM_OC3_SetConfig+0xe4>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d113      	bne.n	800ce62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	695b      	ldr	r3, [r3, #20]
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	693a      	ldr	r2, [r7, #16]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	011b      	lsls	r3, r3, #4
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	697a      	ldr	r2, [r7, #20]
 800ce7a:	621a      	str	r2, [r3, #32]
}
 800ce7c:	bf00      	nop
 800ce7e:	371c      	adds	r7, #28
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	40010000 	.word	0x40010000
 800ce8c:	40010400 	.word	0x40010400

0800ce90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	021b      	lsls	r3, r3, #8
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ceda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	031b      	lsls	r3, r3, #12
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a12      	ldr	r2, [pc, #72]	; (800cf34 <TIM_OC4_SetConfig+0xa4>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d003      	beq.n	800cef8 <TIM_OC4_SetConfig+0x68>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a11      	ldr	r2, [pc, #68]	; (800cf38 <TIM_OC4_SetConfig+0xa8>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d109      	bne.n	800cf0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cefe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	019b      	lsls	r3, r3, #6
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	621a      	str	r2, [r3, #32]
}
 800cf26:	bf00      	nop
 800cf28:	371c      	adds	r7, #28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	40010000 	.word	0x40010000
 800cf38:	40010400 	.word	0x40010400

0800cf3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f003 031f 	and.w	r3, r3, #31
 800cf4e:	2201      	movs	r2, #1
 800cf50:	fa02 f303 	lsl.w	r3, r2, r3
 800cf54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a1a      	ldr	r2, [r3, #32]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	43db      	mvns	r3, r3
 800cf5e:	401a      	ands	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6a1a      	ldr	r2, [r3, #32]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	f003 031f 	and.w	r3, r3, #31
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	fa01 f303 	lsl.w	r3, r1, r3
 800cf74:	431a      	orrs	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	621a      	str	r2, [r3, #32]
}
 800cf7a:	bf00      	nop
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
	...

0800cf88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d101      	bne.n	800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	e05a      	b.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2202      	movs	r2, #2
 800cfac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a21      	ldr	r2, [pc, #132]	; (800d064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d022      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfec:	d01d      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a1d      	ldr	r2, [pc, #116]	; (800d068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d018      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a1b      	ldr	r2, [pc, #108]	; (800d06c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d013      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a1a      	ldr	r2, [pc, #104]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d00e      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a18      	ldr	r2, [pc, #96]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d009      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a17      	ldr	r2, [pc, #92]	; (800d078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d004      	beq.n	800d02a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a15      	ldr	r2, [pc, #84]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d10c      	bne.n	800d044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	4313      	orrs	r3, r2
 800d03a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	40010000 	.word	0x40010000
 800d068:	40000400 	.word	0x40000400
 800d06c:	40000800 	.word	0x40000800
 800d070:	40000c00 	.word	0x40000c00
 800d074:	40010400 	.word	0x40010400
 800d078:	40014000 	.word	0x40014000
 800d07c:	40001800 	.word	0x40001800

0800d080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d094:	2b01      	cmp	r3, #1
 800d096:	d101      	bne.n	800d09c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d098:	2302      	movs	r3, #2
 800d09a:	e03d      	b.n	800d118 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	69db      	ldr	r3, [r3, #28]
 800d102:	4313      	orrs	r3, r2
 800d104:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e03f      	b.n	800d1de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7f8 fab8 	bl	80056e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2224      	movs	r2, #36	; 0x24
 800d17c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68da      	ldr	r2, [r3, #12]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d18e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f829 	bl	800d1e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	691a      	ldr	r2, [r3, #16]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	695a      	ldr	r2, [r3, #20]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68da      	ldr	r2, [r3, #12]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2220      	movs	r2, #32
 800d1d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2220      	movs	r2, #32
 800d1d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
	...

0800d1e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68da      	ldr	r2, [r3, #12]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	430a      	orrs	r2, r1
 800d206:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	689a      	ldr	r2, [r3, #8]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	431a      	orrs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	69db      	ldr	r3, [r3, #28]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d22a:	f023 030c 	bic.w	r3, r3, #12
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	430b      	orrs	r3, r1
 800d236:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	699a      	ldr	r2, [r3, #24]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d256:	f040 818b 	bne.w	800d570 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4ac1      	ldr	r2, [pc, #772]	; (800d564 <UART_SetConfig+0x37c>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d005      	beq.n	800d270 <UART_SetConfig+0x88>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4abf      	ldr	r2, [pc, #764]	; (800d568 <UART_SetConfig+0x380>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	f040 80bd 	bne.w	800d3ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d270:	f7fc fbcc 	bl	8009a0c <HAL_RCC_GetPCLK2Freq>
 800d274:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	461d      	mov	r5, r3
 800d27a:	f04f 0600 	mov.w	r6, #0
 800d27e:	46a8      	mov	r8, r5
 800d280:	46b1      	mov	r9, r6
 800d282:	eb18 0308 	adds.w	r3, r8, r8
 800d286:	eb49 0409 	adc.w	r4, r9, r9
 800d28a:	4698      	mov	r8, r3
 800d28c:	46a1      	mov	r9, r4
 800d28e:	eb18 0805 	adds.w	r8, r8, r5
 800d292:	eb49 0906 	adc.w	r9, r9, r6
 800d296:	f04f 0100 	mov.w	r1, #0
 800d29a:	f04f 0200 	mov.w	r2, #0
 800d29e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d2a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d2a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d2aa:	4688      	mov	r8, r1
 800d2ac:	4691      	mov	r9, r2
 800d2ae:	eb18 0005 	adds.w	r0, r8, r5
 800d2b2:	eb49 0106 	adc.w	r1, r9, r6
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	461d      	mov	r5, r3
 800d2bc:	f04f 0600 	mov.w	r6, #0
 800d2c0:	196b      	adds	r3, r5, r5
 800d2c2:	eb46 0406 	adc.w	r4, r6, r6
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	f7f3 fcf5 	bl	8000cb8 <__aeabi_uldivmod>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4ba5      	ldr	r3, [pc, #660]	; (800d56c <UART_SetConfig+0x384>)
 800d2d6:	fba3 2302 	umull	r2, r3, r3, r2
 800d2da:	095b      	lsrs	r3, r3, #5
 800d2dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	461d      	mov	r5, r3
 800d2e4:	f04f 0600 	mov.w	r6, #0
 800d2e8:	46a9      	mov	r9, r5
 800d2ea:	46b2      	mov	sl, r6
 800d2ec:	eb19 0309 	adds.w	r3, r9, r9
 800d2f0:	eb4a 040a 	adc.w	r4, sl, sl
 800d2f4:	4699      	mov	r9, r3
 800d2f6:	46a2      	mov	sl, r4
 800d2f8:	eb19 0905 	adds.w	r9, r9, r5
 800d2fc:	eb4a 0a06 	adc.w	sl, sl, r6
 800d300:	f04f 0100 	mov.w	r1, #0
 800d304:	f04f 0200 	mov.w	r2, #0
 800d308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d30c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d314:	4689      	mov	r9, r1
 800d316:	4692      	mov	sl, r2
 800d318:	eb19 0005 	adds.w	r0, r9, r5
 800d31c:	eb4a 0106 	adc.w	r1, sl, r6
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	461d      	mov	r5, r3
 800d326:	f04f 0600 	mov.w	r6, #0
 800d32a:	196b      	adds	r3, r5, r5
 800d32c:	eb46 0406 	adc.w	r4, r6, r6
 800d330:	461a      	mov	r2, r3
 800d332:	4623      	mov	r3, r4
 800d334:	f7f3 fcc0 	bl	8000cb8 <__aeabi_uldivmod>
 800d338:	4603      	mov	r3, r0
 800d33a:	460c      	mov	r4, r1
 800d33c:	461a      	mov	r2, r3
 800d33e:	4b8b      	ldr	r3, [pc, #556]	; (800d56c <UART_SetConfig+0x384>)
 800d340:	fba3 1302 	umull	r1, r3, r3, r2
 800d344:	095b      	lsrs	r3, r3, #5
 800d346:	2164      	movs	r1, #100	; 0x64
 800d348:	fb01 f303 	mul.w	r3, r1, r3
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	3332      	adds	r3, #50	; 0x32
 800d352:	4a86      	ldr	r2, [pc, #536]	; (800d56c <UART_SetConfig+0x384>)
 800d354:	fba2 2303 	umull	r2, r3, r2, r3
 800d358:	095b      	lsrs	r3, r3, #5
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d360:	4498      	add	r8, r3
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	461d      	mov	r5, r3
 800d366:	f04f 0600 	mov.w	r6, #0
 800d36a:	46a9      	mov	r9, r5
 800d36c:	46b2      	mov	sl, r6
 800d36e:	eb19 0309 	adds.w	r3, r9, r9
 800d372:	eb4a 040a 	adc.w	r4, sl, sl
 800d376:	4699      	mov	r9, r3
 800d378:	46a2      	mov	sl, r4
 800d37a:	eb19 0905 	adds.w	r9, r9, r5
 800d37e:	eb4a 0a06 	adc.w	sl, sl, r6
 800d382:	f04f 0100 	mov.w	r1, #0
 800d386:	f04f 0200 	mov.w	r2, #0
 800d38a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d38e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d392:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d396:	4689      	mov	r9, r1
 800d398:	4692      	mov	sl, r2
 800d39a:	eb19 0005 	adds.w	r0, r9, r5
 800d39e:	eb4a 0106 	adc.w	r1, sl, r6
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	461d      	mov	r5, r3
 800d3a8:	f04f 0600 	mov.w	r6, #0
 800d3ac:	196b      	adds	r3, r5, r5
 800d3ae:	eb46 0406 	adc.w	r4, r6, r6
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	4623      	mov	r3, r4
 800d3b6:	f7f3 fc7f 	bl	8000cb8 <__aeabi_uldivmod>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	460c      	mov	r4, r1
 800d3be:	461a      	mov	r2, r3
 800d3c0:	4b6a      	ldr	r3, [pc, #424]	; (800d56c <UART_SetConfig+0x384>)
 800d3c2:	fba3 1302 	umull	r1, r3, r3, r2
 800d3c6:	095b      	lsrs	r3, r3, #5
 800d3c8:	2164      	movs	r1, #100	; 0x64
 800d3ca:	fb01 f303 	mul.w	r3, r1, r3
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	3332      	adds	r3, #50	; 0x32
 800d3d4:	4a65      	ldr	r2, [pc, #404]	; (800d56c <UART_SetConfig+0x384>)
 800d3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3da:	095b      	lsrs	r3, r3, #5
 800d3dc:	f003 0207 	and.w	r2, r3, #7
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4442      	add	r2, r8
 800d3e6:	609a      	str	r2, [r3, #8]
 800d3e8:	e26f      	b.n	800d8ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d3ea:	f7fc fafb 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 800d3ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	461d      	mov	r5, r3
 800d3f4:	f04f 0600 	mov.w	r6, #0
 800d3f8:	46a8      	mov	r8, r5
 800d3fa:	46b1      	mov	r9, r6
 800d3fc:	eb18 0308 	adds.w	r3, r8, r8
 800d400:	eb49 0409 	adc.w	r4, r9, r9
 800d404:	4698      	mov	r8, r3
 800d406:	46a1      	mov	r9, r4
 800d408:	eb18 0805 	adds.w	r8, r8, r5
 800d40c:	eb49 0906 	adc.w	r9, r9, r6
 800d410:	f04f 0100 	mov.w	r1, #0
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d41c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d420:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d424:	4688      	mov	r8, r1
 800d426:	4691      	mov	r9, r2
 800d428:	eb18 0005 	adds.w	r0, r8, r5
 800d42c:	eb49 0106 	adc.w	r1, r9, r6
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	461d      	mov	r5, r3
 800d436:	f04f 0600 	mov.w	r6, #0
 800d43a:	196b      	adds	r3, r5, r5
 800d43c:	eb46 0406 	adc.w	r4, r6, r6
 800d440:	461a      	mov	r2, r3
 800d442:	4623      	mov	r3, r4
 800d444:	f7f3 fc38 	bl	8000cb8 <__aeabi_uldivmod>
 800d448:	4603      	mov	r3, r0
 800d44a:	460c      	mov	r4, r1
 800d44c:	461a      	mov	r2, r3
 800d44e:	4b47      	ldr	r3, [pc, #284]	; (800d56c <UART_SetConfig+0x384>)
 800d450:	fba3 2302 	umull	r2, r3, r3, r2
 800d454:	095b      	lsrs	r3, r3, #5
 800d456:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	461d      	mov	r5, r3
 800d45e:	f04f 0600 	mov.w	r6, #0
 800d462:	46a9      	mov	r9, r5
 800d464:	46b2      	mov	sl, r6
 800d466:	eb19 0309 	adds.w	r3, r9, r9
 800d46a:	eb4a 040a 	adc.w	r4, sl, sl
 800d46e:	4699      	mov	r9, r3
 800d470:	46a2      	mov	sl, r4
 800d472:	eb19 0905 	adds.w	r9, r9, r5
 800d476:	eb4a 0a06 	adc.w	sl, sl, r6
 800d47a:	f04f 0100 	mov.w	r1, #0
 800d47e:	f04f 0200 	mov.w	r2, #0
 800d482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d48a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d48e:	4689      	mov	r9, r1
 800d490:	4692      	mov	sl, r2
 800d492:	eb19 0005 	adds.w	r0, r9, r5
 800d496:	eb4a 0106 	adc.w	r1, sl, r6
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	461d      	mov	r5, r3
 800d4a0:	f04f 0600 	mov.w	r6, #0
 800d4a4:	196b      	adds	r3, r5, r5
 800d4a6:	eb46 0406 	adc.w	r4, r6, r6
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4623      	mov	r3, r4
 800d4ae:	f7f3 fc03 	bl	8000cb8 <__aeabi_uldivmod>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	460c      	mov	r4, r1
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	4b2c      	ldr	r3, [pc, #176]	; (800d56c <UART_SetConfig+0x384>)
 800d4ba:	fba3 1302 	umull	r1, r3, r3, r2
 800d4be:	095b      	lsrs	r3, r3, #5
 800d4c0:	2164      	movs	r1, #100	; 0x64
 800d4c2:	fb01 f303 	mul.w	r3, r1, r3
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	3332      	adds	r3, #50	; 0x32
 800d4cc:	4a27      	ldr	r2, [pc, #156]	; (800d56c <UART_SetConfig+0x384>)
 800d4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d2:	095b      	lsrs	r3, r3, #5
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d4da:	4498      	add	r8, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	461d      	mov	r5, r3
 800d4e0:	f04f 0600 	mov.w	r6, #0
 800d4e4:	46a9      	mov	r9, r5
 800d4e6:	46b2      	mov	sl, r6
 800d4e8:	eb19 0309 	adds.w	r3, r9, r9
 800d4ec:	eb4a 040a 	adc.w	r4, sl, sl
 800d4f0:	4699      	mov	r9, r3
 800d4f2:	46a2      	mov	sl, r4
 800d4f4:	eb19 0905 	adds.w	r9, r9, r5
 800d4f8:	eb4a 0a06 	adc.w	sl, sl, r6
 800d4fc:	f04f 0100 	mov.w	r1, #0
 800d500:	f04f 0200 	mov.w	r2, #0
 800d504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d508:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d50c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d510:	4689      	mov	r9, r1
 800d512:	4692      	mov	sl, r2
 800d514:	eb19 0005 	adds.w	r0, r9, r5
 800d518:	eb4a 0106 	adc.w	r1, sl, r6
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	461d      	mov	r5, r3
 800d522:	f04f 0600 	mov.w	r6, #0
 800d526:	196b      	adds	r3, r5, r5
 800d528:	eb46 0406 	adc.w	r4, r6, r6
 800d52c:	461a      	mov	r2, r3
 800d52e:	4623      	mov	r3, r4
 800d530:	f7f3 fbc2 	bl	8000cb8 <__aeabi_uldivmod>
 800d534:	4603      	mov	r3, r0
 800d536:	460c      	mov	r4, r1
 800d538:	461a      	mov	r2, r3
 800d53a:	4b0c      	ldr	r3, [pc, #48]	; (800d56c <UART_SetConfig+0x384>)
 800d53c:	fba3 1302 	umull	r1, r3, r3, r2
 800d540:	095b      	lsrs	r3, r3, #5
 800d542:	2164      	movs	r1, #100	; 0x64
 800d544:	fb01 f303 	mul.w	r3, r1, r3
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	3332      	adds	r3, #50	; 0x32
 800d54e:	4a07      	ldr	r2, [pc, #28]	; (800d56c <UART_SetConfig+0x384>)
 800d550:	fba2 2303 	umull	r2, r3, r2, r3
 800d554:	095b      	lsrs	r3, r3, #5
 800d556:	f003 0207 	and.w	r2, r3, #7
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4442      	add	r2, r8
 800d560:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d562:	e1b2      	b.n	800d8ca <UART_SetConfig+0x6e2>
 800d564:	40011000 	.word	0x40011000
 800d568:	40011400 	.word	0x40011400
 800d56c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4ad7      	ldr	r2, [pc, #860]	; (800d8d4 <UART_SetConfig+0x6ec>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d005      	beq.n	800d586 <UART_SetConfig+0x39e>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4ad6      	ldr	r2, [pc, #856]	; (800d8d8 <UART_SetConfig+0x6f0>)
 800d580:	4293      	cmp	r3, r2
 800d582:	f040 80d1 	bne.w	800d728 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d586:	f7fc fa41 	bl	8009a0c <HAL_RCC_GetPCLK2Freq>
 800d58a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	469a      	mov	sl, r3
 800d590:	f04f 0b00 	mov.w	fp, #0
 800d594:	46d0      	mov	r8, sl
 800d596:	46d9      	mov	r9, fp
 800d598:	eb18 0308 	adds.w	r3, r8, r8
 800d59c:	eb49 0409 	adc.w	r4, r9, r9
 800d5a0:	4698      	mov	r8, r3
 800d5a2:	46a1      	mov	r9, r4
 800d5a4:	eb18 080a 	adds.w	r8, r8, sl
 800d5a8:	eb49 090b 	adc.w	r9, r9, fp
 800d5ac:	f04f 0100 	mov.w	r1, #0
 800d5b0:	f04f 0200 	mov.w	r2, #0
 800d5b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d5b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d5bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d5c0:	4688      	mov	r8, r1
 800d5c2:	4691      	mov	r9, r2
 800d5c4:	eb1a 0508 	adds.w	r5, sl, r8
 800d5c8:	eb4b 0609 	adc.w	r6, fp, r9
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	f04f 0300 	mov.w	r3, #0
 800d5da:	f04f 0400 	mov.w	r4, #0
 800d5de:	0094      	lsls	r4, r2, #2
 800d5e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5e4:	008b      	lsls	r3, r1, #2
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4623      	mov	r3, r4
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	f7f3 fb63 	bl	8000cb8 <__aeabi_uldivmod>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	4bb8      	ldr	r3, [pc, #736]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d5fa:	fba3 2302 	umull	r2, r3, r3, r2
 800d5fe:	095b      	lsrs	r3, r3, #5
 800d600:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	469b      	mov	fp, r3
 800d608:	f04f 0c00 	mov.w	ip, #0
 800d60c:	46d9      	mov	r9, fp
 800d60e:	46e2      	mov	sl, ip
 800d610:	eb19 0309 	adds.w	r3, r9, r9
 800d614:	eb4a 040a 	adc.w	r4, sl, sl
 800d618:	4699      	mov	r9, r3
 800d61a:	46a2      	mov	sl, r4
 800d61c:	eb19 090b 	adds.w	r9, r9, fp
 800d620:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d624:	f04f 0100 	mov.w	r1, #0
 800d628:	f04f 0200 	mov.w	r2, #0
 800d62c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d630:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d634:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d638:	4689      	mov	r9, r1
 800d63a:	4692      	mov	sl, r2
 800d63c:	eb1b 0509 	adds.w	r5, fp, r9
 800d640:	eb4c 060a 	adc.w	r6, ip, sl
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4619      	mov	r1, r3
 800d64a:	f04f 0200 	mov.w	r2, #0
 800d64e:	f04f 0300 	mov.w	r3, #0
 800d652:	f04f 0400 	mov.w	r4, #0
 800d656:	0094      	lsls	r4, r2, #2
 800d658:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d65c:	008b      	lsls	r3, r1, #2
 800d65e:	461a      	mov	r2, r3
 800d660:	4623      	mov	r3, r4
 800d662:	4628      	mov	r0, r5
 800d664:	4631      	mov	r1, r6
 800d666:	f7f3 fb27 	bl	8000cb8 <__aeabi_uldivmod>
 800d66a:	4603      	mov	r3, r0
 800d66c:	460c      	mov	r4, r1
 800d66e:	461a      	mov	r2, r3
 800d670:	4b9a      	ldr	r3, [pc, #616]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d672:	fba3 1302 	umull	r1, r3, r3, r2
 800d676:	095b      	lsrs	r3, r3, #5
 800d678:	2164      	movs	r1, #100	; 0x64
 800d67a:	fb01 f303 	mul.w	r3, r1, r3
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	3332      	adds	r3, #50	; 0x32
 800d684:	4a95      	ldr	r2, [pc, #596]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d686:	fba2 2303 	umull	r2, r3, r2, r3
 800d68a:	095b      	lsrs	r3, r3, #5
 800d68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d690:	4498      	add	r8, r3
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	469b      	mov	fp, r3
 800d696:	f04f 0c00 	mov.w	ip, #0
 800d69a:	46d9      	mov	r9, fp
 800d69c:	46e2      	mov	sl, ip
 800d69e:	eb19 0309 	adds.w	r3, r9, r9
 800d6a2:	eb4a 040a 	adc.w	r4, sl, sl
 800d6a6:	4699      	mov	r9, r3
 800d6a8:	46a2      	mov	sl, r4
 800d6aa:	eb19 090b 	adds.w	r9, r9, fp
 800d6ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d6b2:	f04f 0100 	mov.w	r1, #0
 800d6b6:	f04f 0200 	mov.w	r2, #0
 800d6ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d6be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d6c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6c6:	4689      	mov	r9, r1
 800d6c8:	4692      	mov	sl, r2
 800d6ca:	eb1b 0509 	adds.w	r5, fp, r9
 800d6ce:	eb4c 060a 	adc.w	r6, ip, sl
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	f04f 0400 	mov.w	r4, #0
 800d6e4:	0094      	lsls	r4, r2, #2
 800d6e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6ea:	008b      	lsls	r3, r1, #2
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4623      	mov	r3, r4
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	f7f3 fae0 	bl	8000cb8 <__aeabi_uldivmod>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4b77      	ldr	r3, [pc, #476]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d700:	fba3 1302 	umull	r1, r3, r3, r2
 800d704:	095b      	lsrs	r3, r3, #5
 800d706:	2164      	movs	r1, #100	; 0x64
 800d708:	fb01 f303 	mul.w	r3, r1, r3
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	011b      	lsls	r3, r3, #4
 800d710:	3332      	adds	r3, #50	; 0x32
 800d712:	4a72      	ldr	r2, [pc, #456]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d714:	fba2 2303 	umull	r2, r3, r2, r3
 800d718:	095b      	lsrs	r3, r3, #5
 800d71a:	f003 020f 	and.w	r2, r3, #15
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4442      	add	r2, r8
 800d724:	609a      	str	r2, [r3, #8]
 800d726:	e0d0      	b.n	800d8ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d728:	f7fc f95c 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 800d72c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	469a      	mov	sl, r3
 800d732:	f04f 0b00 	mov.w	fp, #0
 800d736:	46d0      	mov	r8, sl
 800d738:	46d9      	mov	r9, fp
 800d73a:	eb18 0308 	adds.w	r3, r8, r8
 800d73e:	eb49 0409 	adc.w	r4, r9, r9
 800d742:	4698      	mov	r8, r3
 800d744:	46a1      	mov	r9, r4
 800d746:	eb18 080a 	adds.w	r8, r8, sl
 800d74a:	eb49 090b 	adc.w	r9, r9, fp
 800d74e:	f04f 0100 	mov.w	r1, #0
 800d752:	f04f 0200 	mov.w	r2, #0
 800d756:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d75a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d75e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d762:	4688      	mov	r8, r1
 800d764:	4691      	mov	r9, r2
 800d766:	eb1a 0508 	adds.w	r5, sl, r8
 800d76a:	eb4b 0609 	adc.w	r6, fp, r9
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	4619      	mov	r1, r3
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	f04f 0300 	mov.w	r3, #0
 800d77c:	f04f 0400 	mov.w	r4, #0
 800d780:	0094      	lsls	r4, r2, #2
 800d782:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d786:	008b      	lsls	r3, r1, #2
 800d788:	461a      	mov	r2, r3
 800d78a:	4623      	mov	r3, r4
 800d78c:	4628      	mov	r0, r5
 800d78e:	4631      	mov	r1, r6
 800d790:	f7f3 fa92 	bl	8000cb8 <__aeabi_uldivmod>
 800d794:	4603      	mov	r3, r0
 800d796:	460c      	mov	r4, r1
 800d798:	461a      	mov	r2, r3
 800d79a:	4b50      	ldr	r3, [pc, #320]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d79c:	fba3 2302 	umull	r2, r3, r3, r2
 800d7a0:	095b      	lsrs	r3, r3, #5
 800d7a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	469b      	mov	fp, r3
 800d7aa:	f04f 0c00 	mov.w	ip, #0
 800d7ae:	46d9      	mov	r9, fp
 800d7b0:	46e2      	mov	sl, ip
 800d7b2:	eb19 0309 	adds.w	r3, r9, r9
 800d7b6:	eb4a 040a 	adc.w	r4, sl, sl
 800d7ba:	4699      	mov	r9, r3
 800d7bc:	46a2      	mov	sl, r4
 800d7be:	eb19 090b 	adds.w	r9, r9, fp
 800d7c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d7c6:	f04f 0100 	mov.w	r1, #0
 800d7ca:	f04f 0200 	mov.w	r2, #0
 800d7ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7da:	4689      	mov	r9, r1
 800d7dc:	4692      	mov	sl, r2
 800d7de:	eb1b 0509 	adds.w	r5, fp, r9
 800d7e2:	eb4c 060a 	adc.w	r6, ip, sl
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	f04f 0200 	mov.w	r2, #0
 800d7f0:	f04f 0300 	mov.w	r3, #0
 800d7f4:	f04f 0400 	mov.w	r4, #0
 800d7f8:	0094      	lsls	r4, r2, #2
 800d7fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d7fe:	008b      	lsls	r3, r1, #2
 800d800:	461a      	mov	r2, r3
 800d802:	4623      	mov	r3, r4
 800d804:	4628      	mov	r0, r5
 800d806:	4631      	mov	r1, r6
 800d808:	f7f3 fa56 	bl	8000cb8 <__aeabi_uldivmod>
 800d80c:	4603      	mov	r3, r0
 800d80e:	460c      	mov	r4, r1
 800d810:	461a      	mov	r2, r3
 800d812:	4b32      	ldr	r3, [pc, #200]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d814:	fba3 1302 	umull	r1, r3, r3, r2
 800d818:	095b      	lsrs	r3, r3, #5
 800d81a:	2164      	movs	r1, #100	; 0x64
 800d81c:	fb01 f303 	mul.w	r3, r1, r3
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	011b      	lsls	r3, r3, #4
 800d824:	3332      	adds	r3, #50	; 0x32
 800d826:	4a2d      	ldr	r2, [pc, #180]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d828:	fba2 2303 	umull	r2, r3, r2, r3
 800d82c:	095b      	lsrs	r3, r3, #5
 800d82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d832:	4498      	add	r8, r3
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	469b      	mov	fp, r3
 800d838:	f04f 0c00 	mov.w	ip, #0
 800d83c:	46d9      	mov	r9, fp
 800d83e:	46e2      	mov	sl, ip
 800d840:	eb19 0309 	adds.w	r3, r9, r9
 800d844:	eb4a 040a 	adc.w	r4, sl, sl
 800d848:	4699      	mov	r9, r3
 800d84a:	46a2      	mov	sl, r4
 800d84c:	eb19 090b 	adds.w	r9, r9, fp
 800d850:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d854:	f04f 0100 	mov.w	r1, #0
 800d858:	f04f 0200 	mov.w	r2, #0
 800d85c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d860:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d864:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d868:	4689      	mov	r9, r1
 800d86a:	4692      	mov	sl, r2
 800d86c:	eb1b 0509 	adds.w	r5, fp, r9
 800d870:	eb4c 060a 	adc.w	r6, ip, sl
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4619      	mov	r1, r3
 800d87a:	f04f 0200 	mov.w	r2, #0
 800d87e:	f04f 0300 	mov.w	r3, #0
 800d882:	f04f 0400 	mov.w	r4, #0
 800d886:	0094      	lsls	r4, r2, #2
 800d888:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d88c:	008b      	lsls	r3, r1, #2
 800d88e:	461a      	mov	r2, r3
 800d890:	4623      	mov	r3, r4
 800d892:	4628      	mov	r0, r5
 800d894:	4631      	mov	r1, r6
 800d896:	f7f3 fa0f 	bl	8000cb8 <__aeabi_uldivmod>
 800d89a:	4603      	mov	r3, r0
 800d89c:	460c      	mov	r4, r1
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d8a2:	fba3 1302 	umull	r1, r3, r3, r2
 800d8a6:	095b      	lsrs	r3, r3, #5
 800d8a8:	2164      	movs	r1, #100	; 0x64
 800d8aa:	fb01 f303 	mul.w	r3, r1, r3
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	3332      	adds	r3, #50	; 0x32
 800d8b4:	4a09      	ldr	r2, [pc, #36]	; (800d8dc <UART_SetConfig+0x6f4>)
 800d8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ba:	095b      	lsrs	r3, r3, #5
 800d8bc:	f003 020f 	and.w	r2, r3, #15
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4442      	add	r2, r8
 800d8c6:	609a      	str	r2, [r3, #8]
}
 800d8c8:	e7ff      	b.n	800d8ca <UART_SetConfig+0x6e2>
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d4:	40011000 	.word	0x40011000
 800d8d8:	40011400 	.word	0x40011400
 800d8dc:	51eb851f 	.word	0x51eb851f

0800d8e0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	b480      	push	{r7}
 800d8e4:	b085      	sub	sp, #20
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	f107 001c 	add.w	r0, r7, #28
 800d8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d8f6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d8f8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d8fa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d8fe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d902:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d906:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d90a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d91a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	431a      	orrs	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	b004      	add	sp, #16
 800d934:	4770      	bx	lr

0800d936 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d936:	b480      	push	{r7}
 800d938:	b083      	sub	sp, #12
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d944:	4618      	mov	r0, r3
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d972:	b580      	push	{r7, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2203      	movs	r2, #3
 800d97e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d980:	2002      	movs	r0, #2
 800d982:	f7f9 fbc5 	bl	8007110 <HAL_Delay>
  
  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 0303 	and.w	r3, r3, #3
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d9d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d9d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d9e6:	f023 030f 	bic.w	r3, r3, #15
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3714      	adds	r7, #20
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	b2db      	uxtb	r3, r3
}
 800da0e:	4618      	mov	r0, r3
 800da10:	370c      	adds	r7, #12
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b085      	sub	sp, #20
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3314      	adds	r3, #20
 800da28:	461a      	mov	r2, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	4413      	add	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
}  
 800da34:	4618      	mov	r0, r3
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da66:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800da6c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800da72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	4313      	orrs	r3, r2
 800da78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	431a      	orrs	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da8a:	2300      	movs	r3, #0

}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b088      	sub	sp, #32
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800daa6:	2310      	movs	r3, #16
 800daa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800daaa:	2340      	movs	r3, #64	; 0x40
 800daac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daae:	2300      	movs	r3, #0
 800dab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dab8:	f107 0308 	add.w	r3, r7, #8
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff ff74 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dac8:	2110      	movs	r1, #16
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fa40 	bl	800df50 <SDMMC_GetCmdResp1>
 800dad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dad2:	69fb      	ldr	r3, [r7, #28]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800daea:	2311      	movs	r3, #17
 800daec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800daee:	2340      	movs	r3, #64	; 0x40
 800daf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dafa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dafc:	f107 0308 	add.w	r3, r7, #8
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ff52 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db08:	f241 3288 	movw	r2, #5000	; 0x1388
 800db0c:	2111      	movs	r1, #17
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fa1e 	bl	800df50 <SDMMC_GetCmdResp1>
 800db14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db16:	69fb      	ldr	r3, [r7, #28]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3720      	adds	r7, #32
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800db2e:	2312      	movs	r3, #18
 800db30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db32:	2340      	movs	r3, #64	; 0x40
 800db34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db36:	2300      	movs	r3, #0
 800db38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db40:	f107 0308 	add.w	r3, r7, #8
 800db44:	4619      	mov	r1, r3
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff ff30 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800db4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db50:	2112      	movs	r1, #18
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f9fc 	bl	800df50 <SDMMC_GetCmdResp1>
 800db58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db5a:	69fb      	ldr	r3, [r7, #28]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3720      	adds	r7, #32
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db72:	2318      	movs	r3, #24
 800db74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db76:	2340      	movs	r3, #64	; 0x40
 800db78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db7a:	2300      	movs	r3, #0
 800db7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db84:	f107 0308 	add.w	r3, r7, #8
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff ff0e 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db90:	f241 3288 	movw	r2, #5000	; 0x1388
 800db94:	2118      	movs	r1, #24
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f9da 	bl	800df50 <SDMMC_GetCmdResp1>
 800db9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db9e:	69fb      	ldr	r3, [r7, #28]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3720      	adds	r7, #32
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dbb6:	2319      	movs	r3, #25
 800dbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbba:	2340      	movs	r3, #64	; 0x40
 800dbbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbc8:	f107 0308 	add.w	r3, r7, #8
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff feec 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dbd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbd8:	2119      	movs	r1, #25
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f9b8 	bl	800df50 <SDMMC_GetCmdResp1>
 800dbe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbe2:	69fb      	ldr	r3, [r7, #28]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3720      	adds	r7, #32
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc0a:	f107 0308 	add.w	r3, r7, #8
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff fecb 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dc16:	4a05      	ldr	r2, [pc, #20]	; (800dc2c <SDMMC_CmdStopTransfer+0x40>)
 800dc18:	210c      	movs	r1, #12
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f998 	bl	800df50 <SDMMC_GetCmdResp1>
 800dc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc22:	69fb      	ldr	r3, [r7, #28]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	05f5e100 	.word	0x05f5e100

0800dc30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08a      	sub	sp, #40	; 0x28
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dc40:	2307      	movs	r3, #7
 800dc42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc44:	2340      	movs	r3, #64	; 0x40
 800dc46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc52:	f107 0310 	add.w	r3, r7, #16
 800dc56:	4619      	mov	r1, r3
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7ff fea7 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc62:	2107      	movs	r1, #7
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 f973 	bl	800df50 <SDMMC_GetCmdResp1>
 800dc6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3728      	adds	r7, #40	; 0x28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b088      	sub	sp, #32
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc82:	2300      	movs	r3, #0
 800dc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dc86:	2300      	movs	r3, #0
 800dc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff fe86 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f92d 	bl	800df00 <SDMMC_GetCmdError>
 800dca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca8:	69fb      	ldr	r3, [r7, #28]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b088      	sub	sp, #32
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dcba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dcbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcc4:	2340      	movs	r3, #64	; 0x40
 800dcc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcd2:	f107 0308 	add.w	r3, r7, #8
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff fe67 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fb16 	bl	800e310 <SDMMC_GetCmdResp7>
 800dce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dce6:	69fb      	ldr	r3, [r7, #28]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dcfe:	2337      	movs	r3, #55	; 0x37
 800dd00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd02:	2340      	movs	r3, #64	; 0x40
 800dd04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd10:	f107 0308 	add.w	r3, r7, #8
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff fe48 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd20:	2137      	movs	r1, #55	; 0x37
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f914 	bl	800df50 <SDMMC_GetCmdResp1>
 800dd28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd2a:	69fb      	ldr	r3, [r7, #28]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3720      	adds	r7, #32
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b088      	sub	sp, #32
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dd4a:	2329      	movs	r3, #41	; 0x29
 800dd4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd4e:	2340      	movs	r3, #64	; 0x40
 800dd50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd52:	2300      	movs	r3, #0
 800dd54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd5c:	f107 0308 	add.w	r3, r7, #8
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fe22 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fa23 	bl	800e1b4 <SDMMC_GetCmdResp3>
 800dd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd70:	69fb      	ldr	r3, [r7, #28]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b088      	sub	sp, #32
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd88:	2306      	movs	r3, #6
 800dd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd8c:	2340      	movs	r3, #64	; 0x40
 800dd8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd90:	2300      	movs	r3, #0
 800dd92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd9a:	f107 0308 	add.w	r3, r7, #8
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fe03 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800dda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddaa:	2106      	movs	r1, #6
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f8cf 	bl	800df50 <SDMMC_GetCmdResp1>
 800ddb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3720      	adds	r7, #32
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b088      	sub	sp, #32
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ddca:	2333      	movs	r3, #51	; 0x33
 800ddcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddce:	2340      	movs	r3, #64	; 0x40
 800ddd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dddc:	f107 0308 	add.w	r3, r7, #8
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fde2 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dde8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddec:	2133      	movs	r1, #51	; 0x33
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f8ae 	bl	800df50 <SDMMC_GetCmdResp1>
 800ddf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800de08:	2300      	movs	r3, #0
 800de0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800de0c:	2302      	movs	r3, #2
 800de0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de10:	23c0      	movs	r3, #192	; 0xc0
 800de12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7ff fdc1 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f97c 	bl	800e128 <SDMMC_GetCmdResp2>
 800de30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de32:	69fb      	ldr	r3, [r7, #28]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3720      	adds	r7, #32
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de4a:	2309      	movs	r3, #9
 800de4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de4e:	23c0      	movs	r3, #192	; 0xc0
 800de50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff fda2 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f95d 	bl	800e128 <SDMMC_GetCmdResp2>
 800de6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de70:	69fb      	ldr	r3, [r7, #28]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3720      	adds	r7, #32
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b088      	sub	sp, #32
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de88:	2303      	movs	r3, #3
 800de8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de8c:	2340      	movs	r3, #64	; 0x40
 800de8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de90:	2300      	movs	r3, #0
 800de92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de9a:	f107 0308 	add.w	r3, r7, #8
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff fd83 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	2103      	movs	r1, #3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f9bc 	bl	800e228 <SDMMC_GetCmdResp6>
 800deb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb2:	69fb      	ldr	r3, [r7, #28]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800deca:	230d      	movs	r3, #13
 800decc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dece:	2340      	movs	r3, #64	; 0x40
 800ded0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ded6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dedc:	f107 0308 	add.w	r3, r7, #8
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff fd62 	bl	800d9ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800deec:	210d      	movs	r1, #13
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f82e 	bl	800df50 <SDMMC_GetCmdResp1>
 800def4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def6:	69fb      	ldr	r3, [r7, #28]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3720      	adds	r7, #32
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800df00:	b490      	push	{r4, r7}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df08:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <SDMMC_GetCmdError+0x48>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a0f      	ldr	r2, [pc, #60]	; (800df4c <SDMMC_GetCmdError+0x4c>)
 800df0e:	fba2 2303 	umull	r2, r3, r2, r3
 800df12:	0a5b      	lsrs	r3, r3, #9
 800df14:	f241 3288 	movw	r2, #5000	; 0x1388
 800df18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df1c:	4623      	mov	r3, r4
 800df1e:	1e5c      	subs	r4, r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	d102      	bne.n	800df2a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df28:	e009      	b.n	800df3e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0f2      	beq.n	800df1c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	22c5      	movs	r2, #197	; 0xc5
 800df3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bc90      	pop	{r4, r7}
 800df46:	4770      	bx	lr
 800df48:	20000000 	.word	0x20000000
 800df4c:	10624dd3 	.word	0x10624dd3

0800df50 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b087      	sub	sp, #28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	460b      	mov	r3, r1
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df5e:	4b6f      	ldr	r3, [pc, #444]	; (800e11c <SDMMC_GetCmdResp1+0x1cc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a6f      	ldr	r2, [pc, #444]	; (800e120 <SDMMC_GetCmdResp1+0x1d0>)
 800df64:	fba2 2303 	umull	r2, r3, r2, r3
 800df68:	0a5b      	lsrs	r3, r3, #9
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df70:	4623      	mov	r3, r4
 800df72:	1e5c      	subs	r4, r3, #1
 800df74:	2b00      	cmp	r3, #0
 800df76:	d102      	bne.n	800df7e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df7c:	e0c9      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df82:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0f0      	beq.n	800df70 <SDMMC_GetCmdResp1+0x20>
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1eb      	bne.n	800df70 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d004      	beq.n	800dfae <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2204      	movs	r2, #4
 800dfa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfaa:	2304      	movs	r3, #4
 800dfac:	e0b1      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d004      	beq.n	800dfc4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e0a6      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	22c5      	movs	r2, #197	; 0xc5
 800dfc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fd18 	bl	800da00 <SDIO_GetCommandResponse>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	7afb      	ldrb	r3, [r7, #11]
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d001      	beq.n	800dfde <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e099      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dfde:	2100      	movs	r1, #0
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f7ff fd1a 	bl	800da1a <SDIO_GetResponse>
 800dfe6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	4b4e      	ldr	r3, [pc, #312]	; (800e124 <SDMMC_GetCmdResp1+0x1d4>)
 800dfec:	4013      	ands	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e08d      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da02      	bge.n	800e002 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e000:	e087      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e00c:	2340      	movs	r3, #64	; 0x40
 800e00e:	e080      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e01a:	2380      	movs	r3, #128	; 0x80
 800e01c:	e079      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e02c:	e071      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03c:	e069      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04c:	e061      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e05c:	e059      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e06c:	e051      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e07c:	e049      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e08c:	e041      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e09c:	e039      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0ac:	e031      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0bc:	e029      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e0c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e0cc:	e021      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e0d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e0dc:	e019      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e0e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e0ec:	e011      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e0f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e0fc:	e009      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f003 0308 	and.w	r3, r3, #8
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e10c:	e001      	b.n	800e112 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e10e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e112:	4618      	mov	r0, r3
 800e114:	371c      	adds	r7, #28
 800e116:	46bd      	mov	sp, r7
 800e118:	bd90      	pop	{r4, r7, pc}
 800e11a:	bf00      	nop
 800e11c:	20000000 	.word	0x20000000
 800e120:	10624dd3 	.word	0x10624dd3
 800e124:	fdffe008 	.word	0xfdffe008

0800e128 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e128:	b490      	push	{r4, r7}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e130:	4b1e      	ldr	r3, [pc, #120]	; (800e1ac <SDMMC_GetCmdResp2+0x84>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a1e      	ldr	r2, [pc, #120]	; (800e1b0 <SDMMC_GetCmdResp2+0x88>)
 800e136:	fba2 2303 	umull	r2, r3, r2, r3
 800e13a:	0a5b      	lsrs	r3, r3, #9
 800e13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e140:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e144:	4623      	mov	r3, r4
 800e146:	1e5c      	subs	r4, r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d102      	bne.n	800e152 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e14c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e150:	e026      	b.n	800e1a0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e156:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0f0      	beq.n	800e144 <SDMMC_GetCmdResp2+0x1c>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1eb      	bne.n	800e144 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e170:	f003 0304 	and.w	r3, r3, #4
 800e174:	2b00      	cmp	r3, #0
 800e176:	d004      	beq.n	800e182 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2204      	movs	r2, #4
 800e17c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e17e:	2304      	movs	r3, #4
 800e180:	e00e      	b.n	800e1a0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d004      	beq.n	800e198 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e194:	2301      	movs	r3, #1
 800e196:	e003      	b.n	800e1a0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	22c5      	movs	r2, #197	; 0xc5
 800e19c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bc90      	pop	{r4, r7}
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	20000000 	.word	0x20000000
 800e1b0:	10624dd3 	.word	0x10624dd3

0800e1b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e1b4:	b490      	push	{r4, r7}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1bc:	4b18      	ldr	r3, [pc, #96]	; (800e220 <SDMMC_GetCmdResp3+0x6c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a18      	ldr	r2, [pc, #96]	; (800e224 <SDMMC_GetCmdResp3+0x70>)
 800e1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c6:	0a5b      	lsrs	r3, r3, #9
 800e1c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e1d0:	4623      	mov	r3, r4
 800e1d2:	1e5c      	subs	r4, r3, #1
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d102      	bne.n	800e1de <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1dc:	e01b      	b.n	800e216 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d0f0      	beq.n	800e1d0 <SDMMC_GetCmdResp3+0x1c>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1eb      	bne.n	800e1d0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2204      	movs	r2, #4
 800e208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e20a:	2304      	movs	r3, #4
 800e20c:	e003      	b.n	800e216 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	22c5      	movs	r2, #197	; 0xc5
 800e212:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bc90      	pop	{r4, r7}
 800e21e:	4770      	bx	lr
 800e220:	20000000 	.word	0x20000000
 800e224:	10624dd3 	.word	0x10624dd3

0800e228 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e228:	b590      	push	{r4, r7, lr}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	460b      	mov	r3, r1
 800e232:	607a      	str	r2, [r7, #4]
 800e234:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e236:	4b34      	ldr	r3, [pc, #208]	; (800e308 <SDMMC_GetCmdResp6+0xe0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a34      	ldr	r2, [pc, #208]	; (800e30c <SDMMC_GetCmdResp6+0xe4>)
 800e23c:	fba2 2303 	umull	r2, r3, r2, r3
 800e240:	0a5b      	lsrs	r3, r3, #9
 800e242:	f241 3288 	movw	r2, #5000	; 0x1388
 800e246:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e24a:	4623      	mov	r3, r4
 800e24c:	1e5c      	subs	r4, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e256:	e052      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e264:	2b00      	cmp	r3, #0
 800e266:	d0f0      	beq.n	800e24a <SDMMC_GetCmdResp6+0x22>
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1eb      	bne.n	800e24a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d004      	beq.n	800e288 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2204      	movs	r2, #4
 800e282:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e284:	2304      	movs	r3, #4
 800e286:	e03a      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	2b00      	cmp	r3, #0
 800e292:	d004      	beq.n	800e29e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2201      	movs	r2, #1
 800e298:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e02f      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f7ff fbae 	bl	800da00 <SDIO_GetCommandResponse>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	7afb      	ldrb	r3, [r7, #11]
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d001      	beq.n	800e2b2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e025      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	22c5      	movs	r2, #197	; 0xc5
 800e2b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff fbad 	bl	800da1a <SDIO_GetResponse>
 800e2c0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	0c1b      	lsrs	r3, r3, #16
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e011      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2e8:	e009      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2f8:	e001      	b.n	800e2fe <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	371c      	adds	r7, #28
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop
 800e308:	20000000 	.word	0x20000000
 800e30c:	10624dd3 	.word	0x10624dd3

0800e310 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e310:	b490      	push	{r4, r7}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e318:	4b21      	ldr	r3, [pc, #132]	; (800e3a0 <SDMMC_GetCmdResp7+0x90>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a21      	ldr	r2, [pc, #132]	; (800e3a4 <SDMMC_GetCmdResp7+0x94>)
 800e31e:	fba2 2303 	umull	r2, r3, r2, r3
 800e322:	0a5b      	lsrs	r3, r3, #9
 800e324:	f241 3288 	movw	r2, #5000	; 0x1388
 800e328:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e32c:	4623      	mov	r3, r4
 800e32e:	1e5c      	subs	r4, r3, #1
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e338:	e02c      	b.n	800e394 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e346:	2b00      	cmp	r3, #0
 800e348:	d0f0      	beq.n	800e32c <SDMMC_GetCmdResp7+0x1c>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1eb      	bne.n	800e32c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d004      	beq.n	800e36a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2204      	movs	r2, #4
 800e364:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e366:	2304      	movs	r3, #4
 800e368:	e014      	b.n	800e394 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d004      	beq.n	800e380 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e009      	b.n	800e394 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d002      	beq.n	800e392 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2240      	movs	r2, #64	; 0x40
 800e390:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e392:	2300      	movs	r3, #0
  
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bc90      	pop	{r4, r7}
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	20000000 	.word	0x20000000
 800e3a4:	10624dd3 	.word	0x10624dd3

0800e3a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e3ac:	4904      	ldr	r1, [pc, #16]	; (800e3c0 <MX_FATFS_Init+0x18>)
 800e3ae:	4805      	ldr	r0, [pc, #20]	; (800e3c4 <MX_FATFS_Init+0x1c>)
 800e3b0:	f003 fb9c 	bl	8011aec <FATFS_LinkDriver>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4b03      	ldr	r3, [pc, #12]	; (800e3c8 <MX_FATFS_Init+0x20>)
 800e3ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e3bc:	bf00      	nop
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20039da0 	.word	0x20039da0
 800e3c4:	08017ff0 	.word	0x08017ff0
 800e3c8:	20039d9c 	.word	0x20039d9c

0800e3cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e3d6:	f000 f896 	bl	800e506 <BSP_SD_IsDetected>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d001      	beq.n	800e3e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e012      	b.n	800e40a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e3e4:	480b      	ldr	r0, [pc, #44]	; (800e414 <BSP_SD_Init+0x48>)
 800e3e6:	f7fb ffa5 	bl	800a334 <HAL_SD_Init>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d109      	bne.n	800e408 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e3f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e3f8:	4806      	ldr	r0, [pc, #24]	; (800e414 <BSP_SD_Init+0x48>)
 800e3fa:	f7fc fd4f 	bl	800ae9c <HAL_SD_ConfigWideBusOperation>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e408:	79fb      	ldrb	r3, [r7, #7]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20039b9c 	.word	0x20039b9c

0800e418 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	68f9      	ldr	r1, [r7, #12]
 800e42e:	4806      	ldr	r0, [pc, #24]	; (800e448 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e430:	f7fc f810 	bl	800a454 <HAL_SD_ReadBlocks_DMA>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3718      	adds	r7, #24
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20039b9c 	.word	0x20039b9c

0800e44c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b086      	sub	sp, #24
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	68f9      	ldr	r1, [r7, #12]
 800e462:	4806      	ldr	r0, [pc, #24]	; (800e47c <BSP_SD_WriteBlocks_DMA+0x30>)
 800e464:	f7fc f8de 	bl	800a624 <HAL_SD_WriteBlocks_DMA>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e472:	7dfb      	ldrb	r3, [r7, #23]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3718      	adds	r7, #24
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20039b9c 	.word	0x20039b9c

0800e480 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e484:	4805      	ldr	r0, [pc, #20]	; (800e49c <BSP_SD_GetCardState+0x1c>)
 800e486:	f7fc fd85 	bl	800af94 <HAL_SD_GetCardState>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b04      	cmp	r3, #4
 800e48e:	bf14      	ite	ne
 800e490:	2301      	movne	r3, #1
 800e492:	2300      	moveq	r3, #0
 800e494:	b2db      	uxtb	r3, r3
}
 800e496:	4618      	mov	r0, r3
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	20039b9c 	.word	0x20039b9c

0800e4a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	4803      	ldr	r0, [pc, #12]	; (800e4b8 <BSP_SD_GetCardInfo+0x18>)
 800e4ac:	f7fc fcca 	bl	800ae44 <HAL_SD_GetCardInfo>
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20039b9c 	.word	0x20039b9c

0800e4bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e4c4:	f000 f818 	bl	800e4f8 <BSP_SD_AbortCallback>
}
 800e4c8:	bf00      	nop
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e4d8:	f000 f9a8 	bl	800e82c <BSP_SD_WriteCpltCallback>
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e4ec:	f000 f9aa 	bl	800e844 <BSP_SD_ReadCpltCallback>
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0

}
 800e4fc:	bf00      	nop
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e50c:	2301      	movs	r3, #1
 800e50e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e510:	f000 f80c 	bl	800e52c <BSP_PlatformIsDetected>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e51a:	2300      	movs	r3, #0
 800e51c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	b2db      	uxtb	r3, r3
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e532:	2301      	movs	r3, #1
 800e534:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e53a:	4806      	ldr	r0, [pc, #24]	; (800e554 <BSP_PlatformIsDetected+0x28>)
 800e53c:	f7fa f866 	bl	800860c <HAL_GPIO_ReadPin>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e546:	2300      	movs	r3, #0
 800e548:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e54a:	79fb      	ldrb	r3, [r7, #7]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	40020000 	.word	0x40020000

0800e558 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e560:	f7f8 fdca 	bl	80070f8 <HAL_GetTick>
 800e564:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e566:	e006      	b.n	800e576 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e568:	f7ff ff8a 	bl	800e480 <BSP_SD_GetCardState>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e572:	2300      	movs	r3, #0
 800e574:	e009      	b.n	800e58a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e576:	f7f8 fdbf 	bl	80070f8 <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d8f0      	bhi.n	800e568 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e59e:	4b0b      	ldr	r3, [pc, #44]	; (800e5cc <SD_CheckStatus+0x38>)
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e5a4:	f7ff ff6c 	bl	800e480 <BSP_SD_GetCardState>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d107      	bne.n	800e5be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e5ae:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <SD_CheckStatus+0x38>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f023 0301 	bic.w	r3, r3, #1
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	4b04      	ldr	r3, [pc, #16]	; (800e5cc <SD_CheckStatus+0x38>)
 800e5bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e5be:	4b03      	ldr	r3, [pc, #12]	; (800e5cc <SD_CheckStatus+0x38>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	b2db      	uxtb	r3, r3
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20000009 	.word	0x20000009

0800e5d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e5da:	f7ff fef7 	bl	800e3cc <BSP_SD_Init>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d107      	bne.n	800e5f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e5e4:	79fb      	ldrb	r3, [r7, #7]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff ffd4 	bl	800e594 <SD_CheckStatus>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	4b04      	ldr	r3, [pc, #16]	; (800e604 <SD_initialize+0x34>)
 800e5f2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e5f4:	4b03      	ldr	r3, [pc, #12]	; (800e604 <SD_initialize+0x34>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	b2db      	uxtb	r3, r3
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	20000009 	.word	0x20000009

0800e608 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff ffbd 	bl	800e594 <SD_CheckStatus>
 800e61a:	4603      	mov	r3, r0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60b9      	str	r1, [r7, #8]
 800e62c:	607a      	str	r2, [r7, #4]
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	4603      	mov	r3, r0
 800e632:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e638:	f247 5030 	movw	r0, #30000	; 0x7530
 800e63c:	f7ff ff8c 	bl	800e558 <SD_CheckStatusWithTimeout>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	da01      	bge.n	800e64a <SD_read+0x26>
  {
    return res;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	e03b      	b.n	800e6c2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	6879      	ldr	r1, [r7, #4]
 800e64e:	68b8      	ldr	r0, [r7, #8]
 800e650:	f7ff fee2 	bl	800e418 <BSP_SD_ReadBlocks_DMA>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d132      	bne.n	800e6c0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e65a:	4b1c      	ldr	r3, [pc, #112]	; (800e6cc <SD_read+0xa8>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e660:	f7f8 fd4a 	bl	80070f8 <HAL_GetTick>
 800e664:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e666:	bf00      	nop
 800e668:	4b18      	ldr	r3, [pc, #96]	; (800e6cc <SD_read+0xa8>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d108      	bne.n	800e682 <SD_read+0x5e>
 800e670:	f7f8 fd42 	bl	80070f8 <HAL_GetTick>
 800e674:	4602      	mov	r2, r0
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e67e:	4293      	cmp	r3, r2
 800e680:	d9f2      	bls.n	800e668 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e682:	4b12      	ldr	r3, [pc, #72]	; (800e6cc <SD_read+0xa8>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d102      	bne.n	800e690 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	75fb      	strb	r3, [r7, #23]
 800e68e:	e017      	b.n	800e6c0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e690:	4b0e      	ldr	r3, [pc, #56]	; (800e6cc <SD_read+0xa8>)
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e696:	f7f8 fd2f 	bl	80070f8 <HAL_GetTick>
 800e69a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e69c:	e007      	b.n	800e6ae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e69e:	f7ff feef 	bl	800e480 <BSP_SD_GetCardState>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d102      	bne.n	800e6ae <SD_read+0x8a>
          {
            res = RES_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e6ac:	e008      	b.n	800e6c0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6ae:	f7f8 fd23 	bl	80070f8 <HAL_GetTick>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d9ee      	bls.n	800e69e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20037438 	.word	0x20037438

0800e6d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e6e4:	4b24      	ldr	r3, [pc, #144]	; (800e778 <SD_write+0xa8>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e6ea:	f247 5030 	movw	r0, #30000	; 0x7530
 800e6ee:	f7ff ff33 	bl	800e558 <SD_CheckStatusWithTimeout>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	da01      	bge.n	800e6fc <SD_write+0x2c>
  {
    return res;
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
 800e6fa:	e038      	b.n	800e76e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	6879      	ldr	r1, [r7, #4]
 800e700:	68b8      	ldr	r0, [r7, #8]
 800e702:	f7ff fea3 	bl	800e44c <BSP_SD_WriteBlocks_DMA>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d12f      	bne.n	800e76c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e70c:	f7f8 fcf4 	bl	80070f8 <HAL_GetTick>
 800e710:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e712:	bf00      	nop
 800e714:	4b18      	ldr	r3, [pc, #96]	; (800e778 <SD_write+0xa8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d108      	bne.n	800e72e <SD_write+0x5e>
 800e71c:	f7f8 fcec 	bl	80070f8 <HAL_GetTick>
 800e720:	4602      	mov	r2, r0
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	f247 522f 	movw	r2, #29999	; 0x752f
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d9f2      	bls.n	800e714 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e72e:	4b12      	ldr	r3, [pc, #72]	; (800e778 <SD_write+0xa8>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]
 800e73a:	e017      	b.n	800e76c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e73c:	4b0e      	ldr	r3, [pc, #56]	; (800e778 <SD_write+0xa8>)
 800e73e:	2200      	movs	r2, #0
 800e740:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e742:	f7f8 fcd9 	bl	80070f8 <HAL_GetTick>
 800e746:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e748:	e007      	b.n	800e75a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e74a:	f7ff fe99 	bl	800e480 <BSP_SD_GetCardState>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d102      	bne.n	800e75a <SD_write+0x8a>
          {
            res = RES_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	75fb      	strb	r3, [r7, #23]
            break;
 800e758:	e008      	b.n	800e76c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e75a:	f7f8 fccd 	bl	80070f8 <HAL_GetTick>
 800e75e:	4602      	mov	r2, r0
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	1ad3      	subs	r3, r2, r3
 800e764:	f247 522f 	movw	r2, #29999	; 0x752f
 800e768:	4293      	cmp	r3, r2
 800e76a:	d9ee      	bls.n	800e74a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3718      	adds	r7, #24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20037434 	.word	0x20037434

0800e77c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08c      	sub	sp, #48	; 0x30
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	603a      	str	r2, [r7, #0]
 800e786:	71fb      	strb	r3, [r7, #7]
 800e788:	460b      	mov	r3, r1
 800e78a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e792:	4b25      	ldr	r3, [pc, #148]	; (800e828 <SD_ioctl+0xac>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	f003 0301 	and.w	r3, r3, #1
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <SD_ioctl+0x28>
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	e03c      	b.n	800e81e <SD_ioctl+0xa2>

  switch (cmd)
 800e7a4:	79bb      	ldrb	r3, [r7, #6]
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d834      	bhi.n	800e814 <SD_ioctl+0x98>
 800e7aa:	a201      	add	r2, pc, #4	; (adr r2, 800e7b0 <SD_ioctl+0x34>)
 800e7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b0:	0800e7c1 	.word	0x0800e7c1
 800e7b4:	0800e7c9 	.word	0x0800e7c9
 800e7b8:	0800e7e1 	.word	0x0800e7e1
 800e7bc:	0800e7fb 	.word	0x0800e7fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7c6:	e028      	b.n	800e81a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7c8:	f107 030c 	add.w	r3, r7, #12
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff fe67 	bl	800e4a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e7d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7de:	e01c      	b.n	800e81a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7e0:	f107 030c 	add.w	r3, r7, #12
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7ff fe5b 	bl	800e4a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7f8:	e00f      	b.n	800e81a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7fa:	f107 030c 	add.w	r3, r7, #12
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fe4e 	bl	800e4a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	0a5a      	lsrs	r2, r3, #9
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e812:	e002      	b.n	800e81a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e814:	2304      	movs	r3, #4
 800e816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3730      	adds	r7, #48	; 0x30
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20000009 	.word	0x20000009

0800e82c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e830:	4b03      	ldr	r3, [pc, #12]	; (800e840 <BSP_SD_WriteCpltCallback+0x14>)
 800e832:	2201      	movs	r2, #1
 800e834:	601a      	str	r2, [r3, #0]
}
 800e836:	bf00      	nop
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	20037434 	.word	0x20037434

0800e844 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e848:	4b03      	ldr	r3, [pc, #12]	; (800e858 <BSP_SD_ReadCpltCallback+0x14>)
 800e84a:	2201      	movs	r2, #1
 800e84c:	601a      	str	r2, [r3, #0]
}
 800e84e:	bf00      	nop
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	20037438 	.word	0x20037438

0800e85c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	4a08      	ldr	r2, [pc, #32]	; (800e88c <disk_status+0x30>)
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	79fa      	ldrb	r2, [r7, #7]
 800e874:	4905      	ldr	r1, [pc, #20]	; (800e88c <disk_status+0x30>)
 800e876:	440a      	add	r2, r1
 800e878:	7a12      	ldrb	r2, [r2, #8]
 800e87a:	4610      	mov	r0, r2
 800e87c:	4798      	blx	r3
 800e87e:	4603      	mov	r3, r0
 800e880:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e882:	7bfb      	ldrb	r3, [r7, #15]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	20037464 	.word	0x20037464

0800e890 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	4a0d      	ldr	r2, [pc, #52]	; (800e8d8 <disk_initialize+0x48>)
 800e8a2:	5cd3      	ldrb	r3, [r2, r3]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d111      	bne.n	800e8cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	4a0b      	ldr	r2, [pc, #44]	; (800e8d8 <disk_initialize+0x48>)
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	4a09      	ldr	r2, [pc, #36]	; (800e8d8 <disk_initialize+0x48>)
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	79fa      	ldrb	r2, [r7, #7]
 800e8be:	4906      	ldr	r1, [pc, #24]	; (800e8d8 <disk_initialize+0x48>)
 800e8c0:	440a      	add	r2, r1
 800e8c2:	7a12      	ldrb	r2, [r2, #8]
 800e8c4:	4610      	mov	r0, r2
 800e8c6:	4798      	blx	r3
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20037464 	.word	0x20037464

0800e8dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e8dc:	b590      	push	{r4, r7, lr}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60b9      	str	r1, [r7, #8]
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	603b      	str	r3, [r7, #0]
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4a0a      	ldr	r2, [pc, #40]	; (800e918 <disk_read+0x3c>)
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	689c      	ldr	r4, [r3, #8]
 800e8f8:	7bfb      	ldrb	r3, [r7, #15]
 800e8fa:	4a07      	ldr	r2, [pc, #28]	; (800e918 <disk_read+0x3c>)
 800e8fc:	4413      	add	r3, r2
 800e8fe:	7a18      	ldrb	r0, [r3, #8]
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	68b9      	ldr	r1, [r7, #8]
 800e906:	47a0      	blx	r4
 800e908:	4603      	mov	r3, r0
 800e90a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	bd90      	pop	{r4, r7, pc}
 800e916:	bf00      	nop
 800e918:	20037464 	.word	0x20037464

0800e91c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	4a0a      	ldr	r2, [pc, #40]	; (800e958 <disk_write+0x3c>)
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4413      	add	r3, r2
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	68dc      	ldr	r4, [r3, #12]
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	4a07      	ldr	r2, [pc, #28]	; (800e958 <disk_write+0x3c>)
 800e93c:	4413      	add	r3, r2
 800e93e:	7a18      	ldrb	r0, [r3, #8]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	47a0      	blx	r4
 800e948:	4603      	mov	r3, r0
 800e94a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}
 800e956:	bf00      	nop
 800e958:	20037464 	.word	0x20037464

0800e95c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	603a      	str	r2, [r7, #0]
 800e966:	71fb      	strb	r3, [r7, #7]
 800e968:	460b      	mov	r3, r1
 800e96a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	4a09      	ldr	r2, [pc, #36]	; (800e994 <disk_ioctl+0x38>)
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	79fa      	ldrb	r2, [r7, #7]
 800e97a:	4906      	ldr	r1, [pc, #24]	; (800e994 <disk_ioctl+0x38>)
 800e97c:	440a      	add	r2, r1
 800e97e:	7a10      	ldrb	r0, [r2, #8]
 800e980:	79b9      	ldrb	r1, [r7, #6]
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	4798      	blx	r3
 800e986:	4603      	mov	r3, r0
 800e988:	73fb      	strb	r3, [r7, #15]
  return res;
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20037464 	.word	0x20037464

0800e998 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
 800e9aa:	021b      	lsls	r3, r3, #8
 800e9ac:	b21a      	sxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	b21b      	sxth	r3, r3
 800e9b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e9ba:	89fb      	ldrh	r3, [r7, #14]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3303      	adds	r3, #3
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	021b      	lsls	r3, r3, #8
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	3202      	adds	r2, #2
 800e9e0:	7812      	ldrb	r2, [r2, #0]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	021b      	lsls	r3, r3, #8
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	7812      	ldrb	r2, [r2, #0]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	021b      	lsls	r3, r3, #8
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea00:	68fb      	ldr	r3, [r7, #12]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	607a      	str	r2, [r7, #4]
 800ea20:	887a      	ldrh	r2, [r7, #2]
 800ea22:	b2d2      	uxtb	r2, r2
 800ea24:	701a      	strb	r2, [r3, #0]
 800ea26:	887b      	ldrh	r3, [r7, #2]
 800ea28:	0a1b      	lsrs	r3, r3, #8
 800ea2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	607a      	str	r2, [r7, #4]
 800ea32:	887a      	ldrh	r2, [r7, #2]
 800ea34:	b2d2      	uxtb	r2, r2
 800ea36:	701a      	strb	r2, [r3, #0]
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	b2d2      	uxtb	r2, r2
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	0a1b      	lsrs	r3, r3, #8
 800ea5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	0a1b      	lsrs	r3, r3, #8
 800ea70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	b2d2      	uxtb	r2, r2
 800ea8e:	701a      	strb	r2, [r3, #0]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00d      	beq.n	800ead2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	1c53      	adds	r3, r2, #1
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	1c59      	adds	r1, r3, #1
 800eac0:	6179      	str	r1, [r7, #20]
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	607b      	str	r3, [r7, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1f1      	bne.n	800eab6 <mem_cpy+0x1a>
	}
}
 800ead2:	bf00      	nop
 800ead4:	371c      	adds	r7, #28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eade:	b480      	push	{r7}
 800eae0:	b087      	sub	sp, #28
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	60f8      	str	r0, [r7, #12]
 800eae6:	60b9      	str	r1, [r7, #8]
 800eae8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	617a      	str	r2, [r7, #20]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1f3      	bne.n	800eaee <mem_set+0x10>
}
 800eb06:	bf00      	nop
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb12:	b480      	push	{r7}
 800eb14:	b089      	sub	sp, #36	; 0x24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	61fb      	str	r3, [r7, #28]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	61fa      	str	r2, [r7, #28]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	4619      	mov	r1, r3
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	61ba      	str	r2, [r7, #24]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	1acb      	subs	r3, r1, r3
 800eb3e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <mem_cmp+0x40>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0eb      	beq.n	800eb2a <mem_cmp+0x18>

	return r;
 800eb52:	697b      	ldr	r3, [r7, #20]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3724      	adds	r7, #36	; 0x24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eb6a:	e002      	b.n	800eb72 <chk_chr+0x12>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	607b      	str	r3, [r7, #4]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d005      	beq.n	800eb86 <chk_chr+0x26>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d1f2      	bne.n	800eb6c <chk_chr+0xc>
	return *str;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	781b      	ldrb	r3, [r3, #0]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	370c      	adds	r7, #12
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
	...

0800eb98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eba2:	2300      	movs	r3, #0
 800eba4:	60bb      	str	r3, [r7, #8]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e029      	b.n	800ec00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ebac:	4a27      	ldr	r2, [pc, #156]	; (800ec4c <chk_lock+0xb4>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	4413      	add	r3, r2
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d01d      	beq.n	800ebf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ebba:	4a24      	ldr	r2, [pc, #144]	; (800ec4c <chk_lock+0xb4>)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	4413      	add	r3, r2
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d116      	bne.n	800ebfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ebcc:	4a1f      	ldr	r2, [pc, #124]	; (800ec4c <chk_lock+0xb4>)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	011b      	lsls	r3, r3, #4
 800ebd2:	4413      	add	r3, r2
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d10c      	bne.n	800ebfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ebe0:	4a1a      	ldr	r2, [pc, #104]	; (800ec4c <chk_lock+0xb4>)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	011b      	lsls	r3, r3, #4
 800ebe6:	4413      	add	r3, r2
 800ebe8:	3308      	adds	r3, #8
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d102      	bne.n	800ebfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ebf4:	e007      	b.n	800ec06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d9d2      	bls.n	800ebac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d109      	bne.n	800ec20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d102      	bne.n	800ec18 <chk_lock+0x80>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d101      	bne.n	800ec1c <chk_lock+0x84>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e010      	b.n	800ec3e <chk_lock+0xa6>
 800ec1c:	2312      	movs	r3, #18
 800ec1e:	e00e      	b.n	800ec3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d108      	bne.n	800ec38 <chk_lock+0xa0>
 800ec26:	4a09      	ldr	r2, [pc, #36]	; (800ec4c <chk_lock+0xb4>)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	011b      	lsls	r3, r3, #4
 800ec2c:	4413      	add	r3, r2
 800ec2e:	330c      	adds	r3, #12
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec36:	d101      	bne.n	800ec3c <chk_lock+0xa4>
 800ec38:	2310      	movs	r3, #16
 800ec3a:	e000      	b.n	800ec3e <chk_lock+0xa6>
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3714      	adds	r7, #20
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	20037444 	.word	0x20037444

0800ec50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec56:	2300      	movs	r3, #0
 800ec58:	607b      	str	r3, [r7, #4]
 800ec5a:	e002      	b.n	800ec62 <enq_lock+0x12>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	607b      	str	r3, [r7, #4]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d806      	bhi.n	800ec76 <enq_lock+0x26>
 800ec68:	4a09      	ldr	r2, [pc, #36]	; (800ec90 <enq_lock+0x40>)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	4413      	add	r3, r2
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1f2      	bne.n	800ec5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	bf14      	ite	ne
 800ec7c:	2301      	movne	r3, #1
 800ec7e:	2300      	moveq	r3, #0
 800ec80:	b2db      	uxtb	r3, r3
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	20037444 	.word	0x20037444

0800ec94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	e01f      	b.n	800ece4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eca4:	4a41      	ldr	r2, [pc, #260]	; (800edac <inc_lock+0x118>)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	011b      	lsls	r3, r3, #4
 800ecaa:	4413      	add	r3, r2
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d113      	bne.n	800ecde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ecb6:	4a3d      	ldr	r2, [pc, #244]	; (800edac <inc_lock+0x118>)
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	4413      	add	r3, r2
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d109      	bne.n	800ecde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ecca:	4a38      	ldr	r2, [pc, #224]	; (800edac <inc_lock+0x118>)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	4413      	add	r3, r2
 800ecd2:	3308      	adds	r3, #8
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d006      	beq.n	800ecec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	3301      	adds	r3, #1
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d9dc      	bls.n	800eca4 <inc_lock+0x10>
 800ecea:	e000      	b.n	800ecee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ecec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d132      	bne.n	800ed5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	e002      	b.n	800ed00 <inc_lock+0x6c>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	60fb      	str	r3, [r7, #12]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d806      	bhi.n	800ed14 <inc_lock+0x80>
 800ed06:	4a29      	ldr	r2, [pc, #164]	; (800edac <inc_lock+0x118>)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	4413      	add	r3, r2
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1f2      	bne.n	800ecfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d101      	bne.n	800ed1e <inc_lock+0x8a>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e040      	b.n	800eda0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	4922      	ldr	r1, [pc, #136]	; (800edac <inc_lock+0x118>)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	011b      	lsls	r3, r3, #4
 800ed28:	440b      	add	r3, r1
 800ed2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	491e      	ldr	r1, [pc, #120]	; (800edac <inc_lock+0x118>)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	011b      	lsls	r3, r3, #4
 800ed36:	440b      	add	r3, r1
 800ed38:	3304      	adds	r3, #4
 800ed3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	695a      	ldr	r2, [r3, #20]
 800ed40:	491a      	ldr	r1, [pc, #104]	; (800edac <inc_lock+0x118>)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	440b      	add	r3, r1
 800ed48:	3308      	adds	r3, #8
 800ed4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ed4c:	4a17      	ldr	r2, [pc, #92]	; (800edac <inc_lock+0x118>)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	011b      	lsls	r3, r3, #4
 800ed52:	4413      	add	r3, r2
 800ed54:	330c      	adds	r3, #12
 800ed56:	2200      	movs	r2, #0
 800ed58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d009      	beq.n	800ed74 <inc_lock+0xe0>
 800ed60:	4a12      	ldr	r2, [pc, #72]	; (800edac <inc_lock+0x118>)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	4413      	add	r3, r2
 800ed68:	330c      	adds	r3, #12
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <inc_lock+0xe0>
 800ed70:	2300      	movs	r3, #0
 800ed72:	e015      	b.n	800eda0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d108      	bne.n	800ed8c <inc_lock+0xf8>
 800ed7a:	4a0c      	ldr	r2, [pc, #48]	; (800edac <inc_lock+0x118>)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	011b      	lsls	r3, r3, #4
 800ed80:	4413      	add	r3, r2
 800ed82:	330c      	adds	r3, #12
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	3301      	adds	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	e001      	b.n	800ed90 <inc_lock+0xfc>
 800ed8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed90:	4906      	ldr	r1, [pc, #24]	; (800edac <inc_lock+0x118>)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	011b      	lsls	r3, r3, #4
 800ed96:	440b      	add	r3, r1
 800ed98:	330c      	adds	r3, #12
 800ed9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	3301      	adds	r3, #1
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3714      	adds	r7, #20
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr
 800edac:	20037444 	.word	0x20037444

0800edb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	3b01      	subs	r3, #1
 800edbc:	607b      	str	r3, [r7, #4]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d825      	bhi.n	800ee10 <dec_lock+0x60>
		n = Files[i].ctr;
 800edc4:	4a17      	ldr	r2, [pc, #92]	; (800ee24 <dec_lock+0x74>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	4413      	add	r3, r2
 800edcc:	330c      	adds	r3, #12
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800edd2:	89fb      	ldrh	r3, [r7, #14]
 800edd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edd8:	d101      	bne.n	800edde <dec_lock+0x2e>
 800edda:	2300      	movs	r3, #0
 800eddc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800edde:	89fb      	ldrh	r3, [r7, #14]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <dec_lock+0x3a>
 800ede4:	89fb      	ldrh	r3, [r7, #14]
 800ede6:	3b01      	subs	r3, #1
 800ede8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800edea:	4a0e      	ldr	r2, [pc, #56]	; (800ee24 <dec_lock+0x74>)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	011b      	lsls	r3, r3, #4
 800edf0:	4413      	add	r3, r2
 800edf2:	330c      	adds	r3, #12
 800edf4:	89fa      	ldrh	r2, [r7, #14]
 800edf6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800edf8:	89fb      	ldrh	r3, [r7, #14]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d105      	bne.n	800ee0a <dec_lock+0x5a>
 800edfe:	4a09      	ldr	r2, [pc, #36]	; (800ee24 <dec_lock+0x74>)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	011b      	lsls	r3, r3, #4
 800ee04:	4413      	add	r3, r2
 800ee06:	2200      	movs	r2, #0
 800ee08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	737b      	strb	r3, [r7, #13]
 800ee0e:	e001      	b.n	800ee14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ee10:	2302      	movs	r3, #2
 800ee12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ee14:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	20037444 	.word	0x20037444

0800ee28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee30:	2300      	movs	r3, #0
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e010      	b.n	800ee58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee36:	4a0d      	ldr	r2, [pc, #52]	; (800ee6c <clear_lock+0x44>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	011b      	lsls	r3, r3, #4
 800ee3c:	4413      	add	r3, r2
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d105      	bne.n	800ee52 <clear_lock+0x2a>
 800ee46:	4a09      	ldr	r2, [pc, #36]	; (800ee6c <clear_lock+0x44>)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	2200      	movs	r2, #0
 800ee50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	3301      	adds	r3, #1
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d9eb      	bls.n	800ee36 <clear_lock+0xe>
	}
}
 800ee5e:	bf00      	nop
 800ee60:	3714      	adds	r7, #20
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	20037444 	.word	0x20037444

0800ee70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b086      	sub	sp, #24
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	78db      	ldrb	r3, [r3, #3]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d034      	beq.n	800eeee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7858      	ldrb	r0, [r3, #1]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee94:	2301      	movs	r3, #1
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	f7ff fd40 	bl	800e91c <disk_write>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	73fb      	strb	r3, [r7, #15]
 800eea6:	e022      	b.n	800eeee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb2:	697a      	ldr	r2, [r7, #20]
 800eeb4:	1ad2      	subs	r2, r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a1b      	ldr	r3, [r3, #32]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d217      	bcs.n	800eeee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	789b      	ldrb	r3, [r3, #2]
 800eec2:	613b      	str	r3, [r7, #16]
 800eec4:	e010      	b.n	800eee8 <sync_window+0x78>
					wsect += fs->fsize;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	4413      	add	r3, r2
 800eece:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	7858      	ldrb	r0, [r3, #1]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eeda:	2301      	movs	r3, #1
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	f7ff fd1d 	bl	800e91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	3b01      	subs	r3, #1
 800eee6:	613b      	str	r3, [r7, #16]
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d8eb      	bhi.n	800eec6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef02:	2300      	movs	r3, #0
 800ef04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d01b      	beq.n	800ef48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff ffad 	bl	800ee70 <sync_window>
 800ef16:	4603      	mov	r3, r0
 800ef18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d113      	bne.n	800ef48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	7858      	ldrb	r0, [r3, #1]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	f7ff fcd5 	bl	800e8dc <disk_read>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef38:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
	...

0800ef54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7ff ff87 	bl	800ee70 <sync_window>
 800ef62:	4603      	mov	r3, r0
 800ef64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d159      	bne.n	800f020 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d149      	bne.n	800f008 <sync_fs+0xb4>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	791b      	ldrb	r3, [r3, #4]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d145      	bne.n	800f008 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	899b      	ldrh	r3, [r3, #12]
 800ef86:	461a      	mov	r2, r3
 800ef88:	2100      	movs	r1, #0
 800ef8a:	f7ff fda8 	bl	800eade <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3338      	adds	r3, #56	; 0x38
 800ef92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef96:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff fd37 	bl	800ea0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3338      	adds	r3, #56	; 0x38
 800efa4:	4921      	ldr	r1, [pc, #132]	; (800f02c <sync_fs+0xd8>)
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7ff fd4c 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3338      	adds	r3, #56	; 0x38
 800efb0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800efb4:	491e      	ldr	r1, [pc, #120]	; (800f030 <sync_fs+0xdc>)
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff fd44 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3338      	adds	r3, #56	; 0x38
 800efc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	695b      	ldr	r3, [r3, #20]
 800efc8:	4619      	mov	r1, r3
 800efca:	4610      	mov	r0, r2
 800efcc:	f7ff fd3a 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	3338      	adds	r3, #56	; 0x38
 800efd4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f7ff fd30 	bl	800ea44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	7858      	ldrb	r0, [r3, #1]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800effc:	2301      	movs	r3, #1
 800effe:	f7ff fc8d 	bl	800e91c <disk_write>
			fs->fsi_flag = 0;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	785b      	ldrb	r3, [r3, #1]
 800f00c:	2200      	movs	r2, #0
 800f00e:	2100      	movs	r1, #0
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fca3 	bl	800e95c <disk_ioctl>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <sync_fs+0xcc>
 800f01c:	2301      	movs	r3, #1
 800f01e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f020:	7bfb      	ldrb	r3, [r7, #15]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	41615252 	.word	0x41615252
 800f030:	61417272 	.word	0x61417272

0800f034 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	3b02      	subs	r3, #2
 800f042:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	69db      	ldr	r3, [r3, #28]
 800f048:	3b02      	subs	r3, #2
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d301      	bcc.n	800f054 <clust2sect+0x20>
 800f050:	2300      	movs	r3, #0
 800f052:	e008      	b.n	800f066 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	895b      	ldrh	r3, [r3, #10]
 800f058:	461a      	mov	r2, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	fb03 f202 	mul.w	r2, r3, r2
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f064:	4413      	add	r3, r2
}
 800f066:	4618      	mov	r0, r3
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b086      	sub	sp, #24
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d904      	bls.n	800f092 <get_fat+0x20>
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d302      	bcc.n	800f098 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f092:	2301      	movs	r3, #1
 800f094:	617b      	str	r3, [r7, #20]
 800f096:	e0b7      	b.n	800f208 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d05a      	beq.n	800f15c <get_fat+0xea>
 800f0a6:	2b03      	cmp	r3, #3
 800f0a8:	d07d      	beq.n	800f1a6 <get_fat+0x134>
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	f040 80a2 	bne.w	800f1f4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	085b      	lsrs	r3, r3, #1
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	899b      	ldrh	r3, [r3, #12]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	6938      	ldr	r0, [r7, #16]
 800f0d4:	f7ff ff10 	bl	800eef8 <move_window>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f040 808d 	bne.w	800f1fa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	60fa      	str	r2, [r7, #12]
 800f0e6:	693a      	ldr	r2, [r7, #16]
 800f0e8:	8992      	ldrh	r2, [r2, #12]
 800f0ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0ee:	fb02 f201 	mul.w	r2, r2, r1
 800f0f2:	1a9b      	subs	r3, r3, r2
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	899b      	ldrh	r3, [r3, #12]
 800f106:	4619      	mov	r1, r3
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f10e:	4413      	add	r3, r2
 800f110:	4619      	mov	r1, r3
 800f112:	6938      	ldr	r0, [r7, #16]
 800f114:	f7ff fef0 	bl	800eef8 <move_window>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d16f      	bne.n	800f1fe <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	899b      	ldrh	r3, [r3, #12]
 800f122:	461a      	mov	r2, r3
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	fbb3 f1f2 	udiv	r1, r3, r2
 800f12a:	fb02 f201 	mul.w	r2, r2, r1
 800f12e:	1a9b      	subs	r3, r3, r2
 800f130:	693a      	ldr	r2, [r7, #16]
 800f132:	4413      	add	r3, r2
 800f134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f138:	021b      	lsls	r3, r3, #8
 800f13a:	461a      	mov	r2, r3
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	4313      	orrs	r3, r2
 800f140:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <get_fat+0xe0>
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	091b      	lsrs	r3, r3, #4
 800f150:	e002      	b.n	800f158 <get_fat+0xe6>
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f158:	617b      	str	r3, [r7, #20]
			break;
 800f15a:	e055      	b.n	800f208 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	899b      	ldrh	r3, [r3, #12]
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	b29b      	uxth	r3, r3
 800f168:	4619      	mov	r1, r3
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f170:	4413      	add	r3, r2
 800f172:	4619      	mov	r1, r3
 800f174:	6938      	ldr	r0, [r7, #16]
 800f176:	f7ff febf 	bl	800eef8 <move_window>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d140      	bne.n	800f202 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	8992      	ldrh	r2, [r2, #12]
 800f18e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f192:	fb02 f200 	mul.w	r2, r2, r0
 800f196:	1a9b      	subs	r3, r3, r2
 800f198:	440b      	add	r3, r1
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff fbfc 	bl	800e998 <ld_word>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	617b      	str	r3, [r7, #20]
			break;
 800f1a4:	e030      	b.n	800f208 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	899b      	ldrh	r3, [r3, #12]
 800f1ae:	089b      	lsrs	r3, r3, #2
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1ba:	4413      	add	r3, r2
 800f1bc:	4619      	mov	r1, r3
 800f1be:	6938      	ldr	r0, [r7, #16]
 800f1c0:	f7ff fe9a 	bl	800eef8 <move_window>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d11d      	bne.n	800f206 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	8992      	ldrh	r2, [r2, #12]
 800f1d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1dc:	fb02 f200 	mul.w	r2, r2, r0
 800f1e0:	1a9b      	subs	r3, r3, r2
 800f1e2:	440b      	add	r3, r1
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff fbef 	bl	800e9c8 <ld_dword>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f1f0:	617b      	str	r3, [r7, #20]
			break;
 800f1f2:	e009      	b.n	800f208 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	e006      	b.n	800f208 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1fa:	bf00      	nop
 800f1fc:	e004      	b.n	800f208 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1fe:	bf00      	nop
 800f200:	e002      	b.n	800f208 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f202:	bf00      	nop
 800f204:	e000      	b.n	800f208 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f206:	bf00      	nop
		}
	}

	return val;
 800f208:	697b      	ldr	r3, [r7, #20]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f212:	b590      	push	{r4, r7, lr}
 800f214:	b089      	sub	sp, #36	; 0x24
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f21e:	2302      	movs	r3, #2
 800f220:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b01      	cmp	r3, #1
 800f226:	f240 8106 	bls.w	800f436 <put_fat+0x224>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	429a      	cmp	r2, r3
 800f232:	f080 8100 	bcs.w	800f436 <put_fat+0x224>
		switch (fs->fs_type) {
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	f000 8088 	beq.w	800f350 <put_fat+0x13e>
 800f240:	2b03      	cmp	r3, #3
 800f242:	f000 80b0 	beq.w	800f3a6 <put_fat+0x194>
 800f246:	2b01      	cmp	r3, #1
 800f248:	f040 80f5 	bne.w	800f436 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	61bb      	str	r3, [r7, #24]
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	085b      	lsrs	r3, r3, #1
 800f254:	69ba      	ldr	r2, [r7, #24]
 800f256:	4413      	add	r3, r2
 800f258:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	899b      	ldrh	r3, [r3, #12]
 800f262:	4619      	mov	r1, r3
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	fbb3 f3f1 	udiv	r3, r3, r1
 800f26a:	4413      	add	r3, r2
 800f26c:	4619      	mov	r1, r3
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7ff fe42 	bl	800eef8 <move_window>
 800f274:	4603      	mov	r3, r0
 800f276:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f278:	7ffb      	ldrb	r3, [r7, #31]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f040 80d4 	bne.w	800f428 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	1c5a      	adds	r2, r3, #1
 800f28a:	61ba      	str	r2, [r7, #24]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	8992      	ldrh	r2, [r2, #12]
 800f290:	fbb3 f0f2 	udiv	r0, r3, r2
 800f294:	fb02 f200 	mul.w	r2, r2, r0
 800f298:	1a9b      	subs	r3, r3, r2
 800f29a:	440b      	add	r3, r1
 800f29c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00d      	beq.n	800f2c4 <put_fat+0xb2>
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	b25b      	sxtb	r3, r3
 800f2ae:	f003 030f 	and.w	r3, r3, #15
 800f2b2:	b25a      	sxtb	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	b25b      	sxtb	r3, r3
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	b25b      	sxtb	r3, r3
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	e001      	b.n	800f2c8 <put_fat+0xb6>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	697a      	ldr	r2, [r7, #20]
 800f2ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2e2:	4413      	add	r3, r2
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fe06 	bl	800eef8 <move_window>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2f0:	7ffb      	ldrb	r3, [r7, #31]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f040 809a 	bne.w	800f42c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	899b      	ldrh	r3, [r3, #12]
 800f302:	461a      	mov	r2, r3
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	fbb3 f0f2 	udiv	r0, r3, r2
 800f30a:	fb02 f200 	mul.w	r2, r2, r0
 800f30e:	1a9b      	subs	r3, r3, r2
 800f310:	440b      	add	r3, r1
 800f312:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <put_fat+0x114>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	091b      	lsrs	r3, r3, #4
 800f322:	b2db      	uxtb	r3, r3
 800f324:	e00e      	b.n	800f344 <put_fat+0x132>
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	b25b      	sxtb	r3, r3
 800f32c:	f023 030f 	bic.w	r3, r3, #15
 800f330:	b25a      	sxtb	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	0a1b      	lsrs	r3, r3, #8
 800f336:	b25b      	sxtb	r3, r3
 800f338:	f003 030f 	and.w	r3, r3, #15
 800f33c:	b25b      	sxtb	r3, r3
 800f33e:	4313      	orrs	r3, r2
 800f340:	b25b      	sxtb	r3, r3
 800f342:	b2db      	uxtb	r3, r3
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2201      	movs	r2, #1
 800f34c:	70da      	strb	r2, [r3, #3]
			break;
 800f34e:	e072      	b.n	800f436 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	899b      	ldrh	r3, [r3, #12]
 800f358:	085b      	lsrs	r3, r3, #1
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4619      	mov	r1, r3
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	fbb3 f3f1 	udiv	r3, r3, r1
 800f364:	4413      	add	r3, r2
 800f366:	4619      	mov	r1, r3
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f7ff fdc5 	bl	800eef8 <move_window>
 800f36e:	4603      	mov	r3, r0
 800f370:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f372:	7ffb      	ldrb	r3, [r7, #31]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d15b      	bne.n	800f430 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	8992      	ldrh	r2, [r2, #12]
 800f386:	fbb3 f0f2 	udiv	r0, r3, r2
 800f38a:	fb02 f200 	mul.w	r2, r2, r0
 800f38e:	1a9b      	subs	r3, r3, r2
 800f390:	440b      	add	r3, r1
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	b292      	uxth	r2, r2
 800f396:	4611      	mov	r1, r2
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fb38 	bl	800ea0e <st_word>
			fs->wflag = 1;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	70da      	strb	r2, [r3, #3]
			break;
 800f3a4:	e047      	b.n	800f436 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	899b      	ldrh	r3, [r3, #12]
 800f3ae:	089b      	lsrs	r3, r3, #2
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3ba:	4413      	add	r3, r2
 800f3bc:	4619      	mov	r1, r3
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff fd9a 	bl	800eef8 <move_window>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3c8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d132      	bne.n	800f434 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	8992      	ldrh	r2, [r2, #12]
 800f3e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3e6:	fb02 f200 	mul.w	r2, r2, r0
 800f3ea:	1a9b      	subs	r3, r3, r2
 800f3ec:	440b      	add	r3, r1
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff faea 	bl	800e9c8 <ld_dword>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f3fa:	4323      	orrs	r3, r4
 800f3fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	8992      	ldrh	r2, [r2, #12]
 800f40c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f410:	fb02 f200 	mul.w	r2, r2, r0
 800f414:	1a9b      	subs	r3, r3, r2
 800f416:	440b      	add	r3, r1
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff fb12 	bl	800ea44 <st_dword>
			fs->wflag = 1;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2201      	movs	r2, #1
 800f424:	70da      	strb	r2, [r3, #3]
			break;
 800f426:	e006      	b.n	800f436 <put_fat+0x224>
			if (res != FR_OK) break;
 800f428:	bf00      	nop
 800f42a:	e004      	b.n	800f436 <put_fat+0x224>
			if (res != FR_OK) break;
 800f42c:	bf00      	nop
 800f42e:	e002      	b.n	800f436 <put_fat+0x224>
			if (res != FR_OK) break;
 800f430:	bf00      	nop
 800f432:	e000      	b.n	800f436 <put_fat+0x224>
			if (res != FR_OK) break;
 800f434:	bf00      	nop
		}
	}
	return res;
 800f436:	7ffb      	ldrb	r3, [r7, #31]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3724      	adds	r7, #36	; 0x24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd90      	pop	{r4, r7, pc}

0800f440 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f44c:	2300      	movs	r3, #0
 800f44e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d904      	bls.n	800f466 <remove_chain+0x26>
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	429a      	cmp	r2, r3
 800f464:	d301      	bcc.n	800f46a <remove_chain+0x2a>
 800f466:	2302      	movs	r3, #2
 800f468:	e04b      	b.n	800f502 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00c      	beq.n	800f48a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f470:	f04f 32ff 	mov.w	r2, #4294967295
 800f474:	6879      	ldr	r1, [r7, #4]
 800f476:	69b8      	ldr	r0, [r7, #24]
 800f478:	f7ff fecb 	bl	800f212 <put_fat>
 800f47c:	4603      	mov	r3, r0
 800f47e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f480:	7ffb      	ldrb	r3, [r7, #31]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <remove_chain+0x4a>
 800f486:	7ffb      	ldrb	r3, [r7, #31]
 800f488:	e03b      	b.n	800f502 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f48a:	68b9      	ldr	r1, [r7, #8]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7ff fdf0 	bl	800f072 <get_fat>
 800f492:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d031      	beq.n	800f4fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d101      	bne.n	800f4a4 <remove_chain+0x64>
 800f4a0:	2302      	movs	r3, #2
 800f4a2:	e02e      	b.n	800f502 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4aa:	d101      	bne.n	800f4b0 <remove_chain+0x70>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e028      	b.n	800f502 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	69b8      	ldr	r0, [r7, #24]
 800f4b6:	f7ff feac 	bl	800f212 <put_fat>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f4be:	7ffb      	ldrb	r3, [r7, #31]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <remove_chain+0x88>
 800f4c4:	7ffb      	ldrb	r3, [r7, #31]
 800f4c6:	e01c      	b.n	800f502 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	695a      	ldr	r2, [r3, #20]
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	3b02      	subs	r3, #2
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d20b      	bcs.n	800f4ee <remove_chain+0xae>
			fs->free_clst++;
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	695b      	ldr	r3, [r3, #20]
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	791b      	ldrb	r3, [r3, #4]
 800f4e4:	f043 0301 	orr.w	r3, r3, #1
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d3c6      	bcc.n	800f48a <remove_chain+0x4a>
 800f4fc:	e000      	b.n	800f500 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b088      	sub	sp, #32
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10d      	bne.n	800f53c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <create_chain+0x2c>
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	69ba      	ldr	r2, [r7, #24]
 800f532:	429a      	cmp	r2, r3
 800f534:	d31b      	bcc.n	800f56e <create_chain+0x64>
 800f536:	2301      	movs	r3, #1
 800f538:	61bb      	str	r3, [r7, #24]
 800f53a:	e018      	b.n	800f56e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff fd97 	bl	800f072 <get_fat>
 800f544:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d801      	bhi.n	800f550 <create_chain+0x46>
 800f54c:	2301      	movs	r3, #1
 800f54e:	e070      	b.n	800f632 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f556:	d101      	bne.n	800f55c <create_chain+0x52>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	e06a      	b.n	800f632 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	69db      	ldr	r3, [r3, #28]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	429a      	cmp	r2, r3
 800f564:	d201      	bcs.n	800f56a <create_chain+0x60>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	e063      	b.n	800f632 <create_chain+0x128>
		scl = clst;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	3301      	adds	r3, #1
 800f576:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	69db      	ldr	r3, [r3, #28]
 800f57c:	69fa      	ldr	r2, [r7, #28]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d307      	bcc.n	800f592 <create_chain+0x88>
				ncl = 2;
 800f582:	2302      	movs	r3, #2
 800f584:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f586:	69fa      	ldr	r2, [r7, #28]
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d901      	bls.n	800f592 <create_chain+0x88>
 800f58e:	2300      	movs	r3, #0
 800f590:	e04f      	b.n	800f632 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f592:	69f9      	ldr	r1, [r7, #28]
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7ff fd6c 	bl	800f072 <get_fat>
 800f59a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00e      	beq.n	800f5c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d003      	beq.n	800f5b0 <create_chain+0xa6>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ae:	d101      	bne.n	800f5b4 <create_chain+0xaa>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	e03e      	b.n	800f632 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f5b4:	69fa      	ldr	r2, [r7, #28]
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d1da      	bne.n	800f572 <create_chain+0x68>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	e038      	b.n	800f632 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f5c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c6:	69f9      	ldr	r1, [r7, #28]
 800f5c8:	6938      	ldr	r0, [r7, #16]
 800f5ca:	f7ff fe22 	bl	800f212 <put_fat>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5d2:	7dfb      	ldrb	r3, [r7, #23]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d109      	bne.n	800f5ec <create_chain+0xe2>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d006      	beq.n	800f5ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5de:	69fa      	ldr	r2, [r7, #28]
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	6938      	ldr	r0, [r7, #16]
 800f5e4:	f7ff fe15 	bl	800f212 <put_fat>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5ec:	7dfb      	ldrb	r3, [r7, #23]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d116      	bne.n	800f620 <create_chain+0x116>
		fs->last_clst = ncl;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	69fa      	ldr	r2, [r7, #28]
 800f5f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	695a      	ldr	r2, [r3, #20]
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	69db      	ldr	r3, [r3, #28]
 800f600:	3b02      	subs	r3, #2
 800f602:	429a      	cmp	r2, r3
 800f604:	d804      	bhi.n	800f610 <create_chain+0x106>
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	1e5a      	subs	r2, r3, #1
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	791b      	ldrb	r3, [r3, #4]
 800f614:	f043 0301 	orr.w	r3, r3, #1
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	711a      	strb	r2, [r3, #4]
 800f61e:	e007      	b.n	800f630 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f620:	7dfb      	ldrb	r3, [r7, #23]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d102      	bne.n	800f62c <create_chain+0x122>
 800f626:	f04f 33ff 	mov.w	r3, #4294967295
 800f62a:	e000      	b.n	800f62e <create_chain+0x124>
 800f62c:	2301      	movs	r3, #1
 800f62e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f630:	69fb      	ldr	r3, [r7, #28]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3720      	adds	r7, #32
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f63a:	b480      	push	{r7}
 800f63c:	b087      	sub	sp, #28
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f64e:	3304      	adds	r3, #4
 800f650:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	461a      	mov	r2, r3
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	8952      	ldrh	r2, [r2, #10]
 800f662:	fbb3 f3f2 	udiv	r3, r3, r2
 800f666:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	1d1a      	adds	r2, r3, #4
 800f66c:	613a      	str	r2, [r7, #16]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d101      	bne.n	800f67c <clmt_clust+0x42>
 800f678:	2300      	movs	r3, #0
 800f67a:	e010      	b.n	800f69e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	429a      	cmp	r2, r3
 800f682:	d307      	bcc.n	800f694 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	617b      	str	r3, [r7, #20]
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	3304      	adds	r3, #4
 800f690:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f692:	e7e9      	b.n	800f668 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f694:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	4413      	add	r3, r2
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	371c      	adds	r7, #28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b086      	sub	sp, #24
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6c0:	d204      	bcs.n	800f6cc <dir_sdi+0x22>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	f003 031f 	and.w	r3, r3, #31
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	e071      	b.n	800f7b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <dir_sdi+0x46>
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d902      	bls.n	800f6f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10c      	bne.n	800f710 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	095b      	lsrs	r3, r3, #5
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	8912      	ldrh	r2, [r2, #8]
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d301      	bcc.n	800f706 <dir_sdi+0x5c>
 800f702:	2302      	movs	r3, #2
 800f704:	e056      	b.n	800f7b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	61da      	str	r2, [r3, #28]
 800f70e:	e02d      	b.n	800f76c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	895b      	ldrh	r3, [r3, #10]
 800f714:	461a      	mov	r2, r3
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	899b      	ldrh	r3, [r3, #12]
 800f71a:	fb03 f302 	mul.w	r3, r3, r2
 800f71e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f720:	e019      	b.n	800f756 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6979      	ldr	r1, [r7, #20]
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fca3 	bl	800f072 <get_fat>
 800f72c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f734:	d101      	bne.n	800f73a <dir_sdi+0x90>
 800f736:	2301      	movs	r3, #1
 800f738:	e03c      	b.n	800f7b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d904      	bls.n	800f74a <dir_sdi+0xa0>
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	69db      	ldr	r3, [r3, #28]
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	429a      	cmp	r2, r3
 800f748:	d301      	bcc.n	800f74e <dir_sdi+0xa4>
 800f74a:	2302      	movs	r3, #2
 800f74c:	e032      	b.n	800f7b4 <dir_sdi+0x10a>
			ofs -= csz;
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d2e1      	bcs.n	800f722 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f75e:	6979      	ldr	r1, [r7, #20]
 800f760:	6938      	ldr	r0, [r7, #16]
 800f762:	f7ff fc67 	bl	800f034 <clust2sect>
 800f766:	4602      	mov	r2, r0
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <dir_sdi+0xd4>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e01a      	b.n	800f7b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	69da      	ldr	r2, [r3, #28]
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	899b      	ldrh	r3, [r3, #12]
 800f786:	4619      	mov	r1, r3
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f78e:	441a      	add	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	899b      	ldrh	r3, [r3, #12]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7a6:	fb02 f200 	mul.w	r2, r2, r0
 800f7aa:	1a9b      	subs	r3, r3, r2
 800f7ac:	18ca      	adds	r2, r1, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3718      	adds	r7, #24
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b086      	sub	sp, #24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	695b      	ldr	r3, [r3, #20]
 800f7d0:	3320      	adds	r3, #32
 800f7d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	69db      	ldr	r3, [r3, #28]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d003      	beq.n	800f7e4 <dir_next+0x28>
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f7e2:	d301      	bcc.n	800f7e8 <dir_next+0x2c>
 800f7e4:	2304      	movs	r3, #4
 800f7e6:	e0bb      	b.n	800f960 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7f4:	fb02 f201 	mul.w	r2, r2, r1
 800f7f8:	1a9b      	subs	r3, r3, r2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f040 809d 	bne.w	800f93a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	69db      	ldr	r3, [r3, #28]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	699b      	ldr	r3, [r3, #24]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d10b      	bne.n	800f82a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	095b      	lsrs	r3, r3, #5
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	8912      	ldrh	r2, [r2, #8]
 800f81a:	4293      	cmp	r3, r2
 800f81c:	f0c0 808d 	bcc.w	800f93a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	61da      	str	r2, [r3, #28]
 800f826:	2304      	movs	r3, #4
 800f828:	e09a      	b.n	800f960 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	461a      	mov	r2, r3
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	fbb3 f3f2 	udiv	r3, r3, r2
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	8952      	ldrh	r2, [r2, #10]
 800f83a:	3a01      	subs	r2, #1
 800f83c:	4013      	ands	r3, r2
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d17b      	bne.n	800f93a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	4619      	mov	r1, r3
 800f84a:	4610      	mov	r0, r2
 800f84c:	f7ff fc11 	bl	800f072 <get_fat>
 800f850:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d801      	bhi.n	800f85c <dir_next+0xa0>
 800f858:	2302      	movs	r3, #2
 800f85a:	e081      	b.n	800f960 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f862:	d101      	bne.n	800f868 <dir_next+0xac>
 800f864:	2301      	movs	r3, #1
 800f866:	e07b      	b.n	800f960 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	69db      	ldr	r3, [r3, #28]
 800f86c:	697a      	ldr	r2, [r7, #20]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d359      	bcc.n	800f926 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d104      	bne.n	800f882 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	61da      	str	r2, [r3, #28]
 800f87e:	2304      	movs	r3, #4
 800f880:	e06e      	b.n	800f960 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	699b      	ldr	r3, [r3, #24]
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7ff fe3d 	bl	800f50a <create_chain>
 800f890:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <dir_next+0xe0>
 800f898:	2307      	movs	r3, #7
 800f89a:	e061      	b.n	800f960 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d101      	bne.n	800f8a6 <dir_next+0xea>
 800f8a2:	2302      	movs	r3, #2
 800f8a4:	e05c      	b.n	800f960 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ac:	d101      	bne.n	800f8b2 <dir_next+0xf6>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e056      	b.n	800f960 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f7ff fadc 	bl	800ee70 <sync_window>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <dir_next+0x106>
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e04e      	b.n	800f960 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	f7ff f905 	bl	800eade <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	613b      	str	r3, [r7, #16]
 800f8d8:	6979      	ldr	r1, [r7, #20]
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	f7ff fbaa 	bl	800f034 <clust2sect>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	635a      	str	r2, [r3, #52]	; 0x34
 800f8e6:	e012      	b.n	800f90e <dir_next+0x152>
						fs->wflag = 1;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f7ff fabe 	bl	800ee70 <sync_window>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <dir_next+0x142>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e030      	b.n	800f960 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	3301      	adds	r3, #1
 800f902:	613b      	str	r3, [r7, #16]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	635a      	str	r2, [r3, #52]	; 0x34
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	895b      	ldrh	r3, [r3, #10]
 800f912:	461a      	mov	r2, r3
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	4293      	cmp	r3, r2
 800f918:	d3e6      	bcc.n	800f8e8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	1ad2      	subs	r2, r2, r3
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f92c:	6979      	ldr	r1, [r7, #20]
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f7ff fb80 	bl	800f034 <clust2sect>
 800f934:	4602      	mov	r2, r0
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	461a      	mov	r2, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f952:	fb02 f200 	mul.w	r2, r2, r0
 800f956:	1a9b      	subs	r3, r3, r2
 800f958:	18ca      	adds	r2, r1, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f978:	2100      	movs	r1, #0
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff fe95 	bl	800f6aa <dir_sdi>
 800f980:	4603      	mov	r3, r0
 800f982:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f984:	7dfb      	ldrb	r3, [r7, #23]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d12b      	bne.n	800f9e2 <dir_alloc+0x7a>
		n = 0;
 800f98a:	2300      	movs	r3, #0
 800f98c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	4619      	mov	r1, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f7ff faaf 	bl	800eef8 <move_window>
 800f99a:	4603      	mov	r3, r0
 800f99c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d11d      	bne.n	800f9e0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6a1b      	ldr	r3, [r3, #32]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2be5      	cmp	r3, #229	; 0xe5
 800f9ac:	d004      	beq.n	800f9b8 <dir_alloc+0x50>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d107      	bne.n	800f9c8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	613b      	str	r3, [r7, #16]
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d102      	bne.n	800f9cc <dir_alloc+0x64>
 800f9c6:	e00c      	b.n	800f9e2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff fef4 	bl	800f7bc <dir_next>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d0d7      	beq.n	800f98e <dir_alloc+0x26>
 800f9de:	e000      	b.n	800f9e2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f9e0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	2b04      	cmp	r3, #4
 800f9e6:	d101      	bne.n	800f9ec <dir_alloc+0x84>
 800f9e8:	2307      	movs	r3, #7
 800f9ea:	75fb      	strb	r3, [r7, #23]
	return res;
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	331a      	adds	r3, #26
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fe ffc7 	bl	800e998 <ld_word>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	2b03      	cmp	r3, #3
 800fa14:	d109      	bne.n	800fa2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	3314      	adds	r3, #20
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe ffbc 	bl	800e998 <ld_word>
 800fa20:	4603      	mov	r3, r0
 800fa22:	041b      	lsls	r3, r3, #16
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	331a      	adds	r3, #26
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	b292      	uxth	r2, r2
 800fa48:	4611      	mov	r1, r2
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe ffdf 	bl	800ea0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d109      	bne.n	800fa6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	f103 0214 	add.w	r2, r3, #20
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	0c1b      	lsrs	r3, r3, #16
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	4619      	mov	r1, r3
 800fa66:	4610      	mov	r0, r2
 800fa68:	f7fe ffd1 	bl	800ea0e <st_word>
	}
}
 800fa6c:	bf00      	nop
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fa7e:	2304      	movs	r3, #4
 800fa80:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fa88:	e03c      	b.n	800fb04 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6938      	ldr	r0, [r7, #16]
 800fa92:	f7ff fa31 	bl	800eef8 <move_window>
 800fa96:	4603      	mov	r3, r0
 800fa98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d136      	bne.n	800fb0e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d102      	bne.n	800fab4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800faae:	2304      	movs	r3, #4
 800fab0:	75fb      	strb	r3, [r7, #23]
 800fab2:	e031      	b.n	800fb18 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a1b      	ldr	r3, [r3, #32]
 800fab8:	330b      	adds	r3, #11
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fac0:	73bb      	strb	r3, [r7, #14]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	7bba      	ldrb	r2, [r7, #14]
 800fac6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
 800faca:	2be5      	cmp	r3, #229	; 0xe5
 800facc:	d011      	beq.n	800faf2 <dir_read+0x7e>
 800face:	7bfb      	ldrb	r3, [r7, #15]
 800fad0:	2b2e      	cmp	r3, #46	; 0x2e
 800fad2:	d00e      	beq.n	800faf2 <dir_read+0x7e>
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	2b0f      	cmp	r3, #15
 800fad8:	d00b      	beq.n	800faf2 <dir_read+0x7e>
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	f023 0320 	bic.w	r3, r3, #32
 800fae0:	2b08      	cmp	r3, #8
 800fae2:	bf0c      	ite	eq
 800fae4:	2301      	moveq	r3, #1
 800fae6:	2300      	movne	r3, #0
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	461a      	mov	r2, r3
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	4293      	cmp	r3, r2
 800faf0:	d00f      	beq.n	800fb12 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800faf2:	2100      	movs	r1, #0
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7ff fe61 	bl	800f7bc <dir_next>
 800fafa:	4603      	mov	r3, r0
 800fafc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fafe:	7dfb      	ldrb	r3, [r7, #23]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d108      	bne.n	800fb16 <dir_read+0xa2>
	while (dp->sect) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	69db      	ldr	r3, [r3, #28]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1be      	bne.n	800fa8a <dir_read+0x16>
 800fb0c:	e004      	b.n	800fb18 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fb0e:	bf00      	nop
 800fb10:	e002      	b.n	800fb18 <dir_read+0xa4>
				break;
 800fb12:	bf00      	nop
 800fb14:	e000      	b.n	800fb18 <dir_read+0xa4>
		if (res != FR_OK) break;
 800fb16:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800fb18:	7dfb      	ldrb	r3, [r7, #23]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <dir_read+0xb0>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	61da      	str	r2, [r3, #28]
	return res;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b086      	sub	sp, #24
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff fdb3 	bl	800f6aa <dir_sdi>
 800fb44:	4603      	mov	r3, r0
 800fb46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <dir_find+0x24>
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	e03e      	b.n	800fbd0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6938      	ldr	r0, [r7, #16]
 800fb5a:	f7ff f9cd 	bl	800eef8 <move_window>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d12f      	bne.n	800fbc8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a1b      	ldr	r3, [r3, #32]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <dir_find+0x4e>
 800fb76:	2304      	movs	r3, #4
 800fb78:	75fb      	strb	r3, [r7, #23]
 800fb7a:	e028      	b.n	800fbce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a1b      	ldr	r3, [r3, #32]
 800fb80:	330b      	adds	r3, #11
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	330b      	adds	r3, #11
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0308 	and.w	r3, r3, #8
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10a      	bne.n	800fbb4 <dir_find+0x86>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a18      	ldr	r0, [r3, #32]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	3324      	adds	r3, #36	; 0x24
 800fba6:	220b      	movs	r2, #11
 800fba8:	4619      	mov	r1, r3
 800fbaa:	f7fe ffb2 	bl	800eb12 <mem_cmp>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00b      	beq.n	800fbcc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f7ff fe00 	bl	800f7bc <dir_next>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fbc0:	7dfb      	ldrb	r3, [r7, #23]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0c5      	beq.n	800fb52 <dir_find+0x24>
 800fbc6:	e002      	b.n	800fbce <dir_find+0xa0>
		if (res != FR_OK) break;
 800fbc8:	bf00      	nop
 800fbca:	e000      	b.n	800fbce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fbcc:	bf00      	nop

	return res;
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3718      	adds	r7, #24
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff febd 	bl	800f968 <dir_alloc>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d11c      	bne.n	800fc32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	69db      	ldr	r3, [r3, #28]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	68b8      	ldr	r0, [r7, #8]
 800fc00:	f7ff f97a 	bl	800eef8 <move_window>
 800fc04:	4603      	mov	r3, r0
 800fc06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d111      	bne.n	800fc32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6a1b      	ldr	r3, [r3, #32]
 800fc12:	2220      	movs	r2, #32
 800fc14:	2100      	movs	r1, #0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe ff61 	bl	800eade <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6a18      	ldr	r0, [r3, #32]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3324      	adds	r3, #36	; 0x24
 800fc24:	220b      	movs	r2, #11
 800fc26:	4619      	mov	r1, r3
 800fc28:	f7fe ff38 	bl	800ea9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	69db      	ldr	r3, [r3, #28]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7ff f951 	bl	800eef8 <move_window>
 800fc56:	4603      	mov	r3, r0
 800fc58:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800fc5a:	7afb      	ldrb	r3, [r7, #11]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d106      	bne.n	800fc6e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6a1b      	ldr	r3, [r3, #32]
 800fc64:	22e5      	movs	r2, #229	; 0xe5
 800fc66:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800fc6e:	7afb      	ldrb	r3, [r7, #11]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	60fb      	str	r3, [r7, #12]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3324      	adds	r3, #36	; 0x24
 800fc8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fc8e:	220b      	movs	r2, #11
 800fc90:	2120      	movs	r1, #32
 800fc92:	68b8      	ldr	r0, [r7, #8]
 800fc94:	f7fe ff23 	bl	800eade <mem_set>
	si = i = 0; ni = 8;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	613b      	str	r3, [r7, #16]
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	617b      	str	r3, [r7, #20]
 800fca0:	2308      	movs	r3, #8
 800fca2:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	4413      	add	r3, r2
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b2e      	cmp	r3, #46	; 0x2e
 800fcae:	d12f      	bne.n	800fd10 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	617a      	str	r2, [r7, #20]
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	4413      	add	r3, r2
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800fcbe:	7ffb      	ldrb	r3, [r7, #31]
 800fcc0:	2b2e      	cmp	r3, #46	; 0x2e
 800fcc2:	d10a      	bne.n	800fcda <create_name+0x62>
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	2b02      	cmp	r3, #2
 800fcc8:	d807      	bhi.n	800fcda <create_name+0x62>
			sfn[i++] = c;
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	1c5a      	adds	r2, r3, #1
 800fcce:	613a      	str	r2, [r7, #16]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	4413      	add	r3, r2
 800fcd4:	7ffa      	ldrb	r2, [r7, #31]
 800fcd6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800fcd8:	e7ea      	b.n	800fcb0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800fcda:	7ffb      	ldrb	r3, [r7, #31]
 800fcdc:	2b2f      	cmp	r3, #47	; 0x2f
 800fcde:	d007      	beq.n	800fcf0 <create_name+0x78>
 800fce0:	7ffb      	ldrb	r3, [r7, #31]
 800fce2:	2b5c      	cmp	r3, #92	; 0x5c
 800fce4:	d004      	beq.n	800fcf0 <create_name+0x78>
 800fce6:	7ffb      	ldrb	r3, [r7, #31]
 800fce8:	2b20      	cmp	r3, #32
 800fcea:	d901      	bls.n	800fcf0 <create_name+0x78>
 800fcec:	2306      	movs	r3, #6
 800fcee:	e084      	b.n	800fdfa <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800fcfa:	7ffb      	ldrb	r3, [r7, #31]
 800fcfc:	2b20      	cmp	r3, #32
 800fcfe:	d801      	bhi.n	800fd04 <create_name+0x8c>
 800fd00:	2224      	movs	r2, #36	; 0x24
 800fd02:	e000      	b.n	800fd06 <create_name+0x8e>
 800fd04:	2220      	movs	r2, #32
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	330b      	adds	r3, #11
 800fd0a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	e074      	b.n	800fdfa <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	1c5a      	adds	r2, r3, #1
 800fd14:	617a      	str	r2, [r7, #20]
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	4413      	add	r3, r2
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fd1e:	7ffb      	ldrb	r3, [r7, #31]
 800fd20:	2b20      	cmp	r3, #32
 800fd22:	d94e      	bls.n	800fdc2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fd24:	7ffb      	ldrb	r3, [r7, #31]
 800fd26:	2b2f      	cmp	r3, #47	; 0x2f
 800fd28:	d006      	beq.n	800fd38 <create_name+0xc0>
 800fd2a:	7ffb      	ldrb	r3, [r7, #31]
 800fd2c:	2b5c      	cmp	r3, #92	; 0x5c
 800fd2e:	d110      	bne.n	800fd52 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fd30:	e002      	b.n	800fd38 <create_name+0xc0>
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	3301      	adds	r3, #1
 800fd36:	617b      	str	r3, [r7, #20]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	2b2f      	cmp	r3, #47	; 0x2f
 800fd42:	d0f6      	beq.n	800fd32 <create_name+0xba>
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2b5c      	cmp	r3, #92	; 0x5c
 800fd4e:	d0f0      	beq.n	800fd32 <create_name+0xba>
			break;
 800fd50:	e038      	b.n	800fdc4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fd52:	7ffb      	ldrb	r3, [r7, #31]
 800fd54:	2b2e      	cmp	r3, #46	; 0x2e
 800fd56:	d003      	beq.n	800fd60 <create_name+0xe8>
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d30c      	bcc.n	800fd7a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	2b0b      	cmp	r3, #11
 800fd64:	d002      	beq.n	800fd6c <create_name+0xf4>
 800fd66:	7ffb      	ldrb	r3, [r7, #31]
 800fd68:	2b2e      	cmp	r3, #46	; 0x2e
 800fd6a:	d001      	beq.n	800fd70 <create_name+0xf8>
 800fd6c:	2306      	movs	r3, #6
 800fd6e:	e044      	b.n	800fdfa <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800fd70:	2308      	movs	r3, #8
 800fd72:	613b      	str	r3, [r7, #16]
 800fd74:	230b      	movs	r3, #11
 800fd76:	61bb      	str	r3, [r7, #24]
			continue;
 800fd78:	e022      	b.n	800fdc0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fd7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	da04      	bge.n	800fd8c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fd82:	7ffb      	ldrb	r3, [r7, #31]
 800fd84:	3b80      	subs	r3, #128	; 0x80
 800fd86:	4a1f      	ldr	r2, [pc, #124]	; (800fe04 <create_name+0x18c>)
 800fd88:	5cd3      	ldrb	r3, [r2, r3]
 800fd8a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fd8c:	7ffb      	ldrb	r3, [r7, #31]
 800fd8e:	4619      	mov	r1, r3
 800fd90:	481d      	ldr	r0, [pc, #116]	; (800fe08 <create_name+0x190>)
 800fd92:	f7fe fee5 	bl	800eb60 <chk_chr>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d001      	beq.n	800fda0 <create_name+0x128>
 800fd9c:	2306      	movs	r3, #6
 800fd9e:	e02c      	b.n	800fdfa <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fda0:	7ffb      	ldrb	r3, [r7, #31]
 800fda2:	2b60      	cmp	r3, #96	; 0x60
 800fda4:	d905      	bls.n	800fdb2 <create_name+0x13a>
 800fda6:	7ffb      	ldrb	r3, [r7, #31]
 800fda8:	2b7a      	cmp	r3, #122	; 0x7a
 800fdaa:	d802      	bhi.n	800fdb2 <create_name+0x13a>
 800fdac:	7ffb      	ldrb	r3, [r7, #31]
 800fdae:	3b20      	subs	r3, #32
 800fdb0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	1c5a      	adds	r2, r3, #1
 800fdb6:	613a      	str	r2, [r7, #16]
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	4413      	add	r3, r2
 800fdbc:	7ffa      	ldrb	r2, [r7, #31]
 800fdbe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fdc0:	e7a6      	b.n	800fd10 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fdc2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	441a      	add	r2, r3
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <create_name+0x160>
 800fdd4:	2306      	movs	r3, #6
 800fdd6:	e010      	b.n	800fdfa <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	2be5      	cmp	r3, #229	; 0xe5
 800fdde:	d102      	bne.n	800fde6 <create_name+0x16e>
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	2205      	movs	r2, #5
 800fde4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fde6:	7ffb      	ldrb	r3, [r7, #31]
 800fde8:	2b20      	cmp	r3, #32
 800fdea:	d801      	bhi.n	800fdf0 <create_name+0x178>
 800fdec:	2204      	movs	r2, #4
 800fdee:	e000      	b.n	800fdf2 <create_name+0x17a>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	330b      	adds	r3, #11
 800fdf6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fdf8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3720      	adds	r7, #32
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	08018004 	.word	0x08018004
 800fe08:	08017fb4 	.word	0x08017fb4

0800fe0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b086      	sub	sp, #24
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b2f      	cmp	r3, #47	; 0x2f
 800fe26:	d00b      	beq.n	800fe40 <follow_path+0x34>
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe2e:	d007      	beq.n	800fe40 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	699a      	ldr	r2, [r3, #24]
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	609a      	str	r2, [r3, #8]
 800fe38:	e00d      	b.n	800fe56 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	603b      	str	r3, [r7, #0]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	2b2f      	cmp	r3, #47	; 0x2f
 800fe46:	d0f8      	beq.n	800fe3a <follow_path+0x2e>
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe4e:	d0f4      	beq.n	800fe3a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2200      	movs	r2, #0
 800fe54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b1f      	cmp	r3, #31
 800fe5c:	d80a      	bhi.n	800fe74 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2280      	movs	r2, #128	; 0x80
 800fe62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fe66:	2100      	movs	r1, #0
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fc1e 	bl	800f6aa <dir_sdi>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	75fb      	strb	r3, [r7, #23]
 800fe72:	e05b      	b.n	800ff2c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe74:	463b      	mov	r3, r7
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff fefd 	bl	800fc78 <create_name>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d14c      	bne.n	800ff22 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff fe50 	bl	800fb2e <dir_find>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fe9a:	7dfb      	ldrb	r3, [r7, #23]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d01b      	beq.n	800fed8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fea0:	7dfb      	ldrb	r3, [r7, #23]
 800fea2:	2b04      	cmp	r3, #4
 800fea4:	d13f      	bne.n	800ff26 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fea6:	7afb      	ldrb	r3, [r7, #11]
 800fea8:	f003 0320 	and.w	r3, r3, #32
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00b      	beq.n	800fec8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800feb0:	7afb      	ldrb	r3, [r7, #11]
 800feb2:	f003 0304 	and.w	r3, r3, #4
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d031      	beq.n	800ff1e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2280      	movs	r2, #128	; 0x80
 800febe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fec2:	2300      	movs	r3, #0
 800fec4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fec6:	e02e      	b.n	800ff26 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fec8:	7afb      	ldrb	r3, [r7, #11]
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d129      	bne.n	800ff26 <follow_path+0x11a>
 800fed2:	2305      	movs	r3, #5
 800fed4:	75fb      	strb	r3, [r7, #23]
				break;
 800fed6:	e026      	b.n	800ff26 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fed8:	7afb      	ldrb	r3, [r7, #11]
 800feda:	f003 0304 	and.w	r3, r3, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d123      	bne.n	800ff2a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	799b      	ldrb	r3, [r3, #6]
 800fee6:	f003 0310 	and.w	r3, r3, #16
 800feea:	2b00      	cmp	r3, #0
 800feec:	d102      	bne.n	800fef4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800feee:	2305      	movs	r3, #5
 800fef0:	75fb      	strb	r3, [r7, #23]
 800fef2:	e01b      	b.n	800ff2c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	8992      	ldrh	r2, [r2, #12]
 800ff02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff06:	fb02 f200 	mul.w	r2, r2, r0
 800ff0a:	1a9b      	subs	r3, r3, r2
 800ff0c:	440b      	add	r3, r1
 800ff0e:	4619      	mov	r1, r3
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fd70 	bl	800f9f6 <ld_clust>
 800ff16:	4602      	mov	r2, r0
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	609a      	str	r2, [r3, #8]
 800ff1c:	e7aa      	b.n	800fe74 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ff1e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff20:	e7a8      	b.n	800fe74 <follow_path+0x68>
			if (res != FR_OK) break;
 800ff22:	bf00      	nop
 800ff24:	e002      	b.n	800ff2c <follow_path+0x120>
				break;
 800ff26:	bf00      	nop
 800ff28:	e000      	b.n	800ff2c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff2a:	bf00      	nop
			}
		}
	}

	return res;
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ff36:	b480      	push	{r7}
 800ff38:	b087      	sub	sp, #28
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ff3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d031      	beq.n	800ffb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	617b      	str	r3, [r7, #20]
 800ff52:	e002      	b.n	800ff5a <get_ldnumber+0x24>
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	3301      	adds	r3, #1
 800ff58:	617b      	str	r3, [r7, #20]
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b20      	cmp	r3, #32
 800ff60:	d903      	bls.n	800ff6a <get_ldnumber+0x34>
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	2b3a      	cmp	r3, #58	; 0x3a
 800ff68:	d1f4      	bne.n	800ff54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b3a      	cmp	r3, #58	; 0x3a
 800ff70:	d11c      	bne.n	800ffac <get_ldnumber+0x76>
			tp = *path;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	60fa      	str	r2, [r7, #12]
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	3b30      	subs	r3, #48	; 0x30
 800ff82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	2b09      	cmp	r3, #9
 800ff88:	d80e      	bhi.n	800ffa8 <get_ldnumber+0x72>
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d10a      	bne.n	800ffa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d107      	bne.n	800ffa8 <get_ldnumber+0x72>
					vol = (int)i;
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	617b      	str	r3, [r7, #20]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	697a      	ldr	r2, [r7, #20]
 800ffa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	e002      	b.n	800ffb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ffac:	2300      	movs	r3, #0
 800ffae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ffb0:	693b      	ldr	r3, [r7, #16]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	371c      	adds	r7, #28
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
	...

0800ffc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	70da      	strb	r2, [r3, #3]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7fe ff8c 	bl	800eef8 <move_window>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <check_fs+0x2a>
 800ffe6:	2304      	movs	r3, #4
 800ffe8:	e038      	b.n	801005c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3338      	adds	r3, #56	; 0x38
 800ffee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe fcd0 	bl	800e998 <ld_word>
 800fff8:	4603      	mov	r3, r0
 800fffa:	461a      	mov	r2, r3
 800fffc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010000:	429a      	cmp	r2, r3
 8010002:	d001      	beq.n	8010008 <check_fs+0x48>
 8010004:	2303      	movs	r3, #3
 8010006:	e029      	b.n	801005c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801000e:	2be9      	cmp	r3, #233	; 0xe9
 8010010:	d009      	beq.n	8010026 <check_fs+0x66>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010018:	2beb      	cmp	r3, #235	; 0xeb
 801001a:	d11e      	bne.n	801005a <check_fs+0x9a>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010022:	2b90      	cmp	r3, #144	; 0x90
 8010024:	d119      	bne.n	801005a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3338      	adds	r3, #56	; 0x38
 801002a:	3336      	adds	r3, #54	; 0x36
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fccb 	bl	800e9c8 <ld_dword>
 8010032:	4603      	mov	r3, r0
 8010034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010038:	4a0a      	ldr	r2, [pc, #40]	; (8010064 <check_fs+0xa4>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d101      	bne.n	8010042 <check_fs+0x82>
 801003e:	2300      	movs	r3, #0
 8010040:	e00c      	b.n	801005c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3338      	adds	r3, #56	; 0x38
 8010046:	3352      	adds	r3, #82	; 0x52
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe fcbd 	bl	800e9c8 <ld_dword>
 801004e:	4602      	mov	r2, r0
 8010050:	4b05      	ldr	r3, [pc, #20]	; (8010068 <check_fs+0xa8>)
 8010052:	429a      	cmp	r2, r3
 8010054:	d101      	bne.n	801005a <check_fs+0x9a>
 8010056:	2300      	movs	r3, #0
 8010058:	e000      	b.n	801005c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801005a:	2302      	movs	r3, #2
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	00544146 	.word	0x00544146
 8010068:	33544146 	.word	0x33544146

0801006c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b096      	sub	sp, #88	; 0x58
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	4613      	mov	r3, r2
 8010078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2200      	movs	r2, #0
 801007e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f7ff ff58 	bl	800ff36 <get_ldnumber>
 8010086:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801008a:	2b00      	cmp	r3, #0
 801008c:	da01      	bge.n	8010092 <find_volume+0x26>
 801008e:	230b      	movs	r3, #11
 8010090:	e268      	b.n	8010564 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010092:	4ab0      	ldr	r2, [pc, #704]	; (8010354 <find_volume+0x2e8>)
 8010094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801009a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <find_volume+0x3a>
 80100a2:	230c      	movs	r3, #12
 80100a4:	e25e      	b.n	8010564 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	f023 0301 	bic.w	r3, r3, #1
 80100b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d01a      	beq.n	80100f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	785b      	ldrb	r3, [r3, #1]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fe fbcb 	bl	800e85c <disk_status>
 80100c6:	4603      	mov	r3, r0
 80100c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80100cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10c      	bne.n	80100f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d007      	beq.n	80100ee <find_volume+0x82>
 80100de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e2:	f003 0304 	and.w	r3, r3, #4
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80100ea:	230a      	movs	r3, #10
 80100ec:	e23a      	b.n	8010564 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80100ee:	2300      	movs	r3, #0
 80100f0:	e238      	b.n	8010564 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	2200      	movs	r2, #0
 80100f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80100f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100fa:	b2da      	uxtb	r2, r3
 80100fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010102:	785b      	ldrb	r3, [r3, #1]
 8010104:	4618      	mov	r0, r3
 8010106:	f7fe fbc3 	bl	800e890 <disk_initialize>
 801010a:	4603      	mov	r3, r0
 801010c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801011c:	2303      	movs	r3, #3
 801011e:	e221      	b.n	8010564 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010120:	79fb      	ldrb	r3, [r7, #7]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d007      	beq.n	8010136 <find_volume+0xca>
 8010126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801012a:	f003 0304 	and.w	r3, r3, #4
 801012e:	2b00      	cmp	r3, #0
 8010130:	d001      	beq.n	8010136 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010132:	230a      	movs	r3, #10
 8010134:	e216      	b.n	8010564 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	7858      	ldrb	r0, [r3, #1]
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	330c      	adds	r3, #12
 801013e:	461a      	mov	r2, r3
 8010140:	2102      	movs	r1, #2
 8010142:	f7fe fc0b 	bl	800e95c <disk_ioctl>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <find_volume+0xe4>
 801014c:	2301      	movs	r3, #1
 801014e:	e209      	b.n	8010564 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010152:	899b      	ldrh	r3, [r3, #12]
 8010154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010158:	d80d      	bhi.n	8010176 <find_volume+0x10a>
 801015a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015c:	899b      	ldrh	r3, [r3, #12]
 801015e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010162:	d308      	bcc.n	8010176 <find_volume+0x10a>
 8010164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010166:	899b      	ldrh	r3, [r3, #12]
 8010168:	461a      	mov	r2, r3
 801016a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016c:	899b      	ldrh	r3, [r3, #12]
 801016e:	3b01      	subs	r3, #1
 8010170:	4013      	ands	r3, r2
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <find_volume+0x10e>
 8010176:	2301      	movs	r3, #1
 8010178:	e1f4      	b.n	8010564 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801017e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010182:	f7ff ff1d 	bl	800ffc0 <check_fs>
 8010186:	4603      	mov	r3, r0
 8010188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801018c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010190:	2b02      	cmp	r3, #2
 8010192:	d14b      	bne.n	801022c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010194:	2300      	movs	r3, #0
 8010196:	643b      	str	r3, [r7, #64]	; 0x40
 8010198:	e01f      	b.n	80101da <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801019a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80101a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101a2:	011b      	lsls	r3, r3, #4
 80101a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80101a8:	4413      	add	r3, r2
 80101aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	3304      	adds	r3, #4
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d006      	beq.n	80101c4 <find_volume+0x158>
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	3308      	adds	r3, #8
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fc04 	bl	800e9c8 <ld_dword>
 80101c0:	4602      	mov	r2, r0
 80101c2:	e000      	b.n	80101c6 <find_volume+0x15a>
 80101c4:	2200      	movs	r2, #0
 80101c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80101ce:	440b      	add	r3, r1
 80101d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80101d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101d6:	3301      	adds	r3, #1
 80101d8:	643b      	str	r3, [r7, #64]	; 0x40
 80101da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101dc:	2b03      	cmp	r3, #3
 80101de:	d9dc      	bls.n	801019a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80101e0:	2300      	movs	r3, #0
 80101e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80101e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d002      	beq.n	80101f0 <find_volume+0x184>
 80101ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ec:	3b01      	subs	r3, #1
 80101ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80101f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80101f8:	4413      	add	r3, r2
 80101fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80101fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <find_volume+0x1a6>
 8010206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801020a:	f7ff fed9 	bl	800ffc0 <check_fs>
 801020e:	4603      	mov	r3, r0
 8010210:	e000      	b.n	8010214 <find_volume+0x1a8>
 8010212:	2303      	movs	r3, #3
 8010214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801021c:	2b01      	cmp	r3, #1
 801021e:	d905      	bls.n	801022c <find_volume+0x1c0>
 8010220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010222:	3301      	adds	r3, #1
 8010224:	643b      	str	r3, [r7, #64]	; 0x40
 8010226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010228:	2b03      	cmp	r3, #3
 801022a:	d9e1      	bls.n	80101f0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801022c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010230:	2b04      	cmp	r3, #4
 8010232:	d101      	bne.n	8010238 <find_volume+0x1cc>
 8010234:	2301      	movs	r3, #1
 8010236:	e195      	b.n	8010564 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801023c:	2b01      	cmp	r3, #1
 801023e:	d901      	bls.n	8010244 <find_volume+0x1d8>
 8010240:	230d      	movs	r3, #13
 8010242:	e18f      	b.n	8010564 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	3338      	adds	r3, #56	; 0x38
 8010248:	330b      	adds	r3, #11
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe fba4 	bl	800e998 <ld_word>
 8010250:	4603      	mov	r3, r0
 8010252:	461a      	mov	r2, r3
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	899b      	ldrh	r3, [r3, #12]
 8010258:	429a      	cmp	r2, r3
 801025a:	d001      	beq.n	8010260 <find_volume+0x1f4>
 801025c:	230d      	movs	r3, #13
 801025e:	e181      	b.n	8010564 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	3338      	adds	r3, #56	; 0x38
 8010264:	3316      	adds	r3, #22
 8010266:	4618      	mov	r0, r3
 8010268:	f7fe fb96 	bl	800e998 <ld_word>
 801026c:	4603      	mov	r3, r0
 801026e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <find_volume+0x218>
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	3338      	adds	r3, #56	; 0x38
 801027a:	3324      	adds	r3, #36	; 0x24
 801027c:	4618      	mov	r0, r3
 801027e:	f7fe fba3 	bl	800e9c8 <ld_dword>
 8010282:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010288:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	789b      	ldrb	r3, [r3, #2]
 8010298:	2b01      	cmp	r3, #1
 801029a:	d005      	beq.n	80102a8 <find_volume+0x23c>
 801029c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029e:	789b      	ldrb	r3, [r3, #2]
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d001      	beq.n	80102a8 <find_volume+0x23c>
 80102a4:	230d      	movs	r3, #13
 80102a6:	e15d      	b.n	8010564 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80102a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102aa:	789b      	ldrb	r3, [r3, #2]
 80102ac:	461a      	mov	r2, r3
 80102ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102b0:	fb02 f303 	mul.w	r3, r2, r3
 80102b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80102b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102bc:	b29a      	uxth	r2, r3
 80102be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	895b      	ldrh	r3, [r3, #10]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d008      	beq.n	80102dc <find_volume+0x270>
 80102ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102cc:	895b      	ldrh	r3, [r3, #10]
 80102ce:	461a      	mov	r2, r3
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	4013      	ands	r3, r2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <find_volume+0x274>
 80102dc:	230d      	movs	r3, #13
 80102de:	e141      	b.n	8010564 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	3338      	adds	r3, #56	; 0x38
 80102e4:	3311      	adds	r3, #17
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fe fb56 	bl	800e998 <ld_word>
 80102ec:	4603      	mov	r3, r0
 80102ee:	461a      	mov	r2, r3
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80102f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f6:	891b      	ldrh	r3, [r3, #8]
 80102f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102fa:	8992      	ldrh	r2, [r2, #12]
 80102fc:	0952      	lsrs	r2, r2, #5
 80102fe:	b292      	uxth	r2, r2
 8010300:	fbb3 f1f2 	udiv	r1, r3, r2
 8010304:	fb02 f201 	mul.w	r2, r2, r1
 8010308:	1a9b      	subs	r3, r3, r2
 801030a:	b29b      	uxth	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <find_volume+0x2a8>
 8010310:	230d      	movs	r3, #13
 8010312:	e127      	b.n	8010564 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010316:	3338      	adds	r3, #56	; 0x38
 8010318:	3313      	adds	r3, #19
 801031a:	4618      	mov	r0, r3
 801031c:	f7fe fb3c 	bl	800e998 <ld_word>
 8010320:	4603      	mov	r3, r0
 8010322:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010326:	2b00      	cmp	r3, #0
 8010328:	d106      	bne.n	8010338 <find_volume+0x2cc>
 801032a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032c:	3338      	adds	r3, #56	; 0x38
 801032e:	3320      	adds	r3, #32
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe fb49 	bl	800e9c8 <ld_dword>
 8010336:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	3338      	adds	r3, #56	; 0x38
 801033c:	330e      	adds	r3, #14
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe fb2a 	bl	800e998 <ld_word>
 8010344:	4603      	mov	r3, r0
 8010346:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801034a:	2b00      	cmp	r3, #0
 801034c:	d104      	bne.n	8010358 <find_volume+0x2ec>
 801034e:	230d      	movs	r3, #13
 8010350:	e108      	b.n	8010564 <find_volume+0x4f8>
 8010352:	bf00      	nop
 8010354:	2003743c 	.word	0x2003743c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010358:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801035a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801035c:	4413      	add	r3, r2
 801035e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010360:	8911      	ldrh	r1, [r2, #8]
 8010362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010364:	8992      	ldrh	r2, [r2, #12]
 8010366:	0952      	lsrs	r2, r2, #5
 8010368:	b292      	uxth	r2, r2
 801036a:	fbb1 f2f2 	udiv	r2, r1, r2
 801036e:	b292      	uxth	r2, r2
 8010370:	4413      	add	r3, r2
 8010372:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	429a      	cmp	r2, r3
 801037a:	d201      	bcs.n	8010380 <find_volume+0x314>
 801037c:	230d      	movs	r3, #13
 801037e:	e0f1      	b.n	8010564 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010384:	1ad3      	subs	r3, r2, r3
 8010386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010388:	8952      	ldrh	r2, [r2, #10]
 801038a:	fbb3 f3f2 	udiv	r3, r3, r2
 801038e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	2b00      	cmp	r3, #0
 8010394:	d101      	bne.n	801039a <find_volume+0x32e>
 8010396:	230d      	movs	r3, #13
 8010398:	e0e4      	b.n	8010564 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801039a:	2303      	movs	r3, #3
 801039c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d802      	bhi.n	80103b0 <find_volume+0x344>
 80103aa:	2302      	movs	r3, #2
 80103ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d802      	bhi.n	80103c0 <find_volume+0x354>
 80103ba:	2301      	movs	r3, #1
 80103bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	1c9a      	adds	r2, r3, #2
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80103c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80103ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d2:	441a      	add	r2, r3
 80103d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80103d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	441a      	add	r2, r3
 80103de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80103e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d11e      	bne.n	8010428 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	3338      	adds	r3, #56	; 0x38
 80103ee:	332a      	adds	r3, #42	; 0x2a
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fe fad1 	bl	800e998 <ld_word>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d001      	beq.n	8010400 <find_volume+0x394>
 80103fc:	230d      	movs	r3, #13
 80103fe:	e0b1      	b.n	8010564 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	891b      	ldrh	r3, [r3, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <find_volume+0x3a0>
 8010408:	230d      	movs	r3, #13
 801040a:	e0ab      	b.n	8010564 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	3338      	adds	r3, #56	; 0x38
 8010410:	332c      	adds	r3, #44	; 0x2c
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fad8 	bl	800e9c8 <ld_dword>
 8010418:	4602      	mov	r2, r0
 801041a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801041e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010420:	69db      	ldr	r3, [r3, #28]
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	647b      	str	r3, [r7, #68]	; 0x44
 8010426:	e01f      	b.n	8010468 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	891b      	ldrh	r3, [r3, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <find_volume+0x3c8>
 8010430:	230d      	movs	r3, #13
 8010432:	e097      	b.n	8010564 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801043a:	441a      	add	r2, r3
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010444:	2b02      	cmp	r3, #2
 8010446:	d103      	bne.n	8010450 <find_volume+0x3e4>
 8010448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044a:	69db      	ldr	r3, [r3, #28]
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	e00a      	b.n	8010466 <find_volume+0x3fa>
 8010450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010452:	69da      	ldr	r2, [r3, #28]
 8010454:	4613      	mov	r3, r2
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	4413      	add	r3, r2
 801045a:	085a      	lsrs	r2, r3, #1
 801045c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045e:	69db      	ldr	r3, [r3, #28]
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010466:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	6a1a      	ldr	r2, [r3, #32]
 801046c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046e:	899b      	ldrh	r3, [r3, #12]
 8010470:	4619      	mov	r1, r3
 8010472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010474:	440b      	add	r3, r1
 8010476:	3b01      	subs	r3, #1
 8010478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801047a:	8989      	ldrh	r1, [r1, #12]
 801047c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010480:	429a      	cmp	r2, r3
 8010482:	d201      	bcs.n	8010488 <find_volume+0x41c>
 8010484:	230d      	movs	r3, #13
 8010486:	e06d      	b.n	8010564 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	f04f 32ff 	mov.w	r2, #4294967295
 801048e:	615a      	str	r2, [r3, #20]
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	695a      	ldr	r2, [r3, #20]
 8010494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010496:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	2280      	movs	r2, #128	; 0x80
 801049c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801049e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	d149      	bne.n	801053a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	3338      	adds	r3, #56	; 0x38
 80104aa:	3330      	adds	r3, #48	; 0x30
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7fe fa73 	bl	800e998 <ld_word>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d140      	bne.n	801053a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80104b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ba:	3301      	adds	r3, #1
 80104bc:	4619      	mov	r1, r3
 80104be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104c0:	f7fe fd1a 	bl	800eef8 <move_window>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d137      	bne.n	801053a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	2200      	movs	r2, #0
 80104ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80104d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d2:	3338      	adds	r3, #56	; 0x38
 80104d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fa5d 	bl	800e998 <ld_word>
 80104de:	4603      	mov	r3, r0
 80104e0:	461a      	mov	r2, r3
 80104e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d127      	bne.n	801053a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80104ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ec:	3338      	adds	r3, #56	; 0x38
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fe fa6a 	bl	800e9c8 <ld_dword>
 80104f4:	4602      	mov	r2, r0
 80104f6:	4b1d      	ldr	r3, [pc, #116]	; (801056c <find_volume+0x500>)
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d11e      	bne.n	801053a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80104fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fe:	3338      	adds	r3, #56	; 0x38
 8010500:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fa5f 	bl	800e9c8 <ld_dword>
 801050a:	4602      	mov	r2, r0
 801050c:	4b18      	ldr	r3, [pc, #96]	; (8010570 <find_volume+0x504>)
 801050e:	429a      	cmp	r2, r3
 8010510:	d113      	bne.n	801053a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010514:	3338      	adds	r3, #56	; 0x38
 8010516:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801051a:	4618      	mov	r0, r3
 801051c:	f7fe fa54 	bl	800e9c8 <ld_dword>
 8010520:	4602      	mov	r2, r0
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010528:	3338      	adds	r3, #56	; 0x38
 801052a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe fa4a 	bl	800e9c8 <ld_dword>
 8010534:	4602      	mov	r2, r0
 8010536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010538:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010540:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010542:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <find_volume+0x508>)
 8010544:	881b      	ldrh	r3, [r3, #0]
 8010546:	3301      	adds	r3, #1
 8010548:	b29a      	uxth	r2, r3
 801054a:	4b0a      	ldr	r3, [pc, #40]	; (8010574 <find_volume+0x508>)
 801054c:	801a      	strh	r2, [r3, #0]
 801054e:	4b09      	ldr	r3, [pc, #36]	; (8010574 <find_volume+0x508>)
 8010550:	881a      	ldrh	r2, [r3, #0]
 8010552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010554:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	2200      	movs	r2, #0
 801055a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801055c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801055e:	f7fe fc63 	bl	800ee28 <clear_lock>
#endif
	return FR_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3758      	adds	r7, #88	; 0x58
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	41615252 	.word	0x41615252
 8010570:	61417272 	.word	0x61417272
 8010574:	20037440 	.word	0x20037440

08010578 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010582:	2309      	movs	r3, #9
 8010584:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d01c      	beq.n	80105c6 <validate+0x4e>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d018      	beq.n	80105c6 <validate+0x4e>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d013      	beq.n	80105c6 <validate+0x4e>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	889a      	ldrh	r2, [r3, #4]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	88db      	ldrh	r3, [r3, #6]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d10c      	bne.n	80105c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	785b      	ldrb	r3, [r3, #1]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fe f952 	bl	800e85c <disk_status>
 80105b8:	4603      	mov	r3, r0
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d101      	bne.n	80105c6 <validate+0x4e>
			res = FR_OK;
 80105c2:	2300      	movs	r3, #0
 80105c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80105c6:	7bfb      	ldrb	r3, [r7, #15]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <validate+0x5a>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	e000      	b.n	80105d4 <validate+0x5c>
 80105d2:	2300      	movs	r3, #0
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	6013      	str	r3, [r2, #0]
	return res;
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
	...

080105e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b088      	sub	sp, #32
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	4613      	mov	r3, r2
 80105f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80105f6:	f107 0310 	add.w	r3, r7, #16
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff fc9b 	bl	800ff36 <get_ldnumber>
 8010600:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	2b00      	cmp	r3, #0
 8010606:	da01      	bge.n	801060c <f_mount+0x28>
 8010608:	230b      	movs	r3, #11
 801060a:	e02b      	b.n	8010664 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801060c:	4a17      	ldr	r2, [pc, #92]	; (801066c <f_mount+0x88>)
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010614:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d005      	beq.n	8010628 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801061c:	69b8      	ldr	r0, [r7, #24]
 801061e:	f7fe fc03 	bl	800ee28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2200      	movs	r2, #0
 8010626:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d002      	beq.n	8010634 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2200      	movs	r2, #0
 8010632:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010634:	68fa      	ldr	r2, [r7, #12]
 8010636:	490d      	ldr	r1, [pc, #52]	; (801066c <f_mount+0x88>)
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <f_mount+0x66>
 8010644:	79fb      	ldrb	r3, [r7, #7]
 8010646:	2b01      	cmp	r3, #1
 8010648:	d001      	beq.n	801064e <f_mount+0x6a>
 801064a:	2300      	movs	r3, #0
 801064c:	e00a      	b.n	8010664 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801064e:	f107 010c 	add.w	r1, r7, #12
 8010652:	f107 0308 	add.w	r3, r7, #8
 8010656:	2200      	movs	r2, #0
 8010658:	4618      	mov	r0, r3
 801065a:	f7ff fd07 	bl	801006c <find_volume>
 801065e:	4603      	mov	r3, r0
 8010660:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010662:	7dfb      	ldrb	r3, [r7, #23]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3720      	adds	r7, #32
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	2003743c 	.word	0x2003743c

08010670 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b098      	sub	sp, #96	; 0x60
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	4613      	mov	r3, r2
 801067c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <f_open+0x18>
 8010684:	2309      	movs	r3, #9
 8010686:	e1ba      	b.n	80109fe <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801068e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010690:	79fa      	ldrb	r2, [r7, #7]
 8010692:	f107 0110 	add.w	r1, r7, #16
 8010696:	f107 0308 	add.w	r3, r7, #8
 801069a:	4618      	mov	r0, r3
 801069c:	f7ff fce6 	bl	801006c <find_volume>
 80106a0:	4603      	mov	r3, r0
 80106a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80106a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f040 819e 	bne.w	80109ec <f_open+0x37c>
		dj.obj.fs = fs;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	f107 0314 	add.w	r3, r7, #20
 80106ba:	4611      	mov	r1, r2
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff fba5 	bl	800fe0c <follow_path>
 80106c2:	4603      	mov	r3, r0
 80106c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80106c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d11a      	bne.n	8010706 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80106d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80106d4:	b25b      	sxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	da03      	bge.n	80106e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80106da:	2306      	movs	r3, #6
 80106dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80106e0:	e011      	b.n	8010706 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80106e2:	79fb      	ldrb	r3, [r7, #7]
 80106e4:	f023 0301 	bic.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	bf14      	ite	ne
 80106ec:	2301      	movne	r3, #1
 80106ee:	2300      	moveq	r3, #0
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	461a      	mov	r2, r3
 80106f4:	f107 0314 	add.w	r3, r7, #20
 80106f8:	4611      	mov	r1, r2
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fe fa4c 	bl	800eb98 <chk_lock>
 8010700:	4603      	mov	r3, r0
 8010702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010706:	79fb      	ldrb	r3, [r7, #7]
 8010708:	f003 031c 	and.w	r3, r3, #28
 801070c:	2b00      	cmp	r3, #0
 801070e:	d07e      	beq.n	801080e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010714:	2b00      	cmp	r3, #0
 8010716:	d017      	beq.n	8010748 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801071c:	2b04      	cmp	r3, #4
 801071e:	d10e      	bne.n	801073e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010720:	f7fe fa96 	bl	800ec50 <enq_lock>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	d006      	beq.n	8010738 <f_open+0xc8>
 801072a:	f107 0314 	add.w	r3, r7, #20
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff fa52 	bl	800fbd8 <dir_register>
 8010734:	4603      	mov	r3, r0
 8010736:	e000      	b.n	801073a <f_open+0xca>
 8010738:	2312      	movs	r3, #18
 801073a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801073e:	79fb      	ldrb	r3, [r7, #7]
 8010740:	f043 0308 	orr.w	r3, r3, #8
 8010744:	71fb      	strb	r3, [r7, #7]
 8010746:	e010      	b.n	801076a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010748:	7ebb      	ldrb	r3, [r7, #26]
 801074a:	f003 0311 	and.w	r3, r3, #17
 801074e:	2b00      	cmp	r3, #0
 8010750:	d003      	beq.n	801075a <f_open+0xea>
					res = FR_DENIED;
 8010752:	2307      	movs	r3, #7
 8010754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010758:	e007      	b.n	801076a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801075a:	79fb      	ldrb	r3, [r7, #7]
 801075c:	f003 0304 	and.w	r3, r3, #4
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <f_open+0xfa>
 8010764:	2308      	movs	r3, #8
 8010766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801076a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801076e:	2b00      	cmp	r3, #0
 8010770:	d167      	bne.n	8010842 <f_open+0x1d2>
 8010772:	79fb      	ldrb	r3, [r7, #7]
 8010774:	f003 0308 	and.w	r3, r3, #8
 8010778:	2b00      	cmp	r3, #0
 801077a:	d062      	beq.n	8010842 <f_open+0x1d2>
				dw = GET_FATTIME();
 801077c:	4ba2      	ldr	r3, [pc, #648]	; (8010a08 <f_open+0x398>)
 801077e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	330e      	adds	r3, #14
 8010784:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010786:	4618      	mov	r0, r3
 8010788:	f7fe f95c 	bl	800ea44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801078c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078e:	3316      	adds	r3, #22
 8010790:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010792:	4618      	mov	r0, r3
 8010794:	f7fe f956 	bl	800ea44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079a:	330b      	adds	r3, #11
 801079c:	2220      	movs	r2, #32
 801079e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107a4:	4611      	mov	r1, r2
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff f925 	bl	800f9f6 <ld_clust>
 80107ac:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80107b2:	2200      	movs	r2, #0
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff f93d 	bl	800fa34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80107ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107bc:	331c      	adds	r3, #28
 80107be:	2100      	movs	r1, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fe f93f 	bl	800ea44 <st_dword>
					fs->wflag = 1;
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	2201      	movs	r2, #1
 80107ca:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80107cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d037      	beq.n	8010842 <f_open+0x1d2>
						dw = fs->winsect;
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80107d8:	f107 0314 	add.w	r3, r7, #20
 80107dc:	2200      	movs	r2, #0
 80107de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fe fe2d 	bl	800f440 <remove_chain>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80107ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d126      	bne.n	8010842 <f_open+0x1d2>
							res = move_window(fs, dw);
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fe fb7d 	bl	800eef8 <move_window>
 80107fe:	4603      	mov	r3, r0
 8010800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010808:	3a01      	subs	r2, #1
 801080a:	611a      	str	r2, [r3, #16]
 801080c:	e019      	b.n	8010842 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801080e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010812:	2b00      	cmp	r3, #0
 8010814:	d115      	bne.n	8010842 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010816:	7ebb      	ldrb	r3, [r7, #26]
 8010818:	f003 0310 	and.w	r3, r3, #16
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <f_open+0x1b8>
					res = FR_NO_FILE;
 8010820:	2304      	movs	r3, #4
 8010822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010826:	e00c      	b.n	8010842 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	f003 0302 	and.w	r3, r3, #2
 801082e:	2b00      	cmp	r3, #0
 8010830:	d007      	beq.n	8010842 <f_open+0x1d2>
 8010832:	7ebb      	ldrb	r3, [r7, #26]
 8010834:	f003 0301 	and.w	r3, r3, #1
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <f_open+0x1d2>
						res = FR_DENIED;
 801083c:	2307      	movs	r3, #7
 801083e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010846:	2b00      	cmp	r3, #0
 8010848:	d128      	bne.n	801089c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	f003 0308 	and.w	r3, r3, #8
 8010850:	2b00      	cmp	r3, #0
 8010852:	d003      	beq.n	801085c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010854:	79fb      	ldrb	r3, [r7, #7]
 8010856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801085a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801086a:	79fb      	ldrb	r3, [r7, #7]
 801086c:	f023 0301 	bic.w	r3, r3, #1
 8010870:	2b00      	cmp	r3, #0
 8010872:	bf14      	ite	ne
 8010874:	2301      	movne	r3, #1
 8010876:	2300      	moveq	r3, #0
 8010878:	b2db      	uxtb	r3, r3
 801087a:	461a      	mov	r2, r3
 801087c:	f107 0314 	add.w	r3, r7, #20
 8010880:	4611      	mov	r1, r2
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fa06 	bl	800ec94 <inc_lock>
 8010888:	4602      	mov	r2, r0
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	691b      	ldr	r3, [r3, #16]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <f_open+0x22c>
 8010896:	2302      	movs	r3, #2
 8010898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801089c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f040 80a3 	bne.w	80109ec <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108aa:	4611      	mov	r1, r2
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff f8a2 	bl	800f9f6 <ld_clust>
 80108b2:	4602      	mov	r2, r0
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80108b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ba:	331c      	adds	r3, #28
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fe f883 	bl	800e9c8 <ld_dword>
 80108c2:	4602      	mov	r2, r0
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2200      	movs	r2, #0
 80108cc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	88da      	ldrh	r2, [r3, #6]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	79fa      	ldrb	r2, [r7, #7]
 80108e0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2200      	movs	r2, #0
 80108ec:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2200      	movs	r2, #0
 80108f2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	3330      	adds	r3, #48	; 0x30
 80108f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80108fc:	2100      	movs	r1, #0
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fe f8ed 	bl	800eade <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010904:	79fb      	ldrb	r3, [r7, #7]
 8010906:	f003 0320 	and.w	r3, r3, #32
 801090a:	2b00      	cmp	r3, #0
 801090c:	d06e      	beq.n	80109ec <f_open+0x37c>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d06a      	beq.n	80109ec <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	68da      	ldr	r2, [r3, #12]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	895b      	ldrh	r3, [r3, #10]
 8010922:	461a      	mov	r2, r3
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	899b      	ldrh	r3, [r3, #12]
 8010928:	fb03 f302 	mul.w	r3, r3, r2
 801092c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	657b      	str	r3, [r7, #84]	; 0x54
 801093a:	e016      	b.n	801096a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fb96 	bl	800f072 <get_fat>
 8010946:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801094a:	2b01      	cmp	r3, #1
 801094c:	d802      	bhi.n	8010954 <f_open+0x2e4>
 801094e:	2302      	movs	r3, #2
 8010950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010956:	f1b3 3fff 	cmp.w	r3, #4294967295
 801095a:	d102      	bne.n	8010962 <f_open+0x2f2>
 801095c:	2301      	movs	r3, #1
 801095e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010962:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010966:	1ad3      	subs	r3, r2, r3
 8010968:	657b      	str	r3, [r7, #84]	; 0x54
 801096a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801096e:	2b00      	cmp	r3, #0
 8010970:	d103      	bne.n	801097a <f_open+0x30a>
 8010972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010976:	429a      	cmp	r2, r3
 8010978:	d8e0      	bhi.n	801093c <f_open+0x2cc>
				}
				fp->clust = clst;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801097e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010984:	2b00      	cmp	r3, #0
 8010986:	d131      	bne.n	80109ec <f_open+0x37c>
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	899b      	ldrh	r3, [r3, #12]
 801098c:	461a      	mov	r2, r3
 801098e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010990:	fbb3 f1f2 	udiv	r1, r3, r2
 8010994:	fb02 f201 	mul.w	r2, r2, r1
 8010998:	1a9b      	subs	r3, r3, r2
 801099a:	2b00      	cmp	r3, #0
 801099c:	d026      	beq.n	80109ec <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fe fb46 	bl	800f034 <clust2sect>
 80109a8:	6478      	str	r0, [r7, #68]	; 0x44
 80109aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <f_open+0x348>
						res = FR_INT_ERR;
 80109b0:	2302      	movs	r3, #2
 80109b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80109b6:	e019      	b.n	80109ec <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	899b      	ldrh	r3, [r3, #12]
 80109bc:	461a      	mov	r2, r3
 80109be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80109c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c6:	441a      	add	r2, r3
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	7858      	ldrb	r0, [r3, #1]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6a1a      	ldr	r2, [r3, #32]
 80109da:	2301      	movs	r3, #1
 80109dc:	f7fd ff7e 	bl	800e8dc <disk_read>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d002      	beq.n	80109ec <f_open+0x37c>
 80109e6:	2301      	movs	r3, #1
 80109e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80109ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <f_open+0x38a>
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80109fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3760      	adds	r7, #96	; 0x60
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	274a0000 	.word	0x274a0000

08010a0c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08e      	sub	sp, #56	; 0x38
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f107 0214 	add.w	r2, r7, #20
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff fda3 	bl	8010578 <validate>
 8010a32:	4603      	mov	r3, r0
 8010a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d107      	bne.n	8010a50 <f_read+0x44>
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	7d5b      	ldrb	r3, [r3, #21]
 8010a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d002      	beq.n	8010a56 <f_read+0x4a>
 8010a50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a54:	e135      	b.n	8010cc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	7d1b      	ldrb	r3, [r3, #20]
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d101      	bne.n	8010a66 <f_read+0x5a>
 8010a62:	2307      	movs	r3, #7
 8010a64:	e12d      	b.n	8010cc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	68da      	ldr	r2, [r3, #12]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	699b      	ldr	r3, [r3, #24]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	6a3b      	ldr	r3, [r7, #32]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	f240 811e 	bls.w	8010cb8 <f_read+0x2ac>
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010a80:	e11a      	b.n	8010cb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	697a      	ldr	r2, [r7, #20]
 8010a88:	8992      	ldrh	r2, [r2, #12]
 8010a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a8e:	fb02 f201 	mul.w	r2, r2, r1
 8010a92:	1a9b      	subs	r3, r3, r2
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f040 80d5 	bne.w	8010c44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	699b      	ldr	r3, [r3, #24]
 8010a9e:	697a      	ldr	r2, [r7, #20]
 8010aa0:	8992      	ldrh	r2, [r2, #12]
 8010aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	8952      	ldrh	r2, [r2, #10]
 8010aaa:	3a01      	subs	r2, #1
 8010aac:	4013      	ands	r3, r2
 8010aae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d12f      	bne.n	8010b16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d103      	bne.n	8010ac6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8010ac4:	e013      	b.n	8010aee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d007      	beq.n	8010ade <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7fe fdb0 	bl	800f63a <clmt_clust>
 8010ada:	6338      	str	r0, [r7, #48]	; 0x30
 8010adc:	e007      	b.n	8010aee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	69db      	ldr	r3, [r3, #28]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	4610      	mov	r0, r2
 8010ae8:	f7fe fac3 	bl	800f072 <get_fat>
 8010aec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d804      	bhi.n	8010afe <f_read+0xf2>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2202      	movs	r2, #2
 8010af8:	755a      	strb	r2, [r3, #21]
 8010afa:	2302      	movs	r3, #2
 8010afc:	e0e1      	b.n	8010cc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b04:	d104      	bne.n	8010b10 <f_read+0x104>
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	755a      	strb	r2, [r3, #21]
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e0d8      	b.n	8010cc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	69db      	ldr	r3, [r3, #28]
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4610      	mov	r0, r2
 8010b20:	f7fe fa88 	bl	800f034 <clust2sect>
 8010b24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d104      	bne.n	8010b36 <f_read+0x12a>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2202      	movs	r2, #2
 8010b30:	755a      	strb	r2, [r3, #21]
 8010b32:	2302      	movs	r3, #2
 8010b34:	e0c5      	b.n	8010cc2 <f_read+0x2b6>
			sect += csect;
 8010b36:	69ba      	ldr	r2, [r7, #24]
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	899b      	ldrh	r3, [r3, #12]
 8010b42:	461a      	mov	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d041      	beq.n	8010bd6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010b52:	69fa      	ldr	r2, [r7, #28]
 8010b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b56:	4413      	add	r3, r2
 8010b58:	697a      	ldr	r2, [r7, #20]
 8010b5a:	8952      	ldrh	r2, [r2, #10]
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d905      	bls.n	8010b6c <f_read+0x160>
					cc = fs->csize - csect;
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	895b      	ldrh	r3, [r3, #10]
 8010b64:	461a      	mov	r2, r3
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	7858      	ldrb	r0, [r3, #1]
 8010b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b72:	69ba      	ldr	r2, [r7, #24]
 8010b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b76:	f7fd feb1 	bl	800e8dc <disk_read>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d004      	beq.n	8010b8a <f_read+0x17e>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2201      	movs	r2, #1
 8010b84:	755a      	strb	r2, [r3, #21]
 8010b86:	2301      	movs	r3, #1
 8010b88:	e09b      	b.n	8010cc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	7d1b      	ldrb	r3, [r3, #20]
 8010b8e:	b25b      	sxtb	r3, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	da18      	bge.n	8010bc6 <f_read+0x1ba>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6a1a      	ldr	r2, [r3, #32]
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d911      	bls.n	8010bc6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6a1a      	ldr	r2, [r3, #32]
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	697a      	ldr	r2, [r7, #20]
 8010bac:	8992      	ldrh	r2, [r2, #12]
 8010bae:	fb02 f303 	mul.w	r3, r2, r3
 8010bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bb4:	18d0      	adds	r0, r2, r3
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	899b      	ldrh	r3, [r3, #12]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	f7fd ff6b 	bl	800ea9c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	899b      	ldrh	r3, [r3, #12]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	fb02 f303 	mul.w	r3, r2, r3
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010bd4:	e05c      	b.n	8010c90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6a1b      	ldr	r3, [r3, #32]
 8010bda:	69ba      	ldr	r2, [r7, #24]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d02e      	beq.n	8010c3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	7d1b      	ldrb	r3, [r3, #20]
 8010be4:	b25b      	sxtb	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	da18      	bge.n	8010c1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	7858      	ldrb	r0, [r3, #1]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6a1a      	ldr	r2, [r3, #32]
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	f7fd fe8f 	bl	800e91c <disk_write>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d004      	beq.n	8010c0e <f_read+0x202>
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2201      	movs	r2, #1
 8010c08:	755a      	strb	r2, [r3, #21]
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e059      	b.n	8010cc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	7d1b      	ldrb	r3, [r3, #20]
 8010c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	7858      	ldrb	r0, [r3, #1]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c26:	2301      	movs	r3, #1
 8010c28:	69ba      	ldr	r2, [r7, #24]
 8010c2a:	f7fd fe57 	bl	800e8dc <disk_read>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d004      	beq.n	8010c3e <f_read+0x232>
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2201      	movs	r2, #1
 8010c38:	755a      	strb	r2, [r3, #21]
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e041      	b.n	8010cc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	899b      	ldrh	r3, [r3, #12]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	699b      	ldr	r3, [r3, #24]
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	8992      	ldrh	r2, [r2, #12]
 8010c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c56:	fb02 f201 	mul.w	r2, r2, r1
 8010c5a:	1a9b      	subs	r3, r3, r2
 8010c5c:	1ac3      	subs	r3, r0, r3
 8010c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d901      	bls.n	8010c6c <f_read+0x260>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	697a      	ldr	r2, [r7, #20]
 8010c78:	8992      	ldrh	r2, [r2, #12]
 8010c7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c7e:	fb02 f200 	mul.w	r2, r2, r0
 8010c82:	1a9b      	subs	r3, r3, r2
 8010c84:	440b      	add	r3, r1
 8010c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c8c:	f7fd ff06 	bl	800ea9c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	4413      	add	r3, r2
 8010c96:	627b      	str	r3, [r7, #36]	; 0x24
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	699a      	ldr	r2, [r3, #24]
 8010c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9e:	441a      	add	r2, r3
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	619a      	str	r2, [r3, #24]
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	441a      	add	r2, r3
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	601a      	str	r2, [r3, #0]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f47f aee1 	bne.w	8010a82 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3738      	adds	r7, #56	; 0x38
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b08c      	sub	sp, #48	; 0x30
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	60f8      	str	r0, [r7, #12]
 8010cd2:	60b9      	str	r1, [r7, #8]
 8010cd4:	607a      	str	r2, [r7, #4]
 8010cd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f107 0210 	add.w	r2, r7, #16
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff fc44 	bl	8010578 <validate>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d107      	bne.n	8010d0e <f_write+0x44>
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	7d5b      	ldrb	r3, [r3, #21]
 8010d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <f_write+0x4a>
 8010d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d12:	e16a      	b.n	8010fea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	7d1b      	ldrb	r3, [r3, #20]
 8010d18:	f003 0302 	and.w	r3, r3, #2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d101      	bne.n	8010d24 <f_write+0x5a>
 8010d20:	2307      	movs	r3, #7
 8010d22:	e162      	b.n	8010fea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	699a      	ldr	r2, [r3, #24]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	441a      	add	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	f080 814c 	bcs.w	8010fce <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	699b      	ldr	r3, [r3, #24]
 8010d3a:	43db      	mvns	r3, r3
 8010d3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010d3e:	e146      	b.n	8010fce <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	699b      	ldr	r3, [r3, #24]
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	8992      	ldrh	r2, [r2, #12]
 8010d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d4c:	fb02 f201 	mul.w	r2, r2, r1
 8010d50:	1a9b      	subs	r3, r3, r2
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f040 80f1 	bne.w	8010f3a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	699b      	ldr	r3, [r3, #24]
 8010d5c:	693a      	ldr	r2, [r7, #16]
 8010d5e:	8992      	ldrh	r2, [r2, #12]
 8010d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d64:	693a      	ldr	r2, [r7, #16]
 8010d66:	8952      	ldrh	r2, [r2, #10]
 8010d68:	3a01      	subs	r2, #1
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d143      	bne.n	8010dfc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10c      	bne.n	8010d96 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d11a      	bne.n	8010dbe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fe fbbc 	bl	800f50a <create_chain>
 8010d92:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d94:	e013      	b.n	8010dbe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d007      	beq.n	8010dae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	699b      	ldr	r3, [r3, #24]
 8010da2:	4619      	mov	r1, r3
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7fe fc48 	bl	800f63a <clmt_clust>
 8010daa:	62b8      	str	r0, [r7, #40]	; 0x28
 8010dac:	e007      	b.n	8010dbe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	69db      	ldr	r3, [r3, #28]
 8010db4:	4619      	mov	r1, r3
 8010db6:	4610      	mov	r0, r2
 8010db8:	f7fe fba7 	bl	800f50a <create_chain>
 8010dbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 8109 	beq.w	8010fd8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d104      	bne.n	8010dd6 <f_write+0x10c>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2202      	movs	r2, #2
 8010dd0:	755a      	strb	r2, [r3, #21]
 8010dd2:	2302      	movs	r3, #2
 8010dd4:	e109      	b.n	8010fea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ddc:	d104      	bne.n	8010de8 <f_write+0x11e>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2201      	movs	r2, #1
 8010de2:	755a      	strb	r2, [r3, #21]
 8010de4:	2301      	movs	r3, #1
 8010de6:	e100      	b.n	8010fea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d102      	bne.n	8010dfc <f_write+0x132>
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	7d1b      	ldrb	r3, [r3, #20]
 8010e00:	b25b      	sxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	da18      	bge.n	8010e38 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	7858      	ldrb	r0, [r3, #1]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6a1a      	ldr	r2, [r3, #32]
 8010e14:	2301      	movs	r3, #1
 8010e16:	f7fd fd81 	bl	800e91c <disk_write>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <f_write+0x160>
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2201      	movs	r2, #1
 8010e24:	755a      	strb	r2, [r3, #21]
 8010e26:	2301      	movs	r3, #1
 8010e28:	e0df      	b.n	8010fea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	7d1b      	ldrb	r3, [r3, #20]
 8010e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010e38:	693a      	ldr	r2, [r7, #16]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	69db      	ldr	r3, [r3, #28]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	4610      	mov	r0, r2
 8010e42:	f7fe f8f7 	bl	800f034 <clust2sect>
 8010e46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d104      	bne.n	8010e58 <f_write+0x18e>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2202      	movs	r2, #2
 8010e52:	755a      	strb	r2, [r3, #21]
 8010e54:	2302      	movs	r3, #2
 8010e56:	e0c8      	b.n	8010fea <f_write+0x320>
			sect += csect;
 8010e58:	697a      	ldr	r2, [r7, #20]
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	899b      	ldrh	r3, [r3, #12]
 8010e64:	461a      	mov	r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010e6e:	6a3b      	ldr	r3, [r7, #32]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d043      	beq.n	8010efc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010e74:	69ba      	ldr	r2, [r7, #24]
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	4413      	add	r3, r2
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	8952      	ldrh	r2, [r2, #10]
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d905      	bls.n	8010e8e <f_write+0x1c4>
					cc = fs->csize - csect;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	895b      	ldrh	r3, [r3, #10]
 8010e86:	461a      	mov	r2, r3
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	7858      	ldrb	r0, [r3, #1]
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	69f9      	ldr	r1, [r7, #28]
 8010e98:	f7fd fd40 	bl	800e91c <disk_write>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d004      	beq.n	8010eac <f_write+0x1e2>
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	755a      	strb	r2, [r3, #21]
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e09e      	b.n	8010fea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	6a1a      	ldr	r2, [r3, #32]
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	6a3a      	ldr	r2, [r7, #32]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d918      	bls.n	8010eec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	6a1a      	ldr	r2, [r3, #32]
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	693a      	ldr	r2, [r7, #16]
 8010eca:	8992      	ldrh	r2, [r2, #12]
 8010ecc:	fb02 f303 	mul.w	r3, r2, r3
 8010ed0:	69fa      	ldr	r2, [r7, #28]
 8010ed2:	18d1      	adds	r1, r2, r3
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	899b      	ldrh	r3, [r3, #12]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	f7fd fddf 	bl	800ea9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	7d1b      	ldrb	r3, [r3, #20]
 8010ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ee6:	b2da      	uxtb	r2, r3
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	899b      	ldrh	r3, [r3, #12]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	fb02 f303 	mul.w	r3, r2, r3
 8010ef8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010efa:	e04b      	b.n	8010f94 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6a1b      	ldr	r3, [r3, #32]
 8010f00:	697a      	ldr	r2, [r7, #20]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d016      	beq.n	8010f34 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	699a      	ldr	r2, [r3, #24]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d210      	bcs.n	8010f34 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	7858      	ldrb	r0, [r3, #1]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	f7fd fcdc 	bl	800e8dc <disk_read>
 8010f24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d004      	beq.n	8010f34 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	755a      	strb	r2, [r3, #21]
 8010f30:	2301      	movs	r3, #1
 8010f32:	e05a      	b.n	8010fea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	697a      	ldr	r2, [r7, #20]
 8010f38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	899b      	ldrh	r3, [r3, #12]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	699b      	ldr	r3, [r3, #24]
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	8992      	ldrh	r2, [r2, #12]
 8010f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f4c:	fb02 f201 	mul.w	r2, r2, r1
 8010f50:	1a9b      	subs	r3, r3, r2
 8010f52:	1ac3      	subs	r3, r0, r3
 8010f54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d901      	bls.n	8010f62 <f_write+0x298>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	699b      	ldr	r3, [r3, #24]
 8010f6c:	693a      	ldr	r2, [r7, #16]
 8010f6e:	8992      	ldrh	r2, [r2, #12]
 8010f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f74:	fb02 f200 	mul.w	r2, r2, r0
 8010f78:	1a9b      	subs	r3, r3, r2
 8010f7a:	440b      	add	r3, r1
 8010f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f7e:	69f9      	ldr	r1, [r7, #28]
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fd fd8b 	bl	800ea9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	7d1b      	ldrb	r3, [r3, #20]
 8010f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010f94:	69fa      	ldr	r2, [r7, #28]
 8010f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f98:	4413      	add	r3, r2
 8010f9a:	61fb      	str	r3, [r7, #28]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	699a      	ldr	r2, [r3, #24]
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	441a      	add	r2, r3
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	619a      	str	r2, [r3, #24]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	68da      	ldr	r2, [r3, #12]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	699b      	ldr	r3, [r3, #24]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	bf38      	it	cc
 8010fb4:	461a      	movcc	r2, r3
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	60da      	str	r2, [r3, #12]
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	441a      	add	r2, r3
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	601a      	str	r2, [r3, #0]
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f47f aeb5 	bne.w	8010d40 <f_write+0x76>
 8010fd6:	e000      	b.n	8010fda <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010fd8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	7d1b      	ldrb	r3, [r3, #20]
 8010fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010fe8:	2300      	movs	r3, #0
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3730      	adds	r7, #48	; 0x30
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
	...

08010ff4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f107 0208 	add.w	r2, r7, #8
 8011002:	4611      	mov	r1, r2
 8011004:	4618      	mov	r0, r3
 8011006:	f7ff fab7 	bl	8010578 <validate>
 801100a:	4603      	mov	r3, r0
 801100c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801100e:	7dfb      	ldrb	r3, [r7, #23]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d167      	bne.n	80110e4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	7d1b      	ldrb	r3, [r3, #20]
 8011018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801101c:	2b00      	cmp	r3, #0
 801101e:	d061      	beq.n	80110e4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	7d1b      	ldrb	r3, [r3, #20]
 8011024:	b25b      	sxtb	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	da15      	bge.n	8011056 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	7858      	ldrb	r0, [r3, #1]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a1a      	ldr	r2, [r3, #32]
 8011038:	2301      	movs	r3, #1
 801103a:	f7fd fc6f 	bl	800e91c <disk_write>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <f_sync+0x54>
 8011044:	2301      	movs	r3, #1
 8011046:	e04e      	b.n	80110e6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	7d1b      	ldrb	r3, [r3, #20]
 801104c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011050:	b2da      	uxtb	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011056:	4b26      	ldr	r3, [pc, #152]	; (80110f0 <f_sync+0xfc>)
 8011058:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f7fd ff48 	bl	800eef8 <move_window>
 8011068:	4603      	mov	r3, r0
 801106a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801106c:	7dfb      	ldrb	r3, [r7, #23]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d138      	bne.n	80110e4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011076:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	330b      	adds	r3, #11
 801107c:	781a      	ldrb	r2, [r3, #0]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	330b      	adds	r3, #11
 8011082:	f042 0220 	orr.w	r2, r2, #32
 8011086:	b2d2      	uxtb	r2, r2
 8011088:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6818      	ldr	r0, [r3, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	461a      	mov	r2, r3
 8011094:	68f9      	ldr	r1, [r7, #12]
 8011096:	f7fe fccd 	bl	800fa34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f103 021c 	add.w	r2, r3, #28
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	4619      	mov	r1, r3
 80110a6:	4610      	mov	r0, r2
 80110a8:	f7fd fccc 	bl	800ea44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	3316      	adds	r3, #22
 80110b0:	6939      	ldr	r1, [r7, #16]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fd fcc6 	bl	800ea44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3312      	adds	r3, #18
 80110bc:	2100      	movs	r1, #0
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fd fca5 	bl	800ea0e <st_word>
					fs->wflag = 1;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2201      	movs	r2, #1
 80110c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7fd ff41 	bl	800ef54 <sync_fs>
 80110d2:	4603      	mov	r3, r0
 80110d4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	7d1b      	ldrb	r3, [r3, #20]
 80110da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110de:	b2da      	uxtb	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80110e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3718      	adds	r7, #24
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	274a0000 	.word	0x274a0000

080110f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f7ff ff79 	bl	8010ff4 <f_sync>
 8011102:	4603      	mov	r3, r0
 8011104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d118      	bne.n	801113e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f107 0208 	add.w	r2, r7, #8
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f7ff fa2f 	bl	8010578 <validate>
 801111a:	4603      	mov	r3, r0
 801111c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801111e:	7bfb      	ldrb	r3, [r7, #15]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10c      	bne.n	801113e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	4618      	mov	r0, r3
 801112a:	f7fd fe41 	bl	800edb0 <dec_lock>
 801112e:	4603      	mov	r3, r0
 8011130:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011132:	7bfb      	ldrb	r3, [r7, #15]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011148:	b590      	push	{r4, r7, lr}
 801114a:	b091      	sub	sp, #68	; 0x44
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011150:	f107 0108 	add.w	r1, r7, #8
 8011154:	1d3b      	adds	r3, r7, #4
 8011156:	2200      	movs	r2, #0
 8011158:	4618      	mov	r0, r3
 801115a:	f7fe ff87 	bl	801006c <find_volume>
 801115e:	4603      	mov	r3, r0
 8011160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011164:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011168:	2b00      	cmp	r3, #0
 801116a:	d131      	bne.n	80111d0 <f_chdir+0x88>
		dj.obj.fs = fs;
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	f107 030c 	add.w	r3, r7, #12
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe fe47 	bl	800fe0c <follow_path>
 801117e:	4603      	mov	r3, r0
 8011180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011188:	2b00      	cmp	r3, #0
 801118a:	d11a      	bne.n	80111c2 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801118c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011190:	b25b      	sxtb	r3, r3
 8011192:	2b00      	cmp	r3, #0
 8011194:	da03      	bge.n	801119e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	619a      	str	r2, [r3, #24]
 801119c:	e011      	b.n	80111c2 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801119e:	7cbb      	ldrb	r3, [r7, #18]
 80111a0:	f003 0310 	and.w	r3, r3, #16
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d009      	beq.n	80111bc <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ac:	68bc      	ldr	r4, [r7, #8]
 80111ae:	4611      	mov	r1, r2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fe fc20 	bl	800f9f6 <ld_clust>
 80111b6:	4603      	mov	r3, r0
 80111b8:	61a3      	str	r3, [r4, #24]
 80111ba:	e002      	b.n	80111c2 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80111bc:	2305      	movs	r3, #5
 80111be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80111c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d102      	bne.n	80111d0 <f_chdir+0x88>
 80111ca:	2305      	movs	r3, #5
 80111cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80111d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3744      	adds	r7, #68	; 0x44
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd90      	pop	{r4, r7, pc}

080111dc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b090      	sub	sp, #64	; 0x40
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f107 0208 	add.w	r2, r7, #8
 80111ec:	4611      	mov	r1, r2
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff f9c2 	bl	8010578 <validate>
 80111f4:	4603      	mov	r3, r0
 80111f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80111fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d103      	bne.n	801120a <f_lseek+0x2e>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	7d5b      	ldrb	r3, [r3, #21]
 8011206:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801120a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <f_lseek+0x3c>
 8011212:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011216:	e201      	b.n	801161c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121c:	2b00      	cmp	r3, #0
 801121e:	f000 80d9 	beq.w	80113d4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011228:	d15a      	bne.n	80112e0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801122e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011232:	1d1a      	adds	r2, r3, #4
 8011234:	627a      	str	r2, [r7, #36]	; 0x24
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	617b      	str	r3, [r7, #20]
 801123a:	2302      	movs	r3, #2
 801123c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	2b00      	cmp	r3, #0
 8011248:	d03a      	beq.n	80112c0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	613b      	str	r3, [r7, #16]
 801124e:	2300      	movs	r3, #0
 8011250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011254:	3302      	adds	r3, #2
 8011256:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	3301      	adds	r3, #1
 8011260:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011266:	4618      	mov	r0, r3
 8011268:	f7fd ff03 	bl	800f072 <get_fat>
 801126c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011270:	2b01      	cmp	r3, #1
 8011272:	d804      	bhi.n	801127e <f_lseek+0xa2>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2202      	movs	r2, #2
 8011278:	755a      	strb	r2, [r3, #21]
 801127a:	2302      	movs	r3, #2
 801127c:	e1ce      	b.n	801161c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011284:	d104      	bne.n	8011290 <f_lseek+0xb4>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2201      	movs	r2, #1
 801128a:	755a      	strb	r2, [r3, #21]
 801128c:	2301      	movs	r3, #1
 801128e:	e1c5      	b.n	801161c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3301      	adds	r3, #1
 8011294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011296:	429a      	cmp	r2, r3
 8011298:	d0de      	beq.n	8011258 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d809      	bhi.n	80112b6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	1d1a      	adds	r2, r3, #4
 80112a6:	627a      	str	r2, [r7, #36]	; 0x24
 80112a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112aa:	601a      	str	r2, [r3, #0]
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	1d1a      	adds	r2, r3, #4
 80112b0:	627a      	str	r2, [r7, #36]	; 0x24
 80112b2:	693a      	ldr	r2, [r7, #16]
 80112b4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	69db      	ldr	r3, [r3, #28]
 80112ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112bc:	429a      	cmp	r2, r3
 80112be:	d3c4      	bcc.n	801124a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112c6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80112c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d803      	bhi.n	80112d8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	e19f      	b.n	8011618 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80112d8:	2311      	movs	r3, #17
 80112da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80112de:	e19b      	b.n	8011618 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	683a      	ldr	r2, [r7, #0]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d902      	bls.n	80112f0 <f_lseek+0x114>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	683a      	ldr	r2, [r7, #0]
 80112f4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 818d 	beq.w	8011618 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	3b01      	subs	r3, #1
 8011302:	4619      	mov	r1, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fe f998 	bl	800f63a <clmt_clust>
 801130a:	4602      	mov	r2, r0
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	69db      	ldr	r3, [r3, #28]
 8011316:	4619      	mov	r1, r3
 8011318:	4610      	mov	r0, r2
 801131a:	f7fd fe8b 	bl	800f034 <clust2sect>
 801131e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d104      	bne.n	8011330 <f_lseek+0x154>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2202      	movs	r2, #2
 801132a:	755a      	strb	r2, [r3, #21]
 801132c:	2302      	movs	r3, #2
 801132e:	e175      	b.n	801161c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	3b01      	subs	r3, #1
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	8992      	ldrh	r2, [r2, #12]
 8011338:	fbb3 f3f2 	udiv	r3, r3, r2
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	8952      	ldrh	r2, [r2, #10]
 8011340:	3a01      	subs	r2, #1
 8011342:	4013      	ands	r3, r2
 8011344:	69ba      	ldr	r2, [r7, #24]
 8011346:	4413      	add	r3, r2
 8011348:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	8992      	ldrh	r2, [r2, #12]
 8011352:	fbb3 f1f2 	udiv	r1, r3, r2
 8011356:	fb02 f201 	mul.w	r2, r2, r1
 801135a:	1a9b      	subs	r3, r3, r2
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 815b 	beq.w	8011618 <f_lseek+0x43c>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	69ba      	ldr	r2, [r7, #24]
 8011368:	429a      	cmp	r2, r3
 801136a:	f000 8155 	beq.w	8011618 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	7d1b      	ldrb	r3, [r3, #20]
 8011372:	b25b      	sxtb	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	da18      	bge.n	80113aa <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	7858      	ldrb	r0, [r3, #1]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a1a      	ldr	r2, [r3, #32]
 8011386:	2301      	movs	r3, #1
 8011388:	f7fd fac8 	bl	800e91c <disk_write>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d004      	beq.n	801139c <f_lseek+0x1c0>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2201      	movs	r2, #1
 8011396:	755a      	strb	r2, [r3, #21]
 8011398:	2301      	movs	r3, #1
 801139a:	e13f      	b.n	801161c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7d1b      	ldrb	r3, [r3, #20]
 80113a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	7858      	ldrb	r0, [r3, #1]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113b4:	2301      	movs	r3, #1
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	f7fd fa90 	bl	800e8dc <disk_read>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d004      	beq.n	80113cc <f_lseek+0x1f0>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2201      	movs	r2, #1
 80113c6:	755a      	strb	r2, [r3, #21]
 80113c8:	2301      	movs	r3, #1
 80113ca:	e127      	b.n	801161c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	69ba      	ldr	r2, [r7, #24]
 80113d0:	621a      	str	r2, [r3, #32]
 80113d2:	e121      	b.n	8011618 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d908      	bls.n	80113f0 <f_lseek+0x214>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	7d1b      	ldrb	r3, [r3, #20]
 80113e2:	f003 0302 	and.w	r3, r3, #2
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d102      	bne.n	80113f0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	637b      	str	r3, [r7, #52]	; 0x34
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113fe:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 80b5 	beq.w	8011572 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	895b      	ldrh	r3, [r3, #10]
 801140c:	461a      	mov	r2, r3
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	899b      	ldrh	r3, [r3, #12]
 8011412:	fb03 f302 	mul.w	r3, r3, r2
 8011416:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d01b      	beq.n	8011456 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	1e5a      	subs	r2, r3, #1
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	fbb2 f2f3 	udiv	r2, r2, r3
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	1e59      	subs	r1, r3, #1
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011432:	429a      	cmp	r2, r3
 8011434:	d30f      	bcc.n	8011456 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	1e5a      	subs	r2, r3, #1
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	425b      	negs	r3, r3
 801143e:	401a      	ands	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	683a      	ldr	r2, [r7, #0]
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	63bb      	str	r3, [r7, #56]	; 0x38
 8011454:	e022      	b.n	801149c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	689b      	ldr	r3, [r3, #8]
 801145a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	2b00      	cmp	r3, #0
 8011460:	d119      	bne.n	8011496 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2100      	movs	r1, #0
 8011466:	4618      	mov	r0, r3
 8011468:	f7fe f84f 	bl	800f50a <create_chain>
 801146c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	2b01      	cmp	r3, #1
 8011472:	d104      	bne.n	801147e <f_lseek+0x2a2>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2202      	movs	r2, #2
 8011478:	755a      	strb	r2, [r3, #21]
 801147a:	2302      	movs	r3, #2
 801147c:	e0ce      	b.n	801161c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801147e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011484:	d104      	bne.n	8011490 <f_lseek+0x2b4>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2201      	movs	r2, #1
 801148a:	755a      	strb	r2, [r3, #21]
 801148c:	2301      	movs	r3, #1
 801148e:	e0c5      	b.n	801161c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011494:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801149a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d067      	beq.n	8011572 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80114a2:	e03a      	b.n	801151a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	603b      	str	r3, [r7, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	699a      	ldr	r2, [r3, #24]
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	441a      	add	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7d1b      	ldrb	r3, [r3, #20]
 80114bc:	f003 0302 	and.w	r3, r3, #2
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d00b      	beq.n	80114dc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe f81e 	bl	800f50a <create_chain>
 80114ce:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d108      	bne.n	80114e8 <f_lseek+0x30c>
							ofs = 0; break;
 80114d6:	2300      	movs	r3, #0
 80114d8:	603b      	str	r3, [r7, #0]
 80114da:	e022      	b.n	8011522 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fd fdc6 	bl	800f072 <get_fat>
 80114e6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80114e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ee:	d104      	bne.n	80114fa <f_lseek+0x31e>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2201      	movs	r2, #1
 80114f4:	755a      	strb	r2, [r3, #21]
 80114f6:	2301      	movs	r3, #1
 80114f8:	e090      	b.n	801161c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d904      	bls.n	801150a <f_lseek+0x32e>
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	69db      	ldr	r3, [r3, #28]
 8011504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011506:	429a      	cmp	r2, r3
 8011508:	d304      	bcc.n	8011514 <f_lseek+0x338>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2202      	movs	r2, #2
 801150e:	755a      	strb	r2, [r3, #21]
 8011510:	2302      	movs	r3, #2
 8011512:	e083      	b.n	801161c <f_lseek+0x440>
					fp->clust = clst;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011518:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801151a:	683a      	ldr	r2, [r7, #0]
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	429a      	cmp	r2, r3
 8011520:	d8c0      	bhi.n	80114a4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	699a      	ldr	r2, [r3, #24]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	441a      	add	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	899b      	ldrh	r3, [r3, #12]
 8011532:	461a      	mov	r2, r3
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	fbb3 f1f2 	udiv	r1, r3, r2
 801153a:	fb02 f201 	mul.w	r2, r2, r1
 801153e:	1a9b      	subs	r3, r3, r2
 8011540:	2b00      	cmp	r3, #0
 8011542:	d016      	beq.n	8011572 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011548:	4618      	mov	r0, r3
 801154a:	f7fd fd73 	bl	800f034 <clust2sect>
 801154e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011552:	2b00      	cmp	r3, #0
 8011554:	d104      	bne.n	8011560 <f_lseek+0x384>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2202      	movs	r2, #2
 801155a:	755a      	strb	r2, [r3, #21]
 801155c:	2302      	movs	r3, #2
 801155e:	e05d      	b.n	801161c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	461a      	mov	r2, r3
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	fbb3 f3f2 	udiv	r3, r3, r2
 801156c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801156e:	4413      	add	r3, r2
 8011570:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	699a      	ldr	r2, [r3, #24]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	429a      	cmp	r2, r3
 801157c:	d90a      	bls.n	8011594 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	699a      	ldr	r2, [r3, #24]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	7d1b      	ldrb	r3, [r3, #20]
 801158a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801158e:	b2da      	uxtb	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	8992      	ldrh	r2, [r2, #12]
 801159c:	fbb3 f1f2 	udiv	r1, r3, r2
 80115a0:	fb02 f201 	mul.w	r2, r2, r1
 80115a4:	1a9b      	subs	r3, r3, r2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d036      	beq.n	8011618 <f_lseek+0x43c>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a1b      	ldr	r3, [r3, #32]
 80115ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d031      	beq.n	8011618 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	7d1b      	ldrb	r3, [r3, #20]
 80115b8:	b25b      	sxtb	r3, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	da18      	bge.n	80115f0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	7858      	ldrb	r0, [r3, #1]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a1a      	ldr	r2, [r3, #32]
 80115cc:	2301      	movs	r3, #1
 80115ce:	f7fd f9a5 	bl	800e91c <disk_write>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d004      	beq.n	80115e2 <f_lseek+0x406>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2201      	movs	r2, #1
 80115dc:	755a      	strb	r2, [r3, #21]
 80115de:	2301      	movs	r3, #1
 80115e0:	e01c      	b.n	801161c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7d1b      	ldrb	r3, [r3, #20]
 80115e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	7858      	ldrb	r0, [r3, #1]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115fa:	2301      	movs	r3, #1
 80115fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fe:	f7fd f96d 	bl	800e8dc <disk_read>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d004      	beq.n	8011612 <f_lseek+0x436>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2201      	movs	r2, #1
 801160c:	755a      	strb	r2, [r3, #21]
 801160e:	2301      	movs	r3, #1
 8011610:	e004      	b.n	801161c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011616:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801161c:	4618      	mov	r0, r3
 801161e:	3740      	adds	r7, #64	; 0x40
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b09e      	sub	sp, #120	; 0x78
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801162c:	2300      	movs	r3, #0
 801162e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011630:	f107 010c 	add.w	r1, r7, #12
 8011634:	1d3b      	adds	r3, r7, #4
 8011636:	2202      	movs	r2, #2
 8011638:	4618      	mov	r0, r3
 801163a:	f7fe fd17 	bl	801006c <find_volume>
 801163e:	4603      	mov	r3, r0
 8011640:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011648:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801164c:	2b00      	cmp	r3, #0
 801164e:	f040 80a4 	bne.w	801179a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011658:	4611      	mov	r1, r2
 801165a:	4618      	mov	r0, r3
 801165c:	f7fe fbd6 	bl	800fe0c <follow_path>
 8011660:	4603      	mov	r3, r0
 8011662:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011666:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801166a:	2b00      	cmp	r3, #0
 801166c:	d108      	bne.n	8011680 <f_unlink+0x5c>
 801166e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011672:	f003 0320 	and.w	r3, r3, #32
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801167a:	2306      	movs	r3, #6
 801167c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011680:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011684:	2b00      	cmp	r3, #0
 8011686:	d108      	bne.n	801169a <f_unlink+0x76>
 8011688:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801168c:	2102      	movs	r1, #2
 801168e:	4618      	mov	r0, r3
 8011690:	f7fd fa82 	bl	800eb98 <chk_lock>
 8011694:	4603      	mov	r3, r0
 8011696:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801169a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d17b      	bne.n	801179a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80116a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80116a6:	b25b      	sxtb	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	da03      	bge.n	80116b4 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80116ac:	2306      	movs	r3, #6
 80116ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80116b2:	e008      	b.n	80116c6 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80116b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80116b8:	f003 0301 	and.w	r3, r3, #1
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80116c0:	2307      	movs	r3, #7
 80116c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80116c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d13d      	bne.n	801174a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116d2:	4611      	mov	r1, r2
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe f98e 	bl	800f9f6 <ld_clust>
 80116da:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80116dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80116e0:	f003 0310 	and.w	r3, r3, #16
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d030      	beq.n	801174a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	699b      	ldr	r3, [r3, #24]
 80116ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d103      	bne.n	80116fa <f_unlink+0xd6>
						res = FR_DENIED;
 80116f2:	2307      	movs	r3, #7
 80116f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80116f8:	e027      	b.n	801174a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80116fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011700:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011702:	f107 0310 	add.w	r3, r7, #16
 8011706:	2100      	movs	r1, #0
 8011708:	4618      	mov	r0, r3
 801170a:	f7fd ffce 	bl	800f6aa <dir_sdi>
 801170e:	4603      	mov	r3, r0
 8011710:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011714:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011718:	2b00      	cmp	r3, #0
 801171a:	d116      	bne.n	801174a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801171c:	f107 0310 	add.w	r3, r7, #16
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe f9a6 	bl	800fa74 <dir_read>
 8011728:	4603      	mov	r3, r0
 801172a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801172e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011732:	2b00      	cmp	r3, #0
 8011734:	d102      	bne.n	801173c <f_unlink+0x118>
 8011736:	2307      	movs	r3, #7
 8011738:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801173c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011740:	2b04      	cmp	r3, #4
 8011742:	d102      	bne.n	801174a <f_unlink+0x126>
 8011744:	2300      	movs	r3, #0
 8011746:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801174a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801174e:	2b00      	cmp	r3, #0
 8011750:	d123      	bne.n	801179a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011756:	4618      	mov	r0, r3
 8011758:	f7fe fa70 	bl	800fc3c <dir_remove>
 801175c:	4603      	mov	r3, r0
 801175e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011762:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10c      	bne.n	8011784 <f_unlink+0x160>
 801176a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801176c:	2b00      	cmp	r3, #0
 801176e:	d009      	beq.n	8011784 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011774:	2200      	movs	r2, #0
 8011776:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011778:	4618      	mov	r0, r3
 801177a:	f7fd fe61 	bl	800f440 <remove_chain>
 801177e:	4603      	mov	r3, r0
 8011780:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011784:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011788:	2b00      	cmp	r3, #0
 801178a:	d106      	bne.n	801179a <f_unlink+0x176>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	4618      	mov	r0, r3
 8011790:	f7fd fbe0 	bl	800ef54 <sync_fs>
 8011794:	4603      	mov	r3, r0
 8011796:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801179a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3778      	adds	r7, #120	; 0x78
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
	...

080117a8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b096      	sub	sp, #88	; 0x58
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80117b0:	f107 0108 	add.w	r1, r7, #8
 80117b4:	1d3b      	adds	r3, r7, #4
 80117b6:	2202      	movs	r2, #2
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fe fc57 	bl	801006c <find_volume>
 80117be:	4603      	mov	r3, r0
 80117c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80117c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f040 80fe 	bne.w	80119ce <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	f107 030c 	add.w	r3, r7, #12
 80117d8:	4611      	mov	r1, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fe fb16 	bl	800fe0c <follow_path>
 80117e0:	4603      	mov	r3, r0
 80117e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80117e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d102      	bne.n	80117f4 <f_mkdir+0x4c>
 80117ee:	2308      	movs	r3, #8
 80117f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80117f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117f8:	2b04      	cmp	r3, #4
 80117fa:	d108      	bne.n	801180e <f_mkdir+0x66>
 80117fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011800:	f003 0320 	and.w	r3, r3, #32
 8011804:	2b00      	cmp	r3, #0
 8011806:	d002      	beq.n	801180e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011808:	2306      	movs	r3, #6
 801180a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801180e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011812:	2b04      	cmp	r3, #4
 8011814:	f040 80db 	bne.w	80119ce <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011818:	f107 030c 	add.w	r3, r7, #12
 801181c:	2100      	movs	r1, #0
 801181e:	4618      	mov	r0, r3
 8011820:	f7fd fe73 	bl	800f50a <create_chain>
 8011824:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	895b      	ldrh	r3, [r3, #10]
 801182a:	461a      	mov	r2, r3
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	899b      	ldrh	r3, [r3, #12]
 8011830:	fb03 f302 	mul.w	r3, r3, r2
 8011834:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011836:	2300      	movs	r3, #0
 8011838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801183c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801183e:	2b00      	cmp	r3, #0
 8011840:	d102      	bne.n	8011848 <f_mkdir+0xa0>
 8011842:	2307      	movs	r3, #7
 8011844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801184a:	2b01      	cmp	r3, #1
 801184c:	d102      	bne.n	8011854 <f_mkdir+0xac>
 801184e:	2302      	movs	r3, #2
 8011850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801185a:	d102      	bne.n	8011862 <f_mkdir+0xba>
 801185c:	2301      	movs	r3, #1
 801185e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011866:	2b00      	cmp	r3, #0
 8011868:	d106      	bne.n	8011878 <f_mkdir+0xd0>
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	4618      	mov	r0, r3
 801186e:	f7fd faff 	bl	800ee70 <sync_window>
 8011872:	4603      	mov	r3, r0
 8011874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011878:	4b58      	ldr	r3, [pc, #352]	; (80119dc <f_mkdir+0x234>)
 801187a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801187c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011880:	2b00      	cmp	r3, #0
 8011882:	d16c      	bne.n	801195e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011888:	4618      	mov	r0, r3
 801188a:	f7fd fbd3 	bl	800f034 <clust2sect>
 801188e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	3338      	adds	r3, #56	; 0x38
 8011894:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	899b      	ldrh	r3, [r3, #12]
 801189a:	461a      	mov	r2, r3
 801189c:	2100      	movs	r1, #0
 801189e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118a0:	f7fd f91d 	bl	800eade <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80118a4:	220b      	movs	r2, #11
 80118a6:	2120      	movs	r1, #32
 80118a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80118aa:	f7fd f918 	bl	800eade <mem_set>
					dir[DIR_Name] = '.';
 80118ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b0:	222e      	movs	r2, #46	; 0x2e
 80118b2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80118b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b6:	330b      	adds	r3, #11
 80118b8:	2210      	movs	r2, #16
 80118ba:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80118bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118be:	3316      	adds	r3, #22
 80118c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fd f8be 	bl	800ea44 <st_dword>
					st_clust(fs, dir, dcl);
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe f8b0 	bl	800fa34 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80118d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d6:	3320      	adds	r3, #32
 80118d8:	2220      	movs	r2, #32
 80118da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fd f8dd 	bl	800ea9c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80118e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e4:	3321      	adds	r3, #33	; 0x21
 80118e6:	222e      	movs	r2, #46	; 0x2e
 80118e8:	701a      	strb	r2, [r3, #0]
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	2b03      	cmp	r3, #3
 80118f4:	d106      	bne.n	8011904 <f_mkdir+0x15c>
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d101      	bne.n	8011904 <f_mkdir+0x15c>
 8011900:	2300      	movs	r3, #0
 8011902:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011904:	68b8      	ldr	r0, [r7, #8]
 8011906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011908:	3320      	adds	r3, #32
 801190a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801190c:	4619      	mov	r1, r3
 801190e:	f7fe f891 	bl	800fa34 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	895b      	ldrh	r3, [r3, #10]
 8011916:	653b      	str	r3, [r7, #80]	; 0x50
 8011918:	e01c      	b.n	8011954 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	2201      	movs	r2, #1
 8011928:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	4618      	mov	r0, r3
 801192e:	f7fd fa9f 	bl	800ee70 <sync_window>
 8011932:	4603      	mov	r3, r0
 8011934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10d      	bne.n	801195c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	899b      	ldrh	r3, [r3, #12]
 8011944:	461a      	mov	r2, r3
 8011946:	2100      	movs	r1, #0
 8011948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801194a:	f7fd f8c8 	bl	800eade <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011950:	3b01      	subs	r3, #1
 8011952:	653b      	str	r3, [r7, #80]	; 0x50
 8011954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1df      	bne.n	801191a <f_mkdir+0x172>
 801195a:	e000      	b.n	801195e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801195c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801195e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011962:	2b00      	cmp	r3, #0
 8011964:	d107      	bne.n	8011976 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011966:	f107 030c 	add.w	r3, r7, #12
 801196a:	4618      	mov	r0, r3
 801196c:	f7fe f934 	bl	800fbd8 <dir_register>
 8011970:	4603      	mov	r3, r0
 8011972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801197a:	2b00      	cmp	r3, #0
 801197c:	d120      	bne.n	80119c0 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011980:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011984:	3316      	adds	r3, #22
 8011986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011988:	4618      	mov	r0, r3
 801198a:	f7fd f85b 	bl	800ea44 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe f84d 	bl	800fa34 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801199a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801199c:	330b      	adds	r3, #11
 801199e:	2210      	movs	r2, #16
 80119a0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2201      	movs	r2, #1
 80119a6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80119a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10e      	bne.n	80119ce <f_mkdir+0x226>
					res = sync_fs(fs);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fd face 	bl	800ef54 <sync_fs>
 80119b8:	4603      	mov	r3, r0
 80119ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80119be:	e006      	b.n	80119ce <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80119c0:	f107 030c 	add.w	r3, r7, #12
 80119c4:	2200      	movs	r2, #0
 80119c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fd fd39 	bl	800f440 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80119ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3758      	adds	r7, #88	; 0x58
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	274a0000 	.word	0x274a0000

080119e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
	int n = 0;
 80119ec:	2300      	movs	r3, #0
 80119ee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80119f4:	e017      	b.n	8011a26 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80119f6:	f107 0310 	add.w	r3, r7, #16
 80119fa:	f107 0114 	add.w	r1, r7, #20
 80119fe:	2201      	movs	r2, #1
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff f803 	bl	8010a0c <f_read>
		if (rc != 1) break;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d112      	bne.n	8011a32 <f_gets+0x52>
		c = s[0];
 8011a0c:	7d3b      	ldrb	r3, [r7, #20]
 8011a0e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	61ba      	str	r2, [r7, #24]
 8011a16:	7dfa      	ldrb	r2, [r7, #23]
 8011a18:	701a      	strb	r2, [r3, #0]
		n++;
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	2b0a      	cmp	r3, #10
 8011a24:	d007      	beq.n	8011a36 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	69fa      	ldr	r2, [r7, #28]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	dbe2      	blt.n	80119f6 <f_gets+0x16>
 8011a30:	e002      	b.n	8011a38 <f_gets+0x58>
		if (rc != 1) break;
 8011a32:	bf00      	nop
 8011a34:	e000      	b.n	8011a38 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011a36:	bf00      	nop
	}
	*p = 0;
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <f_gets+0x68>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	e000      	b.n	8011a4a <f_gets+0x6a>
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3720      	adds	r7, #32
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b087      	sub	sp, #28
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a62:	2301      	movs	r3, #1
 8011a64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a66:	2300      	movs	r3, #0
 8011a68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a6a:	4b1f      	ldr	r3, [pc, #124]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a6c:	7a5b      	ldrb	r3, [r3, #9]
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d131      	bne.n	8011ad8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a74:	4b1c      	ldr	r3, [pc, #112]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a76:	7a5b      	ldrb	r3, [r3, #9]
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a7e:	2100      	movs	r1, #0
 8011a80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a82:	4b19      	ldr	r3, [pc, #100]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a84:	7a5b      	ldrb	r3, [r3, #9]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	4a17      	ldr	r2, [pc, #92]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	4413      	add	r3, r2
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a92:	4b15      	ldr	r3, [pc, #84]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a94:	7a5b      	ldrb	r3, [r3, #9]
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b13      	ldr	r3, [pc, #76]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011a9c:	4413      	add	r3, r2
 8011a9e:	79fa      	ldrb	r2, [r7, #7]
 8011aa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011aa2:	4b11      	ldr	r3, [pc, #68]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011aa4:	7a5b      	ldrb	r3, [r3, #9]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	b2d1      	uxtb	r1, r2
 8011aac:	4a0e      	ldr	r2, [pc, #56]	; (8011ae8 <FATFS_LinkDriverEx+0x94>)
 8011aae:	7251      	strb	r1, [r2, #9]
 8011ab0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ab2:	7dbb      	ldrb	r3, [r7, #22]
 8011ab4:	3330      	adds	r3, #48	; 0x30
 8011ab6:	b2da      	uxtb	r2, r3
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	223a      	movs	r2, #58	; 0x3a
 8011ac2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	3302      	adds	r3, #2
 8011ac8:	222f      	movs	r2, #47	; 0x2f
 8011aca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	3303      	adds	r3, #3
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	371c      	adds	r7, #28
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	20037464 	.word	0x20037464

08011aec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011af6:	2200      	movs	r2, #0
 8011af8:	6839      	ldr	r1, [r7, #0]
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7ff ffaa 	bl	8011a54 <FATFS_LinkDriverEx>
 8011b00:	4603      	mov	r3, r0
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3708      	adds	r7, #8
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <__cxa_guard_acquire>:
 8011b0a:	6803      	ldr	r3, [r0, #0]
 8011b0c:	07db      	lsls	r3, r3, #31
 8011b0e:	d406      	bmi.n	8011b1e <__cxa_guard_acquire+0x14>
 8011b10:	7843      	ldrb	r3, [r0, #1]
 8011b12:	b103      	cbz	r3, 8011b16 <__cxa_guard_acquire+0xc>
 8011b14:	deff      	udf	#255	; 0xff
 8011b16:	2301      	movs	r3, #1
 8011b18:	7043      	strb	r3, [r0, #1]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	4770      	bx	lr
 8011b1e:	2000      	movs	r0, #0
 8011b20:	4770      	bx	lr

08011b22 <__cxa_guard_release>:
 8011b22:	2301      	movs	r3, #1
 8011b24:	6003      	str	r3, [r0, #0]
 8011b26:	4770      	bx	lr

08011b28 <cos>:
 8011b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b2a:	ec51 0b10 	vmov	r0, r1, d0
 8011b2e:	4a1e      	ldr	r2, [pc, #120]	; (8011ba8 <cos+0x80>)
 8011b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b34:	4293      	cmp	r3, r2
 8011b36:	dc06      	bgt.n	8011b46 <cos+0x1e>
 8011b38:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011ba0 <cos+0x78>
 8011b3c:	f000 fa74 	bl	8012028 <__kernel_cos>
 8011b40:	ec51 0b10 	vmov	r0, r1, d0
 8011b44:	e007      	b.n	8011b56 <cos+0x2e>
 8011b46:	4a19      	ldr	r2, [pc, #100]	; (8011bac <cos+0x84>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	dd09      	ble.n	8011b60 <cos+0x38>
 8011b4c:	ee10 2a10 	vmov	r2, s0
 8011b50:	460b      	mov	r3, r1
 8011b52:	f7ee fbb1 	bl	80002b8 <__aeabi_dsub>
 8011b56:	ec41 0b10 	vmov	d0, r0, r1
 8011b5a:	b005      	add	sp, #20
 8011b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b60:	4668      	mov	r0, sp
 8011b62:	f000 f86d 	bl	8011c40 <__ieee754_rem_pio2>
 8011b66:	f000 0003 	and.w	r0, r0, #3
 8011b6a:	2801      	cmp	r0, #1
 8011b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b70:	ed9d 0b00 	vldr	d0, [sp]
 8011b74:	d007      	beq.n	8011b86 <cos+0x5e>
 8011b76:	2802      	cmp	r0, #2
 8011b78:	d00e      	beq.n	8011b98 <cos+0x70>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	d0de      	beq.n	8011b3c <cos+0x14>
 8011b7e:	2001      	movs	r0, #1
 8011b80:	f000 fe5a 	bl	8012838 <__kernel_sin>
 8011b84:	e7dc      	b.n	8011b40 <cos+0x18>
 8011b86:	f000 fe57 	bl	8012838 <__kernel_sin>
 8011b8a:	ec53 2b10 	vmov	r2, r3, d0
 8011b8e:	ee10 0a10 	vmov	r0, s0
 8011b92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b96:	e7de      	b.n	8011b56 <cos+0x2e>
 8011b98:	f000 fa46 	bl	8012028 <__kernel_cos>
 8011b9c:	e7f5      	b.n	8011b8a <cos+0x62>
 8011b9e:	bf00      	nop
	...
 8011ba8:	3fe921fb 	.word	0x3fe921fb
 8011bac:	7fefffff 	.word	0x7fefffff

08011bb0 <sin>:
 8011bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bb2:	ec51 0b10 	vmov	r0, r1, d0
 8011bb6:	4a20      	ldr	r2, [pc, #128]	; (8011c38 <sin+0x88>)
 8011bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	dc07      	bgt.n	8011bd0 <sin+0x20>
 8011bc0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011c30 <sin+0x80>
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	f000 fe37 	bl	8012838 <__kernel_sin>
 8011bca:	ec51 0b10 	vmov	r0, r1, d0
 8011bce:	e007      	b.n	8011be0 <sin+0x30>
 8011bd0:	4a1a      	ldr	r2, [pc, #104]	; (8011c3c <sin+0x8c>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	dd09      	ble.n	8011bea <sin+0x3a>
 8011bd6:	ee10 2a10 	vmov	r2, s0
 8011bda:	460b      	mov	r3, r1
 8011bdc:	f7ee fb6c 	bl	80002b8 <__aeabi_dsub>
 8011be0:	ec41 0b10 	vmov	d0, r0, r1
 8011be4:	b005      	add	sp, #20
 8011be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bea:	4668      	mov	r0, sp
 8011bec:	f000 f828 	bl	8011c40 <__ieee754_rem_pio2>
 8011bf0:	f000 0003 	and.w	r0, r0, #3
 8011bf4:	2801      	cmp	r0, #1
 8011bf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bfa:	ed9d 0b00 	vldr	d0, [sp]
 8011bfe:	d004      	beq.n	8011c0a <sin+0x5a>
 8011c00:	2802      	cmp	r0, #2
 8011c02:	d005      	beq.n	8011c10 <sin+0x60>
 8011c04:	b970      	cbnz	r0, 8011c24 <sin+0x74>
 8011c06:	2001      	movs	r0, #1
 8011c08:	e7dd      	b.n	8011bc6 <sin+0x16>
 8011c0a:	f000 fa0d 	bl	8012028 <__kernel_cos>
 8011c0e:	e7dc      	b.n	8011bca <sin+0x1a>
 8011c10:	2001      	movs	r0, #1
 8011c12:	f000 fe11 	bl	8012838 <__kernel_sin>
 8011c16:	ec53 2b10 	vmov	r2, r3, d0
 8011c1a:	ee10 0a10 	vmov	r0, s0
 8011c1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c22:	e7dd      	b.n	8011be0 <sin+0x30>
 8011c24:	f000 fa00 	bl	8012028 <__kernel_cos>
 8011c28:	e7f5      	b.n	8011c16 <sin+0x66>
 8011c2a:	bf00      	nop
 8011c2c:	f3af 8000 	nop.w
	...
 8011c38:	3fe921fb 	.word	0x3fe921fb
 8011c3c:	7fefffff 	.word	0x7fefffff

08011c40 <__ieee754_rem_pio2>:
 8011c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c44:	ec57 6b10 	vmov	r6, r7, d0
 8011c48:	4bc3      	ldr	r3, [pc, #780]	; (8011f58 <__ieee754_rem_pio2+0x318>)
 8011c4a:	b08d      	sub	sp, #52	; 0x34
 8011c4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c50:	4598      	cmp	r8, r3
 8011c52:	4604      	mov	r4, r0
 8011c54:	9704      	str	r7, [sp, #16]
 8011c56:	dc07      	bgt.n	8011c68 <__ieee754_rem_pio2+0x28>
 8011c58:	2200      	movs	r2, #0
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	ed84 0b00 	vstr	d0, [r4]
 8011c60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c64:	2500      	movs	r5, #0
 8011c66:	e027      	b.n	8011cb8 <__ieee754_rem_pio2+0x78>
 8011c68:	4bbc      	ldr	r3, [pc, #752]	; (8011f5c <__ieee754_rem_pio2+0x31c>)
 8011c6a:	4598      	cmp	r8, r3
 8011c6c:	dc75      	bgt.n	8011d5a <__ieee754_rem_pio2+0x11a>
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	4dbb      	ldr	r5, [pc, #748]	; (8011f60 <__ieee754_rem_pio2+0x320>)
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	ee10 0a10 	vmov	r0, s0
 8011c78:	a3a9      	add	r3, pc, #676	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2e0>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	4639      	mov	r1, r7
 8011c80:	dd36      	ble.n	8011cf0 <__ieee754_rem_pio2+0xb0>
 8011c82:	f7ee fb19 	bl	80002b8 <__aeabi_dsub>
 8011c86:	45a8      	cmp	r8, r5
 8011c88:	4606      	mov	r6, r0
 8011c8a:	460f      	mov	r7, r1
 8011c8c:	d018      	beq.n	8011cc0 <__ieee754_rem_pio2+0x80>
 8011c8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x2e8>)
 8011c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c94:	f7ee fb10 	bl	80002b8 <__aeabi_dsub>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	4639      	mov	r1, r7
 8011ca4:	f7ee fb08 	bl	80002b8 <__aeabi_dsub>
 8011ca8:	a39f      	add	r3, pc, #636	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x2e8>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee fb03 	bl	80002b8 <__aeabi_dsub>
 8011cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cb6:	2501      	movs	r5, #1
 8011cb8:	4628      	mov	r0, r5
 8011cba:	b00d      	add	sp, #52	; 0x34
 8011cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc0:	a39b      	add	r3, pc, #620	; (adr r3, 8011f30 <__ieee754_rem_pio2+0x2f0>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	f7ee faf7 	bl	80002b8 <__aeabi_dsub>
 8011cca:	a39b      	add	r3, pc, #620	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x2f8>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	4606      	mov	r6, r0
 8011cd2:	460f      	mov	r7, r1
 8011cd4:	f7ee faf0 	bl	80002b8 <__aeabi_dsub>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	460b      	mov	r3, r1
 8011cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee fae8 	bl	80002b8 <__aeabi_dsub>
 8011ce8:	a393      	add	r3, pc, #588	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x2f8>)
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	e7de      	b.n	8011cae <__ieee754_rem_pio2+0x6e>
 8011cf0:	f7ee fae4 	bl	80002bc <__adddf3>
 8011cf4:	45a8      	cmp	r8, r5
 8011cf6:	4606      	mov	r6, r0
 8011cf8:	460f      	mov	r7, r1
 8011cfa:	d016      	beq.n	8011d2a <__ieee754_rem_pio2+0xea>
 8011cfc:	a38a      	add	r3, pc, #552	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x2e8>)
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	f7ee fadb 	bl	80002bc <__adddf3>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	e9c4 2300 	strd	r2, r3, [r4]
 8011d0e:	4630      	mov	r0, r6
 8011d10:	4639      	mov	r1, r7
 8011d12:	f7ee fad1 	bl	80002b8 <__aeabi_dsub>
 8011d16:	a384      	add	r3, pc, #528	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x2e8>)
 8011d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1c:	f7ee face 	bl	80002bc <__adddf3>
 8011d20:	f04f 35ff 	mov.w	r5, #4294967295
 8011d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d28:	e7c6      	b.n	8011cb8 <__ieee754_rem_pio2+0x78>
 8011d2a:	a381      	add	r3, pc, #516	; (adr r3, 8011f30 <__ieee754_rem_pio2+0x2f0>)
 8011d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d30:	f7ee fac4 	bl	80002bc <__adddf3>
 8011d34:	a380      	add	r3, pc, #512	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x2f8>)
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	460f      	mov	r7, r1
 8011d3e:	f7ee fabd 	bl	80002bc <__adddf3>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	e9c4 2300 	strd	r2, r3, [r4]
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	4639      	mov	r1, r7
 8011d4e:	f7ee fab3 	bl	80002b8 <__aeabi_dsub>
 8011d52:	a379      	add	r3, pc, #484	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x2f8>)
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	e7e0      	b.n	8011d1c <__ieee754_rem_pio2+0xdc>
 8011d5a:	4b82      	ldr	r3, [pc, #520]	; (8011f64 <__ieee754_rem_pio2+0x324>)
 8011d5c:	4598      	cmp	r8, r3
 8011d5e:	f300 80d0 	bgt.w	8011f02 <__ieee754_rem_pio2+0x2c2>
 8011d62:	f000 fe23 	bl	80129ac <fabs>
 8011d66:	ec57 6b10 	vmov	r6, r7, d0
 8011d6a:	ee10 0a10 	vmov	r0, s0
 8011d6e:	a374      	add	r3, pc, #464	; (adr r3, 8011f40 <__ieee754_rem_pio2+0x300>)
 8011d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d74:	4639      	mov	r1, r7
 8011d76:	f7ee fc57 	bl	8000628 <__aeabi_dmul>
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4b7a      	ldr	r3, [pc, #488]	; (8011f68 <__ieee754_rem_pio2+0x328>)
 8011d7e:	f7ee fa9d 	bl	80002bc <__adddf3>
 8011d82:	f7ee ff01 	bl	8000b88 <__aeabi_d2iz>
 8011d86:	4605      	mov	r5, r0
 8011d88:	f7ee fbe4 	bl	8000554 <__aeabi_i2d>
 8011d8c:	a364      	add	r3, pc, #400	; (adr r3, 8011f20 <__ieee754_rem_pio2+0x2e0>)
 8011d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d96:	f7ee fc47 	bl	8000628 <__aeabi_dmul>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	4630      	mov	r0, r6
 8011da0:	4639      	mov	r1, r7
 8011da2:	f7ee fa89 	bl	80002b8 <__aeabi_dsub>
 8011da6:	a360      	add	r3, pc, #384	; (adr r3, 8011f28 <__ieee754_rem_pio2+0x2e8>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	4682      	mov	sl, r0
 8011dae:	468b      	mov	fp, r1
 8011db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011db4:	f7ee fc38 	bl	8000628 <__aeabi_dmul>
 8011db8:	2d1f      	cmp	r5, #31
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460f      	mov	r7, r1
 8011dbe:	dc0c      	bgt.n	8011dda <__ieee754_rem_pio2+0x19a>
 8011dc0:	1e6a      	subs	r2, r5, #1
 8011dc2:	4b6a      	ldr	r3, [pc, #424]	; (8011f6c <__ieee754_rem_pio2+0x32c>)
 8011dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dc8:	4543      	cmp	r3, r8
 8011dca:	d006      	beq.n	8011dda <__ieee754_rem_pio2+0x19a>
 8011dcc:	4632      	mov	r2, r6
 8011dce:	463b      	mov	r3, r7
 8011dd0:	4650      	mov	r0, sl
 8011dd2:	4659      	mov	r1, fp
 8011dd4:	f7ee fa70 	bl	80002b8 <__aeabi_dsub>
 8011dd8:	e00e      	b.n	8011df8 <__ieee754_rem_pio2+0x1b8>
 8011dda:	4632      	mov	r2, r6
 8011ddc:	463b      	mov	r3, r7
 8011dde:	4650      	mov	r0, sl
 8011de0:	4659      	mov	r1, fp
 8011de2:	f7ee fa69 	bl	80002b8 <__aeabi_dsub>
 8011de6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	9a05      	ldr	r2, [sp, #20]
 8011dee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011df2:	1ad3      	subs	r3, r2, r3
 8011df4:	2b10      	cmp	r3, #16
 8011df6:	dc02      	bgt.n	8011dfe <__ieee754_rem_pio2+0x1be>
 8011df8:	e9c4 0100 	strd	r0, r1, [r4]
 8011dfc:	e039      	b.n	8011e72 <__ieee754_rem_pio2+0x232>
 8011dfe:	a34c      	add	r3, pc, #304	; (adr r3, 8011f30 <__ieee754_rem_pio2+0x2f0>)
 8011e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e08:	f7ee fc0e 	bl	8000628 <__aeabi_dmul>
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	460f      	mov	r7, r1
 8011e10:	4602      	mov	r2, r0
 8011e12:	460b      	mov	r3, r1
 8011e14:	4650      	mov	r0, sl
 8011e16:	4659      	mov	r1, fp
 8011e18:	f7ee fa4e 	bl	80002b8 <__aeabi_dsub>
 8011e1c:	4602      	mov	r2, r0
 8011e1e:	460b      	mov	r3, r1
 8011e20:	4680      	mov	r8, r0
 8011e22:	4689      	mov	r9, r1
 8011e24:	4650      	mov	r0, sl
 8011e26:	4659      	mov	r1, fp
 8011e28:	f7ee fa46 	bl	80002b8 <__aeabi_dsub>
 8011e2c:	4632      	mov	r2, r6
 8011e2e:	463b      	mov	r3, r7
 8011e30:	f7ee fa42 	bl	80002b8 <__aeabi_dsub>
 8011e34:	a340      	add	r3, pc, #256	; (adr r3, 8011f38 <__ieee754_rem_pio2+0x2f8>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e42:	f7ee fbf1 	bl	8000628 <__aeabi_dmul>
 8011e46:	4632      	mov	r2, r6
 8011e48:	463b      	mov	r3, r7
 8011e4a:	f7ee fa35 	bl	80002b8 <__aeabi_dsub>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	460b      	mov	r3, r1
 8011e52:	4606      	mov	r6, r0
 8011e54:	460f      	mov	r7, r1
 8011e56:	4640      	mov	r0, r8
 8011e58:	4649      	mov	r1, r9
 8011e5a:	f7ee fa2d 	bl	80002b8 <__aeabi_dsub>
 8011e5e:	9a05      	ldr	r2, [sp, #20]
 8011e60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	2b31      	cmp	r3, #49	; 0x31
 8011e68:	dc20      	bgt.n	8011eac <__ieee754_rem_pio2+0x26c>
 8011e6a:	e9c4 0100 	strd	r0, r1, [r4]
 8011e6e:	46c2      	mov	sl, r8
 8011e70:	46cb      	mov	fp, r9
 8011e72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e76:	4650      	mov	r0, sl
 8011e78:	4642      	mov	r2, r8
 8011e7a:	464b      	mov	r3, r9
 8011e7c:	4659      	mov	r1, fp
 8011e7e:	f7ee fa1b 	bl	80002b8 <__aeabi_dsub>
 8011e82:	463b      	mov	r3, r7
 8011e84:	4632      	mov	r2, r6
 8011e86:	f7ee fa17 	bl	80002b8 <__aeabi_dsub>
 8011e8a:	9b04      	ldr	r3, [sp, #16]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e92:	f6bf af11 	bge.w	8011cb8 <__ieee754_rem_pio2+0x78>
 8011e96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011e9a:	6063      	str	r3, [r4, #4]
 8011e9c:	f8c4 8000 	str.w	r8, [r4]
 8011ea0:	60a0      	str	r0, [r4, #8]
 8011ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ea6:	60e3      	str	r3, [r4, #12]
 8011ea8:	426d      	negs	r5, r5
 8011eaa:	e705      	b.n	8011cb8 <__ieee754_rem_pio2+0x78>
 8011eac:	a326      	add	r3, pc, #152	; (adr r3, 8011f48 <__ieee754_rem_pio2+0x308>)
 8011eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eb6:	f7ee fbb7 	bl	8000628 <__aeabi_dmul>
 8011eba:	4606      	mov	r6, r0
 8011ebc:	460f      	mov	r7, r1
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	f7ee f9f7 	bl	80002b8 <__aeabi_dsub>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	4682      	mov	sl, r0
 8011ed0:	468b      	mov	fp, r1
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	4649      	mov	r1, r9
 8011ed6:	f7ee f9ef 	bl	80002b8 <__aeabi_dsub>
 8011eda:	4632      	mov	r2, r6
 8011edc:	463b      	mov	r3, r7
 8011ede:	f7ee f9eb 	bl	80002b8 <__aeabi_dsub>
 8011ee2:	a31b      	add	r3, pc, #108	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x310>)
 8011ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef0:	f7ee fb9a 	bl	8000628 <__aeabi_dmul>
 8011ef4:	4632      	mov	r2, r6
 8011ef6:	463b      	mov	r3, r7
 8011ef8:	f7ee f9de 	bl	80002b8 <__aeabi_dsub>
 8011efc:	4606      	mov	r6, r0
 8011efe:	460f      	mov	r7, r1
 8011f00:	e764      	b.n	8011dcc <__ieee754_rem_pio2+0x18c>
 8011f02:	4b1b      	ldr	r3, [pc, #108]	; (8011f70 <__ieee754_rem_pio2+0x330>)
 8011f04:	4598      	cmp	r8, r3
 8011f06:	dd35      	ble.n	8011f74 <__ieee754_rem_pio2+0x334>
 8011f08:	ee10 2a10 	vmov	r2, s0
 8011f0c:	463b      	mov	r3, r7
 8011f0e:	4630      	mov	r0, r6
 8011f10:	4639      	mov	r1, r7
 8011f12:	f7ee f9d1 	bl	80002b8 <__aeabi_dsub>
 8011f16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8011f1e:	e6a1      	b.n	8011c64 <__ieee754_rem_pio2+0x24>
 8011f20:	54400000 	.word	0x54400000
 8011f24:	3ff921fb 	.word	0x3ff921fb
 8011f28:	1a626331 	.word	0x1a626331
 8011f2c:	3dd0b461 	.word	0x3dd0b461
 8011f30:	1a600000 	.word	0x1a600000
 8011f34:	3dd0b461 	.word	0x3dd0b461
 8011f38:	2e037073 	.word	0x2e037073
 8011f3c:	3ba3198a 	.word	0x3ba3198a
 8011f40:	6dc9c883 	.word	0x6dc9c883
 8011f44:	3fe45f30 	.word	0x3fe45f30
 8011f48:	2e000000 	.word	0x2e000000
 8011f4c:	3ba3198a 	.word	0x3ba3198a
 8011f50:	252049c1 	.word	0x252049c1
 8011f54:	397b839a 	.word	0x397b839a
 8011f58:	3fe921fb 	.word	0x3fe921fb
 8011f5c:	4002d97b 	.word	0x4002d97b
 8011f60:	3ff921fb 	.word	0x3ff921fb
 8011f64:	413921fb 	.word	0x413921fb
 8011f68:	3fe00000 	.word	0x3fe00000
 8011f6c:	08018084 	.word	0x08018084
 8011f70:	7fefffff 	.word	0x7fefffff
 8011f74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011f78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011f7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011f80:	4630      	mov	r0, r6
 8011f82:	460f      	mov	r7, r1
 8011f84:	f7ee fe00 	bl	8000b88 <__aeabi_d2iz>
 8011f88:	f7ee fae4 	bl	8000554 <__aeabi_i2d>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	460b      	mov	r3, r1
 8011f90:	4630      	mov	r0, r6
 8011f92:	4639      	mov	r1, r7
 8011f94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f98:	f7ee f98e 	bl	80002b8 <__aeabi_dsub>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	4b1f      	ldr	r3, [pc, #124]	; (801201c <__ieee754_rem_pio2+0x3dc>)
 8011fa0:	f7ee fb42 	bl	8000628 <__aeabi_dmul>
 8011fa4:	460f      	mov	r7, r1
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	f7ee fdee 	bl	8000b88 <__aeabi_d2iz>
 8011fac:	f7ee fad2 	bl	8000554 <__aeabi_i2d>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	4639      	mov	r1, r7
 8011fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011fbc:	f7ee f97c 	bl	80002b8 <__aeabi_dsub>
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	4b16      	ldr	r3, [pc, #88]	; (801201c <__ieee754_rem_pio2+0x3dc>)
 8011fc4:	f7ee fb30 	bl	8000628 <__aeabi_dmul>
 8011fc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011fcc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011fd0:	f04f 0803 	mov.w	r8, #3
 8011fd4:	2600      	movs	r6, #0
 8011fd6:	2700      	movs	r7, #0
 8011fd8:	4632      	mov	r2, r6
 8011fda:	463b      	mov	r3, r7
 8011fdc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011fe0:	f108 3aff 	add.w	sl, r8, #4294967295
 8011fe4:	f7ee fd88 	bl	8000af8 <__aeabi_dcmpeq>
 8011fe8:	b9b0      	cbnz	r0, 8012018 <__ieee754_rem_pio2+0x3d8>
 8011fea:	4b0d      	ldr	r3, [pc, #52]	; (8012020 <__ieee754_rem_pio2+0x3e0>)
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	2302      	movs	r3, #2
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	462a      	mov	r2, r5
 8011ff4:	4643      	mov	r3, r8
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	a806      	add	r0, sp, #24
 8011ffa:	f000 f8dd 	bl	80121b8 <__kernel_rem_pio2>
 8011ffe:	9b04      	ldr	r3, [sp, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	4605      	mov	r5, r0
 8012004:	f6bf ae58 	bge.w	8011cb8 <__ieee754_rem_pio2+0x78>
 8012008:	6863      	ldr	r3, [r4, #4]
 801200a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801200e:	6063      	str	r3, [r4, #4]
 8012010:	68e3      	ldr	r3, [r4, #12]
 8012012:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012016:	e746      	b.n	8011ea6 <__ieee754_rem_pio2+0x266>
 8012018:	46d0      	mov	r8, sl
 801201a:	e7dd      	b.n	8011fd8 <__ieee754_rem_pio2+0x398>
 801201c:	41700000 	.word	0x41700000
 8012020:	08018104 	.word	0x08018104
 8012024:	00000000 	.word	0x00000000

08012028 <__kernel_cos>:
 8012028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202c:	ec59 8b10 	vmov	r8, r9, d0
 8012030:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012034:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012038:	ed2d 8b02 	vpush	{d8}
 801203c:	eeb0 8a41 	vmov.f32	s16, s2
 8012040:	eef0 8a61 	vmov.f32	s17, s3
 8012044:	da07      	bge.n	8012056 <__kernel_cos+0x2e>
 8012046:	ee10 0a10 	vmov	r0, s0
 801204a:	4649      	mov	r1, r9
 801204c:	f7ee fd9c 	bl	8000b88 <__aeabi_d2iz>
 8012050:	2800      	cmp	r0, #0
 8012052:	f000 8089 	beq.w	8012168 <__kernel_cos+0x140>
 8012056:	4642      	mov	r2, r8
 8012058:	464b      	mov	r3, r9
 801205a:	4640      	mov	r0, r8
 801205c:	4649      	mov	r1, r9
 801205e:	f7ee fae3 	bl	8000628 <__aeabi_dmul>
 8012062:	2200      	movs	r2, #0
 8012064:	4b4e      	ldr	r3, [pc, #312]	; (80121a0 <__kernel_cos+0x178>)
 8012066:	4604      	mov	r4, r0
 8012068:	460d      	mov	r5, r1
 801206a:	f7ee fadd 	bl	8000628 <__aeabi_dmul>
 801206e:	a340      	add	r3, pc, #256	; (adr r3, 8012170 <__kernel_cos+0x148>)
 8012070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012074:	4682      	mov	sl, r0
 8012076:	468b      	mov	fp, r1
 8012078:	4620      	mov	r0, r4
 801207a:	4629      	mov	r1, r5
 801207c:	f7ee fad4 	bl	8000628 <__aeabi_dmul>
 8012080:	a33d      	add	r3, pc, #244	; (adr r3, 8012178 <__kernel_cos+0x150>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee f919 	bl	80002bc <__adddf3>
 801208a:	4622      	mov	r2, r4
 801208c:	462b      	mov	r3, r5
 801208e:	f7ee facb 	bl	8000628 <__aeabi_dmul>
 8012092:	a33b      	add	r3, pc, #236	; (adr r3, 8012180 <__kernel_cos+0x158>)
 8012094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012098:	f7ee f90e 	bl	80002b8 <__aeabi_dsub>
 801209c:	4622      	mov	r2, r4
 801209e:	462b      	mov	r3, r5
 80120a0:	f7ee fac2 	bl	8000628 <__aeabi_dmul>
 80120a4:	a338      	add	r3, pc, #224	; (adr r3, 8012188 <__kernel_cos+0x160>)
 80120a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120aa:	f7ee f907 	bl	80002bc <__adddf3>
 80120ae:	4622      	mov	r2, r4
 80120b0:	462b      	mov	r3, r5
 80120b2:	f7ee fab9 	bl	8000628 <__aeabi_dmul>
 80120b6:	a336      	add	r3, pc, #216	; (adr r3, 8012190 <__kernel_cos+0x168>)
 80120b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120bc:	f7ee f8fc 	bl	80002b8 <__aeabi_dsub>
 80120c0:	4622      	mov	r2, r4
 80120c2:	462b      	mov	r3, r5
 80120c4:	f7ee fab0 	bl	8000628 <__aeabi_dmul>
 80120c8:	a333      	add	r3, pc, #204	; (adr r3, 8012198 <__kernel_cos+0x170>)
 80120ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ce:	f7ee f8f5 	bl	80002bc <__adddf3>
 80120d2:	4622      	mov	r2, r4
 80120d4:	462b      	mov	r3, r5
 80120d6:	f7ee faa7 	bl	8000628 <__aeabi_dmul>
 80120da:	4622      	mov	r2, r4
 80120dc:	462b      	mov	r3, r5
 80120de:	f7ee faa3 	bl	8000628 <__aeabi_dmul>
 80120e2:	ec53 2b18 	vmov	r2, r3, d8
 80120e6:	4604      	mov	r4, r0
 80120e8:	460d      	mov	r5, r1
 80120ea:	4640      	mov	r0, r8
 80120ec:	4649      	mov	r1, r9
 80120ee:	f7ee fa9b 	bl	8000628 <__aeabi_dmul>
 80120f2:	460b      	mov	r3, r1
 80120f4:	4602      	mov	r2, r0
 80120f6:	4629      	mov	r1, r5
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7ee f8dd 	bl	80002b8 <__aeabi_dsub>
 80120fe:	4b29      	ldr	r3, [pc, #164]	; (80121a4 <__kernel_cos+0x17c>)
 8012100:	429e      	cmp	r6, r3
 8012102:	4680      	mov	r8, r0
 8012104:	4689      	mov	r9, r1
 8012106:	dc11      	bgt.n	801212c <__kernel_cos+0x104>
 8012108:	4602      	mov	r2, r0
 801210a:	460b      	mov	r3, r1
 801210c:	4650      	mov	r0, sl
 801210e:	4659      	mov	r1, fp
 8012110:	f7ee f8d2 	bl	80002b8 <__aeabi_dsub>
 8012114:	460b      	mov	r3, r1
 8012116:	4924      	ldr	r1, [pc, #144]	; (80121a8 <__kernel_cos+0x180>)
 8012118:	4602      	mov	r2, r0
 801211a:	2000      	movs	r0, #0
 801211c:	f7ee f8cc 	bl	80002b8 <__aeabi_dsub>
 8012120:	ecbd 8b02 	vpop	{d8}
 8012124:	ec41 0b10 	vmov	d0, r0, r1
 8012128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212c:	4b1f      	ldr	r3, [pc, #124]	; (80121ac <__kernel_cos+0x184>)
 801212e:	491e      	ldr	r1, [pc, #120]	; (80121a8 <__kernel_cos+0x180>)
 8012130:	429e      	cmp	r6, r3
 8012132:	bfcc      	ite	gt
 8012134:	4d1e      	ldrgt	r5, [pc, #120]	; (80121b0 <__kernel_cos+0x188>)
 8012136:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801213a:	2400      	movs	r4, #0
 801213c:	4622      	mov	r2, r4
 801213e:	462b      	mov	r3, r5
 8012140:	2000      	movs	r0, #0
 8012142:	f7ee f8b9 	bl	80002b8 <__aeabi_dsub>
 8012146:	4622      	mov	r2, r4
 8012148:	4606      	mov	r6, r0
 801214a:	460f      	mov	r7, r1
 801214c:	462b      	mov	r3, r5
 801214e:	4650      	mov	r0, sl
 8012150:	4659      	mov	r1, fp
 8012152:	f7ee f8b1 	bl	80002b8 <__aeabi_dsub>
 8012156:	4642      	mov	r2, r8
 8012158:	464b      	mov	r3, r9
 801215a:	f7ee f8ad 	bl	80002b8 <__aeabi_dsub>
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	4630      	mov	r0, r6
 8012164:	4639      	mov	r1, r7
 8012166:	e7d9      	b.n	801211c <__kernel_cos+0xf4>
 8012168:	2000      	movs	r0, #0
 801216a:	490f      	ldr	r1, [pc, #60]	; (80121a8 <__kernel_cos+0x180>)
 801216c:	e7d8      	b.n	8012120 <__kernel_cos+0xf8>
 801216e:	bf00      	nop
 8012170:	be8838d4 	.word	0xbe8838d4
 8012174:	bda8fae9 	.word	0xbda8fae9
 8012178:	bdb4b1c4 	.word	0xbdb4b1c4
 801217c:	3e21ee9e 	.word	0x3e21ee9e
 8012180:	809c52ad 	.word	0x809c52ad
 8012184:	3e927e4f 	.word	0x3e927e4f
 8012188:	19cb1590 	.word	0x19cb1590
 801218c:	3efa01a0 	.word	0x3efa01a0
 8012190:	16c15177 	.word	0x16c15177
 8012194:	3f56c16c 	.word	0x3f56c16c
 8012198:	5555554c 	.word	0x5555554c
 801219c:	3fa55555 	.word	0x3fa55555
 80121a0:	3fe00000 	.word	0x3fe00000
 80121a4:	3fd33332 	.word	0x3fd33332
 80121a8:	3ff00000 	.word	0x3ff00000
 80121ac:	3fe90000 	.word	0x3fe90000
 80121b0:	3fd20000 	.word	0x3fd20000
 80121b4:	00000000 	.word	0x00000000

080121b8 <__kernel_rem_pio2>:
 80121b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121bc:	ed2d 8b02 	vpush	{d8}
 80121c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80121c4:	1ed4      	subs	r4, r2, #3
 80121c6:	9308      	str	r3, [sp, #32]
 80121c8:	9101      	str	r1, [sp, #4]
 80121ca:	4bc5      	ldr	r3, [pc, #788]	; (80124e0 <__kernel_rem_pio2+0x328>)
 80121cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80121ce:	9009      	str	r0, [sp, #36]	; 0x24
 80121d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80121d4:	9304      	str	r3, [sp, #16]
 80121d6:	9b08      	ldr	r3, [sp, #32]
 80121d8:	3b01      	subs	r3, #1
 80121da:	9307      	str	r3, [sp, #28]
 80121dc:	2318      	movs	r3, #24
 80121de:	fb94 f4f3 	sdiv	r4, r4, r3
 80121e2:	f06f 0317 	mvn.w	r3, #23
 80121e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80121ea:	fb04 3303 	mla	r3, r4, r3, r3
 80121ee:	eb03 0a02 	add.w	sl, r3, r2
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	9a07      	ldr	r2, [sp, #28]
 80121f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80124d0 <__kernel_rem_pio2+0x318>
 80121fa:	eb03 0802 	add.w	r8, r3, r2
 80121fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012200:	1aa7      	subs	r7, r4, r2
 8012202:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012206:	ae22      	add	r6, sp, #136	; 0x88
 8012208:	2500      	movs	r5, #0
 801220a:	4545      	cmp	r5, r8
 801220c:	dd13      	ble.n	8012236 <__kernel_rem_pio2+0x7e>
 801220e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80124d0 <__kernel_rem_pio2+0x318>
 8012212:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012216:	2600      	movs	r6, #0
 8012218:	9b04      	ldr	r3, [sp, #16]
 801221a:	429e      	cmp	r6, r3
 801221c:	dc32      	bgt.n	8012284 <__kernel_rem_pio2+0xcc>
 801221e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012220:	9302      	str	r3, [sp, #8]
 8012222:	9b08      	ldr	r3, [sp, #32]
 8012224:	199d      	adds	r5, r3, r6
 8012226:	ab22      	add	r3, sp, #136	; 0x88
 8012228:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801222c:	9306      	str	r3, [sp, #24]
 801222e:	ec59 8b18 	vmov	r8, r9, d8
 8012232:	2700      	movs	r7, #0
 8012234:	e01f      	b.n	8012276 <__kernel_rem_pio2+0xbe>
 8012236:	42ef      	cmn	r7, r5
 8012238:	d407      	bmi.n	801224a <__kernel_rem_pio2+0x92>
 801223a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801223e:	f7ee f989 	bl	8000554 <__aeabi_i2d>
 8012242:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012246:	3501      	adds	r5, #1
 8012248:	e7df      	b.n	801220a <__kernel_rem_pio2+0x52>
 801224a:	ec51 0b18 	vmov	r0, r1, d8
 801224e:	e7f8      	b.n	8012242 <__kernel_rem_pio2+0x8a>
 8012250:	9906      	ldr	r1, [sp, #24]
 8012252:	9d02      	ldr	r5, [sp, #8]
 8012254:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012258:	9106      	str	r1, [sp, #24]
 801225a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801225e:	9502      	str	r5, [sp, #8]
 8012260:	f7ee f9e2 	bl	8000628 <__aeabi_dmul>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	4640      	mov	r0, r8
 801226a:	4649      	mov	r1, r9
 801226c:	f7ee f826 	bl	80002bc <__adddf3>
 8012270:	3701      	adds	r7, #1
 8012272:	4680      	mov	r8, r0
 8012274:	4689      	mov	r9, r1
 8012276:	9b07      	ldr	r3, [sp, #28]
 8012278:	429f      	cmp	r7, r3
 801227a:	dde9      	ble.n	8012250 <__kernel_rem_pio2+0x98>
 801227c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012280:	3601      	adds	r6, #1
 8012282:	e7c9      	b.n	8012218 <__kernel_rem_pio2+0x60>
 8012284:	9b04      	ldr	r3, [sp, #16]
 8012286:	aa0e      	add	r2, sp, #56	; 0x38
 8012288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801228c:	930c      	str	r3, [sp, #48]	; 0x30
 801228e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012290:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012294:	9c04      	ldr	r4, [sp, #16]
 8012296:	930b      	str	r3, [sp, #44]	; 0x2c
 8012298:	ab9a      	add	r3, sp, #616	; 0x268
 801229a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801229e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80122a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80122aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80122ae:	ab9a      	add	r3, sp, #616	; 0x268
 80122b0:	445b      	add	r3, fp
 80122b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80122b6:	2500      	movs	r5, #0
 80122b8:	1b63      	subs	r3, r4, r5
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	dc78      	bgt.n	80123b0 <__kernel_rem_pio2+0x1f8>
 80122be:	4650      	mov	r0, sl
 80122c0:	ec49 8b10 	vmov	d0, r8, r9
 80122c4:	f000 fc00 	bl	8012ac8 <scalbn>
 80122c8:	ec57 6b10 	vmov	r6, r7, d0
 80122cc:	2200      	movs	r2, #0
 80122ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80122d2:	ee10 0a10 	vmov	r0, s0
 80122d6:	4639      	mov	r1, r7
 80122d8:	f7ee f9a6 	bl	8000628 <__aeabi_dmul>
 80122dc:	ec41 0b10 	vmov	d0, r0, r1
 80122e0:	f000 fb6e 	bl	80129c0 <floor>
 80122e4:	2200      	movs	r2, #0
 80122e6:	ec51 0b10 	vmov	r0, r1, d0
 80122ea:	4b7e      	ldr	r3, [pc, #504]	; (80124e4 <__kernel_rem_pio2+0x32c>)
 80122ec:	f7ee f99c 	bl	8000628 <__aeabi_dmul>
 80122f0:	4602      	mov	r2, r0
 80122f2:	460b      	mov	r3, r1
 80122f4:	4630      	mov	r0, r6
 80122f6:	4639      	mov	r1, r7
 80122f8:	f7ed ffde 	bl	80002b8 <__aeabi_dsub>
 80122fc:	460f      	mov	r7, r1
 80122fe:	4606      	mov	r6, r0
 8012300:	f7ee fc42 	bl	8000b88 <__aeabi_d2iz>
 8012304:	9006      	str	r0, [sp, #24]
 8012306:	f7ee f925 	bl	8000554 <__aeabi_i2d>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4630      	mov	r0, r6
 8012310:	4639      	mov	r1, r7
 8012312:	f7ed ffd1 	bl	80002b8 <__aeabi_dsub>
 8012316:	f1ba 0f00 	cmp.w	sl, #0
 801231a:	4606      	mov	r6, r0
 801231c:	460f      	mov	r7, r1
 801231e:	dd6c      	ble.n	80123fa <__kernel_rem_pio2+0x242>
 8012320:	1e62      	subs	r2, r4, #1
 8012322:	ab0e      	add	r3, sp, #56	; 0x38
 8012324:	f1ca 0118 	rsb	r1, sl, #24
 8012328:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801232c:	9d06      	ldr	r5, [sp, #24]
 801232e:	fa40 f301 	asr.w	r3, r0, r1
 8012332:	441d      	add	r5, r3
 8012334:	408b      	lsls	r3, r1
 8012336:	1ac0      	subs	r0, r0, r3
 8012338:	ab0e      	add	r3, sp, #56	; 0x38
 801233a:	9506      	str	r5, [sp, #24]
 801233c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012340:	f1ca 0317 	rsb	r3, sl, #23
 8012344:	fa40 f303 	asr.w	r3, r0, r3
 8012348:	9302      	str	r3, [sp, #8]
 801234a:	9b02      	ldr	r3, [sp, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	dd62      	ble.n	8012416 <__kernel_rem_pio2+0x25e>
 8012350:	9b06      	ldr	r3, [sp, #24]
 8012352:	2200      	movs	r2, #0
 8012354:	3301      	adds	r3, #1
 8012356:	9306      	str	r3, [sp, #24]
 8012358:	4615      	mov	r5, r2
 801235a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801235e:	4294      	cmp	r4, r2
 8012360:	f300 8095 	bgt.w	801248e <__kernel_rem_pio2+0x2d6>
 8012364:	f1ba 0f00 	cmp.w	sl, #0
 8012368:	dd07      	ble.n	801237a <__kernel_rem_pio2+0x1c2>
 801236a:	f1ba 0f01 	cmp.w	sl, #1
 801236e:	f000 80a2 	beq.w	80124b6 <__kernel_rem_pio2+0x2fe>
 8012372:	f1ba 0f02 	cmp.w	sl, #2
 8012376:	f000 80c1 	beq.w	80124fc <__kernel_rem_pio2+0x344>
 801237a:	9b02      	ldr	r3, [sp, #8]
 801237c:	2b02      	cmp	r3, #2
 801237e:	d14a      	bne.n	8012416 <__kernel_rem_pio2+0x25e>
 8012380:	4632      	mov	r2, r6
 8012382:	463b      	mov	r3, r7
 8012384:	2000      	movs	r0, #0
 8012386:	4958      	ldr	r1, [pc, #352]	; (80124e8 <__kernel_rem_pio2+0x330>)
 8012388:	f7ed ff96 	bl	80002b8 <__aeabi_dsub>
 801238c:	4606      	mov	r6, r0
 801238e:	460f      	mov	r7, r1
 8012390:	2d00      	cmp	r5, #0
 8012392:	d040      	beq.n	8012416 <__kernel_rem_pio2+0x25e>
 8012394:	4650      	mov	r0, sl
 8012396:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80124d8 <__kernel_rem_pio2+0x320>
 801239a:	f000 fb95 	bl	8012ac8 <scalbn>
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	ec53 2b10 	vmov	r2, r3, d0
 80123a6:	f7ed ff87 	bl	80002b8 <__aeabi_dsub>
 80123aa:	4606      	mov	r6, r0
 80123ac:	460f      	mov	r7, r1
 80123ae:	e032      	b.n	8012416 <__kernel_rem_pio2+0x25e>
 80123b0:	2200      	movs	r2, #0
 80123b2:	4b4e      	ldr	r3, [pc, #312]	; (80124ec <__kernel_rem_pio2+0x334>)
 80123b4:	4640      	mov	r0, r8
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ee f936 	bl	8000628 <__aeabi_dmul>
 80123bc:	f7ee fbe4 	bl	8000b88 <__aeabi_d2iz>
 80123c0:	f7ee f8c8 	bl	8000554 <__aeabi_i2d>
 80123c4:	2200      	movs	r2, #0
 80123c6:	4b4a      	ldr	r3, [pc, #296]	; (80124f0 <__kernel_rem_pio2+0x338>)
 80123c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123cc:	f7ee f92c 	bl	8000628 <__aeabi_dmul>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4640      	mov	r0, r8
 80123d6:	4649      	mov	r1, r9
 80123d8:	f7ed ff6e 	bl	80002b8 <__aeabi_dsub>
 80123dc:	f7ee fbd4 	bl	8000b88 <__aeabi_d2iz>
 80123e0:	ab0e      	add	r3, sp, #56	; 0x38
 80123e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80123e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80123ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ee:	f7ed ff65 	bl	80002bc <__adddf3>
 80123f2:	3501      	adds	r5, #1
 80123f4:	4680      	mov	r8, r0
 80123f6:	4689      	mov	r9, r1
 80123f8:	e75e      	b.n	80122b8 <__kernel_rem_pio2+0x100>
 80123fa:	d105      	bne.n	8012408 <__kernel_rem_pio2+0x250>
 80123fc:	1e63      	subs	r3, r4, #1
 80123fe:	aa0e      	add	r2, sp, #56	; 0x38
 8012400:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012404:	15c3      	asrs	r3, r0, #23
 8012406:	e79f      	b.n	8012348 <__kernel_rem_pio2+0x190>
 8012408:	2200      	movs	r2, #0
 801240a:	4b3a      	ldr	r3, [pc, #232]	; (80124f4 <__kernel_rem_pio2+0x33c>)
 801240c:	f7ee fb92 	bl	8000b34 <__aeabi_dcmpge>
 8012410:	2800      	cmp	r0, #0
 8012412:	d139      	bne.n	8012488 <__kernel_rem_pio2+0x2d0>
 8012414:	9002      	str	r0, [sp, #8]
 8012416:	2200      	movs	r2, #0
 8012418:	2300      	movs	r3, #0
 801241a:	4630      	mov	r0, r6
 801241c:	4639      	mov	r1, r7
 801241e:	f7ee fb6b 	bl	8000af8 <__aeabi_dcmpeq>
 8012422:	2800      	cmp	r0, #0
 8012424:	f000 80c7 	beq.w	80125b6 <__kernel_rem_pio2+0x3fe>
 8012428:	1e65      	subs	r5, r4, #1
 801242a:	462b      	mov	r3, r5
 801242c:	2200      	movs	r2, #0
 801242e:	9904      	ldr	r1, [sp, #16]
 8012430:	428b      	cmp	r3, r1
 8012432:	da6a      	bge.n	801250a <__kernel_rem_pio2+0x352>
 8012434:	2a00      	cmp	r2, #0
 8012436:	f000 8088 	beq.w	801254a <__kernel_rem_pio2+0x392>
 801243a:	ab0e      	add	r3, sp, #56	; 0x38
 801243c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012440:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012444:	2b00      	cmp	r3, #0
 8012446:	f000 80b4 	beq.w	80125b2 <__kernel_rem_pio2+0x3fa>
 801244a:	4650      	mov	r0, sl
 801244c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80124d8 <__kernel_rem_pio2+0x320>
 8012450:	f000 fb3a 	bl	8012ac8 <scalbn>
 8012454:	00ec      	lsls	r4, r5, #3
 8012456:	ab72      	add	r3, sp, #456	; 0x1c8
 8012458:	191e      	adds	r6, r3, r4
 801245a:	ec59 8b10 	vmov	r8, r9, d0
 801245e:	f106 0a08 	add.w	sl, r6, #8
 8012462:	462f      	mov	r7, r5
 8012464:	2f00      	cmp	r7, #0
 8012466:	f280 80df 	bge.w	8012628 <__kernel_rem_pio2+0x470>
 801246a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80124d0 <__kernel_rem_pio2+0x318>
 801246e:	f04f 0a00 	mov.w	sl, #0
 8012472:	eba5 030a 	sub.w	r3, r5, sl
 8012476:	2b00      	cmp	r3, #0
 8012478:	f2c0 810a 	blt.w	8012690 <__kernel_rem_pio2+0x4d8>
 801247c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80124f8 <__kernel_rem_pio2+0x340>
 8012480:	ec59 8b18 	vmov	r8, r9, d8
 8012484:	2700      	movs	r7, #0
 8012486:	e0f5      	b.n	8012674 <__kernel_rem_pio2+0x4bc>
 8012488:	2302      	movs	r3, #2
 801248a:	9302      	str	r3, [sp, #8]
 801248c:	e760      	b.n	8012350 <__kernel_rem_pio2+0x198>
 801248e:	ab0e      	add	r3, sp, #56	; 0x38
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	b94d      	cbnz	r5, 80124aa <__kernel_rem_pio2+0x2f2>
 8012496:	b12b      	cbz	r3, 80124a4 <__kernel_rem_pio2+0x2ec>
 8012498:	a80e      	add	r0, sp, #56	; 0x38
 801249a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801249e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80124a2:	2301      	movs	r3, #1
 80124a4:	3201      	adds	r2, #1
 80124a6:	461d      	mov	r5, r3
 80124a8:	e759      	b.n	801235e <__kernel_rem_pio2+0x1a6>
 80124aa:	a80e      	add	r0, sp, #56	; 0x38
 80124ac:	1acb      	subs	r3, r1, r3
 80124ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80124b2:	462b      	mov	r3, r5
 80124b4:	e7f6      	b.n	80124a4 <__kernel_rem_pio2+0x2ec>
 80124b6:	1e62      	subs	r2, r4, #1
 80124b8:	ab0e      	add	r3, sp, #56	; 0x38
 80124ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80124c2:	a90e      	add	r1, sp, #56	; 0x38
 80124c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80124c8:	e757      	b.n	801237a <__kernel_rem_pio2+0x1c2>
 80124ca:	bf00      	nop
 80124cc:	f3af 8000 	nop.w
	...
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	08018250 	.word	0x08018250
 80124e4:	40200000 	.word	0x40200000
 80124e8:	3ff00000 	.word	0x3ff00000
 80124ec:	3e700000 	.word	0x3e700000
 80124f0:	41700000 	.word	0x41700000
 80124f4:	3fe00000 	.word	0x3fe00000
 80124f8:	08018210 	.word	0x08018210
 80124fc:	1e62      	subs	r2, r4, #1
 80124fe:	ab0e      	add	r3, sp, #56	; 0x38
 8012500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012504:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012508:	e7db      	b.n	80124c2 <__kernel_rem_pio2+0x30a>
 801250a:	a90e      	add	r1, sp, #56	; 0x38
 801250c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012510:	3b01      	subs	r3, #1
 8012512:	430a      	orrs	r2, r1
 8012514:	e78b      	b.n	801242e <__kernel_rem_pio2+0x276>
 8012516:	3301      	adds	r3, #1
 8012518:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801251c:	2900      	cmp	r1, #0
 801251e:	d0fa      	beq.n	8012516 <__kernel_rem_pio2+0x35e>
 8012520:	9a08      	ldr	r2, [sp, #32]
 8012522:	4422      	add	r2, r4
 8012524:	00d2      	lsls	r2, r2, #3
 8012526:	a922      	add	r1, sp, #136	; 0x88
 8012528:	18e3      	adds	r3, r4, r3
 801252a:	9206      	str	r2, [sp, #24]
 801252c:	440a      	add	r2, r1
 801252e:	9302      	str	r3, [sp, #8]
 8012530:	f10b 0108 	add.w	r1, fp, #8
 8012534:	f102 0308 	add.w	r3, r2, #8
 8012538:	1c66      	adds	r6, r4, #1
 801253a:	910a      	str	r1, [sp, #40]	; 0x28
 801253c:	2500      	movs	r5, #0
 801253e:	930d      	str	r3, [sp, #52]	; 0x34
 8012540:	9b02      	ldr	r3, [sp, #8]
 8012542:	42b3      	cmp	r3, r6
 8012544:	da04      	bge.n	8012550 <__kernel_rem_pio2+0x398>
 8012546:	461c      	mov	r4, r3
 8012548:	e6a6      	b.n	8012298 <__kernel_rem_pio2+0xe0>
 801254a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801254c:	2301      	movs	r3, #1
 801254e:	e7e3      	b.n	8012518 <__kernel_rem_pio2+0x360>
 8012550:	9b06      	ldr	r3, [sp, #24]
 8012552:	18ef      	adds	r7, r5, r3
 8012554:	ab22      	add	r3, sp, #136	; 0x88
 8012556:	441f      	add	r7, r3
 8012558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801255a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801255e:	f7ed fff9 	bl	8000554 <__aeabi_i2d>
 8012562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012564:	461c      	mov	r4, r3
 8012566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012568:	e9c7 0100 	strd	r0, r1, [r7]
 801256c:	eb03 0b05 	add.w	fp, r3, r5
 8012570:	2700      	movs	r7, #0
 8012572:	f04f 0800 	mov.w	r8, #0
 8012576:	f04f 0900 	mov.w	r9, #0
 801257a:	9b07      	ldr	r3, [sp, #28]
 801257c:	429f      	cmp	r7, r3
 801257e:	dd08      	ble.n	8012592 <__kernel_rem_pio2+0x3da>
 8012580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012582:	aa72      	add	r2, sp, #456	; 0x1c8
 8012584:	18eb      	adds	r3, r5, r3
 8012586:	4413      	add	r3, r2
 8012588:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801258c:	3601      	adds	r6, #1
 801258e:	3508      	adds	r5, #8
 8012590:	e7d6      	b.n	8012540 <__kernel_rem_pio2+0x388>
 8012592:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012596:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801259a:	f7ee f845 	bl	8000628 <__aeabi_dmul>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4640      	mov	r0, r8
 80125a4:	4649      	mov	r1, r9
 80125a6:	f7ed fe89 	bl	80002bc <__adddf3>
 80125aa:	3701      	adds	r7, #1
 80125ac:	4680      	mov	r8, r0
 80125ae:	4689      	mov	r9, r1
 80125b0:	e7e3      	b.n	801257a <__kernel_rem_pio2+0x3c2>
 80125b2:	3d01      	subs	r5, #1
 80125b4:	e741      	b.n	801243a <__kernel_rem_pio2+0x282>
 80125b6:	f1ca 0000 	rsb	r0, sl, #0
 80125ba:	ec47 6b10 	vmov	d0, r6, r7
 80125be:	f000 fa83 	bl	8012ac8 <scalbn>
 80125c2:	ec57 6b10 	vmov	r6, r7, d0
 80125c6:	2200      	movs	r2, #0
 80125c8:	4b99      	ldr	r3, [pc, #612]	; (8012830 <__kernel_rem_pio2+0x678>)
 80125ca:	ee10 0a10 	vmov	r0, s0
 80125ce:	4639      	mov	r1, r7
 80125d0:	f7ee fab0 	bl	8000b34 <__aeabi_dcmpge>
 80125d4:	b1f8      	cbz	r0, 8012616 <__kernel_rem_pio2+0x45e>
 80125d6:	2200      	movs	r2, #0
 80125d8:	4b96      	ldr	r3, [pc, #600]	; (8012834 <__kernel_rem_pio2+0x67c>)
 80125da:	4630      	mov	r0, r6
 80125dc:	4639      	mov	r1, r7
 80125de:	f7ee f823 	bl	8000628 <__aeabi_dmul>
 80125e2:	f7ee fad1 	bl	8000b88 <__aeabi_d2iz>
 80125e6:	4680      	mov	r8, r0
 80125e8:	f7ed ffb4 	bl	8000554 <__aeabi_i2d>
 80125ec:	2200      	movs	r2, #0
 80125ee:	4b90      	ldr	r3, [pc, #576]	; (8012830 <__kernel_rem_pio2+0x678>)
 80125f0:	f7ee f81a 	bl	8000628 <__aeabi_dmul>
 80125f4:	460b      	mov	r3, r1
 80125f6:	4602      	mov	r2, r0
 80125f8:	4639      	mov	r1, r7
 80125fa:	4630      	mov	r0, r6
 80125fc:	f7ed fe5c 	bl	80002b8 <__aeabi_dsub>
 8012600:	f7ee fac2 	bl	8000b88 <__aeabi_d2iz>
 8012604:	1c65      	adds	r5, r4, #1
 8012606:	ab0e      	add	r3, sp, #56	; 0x38
 8012608:	f10a 0a18 	add.w	sl, sl, #24
 801260c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012610:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012614:	e719      	b.n	801244a <__kernel_rem_pio2+0x292>
 8012616:	4630      	mov	r0, r6
 8012618:	4639      	mov	r1, r7
 801261a:	f7ee fab5 	bl	8000b88 <__aeabi_d2iz>
 801261e:	ab0e      	add	r3, sp, #56	; 0x38
 8012620:	4625      	mov	r5, r4
 8012622:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012626:	e710      	b.n	801244a <__kernel_rem_pio2+0x292>
 8012628:	ab0e      	add	r3, sp, #56	; 0x38
 801262a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801262e:	f7ed ff91 	bl	8000554 <__aeabi_i2d>
 8012632:	4642      	mov	r2, r8
 8012634:	464b      	mov	r3, r9
 8012636:	f7ed fff7 	bl	8000628 <__aeabi_dmul>
 801263a:	2200      	movs	r2, #0
 801263c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012640:	4b7c      	ldr	r3, [pc, #496]	; (8012834 <__kernel_rem_pio2+0x67c>)
 8012642:	4640      	mov	r0, r8
 8012644:	4649      	mov	r1, r9
 8012646:	f7ed ffef 	bl	8000628 <__aeabi_dmul>
 801264a:	3f01      	subs	r7, #1
 801264c:	4680      	mov	r8, r0
 801264e:	4689      	mov	r9, r1
 8012650:	e708      	b.n	8012464 <__kernel_rem_pio2+0x2ac>
 8012652:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801265e:	f7ed ffe3 	bl	8000628 <__aeabi_dmul>
 8012662:	4602      	mov	r2, r0
 8012664:	460b      	mov	r3, r1
 8012666:	4640      	mov	r0, r8
 8012668:	4649      	mov	r1, r9
 801266a:	f7ed fe27 	bl	80002bc <__adddf3>
 801266e:	3701      	adds	r7, #1
 8012670:	4680      	mov	r8, r0
 8012672:	4689      	mov	r9, r1
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	429f      	cmp	r7, r3
 8012678:	dc01      	bgt.n	801267e <__kernel_rem_pio2+0x4c6>
 801267a:	45ba      	cmp	sl, r7
 801267c:	dae9      	bge.n	8012652 <__kernel_rem_pio2+0x49a>
 801267e:	ab4a      	add	r3, sp, #296	; 0x128
 8012680:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012684:	e9c3 8900 	strd	r8, r9, [r3]
 8012688:	f10a 0a01 	add.w	sl, sl, #1
 801268c:	3e08      	subs	r6, #8
 801268e:	e6f0      	b.n	8012472 <__kernel_rem_pio2+0x2ba>
 8012690:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012692:	2b03      	cmp	r3, #3
 8012694:	d85b      	bhi.n	801274e <__kernel_rem_pio2+0x596>
 8012696:	e8df f003 	tbb	[pc, r3]
 801269a:	264a      	.short	0x264a
 801269c:	0226      	.short	0x0226
 801269e:	ab9a      	add	r3, sp, #616	; 0x268
 80126a0:	441c      	add	r4, r3
 80126a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80126a6:	46a2      	mov	sl, r4
 80126a8:	46ab      	mov	fp, r5
 80126aa:	f1bb 0f00 	cmp.w	fp, #0
 80126ae:	dc6c      	bgt.n	801278a <__kernel_rem_pio2+0x5d2>
 80126b0:	46a2      	mov	sl, r4
 80126b2:	46ab      	mov	fp, r5
 80126b4:	f1bb 0f01 	cmp.w	fp, #1
 80126b8:	f300 8086 	bgt.w	80127c8 <__kernel_rem_pio2+0x610>
 80126bc:	2000      	movs	r0, #0
 80126be:	2100      	movs	r1, #0
 80126c0:	2d01      	cmp	r5, #1
 80126c2:	f300 80a0 	bgt.w	8012806 <__kernel_rem_pio2+0x64e>
 80126c6:	9b02      	ldr	r3, [sp, #8]
 80126c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80126cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f040 809e 	bne.w	8012812 <__kernel_rem_pio2+0x65a>
 80126d6:	9b01      	ldr	r3, [sp, #4]
 80126d8:	e9c3 7800 	strd	r7, r8, [r3]
 80126dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80126e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80126e4:	e033      	b.n	801274e <__kernel_rem_pio2+0x596>
 80126e6:	3408      	adds	r4, #8
 80126e8:	ab4a      	add	r3, sp, #296	; 0x128
 80126ea:	441c      	add	r4, r3
 80126ec:	462e      	mov	r6, r5
 80126ee:	2000      	movs	r0, #0
 80126f0:	2100      	movs	r1, #0
 80126f2:	2e00      	cmp	r6, #0
 80126f4:	da3a      	bge.n	801276c <__kernel_rem_pio2+0x5b4>
 80126f6:	9b02      	ldr	r3, [sp, #8]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d03d      	beq.n	8012778 <__kernel_rem_pio2+0x5c0>
 80126fc:	4602      	mov	r2, r0
 80126fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012702:	9c01      	ldr	r4, [sp, #4]
 8012704:	e9c4 2300 	strd	r2, r3, [r4]
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012710:	f7ed fdd2 	bl	80002b8 <__aeabi_dsub>
 8012714:	ae4c      	add	r6, sp, #304	; 0x130
 8012716:	2401      	movs	r4, #1
 8012718:	42a5      	cmp	r5, r4
 801271a:	da30      	bge.n	801277e <__kernel_rem_pio2+0x5c6>
 801271c:	9b02      	ldr	r3, [sp, #8]
 801271e:	b113      	cbz	r3, 8012726 <__kernel_rem_pio2+0x56e>
 8012720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012724:	4619      	mov	r1, r3
 8012726:	9b01      	ldr	r3, [sp, #4]
 8012728:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801272c:	e00f      	b.n	801274e <__kernel_rem_pio2+0x596>
 801272e:	ab9a      	add	r3, sp, #616	; 0x268
 8012730:	441c      	add	r4, r3
 8012732:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012736:	2000      	movs	r0, #0
 8012738:	2100      	movs	r1, #0
 801273a:	2d00      	cmp	r5, #0
 801273c:	da10      	bge.n	8012760 <__kernel_rem_pio2+0x5a8>
 801273e:	9b02      	ldr	r3, [sp, #8]
 8012740:	b113      	cbz	r3, 8012748 <__kernel_rem_pio2+0x590>
 8012742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012746:	4619      	mov	r1, r3
 8012748:	9b01      	ldr	r3, [sp, #4]
 801274a:	e9c3 0100 	strd	r0, r1, [r3]
 801274e:	9b06      	ldr	r3, [sp, #24]
 8012750:	f003 0007 	and.w	r0, r3, #7
 8012754:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012758:	ecbd 8b02 	vpop	{d8}
 801275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012760:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012764:	f7ed fdaa 	bl	80002bc <__adddf3>
 8012768:	3d01      	subs	r5, #1
 801276a:	e7e6      	b.n	801273a <__kernel_rem_pio2+0x582>
 801276c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012770:	f7ed fda4 	bl	80002bc <__adddf3>
 8012774:	3e01      	subs	r6, #1
 8012776:	e7bc      	b.n	80126f2 <__kernel_rem_pio2+0x53a>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	e7c1      	b.n	8012702 <__kernel_rem_pio2+0x54a>
 801277e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012782:	f7ed fd9b 	bl	80002bc <__adddf3>
 8012786:	3401      	adds	r4, #1
 8012788:	e7c6      	b.n	8012718 <__kernel_rem_pio2+0x560>
 801278a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801278e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012792:	4640      	mov	r0, r8
 8012794:	ec53 2b17 	vmov	r2, r3, d7
 8012798:	4649      	mov	r1, r9
 801279a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801279e:	f7ed fd8d 	bl	80002bc <__adddf3>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4606      	mov	r6, r0
 80127a8:	460f      	mov	r7, r1
 80127aa:	4640      	mov	r0, r8
 80127ac:	4649      	mov	r1, r9
 80127ae:	f7ed fd83 	bl	80002b8 <__aeabi_dsub>
 80127b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127b6:	f7ed fd81 	bl	80002bc <__adddf3>
 80127ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127be:	e9ca 0100 	strd	r0, r1, [sl]
 80127c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80127c6:	e770      	b.n	80126aa <__kernel_rem_pio2+0x4f2>
 80127c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80127cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80127d0:	4630      	mov	r0, r6
 80127d2:	ec53 2b17 	vmov	r2, r3, d7
 80127d6:	4639      	mov	r1, r7
 80127d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80127dc:	f7ed fd6e 	bl	80002bc <__adddf3>
 80127e0:	4602      	mov	r2, r0
 80127e2:	460b      	mov	r3, r1
 80127e4:	4680      	mov	r8, r0
 80127e6:	4689      	mov	r9, r1
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ed fd64 	bl	80002b8 <__aeabi_dsub>
 80127f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127f4:	f7ed fd62 	bl	80002bc <__adddf3>
 80127f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127fc:	e9ca 0100 	strd	r0, r1, [sl]
 8012800:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012804:	e756      	b.n	80126b4 <__kernel_rem_pio2+0x4fc>
 8012806:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801280a:	f7ed fd57 	bl	80002bc <__adddf3>
 801280e:	3d01      	subs	r5, #1
 8012810:	e756      	b.n	80126c0 <__kernel_rem_pio2+0x508>
 8012812:	9b01      	ldr	r3, [sp, #4]
 8012814:	9a01      	ldr	r2, [sp, #4]
 8012816:	601f      	str	r7, [r3, #0]
 8012818:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801281c:	605c      	str	r4, [r3, #4]
 801281e:	609d      	str	r5, [r3, #8]
 8012820:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012824:	60d3      	str	r3, [r2, #12]
 8012826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801282a:	6110      	str	r0, [r2, #16]
 801282c:	6153      	str	r3, [r2, #20]
 801282e:	e78e      	b.n	801274e <__kernel_rem_pio2+0x596>
 8012830:	41700000 	.word	0x41700000
 8012834:	3e700000 	.word	0x3e700000

08012838 <__kernel_sin>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	ec55 4b10 	vmov	r4, r5, d0
 8012840:	b085      	sub	sp, #20
 8012842:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012846:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801284a:	ed8d 1b00 	vstr	d1, [sp]
 801284e:	9002      	str	r0, [sp, #8]
 8012850:	da06      	bge.n	8012860 <__kernel_sin+0x28>
 8012852:	ee10 0a10 	vmov	r0, s0
 8012856:	4629      	mov	r1, r5
 8012858:	f7ee f996 	bl	8000b88 <__aeabi_d2iz>
 801285c:	2800      	cmp	r0, #0
 801285e:	d051      	beq.n	8012904 <__kernel_sin+0xcc>
 8012860:	4622      	mov	r2, r4
 8012862:	462b      	mov	r3, r5
 8012864:	4620      	mov	r0, r4
 8012866:	4629      	mov	r1, r5
 8012868:	f7ed fede 	bl	8000628 <__aeabi_dmul>
 801286c:	4682      	mov	sl, r0
 801286e:	468b      	mov	fp, r1
 8012870:	4602      	mov	r2, r0
 8012872:	460b      	mov	r3, r1
 8012874:	4620      	mov	r0, r4
 8012876:	4629      	mov	r1, r5
 8012878:	f7ed fed6 	bl	8000628 <__aeabi_dmul>
 801287c:	a341      	add	r3, pc, #260	; (adr r3, 8012984 <__kernel_sin+0x14c>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	4680      	mov	r8, r0
 8012884:	4689      	mov	r9, r1
 8012886:	4650      	mov	r0, sl
 8012888:	4659      	mov	r1, fp
 801288a:	f7ed fecd 	bl	8000628 <__aeabi_dmul>
 801288e:	a33f      	add	r3, pc, #252	; (adr r3, 801298c <__kernel_sin+0x154>)
 8012890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012894:	f7ed fd10 	bl	80002b8 <__aeabi_dsub>
 8012898:	4652      	mov	r2, sl
 801289a:	465b      	mov	r3, fp
 801289c:	f7ed fec4 	bl	8000628 <__aeabi_dmul>
 80128a0:	a33c      	add	r3, pc, #240	; (adr r3, 8012994 <__kernel_sin+0x15c>)
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	f7ed fd09 	bl	80002bc <__adddf3>
 80128aa:	4652      	mov	r2, sl
 80128ac:	465b      	mov	r3, fp
 80128ae:	f7ed febb 	bl	8000628 <__aeabi_dmul>
 80128b2:	a33a      	add	r3, pc, #232	; (adr r3, 801299c <__kernel_sin+0x164>)
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	f7ed fcfe 	bl	80002b8 <__aeabi_dsub>
 80128bc:	4652      	mov	r2, sl
 80128be:	465b      	mov	r3, fp
 80128c0:	f7ed feb2 	bl	8000628 <__aeabi_dmul>
 80128c4:	a337      	add	r3, pc, #220	; (adr r3, 80129a4 <__kernel_sin+0x16c>)
 80128c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ca:	f7ed fcf7 	bl	80002bc <__adddf3>
 80128ce:	9b02      	ldr	r3, [sp, #8]
 80128d0:	4606      	mov	r6, r0
 80128d2:	460f      	mov	r7, r1
 80128d4:	b9db      	cbnz	r3, 801290e <__kernel_sin+0xd6>
 80128d6:	4602      	mov	r2, r0
 80128d8:	460b      	mov	r3, r1
 80128da:	4650      	mov	r0, sl
 80128dc:	4659      	mov	r1, fp
 80128de:	f7ed fea3 	bl	8000628 <__aeabi_dmul>
 80128e2:	a325      	add	r3, pc, #148	; (adr r3, 8012978 <__kernel_sin+0x140>)
 80128e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e8:	f7ed fce6 	bl	80002b8 <__aeabi_dsub>
 80128ec:	4642      	mov	r2, r8
 80128ee:	464b      	mov	r3, r9
 80128f0:	f7ed fe9a 	bl	8000628 <__aeabi_dmul>
 80128f4:	4602      	mov	r2, r0
 80128f6:	460b      	mov	r3, r1
 80128f8:	4620      	mov	r0, r4
 80128fa:	4629      	mov	r1, r5
 80128fc:	f7ed fcde 	bl	80002bc <__adddf3>
 8012900:	4604      	mov	r4, r0
 8012902:	460d      	mov	r5, r1
 8012904:	ec45 4b10 	vmov	d0, r4, r5
 8012908:	b005      	add	sp, #20
 801290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290e:	2200      	movs	r2, #0
 8012910:	4b1b      	ldr	r3, [pc, #108]	; (8012980 <__kernel_sin+0x148>)
 8012912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012916:	f7ed fe87 	bl	8000628 <__aeabi_dmul>
 801291a:	4632      	mov	r2, r6
 801291c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012920:	463b      	mov	r3, r7
 8012922:	4640      	mov	r0, r8
 8012924:	4649      	mov	r1, r9
 8012926:	f7ed fe7f 	bl	8000628 <__aeabi_dmul>
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012932:	f7ed fcc1 	bl	80002b8 <__aeabi_dsub>
 8012936:	4652      	mov	r2, sl
 8012938:	465b      	mov	r3, fp
 801293a:	f7ed fe75 	bl	8000628 <__aeabi_dmul>
 801293e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012942:	f7ed fcb9 	bl	80002b8 <__aeabi_dsub>
 8012946:	a30c      	add	r3, pc, #48	; (adr r3, 8012978 <__kernel_sin+0x140>)
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	4606      	mov	r6, r0
 801294e:	460f      	mov	r7, r1
 8012950:	4640      	mov	r0, r8
 8012952:	4649      	mov	r1, r9
 8012954:	f7ed fe68 	bl	8000628 <__aeabi_dmul>
 8012958:	4602      	mov	r2, r0
 801295a:	460b      	mov	r3, r1
 801295c:	4630      	mov	r0, r6
 801295e:	4639      	mov	r1, r7
 8012960:	f7ed fcac 	bl	80002bc <__adddf3>
 8012964:	4602      	mov	r2, r0
 8012966:	460b      	mov	r3, r1
 8012968:	4620      	mov	r0, r4
 801296a:	4629      	mov	r1, r5
 801296c:	f7ed fca4 	bl	80002b8 <__aeabi_dsub>
 8012970:	e7c6      	b.n	8012900 <__kernel_sin+0xc8>
 8012972:	bf00      	nop
 8012974:	f3af 8000 	nop.w
 8012978:	55555549 	.word	0x55555549
 801297c:	3fc55555 	.word	0x3fc55555
 8012980:	3fe00000 	.word	0x3fe00000
 8012984:	5acfd57c 	.word	0x5acfd57c
 8012988:	3de5d93a 	.word	0x3de5d93a
 801298c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012990:	3e5ae5e6 	.word	0x3e5ae5e6
 8012994:	57b1fe7d 	.word	0x57b1fe7d
 8012998:	3ec71de3 	.word	0x3ec71de3
 801299c:	19c161d5 	.word	0x19c161d5
 80129a0:	3f2a01a0 	.word	0x3f2a01a0
 80129a4:	1110f8a6 	.word	0x1110f8a6
 80129a8:	3f811111 	.word	0x3f811111

080129ac <fabs>:
 80129ac:	ec51 0b10 	vmov	r0, r1, d0
 80129b0:	ee10 2a10 	vmov	r2, s0
 80129b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129b8:	ec43 2b10 	vmov	d0, r2, r3
 80129bc:	4770      	bx	lr
	...

080129c0 <floor>:
 80129c0:	ec51 0b10 	vmov	r0, r1, d0
 80129c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80129cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80129d0:	2e13      	cmp	r6, #19
 80129d2:	460c      	mov	r4, r1
 80129d4:	ee10 5a10 	vmov	r5, s0
 80129d8:	4680      	mov	r8, r0
 80129da:	dc34      	bgt.n	8012a46 <floor+0x86>
 80129dc:	2e00      	cmp	r6, #0
 80129de:	da16      	bge.n	8012a0e <floor+0x4e>
 80129e0:	a335      	add	r3, pc, #212	; (adr r3, 8012ab8 <floor+0xf8>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fc69 	bl	80002bc <__adddf3>
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	f7ee f8ab 	bl	8000b48 <__aeabi_dcmpgt>
 80129f2:	b148      	cbz	r0, 8012a08 <floor+0x48>
 80129f4:	2c00      	cmp	r4, #0
 80129f6:	da59      	bge.n	8012aac <floor+0xec>
 80129f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129fc:	4a30      	ldr	r2, [pc, #192]	; (8012ac0 <floor+0x100>)
 80129fe:	432b      	orrs	r3, r5
 8012a00:	2500      	movs	r5, #0
 8012a02:	42ab      	cmp	r3, r5
 8012a04:	bf18      	it	ne
 8012a06:	4614      	movne	r4, r2
 8012a08:	4621      	mov	r1, r4
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	e025      	b.n	8012a5a <floor+0x9a>
 8012a0e:	4f2d      	ldr	r7, [pc, #180]	; (8012ac4 <floor+0x104>)
 8012a10:	4137      	asrs	r7, r6
 8012a12:	ea01 0307 	and.w	r3, r1, r7
 8012a16:	4303      	orrs	r3, r0
 8012a18:	d01f      	beq.n	8012a5a <floor+0x9a>
 8012a1a:	a327      	add	r3, pc, #156	; (adr r3, 8012ab8 <floor+0xf8>)
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	f7ed fc4c 	bl	80002bc <__adddf3>
 8012a24:	2200      	movs	r2, #0
 8012a26:	2300      	movs	r3, #0
 8012a28:	f7ee f88e 	bl	8000b48 <__aeabi_dcmpgt>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	d0eb      	beq.n	8012a08 <floor+0x48>
 8012a30:	2c00      	cmp	r4, #0
 8012a32:	bfbe      	ittt	lt
 8012a34:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a38:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a3c:	19a4      	addlt	r4, r4, r6
 8012a3e:	ea24 0407 	bic.w	r4, r4, r7
 8012a42:	2500      	movs	r5, #0
 8012a44:	e7e0      	b.n	8012a08 <floor+0x48>
 8012a46:	2e33      	cmp	r6, #51	; 0x33
 8012a48:	dd0b      	ble.n	8012a62 <floor+0xa2>
 8012a4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a4e:	d104      	bne.n	8012a5a <floor+0x9a>
 8012a50:	ee10 2a10 	vmov	r2, s0
 8012a54:	460b      	mov	r3, r1
 8012a56:	f7ed fc31 	bl	80002bc <__adddf3>
 8012a5a:	ec41 0b10 	vmov	d0, r0, r1
 8012a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a62:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a66:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6a:	fa23 f707 	lsr.w	r7, r3, r7
 8012a6e:	4207      	tst	r7, r0
 8012a70:	d0f3      	beq.n	8012a5a <floor+0x9a>
 8012a72:	a311      	add	r3, pc, #68	; (adr r3, 8012ab8 <floor+0xf8>)
 8012a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a78:	f7ed fc20 	bl	80002bc <__adddf3>
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f7ee f862 	bl	8000b48 <__aeabi_dcmpgt>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d0bf      	beq.n	8012a08 <floor+0x48>
 8012a88:	2c00      	cmp	r4, #0
 8012a8a:	da02      	bge.n	8012a92 <floor+0xd2>
 8012a8c:	2e14      	cmp	r6, #20
 8012a8e:	d103      	bne.n	8012a98 <floor+0xd8>
 8012a90:	3401      	adds	r4, #1
 8012a92:	ea25 0507 	bic.w	r5, r5, r7
 8012a96:	e7b7      	b.n	8012a08 <floor+0x48>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a9e:	fa03 f606 	lsl.w	r6, r3, r6
 8012aa2:	4435      	add	r5, r6
 8012aa4:	4545      	cmp	r5, r8
 8012aa6:	bf38      	it	cc
 8012aa8:	18e4      	addcc	r4, r4, r3
 8012aaa:	e7f2      	b.n	8012a92 <floor+0xd2>
 8012aac:	2500      	movs	r5, #0
 8012aae:	462c      	mov	r4, r5
 8012ab0:	e7aa      	b.n	8012a08 <floor+0x48>
 8012ab2:	bf00      	nop
 8012ab4:	f3af 8000 	nop.w
 8012ab8:	8800759c 	.word	0x8800759c
 8012abc:	7e37e43c 	.word	0x7e37e43c
 8012ac0:	bff00000 	.word	0xbff00000
 8012ac4:	000fffff 	.word	0x000fffff

08012ac8 <scalbn>:
 8012ac8:	b570      	push	{r4, r5, r6, lr}
 8012aca:	ec55 4b10 	vmov	r4, r5, d0
 8012ace:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	462b      	mov	r3, r5
 8012ad6:	b9aa      	cbnz	r2, 8012b04 <scalbn+0x3c>
 8012ad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012adc:	4323      	orrs	r3, r4
 8012ade:	d03b      	beq.n	8012b58 <scalbn+0x90>
 8012ae0:	4b31      	ldr	r3, [pc, #196]	; (8012ba8 <scalbn+0xe0>)
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	ee10 0a10 	vmov	r0, s0
 8012aea:	f7ed fd9d 	bl	8000628 <__aeabi_dmul>
 8012aee:	4b2f      	ldr	r3, [pc, #188]	; (8012bac <scalbn+0xe4>)
 8012af0:	429e      	cmp	r6, r3
 8012af2:	4604      	mov	r4, r0
 8012af4:	460d      	mov	r5, r1
 8012af6:	da12      	bge.n	8012b1e <scalbn+0x56>
 8012af8:	a327      	add	r3, pc, #156	; (adr r3, 8012b98 <scalbn+0xd0>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	f7ed fd93 	bl	8000628 <__aeabi_dmul>
 8012b02:	e009      	b.n	8012b18 <scalbn+0x50>
 8012b04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012b08:	428a      	cmp	r2, r1
 8012b0a:	d10c      	bne.n	8012b26 <scalbn+0x5e>
 8012b0c:	ee10 2a10 	vmov	r2, s0
 8012b10:	4620      	mov	r0, r4
 8012b12:	4629      	mov	r1, r5
 8012b14:	f7ed fbd2 	bl	80002bc <__adddf3>
 8012b18:	4604      	mov	r4, r0
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	e01c      	b.n	8012b58 <scalbn+0x90>
 8012b1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b22:	460b      	mov	r3, r1
 8012b24:	3a36      	subs	r2, #54	; 0x36
 8012b26:	4432      	add	r2, r6
 8012b28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012b2c:	428a      	cmp	r2, r1
 8012b2e:	dd0b      	ble.n	8012b48 <scalbn+0x80>
 8012b30:	ec45 4b11 	vmov	d1, r4, r5
 8012b34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012ba0 <scalbn+0xd8>
 8012b38:	f000 f83c 	bl	8012bb4 <copysign>
 8012b3c:	a318      	add	r3, pc, #96	; (adr r3, 8012ba0 <scalbn+0xd8>)
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	ec51 0b10 	vmov	r0, r1, d0
 8012b46:	e7da      	b.n	8012afe <scalbn+0x36>
 8012b48:	2a00      	cmp	r2, #0
 8012b4a:	dd08      	ble.n	8012b5e <scalbn+0x96>
 8012b4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b58:	ec45 4b10 	vmov	d0, r4, r5
 8012b5c:	bd70      	pop	{r4, r5, r6, pc}
 8012b5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b62:	da0d      	bge.n	8012b80 <scalbn+0xb8>
 8012b64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b68:	429e      	cmp	r6, r3
 8012b6a:	ec45 4b11 	vmov	d1, r4, r5
 8012b6e:	dce1      	bgt.n	8012b34 <scalbn+0x6c>
 8012b70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b98 <scalbn+0xd0>
 8012b74:	f000 f81e 	bl	8012bb4 <copysign>
 8012b78:	a307      	add	r3, pc, #28	; (adr r3, 8012b98 <scalbn+0xd0>)
 8012b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7e:	e7e0      	b.n	8012b42 <scalbn+0x7a>
 8012b80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b84:	3236      	adds	r2, #54	; 0x36
 8012b86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b8e:	4620      	mov	r0, r4
 8012b90:	4629      	mov	r1, r5
 8012b92:	2200      	movs	r2, #0
 8012b94:	4b06      	ldr	r3, [pc, #24]	; (8012bb0 <scalbn+0xe8>)
 8012b96:	e7b2      	b.n	8012afe <scalbn+0x36>
 8012b98:	c2f8f359 	.word	0xc2f8f359
 8012b9c:	01a56e1f 	.word	0x01a56e1f
 8012ba0:	8800759c 	.word	0x8800759c
 8012ba4:	7e37e43c 	.word	0x7e37e43c
 8012ba8:	43500000 	.word	0x43500000
 8012bac:	ffff3cb0 	.word	0xffff3cb0
 8012bb0:	3c900000 	.word	0x3c900000

08012bb4 <copysign>:
 8012bb4:	ec51 0b10 	vmov	r0, r1, d0
 8012bb8:	ee11 0a90 	vmov	r0, s3
 8012bbc:	ee10 2a10 	vmov	r2, s0
 8012bc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012bc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012bc8:	ea41 0300 	orr.w	r3, r1, r0
 8012bcc:	ec43 2b10 	vmov	d0, r2, r3
 8012bd0:	4770      	bx	lr
	...

08012bd4 <__errno>:
 8012bd4:	4b01      	ldr	r3, [pc, #4]	; (8012bdc <__errno+0x8>)
 8012bd6:	6818      	ldr	r0, [r3, #0]
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	2000000c 	.word	0x2000000c

08012be0 <__libc_init_array>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	4e0d      	ldr	r6, [pc, #52]	; (8012c18 <__libc_init_array+0x38>)
 8012be4:	4c0d      	ldr	r4, [pc, #52]	; (8012c1c <__libc_init_array+0x3c>)
 8012be6:	1ba4      	subs	r4, r4, r6
 8012be8:	10a4      	asrs	r4, r4, #2
 8012bea:	2500      	movs	r5, #0
 8012bec:	42a5      	cmp	r5, r4
 8012bee:	d109      	bne.n	8012c04 <__libc_init_array+0x24>
 8012bf0:	4e0b      	ldr	r6, [pc, #44]	; (8012c20 <__libc_init_array+0x40>)
 8012bf2:	4c0c      	ldr	r4, [pc, #48]	; (8012c24 <__libc_init_array+0x44>)
 8012bf4:	f004 ff38 	bl	8017a68 <_init>
 8012bf8:	1ba4      	subs	r4, r4, r6
 8012bfa:	10a4      	asrs	r4, r4, #2
 8012bfc:	2500      	movs	r5, #0
 8012bfe:	42a5      	cmp	r5, r4
 8012c00:	d105      	bne.n	8012c0e <__libc_init_array+0x2e>
 8012c02:	bd70      	pop	{r4, r5, r6, pc}
 8012c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c08:	4798      	blx	r3
 8012c0a:	3501      	adds	r5, #1
 8012c0c:	e7ee      	b.n	8012bec <__libc_init_array+0xc>
 8012c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c12:	4798      	blx	r3
 8012c14:	3501      	adds	r5, #1
 8012c16:	e7f2      	b.n	8012bfe <__libc_init_array+0x1e>
 8012c18:	080185a4 	.word	0x080185a4
 8012c1c:	080185a4 	.word	0x080185a4
 8012c20:	080185a4 	.word	0x080185a4
 8012c24:	080185ac 	.word	0x080185ac

08012c28 <memcpy>:
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	1e43      	subs	r3, r0, #1
 8012c2c:	440a      	add	r2, r1
 8012c2e:	4291      	cmp	r1, r2
 8012c30:	d100      	bne.n	8012c34 <memcpy+0xc>
 8012c32:	bd10      	pop	{r4, pc}
 8012c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c3c:	e7f7      	b.n	8012c2e <memcpy+0x6>

08012c3e <memset>:
 8012c3e:	4402      	add	r2, r0
 8012c40:	4603      	mov	r3, r0
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d100      	bne.n	8012c48 <memset+0xa>
 8012c46:	4770      	bx	lr
 8012c48:	f803 1b01 	strb.w	r1, [r3], #1
 8012c4c:	e7f9      	b.n	8012c42 <memset+0x4>

08012c4e <__cvt>:
 8012c4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c52:	ec55 4b10 	vmov	r4, r5, d0
 8012c56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012c58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012c5c:	2d00      	cmp	r5, #0
 8012c5e:	460e      	mov	r6, r1
 8012c60:	4691      	mov	r9, r2
 8012c62:	4619      	mov	r1, r3
 8012c64:	bfb8      	it	lt
 8012c66:	4622      	movlt	r2, r4
 8012c68:	462b      	mov	r3, r5
 8012c6a:	f027 0720 	bic.w	r7, r7, #32
 8012c6e:	bfbb      	ittet	lt
 8012c70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012c74:	461d      	movlt	r5, r3
 8012c76:	2300      	movge	r3, #0
 8012c78:	232d      	movlt	r3, #45	; 0x2d
 8012c7a:	bfb8      	it	lt
 8012c7c:	4614      	movlt	r4, r2
 8012c7e:	2f46      	cmp	r7, #70	; 0x46
 8012c80:	700b      	strb	r3, [r1, #0]
 8012c82:	d004      	beq.n	8012c8e <__cvt+0x40>
 8012c84:	2f45      	cmp	r7, #69	; 0x45
 8012c86:	d100      	bne.n	8012c8a <__cvt+0x3c>
 8012c88:	3601      	adds	r6, #1
 8012c8a:	2102      	movs	r1, #2
 8012c8c:	e000      	b.n	8012c90 <__cvt+0x42>
 8012c8e:	2103      	movs	r1, #3
 8012c90:	ab03      	add	r3, sp, #12
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	ab02      	add	r3, sp, #8
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	4632      	mov	r2, r6
 8012c9a:	4653      	mov	r3, sl
 8012c9c:	ec45 4b10 	vmov	d0, r4, r5
 8012ca0:	f001 ffb2 	bl	8014c08 <_dtoa_r>
 8012ca4:	2f47      	cmp	r7, #71	; 0x47
 8012ca6:	4680      	mov	r8, r0
 8012ca8:	d102      	bne.n	8012cb0 <__cvt+0x62>
 8012caa:	f019 0f01 	tst.w	r9, #1
 8012cae:	d026      	beq.n	8012cfe <__cvt+0xb0>
 8012cb0:	2f46      	cmp	r7, #70	; 0x46
 8012cb2:	eb08 0906 	add.w	r9, r8, r6
 8012cb6:	d111      	bne.n	8012cdc <__cvt+0x8e>
 8012cb8:	f898 3000 	ldrb.w	r3, [r8]
 8012cbc:	2b30      	cmp	r3, #48	; 0x30
 8012cbe:	d10a      	bne.n	8012cd6 <__cvt+0x88>
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f7ed ff16 	bl	8000af8 <__aeabi_dcmpeq>
 8012ccc:	b918      	cbnz	r0, 8012cd6 <__cvt+0x88>
 8012cce:	f1c6 0601 	rsb	r6, r6, #1
 8012cd2:	f8ca 6000 	str.w	r6, [sl]
 8012cd6:	f8da 3000 	ldr.w	r3, [sl]
 8012cda:	4499      	add	r9, r3
 8012cdc:	2200      	movs	r2, #0
 8012cde:	2300      	movs	r3, #0
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	f7ed ff08 	bl	8000af8 <__aeabi_dcmpeq>
 8012ce8:	b938      	cbnz	r0, 8012cfa <__cvt+0xac>
 8012cea:	2230      	movs	r2, #48	; 0x30
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	454b      	cmp	r3, r9
 8012cf0:	d205      	bcs.n	8012cfe <__cvt+0xb0>
 8012cf2:	1c59      	adds	r1, r3, #1
 8012cf4:	9103      	str	r1, [sp, #12]
 8012cf6:	701a      	strb	r2, [r3, #0]
 8012cf8:	e7f8      	b.n	8012cec <__cvt+0x9e>
 8012cfa:	f8cd 900c 	str.w	r9, [sp, #12]
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d02:	eba3 0308 	sub.w	r3, r3, r8
 8012d06:	4640      	mov	r0, r8
 8012d08:	6013      	str	r3, [r2, #0]
 8012d0a:	b004      	add	sp, #16
 8012d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012d10 <__exponent>:
 8012d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d12:	2900      	cmp	r1, #0
 8012d14:	4604      	mov	r4, r0
 8012d16:	bfba      	itte	lt
 8012d18:	4249      	neglt	r1, r1
 8012d1a:	232d      	movlt	r3, #45	; 0x2d
 8012d1c:	232b      	movge	r3, #43	; 0x2b
 8012d1e:	2909      	cmp	r1, #9
 8012d20:	f804 2b02 	strb.w	r2, [r4], #2
 8012d24:	7043      	strb	r3, [r0, #1]
 8012d26:	dd20      	ble.n	8012d6a <__exponent+0x5a>
 8012d28:	f10d 0307 	add.w	r3, sp, #7
 8012d2c:	461f      	mov	r7, r3
 8012d2e:	260a      	movs	r6, #10
 8012d30:	fb91 f5f6 	sdiv	r5, r1, r6
 8012d34:	fb06 1115 	mls	r1, r6, r5, r1
 8012d38:	3130      	adds	r1, #48	; 0x30
 8012d3a:	2d09      	cmp	r5, #9
 8012d3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012d40:	f103 32ff 	add.w	r2, r3, #4294967295
 8012d44:	4629      	mov	r1, r5
 8012d46:	dc09      	bgt.n	8012d5c <__exponent+0x4c>
 8012d48:	3130      	adds	r1, #48	; 0x30
 8012d4a:	3b02      	subs	r3, #2
 8012d4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012d50:	42bb      	cmp	r3, r7
 8012d52:	4622      	mov	r2, r4
 8012d54:	d304      	bcc.n	8012d60 <__exponent+0x50>
 8012d56:	1a10      	subs	r0, r2, r0
 8012d58:	b003      	add	sp, #12
 8012d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d5c:	4613      	mov	r3, r2
 8012d5e:	e7e7      	b.n	8012d30 <__exponent+0x20>
 8012d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d64:	f804 2b01 	strb.w	r2, [r4], #1
 8012d68:	e7f2      	b.n	8012d50 <__exponent+0x40>
 8012d6a:	2330      	movs	r3, #48	; 0x30
 8012d6c:	4419      	add	r1, r3
 8012d6e:	7083      	strb	r3, [r0, #2]
 8012d70:	1d02      	adds	r2, r0, #4
 8012d72:	70c1      	strb	r1, [r0, #3]
 8012d74:	e7ef      	b.n	8012d56 <__exponent+0x46>
	...

08012d78 <_printf_float>:
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	b08d      	sub	sp, #52	; 0x34
 8012d7e:	460c      	mov	r4, r1
 8012d80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012d84:	4616      	mov	r6, r2
 8012d86:	461f      	mov	r7, r3
 8012d88:	4605      	mov	r5, r0
 8012d8a:	f003 f9a9 	bl	80160e0 <_localeconv_r>
 8012d8e:	6803      	ldr	r3, [r0, #0]
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7ed fa34 	bl	8000200 <strlen>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8012da0:	9005      	str	r0, [sp, #20]
 8012da2:	3307      	adds	r3, #7
 8012da4:	f023 0307 	bic.w	r3, r3, #7
 8012da8:	f103 0208 	add.w	r2, r3, #8
 8012dac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012db0:	f8d4 b000 	ldr.w	fp, [r4]
 8012db4:	f8c8 2000 	str.w	r2, [r8]
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012dc0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012dc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012dc8:	9307      	str	r3, [sp, #28]
 8012dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8012dce:	f04f 32ff 	mov.w	r2, #4294967295
 8012dd2:	4ba7      	ldr	r3, [pc, #668]	; (8013070 <_printf_float+0x2f8>)
 8012dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dd8:	f7ed fec0 	bl	8000b5c <__aeabi_dcmpun>
 8012ddc:	bb70      	cbnz	r0, 8012e3c <_printf_float+0xc4>
 8012dde:	f04f 32ff 	mov.w	r2, #4294967295
 8012de2:	4ba3      	ldr	r3, [pc, #652]	; (8013070 <_printf_float+0x2f8>)
 8012de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012de8:	f7ed fe9a 	bl	8000b20 <__aeabi_dcmple>
 8012dec:	bb30      	cbnz	r0, 8012e3c <_printf_float+0xc4>
 8012dee:	2200      	movs	r2, #0
 8012df0:	2300      	movs	r3, #0
 8012df2:	4640      	mov	r0, r8
 8012df4:	4649      	mov	r1, r9
 8012df6:	f7ed fe89 	bl	8000b0c <__aeabi_dcmplt>
 8012dfa:	b110      	cbz	r0, 8012e02 <_printf_float+0x8a>
 8012dfc:	232d      	movs	r3, #45	; 0x2d
 8012dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e02:	4a9c      	ldr	r2, [pc, #624]	; (8013074 <_printf_float+0x2fc>)
 8012e04:	4b9c      	ldr	r3, [pc, #624]	; (8013078 <_printf_float+0x300>)
 8012e06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e0a:	bf8c      	ite	hi
 8012e0c:	4690      	movhi	r8, r2
 8012e0e:	4698      	movls	r8, r3
 8012e10:	2303      	movs	r3, #3
 8012e12:	f02b 0204 	bic.w	r2, fp, #4
 8012e16:	6123      	str	r3, [r4, #16]
 8012e18:	6022      	str	r2, [r4, #0]
 8012e1a:	f04f 0900 	mov.w	r9, #0
 8012e1e:	9700      	str	r7, [sp, #0]
 8012e20:	4633      	mov	r3, r6
 8012e22:	aa0b      	add	r2, sp, #44	; 0x2c
 8012e24:	4621      	mov	r1, r4
 8012e26:	4628      	mov	r0, r5
 8012e28:	f000 f9e6 	bl	80131f8 <_printf_common>
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	f040 808d 	bne.w	8012f4c <_printf_float+0x1d4>
 8012e32:	f04f 30ff 	mov.w	r0, #4294967295
 8012e36:	b00d      	add	sp, #52	; 0x34
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	4642      	mov	r2, r8
 8012e3e:	464b      	mov	r3, r9
 8012e40:	4640      	mov	r0, r8
 8012e42:	4649      	mov	r1, r9
 8012e44:	f7ed fe8a 	bl	8000b5c <__aeabi_dcmpun>
 8012e48:	b110      	cbz	r0, 8012e50 <_printf_float+0xd8>
 8012e4a:	4a8c      	ldr	r2, [pc, #560]	; (801307c <_printf_float+0x304>)
 8012e4c:	4b8c      	ldr	r3, [pc, #560]	; (8013080 <_printf_float+0x308>)
 8012e4e:	e7da      	b.n	8012e06 <_printf_float+0x8e>
 8012e50:	6861      	ldr	r1, [r4, #4]
 8012e52:	1c4b      	adds	r3, r1, #1
 8012e54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012e58:	a80a      	add	r0, sp, #40	; 0x28
 8012e5a:	d13e      	bne.n	8012eda <_printf_float+0x162>
 8012e5c:	2306      	movs	r3, #6
 8012e5e:	6063      	str	r3, [r4, #4]
 8012e60:	2300      	movs	r3, #0
 8012e62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012e66:	ab09      	add	r3, sp, #36	; 0x24
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	ec49 8b10 	vmov	d0, r8, r9
 8012e6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e72:	6022      	str	r2, [r4, #0]
 8012e74:	f8cd a004 	str.w	sl, [sp, #4]
 8012e78:	6861      	ldr	r1, [r4, #4]
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f7ff fee7 	bl	8012c4e <__cvt>
 8012e80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012e84:	2b47      	cmp	r3, #71	; 0x47
 8012e86:	4680      	mov	r8, r0
 8012e88:	d109      	bne.n	8012e9e <_printf_float+0x126>
 8012e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8c:	1cd8      	adds	r0, r3, #3
 8012e8e:	db02      	blt.n	8012e96 <_printf_float+0x11e>
 8012e90:	6862      	ldr	r2, [r4, #4]
 8012e92:	4293      	cmp	r3, r2
 8012e94:	dd47      	ble.n	8012f26 <_printf_float+0x1ae>
 8012e96:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e9a:	fa5f fa8a 	uxtb.w	sl, sl
 8012e9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ea4:	d824      	bhi.n	8012ef0 <_printf_float+0x178>
 8012ea6:	3901      	subs	r1, #1
 8012ea8:	4652      	mov	r2, sl
 8012eaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012eae:	9109      	str	r1, [sp, #36]	; 0x24
 8012eb0:	f7ff ff2e 	bl	8012d10 <__exponent>
 8012eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eb6:	1813      	adds	r3, r2, r0
 8012eb8:	2a01      	cmp	r2, #1
 8012eba:	4681      	mov	r9, r0
 8012ebc:	6123      	str	r3, [r4, #16]
 8012ebe:	dc02      	bgt.n	8012ec6 <_printf_float+0x14e>
 8012ec0:	6822      	ldr	r2, [r4, #0]
 8012ec2:	07d1      	lsls	r1, r2, #31
 8012ec4:	d501      	bpl.n	8012eca <_printf_float+0x152>
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	6123      	str	r3, [r4, #16]
 8012eca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d0a5      	beq.n	8012e1e <_printf_float+0xa6>
 8012ed2:	232d      	movs	r3, #45	; 0x2d
 8012ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ed8:	e7a1      	b.n	8012e1e <_printf_float+0xa6>
 8012eda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012ede:	f000 8177 	beq.w	80131d0 <_printf_float+0x458>
 8012ee2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012ee6:	d1bb      	bne.n	8012e60 <_printf_float+0xe8>
 8012ee8:	2900      	cmp	r1, #0
 8012eea:	d1b9      	bne.n	8012e60 <_printf_float+0xe8>
 8012eec:	2301      	movs	r3, #1
 8012eee:	e7b6      	b.n	8012e5e <_printf_float+0xe6>
 8012ef0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012ef4:	d119      	bne.n	8012f2a <_printf_float+0x1b2>
 8012ef6:	2900      	cmp	r1, #0
 8012ef8:	6863      	ldr	r3, [r4, #4]
 8012efa:	dd0c      	ble.n	8012f16 <_printf_float+0x19e>
 8012efc:	6121      	str	r1, [r4, #16]
 8012efe:	b913      	cbnz	r3, 8012f06 <_printf_float+0x18e>
 8012f00:	6822      	ldr	r2, [r4, #0]
 8012f02:	07d2      	lsls	r2, r2, #31
 8012f04:	d502      	bpl.n	8012f0c <_printf_float+0x194>
 8012f06:	3301      	adds	r3, #1
 8012f08:	440b      	add	r3, r1
 8012f0a:	6123      	str	r3, [r4, #16]
 8012f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012f10:	f04f 0900 	mov.w	r9, #0
 8012f14:	e7d9      	b.n	8012eca <_printf_float+0x152>
 8012f16:	b913      	cbnz	r3, 8012f1e <_printf_float+0x1a6>
 8012f18:	6822      	ldr	r2, [r4, #0]
 8012f1a:	07d0      	lsls	r0, r2, #31
 8012f1c:	d501      	bpl.n	8012f22 <_printf_float+0x1aa>
 8012f1e:	3302      	adds	r3, #2
 8012f20:	e7f3      	b.n	8012f0a <_printf_float+0x192>
 8012f22:	2301      	movs	r3, #1
 8012f24:	e7f1      	b.n	8012f0a <_printf_float+0x192>
 8012f26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012f2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	db05      	blt.n	8012f3e <_printf_float+0x1c6>
 8012f32:	6822      	ldr	r2, [r4, #0]
 8012f34:	6123      	str	r3, [r4, #16]
 8012f36:	07d1      	lsls	r1, r2, #31
 8012f38:	d5e8      	bpl.n	8012f0c <_printf_float+0x194>
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	e7e5      	b.n	8012f0a <_printf_float+0x192>
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bfd4      	ite	le
 8012f42:	f1c3 0302 	rsble	r3, r3, #2
 8012f46:	2301      	movgt	r3, #1
 8012f48:	4413      	add	r3, r2
 8012f4a:	e7de      	b.n	8012f0a <_printf_float+0x192>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	055a      	lsls	r2, r3, #21
 8012f50:	d407      	bmi.n	8012f62 <_printf_float+0x1ea>
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	4642      	mov	r2, r8
 8012f56:	4631      	mov	r1, r6
 8012f58:	4628      	mov	r0, r5
 8012f5a:	47b8      	blx	r7
 8012f5c:	3001      	adds	r0, #1
 8012f5e:	d12b      	bne.n	8012fb8 <_printf_float+0x240>
 8012f60:	e767      	b.n	8012e32 <_printf_float+0xba>
 8012f62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012f66:	f240 80dc 	bls.w	8013122 <_printf_float+0x3aa>
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f72:	f7ed fdc1 	bl	8000af8 <__aeabi_dcmpeq>
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d033      	beq.n	8012fe2 <_printf_float+0x26a>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	4a41      	ldr	r2, [pc, #260]	; (8013084 <_printf_float+0x30c>)
 8012f7e:	4631      	mov	r1, r6
 8012f80:	4628      	mov	r0, r5
 8012f82:	47b8      	blx	r7
 8012f84:	3001      	adds	r0, #1
 8012f86:	f43f af54 	beq.w	8012e32 <_printf_float+0xba>
 8012f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	db02      	blt.n	8012f98 <_printf_float+0x220>
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	07d8      	lsls	r0, r3, #31
 8012f96:	d50f      	bpl.n	8012fb8 <_printf_float+0x240>
 8012f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	47b8      	blx	r7
 8012fa2:	3001      	adds	r0, #1
 8012fa4:	f43f af45 	beq.w	8012e32 <_printf_float+0xba>
 8012fa8:	f04f 0800 	mov.w	r8, #0
 8012fac:	f104 091a 	add.w	r9, r4, #26
 8012fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	4543      	cmp	r3, r8
 8012fb6:	dc09      	bgt.n	8012fcc <_printf_float+0x254>
 8012fb8:	6823      	ldr	r3, [r4, #0]
 8012fba:	079b      	lsls	r3, r3, #30
 8012fbc:	f100 8103 	bmi.w	80131c6 <_printf_float+0x44e>
 8012fc0:	68e0      	ldr	r0, [r4, #12]
 8012fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fc4:	4298      	cmp	r0, r3
 8012fc6:	bfb8      	it	lt
 8012fc8:	4618      	movlt	r0, r3
 8012fca:	e734      	b.n	8012e36 <_printf_float+0xbe>
 8012fcc:	2301      	movs	r3, #1
 8012fce:	464a      	mov	r2, r9
 8012fd0:	4631      	mov	r1, r6
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	47b8      	blx	r7
 8012fd6:	3001      	adds	r0, #1
 8012fd8:	f43f af2b 	beq.w	8012e32 <_printf_float+0xba>
 8012fdc:	f108 0801 	add.w	r8, r8, #1
 8012fe0:	e7e6      	b.n	8012fb0 <_printf_float+0x238>
 8012fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	dc2b      	bgt.n	8013040 <_printf_float+0x2c8>
 8012fe8:	2301      	movs	r3, #1
 8012fea:	4a26      	ldr	r2, [pc, #152]	; (8013084 <_printf_float+0x30c>)
 8012fec:	4631      	mov	r1, r6
 8012fee:	4628      	mov	r0, r5
 8012ff0:	47b8      	blx	r7
 8012ff2:	3001      	adds	r0, #1
 8012ff4:	f43f af1d 	beq.w	8012e32 <_printf_float+0xba>
 8012ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ffa:	b923      	cbnz	r3, 8013006 <_printf_float+0x28e>
 8012ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ffe:	b913      	cbnz	r3, 8013006 <_printf_float+0x28e>
 8013000:	6823      	ldr	r3, [r4, #0]
 8013002:	07d9      	lsls	r1, r3, #31
 8013004:	d5d8      	bpl.n	8012fb8 <_printf_float+0x240>
 8013006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801300a:	4631      	mov	r1, r6
 801300c:	4628      	mov	r0, r5
 801300e:	47b8      	blx	r7
 8013010:	3001      	adds	r0, #1
 8013012:	f43f af0e 	beq.w	8012e32 <_printf_float+0xba>
 8013016:	f04f 0900 	mov.w	r9, #0
 801301a:	f104 0a1a 	add.w	sl, r4, #26
 801301e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013020:	425b      	negs	r3, r3
 8013022:	454b      	cmp	r3, r9
 8013024:	dc01      	bgt.n	801302a <_printf_float+0x2b2>
 8013026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013028:	e794      	b.n	8012f54 <_printf_float+0x1dc>
 801302a:	2301      	movs	r3, #1
 801302c:	4652      	mov	r2, sl
 801302e:	4631      	mov	r1, r6
 8013030:	4628      	mov	r0, r5
 8013032:	47b8      	blx	r7
 8013034:	3001      	adds	r0, #1
 8013036:	f43f aefc 	beq.w	8012e32 <_printf_float+0xba>
 801303a:	f109 0901 	add.w	r9, r9, #1
 801303e:	e7ee      	b.n	801301e <_printf_float+0x2a6>
 8013040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013044:	429a      	cmp	r2, r3
 8013046:	bfa8      	it	ge
 8013048:	461a      	movge	r2, r3
 801304a:	2a00      	cmp	r2, #0
 801304c:	4691      	mov	r9, r2
 801304e:	dd07      	ble.n	8013060 <_printf_float+0x2e8>
 8013050:	4613      	mov	r3, r2
 8013052:	4631      	mov	r1, r6
 8013054:	4642      	mov	r2, r8
 8013056:	4628      	mov	r0, r5
 8013058:	47b8      	blx	r7
 801305a:	3001      	adds	r0, #1
 801305c:	f43f aee9 	beq.w	8012e32 <_printf_float+0xba>
 8013060:	f104 031a 	add.w	r3, r4, #26
 8013064:	f04f 0b00 	mov.w	fp, #0
 8013068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801306c:	9306      	str	r3, [sp, #24]
 801306e:	e015      	b.n	801309c <_printf_float+0x324>
 8013070:	7fefffff 	.word	0x7fefffff
 8013074:	08018268 	.word	0x08018268
 8013078:	08018264 	.word	0x08018264
 801307c:	08018270 	.word	0x08018270
 8013080:	0801826c 	.word	0x0801826c
 8013084:	08018493 	.word	0x08018493
 8013088:	2301      	movs	r3, #1
 801308a:	9a06      	ldr	r2, [sp, #24]
 801308c:	4631      	mov	r1, r6
 801308e:	4628      	mov	r0, r5
 8013090:	47b8      	blx	r7
 8013092:	3001      	adds	r0, #1
 8013094:	f43f aecd 	beq.w	8012e32 <_printf_float+0xba>
 8013098:	f10b 0b01 	add.w	fp, fp, #1
 801309c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80130a0:	ebaa 0309 	sub.w	r3, sl, r9
 80130a4:	455b      	cmp	r3, fp
 80130a6:	dcef      	bgt.n	8013088 <_printf_float+0x310>
 80130a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130ac:	429a      	cmp	r2, r3
 80130ae:	44d0      	add	r8, sl
 80130b0:	db15      	blt.n	80130de <_printf_float+0x366>
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	07da      	lsls	r2, r3, #31
 80130b6:	d412      	bmi.n	80130de <_printf_float+0x366>
 80130b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130bc:	eba3 020a 	sub.w	r2, r3, sl
 80130c0:	eba3 0a01 	sub.w	sl, r3, r1
 80130c4:	4592      	cmp	sl, r2
 80130c6:	bfa8      	it	ge
 80130c8:	4692      	movge	sl, r2
 80130ca:	f1ba 0f00 	cmp.w	sl, #0
 80130ce:	dc0e      	bgt.n	80130ee <_printf_float+0x376>
 80130d0:	f04f 0800 	mov.w	r8, #0
 80130d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130d8:	f104 091a 	add.w	r9, r4, #26
 80130dc:	e019      	b.n	8013112 <_printf_float+0x39a>
 80130de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130e2:	4631      	mov	r1, r6
 80130e4:	4628      	mov	r0, r5
 80130e6:	47b8      	blx	r7
 80130e8:	3001      	adds	r0, #1
 80130ea:	d1e5      	bne.n	80130b8 <_printf_float+0x340>
 80130ec:	e6a1      	b.n	8012e32 <_printf_float+0xba>
 80130ee:	4653      	mov	r3, sl
 80130f0:	4642      	mov	r2, r8
 80130f2:	4631      	mov	r1, r6
 80130f4:	4628      	mov	r0, r5
 80130f6:	47b8      	blx	r7
 80130f8:	3001      	adds	r0, #1
 80130fa:	d1e9      	bne.n	80130d0 <_printf_float+0x358>
 80130fc:	e699      	b.n	8012e32 <_printf_float+0xba>
 80130fe:	2301      	movs	r3, #1
 8013100:	464a      	mov	r2, r9
 8013102:	4631      	mov	r1, r6
 8013104:	4628      	mov	r0, r5
 8013106:	47b8      	blx	r7
 8013108:	3001      	adds	r0, #1
 801310a:	f43f ae92 	beq.w	8012e32 <_printf_float+0xba>
 801310e:	f108 0801 	add.w	r8, r8, #1
 8013112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	eba3 030a 	sub.w	r3, r3, sl
 801311c:	4543      	cmp	r3, r8
 801311e:	dcee      	bgt.n	80130fe <_printf_float+0x386>
 8013120:	e74a      	b.n	8012fb8 <_printf_float+0x240>
 8013122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013124:	2a01      	cmp	r2, #1
 8013126:	dc01      	bgt.n	801312c <_printf_float+0x3b4>
 8013128:	07db      	lsls	r3, r3, #31
 801312a:	d53a      	bpl.n	80131a2 <_printf_float+0x42a>
 801312c:	2301      	movs	r3, #1
 801312e:	4642      	mov	r2, r8
 8013130:	4631      	mov	r1, r6
 8013132:	4628      	mov	r0, r5
 8013134:	47b8      	blx	r7
 8013136:	3001      	adds	r0, #1
 8013138:	f43f ae7b 	beq.w	8012e32 <_printf_float+0xba>
 801313c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013140:	4631      	mov	r1, r6
 8013142:	4628      	mov	r0, r5
 8013144:	47b8      	blx	r7
 8013146:	3001      	adds	r0, #1
 8013148:	f108 0801 	add.w	r8, r8, #1
 801314c:	f43f ae71 	beq.w	8012e32 <_printf_float+0xba>
 8013150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013152:	2200      	movs	r2, #0
 8013154:	f103 3aff 	add.w	sl, r3, #4294967295
 8013158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801315c:	2300      	movs	r3, #0
 801315e:	f7ed fccb 	bl	8000af8 <__aeabi_dcmpeq>
 8013162:	b9c8      	cbnz	r0, 8013198 <_printf_float+0x420>
 8013164:	4653      	mov	r3, sl
 8013166:	4642      	mov	r2, r8
 8013168:	4631      	mov	r1, r6
 801316a:	4628      	mov	r0, r5
 801316c:	47b8      	blx	r7
 801316e:	3001      	adds	r0, #1
 8013170:	d10e      	bne.n	8013190 <_printf_float+0x418>
 8013172:	e65e      	b.n	8012e32 <_printf_float+0xba>
 8013174:	2301      	movs	r3, #1
 8013176:	4652      	mov	r2, sl
 8013178:	4631      	mov	r1, r6
 801317a:	4628      	mov	r0, r5
 801317c:	47b8      	blx	r7
 801317e:	3001      	adds	r0, #1
 8013180:	f43f ae57 	beq.w	8012e32 <_printf_float+0xba>
 8013184:	f108 0801 	add.w	r8, r8, #1
 8013188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801318a:	3b01      	subs	r3, #1
 801318c:	4543      	cmp	r3, r8
 801318e:	dcf1      	bgt.n	8013174 <_printf_float+0x3fc>
 8013190:	464b      	mov	r3, r9
 8013192:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013196:	e6de      	b.n	8012f56 <_printf_float+0x1de>
 8013198:	f04f 0800 	mov.w	r8, #0
 801319c:	f104 0a1a 	add.w	sl, r4, #26
 80131a0:	e7f2      	b.n	8013188 <_printf_float+0x410>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e7df      	b.n	8013166 <_printf_float+0x3ee>
 80131a6:	2301      	movs	r3, #1
 80131a8:	464a      	mov	r2, r9
 80131aa:	4631      	mov	r1, r6
 80131ac:	4628      	mov	r0, r5
 80131ae:	47b8      	blx	r7
 80131b0:	3001      	adds	r0, #1
 80131b2:	f43f ae3e 	beq.w	8012e32 <_printf_float+0xba>
 80131b6:	f108 0801 	add.w	r8, r8, #1
 80131ba:	68e3      	ldr	r3, [r4, #12]
 80131bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131be:	1a9b      	subs	r3, r3, r2
 80131c0:	4543      	cmp	r3, r8
 80131c2:	dcf0      	bgt.n	80131a6 <_printf_float+0x42e>
 80131c4:	e6fc      	b.n	8012fc0 <_printf_float+0x248>
 80131c6:	f04f 0800 	mov.w	r8, #0
 80131ca:	f104 0919 	add.w	r9, r4, #25
 80131ce:	e7f4      	b.n	80131ba <_printf_float+0x442>
 80131d0:	2900      	cmp	r1, #0
 80131d2:	f43f ae8b 	beq.w	8012eec <_printf_float+0x174>
 80131d6:	2300      	movs	r3, #0
 80131d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80131dc:	ab09      	add	r3, sp, #36	; 0x24
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	ec49 8b10 	vmov	d0, r8, r9
 80131e4:	6022      	str	r2, [r4, #0]
 80131e6:	f8cd a004 	str.w	sl, [sp, #4]
 80131ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80131ee:	4628      	mov	r0, r5
 80131f0:	f7ff fd2d 	bl	8012c4e <__cvt>
 80131f4:	4680      	mov	r8, r0
 80131f6:	e648      	b.n	8012e8a <_printf_float+0x112>

080131f8 <_printf_common>:
 80131f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131fc:	4691      	mov	r9, r2
 80131fe:	461f      	mov	r7, r3
 8013200:	688a      	ldr	r2, [r1, #8]
 8013202:	690b      	ldr	r3, [r1, #16]
 8013204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013208:	4293      	cmp	r3, r2
 801320a:	bfb8      	it	lt
 801320c:	4613      	movlt	r3, r2
 801320e:	f8c9 3000 	str.w	r3, [r9]
 8013212:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013216:	4606      	mov	r6, r0
 8013218:	460c      	mov	r4, r1
 801321a:	b112      	cbz	r2, 8013222 <_printf_common+0x2a>
 801321c:	3301      	adds	r3, #1
 801321e:	f8c9 3000 	str.w	r3, [r9]
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	0699      	lsls	r1, r3, #26
 8013226:	bf42      	ittt	mi
 8013228:	f8d9 3000 	ldrmi.w	r3, [r9]
 801322c:	3302      	addmi	r3, #2
 801322e:	f8c9 3000 	strmi.w	r3, [r9]
 8013232:	6825      	ldr	r5, [r4, #0]
 8013234:	f015 0506 	ands.w	r5, r5, #6
 8013238:	d107      	bne.n	801324a <_printf_common+0x52>
 801323a:	f104 0a19 	add.w	sl, r4, #25
 801323e:	68e3      	ldr	r3, [r4, #12]
 8013240:	f8d9 2000 	ldr.w	r2, [r9]
 8013244:	1a9b      	subs	r3, r3, r2
 8013246:	42ab      	cmp	r3, r5
 8013248:	dc28      	bgt.n	801329c <_printf_common+0xa4>
 801324a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801324e:	6822      	ldr	r2, [r4, #0]
 8013250:	3300      	adds	r3, #0
 8013252:	bf18      	it	ne
 8013254:	2301      	movne	r3, #1
 8013256:	0692      	lsls	r2, r2, #26
 8013258:	d42d      	bmi.n	80132b6 <_printf_common+0xbe>
 801325a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801325e:	4639      	mov	r1, r7
 8013260:	4630      	mov	r0, r6
 8013262:	47c0      	blx	r8
 8013264:	3001      	adds	r0, #1
 8013266:	d020      	beq.n	80132aa <_printf_common+0xb2>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	68e5      	ldr	r5, [r4, #12]
 801326c:	f8d9 2000 	ldr.w	r2, [r9]
 8013270:	f003 0306 	and.w	r3, r3, #6
 8013274:	2b04      	cmp	r3, #4
 8013276:	bf08      	it	eq
 8013278:	1aad      	subeq	r5, r5, r2
 801327a:	68a3      	ldr	r3, [r4, #8]
 801327c:	6922      	ldr	r2, [r4, #16]
 801327e:	bf0c      	ite	eq
 8013280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013284:	2500      	movne	r5, #0
 8013286:	4293      	cmp	r3, r2
 8013288:	bfc4      	itt	gt
 801328a:	1a9b      	subgt	r3, r3, r2
 801328c:	18ed      	addgt	r5, r5, r3
 801328e:	f04f 0900 	mov.w	r9, #0
 8013292:	341a      	adds	r4, #26
 8013294:	454d      	cmp	r5, r9
 8013296:	d11a      	bne.n	80132ce <_printf_common+0xd6>
 8013298:	2000      	movs	r0, #0
 801329a:	e008      	b.n	80132ae <_printf_common+0xb6>
 801329c:	2301      	movs	r3, #1
 801329e:	4652      	mov	r2, sl
 80132a0:	4639      	mov	r1, r7
 80132a2:	4630      	mov	r0, r6
 80132a4:	47c0      	blx	r8
 80132a6:	3001      	adds	r0, #1
 80132a8:	d103      	bne.n	80132b2 <_printf_common+0xba>
 80132aa:	f04f 30ff 	mov.w	r0, #4294967295
 80132ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132b2:	3501      	adds	r5, #1
 80132b4:	e7c3      	b.n	801323e <_printf_common+0x46>
 80132b6:	18e1      	adds	r1, r4, r3
 80132b8:	1c5a      	adds	r2, r3, #1
 80132ba:	2030      	movs	r0, #48	; 0x30
 80132bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80132c0:	4422      	add	r2, r4
 80132c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80132c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80132ca:	3302      	adds	r3, #2
 80132cc:	e7c5      	b.n	801325a <_printf_common+0x62>
 80132ce:	2301      	movs	r3, #1
 80132d0:	4622      	mov	r2, r4
 80132d2:	4639      	mov	r1, r7
 80132d4:	4630      	mov	r0, r6
 80132d6:	47c0      	blx	r8
 80132d8:	3001      	adds	r0, #1
 80132da:	d0e6      	beq.n	80132aa <_printf_common+0xb2>
 80132dc:	f109 0901 	add.w	r9, r9, #1
 80132e0:	e7d8      	b.n	8013294 <_printf_common+0x9c>
	...

080132e4 <_printf_i>:
 80132e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80132ec:	460c      	mov	r4, r1
 80132ee:	7e09      	ldrb	r1, [r1, #24]
 80132f0:	b085      	sub	sp, #20
 80132f2:	296e      	cmp	r1, #110	; 0x6e
 80132f4:	4617      	mov	r7, r2
 80132f6:	4606      	mov	r6, r0
 80132f8:	4698      	mov	r8, r3
 80132fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132fc:	f000 80b3 	beq.w	8013466 <_printf_i+0x182>
 8013300:	d822      	bhi.n	8013348 <_printf_i+0x64>
 8013302:	2963      	cmp	r1, #99	; 0x63
 8013304:	d036      	beq.n	8013374 <_printf_i+0x90>
 8013306:	d80a      	bhi.n	801331e <_printf_i+0x3a>
 8013308:	2900      	cmp	r1, #0
 801330a:	f000 80b9 	beq.w	8013480 <_printf_i+0x19c>
 801330e:	2958      	cmp	r1, #88	; 0x58
 8013310:	f000 8083 	beq.w	801341a <_printf_i+0x136>
 8013314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013318:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801331c:	e032      	b.n	8013384 <_printf_i+0xa0>
 801331e:	2964      	cmp	r1, #100	; 0x64
 8013320:	d001      	beq.n	8013326 <_printf_i+0x42>
 8013322:	2969      	cmp	r1, #105	; 0x69
 8013324:	d1f6      	bne.n	8013314 <_printf_i+0x30>
 8013326:	6820      	ldr	r0, [r4, #0]
 8013328:	6813      	ldr	r3, [r2, #0]
 801332a:	0605      	lsls	r5, r0, #24
 801332c:	f103 0104 	add.w	r1, r3, #4
 8013330:	d52a      	bpl.n	8013388 <_printf_i+0xa4>
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	6011      	str	r1, [r2, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	da03      	bge.n	8013342 <_printf_i+0x5e>
 801333a:	222d      	movs	r2, #45	; 0x2d
 801333c:	425b      	negs	r3, r3
 801333e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013342:	486f      	ldr	r0, [pc, #444]	; (8013500 <_printf_i+0x21c>)
 8013344:	220a      	movs	r2, #10
 8013346:	e039      	b.n	80133bc <_printf_i+0xd8>
 8013348:	2973      	cmp	r1, #115	; 0x73
 801334a:	f000 809d 	beq.w	8013488 <_printf_i+0x1a4>
 801334e:	d808      	bhi.n	8013362 <_printf_i+0x7e>
 8013350:	296f      	cmp	r1, #111	; 0x6f
 8013352:	d020      	beq.n	8013396 <_printf_i+0xb2>
 8013354:	2970      	cmp	r1, #112	; 0x70
 8013356:	d1dd      	bne.n	8013314 <_printf_i+0x30>
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	f043 0320 	orr.w	r3, r3, #32
 801335e:	6023      	str	r3, [r4, #0]
 8013360:	e003      	b.n	801336a <_printf_i+0x86>
 8013362:	2975      	cmp	r1, #117	; 0x75
 8013364:	d017      	beq.n	8013396 <_printf_i+0xb2>
 8013366:	2978      	cmp	r1, #120	; 0x78
 8013368:	d1d4      	bne.n	8013314 <_printf_i+0x30>
 801336a:	2378      	movs	r3, #120	; 0x78
 801336c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013370:	4864      	ldr	r0, [pc, #400]	; (8013504 <_printf_i+0x220>)
 8013372:	e055      	b.n	8013420 <_printf_i+0x13c>
 8013374:	6813      	ldr	r3, [r2, #0]
 8013376:	1d19      	adds	r1, r3, #4
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	6011      	str	r1, [r2, #0]
 801337c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013384:	2301      	movs	r3, #1
 8013386:	e08c      	b.n	80134a2 <_printf_i+0x1be>
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	6011      	str	r1, [r2, #0]
 801338c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013390:	bf18      	it	ne
 8013392:	b21b      	sxthne	r3, r3
 8013394:	e7cf      	b.n	8013336 <_printf_i+0x52>
 8013396:	6813      	ldr	r3, [r2, #0]
 8013398:	6825      	ldr	r5, [r4, #0]
 801339a:	1d18      	adds	r0, r3, #4
 801339c:	6010      	str	r0, [r2, #0]
 801339e:	0628      	lsls	r0, r5, #24
 80133a0:	d501      	bpl.n	80133a6 <_printf_i+0xc2>
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	e002      	b.n	80133ac <_printf_i+0xc8>
 80133a6:	0668      	lsls	r0, r5, #25
 80133a8:	d5fb      	bpl.n	80133a2 <_printf_i+0xbe>
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	4854      	ldr	r0, [pc, #336]	; (8013500 <_printf_i+0x21c>)
 80133ae:	296f      	cmp	r1, #111	; 0x6f
 80133b0:	bf14      	ite	ne
 80133b2:	220a      	movne	r2, #10
 80133b4:	2208      	moveq	r2, #8
 80133b6:	2100      	movs	r1, #0
 80133b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80133bc:	6865      	ldr	r5, [r4, #4]
 80133be:	60a5      	str	r5, [r4, #8]
 80133c0:	2d00      	cmp	r5, #0
 80133c2:	f2c0 8095 	blt.w	80134f0 <_printf_i+0x20c>
 80133c6:	6821      	ldr	r1, [r4, #0]
 80133c8:	f021 0104 	bic.w	r1, r1, #4
 80133cc:	6021      	str	r1, [r4, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d13d      	bne.n	801344e <_printf_i+0x16a>
 80133d2:	2d00      	cmp	r5, #0
 80133d4:	f040 808e 	bne.w	80134f4 <_printf_i+0x210>
 80133d8:	4665      	mov	r5, ip
 80133da:	2a08      	cmp	r2, #8
 80133dc:	d10b      	bne.n	80133f6 <_printf_i+0x112>
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	07db      	lsls	r3, r3, #31
 80133e2:	d508      	bpl.n	80133f6 <_printf_i+0x112>
 80133e4:	6923      	ldr	r3, [r4, #16]
 80133e6:	6862      	ldr	r2, [r4, #4]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	bfde      	ittt	le
 80133ec:	2330      	movle	r3, #48	; 0x30
 80133ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80133f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80133f6:	ebac 0305 	sub.w	r3, ip, r5
 80133fa:	6123      	str	r3, [r4, #16]
 80133fc:	f8cd 8000 	str.w	r8, [sp]
 8013400:	463b      	mov	r3, r7
 8013402:	aa03      	add	r2, sp, #12
 8013404:	4621      	mov	r1, r4
 8013406:	4630      	mov	r0, r6
 8013408:	f7ff fef6 	bl	80131f8 <_printf_common>
 801340c:	3001      	adds	r0, #1
 801340e:	d14d      	bne.n	80134ac <_printf_i+0x1c8>
 8013410:	f04f 30ff 	mov.w	r0, #4294967295
 8013414:	b005      	add	sp, #20
 8013416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801341a:	4839      	ldr	r0, [pc, #228]	; (8013500 <_printf_i+0x21c>)
 801341c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013420:	6813      	ldr	r3, [r2, #0]
 8013422:	6821      	ldr	r1, [r4, #0]
 8013424:	1d1d      	adds	r5, r3, #4
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	6015      	str	r5, [r2, #0]
 801342a:	060a      	lsls	r2, r1, #24
 801342c:	d50b      	bpl.n	8013446 <_printf_i+0x162>
 801342e:	07ca      	lsls	r2, r1, #31
 8013430:	bf44      	itt	mi
 8013432:	f041 0120 	orrmi.w	r1, r1, #32
 8013436:	6021      	strmi	r1, [r4, #0]
 8013438:	b91b      	cbnz	r3, 8013442 <_printf_i+0x15e>
 801343a:	6822      	ldr	r2, [r4, #0]
 801343c:	f022 0220 	bic.w	r2, r2, #32
 8013440:	6022      	str	r2, [r4, #0]
 8013442:	2210      	movs	r2, #16
 8013444:	e7b7      	b.n	80133b6 <_printf_i+0xd2>
 8013446:	064d      	lsls	r5, r1, #25
 8013448:	bf48      	it	mi
 801344a:	b29b      	uxthmi	r3, r3
 801344c:	e7ef      	b.n	801342e <_printf_i+0x14a>
 801344e:	4665      	mov	r5, ip
 8013450:	fbb3 f1f2 	udiv	r1, r3, r2
 8013454:	fb02 3311 	mls	r3, r2, r1, r3
 8013458:	5cc3      	ldrb	r3, [r0, r3]
 801345a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801345e:	460b      	mov	r3, r1
 8013460:	2900      	cmp	r1, #0
 8013462:	d1f5      	bne.n	8013450 <_printf_i+0x16c>
 8013464:	e7b9      	b.n	80133da <_printf_i+0xf6>
 8013466:	6813      	ldr	r3, [r2, #0]
 8013468:	6825      	ldr	r5, [r4, #0]
 801346a:	6961      	ldr	r1, [r4, #20]
 801346c:	1d18      	adds	r0, r3, #4
 801346e:	6010      	str	r0, [r2, #0]
 8013470:	0628      	lsls	r0, r5, #24
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	d501      	bpl.n	801347a <_printf_i+0x196>
 8013476:	6019      	str	r1, [r3, #0]
 8013478:	e002      	b.n	8013480 <_printf_i+0x19c>
 801347a:	066a      	lsls	r2, r5, #25
 801347c:	d5fb      	bpl.n	8013476 <_printf_i+0x192>
 801347e:	8019      	strh	r1, [r3, #0]
 8013480:	2300      	movs	r3, #0
 8013482:	6123      	str	r3, [r4, #16]
 8013484:	4665      	mov	r5, ip
 8013486:	e7b9      	b.n	80133fc <_printf_i+0x118>
 8013488:	6813      	ldr	r3, [r2, #0]
 801348a:	1d19      	adds	r1, r3, #4
 801348c:	6011      	str	r1, [r2, #0]
 801348e:	681d      	ldr	r5, [r3, #0]
 8013490:	6862      	ldr	r2, [r4, #4]
 8013492:	2100      	movs	r1, #0
 8013494:	4628      	mov	r0, r5
 8013496:	f7ec febb 	bl	8000210 <memchr>
 801349a:	b108      	cbz	r0, 80134a0 <_printf_i+0x1bc>
 801349c:	1b40      	subs	r0, r0, r5
 801349e:	6060      	str	r0, [r4, #4]
 80134a0:	6863      	ldr	r3, [r4, #4]
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	2300      	movs	r3, #0
 80134a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134aa:	e7a7      	b.n	80133fc <_printf_i+0x118>
 80134ac:	6923      	ldr	r3, [r4, #16]
 80134ae:	462a      	mov	r2, r5
 80134b0:	4639      	mov	r1, r7
 80134b2:	4630      	mov	r0, r6
 80134b4:	47c0      	blx	r8
 80134b6:	3001      	adds	r0, #1
 80134b8:	d0aa      	beq.n	8013410 <_printf_i+0x12c>
 80134ba:	6823      	ldr	r3, [r4, #0]
 80134bc:	079b      	lsls	r3, r3, #30
 80134be:	d413      	bmi.n	80134e8 <_printf_i+0x204>
 80134c0:	68e0      	ldr	r0, [r4, #12]
 80134c2:	9b03      	ldr	r3, [sp, #12]
 80134c4:	4298      	cmp	r0, r3
 80134c6:	bfb8      	it	lt
 80134c8:	4618      	movlt	r0, r3
 80134ca:	e7a3      	b.n	8013414 <_printf_i+0x130>
 80134cc:	2301      	movs	r3, #1
 80134ce:	464a      	mov	r2, r9
 80134d0:	4639      	mov	r1, r7
 80134d2:	4630      	mov	r0, r6
 80134d4:	47c0      	blx	r8
 80134d6:	3001      	adds	r0, #1
 80134d8:	d09a      	beq.n	8013410 <_printf_i+0x12c>
 80134da:	3501      	adds	r5, #1
 80134dc:	68e3      	ldr	r3, [r4, #12]
 80134de:	9a03      	ldr	r2, [sp, #12]
 80134e0:	1a9b      	subs	r3, r3, r2
 80134e2:	42ab      	cmp	r3, r5
 80134e4:	dcf2      	bgt.n	80134cc <_printf_i+0x1e8>
 80134e6:	e7eb      	b.n	80134c0 <_printf_i+0x1dc>
 80134e8:	2500      	movs	r5, #0
 80134ea:	f104 0919 	add.w	r9, r4, #25
 80134ee:	e7f5      	b.n	80134dc <_printf_i+0x1f8>
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1ac      	bne.n	801344e <_printf_i+0x16a>
 80134f4:	7803      	ldrb	r3, [r0, #0]
 80134f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134fe:	e76c      	b.n	80133da <_printf_i+0xf6>
 8013500:	08018274 	.word	0x08018274
 8013504:	08018285 	.word	0x08018285

08013508 <_scanf_float>:
 8013508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801350c:	469a      	mov	sl, r3
 801350e:	688b      	ldr	r3, [r1, #8]
 8013510:	4616      	mov	r6, r2
 8013512:	1e5a      	subs	r2, r3, #1
 8013514:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013518:	b087      	sub	sp, #28
 801351a:	bf83      	ittte	hi
 801351c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013520:	189b      	addhi	r3, r3, r2
 8013522:	9301      	strhi	r3, [sp, #4]
 8013524:	2300      	movls	r3, #0
 8013526:	bf86      	itte	hi
 8013528:	f240 135d 	movwhi	r3, #349	; 0x15d
 801352c:	608b      	strhi	r3, [r1, #8]
 801352e:	9301      	strls	r3, [sp, #4]
 8013530:	680b      	ldr	r3, [r1, #0]
 8013532:	4688      	mov	r8, r1
 8013534:	f04f 0b00 	mov.w	fp, #0
 8013538:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801353c:	f848 3b1c 	str.w	r3, [r8], #28
 8013540:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013544:	4607      	mov	r7, r0
 8013546:	460c      	mov	r4, r1
 8013548:	4645      	mov	r5, r8
 801354a:	465a      	mov	r2, fp
 801354c:	46d9      	mov	r9, fp
 801354e:	f8cd b008 	str.w	fp, [sp, #8]
 8013552:	68a1      	ldr	r1, [r4, #8]
 8013554:	b181      	cbz	r1, 8013578 <_scanf_float+0x70>
 8013556:	6833      	ldr	r3, [r6, #0]
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	2b49      	cmp	r3, #73	; 0x49
 801355c:	d071      	beq.n	8013642 <_scanf_float+0x13a>
 801355e:	d84d      	bhi.n	80135fc <_scanf_float+0xf4>
 8013560:	2b39      	cmp	r3, #57	; 0x39
 8013562:	d840      	bhi.n	80135e6 <_scanf_float+0xde>
 8013564:	2b31      	cmp	r3, #49	; 0x31
 8013566:	f080 8088 	bcs.w	801367a <_scanf_float+0x172>
 801356a:	2b2d      	cmp	r3, #45	; 0x2d
 801356c:	f000 8090 	beq.w	8013690 <_scanf_float+0x188>
 8013570:	d815      	bhi.n	801359e <_scanf_float+0x96>
 8013572:	2b2b      	cmp	r3, #43	; 0x2b
 8013574:	f000 808c 	beq.w	8013690 <_scanf_float+0x188>
 8013578:	f1b9 0f00 	cmp.w	r9, #0
 801357c:	d003      	beq.n	8013586 <_scanf_float+0x7e>
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013584:	6023      	str	r3, [r4, #0]
 8013586:	3a01      	subs	r2, #1
 8013588:	2a01      	cmp	r2, #1
 801358a:	f200 80ea 	bhi.w	8013762 <_scanf_float+0x25a>
 801358e:	4545      	cmp	r5, r8
 8013590:	f200 80dc 	bhi.w	801374c <_scanf_float+0x244>
 8013594:	2601      	movs	r6, #1
 8013596:	4630      	mov	r0, r6
 8013598:	b007      	add	sp, #28
 801359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359e:	2b2e      	cmp	r3, #46	; 0x2e
 80135a0:	f000 809f 	beq.w	80136e2 <_scanf_float+0x1da>
 80135a4:	2b30      	cmp	r3, #48	; 0x30
 80135a6:	d1e7      	bne.n	8013578 <_scanf_float+0x70>
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80135ae:	d064      	beq.n	801367a <_scanf_float+0x172>
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80135b6:	6020      	str	r0, [r4, #0]
 80135b8:	f109 0901 	add.w	r9, r9, #1
 80135bc:	b11b      	cbz	r3, 80135c6 <_scanf_float+0xbe>
 80135be:	3b01      	subs	r3, #1
 80135c0:	3101      	adds	r1, #1
 80135c2:	9301      	str	r3, [sp, #4]
 80135c4:	60a1      	str	r1, [r4, #8]
 80135c6:	68a3      	ldr	r3, [r4, #8]
 80135c8:	3b01      	subs	r3, #1
 80135ca:	60a3      	str	r3, [r4, #8]
 80135cc:	6923      	ldr	r3, [r4, #16]
 80135ce:	3301      	adds	r3, #1
 80135d0:	6123      	str	r3, [r4, #16]
 80135d2:	6873      	ldr	r3, [r6, #4]
 80135d4:	3b01      	subs	r3, #1
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	6073      	str	r3, [r6, #4]
 80135da:	f340 80ac 	ble.w	8013736 <_scanf_float+0x22e>
 80135de:	6833      	ldr	r3, [r6, #0]
 80135e0:	3301      	adds	r3, #1
 80135e2:	6033      	str	r3, [r6, #0]
 80135e4:	e7b5      	b.n	8013552 <_scanf_float+0x4a>
 80135e6:	2b45      	cmp	r3, #69	; 0x45
 80135e8:	f000 8085 	beq.w	80136f6 <_scanf_float+0x1ee>
 80135ec:	2b46      	cmp	r3, #70	; 0x46
 80135ee:	d06a      	beq.n	80136c6 <_scanf_float+0x1be>
 80135f0:	2b41      	cmp	r3, #65	; 0x41
 80135f2:	d1c1      	bne.n	8013578 <_scanf_float+0x70>
 80135f4:	2a01      	cmp	r2, #1
 80135f6:	d1bf      	bne.n	8013578 <_scanf_float+0x70>
 80135f8:	2202      	movs	r2, #2
 80135fa:	e046      	b.n	801368a <_scanf_float+0x182>
 80135fc:	2b65      	cmp	r3, #101	; 0x65
 80135fe:	d07a      	beq.n	80136f6 <_scanf_float+0x1ee>
 8013600:	d818      	bhi.n	8013634 <_scanf_float+0x12c>
 8013602:	2b54      	cmp	r3, #84	; 0x54
 8013604:	d066      	beq.n	80136d4 <_scanf_float+0x1cc>
 8013606:	d811      	bhi.n	801362c <_scanf_float+0x124>
 8013608:	2b4e      	cmp	r3, #78	; 0x4e
 801360a:	d1b5      	bne.n	8013578 <_scanf_float+0x70>
 801360c:	2a00      	cmp	r2, #0
 801360e:	d146      	bne.n	801369e <_scanf_float+0x196>
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	d145      	bne.n	80136a2 <_scanf_float+0x19a>
 8013616:	6821      	ldr	r1, [r4, #0]
 8013618:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801361c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013620:	d13f      	bne.n	80136a2 <_scanf_float+0x19a>
 8013622:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013626:	6021      	str	r1, [r4, #0]
 8013628:	2201      	movs	r2, #1
 801362a:	e02e      	b.n	801368a <_scanf_float+0x182>
 801362c:	2b59      	cmp	r3, #89	; 0x59
 801362e:	d01e      	beq.n	801366e <_scanf_float+0x166>
 8013630:	2b61      	cmp	r3, #97	; 0x61
 8013632:	e7de      	b.n	80135f2 <_scanf_float+0xea>
 8013634:	2b6e      	cmp	r3, #110	; 0x6e
 8013636:	d0e9      	beq.n	801360c <_scanf_float+0x104>
 8013638:	d815      	bhi.n	8013666 <_scanf_float+0x15e>
 801363a:	2b66      	cmp	r3, #102	; 0x66
 801363c:	d043      	beq.n	80136c6 <_scanf_float+0x1be>
 801363e:	2b69      	cmp	r3, #105	; 0x69
 8013640:	d19a      	bne.n	8013578 <_scanf_float+0x70>
 8013642:	f1bb 0f00 	cmp.w	fp, #0
 8013646:	d138      	bne.n	80136ba <_scanf_float+0x1b2>
 8013648:	f1b9 0f00 	cmp.w	r9, #0
 801364c:	d197      	bne.n	801357e <_scanf_float+0x76>
 801364e:	6821      	ldr	r1, [r4, #0]
 8013650:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013654:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013658:	d195      	bne.n	8013586 <_scanf_float+0x7e>
 801365a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801365e:	6021      	str	r1, [r4, #0]
 8013660:	f04f 0b01 	mov.w	fp, #1
 8013664:	e011      	b.n	801368a <_scanf_float+0x182>
 8013666:	2b74      	cmp	r3, #116	; 0x74
 8013668:	d034      	beq.n	80136d4 <_scanf_float+0x1cc>
 801366a:	2b79      	cmp	r3, #121	; 0x79
 801366c:	d184      	bne.n	8013578 <_scanf_float+0x70>
 801366e:	f1bb 0f07 	cmp.w	fp, #7
 8013672:	d181      	bne.n	8013578 <_scanf_float+0x70>
 8013674:	f04f 0b08 	mov.w	fp, #8
 8013678:	e007      	b.n	801368a <_scanf_float+0x182>
 801367a:	eb12 0f0b 	cmn.w	r2, fp
 801367e:	f47f af7b 	bne.w	8013578 <_scanf_float+0x70>
 8013682:	6821      	ldr	r1, [r4, #0]
 8013684:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013688:	6021      	str	r1, [r4, #0]
 801368a:	702b      	strb	r3, [r5, #0]
 801368c:	3501      	adds	r5, #1
 801368e:	e79a      	b.n	80135c6 <_scanf_float+0xbe>
 8013690:	6821      	ldr	r1, [r4, #0]
 8013692:	0608      	lsls	r0, r1, #24
 8013694:	f57f af70 	bpl.w	8013578 <_scanf_float+0x70>
 8013698:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801369c:	e7f4      	b.n	8013688 <_scanf_float+0x180>
 801369e:	2a02      	cmp	r2, #2
 80136a0:	d047      	beq.n	8013732 <_scanf_float+0x22a>
 80136a2:	f1bb 0f01 	cmp.w	fp, #1
 80136a6:	d003      	beq.n	80136b0 <_scanf_float+0x1a8>
 80136a8:	f1bb 0f04 	cmp.w	fp, #4
 80136ac:	f47f af64 	bne.w	8013578 <_scanf_float+0x70>
 80136b0:	f10b 0b01 	add.w	fp, fp, #1
 80136b4:	fa5f fb8b 	uxtb.w	fp, fp
 80136b8:	e7e7      	b.n	801368a <_scanf_float+0x182>
 80136ba:	f1bb 0f03 	cmp.w	fp, #3
 80136be:	d0f7      	beq.n	80136b0 <_scanf_float+0x1a8>
 80136c0:	f1bb 0f05 	cmp.w	fp, #5
 80136c4:	e7f2      	b.n	80136ac <_scanf_float+0x1a4>
 80136c6:	f1bb 0f02 	cmp.w	fp, #2
 80136ca:	f47f af55 	bne.w	8013578 <_scanf_float+0x70>
 80136ce:	f04f 0b03 	mov.w	fp, #3
 80136d2:	e7da      	b.n	801368a <_scanf_float+0x182>
 80136d4:	f1bb 0f06 	cmp.w	fp, #6
 80136d8:	f47f af4e 	bne.w	8013578 <_scanf_float+0x70>
 80136dc:	f04f 0b07 	mov.w	fp, #7
 80136e0:	e7d3      	b.n	801368a <_scanf_float+0x182>
 80136e2:	6821      	ldr	r1, [r4, #0]
 80136e4:	0588      	lsls	r0, r1, #22
 80136e6:	f57f af47 	bpl.w	8013578 <_scanf_float+0x70>
 80136ea:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80136ee:	6021      	str	r1, [r4, #0]
 80136f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80136f4:	e7c9      	b.n	801368a <_scanf_float+0x182>
 80136f6:	6821      	ldr	r1, [r4, #0]
 80136f8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80136fc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013700:	d006      	beq.n	8013710 <_scanf_float+0x208>
 8013702:	0548      	lsls	r0, r1, #21
 8013704:	f57f af38 	bpl.w	8013578 <_scanf_float+0x70>
 8013708:	f1b9 0f00 	cmp.w	r9, #0
 801370c:	f43f af3b 	beq.w	8013586 <_scanf_float+0x7e>
 8013710:	0588      	lsls	r0, r1, #22
 8013712:	bf58      	it	pl
 8013714:	9802      	ldrpl	r0, [sp, #8]
 8013716:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801371a:	bf58      	it	pl
 801371c:	eba9 0000 	subpl.w	r0, r9, r0
 8013720:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013724:	bf58      	it	pl
 8013726:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801372a:	6021      	str	r1, [r4, #0]
 801372c:	f04f 0900 	mov.w	r9, #0
 8013730:	e7ab      	b.n	801368a <_scanf_float+0x182>
 8013732:	2203      	movs	r2, #3
 8013734:	e7a9      	b.n	801368a <_scanf_float+0x182>
 8013736:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801373a:	9205      	str	r2, [sp, #20]
 801373c:	4631      	mov	r1, r6
 801373e:	4638      	mov	r0, r7
 8013740:	4798      	blx	r3
 8013742:	9a05      	ldr	r2, [sp, #20]
 8013744:	2800      	cmp	r0, #0
 8013746:	f43f af04 	beq.w	8013552 <_scanf_float+0x4a>
 801374a:	e715      	b.n	8013578 <_scanf_float+0x70>
 801374c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013750:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013754:	4632      	mov	r2, r6
 8013756:	4638      	mov	r0, r7
 8013758:	4798      	blx	r3
 801375a:	6923      	ldr	r3, [r4, #16]
 801375c:	3b01      	subs	r3, #1
 801375e:	6123      	str	r3, [r4, #16]
 8013760:	e715      	b.n	801358e <_scanf_float+0x86>
 8013762:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013766:	2b06      	cmp	r3, #6
 8013768:	d80a      	bhi.n	8013780 <_scanf_float+0x278>
 801376a:	f1bb 0f02 	cmp.w	fp, #2
 801376e:	d968      	bls.n	8013842 <_scanf_float+0x33a>
 8013770:	f1ab 0b03 	sub.w	fp, fp, #3
 8013774:	fa5f fb8b 	uxtb.w	fp, fp
 8013778:	eba5 0b0b 	sub.w	fp, r5, fp
 801377c:	455d      	cmp	r5, fp
 801377e:	d14b      	bne.n	8013818 <_scanf_float+0x310>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	05da      	lsls	r2, r3, #23
 8013784:	d51f      	bpl.n	80137c6 <_scanf_float+0x2be>
 8013786:	055b      	lsls	r3, r3, #21
 8013788:	d468      	bmi.n	801385c <_scanf_float+0x354>
 801378a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801378e:	6923      	ldr	r3, [r4, #16]
 8013790:	2965      	cmp	r1, #101	; 0x65
 8013792:	f103 33ff 	add.w	r3, r3, #4294967295
 8013796:	f105 3bff 	add.w	fp, r5, #4294967295
 801379a:	6123      	str	r3, [r4, #16]
 801379c:	d00d      	beq.n	80137ba <_scanf_float+0x2b2>
 801379e:	2945      	cmp	r1, #69	; 0x45
 80137a0:	d00b      	beq.n	80137ba <_scanf_float+0x2b2>
 80137a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137a6:	4632      	mov	r2, r6
 80137a8:	4638      	mov	r0, r7
 80137aa:	4798      	blx	r3
 80137ac:	6923      	ldr	r3, [r4, #16]
 80137ae:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80137b2:	3b01      	subs	r3, #1
 80137b4:	f1a5 0b02 	sub.w	fp, r5, #2
 80137b8:	6123      	str	r3, [r4, #16]
 80137ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137be:	4632      	mov	r2, r6
 80137c0:	4638      	mov	r0, r7
 80137c2:	4798      	blx	r3
 80137c4:	465d      	mov	r5, fp
 80137c6:	6826      	ldr	r6, [r4, #0]
 80137c8:	f016 0610 	ands.w	r6, r6, #16
 80137cc:	d17a      	bne.n	80138c4 <_scanf_float+0x3bc>
 80137ce:	702e      	strb	r6, [r5, #0]
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80137d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137da:	d142      	bne.n	8013862 <_scanf_float+0x35a>
 80137dc:	9b02      	ldr	r3, [sp, #8]
 80137de:	eba9 0303 	sub.w	r3, r9, r3
 80137e2:	425a      	negs	r2, r3
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d149      	bne.n	801387c <_scanf_float+0x374>
 80137e8:	2200      	movs	r2, #0
 80137ea:	4641      	mov	r1, r8
 80137ec:	4638      	mov	r0, r7
 80137ee:	f000 ffdf 	bl	80147b0 <_strtod_r>
 80137f2:	6825      	ldr	r5, [r4, #0]
 80137f4:	f8da 3000 	ldr.w	r3, [sl]
 80137f8:	f015 0f02 	tst.w	r5, #2
 80137fc:	f103 0204 	add.w	r2, r3, #4
 8013800:	ec59 8b10 	vmov	r8, r9, d0
 8013804:	f8ca 2000 	str.w	r2, [sl]
 8013808:	d043      	beq.n	8013892 <_scanf_float+0x38a>
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	e9c3 8900 	strd	r8, r9, [r3]
 8013810:	68e3      	ldr	r3, [r4, #12]
 8013812:	3301      	adds	r3, #1
 8013814:	60e3      	str	r3, [r4, #12]
 8013816:	e6be      	b.n	8013596 <_scanf_float+0x8e>
 8013818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801381c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013820:	4632      	mov	r2, r6
 8013822:	4638      	mov	r0, r7
 8013824:	4798      	blx	r3
 8013826:	6923      	ldr	r3, [r4, #16]
 8013828:	3b01      	subs	r3, #1
 801382a:	6123      	str	r3, [r4, #16]
 801382c:	e7a6      	b.n	801377c <_scanf_float+0x274>
 801382e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013832:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013836:	4632      	mov	r2, r6
 8013838:	4638      	mov	r0, r7
 801383a:	4798      	blx	r3
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	3b01      	subs	r3, #1
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	4545      	cmp	r5, r8
 8013844:	d8f3      	bhi.n	801382e <_scanf_float+0x326>
 8013846:	e6a5      	b.n	8013594 <_scanf_float+0x8c>
 8013848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801384c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013850:	4632      	mov	r2, r6
 8013852:	4638      	mov	r0, r7
 8013854:	4798      	blx	r3
 8013856:	6923      	ldr	r3, [r4, #16]
 8013858:	3b01      	subs	r3, #1
 801385a:	6123      	str	r3, [r4, #16]
 801385c:	4545      	cmp	r5, r8
 801385e:	d8f3      	bhi.n	8013848 <_scanf_float+0x340>
 8013860:	e698      	b.n	8013594 <_scanf_float+0x8c>
 8013862:	9b03      	ldr	r3, [sp, #12]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d0bf      	beq.n	80137e8 <_scanf_float+0x2e0>
 8013868:	9904      	ldr	r1, [sp, #16]
 801386a:	230a      	movs	r3, #10
 801386c:	4632      	mov	r2, r6
 801386e:	3101      	adds	r1, #1
 8013870:	4638      	mov	r0, r7
 8013872:	f001 f829 	bl	80148c8 <_strtol_r>
 8013876:	9b03      	ldr	r3, [sp, #12]
 8013878:	9d04      	ldr	r5, [sp, #16]
 801387a:	1ac2      	subs	r2, r0, r3
 801387c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013880:	429d      	cmp	r5, r3
 8013882:	bf28      	it	cs
 8013884:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013888:	490f      	ldr	r1, [pc, #60]	; (80138c8 <_scanf_float+0x3c0>)
 801388a:	4628      	mov	r0, r5
 801388c:	f000 f8e8 	bl	8013a60 <siprintf>
 8013890:	e7aa      	b.n	80137e8 <_scanf_float+0x2e0>
 8013892:	f015 0504 	ands.w	r5, r5, #4
 8013896:	d1b8      	bne.n	801380a <_scanf_float+0x302>
 8013898:	681f      	ldr	r7, [r3, #0]
 801389a:	ee10 2a10 	vmov	r2, s0
 801389e:	464b      	mov	r3, r9
 80138a0:	ee10 0a10 	vmov	r0, s0
 80138a4:	4649      	mov	r1, r9
 80138a6:	f7ed f959 	bl	8000b5c <__aeabi_dcmpun>
 80138aa:	b128      	cbz	r0, 80138b8 <_scanf_float+0x3b0>
 80138ac:	4628      	mov	r0, r5
 80138ae:	f000 f89d 	bl	80139ec <nanf>
 80138b2:	ed87 0a00 	vstr	s0, [r7]
 80138b6:	e7ab      	b.n	8013810 <_scanf_float+0x308>
 80138b8:	4640      	mov	r0, r8
 80138ba:	4649      	mov	r1, r9
 80138bc:	f7ed f9ac 	bl	8000c18 <__aeabi_d2f>
 80138c0:	6038      	str	r0, [r7, #0]
 80138c2:	e7a5      	b.n	8013810 <_scanf_float+0x308>
 80138c4:	2600      	movs	r6, #0
 80138c6:	e666      	b.n	8013596 <_scanf_float+0x8e>
 80138c8:	08018296 	.word	0x08018296

080138cc <iprintf>:
 80138cc:	b40f      	push	{r0, r1, r2, r3}
 80138ce:	4b0a      	ldr	r3, [pc, #40]	; (80138f8 <iprintf+0x2c>)
 80138d0:	b513      	push	{r0, r1, r4, lr}
 80138d2:	681c      	ldr	r4, [r3, #0]
 80138d4:	b124      	cbz	r4, 80138e0 <iprintf+0x14>
 80138d6:	69a3      	ldr	r3, [r4, #24]
 80138d8:	b913      	cbnz	r3, 80138e0 <iprintf+0x14>
 80138da:	4620      	mov	r0, r4
 80138dc:	f002 f83c 	bl	8015958 <__sinit>
 80138e0:	ab05      	add	r3, sp, #20
 80138e2:	9a04      	ldr	r2, [sp, #16]
 80138e4:	68a1      	ldr	r1, [r4, #8]
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	4620      	mov	r0, r4
 80138ea:	f003 fc73 	bl	80171d4 <_vfiprintf_r>
 80138ee:	b002      	add	sp, #8
 80138f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138f4:	b004      	add	sp, #16
 80138f6:	4770      	bx	lr
 80138f8:	2000000c 	.word	0x2000000c

080138fc <putchar>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4b08      	ldr	r3, [pc, #32]	; (8013920 <putchar+0x24>)
 8013900:	681c      	ldr	r4, [r3, #0]
 8013902:	4605      	mov	r5, r0
 8013904:	b124      	cbz	r4, 8013910 <putchar+0x14>
 8013906:	69a3      	ldr	r3, [r4, #24]
 8013908:	b913      	cbnz	r3, 8013910 <putchar+0x14>
 801390a:	4620      	mov	r0, r4
 801390c:	f002 f824 	bl	8015958 <__sinit>
 8013910:	68a2      	ldr	r2, [r4, #8]
 8013912:	4629      	mov	r1, r5
 8013914:	4620      	mov	r0, r4
 8013916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801391a:	f003 bec9 	b.w	80176b0 <_putc_r>
 801391e:	bf00      	nop
 8013920:	2000000c 	.word	0x2000000c

08013924 <_puts_r>:
 8013924:	b570      	push	{r4, r5, r6, lr}
 8013926:	460e      	mov	r6, r1
 8013928:	4605      	mov	r5, r0
 801392a:	b118      	cbz	r0, 8013934 <_puts_r+0x10>
 801392c:	6983      	ldr	r3, [r0, #24]
 801392e:	b90b      	cbnz	r3, 8013934 <_puts_r+0x10>
 8013930:	f002 f812 	bl	8015958 <__sinit>
 8013934:	69ab      	ldr	r3, [r5, #24]
 8013936:	68ac      	ldr	r4, [r5, #8]
 8013938:	b913      	cbnz	r3, 8013940 <_puts_r+0x1c>
 801393a:	4628      	mov	r0, r5
 801393c:	f002 f80c 	bl	8015958 <__sinit>
 8013940:	4b23      	ldr	r3, [pc, #140]	; (80139d0 <_puts_r+0xac>)
 8013942:	429c      	cmp	r4, r3
 8013944:	d117      	bne.n	8013976 <_puts_r+0x52>
 8013946:	686c      	ldr	r4, [r5, #4]
 8013948:	89a3      	ldrh	r3, [r4, #12]
 801394a:	071b      	lsls	r3, r3, #28
 801394c:	d51d      	bpl.n	801398a <_puts_r+0x66>
 801394e:	6923      	ldr	r3, [r4, #16]
 8013950:	b1db      	cbz	r3, 801398a <_puts_r+0x66>
 8013952:	3e01      	subs	r6, #1
 8013954:	68a3      	ldr	r3, [r4, #8]
 8013956:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801395a:	3b01      	subs	r3, #1
 801395c:	60a3      	str	r3, [r4, #8]
 801395e:	b9e9      	cbnz	r1, 801399c <_puts_r+0x78>
 8013960:	2b00      	cmp	r3, #0
 8013962:	da2e      	bge.n	80139c2 <_puts_r+0x9e>
 8013964:	4622      	mov	r2, r4
 8013966:	210a      	movs	r1, #10
 8013968:	4628      	mov	r0, r5
 801396a:	f000 ffdf 	bl	801492c <__swbuf_r>
 801396e:	3001      	adds	r0, #1
 8013970:	d011      	beq.n	8013996 <_puts_r+0x72>
 8013972:	200a      	movs	r0, #10
 8013974:	e011      	b.n	801399a <_puts_r+0x76>
 8013976:	4b17      	ldr	r3, [pc, #92]	; (80139d4 <_puts_r+0xb0>)
 8013978:	429c      	cmp	r4, r3
 801397a:	d101      	bne.n	8013980 <_puts_r+0x5c>
 801397c:	68ac      	ldr	r4, [r5, #8]
 801397e:	e7e3      	b.n	8013948 <_puts_r+0x24>
 8013980:	4b15      	ldr	r3, [pc, #84]	; (80139d8 <_puts_r+0xb4>)
 8013982:	429c      	cmp	r4, r3
 8013984:	bf08      	it	eq
 8013986:	68ec      	ldreq	r4, [r5, #12]
 8013988:	e7de      	b.n	8013948 <_puts_r+0x24>
 801398a:	4621      	mov	r1, r4
 801398c:	4628      	mov	r0, r5
 801398e:	f001 f831 	bl	80149f4 <__swsetup_r>
 8013992:	2800      	cmp	r0, #0
 8013994:	d0dd      	beq.n	8013952 <_puts_r+0x2e>
 8013996:	f04f 30ff 	mov.w	r0, #4294967295
 801399a:	bd70      	pop	{r4, r5, r6, pc}
 801399c:	2b00      	cmp	r3, #0
 801399e:	da04      	bge.n	80139aa <_puts_r+0x86>
 80139a0:	69a2      	ldr	r2, [r4, #24]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	dc06      	bgt.n	80139b4 <_puts_r+0x90>
 80139a6:	290a      	cmp	r1, #10
 80139a8:	d004      	beq.n	80139b4 <_puts_r+0x90>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	1c5a      	adds	r2, r3, #1
 80139ae:	6022      	str	r2, [r4, #0]
 80139b0:	7019      	strb	r1, [r3, #0]
 80139b2:	e7cf      	b.n	8013954 <_puts_r+0x30>
 80139b4:	4622      	mov	r2, r4
 80139b6:	4628      	mov	r0, r5
 80139b8:	f000 ffb8 	bl	801492c <__swbuf_r>
 80139bc:	3001      	adds	r0, #1
 80139be:	d1c9      	bne.n	8013954 <_puts_r+0x30>
 80139c0:	e7e9      	b.n	8013996 <_puts_r+0x72>
 80139c2:	6823      	ldr	r3, [r4, #0]
 80139c4:	200a      	movs	r0, #10
 80139c6:	1c5a      	adds	r2, r3, #1
 80139c8:	6022      	str	r2, [r4, #0]
 80139ca:	7018      	strb	r0, [r3, #0]
 80139cc:	e7e5      	b.n	801399a <_puts_r+0x76>
 80139ce:	bf00      	nop
 80139d0:	08018320 	.word	0x08018320
 80139d4:	08018340 	.word	0x08018340
 80139d8:	08018300 	.word	0x08018300

080139dc <puts>:
 80139dc:	4b02      	ldr	r3, [pc, #8]	; (80139e8 <puts+0xc>)
 80139de:	4601      	mov	r1, r0
 80139e0:	6818      	ldr	r0, [r3, #0]
 80139e2:	f7ff bf9f 	b.w	8013924 <_puts_r>
 80139e6:	bf00      	nop
 80139e8:	2000000c 	.word	0x2000000c

080139ec <nanf>:
 80139ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80139f4 <nanf+0x8>
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	7fc00000 	.word	0x7fc00000

080139f8 <sniprintf>:
 80139f8:	b40c      	push	{r2, r3}
 80139fa:	b530      	push	{r4, r5, lr}
 80139fc:	4b17      	ldr	r3, [pc, #92]	; (8013a5c <sniprintf+0x64>)
 80139fe:	1e0c      	subs	r4, r1, #0
 8013a00:	b09d      	sub	sp, #116	; 0x74
 8013a02:	681d      	ldr	r5, [r3, #0]
 8013a04:	da08      	bge.n	8013a18 <sniprintf+0x20>
 8013a06:	238b      	movs	r3, #139	; 0x8b
 8013a08:	602b      	str	r3, [r5, #0]
 8013a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0e:	b01d      	add	sp, #116	; 0x74
 8013a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a14:	b002      	add	sp, #8
 8013a16:	4770      	bx	lr
 8013a18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013a1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013a20:	bf14      	ite	ne
 8013a22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013a26:	4623      	moveq	r3, r4
 8013a28:	9304      	str	r3, [sp, #16]
 8013a2a:	9307      	str	r3, [sp, #28]
 8013a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a30:	9002      	str	r0, [sp, #8]
 8013a32:	9006      	str	r0, [sp, #24]
 8013a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a3a:	ab21      	add	r3, sp, #132	; 0x84
 8013a3c:	a902      	add	r1, sp, #8
 8013a3e:	4628      	mov	r0, r5
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	f003 f8fb 	bl	8016c3c <_svfiprintf_r>
 8013a46:	1c43      	adds	r3, r0, #1
 8013a48:	bfbc      	itt	lt
 8013a4a:	238b      	movlt	r3, #139	; 0x8b
 8013a4c:	602b      	strlt	r3, [r5, #0]
 8013a4e:	2c00      	cmp	r4, #0
 8013a50:	d0dd      	beq.n	8013a0e <sniprintf+0x16>
 8013a52:	9b02      	ldr	r3, [sp, #8]
 8013a54:	2200      	movs	r2, #0
 8013a56:	701a      	strb	r2, [r3, #0]
 8013a58:	e7d9      	b.n	8013a0e <sniprintf+0x16>
 8013a5a:	bf00      	nop
 8013a5c:	2000000c 	.word	0x2000000c

08013a60 <siprintf>:
 8013a60:	b40e      	push	{r1, r2, r3}
 8013a62:	b500      	push	{lr}
 8013a64:	b09c      	sub	sp, #112	; 0x70
 8013a66:	ab1d      	add	r3, sp, #116	; 0x74
 8013a68:	9002      	str	r0, [sp, #8]
 8013a6a:	9006      	str	r0, [sp, #24]
 8013a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a70:	4809      	ldr	r0, [pc, #36]	; (8013a98 <siprintf+0x38>)
 8013a72:	9107      	str	r1, [sp, #28]
 8013a74:	9104      	str	r1, [sp, #16]
 8013a76:	4909      	ldr	r1, [pc, #36]	; (8013a9c <siprintf+0x3c>)
 8013a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a7c:	9105      	str	r1, [sp, #20]
 8013a7e:	6800      	ldr	r0, [r0, #0]
 8013a80:	9301      	str	r3, [sp, #4]
 8013a82:	a902      	add	r1, sp, #8
 8013a84:	f003 f8da 	bl	8016c3c <_svfiprintf_r>
 8013a88:	9b02      	ldr	r3, [sp, #8]
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	b01c      	add	sp, #112	; 0x70
 8013a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a94:	b003      	add	sp, #12
 8013a96:	4770      	bx	lr
 8013a98:	2000000c 	.word	0x2000000c
 8013a9c:	ffff0208 	.word	0xffff0208

08013aa0 <siscanf>:
 8013aa0:	b40e      	push	{r1, r2, r3}
 8013aa2:	b530      	push	{r4, r5, lr}
 8013aa4:	b09c      	sub	sp, #112	; 0x70
 8013aa6:	ac1f      	add	r4, sp, #124	; 0x7c
 8013aa8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013aac:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ab0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ab4:	9002      	str	r0, [sp, #8]
 8013ab6:	9006      	str	r0, [sp, #24]
 8013ab8:	f7ec fba2 	bl	8000200 <strlen>
 8013abc:	4b0b      	ldr	r3, [pc, #44]	; (8013aec <siscanf+0x4c>)
 8013abe:	9003      	str	r0, [sp, #12]
 8013ac0:	9007      	str	r0, [sp, #28]
 8013ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ac4:	480a      	ldr	r0, [pc, #40]	; (8013af0 <siscanf+0x50>)
 8013ac6:	9401      	str	r4, [sp, #4]
 8013ac8:	2300      	movs	r3, #0
 8013aca:	930f      	str	r3, [sp, #60]	; 0x3c
 8013acc:	9314      	str	r3, [sp, #80]	; 0x50
 8013ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ad2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ad6:	462a      	mov	r2, r5
 8013ad8:	4623      	mov	r3, r4
 8013ada:	a902      	add	r1, sp, #8
 8013adc:	6800      	ldr	r0, [r0, #0]
 8013ade:	f003 f9ff 	bl	8016ee0 <__ssvfiscanf_r>
 8013ae2:	b01c      	add	sp, #112	; 0x70
 8013ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ae8:	b003      	add	sp, #12
 8013aea:	4770      	bx	lr
 8013aec:	08013b17 	.word	0x08013b17
 8013af0:	2000000c 	.word	0x2000000c

08013af4 <__sread>:
 8013af4:	b510      	push	{r4, lr}
 8013af6:	460c      	mov	r4, r1
 8013af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afc:	f003 fe0e 	bl	801771c <_read_r>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	bfab      	itete	ge
 8013b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b06:	89a3      	ldrhlt	r3, [r4, #12]
 8013b08:	181b      	addge	r3, r3, r0
 8013b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b0e:	bfac      	ite	ge
 8013b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b12:	81a3      	strhlt	r3, [r4, #12]
 8013b14:	bd10      	pop	{r4, pc}

08013b16 <__seofread>:
 8013b16:	2000      	movs	r0, #0
 8013b18:	4770      	bx	lr

08013b1a <__swrite>:
 8013b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b1e:	461f      	mov	r7, r3
 8013b20:	898b      	ldrh	r3, [r1, #12]
 8013b22:	05db      	lsls	r3, r3, #23
 8013b24:	4605      	mov	r5, r0
 8013b26:	460c      	mov	r4, r1
 8013b28:	4616      	mov	r6, r2
 8013b2a:	d505      	bpl.n	8013b38 <__swrite+0x1e>
 8013b2c:	2302      	movs	r3, #2
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b34:	f002 fae2 	bl	80160fc <_lseek_r>
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b42:	81a3      	strh	r3, [r4, #12]
 8013b44:	4632      	mov	r2, r6
 8013b46:	463b      	mov	r3, r7
 8013b48:	4628      	mov	r0, r5
 8013b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4e:	f000 bf3f 	b.w	80149d0 <_write_r>

08013b52 <__sseek>:
 8013b52:	b510      	push	{r4, lr}
 8013b54:	460c      	mov	r4, r1
 8013b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b5a:	f002 facf 	bl	80160fc <_lseek_r>
 8013b5e:	1c43      	adds	r3, r0, #1
 8013b60:	89a3      	ldrh	r3, [r4, #12]
 8013b62:	bf15      	itete	ne
 8013b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b6e:	81a3      	strheq	r3, [r4, #12]
 8013b70:	bf18      	it	ne
 8013b72:	81a3      	strhne	r3, [r4, #12]
 8013b74:	bd10      	pop	{r4, pc}

08013b76 <__sclose>:
 8013b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b7a:	f000 bfa9 	b.w	8014ad0 <_close_r>

08013b7e <strcpy>:
 8013b7e:	4603      	mov	r3, r0
 8013b80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b84:	f803 2b01 	strb.w	r2, [r3], #1
 8013b88:	2a00      	cmp	r2, #0
 8013b8a:	d1f9      	bne.n	8013b80 <strcpy+0x2>
 8013b8c:	4770      	bx	lr

08013b8e <sulp>:
 8013b8e:	b570      	push	{r4, r5, r6, lr}
 8013b90:	4604      	mov	r4, r0
 8013b92:	460d      	mov	r5, r1
 8013b94:	ec45 4b10 	vmov	d0, r4, r5
 8013b98:	4616      	mov	r6, r2
 8013b9a:	f002 fe0b 	bl	80167b4 <__ulp>
 8013b9e:	ec51 0b10 	vmov	r0, r1, d0
 8013ba2:	b17e      	cbz	r6, 8013bc4 <sulp+0x36>
 8013ba4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013ba8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	dd09      	ble.n	8013bc4 <sulp+0x36>
 8013bb0:	051b      	lsls	r3, r3, #20
 8013bb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013bb6:	2400      	movs	r4, #0
 8013bb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013bbc:	4622      	mov	r2, r4
 8013bbe:	462b      	mov	r3, r5
 8013bc0:	f7ec fd32 	bl	8000628 <__aeabi_dmul>
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bc8 <_strtod_l>:
 8013bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	461f      	mov	r7, r3
 8013bce:	b0a1      	sub	sp, #132	; 0x84
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	4681      	mov	r9, r0
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	460e      	mov	r6, r1
 8013bd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8013bda:	931c      	str	r3, [sp, #112]	; 0x70
 8013bdc:	f002 fa7e 	bl	80160dc <__localeconv_l>
 8013be0:	4680      	mov	r8, r0
 8013be2:	6800      	ldr	r0, [r0, #0]
 8013be4:	f7ec fb0c 	bl	8000200 <strlen>
 8013be8:	f04f 0a00 	mov.w	sl, #0
 8013bec:	4604      	mov	r4, r0
 8013bee:	f04f 0b00 	mov.w	fp, #0
 8013bf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bf6:	781a      	ldrb	r2, [r3, #0]
 8013bf8:	2a0d      	cmp	r2, #13
 8013bfa:	d832      	bhi.n	8013c62 <_strtod_l+0x9a>
 8013bfc:	2a09      	cmp	r2, #9
 8013bfe:	d236      	bcs.n	8013c6e <_strtod_l+0xa6>
 8013c00:	2a00      	cmp	r2, #0
 8013c02:	d03e      	beq.n	8013c82 <_strtod_l+0xba>
 8013c04:	2300      	movs	r3, #0
 8013c06:	930d      	str	r3, [sp, #52]	; 0x34
 8013c08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013c0a:	782b      	ldrb	r3, [r5, #0]
 8013c0c:	2b30      	cmp	r3, #48	; 0x30
 8013c0e:	f040 80ac 	bne.w	8013d6a <_strtod_l+0x1a2>
 8013c12:	786b      	ldrb	r3, [r5, #1]
 8013c14:	2b58      	cmp	r3, #88	; 0x58
 8013c16:	d001      	beq.n	8013c1c <_strtod_l+0x54>
 8013c18:	2b78      	cmp	r3, #120	; 0x78
 8013c1a:	d167      	bne.n	8013cec <_strtod_l+0x124>
 8013c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c1e:	9301      	str	r3, [sp, #4]
 8013c20:	ab1c      	add	r3, sp, #112	; 0x70
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	9702      	str	r7, [sp, #8]
 8013c26:	ab1d      	add	r3, sp, #116	; 0x74
 8013c28:	4a88      	ldr	r2, [pc, #544]	; (8013e4c <_strtod_l+0x284>)
 8013c2a:	a91b      	add	r1, sp, #108	; 0x6c
 8013c2c:	4648      	mov	r0, r9
 8013c2e:	f001 ff6c 	bl	8015b0a <__gethex>
 8013c32:	f010 0407 	ands.w	r4, r0, #7
 8013c36:	4606      	mov	r6, r0
 8013c38:	d005      	beq.n	8013c46 <_strtod_l+0x7e>
 8013c3a:	2c06      	cmp	r4, #6
 8013c3c:	d12b      	bne.n	8013c96 <_strtod_l+0xce>
 8013c3e:	3501      	adds	r5, #1
 8013c40:	2300      	movs	r3, #0
 8013c42:	951b      	str	r5, [sp, #108]	; 0x6c
 8013c44:	930d      	str	r3, [sp, #52]	; 0x34
 8013c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f040 859a 	bne.w	8014782 <_strtod_l+0xbba>
 8013c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c50:	b1e3      	cbz	r3, 8013c8c <_strtod_l+0xc4>
 8013c52:	4652      	mov	r2, sl
 8013c54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c58:	ec43 2b10 	vmov	d0, r2, r3
 8013c5c:	b021      	add	sp, #132	; 0x84
 8013c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c62:	2a2b      	cmp	r2, #43	; 0x2b
 8013c64:	d015      	beq.n	8013c92 <_strtod_l+0xca>
 8013c66:	2a2d      	cmp	r2, #45	; 0x2d
 8013c68:	d004      	beq.n	8013c74 <_strtod_l+0xac>
 8013c6a:	2a20      	cmp	r2, #32
 8013c6c:	d1ca      	bne.n	8013c04 <_strtod_l+0x3c>
 8013c6e:	3301      	adds	r3, #1
 8013c70:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c72:	e7bf      	b.n	8013bf4 <_strtod_l+0x2c>
 8013c74:	2201      	movs	r2, #1
 8013c76:	920d      	str	r2, [sp, #52]	; 0x34
 8013c78:	1c5a      	adds	r2, r3, #1
 8013c7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c7c:	785b      	ldrb	r3, [r3, #1]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1c2      	bne.n	8013c08 <_strtod_l+0x40>
 8013c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c84:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f040 8579 	bne.w	801477e <_strtod_l+0xbb6>
 8013c8c:	4652      	mov	r2, sl
 8013c8e:	465b      	mov	r3, fp
 8013c90:	e7e2      	b.n	8013c58 <_strtod_l+0x90>
 8013c92:	2200      	movs	r2, #0
 8013c94:	e7ef      	b.n	8013c76 <_strtod_l+0xae>
 8013c96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c98:	b13a      	cbz	r2, 8013caa <_strtod_l+0xe2>
 8013c9a:	2135      	movs	r1, #53	; 0x35
 8013c9c:	a81e      	add	r0, sp, #120	; 0x78
 8013c9e:	f002 fe81 	bl	80169a4 <__copybits>
 8013ca2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ca4:	4648      	mov	r0, r9
 8013ca6:	f002 faed 	bl	8016284 <_Bfree>
 8013caa:	3c01      	subs	r4, #1
 8013cac:	2c04      	cmp	r4, #4
 8013cae:	d806      	bhi.n	8013cbe <_strtod_l+0xf6>
 8013cb0:	e8df f004 	tbb	[pc, r4]
 8013cb4:	1714030a 	.word	0x1714030a
 8013cb8:	0a          	.byte	0x0a
 8013cb9:	00          	.byte	0x00
 8013cba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013cbe:	0730      	lsls	r0, r6, #28
 8013cc0:	d5c1      	bpl.n	8013c46 <_strtod_l+0x7e>
 8013cc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013cc6:	e7be      	b.n	8013c46 <_strtod_l+0x7e>
 8013cc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013ccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013cce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013cd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013cd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013cda:	e7f0      	b.n	8013cbe <_strtod_l+0xf6>
 8013cdc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013e50 <_strtod_l+0x288>
 8013ce0:	e7ed      	b.n	8013cbe <_strtod_l+0xf6>
 8013ce2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013ce6:	f04f 3aff 	mov.w	sl, #4294967295
 8013cea:	e7e8      	b.n	8013cbe <_strtod_l+0xf6>
 8013cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cee:	1c5a      	adds	r2, r3, #1
 8013cf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cf2:	785b      	ldrb	r3, [r3, #1]
 8013cf4:	2b30      	cmp	r3, #48	; 0x30
 8013cf6:	d0f9      	beq.n	8013cec <_strtod_l+0x124>
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d0a4      	beq.n	8013c46 <_strtod_l+0x7e>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	2500      	movs	r5, #0
 8013d00:	9306      	str	r3, [sp, #24]
 8013d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d04:	9308      	str	r3, [sp, #32]
 8013d06:	9507      	str	r5, [sp, #28]
 8013d08:	9505      	str	r5, [sp, #20]
 8013d0a:	220a      	movs	r2, #10
 8013d0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013d0e:	7807      	ldrb	r7, [r0, #0]
 8013d10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013d14:	b2d9      	uxtb	r1, r3
 8013d16:	2909      	cmp	r1, #9
 8013d18:	d929      	bls.n	8013d6e <_strtod_l+0x1a6>
 8013d1a:	4622      	mov	r2, r4
 8013d1c:	f8d8 1000 	ldr.w	r1, [r8]
 8013d20:	f003 fd50 	bl	80177c4 <strncmp>
 8013d24:	2800      	cmp	r0, #0
 8013d26:	d031      	beq.n	8013d8c <_strtod_l+0x1c4>
 8013d28:	2000      	movs	r0, #0
 8013d2a:	9c05      	ldr	r4, [sp, #20]
 8013d2c:	9004      	str	r0, [sp, #16]
 8013d2e:	463b      	mov	r3, r7
 8013d30:	4602      	mov	r2, r0
 8013d32:	2b65      	cmp	r3, #101	; 0x65
 8013d34:	d001      	beq.n	8013d3a <_strtod_l+0x172>
 8013d36:	2b45      	cmp	r3, #69	; 0x45
 8013d38:	d114      	bne.n	8013d64 <_strtod_l+0x19c>
 8013d3a:	b924      	cbnz	r4, 8013d46 <_strtod_l+0x17e>
 8013d3c:	b910      	cbnz	r0, 8013d44 <_strtod_l+0x17c>
 8013d3e:	9b06      	ldr	r3, [sp, #24]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d09e      	beq.n	8013c82 <_strtod_l+0xba>
 8013d44:	2400      	movs	r4, #0
 8013d46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013d48:	1c73      	adds	r3, r6, #1
 8013d4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d4c:	7873      	ldrb	r3, [r6, #1]
 8013d4e:	2b2b      	cmp	r3, #43	; 0x2b
 8013d50:	d078      	beq.n	8013e44 <_strtod_l+0x27c>
 8013d52:	2b2d      	cmp	r3, #45	; 0x2d
 8013d54:	d070      	beq.n	8013e38 <_strtod_l+0x270>
 8013d56:	f04f 0c00 	mov.w	ip, #0
 8013d5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013d5e:	2f09      	cmp	r7, #9
 8013d60:	d97c      	bls.n	8013e5c <_strtod_l+0x294>
 8013d62:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d64:	f04f 0e00 	mov.w	lr, #0
 8013d68:	e09a      	b.n	8013ea0 <_strtod_l+0x2d8>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e7c7      	b.n	8013cfe <_strtod_l+0x136>
 8013d6e:	9905      	ldr	r1, [sp, #20]
 8013d70:	2908      	cmp	r1, #8
 8013d72:	bfdd      	ittte	le
 8013d74:	9907      	ldrle	r1, [sp, #28]
 8013d76:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d7a:	9307      	strle	r3, [sp, #28]
 8013d7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013d80:	9b05      	ldr	r3, [sp, #20]
 8013d82:	3001      	adds	r0, #1
 8013d84:	3301      	adds	r3, #1
 8013d86:	9305      	str	r3, [sp, #20]
 8013d88:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d8a:	e7bf      	b.n	8013d0c <_strtod_l+0x144>
 8013d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d8e:	191a      	adds	r2, r3, r4
 8013d90:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d92:	9a05      	ldr	r2, [sp, #20]
 8013d94:	5d1b      	ldrb	r3, [r3, r4]
 8013d96:	2a00      	cmp	r2, #0
 8013d98:	d037      	beq.n	8013e0a <_strtod_l+0x242>
 8013d9a:	9c05      	ldr	r4, [sp, #20]
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013da2:	2909      	cmp	r1, #9
 8013da4:	d913      	bls.n	8013dce <_strtod_l+0x206>
 8013da6:	2101      	movs	r1, #1
 8013da8:	9104      	str	r1, [sp, #16]
 8013daa:	e7c2      	b.n	8013d32 <_strtod_l+0x16a>
 8013dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dae:	1c5a      	adds	r2, r3, #1
 8013db0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013db2:	785b      	ldrb	r3, [r3, #1]
 8013db4:	3001      	adds	r0, #1
 8013db6:	2b30      	cmp	r3, #48	; 0x30
 8013db8:	d0f8      	beq.n	8013dac <_strtod_l+0x1e4>
 8013dba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013dbe:	2a08      	cmp	r2, #8
 8013dc0:	f200 84e4 	bhi.w	801478c <_strtod_l+0xbc4>
 8013dc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013dc6:	9208      	str	r2, [sp, #32]
 8013dc8:	4602      	mov	r2, r0
 8013dca:	2000      	movs	r0, #0
 8013dcc:	4604      	mov	r4, r0
 8013dce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013dd2:	f100 0101 	add.w	r1, r0, #1
 8013dd6:	d012      	beq.n	8013dfe <_strtod_l+0x236>
 8013dd8:	440a      	add	r2, r1
 8013dda:	eb00 0c04 	add.w	ip, r0, r4
 8013dde:	4621      	mov	r1, r4
 8013de0:	270a      	movs	r7, #10
 8013de2:	458c      	cmp	ip, r1
 8013de4:	d113      	bne.n	8013e0e <_strtod_l+0x246>
 8013de6:	1821      	adds	r1, r4, r0
 8013de8:	2908      	cmp	r1, #8
 8013dea:	f104 0401 	add.w	r4, r4, #1
 8013dee:	4404      	add	r4, r0
 8013df0:	dc19      	bgt.n	8013e26 <_strtod_l+0x25e>
 8013df2:	9b07      	ldr	r3, [sp, #28]
 8013df4:	210a      	movs	r1, #10
 8013df6:	fb01 e303 	mla	r3, r1, r3, lr
 8013dfa:	9307      	str	r3, [sp, #28]
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e00:	1c58      	adds	r0, r3, #1
 8013e02:	901b      	str	r0, [sp, #108]	; 0x6c
 8013e04:	785b      	ldrb	r3, [r3, #1]
 8013e06:	4608      	mov	r0, r1
 8013e08:	e7c9      	b.n	8013d9e <_strtod_l+0x1d6>
 8013e0a:	9805      	ldr	r0, [sp, #20]
 8013e0c:	e7d3      	b.n	8013db6 <_strtod_l+0x1ee>
 8013e0e:	2908      	cmp	r1, #8
 8013e10:	f101 0101 	add.w	r1, r1, #1
 8013e14:	dc03      	bgt.n	8013e1e <_strtod_l+0x256>
 8013e16:	9b07      	ldr	r3, [sp, #28]
 8013e18:	437b      	muls	r3, r7
 8013e1a:	9307      	str	r3, [sp, #28]
 8013e1c:	e7e1      	b.n	8013de2 <_strtod_l+0x21a>
 8013e1e:	2910      	cmp	r1, #16
 8013e20:	bfd8      	it	le
 8013e22:	437d      	mulle	r5, r7
 8013e24:	e7dd      	b.n	8013de2 <_strtod_l+0x21a>
 8013e26:	2c10      	cmp	r4, #16
 8013e28:	bfdc      	itt	le
 8013e2a:	210a      	movle	r1, #10
 8013e2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013e30:	e7e4      	b.n	8013dfc <_strtod_l+0x234>
 8013e32:	2301      	movs	r3, #1
 8013e34:	9304      	str	r3, [sp, #16]
 8013e36:	e781      	b.n	8013d3c <_strtod_l+0x174>
 8013e38:	f04f 0c01 	mov.w	ip, #1
 8013e3c:	1cb3      	adds	r3, r6, #2
 8013e3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e40:	78b3      	ldrb	r3, [r6, #2]
 8013e42:	e78a      	b.n	8013d5a <_strtod_l+0x192>
 8013e44:	f04f 0c00 	mov.w	ip, #0
 8013e48:	e7f8      	b.n	8013e3c <_strtod_l+0x274>
 8013e4a:	bf00      	nop
 8013e4c:	0801829c 	.word	0x0801829c
 8013e50:	7ff00000 	.word	0x7ff00000
 8013e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e56:	1c5f      	adds	r7, r3, #1
 8013e58:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e5a:	785b      	ldrb	r3, [r3, #1]
 8013e5c:	2b30      	cmp	r3, #48	; 0x30
 8013e5e:	d0f9      	beq.n	8013e54 <_strtod_l+0x28c>
 8013e60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013e64:	2f08      	cmp	r7, #8
 8013e66:	f63f af7d 	bhi.w	8013d64 <_strtod_l+0x19c>
 8013e6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e70:	930a      	str	r3, [sp, #40]	; 0x28
 8013e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e74:	1c5f      	adds	r7, r3, #1
 8013e76:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e78:	785b      	ldrb	r3, [r3, #1]
 8013e7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013e7e:	f1b8 0f09 	cmp.w	r8, #9
 8013e82:	d937      	bls.n	8013ef4 <_strtod_l+0x32c>
 8013e84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e86:	1a7f      	subs	r7, r7, r1
 8013e88:	2f08      	cmp	r7, #8
 8013e8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e8e:	dc37      	bgt.n	8013f00 <_strtod_l+0x338>
 8013e90:	45be      	cmp	lr, r7
 8013e92:	bfa8      	it	ge
 8013e94:	46be      	movge	lr, r7
 8013e96:	f1bc 0f00 	cmp.w	ip, #0
 8013e9a:	d001      	beq.n	8013ea0 <_strtod_l+0x2d8>
 8013e9c:	f1ce 0e00 	rsb	lr, lr, #0
 8013ea0:	2c00      	cmp	r4, #0
 8013ea2:	d151      	bne.n	8013f48 <_strtod_l+0x380>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	f47f aece 	bne.w	8013c46 <_strtod_l+0x7e>
 8013eaa:	9a06      	ldr	r2, [sp, #24]
 8013eac:	2a00      	cmp	r2, #0
 8013eae:	f47f aeca 	bne.w	8013c46 <_strtod_l+0x7e>
 8013eb2:	9a04      	ldr	r2, [sp, #16]
 8013eb4:	2a00      	cmp	r2, #0
 8013eb6:	f47f aee4 	bne.w	8013c82 <_strtod_l+0xba>
 8013eba:	2b4e      	cmp	r3, #78	; 0x4e
 8013ebc:	d027      	beq.n	8013f0e <_strtod_l+0x346>
 8013ebe:	dc21      	bgt.n	8013f04 <_strtod_l+0x33c>
 8013ec0:	2b49      	cmp	r3, #73	; 0x49
 8013ec2:	f47f aede 	bne.w	8013c82 <_strtod_l+0xba>
 8013ec6:	49a0      	ldr	r1, [pc, #640]	; (8014148 <_strtod_l+0x580>)
 8013ec8:	a81b      	add	r0, sp, #108	; 0x6c
 8013eca:	f002 f851 	bl	8015f70 <__match>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	f43f aed7 	beq.w	8013c82 <_strtod_l+0xba>
 8013ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ed6:	499d      	ldr	r1, [pc, #628]	; (801414c <_strtod_l+0x584>)
 8013ed8:	3b01      	subs	r3, #1
 8013eda:	a81b      	add	r0, sp, #108	; 0x6c
 8013edc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ede:	f002 f847 	bl	8015f70 <__match>
 8013ee2:	b910      	cbnz	r0, 8013eea <_strtod_l+0x322>
 8013ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	931b      	str	r3, [sp, #108]	; 0x6c
 8013eea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014160 <_strtod_l+0x598>
 8013eee:	f04f 0a00 	mov.w	sl, #0
 8013ef2:	e6a8      	b.n	8013c46 <_strtod_l+0x7e>
 8013ef4:	210a      	movs	r1, #10
 8013ef6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013efa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013efe:	e7b8      	b.n	8013e72 <_strtod_l+0x2aa>
 8013f00:	46be      	mov	lr, r7
 8013f02:	e7c8      	b.n	8013e96 <_strtod_l+0x2ce>
 8013f04:	2b69      	cmp	r3, #105	; 0x69
 8013f06:	d0de      	beq.n	8013ec6 <_strtod_l+0x2fe>
 8013f08:	2b6e      	cmp	r3, #110	; 0x6e
 8013f0a:	f47f aeba 	bne.w	8013c82 <_strtod_l+0xba>
 8013f0e:	4990      	ldr	r1, [pc, #576]	; (8014150 <_strtod_l+0x588>)
 8013f10:	a81b      	add	r0, sp, #108	; 0x6c
 8013f12:	f002 f82d 	bl	8015f70 <__match>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	f43f aeb3 	beq.w	8013c82 <_strtod_l+0xba>
 8013f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	2b28      	cmp	r3, #40	; 0x28
 8013f22:	d10e      	bne.n	8013f42 <_strtod_l+0x37a>
 8013f24:	aa1e      	add	r2, sp, #120	; 0x78
 8013f26:	498b      	ldr	r1, [pc, #556]	; (8014154 <_strtod_l+0x58c>)
 8013f28:	a81b      	add	r0, sp, #108	; 0x6c
 8013f2a:	f002 f835 	bl	8015f98 <__hexnan>
 8013f2e:	2805      	cmp	r0, #5
 8013f30:	d107      	bne.n	8013f42 <_strtod_l+0x37a>
 8013f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013f38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013f3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013f40:	e681      	b.n	8013c46 <_strtod_l+0x7e>
 8013f42:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014168 <_strtod_l+0x5a0>
 8013f46:	e7d2      	b.n	8013eee <_strtod_l+0x326>
 8013f48:	ebae 0302 	sub.w	r3, lr, r2
 8013f4c:	9306      	str	r3, [sp, #24]
 8013f4e:	9b05      	ldr	r3, [sp, #20]
 8013f50:	9807      	ldr	r0, [sp, #28]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	bf08      	it	eq
 8013f56:	4623      	moveq	r3, r4
 8013f58:	2c10      	cmp	r4, #16
 8013f5a:	9305      	str	r3, [sp, #20]
 8013f5c:	46a0      	mov	r8, r4
 8013f5e:	bfa8      	it	ge
 8013f60:	f04f 0810 	movge.w	r8, #16
 8013f64:	f7ec fae6 	bl	8000534 <__aeabi_ui2d>
 8013f68:	2c09      	cmp	r4, #9
 8013f6a:	4682      	mov	sl, r0
 8013f6c:	468b      	mov	fp, r1
 8013f6e:	dc13      	bgt.n	8013f98 <_strtod_l+0x3d0>
 8013f70:	9b06      	ldr	r3, [sp, #24]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	f43f ae67 	beq.w	8013c46 <_strtod_l+0x7e>
 8013f78:	9b06      	ldr	r3, [sp, #24]
 8013f7a:	dd7a      	ble.n	8014072 <_strtod_l+0x4aa>
 8013f7c:	2b16      	cmp	r3, #22
 8013f7e:	dc61      	bgt.n	8014044 <_strtod_l+0x47c>
 8013f80:	4a75      	ldr	r2, [pc, #468]	; (8014158 <_strtod_l+0x590>)
 8013f82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013f86:	e9de 0100 	ldrd	r0, r1, [lr]
 8013f8a:	4652      	mov	r2, sl
 8013f8c:	465b      	mov	r3, fp
 8013f8e:	f7ec fb4b 	bl	8000628 <__aeabi_dmul>
 8013f92:	4682      	mov	sl, r0
 8013f94:	468b      	mov	fp, r1
 8013f96:	e656      	b.n	8013c46 <_strtod_l+0x7e>
 8013f98:	4b6f      	ldr	r3, [pc, #444]	; (8014158 <_strtod_l+0x590>)
 8013f9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013fa2:	f7ec fb41 	bl	8000628 <__aeabi_dmul>
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	4628      	mov	r0, r5
 8013faa:	460f      	mov	r7, r1
 8013fac:	f7ec fac2 	bl	8000534 <__aeabi_ui2d>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	f7ec f980 	bl	80002bc <__adddf3>
 8013fbc:	2c0f      	cmp	r4, #15
 8013fbe:	4682      	mov	sl, r0
 8013fc0:	468b      	mov	fp, r1
 8013fc2:	ddd5      	ble.n	8013f70 <_strtod_l+0x3a8>
 8013fc4:	9b06      	ldr	r3, [sp, #24]
 8013fc6:	eba4 0808 	sub.w	r8, r4, r8
 8013fca:	4498      	add	r8, r3
 8013fcc:	f1b8 0f00 	cmp.w	r8, #0
 8013fd0:	f340 8096 	ble.w	8014100 <_strtod_l+0x538>
 8013fd4:	f018 030f 	ands.w	r3, r8, #15
 8013fd8:	d00a      	beq.n	8013ff0 <_strtod_l+0x428>
 8013fda:	495f      	ldr	r1, [pc, #380]	; (8014158 <_strtod_l+0x590>)
 8013fdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013fe0:	4652      	mov	r2, sl
 8013fe2:	465b      	mov	r3, fp
 8013fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fe8:	f7ec fb1e 	bl	8000628 <__aeabi_dmul>
 8013fec:	4682      	mov	sl, r0
 8013fee:	468b      	mov	fp, r1
 8013ff0:	f038 080f 	bics.w	r8, r8, #15
 8013ff4:	d073      	beq.n	80140de <_strtod_l+0x516>
 8013ff6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013ffa:	dd47      	ble.n	801408c <_strtod_l+0x4c4>
 8013ffc:	2400      	movs	r4, #0
 8013ffe:	46a0      	mov	r8, r4
 8014000:	9407      	str	r4, [sp, #28]
 8014002:	9405      	str	r4, [sp, #20]
 8014004:	2322      	movs	r3, #34	; 0x22
 8014006:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014160 <_strtod_l+0x598>
 801400a:	f8c9 3000 	str.w	r3, [r9]
 801400e:	f04f 0a00 	mov.w	sl, #0
 8014012:	9b07      	ldr	r3, [sp, #28]
 8014014:	2b00      	cmp	r3, #0
 8014016:	f43f ae16 	beq.w	8013c46 <_strtod_l+0x7e>
 801401a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801401c:	4648      	mov	r0, r9
 801401e:	f002 f931 	bl	8016284 <_Bfree>
 8014022:	9905      	ldr	r1, [sp, #20]
 8014024:	4648      	mov	r0, r9
 8014026:	f002 f92d 	bl	8016284 <_Bfree>
 801402a:	4641      	mov	r1, r8
 801402c:	4648      	mov	r0, r9
 801402e:	f002 f929 	bl	8016284 <_Bfree>
 8014032:	9907      	ldr	r1, [sp, #28]
 8014034:	4648      	mov	r0, r9
 8014036:	f002 f925 	bl	8016284 <_Bfree>
 801403a:	4621      	mov	r1, r4
 801403c:	4648      	mov	r0, r9
 801403e:	f002 f921 	bl	8016284 <_Bfree>
 8014042:	e600      	b.n	8013c46 <_strtod_l+0x7e>
 8014044:	9a06      	ldr	r2, [sp, #24]
 8014046:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801404a:	4293      	cmp	r3, r2
 801404c:	dbba      	blt.n	8013fc4 <_strtod_l+0x3fc>
 801404e:	4d42      	ldr	r5, [pc, #264]	; (8014158 <_strtod_l+0x590>)
 8014050:	f1c4 040f 	rsb	r4, r4, #15
 8014054:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014058:	4652      	mov	r2, sl
 801405a:	465b      	mov	r3, fp
 801405c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014060:	f7ec fae2 	bl	8000628 <__aeabi_dmul>
 8014064:	9b06      	ldr	r3, [sp, #24]
 8014066:	1b1c      	subs	r4, r3, r4
 8014068:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801406c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014070:	e78d      	b.n	8013f8e <_strtod_l+0x3c6>
 8014072:	f113 0f16 	cmn.w	r3, #22
 8014076:	dba5      	blt.n	8013fc4 <_strtod_l+0x3fc>
 8014078:	4a37      	ldr	r2, [pc, #220]	; (8014158 <_strtod_l+0x590>)
 801407a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801407e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014082:	4650      	mov	r0, sl
 8014084:	4659      	mov	r1, fp
 8014086:	f7ec fbf9 	bl	800087c <__aeabi_ddiv>
 801408a:	e782      	b.n	8013f92 <_strtod_l+0x3ca>
 801408c:	2300      	movs	r3, #0
 801408e:	4e33      	ldr	r6, [pc, #204]	; (801415c <_strtod_l+0x594>)
 8014090:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014094:	4650      	mov	r0, sl
 8014096:	4659      	mov	r1, fp
 8014098:	461d      	mov	r5, r3
 801409a:	f1b8 0f01 	cmp.w	r8, #1
 801409e:	dc21      	bgt.n	80140e4 <_strtod_l+0x51c>
 80140a0:	b10b      	cbz	r3, 80140a6 <_strtod_l+0x4de>
 80140a2:	4682      	mov	sl, r0
 80140a4:	468b      	mov	fp, r1
 80140a6:	4b2d      	ldr	r3, [pc, #180]	; (801415c <_strtod_l+0x594>)
 80140a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80140ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80140b0:	4652      	mov	r2, sl
 80140b2:	465b      	mov	r3, fp
 80140b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80140b8:	f7ec fab6 	bl	8000628 <__aeabi_dmul>
 80140bc:	4b28      	ldr	r3, [pc, #160]	; (8014160 <_strtod_l+0x598>)
 80140be:	460a      	mov	r2, r1
 80140c0:	400b      	ands	r3, r1
 80140c2:	4928      	ldr	r1, [pc, #160]	; (8014164 <_strtod_l+0x59c>)
 80140c4:	428b      	cmp	r3, r1
 80140c6:	4682      	mov	sl, r0
 80140c8:	d898      	bhi.n	8013ffc <_strtod_l+0x434>
 80140ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140ce:	428b      	cmp	r3, r1
 80140d0:	bf86      	itte	hi
 80140d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801416c <_strtod_l+0x5a4>
 80140d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80140da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80140de:	2300      	movs	r3, #0
 80140e0:	9304      	str	r3, [sp, #16]
 80140e2:	e077      	b.n	80141d4 <_strtod_l+0x60c>
 80140e4:	f018 0f01 	tst.w	r8, #1
 80140e8:	d006      	beq.n	80140f8 <_strtod_l+0x530>
 80140ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80140ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f2:	f7ec fa99 	bl	8000628 <__aeabi_dmul>
 80140f6:	2301      	movs	r3, #1
 80140f8:	3501      	adds	r5, #1
 80140fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140fe:	e7cc      	b.n	801409a <_strtod_l+0x4d2>
 8014100:	d0ed      	beq.n	80140de <_strtod_l+0x516>
 8014102:	f1c8 0800 	rsb	r8, r8, #0
 8014106:	f018 020f 	ands.w	r2, r8, #15
 801410a:	d00a      	beq.n	8014122 <_strtod_l+0x55a>
 801410c:	4b12      	ldr	r3, [pc, #72]	; (8014158 <_strtod_l+0x590>)
 801410e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014112:	4650      	mov	r0, sl
 8014114:	4659      	mov	r1, fp
 8014116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411a:	f7ec fbaf 	bl	800087c <__aeabi_ddiv>
 801411e:	4682      	mov	sl, r0
 8014120:	468b      	mov	fp, r1
 8014122:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014126:	d0da      	beq.n	80140de <_strtod_l+0x516>
 8014128:	f1b8 0f1f 	cmp.w	r8, #31
 801412c:	dd20      	ble.n	8014170 <_strtod_l+0x5a8>
 801412e:	2400      	movs	r4, #0
 8014130:	46a0      	mov	r8, r4
 8014132:	9407      	str	r4, [sp, #28]
 8014134:	9405      	str	r4, [sp, #20]
 8014136:	2322      	movs	r3, #34	; 0x22
 8014138:	f04f 0a00 	mov.w	sl, #0
 801413c:	f04f 0b00 	mov.w	fp, #0
 8014140:	f8c9 3000 	str.w	r3, [r9]
 8014144:	e765      	b.n	8014012 <_strtod_l+0x44a>
 8014146:	bf00      	nop
 8014148:	08018269 	.word	0x08018269
 801414c:	080182f3 	.word	0x080182f3
 8014150:	08018271 	.word	0x08018271
 8014154:	080182b0 	.word	0x080182b0
 8014158:	08018398 	.word	0x08018398
 801415c:	08018370 	.word	0x08018370
 8014160:	7ff00000 	.word	0x7ff00000
 8014164:	7ca00000 	.word	0x7ca00000
 8014168:	fff80000 	.word	0xfff80000
 801416c:	7fefffff 	.word	0x7fefffff
 8014170:	f018 0310 	ands.w	r3, r8, #16
 8014174:	bf18      	it	ne
 8014176:	236a      	movne	r3, #106	; 0x6a
 8014178:	4da0      	ldr	r5, [pc, #640]	; (80143fc <_strtod_l+0x834>)
 801417a:	9304      	str	r3, [sp, #16]
 801417c:	4650      	mov	r0, sl
 801417e:	4659      	mov	r1, fp
 8014180:	2300      	movs	r3, #0
 8014182:	f1b8 0f00 	cmp.w	r8, #0
 8014186:	f300 810a 	bgt.w	801439e <_strtod_l+0x7d6>
 801418a:	b10b      	cbz	r3, 8014190 <_strtod_l+0x5c8>
 801418c:	4682      	mov	sl, r0
 801418e:	468b      	mov	fp, r1
 8014190:	9b04      	ldr	r3, [sp, #16]
 8014192:	b1bb      	cbz	r3, 80141c4 <_strtod_l+0x5fc>
 8014194:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014198:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801419c:	2b00      	cmp	r3, #0
 801419e:	4659      	mov	r1, fp
 80141a0:	dd10      	ble.n	80141c4 <_strtod_l+0x5fc>
 80141a2:	2b1f      	cmp	r3, #31
 80141a4:	f340 8107 	ble.w	80143b6 <_strtod_l+0x7ee>
 80141a8:	2b34      	cmp	r3, #52	; 0x34
 80141aa:	bfde      	ittt	le
 80141ac:	3b20      	suble	r3, #32
 80141ae:	f04f 32ff 	movle.w	r2, #4294967295
 80141b2:	fa02 f303 	lslle.w	r3, r2, r3
 80141b6:	f04f 0a00 	mov.w	sl, #0
 80141ba:	bfcc      	ite	gt
 80141bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80141c0:	ea03 0b01 	andle.w	fp, r3, r1
 80141c4:	2200      	movs	r2, #0
 80141c6:	2300      	movs	r3, #0
 80141c8:	4650      	mov	r0, sl
 80141ca:	4659      	mov	r1, fp
 80141cc:	f7ec fc94 	bl	8000af8 <__aeabi_dcmpeq>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d1ac      	bne.n	801412e <_strtod_l+0x566>
 80141d4:	9b07      	ldr	r3, [sp, #28]
 80141d6:	9300      	str	r3, [sp, #0]
 80141d8:	9a05      	ldr	r2, [sp, #20]
 80141da:	9908      	ldr	r1, [sp, #32]
 80141dc:	4623      	mov	r3, r4
 80141de:	4648      	mov	r0, r9
 80141e0:	f002 f8a2 	bl	8016328 <__s2b>
 80141e4:	9007      	str	r0, [sp, #28]
 80141e6:	2800      	cmp	r0, #0
 80141e8:	f43f af08 	beq.w	8013ffc <_strtod_l+0x434>
 80141ec:	9a06      	ldr	r2, [sp, #24]
 80141ee:	9b06      	ldr	r3, [sp, #24]
 80141f0:	2a00      	cmp	r2, #0
 80141f2:	f1c3 0300 	rsb	r3, r3, #0
 80141f6:	bfa8      	it	ge
 80141f8:	2300      	movge	r3, #0
 80141fa:	930e      	str	r3, [sp, #56]	; 0x38
 80141fc:	2400      	movs	r4, #0
 80141fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014202:	9316      	str	r3, [sp, #88]	; 0x58
 8014204:	46a0      	mov	r8, r4
 8014206:	9b07      	ldr	r3, [sp, #28]
 8014208:	4648      	mov	r0, r9
 801420a:	6859      	ldr	r1, [r3, #4]
 801420c:	f002 f806 	bl	801621c <_Balloc>
 8014210:	9005      	str	r0, [sp, #20]
 8014212:	2800      	cmp	r0, #0
 8014214:	f43f aef6 	beq.w	8014004 <_strtod_l+0x43c>
 8014218:	9b07      	ldr	r3, [sp, #28]
 801421a:	691a      	ldr	r2, [r3, #16]
 801421c:	3202      	adds	r2, #2
 801421e:	f103 010c 	add.w	r1, r3, #12
 8014222:	0092      	lsls	r2, r2, #2
 8014224:	300c      	adds	r0, #12
 8014226:	f7fe fcff 	bl	8012c28 <memcpy>
 801422a:	aa1e      	add	r2, sp, #120	; 0x78
 801422c:	a91d      	add	r1, sp, #116	; 0x74
 801422e:	ec4b ab10 	vmov	d0, sl, fp
 8014232:	4648      	mov	r0, r9
 8014234:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014238:	f002 fb32 	bl	80168a0 <__d2b>
 801423c:	901c      	str	r0, [sp, #112]	; 0x70
 801423e:	2800      	cmp	r0, #0
 8014240:	f43f aee0 	beq.w	8014004 <_strtod_l+0x43c>
 8014244:	2101      	movs	r1, #1
 8014246:	4648      	mov	r0, r9
 8014248:	f002 f8fa 	bl	8016440 <__i2b>
 801424c:	4680      	mov	r8, r0
 801424e:	2800      	cmp	r0, #0
 8014250:	f43f aed8 	beq.w	8014004 <_strtod_l+0x43c>
 8014254:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014256:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014258:	2e00      	cmp	r6, #0
 801425a:	bfab      	itete	ge
 801425c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801425e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014260:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014262:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014264:	bfac      	ite	ge
 8014266:	18f7      	addge	r7, r6, r3
 8014268:	1b9d      	sublt	r5, r3, r6
 801426a:	9b04      	ldr	r3, [sp, #16]
 801426c:	1af6      	subs	r6, r6, r3
 801426e:	4416      	add	r6, r2
 8014270:	4b63      	ldr	r3, [pc, #396]	; (8014400 <_strtod_l+0x838>)
 8014272:	3e01      	subs	r6, #1
 8014274:	429e      	cmp	r6, r3
 8014276:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801427a:	f280 80af 	bge.w	80143dc <_strtod_l+0x814>
 801427e:	1b9b      	subs	r3, r3, r6
 8014280:	2b1f      	cmp	r3, #31
 8014282:	eba2 0203 	sub.w	r2, r2, r3
 8014286:	f04f 0101 	mov.w	r1, #1
 801428a:	f300 809b 	bgt.w	80143c4 <_strtod_l+0x7fc>
 801428e:	fa01 f303 	lsl.w	r3, r1, r3
 8014292:	930f      	str	r3, [sp, #60]	; 0x3c
 8014294:	2300      	movs	r3, #0
 8014296:	930a      	str	r3, [sp, #40]	; 0x28
 8014298:	18be      	adds	r6, r7, r2
 801429a:	9b04      	ldr	r3, [sp, #16]
 801429c:	42b7      	cmp	r7, r6
 801429e:	4415      	add	r5, r2
 80142a0:	441d      	add	r5, r3
 80142a2:	463b      	mov	r3, r7
 80142a4:	bfa8      	it	ge
 80142a6:	4633      	movge	r3, r6
 80142a8:	42ab      	cmp	r3, r5
 80142aa:	bfa8      	it	ge
 80142ac:	462b      	movge	r3, r5
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	bfc2      	ittt	gt
 80142b2:	1af6      	subgt	r6, r6, r3
 80142b4:	1aed      	subgt	r5, r5, r3
 80142b6:	1aff      	subgt	r7, r7, r3
 80142b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142ba:	b1bb      	cbz	r3, 80142ec <_strtod_l+0x724>
 80142bc:	4641      	mov	r1, r8
 80142be:	461a      	mov	r2, r3
 80142c0:	4648      	mov	r0, r9
 80142c2:	f002 f95d 	bl	8016580 <__pow5mult>
 80142c6:	4680      	mov	r8, r0
 80142c8:	2800      	cmp	r0, #0
 80142ca:	f43f ae9b 	beq.w	8014004 <_strtod_l+0x43c>
 80142ce:	4601      	mov	r1, r0
 80142d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142d2:	4648      	mov	r0, r9
 80142d4:	f002 f8bd 	bl	8016452 <__multiply>
 80142d8:	900c      	str	r0, [sp, #48]	; 0x30
 80142da:	2800      	cmp	r0, #0
 80142dc:	f43f ae92 	beq.w	8014004 <_strtod_l+0x43c>
 80142e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142e2:	4648      	mov	r0, r9
 80142e4:	f001 ffce 	bl	8016284 <_Bfree>
 80142e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ea:	931c      	str	r3, [sp, #112]	; 0x70
 80142ec:	2e00      	cmp	r6, #0
 80142ee:	dc7a      	bgt.n	80143e6 <_strtod_l+0x81e>
 80142f0:	9b06      	ldr	r3, [sp, #24]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	dd08      	ble.n	8014308 <_strtod_l+0x740>
 80142f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142f8:	9905      	ldr	r1, [sp, #20]
 80142fa:	4648      	mov	r0, r9
 80142fc:	f002 f940 	bl	8016580 <__pow5mult>
 8014300:	9005      	str	r0, [sp, #20]
 8014302:	2800      	cmp	r0, #0
 8014304:	f43f ae7e 	beq.w	8014004 <_strtod_l+0x43c>
 8014308:	2d00      	cmp	r5, #0
 801430a:	dd08      	ble.n	801431e <_strtod_l+0x756>
 801430c:	462a      	mov	r2, r5
 801430e:	9905      	ldr	r1, [sp, #20]
 8014310:	4648      	mov	r0, r9
 8014312:	f002 f983 	bl	801661c <__lshift>
 8014316:	9005      	str	r0, [sp, #20]
 8014318:	2800      	cmp	r0, #0
 801431a:	f43f ae73 	beq.w	8014004 <_strtod_l+0x43c>
 801431e:	2f00      	cmp	r7, #0
 8014320:	dd08      	ble.n	8014334 <_strtod_l+0x76c>
 8014322:	4641      	mov	r1, r8
 8014324:	463a      	mov	r2, r7
 8014326:	4648      	mov	r0, r9
 8014328:	f002 f978 	bl	801661c <__lshift>
 801432c:	4680      	mov	r8, r0
 801432e:	2800      	cmp	r0, #0
 8014330:	f43f ae68 	beq.w	8014004 <_strtod_l+0x43c>
 8014334:	9a05      	ldr	r2, [sp, #20]
 8014336:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014338:	4648      	mov	r0, r9
 801433a:	f002 f9dd 	bl	80166f8 <__mdiff>
 801433e:	4604      	mov	r4, r0
 8014340:	2800      	cmp	r0, #0
 8014342:	f43f ae5f 	beq.w	8014004 <_strtod_l+0x43c>
 8014346:	68c3      	ldr	r3, [r0, #12]
 8014348:	930c      	str	r3, [sp, #48]	; 0x30
 801434a:	2300      	movs	r3, #0
 801434c:	60c3      	str	r3, [r0, #12]
 801434e:	4641      	mov	r1, r8
 8014350:	f002 f9b8 	bl	80166c4 <__mcmp>
 8014354:	2800      	cmp	r0, #0
 8014356:	da55      	bge.n	8014404 <_strtod_l+0x83c>
 8014358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801435a:	b9e3      	cbnz	r3, 8014396 <_strtod_l+0x7ce>
 801435c:	f1ba 0f00 	cmp.w	sl, #0
 8014360:	d119      	bne.n	8014396 <_strtod_l+0x7ce>
 8014362:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014366:	b9b3      	cbnz	r3, 8014396 <_strtod_l+0x7ce>
 8014368:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801436c:	0d1b      	lsrs	r3, r3, #20
 801436e:	051b      	lsls	r3, r3, #20
 8014370:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014374:	d90f      	bls.n	8014396 <_strtod_l+0x7ce>
 8014376:	6963      	ldr	r3, [r4, #20]
 8014378:	b913      	cbnz	r3, 8014380 <_strtod_l+0x7b8>
 801437a:	6923      	ldr	r3, [r4, #16]
 801437c:	2b01      	cmp	r3, #1
 801437e:	dd0a      	ble.n	8014396 <_strtod_l+0x7ce>
 8014380:	4621      	mov	r1, r4
 8014382:	2201      	movs	r2, #1
 8014384:	4648      	mov	r0, r9
 8014386:	f002 f949 	bl	801661c <__lshift>
 801438a:	4641      	mov	r1, r8
 801438c:	4604      	mov	r4, r0
 801438e:	f002 f999 	bl	80166c4 <__mcmp>
 8014392:	2800      	cmp	r0, #0
 8014394:	dc67      	bgt.n	8014466 <_strtod_l+0x89e>
 8014396:	9b04      	ldr	r3, [sp, #16]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d171      	bne.n	8014480 <_strtod_l+0x8b8>
 801439c:	e63d      	b.n	801401a <_strtod_l+0x452>
 801439e:	f018 0f01 	tst.w	r8, #1
 80143a2:	d004      	beq.n	80143ae <_strtod_l+0x7e6>
 80143a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80143a8:	f7ec f93e 	bl	8000628 <__aeabi_dmul>
 80143ac:	2301      	movs	r3, #1
 80143ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80143b2:	3508      	adds	r5, #8
 80143b4:	e6e5      	b.n	8014182 <_strtod_l+0x5ba>
 80143b6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ba:	fa02 f303 	lsl.w	r3, r2, r3
 80143be:	ea03 0a0a 	and.w	sl, r3, sl
 80143c2:	e6ff      	b.n	80141c4 <_strtod_l+0x5fc>
 80143c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80143c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80143cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80143d0:	36e2      	adds	r6, #226	; 0xe2
 80143d2:	fa01 f306 	lsl.w	r3, r1, r6
 80143d6:	930a      	str	r3, [sp, #40]	; 0x28
 80143d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80143da:	e75d      	b.n	8014298 <_strtod_l+0x6d0>
 80143dc:	2300      	movs	r3, #0
 80143de:	930a      	str	r3, [sp, #40]	; 0x28
 80143e0:	2301      	movs	r3, #1
 80143e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80143e4:	e758      	b.n	8014298 <_strtod_l+0x6d0>
 80143e6:	4632      	mov	r2, r6
 80143e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143ea:	4648      	mov	r0, r9
 80143ec:	f002 f916 	bl	801661c <__lshift>
 80143f0:	901c      	str	r0, [sp, #112]	; 0x70
 80143f2:	2800      	cmp	r0, #0
 80143f4:	f47f af7c 	bne.w	80142f0 <_strtod_l+0x728>
 80143f8:	e604      	b.n	8014004 <_strtod_l+0x43c>
 80143fa:	bf00      	nop
 80143fc:	080182c8 	.word	0x080182c8
 8014400:	fffffc02 	.word	0xfffffc02
 8014404:	465d      	mov	r5, fp
 8014406:	f040 8086 	bne.w	8014516 <_strtod_l+0x94e>
 801440a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801440c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014410:	b32a      	cbz	r2, 801445e <_strtod_l+0x896>
 8014412:	4aaf      	ldr	r2, [pc, #700]	; (80146d0 <_strtod_l+0xb08>)
 8014414:	4293      	cmp	r3, r2
 8014416:	d153      	bne.n	80144c0 <_strtod_l+0x8f8>
 8014418:	9b04      	ldr	r3, [sp, #16]
 801441a:	4650      	mov	r0, sl
 801441c:	b1d3      	cbz	r3, 8014454 <_strtod_l+0x88c>
 801441e:	4aad      	ldr	r2, [pc, #692]	; (80146d4 <_strtod_l+0xb0c>)
 8014420:	402a      	ands	r2, r5
 8014422:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014426:	f04f 31ff 	mov.w	r1, #4294967295
 801442a:	d816      	bhi.n	801445a <_strtod_l+0x892>
 801442c:	0d12      	lsrs	r2, r2, #20
 801442e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014432:	fa01 f303 	lsl.w	r3, r1, r3
 8014436:	4298      	cmp	r0, r3
 8014438:	d142      	bne.n	80144c0 <_strtod_l+0x8f8>
 801443a:	4ba7      	ldr	r3, [pc, #668]	; (80146d8 <_strtod_l+0xb10>)
 801443c:	429d      	cmp	r5, r3
 801443e:	d102      	bne.n	8014446 <_strtod_l+0x87e>
 8014440:	3001      	adds	r0, #1
 8014442:	f43f addf 	beq.w	8014004 <_strtod_l+0x43c>
 8014446:	4ba3      	ldr	r3, [pc, #652]	; (80146d4 <_strtod_l+0xb0c>)
 8014448:	402b      	ands	r3, r5
 801444a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801444e:	f04f 0a00 	mov.w	sl, #0
 8014452:	e7a0      	b.n	8014396 <_strtod_l+0x7ce>
 8014454:	f04f 33ff 	mov.w	r3, #4294967295
 8014458:	e7ed      	b.n	8014436 <_strtod_l+0x86e>
 801445a:	460b      	mov	r3, r1
 801445c:	e7eb      	b.n	8014436 <_strtod_l+0x86e>
 801445e:	bb7b      	cbnz	r3, 80144c0 <_strtod_l+0x8f8>
 8014460:	f1ba 0f00 	cmp.w	sl, #0
 8014464:	d12c      	bne.n	80144c0 <_strtod_l+0x8f8>
 8014466:	9904      	ldr	r1, [sp, #16]
 8014468:	4a9a      	ldr	r2, [pc, #616]	; (80146d4 <_strtod_l+0xb0c>)
 801446a:	465b      	mov	r3, fp
 801446c:	b1f1      	cbz	r1, 80144ac <_strtod_l+0x8e4>
 801446e:	ea02 010b 	and.w	r1, r2, fp
 8014472:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014476:	dc19      	bgt.n	80144ac <_strtod_l+0x8e4>
 8014478:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801447c:	f77f ae5b 	ble.w	8014136 <_strtod_l+0x56e>
 8014480:	4a96      	ldr	r2, [pc, #600]	; (80146dc <_strtod_l+0xb14>)
 8014482:	2300      	movs	r3, #0
 8014484:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014488:	4650      	mov	r0, sl
 801448a:	4659      	mov	r1, fp
 801448c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014490:	f7ec f8ca 	bl	8000628 <__aeabi_dmul>
 8014494:	4682      	mov	sl, r0
 8014496:	468b      	mov	fp, r1
 8014498:	2900      	cmp	r1, #0
 801449a:	f47f adbe 	bne.w	801401a <_strtod_l+0x452>
 801449e:	2800      	cmp	r0, #0
 80144a0:	f47f adbb 	bne.w	801401a <_strtod_l+0x452>
 80144a4:	2322      	movs	r3, #34	; 0x22
 80144a6:	f8c9 3000 	str.w	r3, [r9]
 80144aa:	e5b6      	b.n	801401a <_strtod_l+0x452>
 80144ac:	4013      	ands	r3, r2
 80144ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80144b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80144b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80144ba:	f04f 3aff 	mov.w	sl, #4294967295
 80144be:	e76a      	b.n	8014396 <_strtod_l+0x7ce>
 80144c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144c2:	b193      	cbz	r3, 80144ea <_strtod_l+0x922>
 80144c4:	422b      	tst	r3, r5
 80144c6:	f43f af66 	beq.w	8014396 <_strtod_l+0x7ce>
 80144ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144cc:	9a04      	ldr	r2, [sp, #16]
 80144ce:	4650      	mov	r0, sl
 80144d0:	4659      	mov	r1, fp
 80144d2:	b173      	cbz	r3, 80144f2 <_strtod_l+0x92a>
 80144d4:	f7ff fb5b 	bl	8013b8e <sulp>
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144e0:	f7eb feec 	bl	80002bc <__adddf3>
 80144e4:	4682      	mov	sl, r0
 80144e6:	468b      	mov	fp, r1
 80144e8:	e755      	b.n	8014396 <_strtod_l+0x7ce>
 80144ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144ec:	ea13 0f0a 	tst.w	r3, sl
 80144f0:	e7e9      	b.n	80144c6 <_strtod_l+0x8fe>
 80144f2:	f7ff fb4c 	bl	8013b8e <sulp>
 80144f6:	4602      	mov	r2, r0
 80144f8:	460b      	mov	r3, r1
 80144fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144fe:	f7eb fedb 	bl	80002b8 <__aeabi_dsub>
 8014502:	2200      	movs	r2, #0
 8014504:	2300      	movs	r3, #0
 8014506:	4682      	mov	sl, r0
 8014508:	468b      	mov	fp, r1
 801450a:	f7ec faf5 	bl	8000af8 <__aeabi_dcmpeq>
 801450e:	2800      	cmp	r0, #0
 8014510:	f47f ae11 	bne.w	8014136 <_strtod_l+0x56e>
 8014514:	e73f      	b.n	8014396 <_strtod_l+0x7ce>
 8014516:	4641      	mov	r1, r8
 8014518:	4620      	mov	r0, r4
 801451a:	f002 fa10 	bl	801693e <__ratio>
 801451e:	ec57 6b10 	vmov	r6, r7, d0
 8014522:	2200      	movs	r2, #0
 8014524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014528:	ee10 0a10 	vmov	r0, s0
 801452c:	4639      	mov	r1, r7
 801452e:	f7ec faf7 	bl	8000b20 <__aeabi_dcmple>
 8014532:	2800      	cmp	r0, #0
 8014534:	d077      	beq.n	8014626 <_strtod_l+0xa5e>
 8014536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014538:	2b00      	cmp	r3, #0
 801453a:	d04a      	beq.n	80145d2 <_strtod_l+0xa0a>
 801453c:	4b68      	ldr	r3, [pc, #416]	; (80146e0 <_strtod_l+0xb18>)
 801453e:	2200      	movs	r2, #0
 8014540:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014544:	4f66      	ldr	r7, [pc, #408]	; (80146e0 <_strtod_l+0xb18>)
 8014546:	2600      	movs	r6, #0
 8014548:	4b62      	ldr	r3, [pc, #392]	; (80146d4 <_strtod_l+0xb0c>)
 801454a:	402b      	ands	r3, r5
 801454c:	930f      	str	r3, [sp, #60]	; 0x3c
 801454e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014550:	4b64      	ldr	r3, [pc, #400]	; (80146e4 <_strtod_l+0xb1c>)
 8014552:	429a      	cmp	r2, r3
 8014554:	f040 80ce 	bne.w	80146f4 <_strtod_l+0xb2c>
 8014558:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801455c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014560:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014564:	ec4b ab10 	vmov	d0, sl, fp
 8014568:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801456c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014570:	f002 f920 	bl	80167b4 <__ulp>
 8014574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014578:	ec53 2b10 	vmov	r2, r3, d0
 801457c:	f7ec f854 	bl	8000628 <__aeabi_dmul>
 8014580:	4652      	mov	r2, sl
 8014582:	465b      	mov	r3, fp
 8014584:	f7eb fe9a 	bl	80002bc <__adddf3>
 8014588:	460b      	mov	r3, r1
 801458a:	4952      	ldr	r1, [pc, #328]	; (80146d4 <_strtod_l+0xb0c>)
 801458c:	4a56      	ldr	r2, [pc, #344]	; (80146e8 <_strtod_l+0xb20>)
 801458e:	4019      	ands	r1, r3
 8014590:	4291      	cmp	r1, r2
 8014592:	4682      	mov	sl, r0
 8014594:	d95b      	bls.n	801464e <_strtod_l+0xa86>
 8014596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014598:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801459c:	4293      	cmp	r3, r2
 801459e:	d103      	bne.n	80145a8 <_strtod_l+0x9e0>
 80145a0:	9b08      	ldr	r3, [sp, #32]
 80145a2:	3301      	adds	r3, #1
 80145a4:	f43f ad2e 	beq.w	8014004 <_strtod_l+0x43c>
 80145a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80146d8 <_strtod_l+0xb10>
 80145ac:	f04f 3aff 	mov.w	sl, #4294967295
 80145b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80145b2:	4648      	mov	r0, r9
 80145b4:	f001 fe66 	bl	8016284 <_Bfree>
 80145b8:	9905      	ldr	r1, [sp, #20]
 80145ba:	4648      	mov	r0, r9
 80145bc:	f001 fe62 	bl	8016284 <_Bfree>
 80145c0:	4641      	mov	r1, r8
 80145c2:	4648      	mov	r0, r9
 80145c4:	f001 fe5e 	bl	8016284 <_Bfree>
 80145c8:	4621      	mov	r1, r4
 80145ca:	4648      	mov	r0, r9
 80145cc:	f001 fe5a 	bl	8016284 <_Bfree>
 80145d0:	e619      	b.n	8014206 <_strtod_l+0x63e>
 80145d2:	f1ba 0f00 	cmp.w	sl, #0
 80145d6:	d11a      	bne.n	801460e <_strtod_l+0xa46>
 80145d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145dc:	b9eb      	cbnz	r3, 801461a <_strtod_l+0xa52>
 80145de:	2200      	movs	r2, #0
 80145e0:	4b3f      	ldr	r3, [pc, #252]	; (80146e0 <_strtod_l+0xb18>)
 80145e2:	4630      	mov	r0, r6
 80145e4:	4639      	mov	r1, r7
 80145e6:	f7ec fa91 	bl	8000b0c <__aeabi_dcmplt>
 80145ea:	b9c8      	cbnz	r0, 8014620 <_strtod_l+0xa58>
 80145ec:	4630      	mov	r0, r6
 80145ee:	4639      	mov	r1, r7
 80145f0:	2200      	movs	r2, #0
 80145f2:	4b3e      	ldr	r3, [pc, #248]	; (80146ec <_strtod_l+0xb24>)
 80145f4:	f7ec f818 	bl	8000628 <__aeabi_dmul>
 80145f8:	4606      	mov	r6, r0
 80145fa:	460f      	mov	r7, r1
 80145fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014600:	9618      	str	r6, [sp, #96]	; 0x60
 8014602:	9319      	str	r3, [sp, #100]	; 0x64
 8014604:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014608:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801460c:	e79c      	b.n	8014548 <_strtod_l+0x980>
 801460e:	f1ba 0f01 	cmp.w	sl, #1
 8014612:	d102      	bne.n	801461a <_strtod_l+0xa52>
 8014614:	2d00      	cmp	r5, #0
 8014616:	f43f ad8e 	beq.w	8014136 <_strtod_l+0x56e>
 801461a:	2200      	movs	r2, #0
 801461c:	4b34      	ldr	r3, [pc, #208]	; (80146f0 <_strtod_l+0xb28>)
 801461e:	e78f      	b.n	8014540 <_strtod_l+0x978>
 8014620:	2600      	movs	r6, #0
 8014622:	4f32      	ldr	r7, [pc, #200]	; (80146ec <_strtod_l+0xb24>)
 8014624:	e7ea      	b.n	80145fc <_strtod_l+0xa34>
 8014626:	4b31      	ldr	r3, [pc, #196]	; (80146ec <_strtod_l+0xb24>)
 8014628:	4630      	mov	r0, r6
 801462a:	4639      	mov	r1, r7
 801462c:	2200      	movs	r2, #0
 801462e:	f7eb fffb 	bl	8000628 <__aeabi_dmul>
 8014632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014634:	4606      	mov	r6, r0
 8014636:	460f      	mov	r7, r1
 8014638:	b933      	cbnz	r3, 8014648 <_strtod_l+0xa80>
 801463a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801463e:	9010      	str	r0, [sp, #64]	; 0x40
 8014640:	9311      	str	r3, [sp, #68]	; 0x44
 8014642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014646:	e7df      	b.n	8014608 <_strtod_l+0xa40>
 8014648:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801464c:	e7f9      	b.n	8014642 <_strtod_l+0xa7a>
 801464e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014652:	9b04      	ldr	r3, [sp, #16]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1ab      	bne.n	80145b0 <_strtod_l+0x9e8>
 8014658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801465c:	0d1b      	lsrs	r3, r3, #20
 801465e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014660:	051b      	lsls	r3, r3, #20
 8014662:	429a      	cmp	r2, r3
 8014664:	465d      	mov	r5, fp
 8014666:	d1a3      	bne.n	80145b0 <_strtod_l+0x9e8>
 8014668:	4639      	mov	r1, r7
 801466a:	4630      	mov	r0, r6
 801466c:	f7ec fa8c 	bl	8000b88 <__aeabi_d2iz>
 8014670:	f7eb ff70 	bl	8000554 <__aeabi_i2d>
 8014674:	460b      	mov	r3, r1
 8014676:	4602      	mov	r2, r0
 8014678:	4639      	mov	r1, r7
 801467a:	4630      	mov	r0, r6
 801467c:	f7eb fe1c 	bl	80002b8 <__aeabi_dsub>
 8014680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014682:	4606      	mov	r6, r0
 8014684:	460f      	mov	r7, r1
 8014686:	b933      	cbnz	r3, 8014696 <_strtod_l+0xace>
 8014688:	f1ba 0f00 	cmp.w	sl, #0
 801468c:	d103      	bne.n	8014696 <_strtod_l+0xace>
 801468e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014692:	2d00      	cmp	r5, #0
 8014694:	d06d      	beq.n	8014772 <_strtod_l+0xbaa>
 8014696:	a30a      	add	r3, pc, #40	; (adr r3, 80146c0 <_strtod_l+0xaf8>)
 8014698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469c:	4630      	mov	r0, r6
 801469e:	4639      	mov	r1, r7
 80146a0:	f7ec fa34 	bl	8000b0c <__aeabi_dcmplt>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	f47f acb8 	bne.w	801401a <_strtod_l+0x452>
 80146aa:	a307      	add	r3, pc, #28	; (adr r3, 80146c8 <_strtod_l+0xb00>)
 80146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b0:	4630      	mov	r0, r6
 80146b2:	4639      	mov	r1, r7
 80146b4:	f7ec fa48 	bl	8000b48 <__aeabi_dcmpgt>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	f43f af79 	beq.w	80145b0 <_strtod_l+0x9e8>
 80146be:	e4ac      	b.n	801401a <_strtod_l+0x452>
 80146c0:	94a03595 	.word	0x94a03595
 80146c4:	3fdfffff 	.word	0x3fdfffff
 80146c8:	35afe535 	.word	0x35afe535
 80146cc:	3fe00000 	.word	0x3fe00000
 80146d0:	000fffff 	.word	0x000fffff
 80146d4:	7ff00000 	.word	0x7ff00000
 80146d8:	7fefffff 	.word	0x7fefffff
 80146dc:	39500000 	.word	0x39500000
 80146e0:	3ff00000 	.word	0x3ff00000
 80146e4:	7fe00000 	.word	0x7fe00000
 80146e8:	7c9fffff 	.word	0x7c9fffff
 80146ec:	3fe00000 	.word	0x3fe00000
 80146f0:	bff00000 	.word	0xbff00000
 80146f4:	9b04      	ldr	r3, [sp, #16]
 80146f6:	b333      	cbz	r3, 8014746 <_strtod_l+0xb7e>
 80146f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146fe:	d822      	bhi.n	8014746 <_strtod_l+0xb7e>
 8014700:	a327      	add	r3, pc, #156	; (adr r3, 80147a0 <_strtod_l+0xbd8>)
 8014702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014706:	4630      	mov	r0, r6
 8014708:	4639      	mov	r1, r7
 801470a:	f7ec fa09 	bl	8000b20 <__aeabi_dcmple>
 801470e:	b1a0      	cbz	r0, 801473a <_strtod_l+0xb72>
 8014710:	4639      	mov	r1, r7
 8014712:	4630      	mov	r0, r6
 8014714:	f7ec fa60 	bl	8000bd8 <__aeabi_d2uiz>
 8014718:	2800      	cmp	r0, #0
 801471a:	bf08      	it	eq
 801471c:	2001      	moveq	r0, #1
 801471e:	f7eb ff09 	bl	8000534 <__aeabi_ui2d>
 8014722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014724:	4606      	mov	r6, r0
 8014726:	460f      	mov	r7, r1
 8014728:	bb03      	cbnz	r3, 801476c <_strtod_l+0xba4>
 801472a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801472e:	9012      	str	r0, [sp, #72]	; 0x48
 8014730:	9313      	str	r3, [sp, #76]	; 0x4c
 8014732:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014736:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801473a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801473c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801473e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014742:	1a9b      	subs	r3, r3, r2
 8014744:	930b      	str	r3, [sp, #44]	; 0x2c
 8014746:	ed9d 0b08 	vldr	d0, [sp, #32]
 801474a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801474e:	f002 f831 	bl	80167b4 <__ulp>
 8014752:	4650      	mov	r0, sl
 8014754:	ec53 2b10 	vmov	r2, r3, d0
 8014758:	4659      	mov	r1, fp
 801475a:	f7eb ff65 	bl	8000628 <__aeabi_dmul>
 801475e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014762:	f7eb fdab 	bl	80002bc <__adddf3>
 8014766:	4682      	mov	sl, r0
 8014768:	468b      	mov	fp, r1
 801476a:	e772      	b.n	8014652 <_strtod_l+0xa8a>
 801476c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014770:	e7df      	b.n	8014732 <_strtod_l+0xb6a>
 8014772:	a30d      	add	r3, pc, #52	; (adr r3, 80147a8 <_strtod_l+0xbe0>)
 8014774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014778:	f7ec f9c8 	bl	8000b0c <__aeabi_dcmplt>
 801477c:	e79c      	b.n	80146b8 <_strtod_l+0xaf0>
 801477e:	2300      	movs	r3, #0
 8014780:	930d      	str	r3, [sp, #52]	; 0x34
 8014782:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	f7ff ba61 	b.w	8013c4e <_strtod_l+0x86>
 801478c:	2b65      	cmp	r3, #101	; 0x65
 801478e:	f04f 0200 	mov.w	r2, #0
 8014792:	f43f ab4e 	beq.w	8013e32 <_strtod_l+0x26a>
 8014796:	2101      	movs	r1, #1
 8014798:	4614      	mov	r4, r2
 801479a:	9104      	str	r1, [sp, #16]
 801479c:	f7ff bacb 	b.w	8013d36 <_strtod_l+0x16e>
 80147a0:	ffc00000 	.word	0xffc00000
 80147a4:	41dfffff 	.word	0x41dfffff
 80147a8:	94a03595 	.word	0x94a03595
 80147ac:	3fcfffff 	.word	0x3fcfffff

080147b0 <_strtod_r>:
 80147b0:	4b05      	ldr	r3, [pc, #20]	; (80147c8 <_strtod_r+0x18>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	b410      	push	{r4}
 80147b6:	6a1b      	ldr	r3, [r3, #32]
 80147b8:	4c04      	ldr	r4, [pc, #16]	; (80147cc <_strtod_r+0x1c>)
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	bf08      	it	eq
 80147be:	4623      	moveq	r3, r4
 80147c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147c4:	f7ff ba00 	b.w	8013bc8 <_strtod_l>
 80147c8:	2000000c 	.word	0x2000000c
 80147cc:	20000070 	.word	0x20000070

080147d0 <_strtol_l.isra.0>:
 80147d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147d4:	4680      	mov	r8, r0
 80147d6:	4689      	mov	r9, r1
 80147d8:	4692      	mov	sl, r2
 80147da:	461e      	mov	r6, r3
 80147dc:	460f      	mov	r7, r1
 80147de:	463d      	mov	r5, r7
 80147e0:	9808      	ldr	r0, [sp, #32]
 80147e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147e6:	f001 fc67 	bl	80160b8 <__locale_ctype_ptr_l>
 80147ea:	4420      	add	r0, r4
 80147ec:	7843      	ldrb	r3, [r0, #1]
 80147ee:	f013 0308 	ands.w	r3, r3, #8
 80147f2:	d132      	bne.n	801485a <_strtol_l.isra.0+0x8a>
 80147f4:	2c2d      	cmp	r4, #45	; 0x2d
 80147f6:	d132      	bne.n	801485e <_strtol_l.isra.0+0x8e>
 80147f8:	787c      	ldrb	r4, [r7, #1]
 80147fa:	1cbd      	adds	r5, r7, #2
 80147fc:	2201      	movs	r2, #1
 80147fe:	2e00      	cmp	r6, #0
 8014800:	d05d      	beq.n	80148be <_strtol_l.isra.0+0xee>
 8014802:	2e10      	cmp	r6, #16
 8014804:	d109      	bne.n	801481a <_strtol_l.isra.0+0x4a>
 8014806:	2c30      	cmp	r4, #48	; 0x30
 8014808:	d107      	bne.n	801481a <_strtol_l.isra.0+0x4a>
 801480a:	782b      	ldrb	r3, [r5, #0]
 801480c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014810:	2b58      	cmp	r3, #88	; 0x58
 8014812:	d14f      	bne.n	80148b4 <_strtol_l.isra.0+0xe4>
 8014814:	786c      	ldrb	r4, [r5, #1]
 8014816:	2610      	movs	r6, #16
 8014818:	3502      	adds	r5, #2
 801481a:	2a00      	cmp	r2, #0
 801481c:	bf14      	ite	ne
 801481e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014822:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014826:	2700      	movs	r7, #0
 8014828:	fbb1 fcf6 	udiv	ip, r1, r6
 801482c:	4638      	mov	r0, r7
 801482e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014832:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014836:	2b09      	cmp	r3, #9
 8014838:	d817      	bhi.n	801486a <_strtol_l.isra.0+0x9a>
 801483a:	461c      	mov	r4, r3
 801483c:	42a6      	cmp	r6, r4
 801483e:	dd23      	ble.n	8014888 <_strtol_l.isra.0+0xb8>
 8014840:	1c7b      	adds	r3, r7, #1
 8014842:	d007      	beq.n	8014854 <_strtol_l.isra.0+0x84>
 8014844:	4584      	cmp	ip, r0
 8014846:	d31c      	bcc.n	8014882 <_strtol_l.isra.0+0xb2>
 8014848:	d101      	bne.n	801484e <_strtol_l.isra.0+0x7e>
 801484a:	45a6      	cmp	lr, r4
 801484c:	db19      	blt.n	8014882 <_strtol_l.isra.0+0xb2>
 801484e:	fb00 4006 	mla	r0, r0, r6, r4
 8014852:	2701      	movs	r7, #1
 8014854:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014858:	e7eb      	b.n	8014832 <_strtol_l.isra.0+0x62>
 801485a:	462f      	mov	r7, r5
 801485c:	e7bf      	b.n	80147de <_strtol_l.isra.0+0xe>
 801485e:	2c2b      	cmp	r4, #43	; 0x2b
 8014860:	bf04      	itt	eq
 8014862:	1cbd      	addeq	r5, r7, #2
 8014864:	787c      	ldrbeq	r4, [r7, #1]
 8014866:	461a      	mov	r2, r3
 8014868:	e7c9      	b.n	80147fe <_strtol_l.isra.0+0x2e>
 801486a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801486e:	2b19      	cmp	r3, #25
 8014870:	d801      	bhi.n	8014876 <_strtol_l.isra.0+0xa6>
 8014872:	3c37      	subs	r4, #55	; 0x37
 8014874:	e7e2      	b.n	801483c <_strtol_l.isra.0+0x6c>
 8014876:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801487a:	2b19      	cmp	r3, #25
 801487c:	d804      	bhi.n	8014888 <_strtol_l.isra.0+0xb8>
 801487e:	3c57      	subs	r4, #87	; 0x57
 8014880:	e7dc      	b.n	801483c <_strtol_l.isra.0+0x6c>
 8014882:	f04f 37ff 	mov.w	r7, #4294967295
 8014886:	e7e5      	b.n	8014854 <_strtol_l.isra.0+0x84>
 8014888:	1c7b      	adds	r3, r7, #1
 801488a:	d108      	bne.n	801489e <_strtol_l.isra.0+0xce>
 801488c:	2322      	movs	r3, #34	; 0x22
 801488e:	f8c8 3000 	str.w	r3, [r8]
 8014892:	4608      	mov	r0, r1
 8014894:	f1ba 0f00 	cmp.w	sl, #0
 8014898:	d107      	bne.n	80148aa <_strtol_l.isra.0+0xda>
 801489a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801489e:	b102      	cbz	r2, 80148a2 <_strtol_l.isra.0+0xd2>
 80148a0:	4240      	negs	r0, r0
 80148a2:	f1ba 0f00 	cmp.w	sl, #0
 80148a6:	d0f8      	beq.n	801489a <_strtol_l.isra.0+0xca>
 80148a8:	b10f      	cbz	r7, 80148ae <_strtol_l.isra.0+0xde>
 80148aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80148ae:	f8ca 9000 	str.w	r9, [sl]
 80148b2:	e7f2      	b.n	801489a <_strtol_l.isra.0+0xca>
 80148b4:	2430      	movs	r4, #48	; 0x30
 80148b6:	2e00      	cmp	r6, #0
 80148b8:	d1af      	bne.n	801481a <_strtol_l.isra.0+0x4a>
 80148ba:	2608      	movs	r6, #8
 80148bc:	e7ad      	b.n	801481a <_strtol_l.isra.0+0x4a>
 80148be:	2c30      	cmp	r4, #48	; 0x30
 80148c0:	d0a3      	beq.n	801480a <_strtol_l.isra.0+0x3a>
 80148c2:	260a      	movs	r6, #10
 80148c4:	e7a9      	b.n	801481a <_strtol_l.isra.0+0x4a>
	...

080148c8 <_strtol_r>:
 80148c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148ca:	4c06      	ldr	r4, [pc, #24]	; (80148e4 <_strtol_r+0x1c>)
 80148cc:	4d06      	ldr	r5, [pc, #24]	; (80148e8 <_strtol_r+0x20>)
 80148ce:	6824      	ldr	r4, [r4, #0]
 80148d0:	6a24      	ldr	r4, [r4, #32]
 80148d2:	2c00      	cmp	r4, #0
 80148d4:	bf08      	it	eq
 80148d6:	462c      	moveq	r4, r5
 80148d8:	9400      	str	r4, [sp, #0]
 80148da:	f7ff ff79 	bl	80147d0 <_strtol_l.isra.0>
 80148de:	b003      	add	sp, #12
 80148e0:	bd30      	pop	{r4, r5, pc}
 80148e2:	bf00      	nop
 80148e4:	2000000c 	.word	0x2000000c
 80148e8:	20000070 	.word	0x20000070

080148ec <_vsiprintf_r>:
 80148ec:	b500      	push	{lr}
 80148ee:	b09b      	sub	sp, #108	; 0x6c
 80148f0:	9100      	str	r1, [sp, #0]
 80148f2:	9104      	str	r1, [sp, #16]
 80148f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148f8:	9105      	str	r1, [sp, #20]
 80148fa:	9102      	str	r1, [sp, #8]
 80148fc:	4905      	ldr	r1, [pc, #20]	; (8014914 <_vsiprintf_r+0x28>)
 80148fe:	9103      	str	r1, [sp, #12]
 8014900:	4669      	mov	r1, sp
 8014902:	f002 f99b 	bl	8016c3c <_svfiprintf_r>
 8014906:	9b00      	ldr	r3, [sp, #0]
 8014908:	2200      	movs	r2, #0
 801490a:	701a      	strb	r2, [r3, #0]
 801490c:	b01b      	add	sp, #108	; 0x6c
 801490e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014912:	bf00      	nop
 8014914:	ffff0208 	.word	0xffff0208

08014918 <vsiprintf>:
 8014918:	4613      	mov	r3, r2
 801491a:	460a      	mov	r2, r1
 801491c:	4601      	mov	r1, r0
 801491e:	4802      	ldr	r0, [pc, #8]	; (8014928 <vsiprintf+0x10>)
 8014920:	6800      	ldr	r0, [r0, #0]
 8014922:	f7ff bfe3 	b.w	80148ec <_vsiprintf_r>
 8014926:	bf00      	nop
 8014928:	2000000c 	.word	0x2000000c

0801492c <__swbuf_r>:
 801492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492e:	460e      	mov	r6, r1
 8014930:	4614      	mov	r4, r2
 8014932:	4605      	mov	r5, r0
 8014934:	b118      	cbz	r0, 801493e <__swbuf_r+0x12>
 8014936:	6983      	ldr	r3, [r0, #24]
 8014938:	b90b      	cbnz	r3, 801493e <__swbuf_r+0x12>
 801493a:	f001 f80d 	bl	8015958 <__sinit>
 801493e:	4b21      	ldr	r3, [pc, #132]	; (80149c4 <__swbuf_r+0x98>)
 8014940:	429c      	cmp	r4, r3
 8014942:	d12a      	bne.n	801499a <__swbuf_r+0x6e>
 8014944:	686c      	ldr	r4, [r5, #4]
 8014946:	69a3      	ldr	r3, [r4, #24]
 8014948:	60a3      	str	r3, [r4, #8]
 801494a:	89a3      	ldrh	r3, [r4, #12]
 801494c:	071a      	lsls	r2, r3, #28
 801494e:	d52e      	bpl.n	80149ae <__swbuf_r+0x82>
 8014950:	6923      	ldr	r3, [r4, #16]
 8014952:	b363      	cbz	r3, 80149ae <__swbuf_r+0x82>
 8014954:	6923      	ldr	r3, [r4, #16]
 8014956:	6820      	ldr	r0, [r4, #0]
 8014958:	1ac0      	subs	r0, r0, r3
 801495a:	6963      	ldr	r3, [r4, #20]
 801495c:	b2f6      	uxtb	r6, r6
 801495e:	4283      	cmp	r3, r0
 8014960:	4637      	mov	r7, r6
 8014962:	dc04      	bgt.n	801496e <__swbuf_r+0x42>
 8014964:	4621      	mov	r1, r4
 8014966:	4628      	mov	r0, r5
 8014968:	f000 ff8c 	bl	8015884 <_fflush_r>
 801496c:	bb28      	cbnz	r0, 80149ba <__swbuf_r+0x8e>
 801496e:	68a3      	ldr	r3, [r4, #8]
 8014970:	3b01      	subs	r3, #1
 8014972:	60a3      	str	r3, [r4, #8]
 8014974:	6823      	ldr	r3, [r4, #0]
 8014976:	1c5a      	adds	r2, r3, #1
 8014978:	6022      	str	r2, [r4, #0]
 801497a:	701e      	strb	r6, [r3, #0]
 801497c:	6963      	ldr	r3, [r4, #20]
 801497e:	3001      	adds	r0, #1
 8014980:	4283      	cmp	r3, r0
 8014982:	d004      	beq.n	801498e <__swbuf_r+0x62>
 8014984:	89a3      	ldrh	r3, [r4, #12]
 8014986:	07db      	lsls	r3, r3, #31
 8014988:	d519      	bpl.n	80149be <__swbuf_r+0x92>
 801498a:	2e0a      	cmp	r6, #10
 801498c:	d117      	bne.n	80149be <__swbuf_r+0x92>
 801498e:	4621      	mov	r1, r4
 8014990:	4628      	mov	r0, r5
 8014992:	f000 ff77 	bl	8015884 <_fflush_r>
 8014996:	b190      	cbz	r0, 80149be <__swbuf_r+0x92>
 8014998:	e00f      	b.n	80149ba <__swbuf_r+0x8e>
 801499a:	4b0b      	ldr	r3, [pc, #44]	; (80149c8 <__swbuf_r+0x9c>)
 801499c:	429c      	cmp	r4, r3
 801499e:	d101      	bne.n	80149a4 <__swbuf_r+0x78>
 80149a0:	68ac      	ldr	r4, [r5, #8]
 80149a2:	e7d0      	b.n	8014946 <__swbuf_r+0x1a>
 80149a4:	4b09      	ldr	r3, [pc, #36]	; (80149cc <__swbuf_r+0xa0>)
 80149a6:	429c      	cmp	r4, r3
 80149a8:	bf08      	it	eq
 80149aa:	68ec      	ldreq	r4, [r5, #12]
 80149ac:	e7cb      	b.n	8014946 <__swbuf_r+0x1a>
 80149ae:	4621      	mov	r1, r4
 80149b0:	4628      	mov	r0, r5
 80149b2:	f000 f81f 	bl	80149f4 <__swsetup_r>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d0cc      	beq.n	8014954 <__swbuf_r+0x28>
 80149ba:	f04f 37ff 	mov.w	r7, #4294967295
 80149be:	4638      	mov	r0, r7
 80149c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149c2:	bf00      	nop
 80149c4:	08018320 	.word	0x08018320
 80149c8:	08018340 	.word	0x08018340
 80149cc:	08018300 	.word	0x08018300

080149d0 <_write_r>:
 80149d0:	b538      	push	{r3, r4, r5, lr}
 80149d2:	4c07      	ldr	r4, [pc, #28]	; (80149f0 <_write_r+0x20>)
 80149d4:	4605      	mov	r5, r0
 80149d6:	4608      	mov	r0, r1
 80149d8:	4611      	mov	r1, r2
 80149da:	2200      	movs	r2, #0
 80149dc:	6022      	str	r2, [r4, #0]
 80149de:	461a      	mov	r2, r3
 80149e0:	f7ef fa04 	bl	8003dec <_write>
 80149e4:	1c43      	adds	r3, r0, #1
 80149e6:	d102      	bne.n	80149ee <_write_r+0x1e>
 80149e8:	6823      	ldr	r3, [r4, #0]
 80149ea:	b103      	cbz	r3, 80149ee <_write_r+0x1e>
 80149ec:	602b      	str	r3, [r5, #0]
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	2003be0c 	.word	0x2003be0c

080149f4 <__swsetup_r>:
 80149f4:	4b32      	ldr	r3, [pc, #200]	; (8014ac0 <__swsetup_r+0xcc>)
 80149f6:	b570      	push	{r4, r5, r6, lr}
 80149f8:	681d      	ldr	r5, [r3, #0]
 80149fa:	4606      	mov	r6, r0
 80149fc:	460c      	mov	r4, r1
 80149fe:	b125      	cbz	r5, 8014a0a <__swsetup_r+0x16>
 8014a00:	69ab      	ldr	r3, [r5, #24]
 8014a02:	b913      	cbnz	r3, 8014a0a <__swsetup_r+0x16>
 8014a04:	4628      	mov	r0, r5
 8014a06:	f000 ffa7 	bl	8015958 <__sinit>
 8014a0a:	4b2e      	ldr	r3, [pc, #184]	; (8014ac4 <__swsetup_r+0xd0>)
 8014a0c:	429c      	cmp	r4, r3
 8014a0e:	d10f      	bne.n	8014a30 <__swsetup_r+0x3c>
 8014a10:	686c      	ldr	r4, [r5, #4]
 8014a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	0715      	lsls	r5, r2, #28
 8014a1a:	d42c      	bmi.n	8014a76 <__swsetup_r+0x82>
 8014a1c:	06d0      	lsls	r0, r2, #27
 8014a1e:	d411      	bmi.n	8014a44 <__swsetup_r+0x50>
 8014a20:	2209      	movs	r2, #9
 8014a22:	6032      	str	r2, [r6, #0]
 8014a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a28:	81a3      	strh	r3, [r4, #12]
 8014a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a2e:	e03e      	b.n	8014aae <__swsetup_r+0xba>
 8014a30:	4b25      	ldr	r3, [pc, #148]	; (8014ac8 <__swsetup_r+0xd4>)
 8014a32:	429c      	cmp	r4, r3
 8014a34:	d101      	bne.n	8014a3a <__swsetup_r+0x46>
 8014a36:	68ac      	ldr	r4, [r5, #8]
 8014a38:	e7eb      	b.n	8014a12 <__swsetup_r+0x1e>
 8014a3a:	4b24      	ldr	r3, [pc, #144]	; (8014acc <__swsetup_r+0xd8>)
 8014a3c:	429c      	cmp	r4, r3
 8014a3e:	bf08      	it	eq
 8014a40:	68ec      	ldreq	r4, [r5, #12]
 8014a42:	e7e6      	b.n	8014a12 <__swsetup_r+0x1e>
 8014a44:	0751      	lsls	r1, r2, #29
 8014a46:	d512      	bpl.n	8014a6e <__swsetup_r+0x7a>
 8014a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a4a:	b141      	cbz	r1, 8014a5e <__swsetup_r+0x6a>
 8014a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a50:	4299      	cmp	r1, r3
 8014a52:	d002      	beq.n	8014a5a <__swsetup_r+0x66>
 8014a54:	4630      	mov	r0, r6
 8014a56:	f001 ffef 	bl	8016a38 <_free_r>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a5e:	89a3      	ldrh	r3, [r4, #12]
 8014a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a64:	81a3      	strh	r3, [r4, #12]
 8014a66:	2300      	movs	r3, #0
 8014a68:	6063      	str	r3, [r4, #4]
 8014a6a:	6923      	ldr	r3, [r4, #16]
 8014a6c:	6023      	str	r3, [r4, #0]
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f043 0308 	orr.w	r3, r3, #8
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	6923      	ldr	r3, [r4, #16]
 8014a78:	b94b      	cbnz	r3, 8014a8e <__swsetup_r+0x9a>
 8014a7a:	89a3      	ldrh	r3, [r4, #12]
 8014a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a84:	d003      	beq.n	8014a8e <__swsetup_r+0x9a>
 8014a86:	4621      	mov	r1, r4
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f001 fb6d 	bl	8016168 <__smakebuf_r>
 8014a8e:	89a2      	ldrh	r2, [r4, #12]
 8014a90:	f012 0301 	ands.w	r3, r2, #1
 8014a94:	d00c      	beq.n	8014ab0 <__swsetup_r+0xbc>
 8014a96:	2300      	movs	r3, #0
 8014a98:	60a3      	str	r3, [r4, #8]
 8014a9a:	6963      	ldr	r3, [r4, #20]
 8014a9c:	425b      	negs	r3, r3
 8014a9e:	61a3      	str	r3, [r4, #24]
 8014aa0:	6923      	ldr	r3, [r4, #16]
 8014aa2:	b953      	cbnz	r3, 8014aba <__swsetup_r+0xc6>
 8014aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014aa8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014aac:	d1ba      	bne.n	8014a24 <__swsetup_r+0x30>
 8014aae:	bd70      	pop	{r4, r5, r6, pc}
 8014ab0:	0792      	lsls	r2, r2, #30
 8014ab2:	bf58      	it	pl
 8014ab4:	6963      	ldrpl	r3, [r4, #20]
 8014ab6:	60a3      	str	r3, [r4, #8]
 8014ab8:	e7f2      	b.n	8014aa0 <__swsetup_r+0xac>
 8014aba:	2000      	movs	r0, #0
 8014abc:	e7f7      	b.n	8014aae <__swsetup_r+0xba>
 8014abe:	bf00      	nop
 8014ac0:	2000000c 	.word	0x2000000c
 8014ac4:	08018320 	.word	0x08018320
 8014ac8:	08018340 	.word	0x08018340
 8014acc:	08018300 	.word	0x08018300

08014ad0 <_close_r>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	4c06      	ldr	r4, [pc, #24]	; (8014aec <_close_r+0x1c>)
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	4608      	mov	r0, r1
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	f7f0 feed 	bl	80058ba <_close>
 8014ae0:	1c43      	adds	r3, r0, #1
 8014ae2:	d102      	bne.n	8014aea <_close_r+0x1a>
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	b103      	cbz	r3, 8014aea <_close_r+0x1a>
 8014ae8:	602b      	str	r3, [r5, #0]
 8014aea:	bd38      	pop	{r3, r4, r5, pc}
 8014aec:	2003be0c 	.word	0x2003be0c

08014af0 <quorem>:
 8014af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	6903      	ldr	r3, [r0, #16]
 8014af6:	690c      	ldr	r4, [r1, #16]
 8014af8:	42a3      	cmp	r3, r4
 8014afa:	4680      	mov	r8, r0
 8014afc:	f2c0 8082 	blt.w	8014c04 <quorem+0x114>
 8014b00:	3c01      	subs	r4, #1
 8014b02:	f101 0714 	add.w	r7, r1, #20
 8014b06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014b0a:	f100 0614 	add.w	r6, r0, #20
 8014b0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014b12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014b16:	eb06 030c 	add.w	r3, r6, ip
 8014b1a:	3501      	adds	r5, #1
 8014b1c:	eb07 090c 	add.w	r9, r7, ip
 8014b20:	9301      	str	r3, [sp, #4]
 8014b22:	fbb0 f5f5 	udiv	r5, r0, r5
 8014b26:	b395      	cbz	r5, 8014b8e <quorem+0x9e>
 8014b28:	f04f 0a00 	mov.w	sl, #0
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	46b6      	mov	lr, r6
 8014b30:	46d3      	mov	fp, sl
 8014b32:	f850 2b04 	ldr.w	r2, [r0], #4
 8014b36:	b293      	uxth	r3, r2
 8014b38:	fb05 a303 	mla	r3, r5, r3, sl
 8014b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	ebab 0303 	sub.w	r3, fp, r3
 8014b46:	0c12      	lsrs	r2, r2, #16
 8014b48:	f8de b000 	ldr.w	fp, [lr]
 8014b4c:	fb05 a202 	mla	r2, r5, r2, sl
 8014b50:	fa13 f38b 	uxtah	r3, r3, fp
 8014b54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014b58:	fa1f fb82 	uxth.w	fp, r2
 8014b5c:	f8de 2000 	ldr.w	r2, [lr]
 8014b60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b6e:	4581      	cmp	r9, r0
 8014b70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014b74:	f84e 3b04 	str.w	r3, [lr], #4
 8014b78:	d2db      	bcs.n	8014b32 <quorem+0x42>
 8014b7a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014b7e:	b933      	cbnz	r3, 8014b8e <quorem+0x9e>
 8014b80:	9b01      	ldr	r3, [sp, #4]
 8014b82:	3b04      	subs	r3, #4
 8014b84:	429e      	cmp	r6, r3
 8014b86:	461a      	mov	r2, r3
 8014b88:	d330      	bcc.n	8014bec <quorem+0xfc>
 8014b8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b8e:	4640      	mov	r0, r8
 8014b90:	f001 fd98 	bl	80166c4 <__mcmp>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	db25      	blt.n	8014be4 <quorem+0xf4>
 8014b98:	3501      	adds	r5, #1
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f04f 0c00 	mov.w	ip, #0
 8014ba0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014ba4:	f8d0 e000 	ldr.w	lr, [r0]
 8014ba8:	b293      	uxth	r3, r2
 8014baa:	ebac 0303 	sub.w	r3, ip, r3
 8014bae:	0c12      	lsrs	r2, r2, #16
 8014bb0:	fa13 f38e 	uxtah	r3, r3, lr
 8014bb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014bb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bc2:	45b9      	cmp	r9, r7
 8014bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014bc8:	f840 3b04 	str.w	r3, [r0], #4
 8014bcc:	d2e8      	bcs.n	8014ba0 <quorem+0xb0>
 8014bce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014bd2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014bd6:	b92a      	cbnz	r2, 8014be4 <quorem+0xf4>
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	429e      	cmp	r6, r3
 8014bdc:	461a      	mov	r2, r3
 8014bde:	d30b      	bcc.n	8014bf8 <quorem+0x108>
 8014be0:	f8c8 4010 	str.w	r4, [r8, #16]
 8014be4:	4628      	mov	r0, r5
 8014be6:	b003      	add	sp, #12
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	6812      	ldr	r2, [r2, #0]
 8014bee:	3b04      	subs	r3, #4
 8014bf0:	2a00      	cmp	r2, #0
 8014bf2:	d1ca      	bne.n	8014b8a <quorem+0x9a>
 8014bf4:	3c01      	subs	r4, #1
 8014bf6:	e7c5      	b.n	8014b84 <quorem+0x94>
 8014bf8:	6812      	ldr	r2, [r2, #0]
 8014bfa:	3b04      	subs	r3, #4
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	d1ef      	bne.n	8014be0 <quorem+0xf0>
 8014c00:	3c01      	subs	r4, #1
 8014c02:	e7ea      	b.n	8014bda <quorem+0xea>
 8014c04:	2000      	movs	r0, #0
 8014c06:	e7ee      	b.n	8014be6 <quorem+0xf6>

08014c08 <_dtoa_r>:
 8014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0c:	ec57 6b10 	vmov	r6, r7, d0
 8014c10:	b097      	sub	sp, #92	; 0x5c
 8014c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c14:	9106      	str	r1, [sp, #24]
 8014c16:	4604      	mov	r4, r0
 8014c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014c20:	e9cd 6700 	strd	r6, r7, [sp]
 8014c24:	b93d      	cbnz	r5, 8014c36 <_dtoa_r+0x2e>
 8014c26:	2010      	movs	r0, #16
 8014c28:	f001 fade 	bl	80161e8 <malloc>
 8014c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8014c2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014c32:	6005      	str	r5, [r0, #0]
 8014c34:	60c5      	str	r5, [r0, #12]
 8014c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c38:	6819      	ldr	r1, [r3, #0]
 8014c3a:	b151      	cbz	r1, 8014c52 <_dtoa_r+0x4a>
 8014c3c:	685a      	ldr	r2, [r3, #4]
 8014c3e:	604a      	str	r2, [r1, #4]
 8014c40:	2301      	movs	r3, #1
 8014c42:	4093      	lsls	r3, r2
 8014c44:	608b      	str	r3, [r1, #8]
 8014c46:	4620      	mov	r0, r4
 8014c48:	f001 fb1c 	bl	8016284 <_Bfree>
 8014c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c4e:	2200      	movs	r2, #0
 8014c50:	601a      	str	r2, [r3, #0]
 8014c52:	1e3b      	subs	r3, r7, #0
 8014c54:	bfbb      	ittet	lt
 8014c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014c5a:	9301      	strlt	r3, [sp, #4]
 8014c5c:	2300      	movge	r3, #0
 8014c5e:	2201      	movlt	r2, #1
 8014c60:	bfac      	ite	ge
 8014c62:	f8c8 3000 	strge.w	r3, [r8]
 8014c66:	f8c8 2000 	strlt.w	r2, [r8]
 8014c6a:	4baf      	ldr	r3, [pc, #700]	; (8014f28 <_dtoa_r+0x320>)
 8014c6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c70:	ea33 0308 	bics.w	r3, r3, r8
 8014c74:	d114      	bne.n	8014ca0 <_dtoa_r+0x98>
 8014c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c7c:	6013      	str	r3, [r2, #0]
 8014c7e:	9b00      	ldr	r3, [sp, #0]
 8014c80:	b923      	cbnz	r3, 8014c8c <_dtoa_r+0x84>
 8014c82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014c86:	2800      	cmp	r0, #0
 8014c88:	f000 8542 	beq.w	8015710 <_dtoa_r+0xb08>
 8014c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014f3c <_dtoa_r+0x334>
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	f000 8544 	beq.w	8015720 <_dtoa_r+0xb18>
 8014c98:	f10b 0303 	add.w	r3, fp, #3
 8014c9c:	f000 bd3e 	b.w	801571c <_dtoa_r+0xb14>
 8014ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	4630      	mov	r0, r6
 8014caa:	4639      	mov	r1, r7
 8014cac:	f7eb ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8014cb0:	4681      	mov	r9, r0
 8014cb2:	b168      	cbz	r0, 8014cd0 <_dtoa_r+0xc8>
 8014cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	6013      	str	r3, [r2, #0]
 8014cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	f000 8524 	beq.w	801570a <_dtoa_r+0xb02>
 8014cc2:	4b9a      	ldr	r3, [pc, #616]	; (8014f2c <_dtoa_r+0x324>)
 8014cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8014cca:	6013      	str	r3, [r2, #0]
 8014ccc:	f000 bd28 	b.w	8015720 <_dtoa_r+0xb18>
 8014cd0:	aa14      	add	r2, sp, #80	; 0x50
 8014cd2:	a915      	add	r1, sp, #84	; 0x54
 8014cd4:	ec47 6b10 	vmov	d0, r6, r7
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f001 fde1 	bl	80168a0 <__d2b>
 8014cde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014ce2:	9004      	str	r0, [sp, #16]
 8014ce4:	2d00      	cmp	r5, #0
 8014ce6:	d07c      	beq.n	8014de2 <_dtoa_r+0x1da>
 8014ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014cf0:	46b2      	mov	sl, r6
 8014cf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014cfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014cfe:	2200      	movs	r2, #0
 8014d00:	4b8b      	ldr	r3, [pc, #556]	; (8014f30 <_dtoa_r+0x328>)
 8014d02:	4650      	mov	r0, sl
 8014d04:	4659      	mov	r1, fp
 8014d06:	f7eb fad7 	bl	80002b8 <__aeabi_dsub>
 8014d0a:	a381      	add	r3, pc, #516	; (adr r3, 8014f10 <_dtoa_r+0x308>)
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d10:	f7eb fc8a 	bl	8000628 <__aeabi_dmul>
 8014d14:	a380      	add	r3, pc, #512	; (adr r3, 8014f18 <_dtoa_r+0x310>)
 8014d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1a:	f7eb facf 	bl	80002bc <__adddf3>
 8014d1e:	4606      	mov	r6, r0
 8014d20:	4628      	mov	r0, r5
 8014d22:	460f      	mov	r7, r1
 8014d24:	f7eb fc16 	bl	8000554 <__aeabi_i2d>
 8014d28:	a37d      	add	r3, pc, #500	; (adr r3, 8014f20 <_dtoa_r+0x318>)
 8014d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2e:	f7eb fc7b 	bl	8000628 <__aeabi_dmul>
 8014d32:	4602      	mov	r2, r0
 8014d34:	460b      	mov	r3, r1
 8014d36:	4630      	mov	r0, r6
 8014d38:	4639      	mov	r1, r7
 8014d3a:	f7eb fabf 	bl	80002bc <__adddf3>
 8014d3e:	4606      	mov	r6, r0
 8014d40:	460f      	mov	r7, r1
 8014d42:	f7eb ff21 	bl	8000b88 <__aeabi_d2iz>
 8014d46:	2200      	movs	r2, #0
 8014d48:	4682      	mov	sl, r0
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	4639      	mov	r1, r7
 8014d50:	f7eb fedc 	bl	8000b0c <__aeabi_dcmplt>
 8014d54:	b148      	cbz	r0, 8014d6a <_dtoa_r+0x162>
 8014d56:	4650      	mov	r0, sl
 8014d58:	f7eb fbfc 	bl	8000554 <__aeabi_i2d>
 8014d5c:	4632      	mov	r2, r6
 8014d5e:	463b      	mov	r3, r7
 8014d60:	f7eb feca 	bl	8000af8 <__aeabi_dcmpeq>
 8014d64:	b908      	cbnz	r0, 8014d6a <_dtoa_r+0x162>
 8014d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d6a:	f1ba 0f16 	cmp.w	sl, #22
 8014d6e:	d859      	bhi.n	8014e24 <_dtoa_r+0x21c>
 8014d70:	4970      	ldr	r1, [pc, #448]	; (8014f34 <_dtoa_r+0x32c>)
 8014d72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d7e:	f7eb fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d050      	beq.n	8014e28 <_dtoa_r+0x220>
 8014d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d90:	1b5d      	subs	r5, r3, r5
 8014d92:	f1b5 0801 	subs.w	r8, r5, #1
 8014d96:	bf49      	itett	mi
 8014d98:	f1c5 0301 	rsbmi	r3, r5, #1
 8014d9c:	2300      	movpl	r3, #0
 8014d9e:	9305      	strmi	r3, [sp, #20]
 8014da0:	f04f 0800 	movmi.w	r8, #0
 8014da4:	bf58      	it	pl
 8014da6:	9305      	strpl	r3, [sp, #20]
 8014da8:	f1ba 0f00 	cmp.w	sl, #0
 8014dac:	db3e      	blt.n	8014e2c <_dtoa_r+0x224>
 8014dae:	2300      	movs	r3, #0
 8014db0:	44d0      	add	r8, sl
 8014db2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014db6:	9307      	str	r3, [sp, #28]
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	2b09      	cmp	r3, #9
 8014dbc:	f200 8090 	bhi.w	8014ee0 <_dtoa_r+0x2d8>
 8014dc0:	2b05      	cmp	r3, #5
 8014dc2:	bfc4      	itt	gt
 8014dc4:	3b04      	subgt	r3, #4
 8014dc6:	9306      	strgt	r3, [sp, #24]
 8014dc8:	9b06      	ldr	r3, [sp, #24]
 8014dca:	f1a3 0302 	sub.w	r3, r3, #2
 8014dce:	bfcc      	ite	gt
 8014dd0:	2500      	movgt	r5, #0
 8014dd2:	2501      	movle	r5, #1
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	f200 808f 	bhi.w	8014ef8 <_dtoa_r+0x2f0>
 8014dda:	e8df f003 	tbb	[pc, r3]
 8014dde:	7f7d      	.short	0x7f7d
 8014de0:	7131      	.short	0x7131
 8014de2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014de6:	441d      	add	r5, r3
 8014de8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014dec:	2820      	cmp	r0, #32
 8014dee:	dd13      	ble.n	8014e18 <_dtoa_r+0x210>
 8014df0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014df4:	9b00      	ldr	r3, [sp, #0]
 8014df6:	fa08 f800 	lsl.w	r8, r8, r0
 8014dfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014dfe:	fa23 f000 	lsr.w	r0, r3, r0
 8014e02:	ea48 0000 	orr.w	r0, r8, r0
 8014e06:	f7eb fb95 	bl	8000534 <__aeabi_ui2d>
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	4682      	mov	sl, r0
 8014e0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014e12:	3d01      	subs	r5, #1
 8014e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e16:	e772      	b.n	8014cfe <_dtoa_r+0xf6>
 8014e18:	9b00      	ldr	r3, [sp, #0]
 8014e1a:	f1c0 0020 	rsb	r0, r0, #32
 8014e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8014e22:	e7f0      	b.n	8014e06 <_dtoa_r+0x1fe>
 8014e24:	2301      	movs	r3, #1
 8014e26:	e7b1      	b.n	8014d8c <_dtoa_r+0x184>
 8014e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8014e2a:	e7b0      	b.n	8014d8e <_dtoa_r+0x186>
 8014e2c:	9b05      	ldr	r3, [sp, #20]
 8014e2e:	eba3 030a 	sub.w	r3, r3, sl
 8014e32:	9305      	str	r3, [sp, #20]
 8014e34:	f1ca 0300 	rsb	r3, sl, #0
 8014e38:	9307      	str	r3, [sp, #28]
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8014e3e:	e7bb      	b.n	8014db8 <_dtoa_r+0x1b0>
 8014e40:	2301      	movs	r3, #1
 8014e42:	930a      	str	r3, [sp, #40]	; 0x28
 8014e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	dd59      	ble.n	8014efe <_dtoa_r+0x2f6>
 8014e4a:	9302      	str	r3, [sp, #8]
 8014e4c:	4699      	mov	r9, r3
 8014e4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014e50:	2200      	movs	r2, #0
 8014e52:	6072      	str	r2, [r6, #4]
 8014e54:	2204      	movs	r2, #4
 8014e56:	f102 0014 	add.w	r0, r2, #20
 8014e5a:	4298      	cmp	r0, r3
 8014e5c:	6871      	ldr	r1, [r6, #4]
 8014e5e:	d953      	bls.n	8014f08 <_dtoa_r+0x300>
 8014e60:	4620      	mov	r0, r4
 8014e62:	f001 f9db 	bl	801621c <_Balloc>
 8014e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e68:	6030      	str	r0, [r6, #0]
 8014e6a:	f1b9 0f0e 	cmp.w	r9, #14
 8014e6e:	f8d3 b000 	ldr.w	fp, [r3]
 8014e72:	f200 80e6 	bhi.w	8015042 <_dtoa_r+0x43a>
 8014e76:	2d00      	cmp	r5, #0
 8014e78:	f000 80e3 	beq.w	8015042 <_dtoa_r+0x43a>
 8014e7c:	ed9d 7b00 	vldr	d7, [sp]
 8014e80:	f1ba 0f00 	cmp.w	sl, #0
 8014e84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014e88:	dd74      	ble.n	8014f74 <_dtoa_r+0x36c>
 8014e8a:	4a2a      	ldr	r2, [pc, #168]	; (8014f34 <_dtoa_r+0x32c>)
 8014e8c:	f00a 030f 	and.w	r3, sl, #15
 8014e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014e94:	ed93 7b00 	vldr	d7, [r3]
 8014e98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014e9c:	06f0      	lsls	r0, r6, #27
 8014e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014ea2:	d565      	bpl.n	8014f70 <_dtoa_r+0x368>
 8014ea4:	4b24      	ldr	r3, [pc, #144]	; (8014f38 <_dtoa_r+0x330>)
 8014ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014eaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014eae:	f7eb fce5 	bl	800087c <__aeabi_ddiv>
 8014eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8014eb6:	f006 060f 	and.w	r6, r6, #15
 8014eba:	2503      	movs	r5, #3
 8014ebc:	4f1e      	ldr	r7, [pc, #120]	; (8014f38 <_dtoa_r+0x330>)
 8014ebe:	e04c      	b.n	8014f5a <_dtoa_r+0x352>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ec6:	4453      	add	r3, sl
 8014ec8:	f103 0901 	add.w	r9, r3, #1
 8014ecc:	9302      	str	r3, [sp, #8]
 8014ece:	464b      	mov	r3, r9
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	bfb8      	it	lt
 8014ed4:	2301      	movlt	r3, #1
 8014ed6:	e7ba      	b.n	8014e4e <_dtoa_r+0x246>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	e7b2      	b.n	8014e42 <_dtoa_r+0x23a>
 8014edc:	2300      	movs	r3, #0
 8014ede:	e7f0      	b.n	8014ec2 <_dtoa_r+0x2ba>
 8014ee0:	2501      	movs	r5, #1
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	9306      	str	r3, [sp, #24]
 8014ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8014ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8014eec:	9302      	str	r3, [sp, #8]
 8014eee:	4699      	mov	r9, r3
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	2312      	movs	r3, #18
 8014ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ef6:	e7aa      	b.n	8014e4e <_dtoa_r+0x246>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	930a      	str	r3, [sp, #40]	; 0x28
 8014efc:	e7f4      	b.n	8014ee8 <_dtoa_r+0x2e0>
 8014efe:	2301      	movs	r3, #1
 8014f00:	9302      	str	r3, [sp, #8]
 8014f02:	4699      	mov	r9, r3
 8014f04:	461a      	mov	r2, r3
 8014f06:	e7f5      	b.n	8014ef4 <_dtoa_r+0x2ec>
 8014f08:	3101      	adds	r1, #1
 8014f0a:	6071      	str	r1, [r6, #4]
 8014f0c:	0052      	lsls	r2, r2, #1
 8014f0e:	e7a2      	b.n	8014e56 <_dtoa_r+0x24e>
 8014f10:	636f4361 	.word	0x636f4361
 8014f14:	3fd287a7 	.word	0x3fd287a7
 8014f18:	8b60c8b3 	.word	0x8b60c8b3
 8014f1c:	3fc68a28 	.word	0x3fc68a28
 8014f20:	509f79fb 	.word	0x509f79fb
 8014f24:	3fd34413 	.word	0x3fd34413
 8014f28:	7ff00000 	.word	0x7ff00000
 8014f2c:	08018494 	.word	0x08018494
 8014f30:	3ff80000 	.word	0x3ff80000
 8014f34:	08018398 	.word	0x08018398
 8014f38:	08018370 	.word	0x08018370
 8014f3c:	080182f9 	.word	0x080182f9
 8014f40:	07f1      	lsls	r1, r6, #31
 8014f42:	d508      	bpl.n	8014f56 <_dtoa_r+0x34e>
 8014f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f4c:	f7eb fb6c 	bl	8000628 <__aeabi_dmul>
 8014f50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f54:	3501      	adds	r5, #1
 8014f56:	1076      	asrs	r6, r6, #1
 8014f58:	3708      	adds	r7, #8
 8014f5a:	2e00      	cmp	r6, #0
 8014f5c:	d1f0      	bne.n	8014f40 <_dtoa_r+0x338>
 8014f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f66:	f7eb fc89 	bl	800087c <__aeabi_ddiv>
 8014f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8014f6e:	e01a      	b.n	8014fa6 <_dtoa_r+0x39e>
 8014f70:	2502      	movs	r5, #2
 8014f72:	e7a3      	b.n	8014ebc <_dtoa_r+0x2b4>
 8014f74:	f000 80a0 	beq.w	80150b8 <_dtoa_r+0x4b0>
 8014f78:	f1ca 0600 	rsb	r6, sl, #0
 8014f7c:	4b9f      	ldr	r3, [pc, #636]	; (80151fc <_dtoa_r+0x5f4>)
 8014f7e:	4fa0      	ldr	r7, [pc, #640]	; (8015200 <_dtoa_r+0x5f8>)
 8014f80:	f006 020f 	and.w	r2, r6, #15
 8014f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f90:	f7eb fb4a 	bl	8000628 <__aeabi_dmul>
 8014f94:	e9cd 0100 	strd	r0, r1, [sp]
 8014f98:	1136      	asrs	r6, r6, #4
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	2502      	movs	r5, #2
 8014f9e:	2e00      	cmp	r6, #0
 8014fa0:	d17f      	bne.n	80150a2 <_dtoa_r+0x49a>
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1e1      	bne.n	8014f6a <_dtoa_r+0x362>
 8014fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f000 8087 	beq.w	80150bc <_dtoa_r+0x4b4>
 8014fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	4b93      	ldr	r3, [pc, #588]	; (8015204 <_dtoa_r+0x5fc>)
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	4639      	mov	r1, r7
 8014fba:	f7eb fda7 	bl	8000b0c <__aeabi_dcmplt>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d07c      	beq.n	80150bc <_dtoa_r+0x4b4>
 8014fc2:	f1b9 0f00 	cmp.w	r9, #0
 8014fc6:	d079      	beq.n	80150bc <_dtoa_r+0x4b4>
 8014fc8:	9b02      	ldr	r3, [sp, #8]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	dd35      	ble.n	801503a <_dtoa_r+0x432>
 8014fce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014fd2:	9308      	str	r3, [sp, #32]
 8014fd4:	4639      	mov	r1, r7
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	4b8b      	ldr	r3, [pc, #556]	; (8015208 <_dtoa_r+0x600>)
 8014fda:	4630      	mov	r0, r6
 8014fdc:	f7eb fb24 	bl	8000628 <__aeabi_dmul>
 8014fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8014fe4:	9f02      	ldr	r7, [sp, #8]
 8014fe6:	3501      	adds	r5, #1
 8014fe8:	4628      	mov	r0, r5
 8014fea:	f7eb fab3 	bl	8000554 <__aeabi_i2d>
 8014fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ff2:	f7eb fb19 	bl	8000628 <__aeabi_dmul>
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	4b84      	ldr	r3, [pc, #528]	; (801520c <_dtoa_r+0x604>)
 8014ffa:	f7eb f95f 	bl	80002bc <__adddf3>
 8014ffe:	4605      	mov	r5, r0
 8015000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015004:	2f00      	cmp	r7, #0
 8015006:	d15d      	bne.n	80150c4 <_dtoa_r+0x4bc>
 8015008:	2200      	movs	r2, #0
 801500a:	4b81      	ldr	r3, [pc, #516]	; (8015210 <_dtoa_r+0x608>)
 801500c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015010:	f7eb f952 	bl	80002b8 <__aeabi_dsub>
 8015014:	462a      	mov	r2, r5
 8015016:	4633      	mov	r3, r6
 8015018:	e9cd 0100 	strd	r0, r1, [sp]
 801501c:	f7eb fd94 	bl	8000b48 <__aeabi_dcmpgt>
 8015020:	2800      	cmp	r0, #0
 8015022:	f040 8288 	bne.w	8015536 <_dtoa_r+0x92e>
 8015026:	462a      	mov	r2, r5
 8015028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801502c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015030:	f7eb fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8015034:	2800      	cmp	r0, #0
 8015036:	f040 827c 	bne.w	8015532 <_dtoa_r+0x92a>
 801503a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801503e:	e9cd 2300 	strd	r2, r3, [sp]
 8015042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015044:	2b00      	cmp	r3, #0
 8015046:	f2c0 8150 	blt.w	80152ea <_dtoa_r+0x6e2>
 801504a:	f1ba 0f0e 	cmp.w	sl, #14
 801504e:	f300 814c 	bgt.w	80152ea <_dtoa_r+0x6e2>
 8015052:	4b6a      	ldr	r3, [pc, #424]	; (80151fc <_dtoa_r+0x5f4>)
 8015054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015058:	ed93 7b00 	vldr	d7, [r3]
 801505c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801505e:	2b00      	cmp	r3, #0
 8015060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015064:	f280 80d8 	bge.w	8015218 <_dtoa_r+0x610>
 8015068:	f1b9 0f00 	cmp.w	r9, #0
 801506c:	f300 80d4 	bgt.w	8015218 <_dtoa_r+0x610>
 8015070:	f040 825e 	bne.w	8015530 <_dtoa_r+0x928>
 8015074:	2200      	movs	r2, #0
 8015076:	4b66      	ldr	r3, [pc, #408]	; (8015210 <_dtoa_r+0x608>)
 8015078:	ec51 0b17 	vmov	r0, r1, d7
 801507c:	f7eb fad4 	bl	8000628 <__aeabi_dmul>
 8015080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015084:	f7eb fd56 	bl	8000b34 <__aeabi_dcmpge>
 8015088:	464f      	mov	r7, r9
 801508a:	464e      	mov	r6, r9
 801508c:	2800      	cmp	r0, #0
 801508e:	f040 8234 	bne.w	80154fa <_dtoa_r+0x8f2>
 8015092:	2331      	movs	r3, #49	; 0x31
 8015094:	f10b 0501 	add.w	r5, fp, #1
 8015098:	f88b 3000 	strb.w	r3, [fp]
 801509c:	f10a 0a01 	add.w	sl, sl, #1
 80150a0:	e22f      	b.n	8015502 <_dtoa_r+0x8fa>
 80150a2:	07f2      	lsls	r2, r6, #31
 80150a4:	d505      	bpl.n	80150b2 <_dtoa_r+0x4aa>
 80150a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150aa:	f7eb fabd 	bl	8000628 <__aeabi_dmul>
 80150ae:	3501      	adds	r5, #1
 80150b0:	2301      	movs	r3, #1
 80150b2:	1076      	asrs	r6, r6, #1
 80150b4:	3708      	adds	r7, #8
 80150b6:	e772      	b.n	8014f9e <_dtoa_r+0x396>
 80150b8:	2502      	movs	r5, #2
 80150ba:	e774      	b.n	8014fa6 <_dtoa_r+0x39e>
 80150bc:	f8cd a020 	str.w	sl, [sp, #32]
 80150c0:	464f      	mov	r7, r9
 80150c2:	e791      	b.n	8014fe8 <_dtoa_r+0x3e0>
 80150c4:	4b4d      	ldr	r3, [pc, #308]	; (80151fc <_dtoa_r+0x5f4>)
 80150c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80150ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d047      	beq.n	8015164 <_dtoa_r+0x55c>
 80150d4:	4602      	mov	r2, r0
 80150d6:	460b      	mov	r3, r1
 80150d8:	2000      	movs	r0, #0
 80150da:	494e      	ldr	r1, [pc, #312]	; (8015214 <_dtoa_r+0x60c>)
 80150dc:	f7eb fbce 	bl	800087c <__aeabi_ddiv>
 80150e0:	462a      	mov	r2, r5
 80150e2:	4633      	mov	r3, r6
 80150e4:	f7eb f8e8 	bl	80002b8 <__aeabi_dsub>
 80150e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150ec:	465d      	mov	r5, fp
 80150ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150f2:	f7eb fd49 	bl	8000b88 <__aeabi_d2iz>
 80150f6:	4606      	mov	r6, r0
 80150f8:	f7eb fa2c 	bl	8000554 <__aeabi_i2d>
 80150fc:	4602      	mov	r2, r0
 80150fe:	460b      	mov	r3, r1
 8015100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015104:	f7eb f8d8 	bl	80002b8 <__aeabi_dsub>
 8015108:	3630      	adds	r6, #48	; 0x30
 801510a:	f805 6b01 	strb.w	r6, [r5], #1
 801510e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015112:	e9cd 0100 	strd	r0, r1, [sp]
 8015116:	f7eb fcf9 	bl	8000b0c <__aeabi_dcmplt>
 801511a:	2800      	cmp	r0, #0
 801511c:	d163      	bne.n	80151e6 <_dtoa_r+0x5de>
 801511e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015122:	2000      	movs	r0, #0
 8015124:	4937      	ldr	r1, [pc, #220]	; (8015204 <_dtoa_r+0x5fc>)
 8015126:	f7eb f8c7 	bl	80002b8 <__aeabi_dsub>
 801512a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801512e:	f7eb fced 	bl	8000b0c <__aeabi_dcmplt>
 8015132:	2800      	cmp	r0, #0
 8015134:	f040 80b7 	bne.w	80152a6 <_dtoa_r+0x69e>
 8015138:	eba5 030b 	sub.w	r3, r5, fp
 801513c:	429f      	cmp	r7, r3
 801513e:	f77f af7c 	ble.w	801503a <_dtoa_r+0x432>
 8015142:	2200      	movs	r2, #0
 8015144:	4b30      	ldr	r3, [pc, #192]	; (8015208 <_dtoa_r+0x600>)
 8015146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801514a:	f7eb fa6d 	bl	8000628 <__aeabi_dmul>
 801514e:	2200      	movs	r2, #0
 8015150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015154:	4b2c      	ldr	r3, [pc, #176]	; (8015208 <_dtoa_r+0x600>)
 8015156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801515a:	f7eb fa65 	bl	8000628 <__aeabi_dmul>
 801515e:	e9cd 0100 	strd	r0, r1, [sp]
 8015162:	e7c4      	b.n	80150ee <_dtoa_r+0x4e6>
 8015164:	462a      	mov	r2, r5
 8015166:	4633      	mov	r3, r6
 8015168:	f7eb fa5e 	bl	8000628 <__aeabi_dmul>
 801516c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015170:	eb0b 0507 	add.w	r5, fp, r7
 8015174:	465e      	mov	r6, fp
 8015176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801517a:	f7eb fd05 	bl	8000b88 <__aeabi_d2iz>
 801517e:	4607      	mov	r7, r0
 8015180:	f7eb f9e8 	bl	8000554 <__aeabi_i2d>
 8015184:	3730      	adds	r7, #48	; 0x30
 8015186:	4602      	mov	r2, r0
 8015188:	460b      	mov	r3, r1
 801518a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801518e:	f7eb f893 	bl	80002b8 <__aeabi_dsub>
 8015192:	f806 7b01 	strb.w	r7, [r6], #1
 8015196:	42ae      	cmp	r6, r5
 8015198:	e9cd 0100 	strd	r0, r1, [sp]
 801519c:	f04f 0200 	mov.w	r2, #0
 80151a0:	d126      	bne.n	80151f0 <_dtoa_r+0x5e8>
 80151a2:	4b1c      	ldr	r3, [pc, #112]	; (8015214 <_dtoa_r+0x60c>)
 80151a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80151a8:	f7eb f888 	bl	80002bc <__adddf3>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151b4:	f7eb fcc8 	bl	8000b48 <__aeabi_dcmpgt>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d174      	bne.n	80152a6 <_dtoa_r+0x69e>
 80151bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80151c0:	2000      	movs	r0, #0
 80151c2:	4914      	ldr	r1, [pc, #80]	; (8015214 <_dtoa_r+0x60c>)
 80151c4:	f7eb f878 	bl	80002b8 <__aeabi_dsub>
 80151c8:	4602      	mov	r2, r0
 80151ca:	460b      	mov	r3, r1
 80151cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151d0:	f7eb fc9c 	bl	8000b0c <__aeabi_dcmplt>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	f43f af30 	beq.w	801503a <_dtoa_r+0x432>
 80151da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80151de:	2b30      	cmp	r3, #48	; 0x30
 80151e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80151e4:	d002      	beq.n	80151ec <_dtoa_r+0x5e4>
 80151e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80151ea:	e04a      	b.n	8015282 <_dtoa_r+0x67a>
 80151ec:	4615      	mov	r5, r2
 80151ee:	e7f4      	b.n	80151da <_dtoa_r+0x5d2>
 80151f0:	4b05      	ldr	r3, [pc, #20]	; (8015208 <_dtoa_r+0x600>)
 80151f2:	f7eb fa19 	bl	8000628 <__aeabi_dmul>
 80151f6:	e9cd 0100 	strd	r0, r1, [sp]
 80151fa:	e7bc      	b.n	8015176 <_dtoa_r+0x56e>
 80151fc:	08018398 	.word	0x08018398
 8015200:	08018370 	.word	0x08018370
 8015204:	3ff00000 	.word	0x3ff00000
 8015208:	40240000 	.word	0x40240000
 801520c:	401c0000 	.word	0x401c0000
 8015210:	40140000 	.word	0x40140000
 8015214:	3fe00000 	.word	0x3fe00000
 8015218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801521c:	465d      	mov	r5, fp
 801521e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015222:	4630      	mov	r0, r6
 8015224:	4639      	mov	r1, r7
 8015226:	f7eb fb29 	bl	800087c <__aeabi_ddiv>
 801522a:	f7eb fcad 	bl	8000b88 <__aeabi_d2iz>
 801522e:	4680      	mov	r8, r0
 8015230:	f7eb f990 	bl	8000554 <__aeabi_i2d>
 8015234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015238:	f7eb f9f6 	bl	8000628 <__aeabi_dmul>
 801523c:	4602      	mov	r2, r0
 801523e:	460b      	mov	r3, r1
 8015240:	4630      	mov	r0, r6
 8015242:	4639      	mov	r1, r7
 8015244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015248:	f7eb f836 	bl	80002b8 <__aeabi_dsub>
 801524c:	f805 6b01 	strb.w	r6, [r5], #1
 8015250:	eba5 060b 	sub.w	r6, r5, fp
 8015254:	45b1      	cmp	r9, r6
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	d139      	bne.n	80152d0 <_dtoa_r+0x6c8>
 801525c:	f7eb f82e 	bl	80002bc <__adddf3>
 8015260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015264:	4606      	mov	r6, r0
 8015266:	460f      	mov	r7, r1
 8015268:	f7eb fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 801526c:	b9c8      	cbnz	r0, 80152a2 <_dtoa_r+0x69a>
 801526e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015272:	4630      	mov	r0, r6
 8015274:	4639      	mov	r1, r7
 8015276:	f7eb fc3f 	bl	8000af8 <__aeabi_dcmpeq>
 801527a:	b110      	cbz	r0, 8015282 <_dtoa_r+0x67a>
 801527c:	f018 0f01 	tst.w	r8, #1
 8015280:	d10f      	bne.n	80152a2 <_dtoa_r+0x69a>
 8015282:	9904      	ldr	r1, [sp, #16]
 8015284:	4620      	mov	r0, r4
 8015286:	f000 fffd 	bl	8016284 <_Bfree>
 801528a:	2300      	movs	r3, #0
 801528c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801528e:	702b      	strb	r3, [r5, #0]
 8015290:	f10a 0301 	add.w	r3, sl, #1
 8015294:	6013      	str	r3, [r2, #0]
 8015296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 8241 	beq.w	8015720 <_dtoa_r+0xb18>
 801529e:	601d      	str	r5, [r3, #0]
 80152a0:	e23e      	b.n	8015720 <_dtoa_r+0xb18>
 80152a2:	f8cd a020 	str.w	sl, [sp, #32]
 80152a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80152aa:	2a39      	cmp	r2, #57	; 0x39
 80152ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80152b0:	d108      	bne.n	80152c4 <_dtoa_r+0x6bc>
 80152b2:	459b      	cmp	fp, r3
 80152b4:	d10a      	bne.n	80152cc <_dtoa_r+0x6c4>
 80152b6:	9b08      	ldr	r3, [sp, #32]
 80152b8:	3301      	adds	r3, #1
 80152ba:	9308      	str	r3, [sp, #32]
 80152bc:	2330      	movs	r3, #48	; 0x30
 80152be:	f88b 3000 	strb.w	r3, [fp]
 80152c2:	465b      	mov	r3, fp
 80152c4:	781a      	ldrb	r2, [r3, #0]
 80152c6:	3201      	adds	r2, #1
 80152c8:	701a      	strb	r2, [r3, #0]
 80152ca:	e78c      	b.n	80151e6 <_dtoa_r+0x5de>
 80152cc:	461d      	mov	r5, r3
 80152ce:	e7ea      	b.n	80152a6 <_dtoa_r+0x69e>
 80152d0:	2200      	movs	r2, #0
 80152d2:	4b9b      	ldr	r3, [pc, #620]	; (8015540 <_dtoa_r+0x938>)
 80152d4:	f7eb f9a8 	bl	8000628 <__aeabi_dmul>
 80152d8:	2200      	movs	r2, #0
 80152da:	2300      	movs	r3, #0
 80152dc:	4606      	mov	r6, r0
 80152de:	460f      	mov	r7, r1
 80152e0:	f7eb fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	d09a      	beq.n	801521e <_dtoa_r+0x616>
 80152e8:	e7cb      	b.n	8015282 <_dtoa_r+0x67a>
 80152ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152ec:	2a00      	cmp	r2, #0
 80152ee:	f000 808b 	beq.w	8015408 <_dtoa_r+0x800>
 80152f2:	9a06      	ldr	r2, [sp, #24]
 80152f4:	2a01      	cmp	r2, #1
 80152f6:	dc6e      	bgt.n	80153d6 <_dtoa_r+0x7ce>
 80152f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152fa:	2a00      	cmp	r2, #0
 80152fc:	d067      	beq.n	80153ce <_dtoa_r+0x7c6>
 80152fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015302:	9f07      	ldr	r7, [sp, #28]
 8015304:	9d05      	ldr	r5, [sp, #20]
 8015306:	9a05      	ldr	r2, [sp, #20]
 8015308:	2101      	movs	r1, #1
 801530a:	441a      	add	r2, r3
 801530c:	4620      	mov	r0, r4
 801530e:	9205      	str	r2, [sp, #20]
 8015310:	4498      	add	r8, r3
 8015312:	f001 f895 	bl	8016440 <__i2b>
 8015316:	4606      	mov	r6, r0
 8015318:	2d00      	cmp	r5, #0
 801531a:	dd0c      	ble.n	8015336 <_dtoa_r+0x72e>
 801531c:	f1b8 0f00 	cmp.w	r8, #0
 8015320:	dd09      	ble.n	8015336 <_dtoa_r+0x72e>
 8015322:	4545      	cmp	r5, r8
 8015324:	9a05      	ldr	r2, [sp, #20]
 8015326:	462b      	mov	r3, r5
 8015328:	bfa8      	it	ge
 801532a:	4643      	movge	r3, r8
 801532c:	1ad2      	subs	r2, r2, r3
 801532e:	9205      	str	r2, [sp, #20]
 8015330:	1aed      	subs	r5, r5, r3
 8015332:	eba8 0803 	sub.w	r8, r8, r3
 8015336:	9b07      	ldr	r3, [sp, #28]
 8015338:	b1eb      	cbz	r3, 8015376 <_dtoa_r+0x76e>
 801533a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801533c:	2b00      	cmp	r3, #0
 801533e:	d067      	beq.n	8015410 <_dtoa_r+0x808>
 8015340:	b18f      	cbz	r7, 8015366 <_dtoa_r+0x75e>
 8015342:	4631      	mov	r1, r6
 8015344:	463a      	mov	r2, r7
 8015346:	4620      	mov	r0, r4
 8015348:	f001 f91a 	bl	8016580 <__pow5mult>
 801534c:	9a04      	ldr	r2, [sp, #16]
 801534e:	4601      	mov	r1, r0
 8015350:	4606      	mov	r6, r0
 8015352:	4620      	mov	r0, r4
 8015354:	f001 f87d 	bl	8016452 <__multiply>
 8015358:	9904      	ldr	r1, [sp, #16]
 801535a:	9008      	str	r0, [sp, #32]
 801535c:	4620      	mov	r0, r4
 801535e:	f000 ff91 	bl	8016284 <_Bfree>
 8015362:	9b08      	ldr	r3, [sp, #32]
 8015364:	9304      	str	r3, [sp, #16]
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	1bda      	subs	r2, r3, r7
 801536a:	d004      	beq.n	8015376 <_dtoa_r+0x76e>
 801536c:	9904      	ldr	r1, [sp, #16]
 801536e:	4620      	mov	r0, r4
 8015370:	f001 f906 	bl	8016580 <__pow5mult>
 8015374:	9004      	str	r0, [sp, #16]
 8015376:	2101      	movs	r1, #1
 8015378:	4620      	mov	r0, r4
 801537a:	f001 f861 	bl	8016440 <__i2b>
 801537e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015380:	4607      	mov	r7, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 81d0 	beq.w	8015728 <_dtoa_r+0xb20>
 8015388:	461a      	mov	r2, r3
 801538a:	4601      	mov	r1, r0
 801538c:	4620      	mov	r0, r4
 801538e:	f001 f8f7 	bl	8016580 <__pow5mult>
 8015392:	9b06      	ldr	r3, [sp, #24]
 8015394:	2b01      	cmp	r3, #1
 8015396:	4607      	mov	r7, r0
 8015398:	dc40      	bgt.n	801541c <_dtoa_r+0x814>
 801539a:	9b00      	ldr	r3, [sp, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d139      	bne.n	8015414 <_dtoa_r+0x80c>
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d136      	bne.n	8015418 <_dtoa_r+0x810>
 80153aa:	9b01      	ldr	r3, [sp, #4]
 80153ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80153b0:	0d1b      	lsrs	r3, r3, #20
 80153b2:	051b      	lsls	r3, r3, #20
 80153b4:	b12b      	cbz	r3, 80153c2 <_dtoa_r+0x7ba>
 80153b6:	9b05      	ldr	r3, [sp, #20]
 80153b8:	3301      	adds	r3, #1
 80153ba:	9305      	str	r3, [sp, #20]
 80153bc:	f108 0801 	add.w	r8, r8, #1
 80153c0:	2301      	movs	r3, #1
 80153c2:	9307      	str	r3, [sp, #28]
 80153c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d12a      	bne.n	8015420 <_dtoa_r+0x818>
 80153ca:	2001      	movs	r0, #1
 80153cc:	e030      	b.n	8015430 <_dtoa_r+0x828>
 80153ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80153d4:	e795      	b.n	8015302 <_dtoa_r+0x6fa>
 80153d6:	9b07      	ldr	r3, [sp, #28]
 80153d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80153dc:	42bb      	cmp	r3, r7
 80153de:	bfbf      	itttt	lt
 80153e0:	9b07      	ldrlt	r3, [sp, #28]
 80153e2:	9707      	strlt	r7, [sp, #28]
 80153e4:	1afa      	sublt	r2, r7, r3
 80153e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80153e8:	bfbb      	ittet	lt
 80153ea:	189b      	addlt	r3, r3, r2
 80153ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80153ee:	1bdf      	subge	r7, r3, r7
 80153f0:	2700      	movlt	r7, #0
 80153f2:	f1b9 0f00 	cmp.w	r9, #0
 80153f6:	bfb5      	itete	lt
 80153f8:	9b05      	ldrlt	r3, [sp, #20]
 80153fa:	9d05      	ldrge	r5, [sp, #20]
 80153fc:	eba3 0509 	sublt.w	r5, r3, r9
 8015400:	464b      	movge	r3, r9
 8015402:	bfb8      	it	lt
 8015404:	2300      	movlt	r3, #0
 8015406:	e77e      	b.n	8015306 <_dtoa_r+0x6fe>
 8015408:	9f07      	ldr	r7, [sp, #28]
 801540a:	9d05      	ldr	r5, [sp, #20]
 801540c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801540e:	e783      	b.n	8015318 <_dtoa_r+0x710>
 8015410:	9a07      	ldr	r2, [sp, #28]
 8015412:	e7ab      	b.n	801536c <_dtoa_r+0x764>
 8015414:	2300      	movs	r3, #0
 8015416:	e7d4      	b.n	80153c2 <_dtoa_r+0x7ba>
 8015418:	9b00      	ldr	r3, [sp, #0]
 801541a:	e7d2      	b.n	80153c2 <_dtoa_r+0x7ba>
 801541c:	2300      	movs	r3, #0
 801541e:	9307      	str	r3, [sp, #28]
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015426:	6918      	ldr	r0, [r3, #16]
 8015428:	f000 ffbc 	bl	80163a4 <__hi0bits>
 801542c:	f1c0 0020 	rsb	r0, r0, #32
 8015430:	4440      	add	r0, r8
 8015432:	f010 001f 	ands.w	r0, r0, #31
 8015436:	d047      	beq.n	80154c8 <_dtoa_r+0x8c0>
 8015438:	f1c0 0320 	rsb	r3, r0, #32
 801543c:	2b04      	cmp	r3, #4
 801543e:	dd3b      	ble.n	80154b8 <_dtoa_r+0x8b0>
 8015440:	9b05      	ldr	r3, [sp, #20]
 8015442:	f1c0 001c 	rsb	r0, r0, #28
 8015446:	4403      	add	r3, r0
 8015448:	9305      	str	r3, [sp, #20]
 801544a:	4405      	add	r5, r0
 801544c:	4480      	add	r8, r0
 801544e:	9b05      	ldr	r3, [sp, #20]
 8015450:	2b00      	cmp	r3, #0
 8015452:	dd05      	ble.n	8015460 <_dtoa_r+0x858>
 8015454:	461a      	mov	r2, r3
 8015456:	9904      	ldr	r1, [sp, #16]
 8015458:	4620      	mov	r0, r4
 801545a:	f001 f8df 	bl	801661c <__lshift>
 801545e:	9004      	str	r0, [sp, #16]
 8015460:	f1b8 0f00 	cmp.w	r8, #0
 8015464:	dd05      	ble.n	8015472 <_dtoa_r+0x86a>
 8015466:	4639      	mov	r1, r7
 8015468:	4642      	mov	r2, r8
 801546a:	4620      	mov	r0, r4
 801546c:	f001 f8d6 	bl	801661c <__lshift>
 8015470:	4607      	mov	r7, r0
 8015472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015474:	b353      	cbz	r3, 80154cc <_dtoa_r+0x8c4>
 8015476:	4639      	mov	r1, r7
 8015478:	9804      	ldr	r0, [sp, #16]
 801547a:	f001 f923 	bl	80166c4 <__mcmp>
 801547e:	2800      	cmp	r0, #0
 8015480:	da24      	bge.n	80154cc <_dtoa_r+0x8c4>
 8015482:	2300      	movs	r3, #0
 8015484:	220a      	movs	r2, #10
 8015486:	9904      	ldr	r1, [sp, #16]
 8015488:	4620      	mov	r0, r4
 801548a:	f000 ff12 	bl	80162b2 <__multadd>
 801548e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015490:	9004      	str	r0, [sp, #16]
 8015492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015496:	2b00      	cmp	r3, #0
 8015498:	f000 814d 	beq.w	8015736 <_dtoa_r+0xb2e>
 801549c:	2300      	movs	r3, #0
 801549e:	4631      	mov	r1, r6
 80154a0:	220a      	movs	r2, #10
 80154a2:	4620      	mov	r0, r4
 80154a4:	f000 ff05 	bl	80162b2 <__multadd>
 80154a8:	9b02      	ldr	r3, [sp, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	4606      	mov	r6, r0
 80154ae:	dc4f      	bgt.n	8015550 <_dtoa_r+0x948>
 80154b0:	9b06      	ldr	r3, [sp, #24]
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	dd4c      	ble.n	8015550 <_dtoa_r+0x948>
 80154b6:	e011      	b.n	80154dc <_dtoa_r+0x8d4>
 80154b8:	d0c9      	beq.n	801544e <_dtoa_r+0x846>
 80154ba:	9a05      	ldr	r2, [sp, #20]
 80154bc:	331c      	adds	r3, #28
 80154be:	441a      	add	r2, r3
 80154c0:	9205      	str	r2, [sp, #20]
 80154c2:	441d      	add	r5, r3
 80154c4:	4498      	add	r8, r3
 80154c6:	e7c2      	b.n	801544e <_dtoa_r+0x846>
 80154c8:	4603      	mov	r3, r0
 80154ca:	e7f6      	b.n	80154ba <_dtoa_r+0x8b2>
 80154cc:	f1b9 0f00 	cmp.w	r9, #0
 80154d0:	dc38      	bgt.n	8015544 <_dtoa_r+0x93c>
 80154d2:	9b06      	ldr	r3, [sp, #24]
 80154d4:	2b02      	cmp	r3, #2
 80154d6:	dd35      	ble.n	8015544 <_dtoa_r+0x93c>
 80154d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80154dc:	9b02      	ldr	r3, [sp, #8]
 80154de:	b963      	cbnz	r3, 80154fa <_dtoa_r+0x8f2>
 80154e0:	4639      	mov	r1, r7
 80154e2:	2205      	movs	r2, #5
 80154e4:	4620      	mov	r0, r4
 80154e6:	f000 fee4 	bl	80162b2 <__multadd>
 80154ea:	4601      	mov	r1, r0
 80154ec:	4607      	mov	r7, r0
 80154ee:	9804      	ldr	r0, [sp, #16]
 80154f0:	f001 f8e8 	bl	80166c4 <__mcmp>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f73f adcc 	bgt.w	8015092 <_dtoa_r+0x48a>
 80154fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154fc:	465d      	mov	r5, fp
 80154fe:	ea6f 0a03 	mvn.w	sl, r3
 8015502:	f04f 0900 	mov.w	r9, #0
 8015506:	4639      	mov	r1, r7
 8015508:	4620      	mov	r0, r4
 801550a:	f000 febb 	bl	8016284 <_Bfree>
 801550e:	2e00      	cmp	r6, #0
 8015510:	f43f aeb7 	beq.w	8015282 <_dtoa_r+0x67a>
 8015514:	f1b9 0f00 	cmp.w	r9, #0
 8015518:	d005      	beq.n	8015526 <_dtoa_r+0x91e>
 801551a:	45b1      	cmp	r9, r6
 801551c:	d003      	beq.n	8015526 <_dtoa_r+0x91e>
 801551e:	4649      	mov	r1, r9
 8015520:	4620      	mov	r0, r4
 8015522:	f000 feaf 	bl	8016284 <_Bfree>
 8015526:	4631      	mov	r1, r6
 8015528:	4620      	mov	r0, r4
 801552a:	f000 feab 	bl	8016284 <_Bfree>
 801552e:	e6a8      	b.n	8015282 <_dtoa_r+0x67a>
 8015530:	2700      	movs	r7, #0
 8015532:	463e      	mov	r6, r7
 8015534:	e7e1      	b.n	80154fa <_dtoa_r+0x8f2>
 8015536:	f8dd a020 	ldr.w	sl, [sp, #32]
 801553a:	463e      	mov	r6, r7
 801553c:	e5a9      	b.n	8015092 <_dtoa_r+0x48a>
 801553e:	bf00      	nop
 8015540:	40240000 	.word	0x40240000
 8015544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015546:	f8cd 9008 	str.w	r9, [sp, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	f000 80fa 	beq.w	8015744 <_dtoa_r+0xb3c>
 8015550:	2d00      	cmp	r5, #0
 8015552:	dd05      	ble.n	8015560 <_dtoa_r+0x958>
 8015554:	4631      	mov	r1, r6
 8015556:	462a      	mov	r2, r5
 8015558:	4620      	mov	r0, r4
 801555a:	f001 f85f 	bl	801661c <__lshift>
 801555e:	4606      	mov	r6, r0
 8015560:	9b07      	ldr	r3, [sp, #28]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d04c      	beq.n	8015600 <_dtoa_r+0x9f8>
 8015566:	6871      	ldr	r1, [r6, #4]
 8015568:	4620      	mov	r0, r4
 801556a:	f000 fe57 	bl	801621c <_Balloc>
 801556e:	6932      	ldr	r2, [r6, #16]
 8015570:	3202      	adds	r2, #2
 8015572:	4605      	mov	r5, r0
 8015574:	0092      	lsls	r2, r2, #2
 8015576:	f106 010c 	add.w	r1, r6, #12
 801557a:	300c      	adds	r0, #12
 801557c:	f7fd fb54 	bl	8012c28 <memcpy>
 8015580:	2201      	movs	r2, #1
 8015582:	4629      	mov	r1, r5
 8015584:	4620      	mov	r0, r4
 8015586:	f001 f849 	bl	801661c <__lshift>
 801558a:	9b00      	ldr	r3, [sp, #0]
 801558c:	f8cd b014 	str.w	fp, [sp, #20]
 8015590:	f003 0301 	and.w	r3, r3, #1
 8015594:	46b1      	mov	r9, r6
 8015596:	9307      	str	r3, [sp, #28]
 8015598:	4606      	mov	r6, r0
 801559a:	4639      	mov	r1, r7
 801559c:	9804      	ldr	r0, [sp, #16]
 801559e:	f7ff faa7 	bl	8014af0 <quorem>
 80155a2:	4649      	mov	r1, r9
 80155a4:	4605      	mov	r5, r0
 80155a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80155aa:	9804      	ldr	r0, [sp, #16]
 80155ac:	f001 f88a 	bl	80166c4 <__mcmp>
 80155b0:	4632      	mov	r2, r6
 80155b2:	9000      	str	r0, [sp, #0]
 80155b4:	4639      	mov	r1, r7
 80155b6:	4620      	mov	r0, r4
 80155b8:	f001 f89e 	bl	80166f8 <__mdiff>
 80155bc:	68c3      	ldr	r3, [r0, #12]
 80155be:	4602      	mov	r2, r0
 80155c0:	bb03      	cbnz	r3, 8015604 <_dtoa_r+0x9fc>
 80155c2:	4601      	mov	r1, r0
 80155c4:	9008      	str	r0, [sp, #32]
 80155c6:	9804      	ldr	r0, [sp, #16]
 80155c8:	f001 f87c 	bl	80166c4 <__mcmp>
 80155cc:	9a08      	ldr	r2, [sp, #32]
 80155ce:	4603      	mov	r3, r0
 80155d0:	4611      	mov	r1, r2
 80155d2:	4620      	mov	r0, r4
 80155d4:	9308      	str	r3, [sp, #32]
 80155d6:	f000 fe55 	bl	8016284 <_Bfree>
 80155da:	9b08      	ldr	r3, [sp, #32]
 80155dc:	b9a3      	cbnz	r3, 8015608 <_dtoa_r+0xa00>
 80155de:	9a06      	ldr	r2, [sp, #24]
 80155e0:	b992      	cbnz	r2, 8015608 <_dtoa_r+0xa00>
 80155e2:	9a07      	ldr	r2, [sp, #28]
 80155e4:	b982      	cbnz	r2, 8015608 <_dtoa_r+0xa00>
 80155e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155ea:	d029      	beq.n	8015640 <_dtoa_r+0xa38>
 80155ec:	9b00      	ldr	r3, [sp, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	dd01      	ble.n	80155f6 <_dtoa_r+0x9ee>
 80155f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80155f6:	9b05      	ldr	r3, [sp, #20]
 80155f8:	1c5d      	adds	r5, r3, #1
 80155fa:	f883 8000 	strb.w	r8, [r3]
 80155fe:	e782      	b.n	8015506 <_dtoa_r+0x8fe>
 8015600:	4630      	mov	r0, r6
 8015602:	e7c2      	b.n	801558a <_dtoa_r+0x982>
 8015604:	2301      	movs	r3, #1
 8015606:	e7e3      	b.n	80155d0 <_dtoa_r+0x9c8>
 8015608:	9a00      	ldr	r2, [sp, #0]
 801560a:	2a00      	cmp	r2, #0
 801560c:	db04      	blt.n	8015618 <_dtoa_r+0xa10>
 801560e:	d125      	bne.n	801565c <_dtoa_r+0xa54>
 8015610:	9a06      	ldr	r2, [sp, #24]
 8015612:	bb1a      	cbnz	r2, 801565c <_dtoa_r+0xa54>
 8015614:	9a07      	ldr	r2, [sp, #28]
 8015616:	bb0a      	cbnz	r2, 801565c <_dtoa_r+0xa54>
 8015618:	2b00      	cmp	r3, #0
 801561a:	ddec      	ble.n	80155f6 <_dtoa_r+0x9ee>
 801561c:	2201      	movs	r2, #1
 801561e:	9904      	ldr	r1, [sp, #16]
 8015620:	4620      	mov	r0, r4
 8015622:	f000 fffb 	bl	801661c <__lshift>
 8015626:	4639      	mov	r1, r7
 8015628:	9004      	str	r0, [sp, #16]
 801562a:	f001 f84b 	bl	80166c4 <__mcmp>
 801562e:	2800      	cmp	r0, #0
 8015630:	dc03      	bgt.n	801563a <_dtoa_r+0xa32>
 8015632:	d1e0      	bne.n	80155f6 <_dtoa_r+0x9ee>
 8015634:	f018 0f01 	tst.w	r8, #1
 8015638:	d0dd      	beq.n	80155f6 <_dtoa_r+0x9ee>
 801563a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801563e:	d1d8      	bne.n	80155f2 <_dtoa_r+0x9ea>
 8015640:	9b05      	ldr	r3, [sp, #20]
 8015642:	9a05      	ldr	r2, [sp, #20]
 8015644:	1c5d      	adds	r5, r3, #1
 8015646:	2339      	movs	r3, #57	; 0x39
 8015648:	7013      	strb	r3, [r2, #0]
 801564a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801564e:	2b39      	cmp	r3, #57	; 0x39
 8015650:	f105 32ff 	add.w	r2, r5, #4294967295
 8015654:	d04f      	beq.n	80156f6 <_dtoa_r+0xaee>
 8015656:	3301      	adds	r3, #1
 8015658:	7013      	strb	r3, [r2, #0]
 801565a:	e754      	b.n	8015506 <_dtoa_r+0x8fe>
 801565c:	9a05      	ldr	r2, [sp, #20]
 801565e:	2b00      	cmp	r3, #0
 8015660:	f102 0501 	add.w	r5, r2, #1
 8015664:	dd06      	ble.n	8015674 <_dtoa_r+0xa6c>
 8015666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801566a:	d0e9      	beq.n	8015640 <_dtoa_r+0xa38>
 801566c:	f108 0801 	add.w	r8, r8, #1
 8015670:	9b05      	ldr	r3, [sp, #20]
 8015672:	e7c2      	b.n	80155fa <_dtoa_r+0x9f2>
 8015674:	9a02      	ldr	r2, [sp, #8]
 8015676:	f805 8c01 	strb.w	r8, [r5, #-1]
 801567a:	eba5 030b 	sub.w	r3, r5, fp
 801567e:	4293      	cmp	r3, r2
 8015680:	d021      	beq.n	80156c6 <_dtoa_r+0xabe>
 8015682:	2300      	movs	r3, #0
 8015684:	220a      	movs	r2, #10
 8015686:	9904      	ldr	r1, [sp, #16]
 8015688:	4620      	mov	r0, r4
 801568a:	f000 fe12 	bl	80162b2 <__multadd>
 801568e:	45b1      	cmp	r9, r6
 8015690:	9004      	str	r0, [sp, #16]
 8015692:	f04f 0300 	mov.w	r3, #0
 8015696:	f04f 020a 	mov.w	r2, #10
 801569a:	4649      	mov	r1, r9
 801569c:	4620      	mov	r0, r4
 801569e:	d105      	bne.n	80156ac <_dtoa_r+0xaa4>
 80156a0:	f000 fe07 	bl	80162b2 <__multadd>
 80156a4:	4681      	mov	r9, r0
 80156a6:	4606      	mov	r6, r0
 80156a8:	9505      	str	r5, [sp, #20]
 80156aa:	e776      	b.n	801559a <_dtoa_r+0x992>
 80156ac:	f000 fe01 	bl	80162b2 <__multadd>
 80156b0:	4631      	mov	r1, r6
 80156b2:	4681      	mov	r9, r0
 80156b4:	2300      	movs	r3, #0
 80156b6:	220a      	movs	r2, #10
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 fdfa 	bl	80162b2 <__multadd>
 80156be:	4606      	mov	r6, r0
 80156c0:	e7f2      	b.n	80156a8 <_dtoa_r+0xaa0>
 80156c2:	f04f 0900 	mov.w	r9, #0
 80156c6:	2201      	movs	r2, #1
 80156c8:	9904      	ldr	r1, [sp, #16]
 80156ca:	4620      	mov	r0, r4
 80156cc:	f000 ffa6 	bl	801661c <__lshift>
 80156d0:	4639      	mov	r1, r7
 80156d2:	9004      	str	r0, [sp, #16]
 80156d4:	f000 fff6 	bl	80166c4 <__mcmp>
 80156d8:	2800      	cmp	r0, #0
 80156da:	dcb6      	bgt.n	801564a <_dtoa_r+0xa42>
 80156dc:	d102      	bne.n	80156e4 <_dtoa_r+0xadc>
 80156de:	f018 0f01 	tst.w	r8, #1
 80156e2:	d1b2      	bne.n	801564a <_dtoa_r+0xa42>
 80156e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156e8:	2b30      	cmp	r3, #48	; 0x30
 80156ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80156ee:	f47f af0a 	bne.w	8015506 <_dtoa_r+0x8fe>
 80156f2:	4615      	mov	r5, r2
 80156f4:	e7f6      	b.n	80156e4 <_dtoa_r+0xadc>
 80156f6:	4593      	cmp	fp, r2
 80156f8:	d105      	bne.n	8015706 <_dtoa_r+0xafe>
 80156fa:	2331      	movs	r3, #49	; 0x31
 80156fc:	f10a 0a01 	add.w	sl, sl, #1
 8015700:	f88b 3000 	strb.w	r3, [fp]
 8015704:	e6ff      	b.n	8015506 <_dtoa_r+0x8fe>
 8015706:	4615      	mov	r5, r2
 8015708:	e79f      	b.n	801564a <_dtoa_r+0xa42>
 801570a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015770 <_dtoa_r+0xb68>
 801570e:	e007      	b.n	8015720 <_dtoa_r+0xb18>
 8015710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015774 <_dtoa_r+0xb6c>
 8015716:	b11b      	cbz	r3, 8015720 <_dtoa_r+0xb18>
 8015718:	f10b 0308 	add.w	r3, fp, #8
 801571c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801571e:	6013      	str	r3, [r2, #0]
 8015720:	4658      	mov	r0, fp
 8015722:	b017      	add	sp, #92	; 0x5c
 8015724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015728:	9b06      	ldr	r3, [sp, #24]
 801572a:	2b01      	cmp	r3, #1
 801572c:	f77f ae35 	ble.w	801539a <_dtoa_r+0x792>
 8015730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015732:	9307      	str	r3, [sp, #28]
 8015734:	e649      	b.n	80153ca <_dtoa_r+0x7c2>
 8015736:	9b02      	ldr	r3, [sp, #8]
 8015738:	2b00      	cmp	r3, #0
 801573a:	dc03      	bgt.n	8015744 <_dtoa_r+0xb3c>
 801573c:	9b06      	ldr	r3, [sp, #24]
 801573e:	2b02      	cmp	r3, #2
 8015740:	f73f aecc 	bgt.w	80154dc <_dtoa_r+0x8d4>
 8015744:	465d      	mov	r5, fp
 8015746:	4639      	mov	r1, r7
 8015748:	9804      	ldr	r0, [sp, #16]
 801574a:	f7ff f9d1 	bl	8014af0 <quorem>
 801574e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015752:	f805 8b01 	strb.w	r8, [r5], #1
 8015756:	9a02      	ldr	r2, [sp, #8]
 8015758:	eba5 030b 	sub.w	r3, r5, fp
 801575c:	429a      	cmp	r2, r3
 801575e:	ddb0      	ble.n	80156c2 <_dtoa_r+0xaba>
 8015760:	2300      	movs	r3, #0
 8015762:	220a      	movs	r2, #10
 8015764:	9904      	ldr	r1, [sp, #16]
 8015766:	4620      	mov	r0, r4
 8015768:	f000 fda3 	bl	80162b2 <__multadd>
 801576c:	9004      	str	r0, [sp, #16]
 801576e:	e7ea      	b.n	8015746 <_dtoa_r+0xb3e>
 8015770:	08018493 	.word	0x08018493
 8015774:	080182f0 	.word	0x080182f0

08015778 <__sflush_r>:
 8015778:	898a      	ldrh	r2, [r1, #12]
 801577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801577e:	4605      	mov	r5, r0
 8015780:	0710      	lsls	r0, r2, #28
 8015782:	460c      	mov	r4, r1
 8015784:	d458      	bmi.n	8015838 <__sflush_r+0xc0>
 8015786:	684b      	ldr	r3, [r1, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	dc05      	bgt.n	8015798 <__sflush_r+0x20>
 801578c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801578e:	2b00      	cmp	r3, #0
 8015790:	dc02      	bgt.n	8015798 <__sflush_r+0x20>
 8015792:	2000      	movs	r0, #0
 8015794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801579a:	2e00      	cmp	r6, #0
 801579c:	d0f9      	beq.n	8015792 <__sflush_r+0x1a>
 801579e:	2300      	movs	r3, #0
 80157a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80157a4:	682f      	ldr	r7, [r5, #0]
 80157a6:	6a21      	ldr	r1, [r4, #32]
 80157a8:	602b      	str	r3, [r5, #0]
 80157aa:	d032      	beq.n	8015812 <__sflush_r+0x9a>
 80157ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80157ae:	89a3      	ldrh	r3, [r4, #12]
 80157b0:	075a      	lsls	r2, r3, #29
 80157b2:	d505      	bpl.n	80157c0 <__sflush_r+0x48>
 80157b4:	6863      	ldr	r3, [r4, #4]
 80157b6:	1ac0      	subs	r0, r0, r3
 80157b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157ba:	b10b      	cbz	r3, 80157c0 <__sflush_r+0x48>
 80157bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157be:	1ac0      	subs	r0, r0, r3
 80157c0:	2300      	movs	r3, #0
 80157c2:	4602      	mov	r2, r0
 80157c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157c6:	6a21      	ldr	r1, [r4, #32]
 80157c8:	4628      	mov	r0, r5
 80157ca:	47b0      	blx	r6
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	89a3      	ldrh	r3, [r4, #12]
 80157d0:	d106      	bne.n	80157e0 <__sflush_r+0x68>
 80157d2:	6829      	ldr	r1, [r5, #0]
 80157d4:	291d      	cmp	r1, #29
 80157d6:	d848      	bhi.n	801586a <__sflush_r+0xf2>
 80157d8:	4a29      	ldr	r2, [pc, #164]	; (8015880 <__sflush_r+0x108>)
 80157da:	40ca      	lsrs	r2, r1
 80157dc:	07d6      	lsls	r6, r2, #31
 80157de:	d544      	bpl.n	801586a <__sflush_r+0xf2>
 80157e0:	2200      	movs	r2, #0
 80157e2:	6062      	str	r2, [r4, #4]
 80157e4:	04d9      	lsls	r1, r3, #19
 80157e6:	6922      	ldr	r2, [r4, #16]
 80157e8:	6022      	str	r2, [r4, #0]
 80157ea:	d504      	bpl.n	80157f6 <__sflush_r+0x7e>
 80157ec:	1c42      	adds	r2, r0, #1
 80157ee:	d101      	bne.n	80157f4 <__sflush_r+0x7c>
 80157f0:	682b      	ldr	r3, [r5, #0]
 80157f2:	b903      	cbnz	r3, 80157f6 <__sflush_r+0x7e>
 80157f4:	6560      	str	r0, [r4, #84]	; 0x54
 80157f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157f8:	602f      	str	r7, [r5, #0]
 80157fa:	2900      	cmp	r1, #0
 80157fc:	d0c9      	beq.n	8015792 <__sflush_r+0x1a>
 80157fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015802:	4299      	cmp	r1, r3
 8015804:	d002      	beq.n	801580c <__sflush_r+0x94>
 8015806:	4628      	mov	r0, r5
 8015808:	f001 f916 	bl	8016a38 <_free_r>
 801580c:	2000      	movs	r0, #0
 801580e:	6360      	str	r0, [r4, #52]	; 0x34
 8015810:	e7c0      	b.n	8015794 <__sflush_r+0x1c>
 8015812:	2301      	movs	r3, #1
 8015814:	4628      	mov	r0, r5
 8015816:	47b0      	blx	r6
 8015818:	1c41      	adds	r1, r0, #1
 801581a:	d1c8      	bne.n	80157ae <__sflush_r+0x36>
 801581c:	682b      	ldr	r3, [r5, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d0c5      	beq.n	80157ae <__sflush_r+0x36>
 8015822:	2b1d      	cmp	r3, #29
 8015824:	d001      	beq.n	801582a <__sflush_r+0xb2>
 8015826:	2b16      	cmp	r3, #22
 8015828:	d101      	bne.n	801582e <__sflush_r+0xb6>
 801582a:	602f      	str	r7, [r5, #0]
 801582c:	e7b1      	b.n	8015792 <__sflush_r+0x1a>
 801582e:	89a3      	ldrh	r3, [r4, #12]
 8015830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015834:	81a3      	strh	r3, [r4, #12]
 8015836:	e7ad      	b.n	8015794 <__sflush_r+0x1c>
 8015838:	690f      	ldr	r7, [r1, #16]
 801583a:	2f00      	cmp	r7, #0
 801583c:	d0a9      	beq.n	8015792 <__sflush_r+0x1a>
 801583e:	0793      	lsls	r3, r2, #30
 8015840:	680e      	ldr	r6, [r1, #0]
 8015842:	bf08      	it	eq
 8015844:	694b      	ldreq	r3, [r1, #20]
 8015846:	600f      	str	r7, [r1, #0]
 8015848:	bf18      	it	ne
 801584a:	2300      	movne	r3, #0
 801584c:	eba6 0807 	sub.w	r8, r6, r7
 8015850:	608b      	str	r3, [r1, #8]
 8015852:	f1b8 0f00 	cmp.w	r8, #0
 8015856:	dd9c      	ble.n	8015792 <__sflush_r+0x1a>
 8015858:	4643      	mov	r3, r8
 801585a:	463a      	mov	r2, r7
 801585c:	6a21      	ldr	r1, [r4, #32]
 801585e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015860:	4628      	mov	r0, r5
 8015862:	47b0      	blx	r6
 8015864:	2800      	cmp	r0, #0
 8015866:	dc06      	bgt.n	8015876 <__sflush_r+0xfe>
 8015868:	89a3      	ldrh	r3, [r4, #12]
 801586a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801586e:	81a3      	strh	r3, [r4, #12]
 8015870:	f04f 30ff 	mov.w	r0, #4294967295
 8015874:	e78e      	b.n	8015794 <__sflush_r+0x1c>
 8015876:	4407      	add	r7, r0
 8015878:	eba8 0800 	sub.w	r8, r8, r0
 801587c:	e7e9      	b.n	8015852 <__sflush_r+0xda>
 801587e:	bf00      	nop
 8015880:	20400001 	.word	0x20400001

08015884 <_fflush_r>:
 8015884:	b538      	push	{r3, r4, r5, lr}
 8015886:	690b      	ldr	r3, [r1, #16]
 8015888:	4605      	mov	r5, r0
 801588a:	460c      	mov	r4, r1
 801588c:	b1db      	cbz	r3, 80158c6 <_fflush_r+0x42>
 801588e:	b118      	cbz	r0, 8015898 <_fflush_r+0x14>
 8015890:	6983      	ldr	r3, [r0, #24]
 8015892:	b90b      	cbnz	r3, 8015898 <_fflush_r+0x14>
 8015894:	f000 f860 	bl	8015958 <__sinit>
 8015898:	4b0c      	ldr	r3, [pc, #48]	; (80158cc <_fflush_r+0x48>)
 801589a:	429c      	cmp	r4, r3
 801589c:	d109      	bne.n	80158b2 <_fflush_r+0x2e>
 801589e:	686c      	ldr	r4, [r5, #4]
 80158a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158a4:	b17b      	cbz	r3, 80158c6 <_fflush_r+0x42>
 80158a6:	4621      	mov	r1, r4
 80158a8:	4628      	mov	r0, r5
 80158aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158ae:	f7ff bf63 	b.w	8015778 <__sflush_r>
 80158b2:	4b07      	ldr	r3, [pc, #28]	; (80158d0 <_fflush_r+0x4c>)
 80158b4:	429c      	cmp	r4, r3
 80158b6:	d101      	bne.n	80158bc <_fflush_r+0x38>
 80158b8:	68ac      	ldr	r4, [r5, #8]
 80158ba:	e7f1      	b.n	80158a0 <_fflush_r+0x1c>
 80158bc:	4b05      	ldr	r3, [pc, #20]	; (80158d4 <_fflush_r+0x50>)
 80158be:	429c      	cmp	r4, r3
 80158c0:	bf08      	it	eq
 80158c2:	68ec      	ldreq	r4, [r5, #12]
 80158c4:	e7ec      	b.n	80158a0 <_fflush_r+0x1c>
 80158c6:	2000      	movs	r0, #0
 80158c8:	bd38      	pop	{r3, r4, r5, pc}
 80158ca:	bf00      	nop
 80158cc:	08018320 	.word	0x08018320
 80158d0:	08018340 	.word	0x08018340
 80158d4:	08018300 	.word	0x08018300

080158d8 <std>:
 80158d8:	2300      	movs	r3, #0
 80158da:	b510      	push	{r4, lr}
 80158dc:	4604      	mov	r4, r0
 80158de:	e9c0 3300 	strd	r3, r3, [r0]
 80158e2:	6083      	str	r3, [r0, #8]
 80158e4:	8181      	strh	r1, [r0, #12]
 80158e6:	6643      	str	r3, [r0, #100]	; 0x64
 80158e8:	81c2      	strh	r2, [r0, #14]
 80158ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158ee:	6183      	str	r3, [r0, #24]
 80158f0:	4619      	mov	r1, r3
 80158f2:	2208      	movs	r2, #8
 80158f4:	305c      	adds	r0, #92	; 0x5c
 80158f6:	f7fd f9a2 	bl	8012c3e <memset>
 80158fa:	4b05      	ldr	r3, [pc, #20]	; (8015910 <std+0x38>)
 80158fc:	6263      	str	r3, [r4, #36]	; 0x24
 80158fe:	4b05      	ldr	r3, [pc, #20]	; (8015914 <std+0x3c>)
 8015900:	62a3      	str	r3, [r4, #40]	; 0x28
 8015902:	4b05      	ldr	r3, [pc, #20]	; (8015918 <std+0x40>)
 8015904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015906:	4b05      	ldr	r3, [pc, #20]	; (801591c <std+0x44>)
 8015908:	6224      	str	r4, [r4, #32]
 801590a:	6323      	str	r3, [r4, #48]	; 0x30
 801590c:	bd10      	pop	{r4, pc}
 801590e:	bf00      	nop
 8015910:	08013af5 	.word	0x08013af5
 8015914:	08013b1b 	.word	0x08013b1b
 8015918:	08013b53 	.word	0x08013b53
 801591c:	08013b77 	.word	0x08013b77

08015920 <_cleanup_r>:
 8015920:	4901      	ldr	r1, [pc, #4]	; (8015928 <_cleanup_r+0x8>)
 8015922:	f000 b885 	b.w	8015a30 <_fwalk_reent>
 8015926:	bf00      	nop
 8015928:	08015885 	.word	0x08015885

0801592c <__sfmoreglue>:
 801592c:	b570      	push	{r4, r5, r6, lr}
 801592e:	1e4a      	subs	r2, r1, #1
 8015930:	2568      	movs	r5, #104	; 0x68
 8015932:	4355      	muls	r5, r2
 8015934:	460e      	mov	r6, r1
 8015936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801593a:	f001 f8cb 	bl	8016ad4 <_malloc_r>
 801593e:	4604      	mov	r4, r0
 8015940:	b140      	cbz	r0, 8015954 <__sfmoreglue+0x28>
 8015942:	2100      	movs	r1, #0
 8015944:	e9c0 1600 	strd	r1, r6, [r0]
 8015948:	300c      	adds	r0, #12
 801594a:	60a0      	str	r0, [r4, #8]
 801594c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015950:	f7fd f975 	bl	8012c3e <memset>
 8015954:	4620      	mov	r0, r4
 8015956:	bd70      	pop	{r4, r5, r6, pc}

08015958 <__sinit>:
 8015958:	6983      	ldr	r3, [r0, #24]
 801595a:	b510      	push	{r4, lr}
 801595c:	4604      	mov	r4, r0
 801595e:	bb33      	cbnz	r3, 80159ae <__sinit+0x56>
 8015960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015964:	6503      	str	r3, [r0, #80]	; 0x50
 8015966:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <__sinit+0x58>)
 8015968:	4a12      	ldr	r2, [pc, #72]	; (80159b4 <__sinit+0x5c>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	6282      	str	r2, [r0, #40]	; 0x28
 801596e:	4298      	cmp	r0, r3
 8015970:	bf04      	itt	eq
 8015972:	2301      	moveq	r3, #1
 8015974:	6183      	streq	r3, [r0, #24]
 8015976:	f000 f81f 	bl	80159b8 <__sfp>
 801597a:	6060      	str	r0, [r4, #4]
 801597c:	4620      	mov	r0, r4
 801597e:	f000 f81b 	bl	80159b8 <__sfp>
 8015982:	60a0      	str	r0, [r4, #8]
 8015984:	4620      	mov	r0, r4
 8015986:	f000 f817 	bl	80159b8 <__sfp>
 801598a:	2200      	movs	r2, #0
 801598c:	60e0      	str	r0, [r4, #12]
 801598e:	2104      	movs	r1, #4
 8015990:	6860      	ldr	r0, [r4, #4]
 8015992:	f7ff ffa1 	bl	80158d8 <std>
 8015996:	2201      	movs	r2, #1
 8015998:	2109      	movs	r1, #9
 801599a:	68a0      	ldr	r0, [r4, #8]
 801599c:	f7ff ff9c 	bl	80158d8 <std>
 80159a0:	2202      	movs	r2, #2
 80159a2:	2112      	movs	r1, #18
 80159a4:	68e0      	ldr	r0, [r4, #12]
 80159a6:	f7ff ff97 	bl	80158d8 <std>
 80159aa:	2301      	movs	r3, #1
 80159ac:	61a3      	str	r3, [r4, #24]
 80159ae:	bd10      	pop	{r4, pc}
 80159b0:	08018260 	.word	0x08018260
 80159b4:	08015921 	.word	0x08015921

080159b8 <__sfp>:
 80159b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ba:	4b1b      	ldr	r3, [pc, #108]	; (8015a28 <__sfp+0x70>)
 80159bc:	681e      	ldr	r6, [r3, #0]
 80159be:	69b3      	ldr	r3, [r6, #24]
 80159c0:	4607      	mov	r7, r0
 80159c2:	b913      	cbnz	r3, 80159ca <__sfp+0x12>
 80159c4:	4630      	mov	r0, r6
 80159c6:	f7ff ffc7 	bl	8015958 <__sinit>
 80159ca:	3648      	adds	r6, #72	; 0x48
 80159cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80159d0:	3b01      	subs	r3, #1
 80159d2:	d503      	bpl.n	80159dc <__sfp+0x24>
 80159d4:	6833      	ldr	r3, [r6, #0]
 80159d6:	b133      	cbz	r3, 80159e6 <__sfp+0x2e>
 80159d8:	6836      	ldr	r6, [r6, #0]
 80159da:	e7f7      	b.n	80159cc <__sfp+0x14>
 80159dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159e0:	b16d      	cbz	r5, 80159fe <__sfp+0x46>
 80159e2:	3468      	adds	r4, #104	; 0x68
 80159e4:	e7f4      	b.n	80159d0 <__sfp+0x18>
 80159e6:	2104      	movs	r1, #4
 80159e8:	4638      	mov	r0, r7
 80159ea:	f7ff ff9f 	bl	801592c <__sfmoreglue>
 80159ee:	6030      	str	r0, [r6, #0]
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d1f1      	bne.n	80159d8 <__sfp+0x20>
 80159f4:	230c      	movs	r3, #12
 80159f6:	603b      	str	r3, [r7, #0]
 80159f8:	4604      	mov	r4, r0
 80159fa:	4620      	mov	r0, r4
 80159fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fe:	4b0b      	ldr	r3, [pc, #44]	; (8015a2c <__sfp+0x74>)
 8015a00:	6665      	str	r5, [r4, #100]	; 0x64
 8015a02:	e9c4 5500 	strd	r5, r5, [r4]
 8015a06:	60a5      	str	r5, [r4, #8]
 8015a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015a10:	2208      	movs	r2, #8
 8015a12:	4629      	mov	r1, r5
 8015a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a18:	f7fd f911 	bl	8012c3e <memset>
 8015a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015a24:	e7e9      	b.n	80159fa <__sfp+0x42>
 8015a26:	bf00      	nop
 8015a28:	08018260 	.word	0x08018260
 8015a2c:	ffff0001 	.word	0xffff0001

08015a30 <_fwalk_reent>:
 8015a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a34:	4680      	mov	r8, r0
 8015a36:	4689      	mov	r9, r1
 8015a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a3c:	2600      	movs	r6, #0
 8015a3e:	b914      	cbnz	r4, 8015a46 <_fwalk_reent+0x16>
 8015a40:	4630      	mov	r0, r6
 8015a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015a4a:	3f01      	subs	r7, #1
 8015a4c:	d501      	bpl.n	8015a52 <_fwalk_reent+0x22>
 8015a4e:	6824      	ldr	r4, [r4, #0]
 8015a50:	e7f5      	b.n	8015a3e <_fwalk_reent+0xe>
 8015a52:	89ab      	ldrh	r3, [r5, #12]
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d907      	bls.n	8015a68 <_fwalk_reent+0x38>
 8015a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	d003      	beq.n	8015a68 <_fwalk_reent+0x38>
 8015a60:	4629      	mov	r1, r5
 8015a62:	4640      	mov	r0, r8
 8015a64:	47c8      	blx	r9
 8015a66:	4306      	orrs	r6, r0
 8015a68:	3568      	adds	r5, #104	; 0x68
 8015a6a:	e7ee      	b.n	8015a4a <_fwalk_reent+0x1a>

08015a6c <rshift>:
 8015a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a6e:	6906      	ldr	r6, [r0, #16]
 8015a70:	114b      	asrs	r3, r1, #5
 8015a72:	429e      	cmp	r6, r3
 8015a74:	f100 0414 	add.w	r4, r0, #20
 8015a78:	dd30      	ble.n	8015adc <rshift+0x70>
 8015a7a:	f011 011f 	ands.w	r1, r1, #31
 8015a7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015a82:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015a86:	d108      	bne.n	8015a9a <rshift+0x2e>
 8015a88:	4621      	mov	r1, r4
 8015a8a:	42b2      	cmp	r2, r6
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	d211      	bcs.n	8015ab4 <rshift+0x48>
 8015a90:	f852 3b04 	ldr.w	r3, [r2], #4
 8015a94:	f841 3b04 	str.w	r3, [r1], #4
 8015a98:	e7f7      	b.n	8015a8a <rshift+0x1e>
 8015a9a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015a9e:	f1c1 0c20 	rsb	ip, r1, #32
 8015aa2:	40cd      	lsrs	r5, r1
 8015aa4:	3204      	adds	r2, #4
 8015aa6:	4623      	mov	r3, r4
 8015aa8:	42b2      	cmp	r2, r6
 8015aaa:	4617      	mov	r7, r2
 8015aac:	d30c      	bcc.n	8015ac8 <rshift+0x5c>
 8015aae:	601d      	str	r5, [r3, #0]
 8015ab0:	b105      	cbz	r5, 8015ab4 <rshift+0x48>
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	1b1a      	subs	r2, r3, r4
 8015ab6:	42a3      	cmp	r3, r4
 8015ab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015abc:	bf08      	it	eq
 8015abe:	2300      	moveq	r3, #0
 8015ac0:	6102      	str	r2, [r0, #16]
 8015ac2:	bf08      	it	eq
 8015ac4:	6143      	streq	r3, [r0, #20]
 8015ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ac8:	683f      	ldr	r7, [r7, #0]
 8015aca:	fa07 f70c 	lsl.w	r7, r7, ip
 8015ace:	433d      	orrs	r5, r7
 8015ad0:	f843 5b04 	str.w	r5, [r3], #4
 8015ad4:	f852 5b04 	ldr.w	r5, [r2], #4
 8015ad8:	40cd      	lsrs	r5, r1
 8015ada:	e7e5      	b.n	8015aa8 <rshift+0x3c>
 8015adc:	4623      	mov	r3, r4
 8015ade:	e7e9      	b.n	8015ab4 <rshift+0x48>

08015ae0 <__hexdig_fun>:
 8015ae0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015ae4:	2b09      	cmp	r3, #9
 8015ae6:	d802      	bhi.n	8015aee <__hexdig_fun+0xe>
 8015ae8:	3820      	subs	r0, #32
 8015aea:	b2c0      	uxtb	r0, r0
 8015aec:	4770      	bx	lr
 8015aee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015af2:	2b05      	cmp	r3, #5
 8015af4:	d801      	bhi.n	8015afa <__hexdig_fun+0x1a>
 8015af6:	3847      	subs	r0, #71	; 0x47
 8015af8:	e7f7      	b.n	8015aea <__hexdig_fun+0xa>
 8015afa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015afe:	2b05      	cmp	r3, #5
 8015b00:	d801      	bhi.n	8015b06 <__hexdig_fun+0x26>
 8015b02:	3827      	subs	r0, #39	; 0x27
 8015b04:	e7f1      	b.n	8015aea <__hexdig_fun+0xa>
 8015b06:	2000      	movs	r0, #0
 8015b08:	4770      	bx	lr

08015b0a <__gethex>:
 8015b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b0e:	b08b      	sub	sp, #44	; 0x2c
 8015b10:	468a      	mov	sl, r1
 8015b12:	9002      	str	r0, [sp, #8]
 8015b14:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015b16:	9306      	str	r3, [sp, #24]
 8015b18:	4690      	mov	r8, r2
 8015b1a:	f000 fadf 	bl	80160dc <__localeconv_l>
 8015b1e:	6803      	ldr	r3, [r0, #0]
 8015b20:	9303      	str	r3, [sp, #12]
 8015b22:	4618      	mov	r0, r3
 8015b24:	f7ea fb6c 	bl	8000200 <strlen>
 8015b28:	9b03      	ldr	r3, [sp, #12]
 8015b2a:	9001      	str	r0, [sp, #4]
 8015b2c:	4403      	add	r3, r0
 8015b2e:	f04f 0b00 	mov.w	fp, #0
 8015b32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015b36:	9307      	str	r3, [sp, #28]
 8015b38:	f8da 3000 	ldr.w	r3, [sl]
 8015b3c:	3302      	adds	r3, #2
 8015b3e:	461f      	mov	r7, r3
 8015b40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015b44:	2830      	cmp	r0, #48	; 0x30
 8015b46:	d06c      	beq.n	8015c22 <__gethex+0x118>
 8015b48:	f7ff ffca 	bl	8015ae0 <__hexdig_fun>
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	d16a      	bne.n	8015c28 <__gethex+0x11e>
 8015b52:	9a01      	ldr	r2, [sp, #4]
 8015b54:	9903      	ldr	r1, [sp, #12]
 8015b56:	4638      	mov	r0, r7
 8015b58:	f001 fe34 	bl	80177c4 <strncmp>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d166      	bne.n	8015c2e <__gethex+0x124>
 8015b60:	9b01      	ldr	r3, [sp, #4]
 8015b62:	5cf8      	ldrb	r0, [r7, r3]
 8015b64:	18fe      	adds	r6, r7, r3
 8015b66:	f7ff ffbb 	bl	8015ae0 <__hexdig_fun>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	d062      	beq.n	8015c34 <__gethex+0x12a>
 8015b6e:	4633      	mov	r3, r6
 8015b70:	7818      	ldrb	r0, [r3, #0]
 8015b72:	2830      	cmp	r0, #48	; 0x30
 8015b74:	461f      	mov	r7, r3
 8015b76:	f103 0301 	add.w	r3, r3, #1
 8015b7a:	d0f9      	beq.n	8015b70 <__gethex+0x66>
 8015b7c:	f7ff ffb0 	bl	8015ae0 <__hexdig_fun>
 8015b80:	fab0 f580 	clz	r5, r0
 8015b84:	096d      	lsrs	r5, r5, #5
 8015b86:	4634      	mov	r4, r6
 8015b88:	f04f 0b01 	mov.w	fp, #1
 8015b8c:	463a      	mov	r2, r7
 8015b8e:	4616      	mov	r6, r2
 8015b90:	3201      	adds	r2, #1
 8015b92:	7830      	ldrb	r0, [r6, #0]
 8015b94:	f7ff ffa4 	bl	8015ae0 <__hexdig_fun>
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	d1f8      	bne.n	8015b8e <__gethex+0x84>
 8015b9c:	9a01      	ldr	r2, [sp, #4]
 8015b9e:	9903      	ldr	r1, [sp, #12]
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f001 fe0f 	bl	80177c4 <strncmp>
 8015ba6:	b950      	cbnz	r0, 8015bbe <__gethex+0xb4>
 8015ba8:	b954      	cbnz	r4, 8015bc0 <__gethex+0xb6>
 8015baa:	9b01      	ldr	r3, [sp, #4]
 8015bac:	18f4      	adds	r4, r6, r3
 8015bae:	4622      	mov	r2, r4
 8015bb0:	4616      	mov	r6, r2
 8015bb2:	3201      	adds	r2, #1
 8015bb4:	7830      	ldrb	r0, [r6, #0]
 8015bb6:	f7ff ff93 	bl	8015ae0 <__hexdig_fun>
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	d1f8      	bne.n	8015bb0 <__gethex+0xa6>
 8015bbe:	b10c      	cbz	r4, 8015bc4 <__gethex+0xba>
 8015bc0:	1ba4      	subs	r4, r4, r6
 8015bc2:	00a4      	lsls	r4, r4, #2
 8015bc4:	7833      	ldrb	r3, [r6, #0]
 8015bc6:	2b50      	cmp	r3, #80	; 0x50
 8015bc8:	d001      	beq.n	8015bce <__gethex+0xc4>
 8015bca:	2b70      	cmp	r3, #112	; 0x70
 8015bcc:	d140      	bne.n	8015c50 <__gethex+0x146>
 8015bce:	7873      	ldrb	r3, [r6, #1]
 8015bd0:	2b2b      	cmp	r3, #43	; 0x2b
 8015bd2:	d031      	beq.n	8015c38 <__gethex+0x12e>
 8015bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8015bd6:	d033      	beq.n	8015c40 <__gethex+0x136>
 8015bd8:	1c71      	adds	r1, r6, #1
 8015bda:	f04f 0900 	mov.w	r9, #0
 8015bde:	7808      	ldrb	r0, [r1, #0]
 8015be0:	f7ff ff7e 	bl	8015ae0 <__hexdig_fun>
 8015be4:	1e43      	subs	r3, r0, #1
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b18      	cmp	r3, #24
 8015bea:	d831      	bhi.n	8015c50 <__gethex+0x146>
 8015bec:	f1a0 0210 	sub.w	r2, r0, #16
 8015bf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015bf4:	f7ff ff74 	bl	8015ae0 <__hexdig_fun>
 8015bf8:	1e43      	subs	r3, r0, #1
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	2b18      	cmp	r3, #24
 8015bfe:	d922      	bls.n	8015c46 <__gethex+0x13c>
 8015c00:	f1b9 0f00 	cmp.w	r9, #0
 8015c04:	d000      	beq.n	8015c08 <__gethex+0xfe>
 8015c06:	4252      	negs	r2, r2
 8015c08:	4414      	add	r4, r2
 8015c0a:	f8ca 1000 	str.w	r1, [sl]
 8015c0e:	b30d      	cbz	r5, 8015c54 <__gethex+0x14a>
 8015c10:	f1bb 0f00 	cmp.w	fp, #0
 8015c14:	bf0c      	ite	eq
 8015c16:	2706      	moveq	r7, #6
 8015c18:	2700      	movne	r7, #0
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	b00b      	add	sp, #44	; 0x2c
 8015c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c22:	f10b 0b01 	add.w	fp, fp, #1
 8015c26:	e78a      	b.n	8015b3e <__gethex+0x34>
 8015c28:	2500      	movs	r5, #0
 8015c2a:	462c      	mov	r4, r5
 8015c2c:	e7ae      	b.n	8015b8c <__gethex+0x82>
 8015c2e:	463e      	mov	r6, r7
 8015c30:	2501      	movs	r5, #1
 8015c32:	e7c7      	b.n	8015bc4 <__gethex+0xba>
 8015c34:	4604      	mov	r4, r0
 8015c36:	e7fb      	b.n	8015c30 <__gethex+0x126>
 8015c38:	f04f 0900 	mov.w	r9, #0
 8015c3c:	1cb1      	adds	r1, r6, #2
 8015c3e:	e7ce      	b.n	8015bde <__gethex+0xd4>
 8015c40:	f04f 0901 	mov.w	r9, #1
 8015c44:	e7fa      	b.n	8015c3c <__gethex+0x132>
 8015c46:	230a      	movs	r3, #10
 8015c48:	fb03 0202 	mla	r2, r3, r2, r0
 8015c4c:	3a10      	subs	r2, #16
 8015c4e:	e7cf      	b.n	8015bf0 <__gethex+0xe6>
 8015c50:	4631      	mov	r1, r6
 8015c52:	e7da      	b.n	8015c0a <__gethex+0x100>
 8015c54:	1bf3      	subs	r3, r6, r7
 8015c56:	3b01      	subs	r3, #1
 8015c58:	4629      	mov	r1, r5
 8015c5a:	2b07      	cmp	r3, #7
 8015c5c:	dc49      	bgt.n	8015cf2 <__gethex+0x1e8>
 8015c5e:	9802      	ldr	r0, [sp, #8]
 8015c60:	f000 fadc 	bl	801621c <_Balloc>
 8015c64:	9b01      	ldr	r3, [sp, #4]
 8015c66:	f100 0914 	add.w	r9, r0, #20
 8015c6a:	f04f 0b00 	mov.w	fp, #0
 8015c6e:	f1c3 0301 	rsb	r3, r3, #1
 8015c72:	4605      	mov	r5, r0
 8015c74:	f8cd 9010 	str.w	r9, [sp, #16]
 8015c78:	46da      	mov	sl, fp
 8015c7a:	9308      	str	r3, [sp, #32]
 8015c7c:	42b7      	cmp	r7, r6
 8015c7e:	d33b      	bcc.n	8015cf8 <__gethex+0x1ee>
 8015c80:	9804      	ldr	r0, [sp, #16]
 8015c82:	f840 ab04 	str.w	sl, [r0], #4
 8015c86:	eba0 0009 	sub.w	r0, r0, r9
 8015c8a:	1080      	asrs	r0, r0, #2
 8015c8c:	6128      	str	r0, [r5, #16]
 8015c8e:	0147      	lsls	r7, r0, #5
 8015c90:	4650      	mov	r0, sl
 8015c92:	f000 fb87 	bl	80163a4 <__hi0bits>
 8015c96:	f8d8 6000 	ldr.w	r6, [r8]
 8015c9a:	1a3f      	subs	r7, r7, r0
 8015c9c:	42b7      	cmp	r7, r6
 8015c9e:	dd64      	ble.n	8015d6a <__gethex+0x260>
 8015ca0:	1bbf      	subs	r7, r7, r6
 8015ca2:	4639      	mov	r1, r7
 8015ca4:	4628      	mov	r0, r5
 8015ca6:	f000 fe97 	bl	80169d8 <__any_on>
 8015caa:	4682      	mov	sl, r0
 8015cac:	b178      	cbz	r0, 8015cce <__gethex+0x1c4>
 8015cae:	1e7b      	subs	r3, r7, #1
 8015cb0:	1159      	asrs	r1, r3, #5
 8015cb2:	f003 021f 	and.w	r2, r3, #31
 8015cb6:	f04f 0a01 	mov.w	sl, #1
 8015cba:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015cbe:	fa0a f202 	lsl.w	r2, sl, r2
 8015cc2:	420a      	tst	r2, r1
 8015cc4:	d003      	beq.n	8015cce <__gethex+0x1c4>
 8015cc6:	4553      	cmp	r3, sl
 8015cc8:	dc46      	bgt.n	8015d58 <__gethex+0x24e>
 8015cca:	f04f 0a02 	mov.w	sl, #2
 8015cce:	4639      	mov	r1, r7
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	f7ff fecb 	bl	8015a6c <rshift>
 8015cd6:	443c      	add	r4, r7
 8015cd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015cdc:	42a3      	cmp	r3, r4
 8015cde:	da52      	bge.n	8015d86 <__gethex+0x27c>
 8015ce0:	4629      	mov	r1, r5
 8015ce2:	9802      	ldr	r0, [sp, #8]
 8015ce4:	f000 face 	bl	8016284 <_Bfree>
 8015ce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015cea:	2300      	movs	r3, #0
 8015cec:	6013      	str	r3, [r2, #0]
 8015cee:	27a3      	movs	r7, #163	; 0xa3
 8015cf0:	e793      	b.n	8015c1a <__gethex+0x110>
 8015cf2:	3101      	adds	r1, #1
 8015cf4:	105b      	asrs	r3, r3, #1
 8015cf6:	e7b0      	b.n	8015c5a <__gethex+0x150>
 8015cf8:	1e73      	subs	r3, r6, #1
 8015cfa:	9305      	str	r3, [sp, #20]
 8015cfc:	9a07      	ldr	r2, [sp, #28]
 8015cfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015d02:	4293      	cmp	r3, r2
 8015d04:	d018      	beq.n	8015d38 <__gethex+0x22e>
 8015d06:	f1bb 0f20 	cmp.w	fp, #32
 8015d0a:	d107      	bne.n	8015d1c <__gethex+0x212>
 8015d0c:	9b04      	ldr	r3, [sp, #16]
 8015d0e:	f8c3 a000 	str.w	sl, [r3]
 8015d12:	3304      	adds	r3, #4
 8015d14:	f04f 0a00 	mov.w	sl, #0
 8015d18:	9304      	str	r3, [sp, #16]
 8015d1a:	46d3      	mov	fp, sl
 8015d1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015d20:	f7ff fede 	bl	8015ae0 <__hexdig_fun>
 8015d24:	f000 000f 	and.w	r0, r0, #15
 8015d28:	fa00 f00b 	lsl.w	r0, r0, fp
 8015d2c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015d30:	f10b 0b04 	add.w	fp, fp, #4
 8015d34:	9b05      	ldr	r3, [sp, #20]
 8015d36:	e00d      	b.n	8015d54 <__gethex+0x24a>
 8015d38:	9b05      	ldr	r3, [sp, #20]
 8015d3a:	9a08      	ldr	r2, [sp, #32]
 8015d3c:	4413      	add	r3, r2
 8015d3e:	42bb      	cmp	r3, r7
 8015d40:	d3e1      	bcc.n	8015d06 <__gethex+0x1fc>
 8015d42:	4618      	mov	r0, r3
 8015d44:	9a01      	ldr	r2, [sp, #4]
 8015d46:	9903      	ldr	r1, [sp, #12]
 8015d48:	9309      	str	r3, [sp, #36]	; 0x24
 8015d4a:	f001 fd3b 	bl	80177c4 <strncmp>
 8015d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d1d8      	bne.n	8015d06 <__gethex+0x1fc>
 8015d54:	461e      	mov	r6, r3
 8015d56:	e791      	b.n	8015c7c <__gethex+0x172>
 8015d58:	1eb9      	subs	r1, r7, #2
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f000 fe3c 	bl	80169d8 <__any_on>
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d0b2      	beq.n	8015cca <__gethex+0x1c0>
 8015d64:	f04f 0a03 	mov.w	sl, #3
 8015d68:	e7b1      	b.n	8015cce <__gethex+0x1c4>
 8015d6a:	da09      	bge.n	8015d80 <__gethex+0x276>
 8015d6c:	1bf7      	subs	r7, r6, r7
 8015d6e:	4629      	mov	r1, r5
 8015d70:	463a      	mov	r2, r7
 8015d72:	9802      	ldr	r0, [sp, #8]
 8015d74:	f000 fc52 	bl	801661c <__lshift>
 8015d78:	1be4      	subs	r4, r4, r7
 8015d7a:	4605      	mov	r5, r0
 8015d7c:	f100 0914 	add.w	r9, r0, #20
 8015d80:	f04f 0a00 	mov.w	sl, #0
 8015d84:	e7a8      	b.n	8015cd8 <__gethex+0x1ce>
 8015d86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d8a:	42a0      	cmp	r0, r4
 8015d8c:	dd6a      	ble.n	8015e64 <__gethex+0x35a>
 8015d8e:	1b04      	subs	r4, r0, r4
 8015d90:	42a6      	cmp	r6, r4
 8015d92:	dc2e      	bgt.n	8015df2 <__gethex+0x2e8>
 8015d94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d98:	2b02      	cmp	r3, #2
 8015d9a:	d022      	beq.n	8015de2 <__gethex+0x2d8>
 8015d9c:	2b03      	cmp	r3, #3
 8015d9e:	d024      	beq.n	8015dea <__gethex+0x2e0>
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d115      	bne.n	8015dd0 <__gethex+0x2c6>
 8015da4:	42a6      	cmp	r6, r4
 8015da6:	d113      	bne.n	8015dd0 <__gethex+0x2c6>
 8015da8:	2e01      	cmp	r6, #1
 8015daa:	dc0b      	bgt.n	8015dc4 <__gethex+0x2ba>
 8015dac:	9a06      	ldr	r2, [sp, #24]
 8015dae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015db2:	6013      	str	r3, [r2, #0]
 8015db4:	2301      	movs	r3, #1
 8015db6:	612b      	str	r3, [r5, #16]
 8015db8:	f8c9 3000 	str.w	r3, [r9]
 8015dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015dbe:	2762      	movs	r7, #98	; 0x62
 8015dc0:	601d      	str	r5, [r3, #0]
 8015dc2:	e72a      	b.n	8015c1a <__gethex+0x110>
 8015dc4:	1e71      	subs	r1, r6, #1
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	f000 fe06 	bl	80169d8 <__any_on>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d1ed      	bne.n	8015dac <__gethex+0x2a2>
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	9802      	ldr	r0, [sp, #8]
 8015dd4:	f000 fa56 	bl	8016284 <_Bfree>
 8015dd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dda:	2300      	movs	r3, #0
 8015ddc:	6013      	str	r3, [r2, #0]
 8015dde:	2750      	movs	r7, #80	; 0x50
 8015de0:	e71b      	b.n	8015c1a <__gethex+0x110>
 8015de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d0e1      	beq.n	8015dac <__gethex+0x2a2>
 8015de8:	e7f2      	b.n	8015dd0 <__gethex+0x2c6>
 8015dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d1dd      	bne.n	8015dac <__gethex+0x2a2>
 8015df0:	e7ee      	b.n	8015dd0 <__gethex+0x2c6>
 8015df2:	1e67      	subs	r7, r4, #1
 8015df4:	f1ba 0f00 	cmp.w	sl, #0
 8015df8:	d131      	bne.n	8015e5e <__gethex+0x354>
 8015dfa:	b127      	cbz	r7, 8015e06 <__gethex+0x2fc>
 8015dfc:	4639      	mov	r1, r7
 8015dfe:	4628      	mov	r0, r5
 8015e00:	f000 fdea 	bl	80169d8 <__any_on>
 8015e04:	4682      	mov	sl, r0
 8015e06:	117a      	asrs	r2, r7, #5
 8015e08:	2301      	movs	r3, #1
 8015e0a:	f007 071f 	and.w	r7, r7, #31
 8015e0e:	fa03 f707 	lsl.w	r7, r3, r7
 8015e12:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015e16:	4621      	mov	r1, r4
 8015e18:	421f      	tst	r7, r3
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	bf18      	it	ne
 8015e1e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015e22:	1b36      	subs	r6, r6, r4
 8015e24:	f7ff fe22 	bl	8015a6c <rshift>
 8015e28:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015e2c:	2702      	movs	r7, #2
 8015e2e:	f1ba 0f00 	cmp.w	sl, #0
 8015e32:	d048      	beq.n	8015ec6 <__gethex+0x3bc>
 8015e34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e38:	2b02      	cmp	r3, #2
 8015e3a:	d015      	beq.n	8015e68 <__gethex+0x35e>
 8015e3c:	2b03      	cmp	r3, #3
 8015e3e:	d017      	beq.n	8015e70 <__gethex+0x366>
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d109      	bne.n	8015e58 <__gethex+0x34e>
 8015e44:	f01a 0f02 	tst.w	sl, #2
 8015e48:	d006      	beq.n	8015e58 <__gethex+0x34e>
 8015e4a:	f8d9 3000 	ldr.w	r3, [r9]
 8015e4e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015e52:	f01a 0f01 	tst.w	sl, #1
 8015e56:	d10e      	bne.n	8015e76 <__gethex+0x36c>
 8015e58:	f047 0710 	orr.w	r7, r7, #16
 8015e5c:	e033      	b.n	8015ec6 <__gethex+0x3bc>
 8015e5e:	f04f 0a01 	mov.w	sl, #1
 8015e62:	e7d0      	b.n	8015e06 <__gethex+0x2fc>
 8015e64:	2701      	movs	r7, #1
 8015e66:	e7e2      	b.n	8015e2e <__gethex+0x324>
 8015e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e6a:	f1c3 0301 	rsb	r3, r3, #1
 8015e6e:	9315      	str	r3, [sp, #84]	; 0x54
 8015e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d0f0      	beq.n	8015e58 <__gethex+0x34e>
 8015e76:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015e7a:	f105 0314 	add.w	r3, r5, #20
 8015e7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015e82:	eb03 010a 	add.w	r1, r3, sl
 8015e86:	f04f 0c00 	mov.w	ip, #0
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e94:	d01c      	beq.n	8015ed0 <__gethex+0x3c6>
 8015e96:	3201      	adds	r2, #1
 8015e98:	6002      	str	r2, [r0, #0]
 8015e9a:	2f02      	cmp	r7, #2
 8015e9c:	f105 0314 	add.w	r3, r5, #20
 8015ea0:	d138      	bne.n	8015f14 <__gethex+0x40a>
 8015ea2:	f8d8 2000 	ldr.w	r2, [r8]
 8015ea6:	3a01      	subs	r2, #1
 8015ea8:	42b2      	cmp	r2, r6
 8015eaa:	d10a      	bne.n	8015ec2 <__gethex+0x3b8>
 8015eac:	1171      	asrs	r1, r6, #5
 8015eae:	2201      	movs	r2, #1
 8015eb0:	f006 061f 	and.w	r6, r6, #31
 8015eb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015eb8:	fa02 f606 	lsl.w	r6, r2, r6
 8015ebc:	421e      	tst	r6, r3
 8015ebe:	bf18      	it	ne
 8015ec0:	4617      	movne	r7, r2
 8015ec2:	f047 0720 	orr.w	r7, r7, #32
 8015ec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ec8:	601d      	str	r5, [r3, #0]
 8015eca:	9b06      	ldr	r3, [sp, #24]
 8015ecc:	601c      	str	r4, [r3, #0]
 8015ece:	e6a4      	b.n	8015c1a <__gethex+0x110>
 8015ed0:	4299      	cmp	r1, r3
 8015ed2:	f843 cc04 	str.w	ip, [r3, #-4]
 8015ed6:	d8d8      	bhi.n	8015e8a <__gethex+0x380>
 8015ed8:	68ab      	ldr	r3, [r5, #8]
 8015eda:	4599      	cmp	r9, r3
 8015edc:	db12      	blt.n	8015f04 <__gethex+0x3fa>
 8015ede:	6869      	ldr	r1, [r5, #4]
 8015ee0:	9802      	ldr	r0, [sp, #8]
 8015ee2:	3101      	adds	r1, #1
 8015ee4:	f000 f99a 	bl	801621c <_Balloc>
 8015ee8:	692a      	ldr	r2, [r5, #16]
 8015eea:	3202      	adds	r2, #2
 8015eec:	f105 010c 	add.w	r1, r5, #12
 8015ef0:	4683      	mov	fp, r0
 8015ef2:	0092      	lsls	r2, r2, #2
 8015ef4:	300c      	adds	r0, #12
 8015ef6:	f7fc fe97 	bl	8012c28 <memcpy>
 8015efa:	4629      	mov	r1, r5
 8015efc:	9802      	ldr	r0, [sp, #8]
 8015efe:	f000 f9c1 	bl	8016284 <_Bfree>
 8015f02:	465d      	mov	r5, fp
 8015f04:	692b      	ldr	r3, [r5, #16]
 8015f06:	1c5a      	adds	r2, r3, #1
 8015f08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015f0c:	612a      	str	r2, [r5, #16]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	615a      	str	r2, [r3, #20]
 8015f12:	e7c2      	b.n	8015e9a <__gethex+0x390>
 8015f14:	692a      	ldr	r2, [r5, #16]
 8015f16:	454a      	cmp	r2, r9
 8015f18:	dd0b      	ble.n	8015f32 <__gethex+0x428>
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	f7ff fda5 	bl	8015a6c <rshift>
 8015f22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f26:	3401      	adds	r4, #1
 8015f28:	42a3      	cmp	r3, r4
 8015f2a:	f6ff aed9 	blt.w	8015ce0 <__gethex+0x1d6>
 8015f2e:	2701      	movs	r7, #1
 8015f30:	e7c7      	b.n	8015ec2 <__gethex+0x3b8>
 8015f32:	f016 061f 	ands.w	r6, r6, #31
 8015f36:	d0fa      	beq.n	8015f2e <__gethex+0x424>
 8015f38:	449a      	add	sl, r3
 8015f3a:	f1c6 0620 	rsb	r6, r6, #32
 8015f3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015f42:	f000 fa2f 	bl	80163a4 <__hi0bits>
 8015f46:	42b0      	cmp	r0, r6
 8015f48:	dbe7      	blt.n	8015f1a <__gethex+0x410>
 8015f4a:	e7f0      	b.n	8015f2e <__gethex+0x424>

08015f4c <L_shift>:
 8015f4c:	f1c2 0208 	rsb	r2, r2, #8
 8015f50:	0092      	lsls	r2, r2, #2
 8015f52:	b570      	push	{r4, r5, r6, lr}
 8015f54:	f1c2 0620 	rsb	r6, r2, #32
 8015f58:	6843      	ldr	r3, [r0, #4]
 8015f5a:	6804      	ldr	r4, [r0, #0]
 8015f5c:	fa03 f506 	lsl.w	r5, r3, r6
 8015f60:	432c      	orrs	r4, r5
 8015f62:	40d3      	lsrs	r3, r2
 8015f64:	6004      	str	r4, [r0, #0]
 8015f66:	f840 3f04 	str.w	r3, [r0, #4]!
 8015f6a:	4288      	cmp	r0, r1
 8015f6c:	d3f4      	bcc.n	8015f58 <L_shift+0xc>
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}

08015f70 <__match>:
 8015f70:	b530      	push	{r4, r5, lr}
 8015f72:	6803      	ldr	r3, [r0, #0]
 8015f74:	3301      	adds	r3, #1
 8015f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f7a:	b914      	cbnz	r4, 8015f82 <__match+0x12>
 8015f7c:	6003      	str	r3, [r0, #0]
 8015f7e:	2001      	movs	r0, #1
 8015f80:	bd30      	pop	{r4, r5, pc}
 8015f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f8a:	2d19      	cmp	r5, #25
 8015f8c:	bf98      	it	ls
 8015f8e:	3220      	addls	r2, #32
 8015f90:	42a2      	cmp	r2, r4
 8015f92:	d0f0      	beq.n	8015f76 <__match+0x6>
 8015f94:	2000      	movs	r0, #0
 8015f96:	e7f3      	b.n	8015f80 <__match+0x10>

08015f98 <__hexnan>:
 8015f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f9c:	680b      	ldr	r3, [r1, #0]
 8015f9e:	6801      	ldr	r1, [r0, #0]
 8015fa0:	115f      	asrs	r7, r3, #5
 8015fa2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015fa6:	f013 031f 	ands.w	r3, r3, #31
 8015faa:	b087      	sub	sp, #28
 8015fac:	bf18      	it	ne
 8015fae:	3704      	addne	r7, #4
 8015fb0:	2500      	movs	r5, #0
 8015fb2:	1f3e      	subs	r6, r7, #4
 8015fb4:	4682      	mov	sl, r0
 8015fb6:	4690      	mov	r8, r2
 8015fb8:	9301      	str	r3, [sp, #4]
 8015fba:	f847 5c04 	str.w	r5, [r7, #-4]
 8015fbe:	46b1      	mov	r9, r6
 8015fc0:	4634      	mov	r4, r6
 8015fc2:	9502      	str	r5, [sp, #8]
 8015fc4:	46ab      	mov	fp, r5
 8015fc6:	784a      	ldrb	r2, [r1, #1]
 8015fc8:	1c4b      	adds	r3, r1, #1
 8015fca:	9303      	str	r3, [sp, #12]
 8015fcc:	b342      	cbz	r2, 8016020 <__hexnan+0x88>
 8015fce:	4610      	mov	r0, r2
 8015fd0:	9105      	str	r1, [sp, #20]
 8015fd2:	9204      	str	r2, [sp, #16]
 8015fd4:	f7ff fd84 	bl	8015ae0 <__hexdig_fun>
 8015fd8:	2800      	cmp	r0, #0
 8015fda:	d143      	bne.n	8016064 <__hexnan+0xcc>
 8015fdc:	9a04      	ldr	r2, [sp, #16]
 8015fde:	9905      	ldr	r1, [sp, #20]
 8015fe0:	2a20      	cmp	r2, #32
 8015fe2:	d818      	bhi.n	8016016 <__hexnan+0x7e>
 8015fe4:	9b02      	ldr	r3, [sp, #8]
 8015fe6:	459b      	cmp	fp, r3
 8015fe8:	dd13      	ble.n	8016012 <__hexnan+0x7a>
 8015fea:	454c      	cmp	r4, r9
 8015fec:	d206      	bcs.n	8015ffc <__hexnan+0x64>
 8015fee:	2d07      	cmp	r5, #7
 8015ff0:	dc04      	bgt.n	8015ffc <__hexnan+0x64>
 8015ff2:	462a      	mov	r2, r5
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	f7ff ffa8 	bl	8015f4c <L_shift>
 8015ffc:	4544      	cmp	r4, r8
 8015ffe:	d944      	bls.n	801608a <__hexnan+0xf2>
 8016000:	2300      	movs	r3, #0
 8016002:	f1a4 0904 	sub.w	r9, r4, #4
 8016006:	f844 3c04 	str.w	r3, [r4, #-4]
 801600a:	f8cd b008 	str.w	fp, [sp, #8]
 801600e:	464c      	mov	r4, r9
 8016010:	461d      	mov	r5, r3
 8016012:	9903      	ldr	r1, [sp, #12]
 8016014:	e7d7      	b.n	8015fc6 <__hexnan+0x2e>
 8016016:	2a29      	cmp	r2, #41	; 0x29
 8016018:	d14a      	bne.n	80160b0 <__hexnan+0x118>
 801601a:	3102      	adds	r1, #2
 801601c:	f8ca 1000 	str.w	r1, [sl]
 8016020:	f1bb 0f00 	cmp.w	fp, #0
 8016024:	d044      	beq.n	80160b0 <__hexnan+0x118>
 8016026:	454c      	cmp	r4, r9
 8016028:	d206      	bcs.n	8016038 <__hexnan+0xa0>
 801602a:	2d07      	cmp	r5, #7
 801602c:	dc04      	bgt.n	8016038 <__hexnan+0xa0>
 801602e:	462a      	mov	r2, r5
 8016030:	4649      	mov	r1, r9
 8016032:	4620      	mov	r0, r4
 8016034:	f7ff ff8a 	bl	8015f4c <L_shift>
 8016038:	4544      	cmp	r4, r8
 801603a:	d928      	bls.n	801608e <__hexnan+0xf6>
 801603c:	4643      	mov	r3, r8
 801603e:	f854 2b04 	ldr.w	r2, [r4], #4
 8016042:	f843 2b04 	str.w	r2, [r3], #4
 8016046:	42a6      	cmp	r6, r4
 8016048:	d2f9      	bcs.n	801603e <__hexnan+0xa6>
 801604a:	2200      	movs	r2, #0
 801604c:	f843 2b04 	str.w	r2, [r3], #4
 8016050:	429e      	cmp	r6, r3
 8016052:	d2fb      	bcs.n	801604c <__hexnan+0xb4>
 8016054:	6833      	ldr	r3, [r6, #0]
 8016056:	b91b      	cbnz	r3, 8016060 <__hexnan+0xc8>
 8016058:	4546      	cmp	r6, r8
 801605a:	d127      	bne.n	80160ac <__hexnan+0x114>
 801605c:	2301      	movs	r3, #1
 801605e:	6033      	str	r3, [r6, #0]
 8016060:	2005      	movs	r0, #5
 8016062:	e026      	b.n	80160b2 <__hexnan+0x11a>
 8016064:	3501      	adds	r5, #1
 8016066:	2d08      	cmp	r5, #8
 8016068:	f10b 0b01 	add.w	fp, fp, #1
 801606c:	dd06      	ble.n	801607c <__hexnan+0xe4>
 801606e:	4544      	cmp	r4, r8
 8016070:	d9cf      	bls.n	8016012 <__hexnan+0x7a>
 8016072:	2300      	movs	r3, #0
 8016074:	f844 3c04 	str.w	r3, [r4, #-4]
 8016078:	2501      	movs	r5, #1
 801607a:	3c04      	subs	r4, #4
 801607c:	6822      	ldr	r2, [r4, #0]
 801607e:	f000 000f 	and.w	r0, r0, #15
 8016082:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016086:	6020      	str	r0, [r4, #0]
 8016088:	e7c3      	b.n	8016012 <__hexnan+0x7a>
 801608a:	2508      	movs	r5, #8
 801608c:	e7c1      	b.n	8016012 <__hexnan+0x7a>
 801608e:	9b01      	ldr	r3, [sp, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d0df      	beq.n	8016054 <__hexnan+0xbc>
 8016094:	f04f 32ff 	mov.w	r2, #4294967295
 8016098:	f1c3 0320 	rsb	r3, r3, #32
 801609c:	fa22 f303 	lsr.w	r3, r2, r3
 80160a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80160a4:	401a      	ands	r2, r3
 80160a6:	f847 2c04 	str.w	r2, [r7, #-4]
 80160aa:	e7d3      	b.n	8016054 <__hexnan+0xbc>
 80160ac:	3e04      	subs	r6, #4
 80160ae:	e7d1      	b.n	8016054 <__hexnan+0xbc>
 80160b0:	2004      	movs	r0, #4
 80160b2:	b007      	add	sp, #28
 80160b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160b8 <__locale_ctype_ptr_l>:
 80160b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80160bc:	4770      	bx	lr
	...

080160c0 <__locale_ctype_ptr>:
 80160c0:	4b04      	ldr	r3, [pc, #16]	; (80160d4 <__locale_ctype_ptr+0x14>)
 80160c2:	4a05      	ldr	r2, [pc, #20]	; (80160d8 <__locale_ctype_ptr+0x18>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	6a1b      	ldr	r3, [r3, #32]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	bf08      	it	eq
 80160cc:	4613      	moveq	r3, r2
 80160ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80160d2:	4770      	bx	lr
 80160d4:	2000000c 	.word	0x2000000c
 80160d8:	20000070 	.word	0x20000070

080160dc <__localeconv_l>:
 80160dc:	30f0      	adds	r0, #240	; 0xf0
 80160de:	4770      	bx	lr

080160e0 <_localeconv_r>:
 80160e0:	4b04      	ldr	r3, [pc, #16]	; (80160f4 <_localeconv_r+0x14>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	6a18      	ldr	r0, [r3, #32]
 80160e6:	4b04      	ldr	r3, [pc, #16]	; (80160f8 <_localeconv_r+0x18>)
 80160e8:	2800      	cmp	r0, #0
 80160ea:	bf08      	it	eq
 80160ec:	4618      	moveq	r0, r3
 80160ee:	30f0      	adds	r0, #240	; 0xf0
 80160f0:	4770      	bx	lr
 80160f2:	bf00      	nop
 80160f4:	2000000c 	.word	0x2000000c
 80160f8:	20000070 	.word	0x20000070

080160fc <_lseek_r>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	4c07      	ldr	r4, [pc, #28]	; (801611c <_lseek_r+0x20>)
 8016100:	4605      	mov	r5, r0
 8016102:	4608      	mov	r0, r1
 8016104:	4611      	mov	r1, r2
 8016106:	2200      	movs	r2, #0
 8016108:	6022      	str	r2, [r4, #0]
 801610a:	461a      	mov	r2, r3
 801610c:	f7ef fbfc 	bl	8005908 <_lseek>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	d102      	bne.n	801611a <_lseek_r+0x1e>
 8016114:	6823      	ldr	r3, [r4, #0]
 8016116:	b103      	cbz	r3, 801611a <_lseek_r+0x1e>
 8016118:	602b      	str	r3, [r5, #0]
 801611a:	bd38      	pop	{r3, r4, r5, pc}
 801611c:	2003be0c 	.word	0x2003be0c

08016120 <__swhatbuf_r>:
 8016120:	b570      	push	{r4, r5, r6, lr}
 8016122:	460e      	mov	r6, r1
 8016124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016128:	2900      	cmp	r1, #0
 801612a:	b096      	sub	sp, #88	; 0x58
 801612c:	4614      	mov	r4, r2
 801612e:	461d      	mov	r5, r3
 8016130:	da07      	bge.n	8016142 <__swhatbuf_r+0x22>
 8016132:	2300      	movs	r3, #0
 8016134:	602b      	str	r3, [r5, #0]
 8016136:	89b3      	ldrh	r3, [r6, #12]
 8016138:	061a      	lsls	r2, r3, #24
 801613a:	d410      	bmi.n	801615e <__swhatbuf_r+0x3e>
 801613c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016140:	e00e      	b.n	8016160 <__swhatbuf_r+0x40>
 8016142:	466a      	mov	r2, sp
 8016144:	f001 fc24 	bl	8017990 <_fstat_r>
 8016148:	2800      	cmp	r0, #0
 801614a:	dbf2      	blt.n	8016132 <__swhatbuf_r+0x12>
 801614c:	9a01      	ldr	r2, [sp, #4]
 801614e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016152:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016156:	425a      	negs	r2, r3
 8016158:	415a      	adcs	r2, r3
 801615a:	602a      	str	r2, [r5, #0]
 801615c:	e7ee      	b.n	801613c <__swhatbuf_r+0x1c>
 801615e:	2340      	movs	r3, #64	; 0x40
 8016160:	2000      	movs	r0, #0
 8016162:	6023      	str	r3, [r4, #0]
 8016164:	b016      	add	sp, #88	; 0x58
 8016166:	bd70      	pop	{r4, r5, r6, pc}

08016168 <__smakebuf_r>:
 8016168:	898b      	ldrh	r3, [r1, #12]
 801616a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801616c:	079d      	lsls	r5, r3, #30
 801616e:	4606      	mov	r6, r0
 8016170:	460c      	mov	r4, r1
 8016172:	d507      	bpl.n	8016184 <__smakebuf_r+0x1c>
 8016174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016178:	6023      	str	r3, [r4, #0]
 801617a:	6123      	str	r3, [r4, #16]
 801617c:	2301      	movs	r3, #1
 801617e:	6163      	str	r3, [r4, #20]
 8016180:	b002      	add	sp, #8
 8016182:	bd70      	pop	{r4, r5, r6, pc}
 8016184:	ab01      	add	r3, sp, #4
 8016186:	466a      	mov	r2, sp
 8016188:	f7ff ffca 	bl	8016120 <__swhatbuf_r>
 801618c:	9900      	ldr	r1, [sp, #0]
 801618e:	4605      	mov	r5, r0
 8016190:	4630      	mov	r0, r6
 8016192:	f000 fc9f 	bl	8016ad4 <_malloc_r>
 8016196:	b948      	cbnz	r0, 80161ac <__smakebuf_r+0x44>
 8016198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801619c:	059a      	lsls	r2, r3, #22
 801619e:	d4ef      	bmi.n	8016180 <__smakebuf_r+0x18>
 80161a0:	f023 0303 	bic.w	r3, r3, #3
 80161a4:	f043 0302 	orr.w	r3, r3, #2
 80161a8:	81a3      	strh	r3, [r4, #12]
 80161aa:	e7e3      	b.n	8016174 <__smakebuf_r+0xc>
 80161ac:	4b0d      	ldr	r3, [pc, #52]	; (80161e4 <__smakebuf_r+0x7c>)
 80161ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80161b0:	89a3      	ldrh	r3, [r4, #12]
 80161b2:	6020      	str	r0, [r4, #0]
 80161b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161b8:	81a3      	strh	r3, [r4, #12]
 80161ba:	9b00      	ldr	r3, [sp, #0]
 80161bc:	6163      	str	r3, [r4, #20]
 80161be:	9b01      	ldr	r3, [sp, #4]
 80161c0:	6120      	str	r0, [r4, #16]
 80161c2:	b15b      	cbz	r3, 80161dc <__smakebuf_r+0x74>
 80161c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161c8:	4630      	mov	r0, r6
 80161ca:	f001 fbf3 	bl	80179b4 <_isatty_r>
 80161ce:	b128      	cbz	r0, 80161dc <__smakebuf_r+0x74>
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	f023 0303 	bic.w	r3, r3, #3
 80161d6:	f043 0301 	orr.w	r3, r3, #1
 80161da:	81a3      	strh	r3, [r4, #12]
 80161dc:	89a3      	ldrh	r3, [r4, #12]
 80161de:	431d      	orrs	r5, r3
 80161e0:	81a5      	strh	r5, [r4, #12]
 80161e2:	e7cd      	b.n	8016180 <__smakebuf_r+0x18>
 80161e4:	08015921 	.word	0x08015921

080161e8 <malloc>:
 80161e8:	4b02      	ldr	r3, [pc, #8]	; (80161f4 <malloc+0xc>)
 80161ea:	4601      	mov	r1, r0
 80161ec:	6818      	ldr	r0, [r3, #0]
 80161ee:	f000 bc71 	b.w	8016ad4 <_malloc_r>
 80161f2:	bf00      	nop
 80161f4:	2000000c 	.word	0x2000000c

080161f8 <__ascii_mbtowc>:
 80161f8:	b082      	sub	sp, #8
 80161fa:	b901      	cbnz	r1, 80161fe <__ascii_mbtowc+0x6>
 80161fc:	a901      	add	r1, sp, #4
 80161fe:	b142      	cbz	r2, 8016212 <__ascii_mbtowc+0x1a>
 8016200:	b14b      	cbz	r3, 8016216 <__ascii_mbtowc+0x1e>
 8016202:	7813      	ldrb	r3, [r2, #0]
 8016204:	600b      	str	r3, [r1, #0]
 8016206:	7812      	ldrb	r2, [r2, #0]
 8016208:	1c10      	adds	r0, r2, #0
 801620a:	bf18      	it	ne
 801620c:	2001      	movne	r0, #1
 801620e:	b002      	add	sp, #8
 8016210:	4770      	bx	lr
 8016212:	4610      	mov	r0, r2
 8016214:	e7fb      	b.n	801620e <__ascii_mbtowc+0x16>
 8016216:	f06f 0001 	mvn.w	r0, #1
 801621a:	e7f8      	b.n	801620e <__ascii_mbtowc+0x16>

0801621c <_Balloc>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016220:	4604      	mov	r4, r0
 8016222:	460e      	mov	r6, r1
 8016224:	b93d      	cbnz	r5, 8016236 <_Balloc+0x1a>
 8016226:	2010      	movs	r0, #16
 8016228:	f7ff ffde 	bl	80161e8 <malloc>
 801622c:	6260      	str	r0, [r4, #36]	; 0x24
 801622e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016232:	6005      	str	r5, [r0, #0]
 8016234:	60c5      	str	r5, [r0, #12]
 8016236:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016238:	68eb      	ldr	r3, [r5, #12]
 801623a:	b183      	cbz	r3, 801625e <_Balloc+0x42>
 801623c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016244:	b9b8      	cbnz	r0, 8016276 <_Balloc+0x5a>
 8016246:	2101      	movs	r1, #1
 8016248:	fa01 f506 	lsl.w	r5, r1, r6
 801624c:	1d6a      	adds	r2, r5, #5
 801624e:	0092      	lsls	r2, r2, #2
 8016250:	4620      	mov	r0, r4
 8016252:	f000 fbe2 	bl	8016a1a <_calloc_r>
 8016256:	b160      	cbz	r0, 8016272 <_Balloc+0x56>
 8016258:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801625c:	e00e      	b.n	801627c <_Balloc+0x60>
 801625e:	2221      	movs	r2, #33	; 0x21
 8016260:	2104      	movs	r1, #4
 8016262:	4620      	mov	r0, r4
 8016264:	f000 fbd9 	bl	8016a1a <_calloc_r>
 8016268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801626a:	60e8      	str	r0, [r5, #12]
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1e4      	bne.n	801623c <_Balloc+0x20>
 8016272:	2000      	movs	r0, #0
 8016274:	bd70      	pop	{r4, r5, r6, pc}
 8016276:	6802      	ldr	r2, [r0, #0]
 8016278:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801627c:	2300      	movs	r3, #0
 801627e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016282:	e7f7      	b.n	8016274 <_Balloc+0x58>

08016284 <_Bfree>:
 8016284:	b570      	push	{r4, r5, r6, lr}
 8016286:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016288:	4606      	mov	r6, r0
 801628a:	460d      	mov	r5, r1
 801628c:	b93c      	cbnz	r4, 801629e <_Bfree+0x1a>
 801628e:	2010      	movs	r0, #16
 8016290:	f7ff ffaa 	bl	80161e8 <malloc>
 8016294:	6270      	str	r0, [r6, #36]	; 0x24
 8016296:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801629a:	6004      	str	r4, [r0, #0]
 801629c:	60c4      	str	r4, [r0, #12]
 801629e:	b13d      	cbz	r5, 80162b0 <_Bfree+0x2c>
 80162a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80162a2:	686a      	ldr	r2, [r5, #4]
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80162aa:	6029      	str	r1, [r5, #0]
 80162ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80162b0:	bd70      	pop	{r4, r5, r6, pc}

080162b2 <__multadd>:
 80162b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b6:	690d      	ldr	r5, [r1, #16]
 80162b8:	461f      	mov	r7, r3
 80162ba:	4606      	mov	r6, r0
 80162bc:	460c      	mov	r4, r1
 80162be:	f101 0c14 	add.w	ip, r1, #20
 80162c2:	2300      	movs	r3, #0
 80162c4:	f8dc 0000 	ldr.w	r0, [ip]
 80162c8:	b281      	uxth	r1, r0
 80162ca:	fb02 7101 	mla	r1, r2, r1, r7
 80162ce:	0c0f      	lsrs	r7, r1, #16
 80162d0:	0c00      	lsrs	r0, r0, #16
 80162d2:	fb02 7000 	mla	r0, r2, r0, r7
 80162d6:	b289      	uxth	r1, r1
 80162d8:	3301      	adds	r3, #1
 80162da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80162de:	429d      	cmp	r5, r3
 80162e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80162e4:	f84c 1b04 	str.w	r1, [ip], #4
 80162e8:	dcec      	bgt.n	80162c4 <__multadd+0x12>
 80162ea:	b1d7      	cbz	r7, 8016322 <__multadd+0x70>
 80162ec:	68a3      	ldr	r3, [r4, #8]
 80162ee:	42ab      	cmp	r3, r5
 80162f0:	dc12      	bgt.n	8016318 <__multadd+0x66>
 80162f2:	6861      	ldr	r1, [r4, #4]
 80162f4:	4630      	mov	r0, r6
 80162f6:	3101      	adds	r1, #1
 80162f8:	f7ff ff90 	bl	801621c <_Balloc>
 80162fc:	6922      	ldr	r2, [r4, #16]
 80162fe:	3202      	adds	r2, #2
 8016300:	f104 010c 	add.w	r1, r4, #12
 8016304:	4680      	mov	r8, r0
 8016306:	0092      	lsls	r2, r2, #2
 8016308:	300c      	adds	r0, #12
 801630a:	f7fc fc8d 	bl	8012c28 <memcpy>
 801630e:	4621      	mov	r1, r4
 8016310:	4630      	mov	r0, r6
 8016312:	f7ff ffb7 	bl	8016284 <_Bfree>
 8016316:	4644      	mov	r4, r8
 8016318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801631c:	3501      	adds	r5, #1
 801631e:	615f      	str	r7, [r3, #20]
 8016320:	6125      	str	r5, [r4, #16]
 8016322:	4620      	mov	r0, r4
 8016324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016328 <__s2b>:
 8016328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801632c:	460c      	mov	r4, r1
 801632e:	4615      	mov	r5, r2
 8016330:	461f      	mov	r7, r3
 8016332:	2209      	movs	r2, #9
 8016334:	3308      	adds	r3, #8
 8016336:	4606      	mov	r6, r0
 8016338:	fb93 f3f2 	sdiv	r3, r3, r2
 801633c:	2100      	movs	r1, #0
 801633e:	2201      	movs	r2, #1
 8016340:	429a      	cmp	r2, r3
 8016342:	db20      	blt.n	8016386 <__s2b+0x5e>
 8016344:	4630      	mov	r0, r6
 8016346:	f7ff ff69 	bl	801621c <_Balloc>
 801634a:	9b08      	ldr	r3, [sp, #32]
 801634c:	6143      	str	r3, [r0, #20]
 801634e:	2d09      	cmp	r5, #9
 8016350:	f04f 0301 	mov.w	r3, #1
 8016354:	6103      	str	r3, [r0, #16]
 8016356:	dd19      	ble.n	801638c <__s2b+0x64>
 8016358:	f104 0809 	add.w	r8, r4, #9
 801635c:	46c1      	mov	r9, r8
 801635e:	442c      	add	r4, r5
 8016360:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016364:	4601      	mov	r1, r0
 8016366:	3b30      	subs	r3, #48	; 0x30
 8016368:	220a      	movs	r2, #10
 801636a:	4630      	mov	r0, r6
 801636c:	f7ff ffa1 	bl	80162b2 <__multadd>
 8016370:	45a1      	cmp	r9, r4
 8016372:	d1f5      	bne.n	8016360 <__s2b+0x38>
 8016374:	eb08 0405 	add.w	r4, r8, r5
 8016378:	3c08      	subs	r4, #8
 801637a:	1b2d      	subs	r5, r5, r4
 801637c:	1963      	adds	r3, r4, r5
 801637e:	42bb      	cmp	r3, r7
 8016380:	db07      	blt.n	8016392 <__s2b+0x6a>
 8016382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016386:	0052      	lsls	r2, r2, #1
 8016388:	3101      	adds	r1, #1
 801638a:	e7d9      	b.n	8016340 <__s2b+0x18>
 801638c:	340a      	adds	r4, #10
 801638e:	2509      	movs	r5, #9
 8016390:	e7f3      	b.n	801637a <__s2b+0x52>
 8016392:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016396:	4601      	mov	r1, r0
 8016398:	3b30      	subs	r3, #48	; 0x30
 801639a:	220a      	movs	r2, #10
 801639c:	4630      	mov	r0, r6
 801639e:	f7ff ff88 	bl	80162b2 <__multadd>
 80163a2:	e7eb      	b.n	801637c <__s2b+0x54>

080163a4 <__hi0bits>:
 80163a4:	0c02      	lsrs	r2, r0, #16
 80163a6:	0412      	lsls	r2, r2, #16
 80163a8:	4603      	mov	r3, r0
 80163aa:	b9b2      	cbnz	r2, 80163da <__hi0bits+0x36>
 80163ac:	0403      	lsls	r3, r0, #16
 80163ae:	2010      	movs	r0, #16
 80163b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80163b4:	bf04      	itt	eq
 80163b6:	021b      	lsleq	r3, r3, #8
 80163b8:	3008      	addeq	r0, #8
 80163ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80163be:	bf04      	itt	eq
 80163c0:	011b      	lsleq	r3, r3, #4
 80163c2:	3004      	addeq	r0, #4
 80163c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80163c8:	bf04      	itt	eq
 80163ca:	009b      	lsleq	r3, r3, #2
 80163cc:	3002      	addeq	r0, #2
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	db06      	blt.n	80163e0 <__hi0bits+0x3c>
 80163d2:	005b      	lsls	r3, r3, #1
 80163d4:	d503      	bpl.n	80163de <__hi0bits+0x3a>
 80163d6:	3001      	adds	r0, #1
 80163d8:	4770      	bx	lr
 80163da:	2000      	movs	r0, #0
 80163dc:	e7e8      	b.n	80163b0 <__hi0bits+0xc>
 80163de:	2020      	movs	r0, #32
 80163e0:	4770      	bx	lr

080163e2 <__lo0bits>:
 80163e2:	6803      	ldr	r3, [r0, #0]
 80163e4:	f013 0207 	ands.w	r2, r3, #7
 80163e8:	4601      	mov	r1, r0
 80163ea:	d00b      	beq.n	8016404 <__lo0bits+0x22>
 80163ec:	07da      	lsls	r2, r3, #31
 80163ee:	d423      	bmi.n	8016438 <__lo0bits+0x56>
 80163f0:	0798      	lsls	r0, r3, #30
 80163f2:	bf49      	itett	mi
 80163f4:	085b      	lsrmi	r3, r3, #1
 80163f6:	089b      	lsrpl	r3, r3, #2
 80163f8:	2001      	movmi	r0, #1
 80163fa:	600b      	strmi	r3, [r1, #0]
 80163fc:	bf5c      	itt	pl
 80163fe:	600b      	strpl	r3, [r1, #0]
 8016400:	2002      	movpl	r0, #2
 8016402:	4770      	bx	lr
 8016404:	b298      	uxth	r0, r3
 8016406:	b9a8      	cbnz	r0, 8016434 <__lo0bits+0x52>
 8016408:	0c1b      	lsrs	r3, r3, #16
 801640a:	2010      	movs	r0, #16
 801640c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016410:	bf04      	itt	eq
 8016412:	0a1b      	lsreq	r3, r3, #8
 8016414:	3008      	addeq	r0, #8
 8016416:	071a      	lsls	r2, r3, #28
 8016418:	bf04      	itt	eq
 801641a:	091b      	lsreq	r3, r3, #4
 801641c:	3004      	addeq	r0, #4
 801641e:	079a      	lsls	r2, r3, #30
 8016420:	bf04      	itt	eq
 8016422:	089b      	lsreq	r3, r3, #2
 8016424:	3002      	addeq	r0, #2
 8016426:	07da      	lsls	r2, r3, #31
 8016428:	d402      	bmi.n	8016430 <__lo0bits+0x4e>
 801642a:	085b      	lsrs	r3, r3, #1
 801642c:	d006      	beq.n	801643c <__lo0bits+0x5a>
 801642e:	3001      	adds	r0, #1
 8016430:	600b      	str	r3, [r1, #0]
 8016432:	4770      	bx	lr
 8016434:	4610      	mov	r0, r2
 8016436:	e7e9      	b.n	801640c <__lo0bits+0x2a>
 8016438:	2000      	movs	r0, #0
 801643a:	4770      	bx	lr
 801643c:	2020      	movs	r0, #32
 801643e:	4770      	bx	lr

08016440 <__i2b>:
 8016440:	b510      	push	{r4, lr}
 8016442:	460c      	mov	r4, r1
 8016444:	2101      	movs	r1, #1
 8016446:	f7ff fee9 	bl	801621c <_Balloc>
 801644a:	2201      	movs	r2, #1
 801644c:	6144      	str	r4, [r0, #20]
 801644e:	6102      	str	r2, [r0, #16]
 8016450:	bd10      	pop	{r4, pc}

08016452 <__multiply>:
 8016452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016456:	4614      	mov	r4, r2
 8016458:	690a      	ldr	r2, [r1, #16]
 801645a:	6923      	ldr	r3, [r4, #16]
 801645c:	429a      	cmp	r2, r3
 801645e:	bfb8      	it	lt
 8016460:	460b      	movlt	r3, r1
 8016462:	4688      	mov	r8, r1
 8016464:	bfbc      	itt	lt
 8016466:	46a0      	movlt	r8, r4
 8016468:	461c      	movlt	r4, r3
 801646a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801646e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016476:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801647a:	eb07 0609 	add.w	r6, r7, r9
 801647e:	42b3      	cmp	r3, r6
 8016480:	bfb8      	it	lt
 8016482:	3101      	addlt	r1, #1
 8016484:	f7ff feca 	bl	801621c <_Balloc>
 8016488:	f100 0514 	add.w	r5, r0, #20
 801648c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016490:	462b      	mov	r3, r5
 8016492:	2200      	movs	r2, #0
 8016494:	4573      	cmp	r3, lr
 8016496:	d316      	bcc.n	80164c6 <__multiply+0x74>
 8016498:	f104 0214 	add.w	r2, r4, #20
 801649c:	f108 0114 	add.w	r1, r8, #20
 80164a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80164a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	9b00      	ldr	r3, [sp, #0]
 80164ac:	9201      	str	r2, [sp, #4]
 80164ae:	4293      	cmp	r3, r2
 80164b0:	d80c      	bhi.n	80164cc <__multiply+0x7a>
 80164b2:	2e00      	cmp	r6, #0
 80164b4:	dd03      	ble.n	80164be <__multiply+0x6c>
 80164b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d05d      	beq.n	801657a <__multiply+0x128>
 80164be:	6106      	str	r6, [r0, #16]
 80164c0:	b003      	add	sp, #12
 80164c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c6:	f843 2b04 	str.w	r2, [r3], #4
 80164ca:	e7e3      	b.n	8016494 <__multiply+0x42>
 80164cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80164d0:	f1bb 0f00 	cmp.w	fp, #0
 80164d4:	d023      	beq.n	801651e <__multiply+0xcc>
 80164d6:	4689      	mov	r9, r1
 80164d8:	46ac      	mov	ip, r5
 80164da:	f04f 0800 	mov.w	r8, #0
 80164de:	f859 4b04 	ldr.w	r4, [r9], #4
 80164e2:	f8dc a000 	ldr.w	sl, [ip]
 80164e6:	b2a3      	uxth	r3, r4
 80164e8:	fa1f fa8a 	uxth.w	sl, sl
 80164ec:	fb0b a303 	mla	r3, fp, r3, sl
 80164f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80164f4:	f8dc 4000 	ldr.w	r4, [ip]
 80164f8:	4443      	add	r3, r8
 80164fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8016502:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016506:	46e2      	mov	sl, ip
 8016508:	b29b      	uxth	r3, r3
 801650a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801650e:	454f      	cmp	r7, r9
 8016510:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016514:	f84a 3b04 	str.w	r3, [sl], #4
 8016518:	d82b      	bhi.n	8016572 <__multiply+0x120>
 801651a:	f8cc 8004 	str.w	r8, [ip, #4]
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016524:	3204      	adds	r2, #4
 8016526:	f1ba 0f00 	cmp.w	sl, #0
 801652a:	d020      	beq.n	801656e <__multiply+0x11c>
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	4689      	mov	r9, r1
 8016530:	46a8      	mov	r8, r5
 8016532:	f04f 0b00 	mov.w	fp, #0
 8016536:	f8b9 c000 	ldrh.w	ip, [r9]
 801653a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801653e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016542:	445c      	add	r4, fp
 8016544:	46c4      	mov	ip, r8
 8016546:	b29b      	uxth	r3, r3
 8016548:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801654c:	f84c 3b04 	str.w	r3, [ip], #4
 8016550:	f859 3b04 	ldr.w	r3, [r9], #4
 8016554:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016558:	0c1b      	lsrs	r3, r3, #16
 801655a:	fb0a b303 	mla	r3, sl, r3, fp
 801655e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016562:	454f      	cmp	r7, r9
 8016564:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016568:	d805      	bhi.n	8016576 <__multiply+0x124>
 801656a:	f8c8 3004 	str.w	r3, [r8, #4]
 801656e:	3504      	adds	r5, #4
 8016570:	e79b      	b.n	80164aa <__multiply+0x58>
 8016572:	46d4      	mov	ip, sl
 8016574:	e7b3      	b.n	80164de <__multiply+0x8c>
 8016576:	46e0      	mov	r8, ip
 8016578:	e7dd      	b.n	8016536 <__multiply+0xe4>
 801657a:	3e01      	subs	r6, #1
 801657c:	e799      	b.n	80164b2 <__multiply+0x60>
	...

08016580 <__pow5mult>:
 8016580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016584:	4615      	mov	r5, r2
 8016586:	f012 0203 	ands.w	r2, r2, #3
 801658a:	4606      	mov	r6, r0
 801658c:	460f      	mov	r7, r1
 801658e:	d007      	beq.n	80165a0 <__pow5mult+0x20>
 8016590:	3a01      	subs	r2, #1
 8016592:	4c21      	ldr	r4, [pc, #132]	; (8016618 <__pow5mult+0x98>)
 8016594:	2300      	movs	r3, #0
 8016596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801659a:	f7ff fe8a 	bl	80162b2 <__multadd>
 801659e:	4607      	mov	r7, r0
 80165a0:	10ad      	asrs	r5, r5, #2
 80165a2:	d035      	beq.n	8016610 <__pow5mult+0x90>
 80165a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80165a6:	b93c      	cbnz	r4, 80165b8 <__pow5mult+0x38>
 80165a8:	2010      	movs	r0, #16
 80165aa:	f7ff fe1d 	bl	80161e8 <malloc>
 80165ae:	6270      	str	r0, [r6, #36]	; 0x24
 80165b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80165b4:	6004      	str	r4, [r0, #0]
 80165b6:	60c4      	str	r4, [r0, #12]
 80165b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80165bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80165c0:	b94c      	cbnz	r4, 80165d6 <__pow5mult+0x56>
 80165c2:	f240 2171 	movw	r1, #625	; 0x271
 80165c6:	4630      	mov	r0, r6
 80165c8:	f7ff ff3a 	bl	8016440 <__i2b>
 80165cc:	2300      	movs	r3, #0
 80165ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80165d2:	4604      	mov	r4, r0
 80165d4:	6003      	str	r3, [r0, #0]
 80165d6:	f04f 0800 	mov.w	r8, #0
 80165da:	07eb      	lsls	r3, r5, #31
 80165dc:	d50a      	bpl.n	80165f4 <__pow5mult+0x74>
 80165de:	4639      	mov	r1, r7
 80165e0:	4622      	mov	r2, r4
 80165e2:	4630      	mov	r0, r6
 80165e4:	f7ff ff35 	bl	8016452 <__multiply>
 80165e8:	4639      	mov	r1, r7
 80165ea:	4681      	mov	r9, r0
 80165ec:	4630      	mov	r0, r6
 80165ee:	f7ff fe49 	bl	8016284 <_Bfree>
 80165f2:	464f      	mov	r7, r9
 80165f4:	106d      	asrs	r5, r5, #1
 80165f6:	d00b      	beq.n	8016610 <__pow5mult+0x90>
 80165f8:	6820      	ldr	r0, [r4, #0]
 80165fa:	b938      	cbnz	r0, 801660c <__pow5mult+0x8c>
 80165fc:	4622      	mov	r2, r4
 80165fe:	4621      	mov	r1, r4
 8016600:	4630      	mov	r0, r6
 8016602:	f7ff ff26 	bl	8016452 <__multiply>
 8016606:	6020      	str	r0, [r4, #0]
 8016608:	f8c0 8000 	str.w	r8, [r0]
 801660c:	4604      	mov	r4, r0
 801660e:	e7e4      	b.n	80165da <__pow5mult+0x5a>
 8016610:	4638      	mov	r0, r7
 8016612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016616:	bf00      	nop
 8016618:	08018460 	.word	0x08018460

0801661c <__lshift>:
 801661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016620:	460c      	mov	r4, r1
 8016622:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016626:	6923      	ldr	r3, [r4, #16]
 8016628:	6849      	ldr	r1, [r1, #4]
 801662a:	eb0a 0903 	add.w	r9, sl, r3
 801662e:	68a3      	ldr	r3, [r4, #8]
 8016630:	4607      	mov	r7, r0
 8016632:	4616      	mov	r6, r2
 8016634:	f109 0501 	add.w	r5, r9, #1
 8016638:	42ab      	cmp	r3, r5
 801663a:	db32      	blt.n	80166a2 <__lshift+0x86>
 801663c:	4638      	mov	r0, r7
 801663e:	f7ff fded 	bl	801621c <_Balloc>
 8016642:	2300      	movs	r3, #0
 8016644:	4680      	mov	r8, r0
 8016646:	f100 0114 	add.w	r1, r0, #20
 801664a:	461a      	mov	r2, r3
 801664c:	4553      	cmp	r3, sl
 801664e:	db2b      	blt.n	80166a8 <__lshift+0x8c>
 8016650:	6920      	ldr	r0, [r4, #16]
 8016652:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016656:	f104 0314 	add.w	r3, r4, #20
 801665a:	f016 021f 	ands.w	r2, r6, #31
 801665e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016662:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016666:	d025      	beq.n	80166b4 <__lshift+0x98>
 8016668:	f1c2 0e20 	rsb	lr, r2, #32
 801666c:	2000      	movs	r0, #0
 801666e:	681e      	ldr	r6, [r3, #0]
 8016670:	468a      	mov	sl, r1
 8016672:	4096      	lsls	r6, r2
 8016674:	4330      	orrs	r0, r6
 8016676:	f84a 0b04 	str.w	r0, [sl], #4
 801667a:	f853 0b04 	ldr.w	r0, [r3], #4
 801667e:	459c      	cmp	ip, r3
 8016680:	fa20 f00e 	lsr.w	r0, r0, lr
 8016684:	d814      	bhi.n	80166b0 <__lshift+0x94>
 8016686:	6048      	str	r0, [r1, #4]
 8016688:	b108      	cbz	r0, 801668e <__lshift+0x72>
 801668a:	f109 0502 	add.w	r5, r9, #2
 801668e:	3d01      	subs	r5, #1
 8016690:	4638      	mov	r0, r7
 8016692:	f8c8 5010 	str.w	r5, [r8, #16]
 8016696:	4621      	mov	r1, r4
 8016698:	f7ff fdf4 	bl	8016284 <_Bfree>
 801669c:	4640      	mov	r0, r8
 801669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a2:	3101      	adds	r1, #1
 80166a4:	005b      	lsls	r3, r3, #1
 80166a6:	e7c7      	b.n	8016638 <__lshift+0x1c>
 80166a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80166ac:	3301      	adds	r3, #1
 80166ae:	e7cd      	b.n	801664c <__lshift+0x30>
 80166b0:	4651      	mov	r1, sl
 80166b2:	e7dc      	b.n	801666e <__lshift+0x52>
 80166b4:	3904      	subs	r1, #4
 80166b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80166ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80166be:	459c      	cmp	ip, r3
 80166c0:	d8f9      	bhi.n	80166b6 <__lshift+0x9a>
 80166c2:	e7e4      	b.n	801668e <__lshift+0x72>

080166c4 <__mcmp>:
 80166c4:	6903      	ldr	r3, [r0, #16]
 80166c6:	690a      	ldr	r2, [r1, #16]
 80166c8:	1a9b      	subs	r3, r3, r2
 80166ca:	b530      	push	{r4, r5, lr}
 80166cc:	d10c      	bne.n	80166e8 <__mcmp+0x24>
 80166ce:	0092      	lsls	r2, r2, #2
 80166d0:	3014      	adds	r0, #20
 80166d2:	3114      	adds	r1, #20
 80166d4:	1884      	adds	r4, r0, r2
 80166d6:	4411      	add	r1, r2
 80166d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80166dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80166e0:	4295      	cmp	r5, r2
 80166e2:	d003      	beq.n	80166ec <__mcmp+0x28>
 80166e4:	d305      	bcc.n	80166f2 <__mcmp+0x2e>
 80166e6:	2301      	movs	r3, #1
 80166e8:	4618      	mov	r0, r3
 80166ea:	bd30      	pop	{r4, r5, pc}
 80166ec:	42a0      	cmp	r0, r4
 80166ee:	d3f3      	bcc.n	80166d8 <__mcmp+0x14>
 80166f0:	e7fa      	b.n	80166e8 <__mcmp+0x24>
 80166f2:	f04f 33ff 	mov.w	r3, #4294967295
 80166f6:	e7f7      	b.n	80166e8 <__mcmp+0x24>

080166f8 <__mdiff>:
 80166f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166fc:	460d      	mov	r5, r1
 80166fe:	4607      	mov	r7, r0
 8016700:	4611      	mov	r1, r2
 8016702:	4628      	mov	r0, r5
 8016704:	4614      	mov	r4, r2
 8016706:	f7ff ffdd 	bl	80166c4 <__mcmp>
 801670a:	1e06      	subs	r6, r0, #0
 801670c:	d108      	bne.n	8016720 <__mdiff+0x28>
 801670e:	4631      	mov	r1, r6
 8016710:	4638      	mov	r0, r7
 8016712:	f7ff fd83 	bl	801621c <_Balloc>
 8016716:	2301      	movs	r3, #1
 8016718:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016720:	bfa4      	itt	ge
 8016722:	4623      	movge	r3, r4
 8016724:	462c      	movge	r4, r5
 8016726:	4638      	mov	r0, r7
 8016728:	6861      	ldr	r1, [r4, #4]
 801672a:	bfa6      	itte	ge
 801672c:	461d      	movge	r5, r3
 801672e:	2600      	movge	r6, #0
 8016730:	2601      	movlt	r6, #1
 8016732:	f7ff fd73 	bl	801621c <_Balloc>
 8016736:	692b      	ldr	r3, [r5, #16]
 8016738:	60c6      	str	r6, [r0, #12]
 801673a:	6926      	ldr	r6, [r4, #16]
 801673c:	f105 0914 	add.w	r9, r5, #20
 8016740:	f104 0214 	add.w	r2, r4, #20
 8016744:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016748:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801674c:	f100 0514 	add.w	r5, r0, #20
 8016750:	f04f 0e00 	mov.w	lr, #0
 8016754:	f852 ab04 	ldr.w	sl, [r2], #4
 8016758:	f859 4b04 	ldr.w	r4, [r9], #4
 801675c:	fa1e f18a 	uxtah	r1, lr, sl
 8016760:	b2a3      	uxth	r3, r4
 8016762:	1ac9      	subs	r1, r1, r3
 8016764:	0c23      	lsrs	r3, r4, #16
 8016766:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801676a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801676e:	b289      	uxth	r1, r1
 8016770:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016774:	45c8      	cmp	r8, r9
 8016776:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801677a:	4694      	mov	ip, r2
 801677c:	f845 3b04 	str.w	r3, [r5], #4
 8016780:	d8e8      	bhi.n	8016754 <__mdiff+0x5c>
 8016782:	45bc      	cmp	ip, r7
 8016784:	d304      	bcc.n	8016790 <__mdiff+0x98>
 8016786:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801678a:	b183      	cbz	r3, 80167ae <__mdiff+0xb6>
 801678c:	6106      	str	r6, [r0, #16]
 801678e:	e7c5      	b.n	801671c <__mdiff+0x24>
 8016790:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016794:	fa1e f381 	uxtah	r3, lr, r1
 8016798:	141a      	asrs	r2, r3, #16
 801679a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801679e:	b29b      	uxth	r3, r3
 80167a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80167a8:	f845 3b04 	str.w	r3, [r5], #4
 80167ac:	e7e9      	b.n	8016782 <__mdiff+0x8a>
 80167ae:	3e01      	subs	r6, #1
 80167b0:	e7e9      	b.n	8016786 <__mdiff+0x8e>
	...

080167b4 <__ulp>:
 80167b4:	4b12      	ldr	r3, [pc, #72]	; (8016800 <__ulp+0x4c>)
 80167b6:	ee10 2a90 	vmov	r2, s1
 80167ba:	401a      	ands	r2, r3
 80167bc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dd04      	ble.n	80167ce <__ulp+0x1a>
 80167c4:	2000      	movs	r0, #0
 80167c6:	4619      	mov	r1, r3
 80167c8:	ec41 0b10 	vmov	d0, r0, r1
 80167cc:	4770      	bx	lr
 80167ce:	425b      	negs	r3, r3
 80167d0:	151b      	asrs	r3, r3, #20
 80167d2:	2b13      	cmp	r3, #19
 80167d4:	f04f 0000 	mov.w	r0, #0
 80167d8:	f04f 0100 	mov.w	r1, #0
 80167dc:	dc04      	bgt.n	80167e8 <__ulp+0x34>
 80167de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80167e2:	fa42 f103 	asr.w	r1, r2, r3
 80167e6:	e7ef      	b.n	80167c8 <__ulp+0x14>
 80167e8:	3b14      	subs	r3, #20
 80167ea:	2b1e      	cmp	r3, #30
 80167ec:	f04f 0201 	mov.w	r2, #1
 80167f0:	bfda      	itte	le
 80167f2:	f1c3 031f 	rsble	r3, r3, #31
 80167f6:	fa02 f303 	lslle.w	r3, r2, r3
 80167fa:	4613      	movgt	r3, r2
 80167fc:	4618      	mov	r0, r3
 80167fe:	e7e3      	b.n	80167c8 <__ulp+0x14>
 8016800:	7ff00000 	.word	0x7ff00000

08016804 <__b2d>:
 8016804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016806:	6905      	ldr	r5, [r0, #16]
 8016808:	f100 0714 	add.w	r7, r0, #20
 801680c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016810:	1f2e      	subs	r6, r5, #4
 8016812:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016816:	4620      	mov	r0, r4
 8016818:	f7ff fdc4 	bl	80163a4 <__hi0bits>
 801681c:	f1c0 0320 	rsb	r3, r0, #32
 8016820:	280a      	cmp	r0, #10
 8016822:	600b      	str	r3, [r1, #0]
 8016824:	f8df c074 	ldr.w	ip, [pc, #116]	; 801689c <__b2d+0x98>
 8016828:	dc14      	bgt.n	8016854 <__b2d+0x50>
 801682a:	f1c0 0e0b 	rsb	lr, r0, #11
 801682e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016832:	42b7      	cmp	r7, r6
 8016834:	ea41 030c 	orr.w	r3, r1, ip
 8016838:	bf34      	ite	cc
 801683a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801683e:	2100      	movcs	r1, #0
 8016840:	3015      	adds	r0, #21
 8016842:	fa04 f000 	lsl.w	r0, r4, r0
 8016846:	fa21 f10e 	lsr.w	r1, r1, lr
 801684a:	ea40 0201 	orr.w	r2, r0, r1
 801684e:	ec43 2b10 	vmov	d0, r2, r3
 8016852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016854:	42b7      	cmp	r7, r6
 8016856:	bf3a      	itte	cc
 8016858:	f1a5 0608 	subcc.w	r6, r5, #8
 801685c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016860:	2100      	movcs	r1, #0
 8016862:	380b      	subs	r0, #11
 8016864:	d015      	beq.n	8016892 <__b2d+0x8e>
 8016866:	4084      	lsls	r4, r0
 8016868:	f1c0 0520 	rsb	r5, r0, #32
 801686c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016870:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016874:	42be      	cmp	r6, r7
 8016876:	fa21 fc05 	lsr.w	ip, r1, r5
 801687a:	ea44 030c 	orr.w	r3, r4, ip
 801687e:	bf8c      	ite	hi
 8016880:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016884:	2400      	movls	r4, #0
 8016886:	fa01 f000 	lsl.w	r0, r1, r0
 801688a:	40ec      	lsrs	r4, r5
 801688c:	ea40 0204 	orr.w	r2, r0, r4
 8016890:	e7dd      	b.n	801684e <__b2d+0x4a>
 8016892:	ea44 030c 	orr.w	r3, r4, ip
 8016896:	460a      	mov	r2, r1
 8016898:	e7d9      	b.n	801684e <__b2d+0x4a>
 801689a:	bf00      	nop
 801689c:	3ff00000 	.word	0x3ff00000

080168a0 <__d2b>:
 80168a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80168a4:	460e      	mov	r6, r1
 80168a6:	2101      	movs	r1, #1
 80168a8:	ec59 8b10 	vmov	r8, r9, d0
 80168ac:	4615      	mov	r5, r2
 80168ae:	f7ff fcb5 	bl	801621c <_Balloc>
 80168b2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80168b6:	4607      	mov	r7, r0
 80168b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80168bc:	bb34      	cbnz	r4, 801690c <__d2b+0x6c>
 80168be:	9301      	str	r3, [sp, #4]
 80168c0:	f1b8 0300 	subs.w	r3, r8, #0
 80168c4:	d027      	beq.n	8016916 <__d2b+0x76>
 80168c6:	a802      	add	r0, sp, #8
 80168c8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80168cc:	f7ff fd89 	bl	80163e2 <__lo0bits>
 80168d0:	9900      	ldr	r1, [sp, #0]
 80168d2:	b1f0      	cbz	r0, 8016912 <__d2b+0x72>
 80168d4:	9a01      	ldr	r2, [sp, #4]
 80168d6:	f1c0 0320 	rsb	r3, r0, #32
 80168da:	fa02 f303 	lsl.w	r3, r2, r3
 80168de:	430b      	orrs	r3, r1
 80168e0:	40c2      	lsrs	r2, r0
 80168e2:	617b      	str	r3, [r7, #20]
 80168e4:	9201      	str	r2, [sp, #4]
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	61bb      	str	r3, [r7, #24]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	bf14      	ite	ne
 80168ee:	2102      	movne	r1, #2
 80168f0:	2101      	moveq	r1, #1
 80168f2:	6139      	str	r1, [r7, #16]
 80168f4:	b1c4      	cbz	r4, 8016928 <__d2b+0x88>
 80168f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80168fa:	4404      	add	r4, r0
 80168fc:	6034      	str	r4, [r6, #0]
 80168fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016902:	6028      	str	r0, [r5, #0]
 8016904:	4638      	mov	r0, r7
 8016906:	b003      	add	sp, #12
 8016908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801690c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016910:	e7d5      	b.n	80168be <__d2b+0x1e>
 8016912:	6179      	str	r1, [r7, #20]
 8016914:	e7e7      	b.n	80168e6 <__d2b+0x46>
 8016916:	a801      	add	r0, sp, #4
 8016918:	f7ff fd63 	bl	80163e2 <__lo0bits>
 801691c:	9b01      	ldr	r3, [sp, #4]
 801691e:	617b      	str	r3, [r7, #20]
 8016920:	2101      	movs	r1, #1
 8016922:	6139      	str	r1, [r7, #16]
 8016924:	3020      	adds	r0, #32
 8016926:	e7e5      	b.n	80168f4 <__d2b+0x54>
 8016928:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801692c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016930:	6030      	str	r0, [r6, #0]
 8016932:	6918      	ldr	r0, [r3, #16]
 8016934:	f7ff fd36 	bl	80163a4 <__hi0bits>
 8016938:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801693c:	e7e1      	b.n	8016902 <__d2b+0x62>

0801693e <__ratio>:
 801693e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016942:	4688      	mov	r8, r1
 8016944:	4669      	mov	r1, sp
 8016946:	4681      	mov	r9, r0
 8016948:	f7ff ff5c 	bl	8016804 <__b2d>
 801694c:	a901      	add	r1, sp, #4
 801694e:	4640      	mov	r0, r8
 8016950:	ec57 6b10 	vmov	r6, r7, d0
 8016954:	f7ff ff56 	bl	8016804 <__b2d>
 8016958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801695c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016960:	eba3 0c02 	sub.w	ip, r3, r2
 8016964:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016968:	1a9b      	subs	r3, r3, r2
 801696a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801696e:	ec5b ab10 	vmov	sl, fp, d0
 8016972:	2b00      	cmp	r3, #0
 8016974:	bfce      	itee	gt
 8016976:	463a      	movgt	r2, r7
 8016978:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801697c:	465a      	movle	r2, fp
 801697e:	4659      	mov	r1, fp
 8016980:	463d      	mov	r5, r7
 8016982:	bfd4      	ite	le
 8016984:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016988:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801698c:	4630      	mov	r0, r6
 801698e:	ee10 2a10 	vmov	r2, s0
 8016992:	460b      	mov	r3, r1
 8016994:	4629      	mov	r1, r5
 8016996:	f7e9 ff71 	bl	800087c <__aeabi_ddiv>
 801699a:	ec41 0b10 	vmov	d0, r0, r1
 801699e:	b003      	add	sp, #12
 80169a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169a4 <__copybits>:
 80169a4:	3901      	subs	r1, #1
 80169a6:	b510      	push	{r4, lr}
 80169a8:	1149      	asrs	r1, r1, #5
 80169aa:	6914      	ldr	r4, [r2, #16]
 80169ac:	3101      	adds	r1, #1
 80169ae:	f102 0314 	add.w	r3, r2, #20
 80169b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80169b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80169ba:	42a3      	cmp	r3, r4
 80169bc:	4602      	mov	r2, r0
 80169be:	d303      	bcc.n	80169c8 <__copybits+0x24>
 80169c0:	2300      	movs	r3, #0
 80169c2:	428a      	cmp	r2, r1
 80169c4:	d305      	bcc.n	80169d2 <__copybits+0x2e>
 80169c6:	bd10      	pop	{r4, pc}
 80169c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80169cc:	f840 2b04 	str.w	r2, [r0], #4
 80169d0:	e7f3      	b.n	80169ba <__copybits+0x16>
 80169d2:	f842 3b04 	str.w	r3, [r2], #4
 80169d6:	e7f4      	b.n	80169c2 <__copybits+0x1e>

080169d8 <__any_on>:
 80169d8:	f100 0214 	add.w	r2, r0, #20
 80169dc:	6900      	ldr	r0, [r0, #16]
 80169de:	114b      	asrs	r3, r1, #5
 80169e0:	4298      	cmp	r0, r3
 80169e2:	b510      	push	{r4, lr}
 80169e4:	db11      	blt.n	8016a0a <__any_on+0x32>
 80169e6:	dd0a      	ble.n	80169fe <__any_on+0x26>
 80169e8:	f011 011f 	ands.w	r1, r1, #31
 80169ec:	d007      	beq.n	80169fe <__any_on+0x26>
 80169ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169f2:	fa24 f001 	lsr.w	r0, r4, r1
 80169f6:	fa00 f101 	lsl.w	r1, r0, r1
 80169fa:	428c      	cmp	r4, r1
 80169fc:	d10b      	bne.n	8016a16 <__any_on+0x3e>
 80169fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a02:	4293      	cmp	r3, r2
 8016a04:	d803      	bhi.n	8016a0e <__any_on+0x36>
 8016a06:	2000      	movs	r0, #0
 8016a08:	bd10      	pop	{r4, pc}
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	e7f7      	b.n	80169fe <__any_on+0x26>
 8016a0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a12:	2900      	cmp	r1, #0
 8016a14:	d0f5      	beq.n	8016a02 <__any_on+0x2a>
 8016a16:	2001      	movs	r0, #1
 8016a18:	e7f6      	b.n	8016a08 <__any_on+0x30>

08016a1a <_calloc_r>:
 8016a1a:	b538      	push	{r3, r4, r5, lr}
 8016a1c:	fb02 f401 	mul.w	r4, r2, r1
 8016a20:	4621      	mov	r1, r4
 8016a22:	f000 f857 	bl	8016ad4 <_malloc_r>
 8016a26:	4605      	mov	r5, r0
 8016a28:	b118      	cbz	r0, 8016a32 <_calloc_r+0x18>
 8016a2a:	4622      	mov	r2, r4
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	f7fc f906 	bl	8012c3e <memset>
 8016a32:	4628      	mov	r0, r5
 8016a34:	bd38      	pop	{r3, r4, r5, pc}
	...

08016a38 <_free_r>:
 8016a38:	b538      	push	{r3, r4, r5, lr}
 8016a3a:	4605      	mov	r5, r0
 8016a3c:	2900      	cmp	r1, #0
 8016a3e:	d045      	beq.n	8016acc <_free_r+0x94>
 8016a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a44:	1f0c      	subs	r4, r1, #4
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	bfb8      	it	lt
 8016a4a:	18e4      	addlt	r4, r4, r3
 8016a4c:	f000 ffdb 	bl	8017a06 <__malloc_lock>
 8016a50:	4a1f      	ldr	r2, [pc, #124]	; (8016ad0 <_free_r+0x98>)
 8016a52:	6813      	ldr	r3, [r2, #0]
 8016a54:	4610      	mov	r0, r2
 8016a56:	b933      	cbnz	r3, 8016a66 <_free_r+0x2e>
 8016a58:	6063      	str	r3, [r4, #4]
 8016a5a:	6014      	str	r4, [r2, #0]
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a62:	f000 bfd1 	b.w	8017a08 <__malloc_unlock>
 8016a66:	42a3      	cmp	r3, r4
 8016a68:	d90c      	bls.n	8016a84 <_free_r+0x4c>
 8016a6a:	6821      	ldr	r1, [r4, #0]
 8016a6c:	1862      	adds	r2, r4, r1
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	bf04      	itt	eq
 8016a72:	681a      	ldreq	r2, [r3, #0]
 8016a74:	685b      	ldreq	r3, [r3, #4]
 8016a76:	6063      	str	r3, [r4, #4]
 8016a78:	bf04      	itt	eq
 8016a7a:	1852      	addeq	r2, r2, r1
 8016a7c:	6022      	streq	r2, [r4, #0]
 8016a7e:	6004      	str	r4, [r0, #0]
 8016a80:	e7ec      	b.n	8016a5c <_free_r+0x24>
 8016a82:	4613      	mov	r3, r2
 8016a84:	685a      	ldr	r2, [r3, #4]
 8016a86:	b10a      	cbz	r2, 8016a8c <_free_r+0x54>
 8016a88:	42a2      	cmp	r2, r4
 8016a8a:	d9fa      	bls.n	8016a82 <_free_r+0x4a>
 8016a8c:	6819      	ldr	r1, [r3, #0]
 8016a8e:	1858      	adds	r0, r3, r1
 8016a90:	42a0      	cmp	r0, r4
 8016a92:	d10b      	bne.n	8016aac <_free_r+0x74>
 8016a94:	6820      	ldr	r0, [r4, #0]
 8016a96:	4401      	add	r1, r0
 8016a98:	1858      	adds	r0, r3, r1
 8016a9a:	4282      	cmp	r2, r0
 8016a9c:	6019      	str	r1, [r3, #0]
 8016a9e:	d1dd      	bne.n	8016a5c <_free_r+0x24>
 8016aa0:	6810      	ldr	r0, [r2, #0]
 8016aa2:	6852      	ldr	r2, [r2, #4]
 8016aa4:	605a      	str	r2, [r3, #4]
 8016aa6:	4401      	add	r1, r0
 8016aa8:	6019      	str	r1, [r3, #0]
 8016aaa:	e7d7      	b.n	8016a5c <_free_r+0x24>
 8016aac:	d902      	bls.n	8016ab4 <_free_r+0x7c>
 8016aae:	230c      	movs	r3, #12
 8016ab0:	602b      	str	r3, [r5, #0]
 8016ab2:	e7d3      	b.n	8016a5c <_free_r+0x24>
 8016ab4:	6820      	ldr	r0, [r4, #0]
 8016ab6:	1821      	adds	r1, r4, r0
 8016ab8:	428a      	cmp	r2, r1
 8016aba:	bf04      	itt	eq
 8016abc:	6811      	ldreq	r1, [r2, #0]
 8016abe:	6852      	ldreq	r2, [r2, #4]
 8016ac0:	6062      	str	r2, [r4, #4]
 8016ac2:	bf04      	itt	eq
 8016ac4:	1809      	addeq	r1, r1, r0
 8016ac6:	6021      	streq	r1, [r4, #0]
 8016ac8:	605c      	str	r4, [r3, #4]
 8016aca:	e7c7      	b.n	8016a5c <_free_r+0x24>
 8016acc:	bd38      	pop	{r3, r4, r5, pc}
 8016ace:	bf00      	nop
 8016ad0:	20037470 	.word	0x20037470

08016ad4 <_malloc_r>:
 8016ad4:	b570      	push	{r4, r5, r6, lr}
 8016ad6:	1ccd      	adds	r5, r1, #3
 8016ad8:	f025 0503 	bic.w	r5, r5, #3
 8016adc:	3508      	adds	r5, #8
 8016ade:	2d0c      	cmp	r5, #12
 8016ae0:	bf38      	it	cc
 8016ae2:	250c      	movcc	r5, #12
 8016ae4:	2d00      	cmp	r5, #0
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	db01      	blt.n	8016aee <_malloc_r+0x1a>
 8016aea:	42a9      	cmp	r1, r5
 8016aec:	d903      	bls.n	8016af6 <_malloc_r+0x22>
 8016aee:	230c      	movs	r3, #12
 8016af0:	6033      	str	r3, [r6, #0]
 8016af2:	2000      	movs	r0, #0
 8016af4:	bd70      	pop	{r4, r5, r6, pc}
 8016af6:	f000 ff86 	bl	8017a06 <__malloc_lock>
 8016afa:	4a21      	ldr	r2, [pc, #132]	; (8016b80 <_malloc_r+0xac>)
 8016afc:	6814      	ldr	r4, [r2, #0]
 8016afe:	4621      	mov	r1, r4
 8016b00:	b991      	cbnz	r1, 8016b28 <_malloc_r+0x54>
 8016b02:	4c20      	ldr	r4, [pc, #128]	; (8016b84 <_malloc_r+0xb0>)
 8016b04:	6823      	ldr	r3, [r4, #0]
 8016b06:	b91b      	cbnz	r3, 8016b10 <_malloc_r+0x3c>
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f000 fe19 	bl	8017740 <_sbrk_r>
 8016b0e:	6020      	str	r0, [r4, #0]
 8016b10:	4629      	mov	r1, r5
 8016b12:	4630      	mov	r0, r6
 8016b14:	f000 fe14 	bl	8017740 <_sbrk_r>
 8016b18:	1c43      	adds	r3, r0, #1
 8016b1a:	d124      	bne.n	8016b66 <_malloc_r+0x92>
 8016b1c:	230c      	movs	r3, #12
 8016b1e:	6033      	str	r3, [r6, #0]
 8016b20:	4630      	mov	r0, r6
 8016b22:	f000 ff71 	bl	8017a08 <__malloc_unlock>
 8016b26:	e7e4      	b.n	8016af2 <_malloc_r+0x1e>
 8016b28:	680b      	ldr	r3, [r1, #0]
 8016b2a:	1b5b      	subs	r3, r3, r5
 8016b2c:	d418      	bmi.n	8016b60 <_malloc_r+0x8c>
 8016b2e:	2b0b      	cmp	r3, #11
 8016b30:	d90f      	bls.n	8016b52 <_malloc_r+0x7e>
 8016b32:	600b      	str	r3, [r1, #0]
 8016b34:	50cd      	str	r5, [r1, r3]
 8016b36:	18cc      	adds	r4, r1, r3
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f000 ff65 	bl	8017a08 <__malloc_unlock>
 8016b3e:	f104 000b 	add.w	r0, r4, #11
 8016b42:	1d23      	adds	r3, r4, #4
 8016b44:	f020 0007 	bic.w	r0, r0, #7
 8016b48:	1ac3      	subs	r3, r0, r3
 8016b4a:	d0d3      	beq.n	8016af4 <_malloc_r+0x20>
 8016b4c:	425a      	negs	r2, r3
 8016b4e:	50e2      	str	r2, [r4, r3]
 8016b50:	e7d0      	b.n	8016af4 <_malloc_r+0x20>
 8016b52:	428c      	cmp	r4, r1
 8016b54:	684b      	ldr	r3, [r1, #4]
 8016b56:	bf16      	itet	ne
 8016b58:	6063      	strne	r3, [r4, #4]
 8016b5a:	6013      	streq	r3, [r2, #0]
 8016b5c:	460c      	movne	r4, r1
 8016b5e:	e7eb      	b.n	8016b38 <_malloc_r+0x64>
 8016b60:	460c      	mov	r4, r1
 8016b62:	6849      	ldr	r1, [r1, #4]
 8016b64:	e7cc      	b.n	8016b00 <_malloc_r+0x2c>
 8016b66:	1cc4      	adds	r4, r0, #3
 8016b68:	f024 0403 	bic.w	r4, r4, #3
 8016b6c:	42a0      	cmp	r0, r4
 8016b6e:	d005      	beq.n	8016b7c <_malloc_r+0xa8>
 8016b70:	1a21      	subs	r1, r4, r0
 8016b72:	4630      	mov	r0, r6
 8016b74:	f000 fde4 	bl	8017740 <_sbrk_r>
 8016b78:	3001      	adds	r0, #1
 8016b7a:	d0cf      	beq.n	8016b1c <_malloc_r+0x48>
 8016b7c:	6025      	str	r5, [r4, #0]
 8016b7e:	e7db      	b.n	8016b38 <_malloc_r+0x64>
 8016b80:	20037470 	.word	0x20037470
 8016b84:	20037474 	.word	0x20037474

08016b88 <__ssputs_r>:
 8016b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b8c:	688e      	ldr	r6, [r1, #8]
 8016b8e:	429e      	cmp	r6, r3
 8016b90:	4682      	mov	sl, r0
 8016b92:	460c      	mov	r4, r1
 8016b94:	4690      	mov	r8, r2
 8016b96:	4699      	mov	r9, r3
 8016b98:	d837      	bhi.n	8016c0a <__ssputs_r+0x82>
 8016b9a:	898a      	ldrh	r2, [r1, #12]
 8016b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016ba0:	d031      	beq.n	8016c06 <__ssputs_r+0x7e>
 8016ba2:	6825      	ldr	r5, [r4, #0]
 8016ba4:	6909      	ldr	r1, [r1, #16]
 8016ba6:	1a6f      	subs	r7, r5, r1
 8016ba8:	6965      	ldr	r5, [r4, #20]
 8016baa:	2302      	movs	r3, #2
 8016bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8016bb4:	f109 0301 	add.w	r3, r9, #1
 8016bb8:	443b      	add	r3, r7
 8016bba:	429d      	cmp	r5, r3
 8016bbc:	bf38      	it	cc
 8016bbe:	461d      	movcc	r5, r3
 8016bc0:	0553      	lsls	r3, r2, #21
 8016bc2:	d530      	bpl.n	8016c26 <__ssputs_r+0x9e>
 8016bc4:	4629      	mov	r1, r5
 8016bc6:	f7ff ff85 	bl	8016ad4 <_malloc_r>
 8016bca:	4606      	mov	r6, r0
 8016bcc:	b950      	cbnz	r0, 8016be4 <__ssputs_r+0x5c>
 8016bce:	230c      	movs	r3, #12
 8016bd0:	f8ca 3000 	str.w	r3, [sl]
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bda:	81a3      	strh	r3, [r4, #12]
 8016bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8016be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016be4:	463a      	mov	r2, r7
 8016be6:	6921      	ldr	r1, [r4, #16]
 8016be8:	f7fc f81e 	bl	8012c28 <memcpy>
 8016bec:	89a3      	ldrh	r3, [r4, #12]
 8016bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bf6:	81a3      	strh	r3, [r4, #12]
 8016bf8:	6126      	str	r6, [r4, #16]
 8016bfa:	6165      	str	r5, [r4, #20]
 8016bfc:	443e      	add	r6, r7
 8016bfe:	1bed      	subs	r5, r5, r7
 8016c00:	6026      	str	r6, [r4, #0]
 8016c02:	60a5      	str	r5, [r4, #8]
 8016c04:	464e      	mov	r6, r9
 8016c06:	454e      	cmp	r6, r9
 8016c08:	d900      	bls.n	8016c0c <__ssputs_r+0x84>
 8016c0a:	464e      	mov	r6, r9
 8016c0c:	4632      	mov	r2, r6
 8016c0e:	4641      	mov	r1, r8
 8016c10:	6820      	ldr	r0, [r4, #0]
 8016c12:	f000 fedf 	bl	80179d4 <memmove>
 8016c16:	68a3      	ldr	r3, [r4, #8]
 8016c18:	1b9b      	subs	r3, r3, r6
 8016c1a:	60a3      	str	r3, [r4, #8]
 8016c1c:	6823      	ldr	r3, [r4, #0]
 8016c1e:	441e      	add	r6, r3
 8016c20:	6026      	str	r6, [r4, #0]
 8016c22:	2000      	movs	r0, #0
 8016c24:	e7dc      	b.n	8016be0 <__ssputs_r+0x58>
 8016c26:	462a      	mov	r2, r5
 8016c28:	f000 feef 	bl	8017a0a <_realloc_r>
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d1e2      	bne.n	8016bf8 <__ssputs_r+0x70>
 8016c32:	6921      	ldr	r1, [r4, #16]
 8016c34:	4650      	mov	r0, sl
 8016c36:	f7ff feff 	bl	8016a38 <_free_r>
 8016c3a:	e7c8      	b.n	8016bce <__ssputs_r+0x46>

08016c3c <_svfiprintf_r>:
 8016c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c40:	461d      	mov	r5, r3
 8016c42:	898b      	ldrh	r3, [r1, #12]
 8016c44:	061f      	lsls	r7, r3, #24
 8016c46:	b09d      	sub	sp, #116	; 0x74
 8016c48:	4680      	mov	r8, r0
 8016c4a:	460c      	mov	r4, r1
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	d50f      	bpl.n	8016c70 <_svfiprintf_r+0x34>
 8016c50:	690b      	ldr	r3, [r1, #16]
 8016c52:	b96b      	cbnz	r3, 8016c70 <_svfiprintf_r+0x34>
 8016c54:	2140      	movs	r1, #64	; 0x40
 8016c56:	f7ff ff3d 	bl	8016ad4 <_malloc_r>
 8016c5a:	6020      	str	r0, [r4, #0]
 8016c5c:	6120      	str	r0, [r4, #16]
 8016c5e:	b928      	cbnz	r0, 8016c6c <_svfiprintf_r+0x30>
 8016c60:	230c      	movs	r3, #12
 8016c62:	f8c8 3000 	str.w	r3, [r8]
 8016c66:	f04f 30ff 	mov.w	r0, #4294967295
 8016c6a:	e0c8      	b.n	8016dfe <_svfiprintf_r+0x1c2>
 8016c6c:	2340      	movs	r3, #64	; 0x40
 8016c6e:	6163      	str	r3, [r4, #20]
 8016c70:	2300      	movs	r3, #0
 8016c72:	9309      	str	r3, [sp, #36]	; 0x24
 8016c74:	2320      	movs	r3, #32
 8016c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c7a:	2330      	movs	r3, #48	; 0x30
 8016c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c80:	9503      	str	r5, [sp, #12]
 8016c82:	f04f 0b01 	mov.w	fp, #1
 8016c86:	4637      	mov	r7, r6
 8016c88:	463d      	mov	r5, r7
 8016c8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c8e:	b10b      	cbz	r3, 8016c94 <_svfiprintf_r+0x58>
 8016c90:	2b25      	cmp	r3, #37	; 0x25
 8016c92:	d13e      	bne.n	8016d12 <_svfiprintf_r+0xd6>
 8016c94:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c98:	d00b      	beq.n	8016cb2 <_svfiprintf_r+0x76>
 8016c9a:	4653      	mov	r3, sl
 8016c9c:	4632      	mov	r2, r6
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	4640      	mov	r0, r8
 8016ca2:	f7ff ff71 	bl	8016b88 <__ssputs_r>
 8016ca6:	3001      	adds	r0, #1
 8016ca8:	f000 80a4 	beq.w	8016df4 <_svfiprintf_r+0x1b8>
 8016cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cae:	4453      	add	r3, sl
 8016cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8016cb2:	783b      	ldrb	r3, [r7, #0]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	f000 809d 	beq.w	8016df4 <_svfiprintf_r+0x1b8>
 8016cba:	2300      	movs	r3, #0
 8016cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8016cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cc4:	9304      	str	r3, [sp, #16]
 8016cc6:	9307      	str	r3, [sp, #28]
 8016cc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8016cce:	462f      	mov	r7, r5
 8016cd0:	2205      	movs	r2, #5
 8016cd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016cd6:	4850      	ldr	r0, [pc, #320]	; (8016e18 <_svfiprintf_r+0x1dc>)
 8016cd8:	f7e9 fa9a 	bl	8000210 <memchr>
 8016cdc:	9b04      	ldr	r3, [sp, #16]
 8016cde:	b9d0      	cbnz	r0, 8016d16 <_svfiprintf_r+0xda>
 8016ce0:	06d9      	lsls	r1, r3, #27
 8016ce2:	bf44      	itt	mi
 8016ce4:	2220      	movmi	r2, #32
 8016ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cea:	071a      	lsls	r2, r3, #28
 8016cec:	bf44      	itt	mi
 8016cee:	222b      	movmi	r2, #43	; 0x2b
 8016cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cf4:	782a      	ldrb	r2, [r5, #0]
 8016cf6:	2a2a      	cmp	r2, #42	; 0x2a
 8016cf8:	d015      	beq.n	8016d26 <_svfiprintf_r+0xea>
 8016cfa:	9a07      	ldr	r2, [sp, #28]
 8016cfc:	462f      	mov	r7, r5
 8016cfe:	2000      	movs	r0, #0
 8016d00:	250a      	movs	r5, #10
 8016d02:	4639      	mov	r1, r7
 8016d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d08:	3b30      	subs	r3, #48	; 0x30
 8016d0a:	2b09      	cmp	r3, #9
 8016d0c:	d94d      	bls.n	8016daa <_svfiprintf_r+0x16e>
 8016d0e:	b1b8      	cbz	r0, 8016d40 <_svfiprintf_r+0x104>
 8016d10:	e00f      	b.n	8016d32 <_svfiprintf_r+0xf6>
 8016d12:	462f      	mov	r7, r5
 8016d14:	e7b8      	b.n	8016c88 <_svfiprintf_r+0x4c>
 8016d16:	4a40      	ldr	r2, [pc, #256]	; (8016e18 <_svfiprintf_r+0x1dc>)
 8016d18:	1a80      	subs	r0, r0, r2
 8016d1a:	fa0b f000 	lsl.w	r0, fp, r0
 8016d1e:	4318      	orrs	r0, r3
 8016d20:	9004      	str	r0, [sp, #16]
 8016d22:	463d      	mov	r5, r7
 8016d24:	e7d3      	b.n	8016cce <_svfiprintf_r+0x92>
 8016d26:	9a03      	ldr	r2, [sp, #12]
 8016d28:	1d11      	adds	r1, r2, #4
 8016d2a:	6812      	ldr	r2, [r2, #0]
 8016d2c:	9103      	str	r1, [sp, #12]
 8016d2e:	2a00      	cmp	r2, #0
 8016d30:	db01      	blt.n	8016d36 <_svfiprintf_r+0xfa>
 8016d32:	9207      	str	r2, [sp, #28]
 8016d34:	e004      	b.n	8016d40 <_svfiprintf_r+0x104>
 8016d36:	4252      	negs	r2, r2
 8016d38:	f043 0302 	orr.w	r3, r3, #2
 8016d3c:	9207      	str	r2, [sp, #28]
 8016d3e:	9304      	str	r3, [sp, #16]
 8016d40:	783b      	ldrb	r3, [r7, #0]
 8016d42:	2b2e      	cmp	r3, #46	; 0x2e
 8016d44:	d10c      	bne.n	8016d60 <_svfiprintf_r+0x124>
 8016d46:	787b      	ldrb	r3, [r7, #1]
 8016d48:	2b2a      	cmp	r3, #42	; 0x2a
 8016d4a:	d133      	bne.n	8016db4 <_svfiprintf_r+0x178>
 8016d4c:	9b03      	ldr	r3, [sp, #12]
 8016d4e:	1d1a      	adds	r2, r3, #4
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	9203      	str	r2, [sp, #12]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	bfb8      	it	lt
 8016d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d5c:	3702      	adds	r7, #2
 8016d5e:	9305      	str	r3, [sp, #20]
 8016d60:	4d2e      	ldr	r5, [pc, #184]	; (8016e1c <_svfiprintf_r+0x1e0>)
 8016d62:	7839      	ldrb	r1, [r7, #0]
 8016d64:	2203      	movs	r2, #3
 8016d66:	4628      	mov	r0, r5
 8016d68:	f7e9 fa52 	bl	8000210 <memchr>
 8016d6c:	b138      	cbz	r0, 8016d7e <_svfiprintf_r+0x142>
 8016d6e:	2340      	movs	r3, #64	; 0x40
 8016d70:	1b40      	subs	r0, r0, r5
 8016d72:	fa03 f000 	lsl.w	r0, r3, r0
 8016d76:	9b04      	ldr	r3, [sp, #16]
 8016d78:	4303      	orrs	r3, r0
 8016d7a:	3701      	adds	r7, #1
 8016d7c:	9304      	str	r3, [sp, #16]
 8016d7e:	7839      	ldrb	r1, [r7, #0]
 8016d80:	4827      	ldr	r0, [pc, #156]	; (8016e20 <_svfiprintf_r+0x1e4>)
 8016d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d86:	2206      	movs	r2, #6
 8016d88:	1c7e      	adds	r6, r7, #1
 8016d8a:	f7e9 fa41 	bl	8000210 <memchr>
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d038      	beq.n	8016e04 <_svfiprintf_r+0x1c8>
 8016d92:	4b24      	ldr	r3, [pc, #144]	; (8016e24 <_svfiprintf_r+0x1e8>)
 8016d94:	bb13      	cbnz	r3, 8016ddc <_svfiprintf_r+0x1a0>
 8016d96:	9b03      	ldr	r3, [sp, #12]
 8016d98:	3307      	adds	r3, #7
 8016d9a:	f023 0307 	bic.w	r3, r3, #7
 8016d9e:	3308      	adds	r3, #8
 8016da0:	9303      	str	r3, [sp, #12]
 8016da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016da4:	444b      	add	r3, r9
 8016da6:	9309      	str	r3, [sp, #36]	; 0x24
 8016da8:	e76d      	b.n	8016c86 <_svfiprintf_r+0x4a>
 8016daa:	fb05 3202 	mla	r2, r5, r2, r3
 8016dae:	2001      	movs	r0, #1
 8016db0:	460f      	mov	r7, r1
 8016db2:	e7a6      	b.n	8016d02 <_svfiprintf_r+0xc6>
 8016db4:	2300      	movs	r3, #0
 8016db6:	3701      	adds	r7, #1
 8016db8:	9305      	str	r3, [sp, #20]
 8016dba:	4619      	mov	r1, r3
 8016dbc:	250a      	movs	r5, #10
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dc4:	3a30      	subs	r2, #48	; 0x30
 8016dc6:	2a09      	cmp	r2, #9
 8016dc8:	d903      	bls.n	8016dd2 <_svfiprintf_r+0x196>
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d0c8      	beq.n	8016d60 <_svfiprintf_r+0x124>
 8016dce:	9105      	str	r1, [sp, #20]
 8016dd0:	e7c6      	b.n	8016d60 <_svfiprintf_r+0x124>
 8016dd2:	fb05 2101 	mla	r1, r5, r1, r2
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	4607      	mov	r7, r0
 8016dda:	e7f0      	b.n	8016dbe <_svfiprintf_r+0x182>
 8016ddc:	ab03      	add	r3, sp, #12
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	4622      	mov	r2, r4
 8016de2:	4b11      	ldr	r3, [pc, #68]	; (8016e28 <_svfiprintf_r+0x1ec>)
 8016de4:	a904      	add	r1, sp, #16
 8016de6:	4640      	mov	r0, r8
 8016de8:	f7fb ffc6 	bl	8012d78 <_printf_float>
 8016dec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016df0:	4681      	mov	r9, r0
 8016df2:	d1d6      	bne.n	8016da2 <_svfiprintf_r+0x166>
 8016df4:	89a3      	ldrh	r3, [r4, #12]
 8016df6:	065b      	lsls	r3, r3, #25
 8016df8:	f53f af35 	bmi.w	8016c66 <_svfiprintf_r+0x2a>
 8016dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dfe:	b01d      	add	sp, #116	; 0x74
 8016e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e04:	ab03      	add	r3, sp, #12
 8016e06:	9300      	str	r3, [sp, #0]
 8016e08:	4622      	mov	r2, r4
 8016e0a:	4b07      	ldr	r3, [pc, #28]	; (8016e28 <_svfiprintf_r+0x1ec>)
 8016e0c:	a904      	add	r1, sp, #16
 8016e0e:	4640      	mov	r0, r8
 8016e10:	f7fc fa68 	bl	80132e4 <_printf_i>
 8016e14:	e7ea      	b.n	8016dec <_svfiprintf_r+0x1b0>
 8016e16:	bf00      	nop
 8016e18:	0801846c 	.word	0x0801846c
 8016e1c:	08018472 	.word	0x08018472
 8016e20:	08018476 	.word	0x08018476
 8016e24:	08012d79 	.word	0x08012d79
 8016e28:	08016b89 	.word	0x08016b89

08016e2c <_sungetc_r>:
 8016e2c:	b538      	push	{r3, r4, r5, lr}
 8016e2e:	1c4b      	adds	r3, r1, #1
 8016e30:	4614      	mov	r4, r2
 8016e32:	d103      	bne.n	8016e3c <_sungetc_r+0x10>
 8016e34:	f04f 35ff 	mov.w	r5, #4294967295
 8016e38:	4628      	mov	r0, r5
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}
 8016e3c:	8993      	ldrh	r3, [r2, #12]
 8016e3e:	f023 0320 	bic.w	r3, r3, #32
 8016e42:	8193      	strh	r3, [r2, #12]
 8016e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e46:	6852      	ldr	r2, [r2, #4]
 8016e48:	b2cd      	uxtb	r5, r1
 8016e4a:	b18b      	cbz	r3, 8016e70 <_sungetc_r+0x44>
 8016e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	dd08      	ble.n	8016e64 <_sungetc_r+0x38>
 8016e52:	6823      	ldr	r3, [r4, #0]
 8016e54:	1e5a      	subs	r2, r3, #1
 8016e56:	6022      	str	r2, [r4, #0]
 8016e58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016e5c:	6863      	ldr	r3, [r4, #4]
 8016e5e:	3301      	adds	r3, #1
 8016e60:	6063      	str	r3, [r4, #4]
 8016e62:	e7e9      	b.n	8016e38 <_sungetc_r+0xc>
 8016e64:	4621      	mov	r1, r4
 8016e66:	f000 fd4b 	bl	8017900 <__submore>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	d0f1      	beq.n	8016e52 <_sungetc_r+0x26>
 8016e6e:	e7e1      	b.n	8016e34 <_sungetc_r+0x8>
 8016e70:	6921      	ldr	r1, [r4, #16]
 8016e72:	6823      	ldr	r3, [r4, #0]
 8016e74:	b151      	cbz	r1, 8016e8c <_sungetc_r+0x60>
 8016e76:	4299      	cmp	r1, r3
 8016e78:	d208      	bcs.n	8016e8c <_sungetc_r+0x60>
 8016e7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016e7e:	42a9      	cmp	r1, r5
 8016e80:	d104      	bne.n	8016e8c <_sungetc_r+0x60>
 8016e82:	3b01      	subs	r3, #1
 8016e84:	3201      	adds	r2, #1
 8016e86:	6023      	str	r3, [r4, #0]
 8016e88:	6062      	str	r2, [r4, #4]
 8016e8a:	e7d5      	b.n	8016e38 <_sungetc_r+0xc>
 8016e8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e94:	6363      	str	r3, [r4, #52]	; 0x34
 8016e96:	2303      	movs	r3, #3
 8016e98:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e9a:	4623      	mov	r3, r4
 8016e9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016ea0:	6023      	str	r3, [r4, #0]
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	e7dc      	b.n	8016e60 <_sungetc_r+0x34>

08016ea6 <__ssrefill_r>:
 8016ea6:	b510      	push	{r4, lr}
 8016ea8:	460c      	mov	r4, r1
 8016eaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016eac:	b169      	cbz	r1, 8016eca <__ssrefill_r+0x24>
 8016eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eb2:	4299      	cmp	r1, r3
 8016eb4:	d001      	beq.n	8016eba <__ssrefill_r+0x14>
 8016eb6:	f7ff fdbf 	bl	8016a38 <_free_r>
 8016eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ebc:	6063      	str	r3, [r4, #4]
 8016ebe:	2000      	movs	r0, #0
 8016ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8016ec2:	b113      	cbz	r3, 8016eca <__ssrefill_r+0x24>
 8016ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ec6:	6023      	str	r3, [r4, #0]
 8016ec8:	bd10      	pop	{r4, pc}
 8016eca:	6923      	ldr	r3, [r4, #16]
 8016ecc:	6023      	str	r3, [r4, #0]
 8016ece:	2300      	movs	r3, #0
 8016ed0:	6063      	str	r3, [r4, #4]
 8016ed2:	89a3      	ldrh	r3, [r4, #12]
 8016ed4:	f043 0320 	orr.w	r3, r3, #32
 8016ed8:	81a3      	strh	r3, [r4, #12]
 8016eda:	f04f 30ff 	mov.w	r0, #4294967295
 8016ede:	e7f3      	b.n	8016ec8 <__ssrefill_r+0x22>

08016ee0 <__ssvfiscanf_r>:
 8016ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016ee8:	460c      	mov	r4, r1
 8016eea:	2100      	movs	r1, #0
 8016eec:	9144      	str	r1, [sp, #272]	; 0x110
 8016eee:	9145      	str	r1, [sp, #276]	; 0x114
 8016ef0:	499f      	ldr	r1, [pc, #636]	; (8017170 <__ssvfiscanf_r+0x290>)
 8016ef2:	91a0      	str	r1, [sp, #640]	; 0x280
 8016ef4:	f10d 0804 	add.w	r8, sp, #4
 8016ef8:	499e      	ldr	r1, [pc, #632]	; (8017174 <__ssvfiscanf_r+0x294>)
 8016efa:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017178 <__ssvfiscanf_r+0x298>
 8016efe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016f02:	4606      	mov	r6, r0
 8016f04:	4692      	mov	sl, r2
 8016f06:	91a1      	str	r1, [sp, #644]	; 0x284
 8016f08:	9300      	str	r3, [sp, #0]
 8016f0a:	270a      	movs	r7, #10
 8016f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f000 812a 	beq.w	801716a <__ssvfiscanf_r+0x28a>
 8016f16:	4655      	mov	r5, sl
 8016f18:	f7ff f8d2 	bl	80160c0 <__locale_ctype_ptr>
 8016f1c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016f20:	4458      	add	r0, fp
 8016f22:	7843      	ldrb	r3, [r0, #1]
 8016f24:	f013 0308 	ands.w	r3, r3, #8
 8016f28:	d01c      	beq.n	8016f64 <__ssvfiscanf_r+0x84>
 8016f2a:	6863      	ldr	r3, [r4, #4]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	dd12      	ble.n	8016f56 <__ssvfiscanf_r+0x76>
 8016f30:	f7ff f8c6 	bl	80160c0 <__locale_ctype_ptr>
 8016f34:	6823      	ldr	r3, [r4, #0]
 8016f36:	781a      	ldrb	r2, [r3, #0]
 8016f38:	4410      	add	r0, r2
 8016f3a:	7842      	ldrb	r2, [r0, #1]
 8016f3c:	0712      	lsls	r2, r2, #28
 8016f3e:	d401      	bmi.n	8016f44 <__ssvfiscanf_r+0x64>
 8016f40:	46aa      	mov	sl, r5
 8016f42:	e7e3      	b.n	8016f0c <__ssvfiscanf_r+0x2c>
 8016f44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016f46:	3201      	adds	r2, #1
 8016f48:	9245      	str	r2, [sp, #276]	; 0x114
 8016f4a:	6862      	ldr	r2, [r4, #4]
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	3a01      	subs	r2, #1
 8016f50:	6062      	str	r2, [r4, #4]
 8016f52:	6023      	str	r3, [r4, #0]
 8016f54:	e7e9      	b.n	8016f2a <__ssvfiscanf_r+0x4a>
 8016f56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016f58:	4621      	mov	r1, r4
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	4798      	blx	r3
 8016f5e:	2800      	cmp	r0, #0
 8016f60:	d0e6      	beq.n	8016f30 <__ssvfiscanf_r+0x50>
 8016f62:	e7ed      	b.n	8016f40 <__ssvfiscanf_r+0x60>
 8016f64:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016f68:	f040 8082 	bne.w	8017070 <__ssvfiscanf_r+0x190>
 8016f6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f6e:	9341      	str	r3, [sp, #260]	; 0x104
 8016f70:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016f74:	2b2a      	cmp	r3, #42	; 0x2a
 8016f76:	d103      	bne.n	8016f80 <__ssvfiscanf_r+0xa0>
 8016f78:	2310      	movs	r3, #16
 8016f7a:	9341      	str	r3, [sp, #260]	; 0x104
 8016f7c:	f10a 0502 	add.w	r5, sl, #2
 8016f80:	46aa      	mov	sl, r5
 8016f82:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016f86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016f8a:	2a09      	cmp	r2, #9
 8016f8c:	d922      	bls.n	8016fd4 <__ssvfiscanf_r+0xf4>
 8016f8e:	2203      	movs	r2, #3
 8016f90:	4879      	ldr	r0, [pc, #484]	; (8017178 <__ssvfiscanf_r+0x298>)
 8016f92:	f7e9 f93d 	bl	8000210 <memchr>
 8016f96:	b138      	cbz	r0, 8016fa8 <__ssvfiscanf_r+0xc8>
 8016f98:	eba0 0309 	sub.w	r3, r0, r9
 8016f9c:	2001      	movs	r0, #1
 8016f9e:	4098      	lsls	r0, r3
 8016fa0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016fa2:	4318      	orrs	r0, r3
 8016fa4:	9041      	str	r0, [sp, #260]	; 0x104
 8016fa6:	46aa      	mov	sl, r5
 8016fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8016fac:	2b67      	cmp	r3, #103	; 0x67
 8016fae:	f10a 0501 	add.w	r5, sl, #1
 8016fb2:	d82b      	bhi.n	801700c <__ssvfiscanf_r+0x12c>
 8016fb4:	2b65      	cmp	r3, #101	; 0x65
 8016fb6:	f080 809f 	bcs.w	80170f8 <__ssvfiscanf_r+0x218>
 8016fba:	2b47      	cmp	r3, #71	; 0x47
 8016fbc:	d810      	bhi.n	8016fe0 <__ssvfiscanf_r+0x100>
 8016fbe:	2b45      	cmp	r3, #69	; 0x45
 8016fc0:	f080 809a 	bcs.w	80170f8 <__ssvfiscanf_r+0x218>
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d06c      	beq.n	80170a2 <__ssvfiscanf_r+0x1c2>
 8016fc8:	2b25      	cmp	r3, #37	; 0x25
 8016fca:	d051      	beq.n	8017070 <__ssvfiscanf_r+0x190>
 8016fcc:	2303      	movs	r3, #3
 8016fce:	9347      	str	r3, [sp, #284]	; 0x11c
 8016fd0:	9742      	str	r7, [sp, #264]	; 0x108
 8016fd2:	e027      	b.n	8017024 <__ssvfiscanf_r+0x144>
 8016fd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016fd6:	fb07 1303 	mla	r3, r7, r3, r1
 8016fda:	3b30      	subs	r3, #48	; 0x30
 8016fdc:	9343      	str	r3, [sp, #268]	; 0x10c
 8016fde:	e7cf      	b.n	8016f80 <__ssvfiscanf_r+0xa0>
 8016fe0:	2b5b      	cmp	r3, #91	; 0x5b
 8016fe2:	d06a      	beq.n	80170ba <__ssvfiscanf_r+0x1da>
 8016fe4:	d80c      	bhi.n	8017000 <__ssvfiscanf_r+0x120>
 8016fe6:	2b58      	cmp	r3, #88	; 0x58
 8016fe8:	d1f0      	bne.n	8016fcc <__ssvfiscanf_r+0xec>
 8016fea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016ff0:	9241      	str	r2, [sp, #260]	; 0x104
 8016ff2:	2210      	movs	r2, #16
 8016ff4:	9242      	str	r2, [sp, #264]	; 0x108
 8016ff6:	2b6e      	cmp	r3, #110	; 0x6e
 8016ff8:	bf8c      	ite	hi
 8016ffa:	2304      	movhi	r3, #4
 8016ffc:	2303      	movls	r3, #3
 8016ffe:	e010      	b.n	8017022 <__ssvfiscanf_r+0x142>
 8017000:	2b63      	cmp	r3, #99	; 0x63
 8017002:	d065      	beq.n	80170d0 <__ssvfiscanf_r+0x1f0>
 8017004:	2b64      	cmp	r3, #100	; 0x64
 8017006:	d1e1      	bne.n	8016fcc <__ssvfiscanf_r+0xec>
 8017008:	9742      	str	r7, [sp, #264]	; 0x108
 801700a:	e7f4      	b.n	8016ff6 <__ssvfiscanf_r+0x116>
 801700c:	2b70      	cmp	r3, #112	; 0x70
 801700e:	d04b      	beq.n	80170a8 <__ssvfiscanf_r+0x1c8>
 8017010:	d826      	bhi.n	8017060 <__ssvfiscanf_r+0x180>
 8017012:	2b6e      	cmp	r3, #110	; 0x6e
 8017014:	d062      	beq.n	80170dc <__ssvfiscanf_r+0x1fc>
 8017016:	d84c      	bhi.n	80170b2 <__ssvfiscanf_r+0x1d2>
 8017018:	2b69      	cmp	r3, #105	; 0x69
 801701a:	d1d7      	bne.n	8016fcc <__ssvfiscanf_r+0xec>
 801701c:	2300      	movs	r3, #0
 801701e:	9342      	str	r3, [sp, #264]	; 0x108
 8017020:	2303      	movs	r3, #3
 8017022:	9347      	str	r3, [sp, #284]	; 0x11c
 8017024:	6863      	ldr	r3, [r4, #4]
 8017026:	2b00      	cmp	r3, #0
 8017028:	dd68      	ble.n	80170fc <__ssvfiscanf_r+0x21c>
 801702a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801702c:	0659      	lsls	r1, r3, #25
 801702e:	d407      	bmi.n	8017040 <__ssvfiscanf_r+0x160>
 8017030:	f7ff f846 	bl	80160c0 <__locale_ctype_ptr>
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	781a      	ldrb	r2, [r3, #0]
 8017038:	4410      	add	r0, r2
 801703a:	7842      	ldrb	r2, [r0, #1]
 801703c:	0712      	lsls	r2, r2, #28
 801703e:	d464      	bmi.n	801710a <__ssvfiscanf_r+0x22a>
 8017040:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017042:	2b02      	cmp	r3, #2
 8017044:	dc73      	bgt.n	801712e <__ssvfiscanf_r+0x24e>
 8017046:	466b      	mov	r3, sp
 8017048:	4622      	mov	r2, r4
 801704a:	a941      	add	r1, sp, #260	; 0x104
 801704c:	4630      	mov	r0, r6
 801704e:	f000 f9d7 	bl	8017400 <_scanf_chars>
 8017052:	2801      	cmp	r0, #1
 8017054:	f000 8089 	beq.w	801716a <__ssvfiscanf_r+0x28a>
 8017058:	2802      	cmp	r0, #2
 801705a:	f47f af71 	bne.w	8016f40 <__ssvfiscanf_r+0x60>
 801705e:	e01d      	b.n	801709c <__ssvfiscanf_r+0x1bc>
 8017060:	2b75      	cmp	r3, #117	; 0x75
 8017062:	d0d1      	beq.n	8017008 <__ssvfiscanf_r+0x128>
 8017064:	2b78      	cmp	r3, #120	; 0x78
 8017066:	d0c0      	beq.n	8016fea <__ssvfiscanf_r+0x10a>
 8017068:	2b73      	cmp	r3, #115	; 0x73
 801706a:	d1af      	bne.n	8016fcc <__ssvfiscanf_r+0xec>
 801706c:	2302      	movs	r3, #2
 801706e:	e7d8      	b.n	8017022 <__ssvfiscanf_r+0x142>
 8017070:	6863      	ldr	r3, [r4, #4]
 8017072:	2b00      	cmp	r3, #0
 8017074:	dd0c      	ble.n	8017090 <__ssvfiscanf_r+0x1b0>
 8017076:	6823      	ldr	r3, [r4, #0]
 8017078:	781a      	ldrb	r2, [r3, #0]
 801707a:	455a      	cmp	r2, fp
 801707c:	d175      	bne.n	801716a <__ssvfiscanf_r+0x28a>
 801707e:	3301      	adds	r3, #1
 8017080:	6862      	ldr	r2, [r4, #4]
 8017082:	6023      	str	r3, [r4, #0]
 8017084:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017086:	3a01      	subs	r2, #1
 8017088:	3301      	adds	r3, #1
 801708a:	6062      	str	r2, [r4, #4]
 801708c:	9345      	str	r3, [sp, #276]	; 0x114
 801708e:	e757      	b.n	8016f40 <__ssvfiscanf_r+0x60>
 8017090:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017092:	4621      	mov	r1, r4
 8017094:	4630      	mov	r0, r6
 8017096:	4798      	blx	r3
 8017098:	2800      	cmp	r0, #0
 801709a:	d0ec      	beq.n	8017076 <__ssvfiscanf_r+0x196>
 801709c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801709e:	2800      	cmp	r0, #0
 80170a0:	d159      	bne.n	8017156 <__ssvfiscanf_r+0x276>
 80170a2:	f04f 30ff 	mov.w	r0, #4294967295
 80170a6:	e05c      	b.n	8017162 <__ssvfiscanf_r+0x282>
 80170a8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80170aa:	f042 0220 	orr.w	r2, r2, #32
 80170ae:	9241      	str	r2, [sp, #260]	; 0x104
 80170b0:	e79b      	b.n	8016fea <__ssvfiscanf_r+0x10a>
 80170b2:	2308      	movs	r3, #8
 80170b4:	9342      	str	r3, [sp, #264]	; 0x108
 80170b6:	2304      	movs	r3, #4
 80170b8:	e7b3      	b.n	8017022 <__ssvfiscanf_r+0x142>
 80170ba:	4629      	mov	r1, r5
 80170bc:	4640      	mov	r0, r8
 80170be:	f000 fb4f 	bl	8017760 <__sccl>
 80170c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170c8:	9341      	str	r3, [sp, #260]	; 0x104
 80170ca:	4605      	mov	r5, r0
 80170cc:	2301      	movs	r3, #1
 80170ce:	e7a8      	b.n	8017022 <__ssvfiscanf_r+0x142>
 80170d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170d6:	9341      	str	r3, [sp, #260]	; 0x104
 80170d8:	2300      	movs	r3, #0
 80170da:	e7a2      	b.n	8017022 <__ssvfiscanf_r+0x142>
 80170dc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80170de:	06c3      	lsls	r3, r0, #27
 80170e0:	f53f af2e 	bmi.w	8016f40 <__ssvfiscanf_r+0x60>
 80170e4:	9b00      	ldr	r3, [sp, #0]
 80170e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170e8:	1d19      	adds	r1, r3, #4
 80170ea:	9100      	str	r1, [sp, #0]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	07c0      	lsls	r0, r0, #31
 80170f0:	bf4c      	ite	mi
 80170f2:	801a      	strhmi	r2, [r3, #0]
 80170f4:	601a      	strpl	r2, [r3, #0]
 80170f6:	e723      	b.n	8016f40 <__ssvfiscanf_r+0x60>
 80170f8:	2305      	movs	r3, #5
 80170fa:	e792      	b.n	8017022 <__ssvfiscanf_r+0x142>
 80170fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170fe:	4621      	mov	r1, r4
 8017100:	4630      	mov	r0, r6
 8017102:	4798      	blx	r3
 8017104:	2800      	cmp	r0, #0
 8017106:	d090      	beq.n	801702a <__ssvfiscanf_r+0x14a>
 8017108:	e7c8      	b.n	801709c <__ssvfiscanf_r+0x1bc>
 801710a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801710c:	3201      	adds	r2, #1
 801710e:	9245      	str	r2, [sp, #276]	; 0x114
 8017110:	6862      	ldr	r2, [r4, #4]
 8017112:	3a01      	subs	r2, #1
 8017114:	2a00      	cmp	r2, #0
 8017116:	6062      	str	r2, [r4, #4]
 8017118:	dd02      	ble.n	8017120 <__ssvfiscanf_r+0x240>
 801711a:	3301      	adds	r3, #1
 801711c:	6023      	str	r3, [r4, #0]
 801711e:	e787      	b.n	8017030 <__ssvfiscanf_r+0x150>
 8017120:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017122:	4621      	mov	r1, r4
 8017124:	4630      	mov	r0, r6
 8017126:	4798      	blx	r3
 8017128:	2800      	cmp	r0, #0
 801712a:	d081      	beq.n	8017030 <__ssvfiscanf_r+0x150>
 801712c:	e7b6      	b.n	801709c <__ssvfiscanf_r+0x1bc>
 801712e:	2b04      	cmp	r3, #4
 8017130:	dc06      	bgt.n	8017140 <__ssvfiscanf_r+0x260>
 8017132:	466b      	mov	r3, sp
 8017134:	4622      	mov	r2, r4
 8017136:	a941      	add	r1, sp, #260	; 0x104
 8017138:	4630      	mov	r0, r6
 801713a:	f000 f9c5 	bl	80174c8 <_scanf_i>
 801713e:	e788      	b.n	8017052 <__ssvfiscanf_r+0x172>
 8017140:	4b0e      	ldr	r3, [pc, #56]	; (801717c <__ssvfiscanf_r+0x29c>)
 8017142:	2b00      	cmp	r3, #0
 8017144:	f43f aefc 	beq.w	8016f40 <__ssvfiscanf_r+0x60>
 8017148:	466b      	mov	r3, sp
 801714a:	4622      	mov	r2, r4
 801714c:	a941      	add	r1, sp, #260	; 0x104
 801714e:	4630      	mov	r0, r6
 8017150:	f7fc f9da 	bl	8013508 <_scanf_float>
 8017154:	e77d      	b.n	8017052 <__ssvfiscanf_r+0x172>
 8017156:	89a3      	ldrh	r3, [r4, #12]
 8017158:	f013 0f40 	tst.w	r3, #64	; 0x40
 801715c:	bf18      	it	ne
 801715e:	f04f 30ff 	movne.w	r0, #4294967295
 8017162:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801716c:	e7f9      	b.n	8017162 <__ssvfiscanf_r+0x282>
 801716e:	bf00      	nop
 8017170:	08016e2d 	.word	0x08016e2d
 8017174:	08016ea7 	.word	0x08016ea7
 8017178:	08018472 	.word	0x08018472
 801717c:	08013509 	.word	0x08013509

08017180 <__sfputc_r>:
 8017180:	6893      	ldr	r3, [r2, #8]
 8017182:	3b01      	subs	r3, #1
 8017184:	2b00      	cmp	r3, #0
 8017186:	b410      	push	{r4}
 8017188:	6093      	str	r3, [r2, #8]
 801718a:	da08      	bge.n	801719e <__sfputc_r+0x1e>
 801718c:	6994      	ldr	r4, [r2, #24]
 801718e:	42a3      	cmp	r3, r4
 8017190:	db01      	blt.n	8017196 <__sfputc_r+0x16>
 8017192:	290a      	cmp	r1, #10
 8017194:	d103      	bne.n	801719e <__sfputc_r+0x1e>
 8017196:	f85d 4b04 	ldr.w	r4, [sp], #4
 801719a:	f7fd bbc7 	b.w	801492c <__swbuf_r>
 801719e:	6813      	ldr	r3, [r2, #0]
 80171a0:	1c58      	adds	r0, r3, #1
 80171a2:	6010      	str	r0, [r2, #0]
 80171a4:	7019      	strb	r1, [r3, #0]
 80171a6:	4608      	mov	r0, r1
 80171a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171ac:	4770      	bx	lr

080171ae <__sfputs_r>:
 80171ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171b0:	4606      	mov	r6, r0
 80171b2:	460f      	mov	r7, r1
 80171b4:	4614      	mov	r4, r2
 80171b6:	18d5      	adds	r5, r2, r3
 80171b8:	42ac      	cmp	r4, r5
 80171ba:	d101      	bne.n	80171c0 <__sfputs_r+0x12>
 80171bc:	2000      	movs	r0, #0
 80171be:	e007      	b.n	80171d0 <__sfputs_r+0x22>
 80171c0:	463a      	mov	r2, r7
 80171c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171c6:	4630      	mov	r0, r6
 80171c8:	f7ff ffda 	bl	8017180 <__sfputc_r>
 80171cc:	1c43      	adds	r3, r0, #1
 80171ce:	d1f3      	bne.n	80171b8 <__sfputs_r+0xa>
 80171d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080171d4 <_vfiprintf_r>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	460c      	mov	r4, r1
 80171da:	b09d      	sub	sp, #116	; 0x74
 80171dc:	4617      	mov	r7, r2
 80171de:	461d      	mov	r5, r3
 80171e0:	4606      	mov	r6, r0
 80171e2:	b118      	cbz	r0, 80171ec <_vfiprintf_r+0x18>
 80171e4:	6983      	ldr	r3, [r0, #24]
 80171e6:	b90b      	cbnz	r3, 80171ec <_vfiprintf_r+0x18>
 80171e8:	f7fe fbb6 	bl	8015958 <__sinit>
 80171ec:	4b7c      	ldr	r3, [pc, #496]	; (80173e0 <_vfiprintf_r+0x20c>)
 80171ee:	429c      	cmp	r4, r3
 80171f0:	d158      	bne.n	80172a4 <_vfiprintf_r+0xd0>
 80171f2:	6874      	ldr	r4, [r6, #4]
 80171f4:	89a3      	ldrh	r3, [r4, #12]
 80171f6:	0718      	lsls	r0, r3, #28
 80171f8:	d55e      	bpl.n	80172b8 <_vfiprintf_r+0xe4>
 80171fa:	6923      	ldr	r3, [r4, #16]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d05b      	beq.n	80172b8 <_vfiprintf_r+0xe4>
 8017200:	2300      	movs	r3, #0
 8017202:	9309      	str	r3, [sp, #36]	; 0x24
 8017204:	2320      	movs	r3, #32
 8017206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801720a:	2330      	movs	r3, #48	; 0x30
 801720c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017210:	9503      	str	r5, [sp, #12]
 8017212:	f04f 0b01 	mov.w	fp, #1
 8017216:	46b8      	mov	r8, r7
 8017218:	4645      	mov	r5, r8
 801721a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801721e:	b10b      	cbz	r3, 8017224 <_vfiprintf_r+0x50>
 8017220:	2b25      	cmp	r3, #37	; 0x25
 8017222:	d154      	bne.n	80172ce <_vfiprintf_r+0xfa>
 8017224:	ebb8 0a07 	subs.w	sl, r8, r7
 8017228:	d00b      	beq.n	8017242 <_vfiprintf_r+0x6e>
 801722a:	4653      	mov	r3, sl
 801722c:	463a      	mov	r2, r7
 801722e:	4621      	mov	r1, r4
 8017230:	4630      	mov	r0, r6
 8017232:	f7ff ffbc 	bl	80171ae <__sfputs_r>
 8017236:	3001      	adds	r0, #1
 8017238:	f000 80c2 	beq.w	80173c0 <_vfiprintf_r+0x1ec>
 801723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801723e:	4453      	add	r3, sl
 8017240:	9309      	str	r3, [sp, #36]	; 0x24
 8017242:	f898 3000 	ldrb.w	r3, [r8]
 8017246:	2b00      	cmp	r3, #0
 8017248:	f000 80ba 	beq.w	80173c0 <_vfiprintf_r+0x1ec>
 801724c:	2300      	movs	r3, #0
 801724e:	f04f 32ff 	mov.w	r2, #4294967295
 8017252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017256:	9304      	str	r3, [sp, #16]
 8017258:	9307      	str	r3, [sp, #28]
 801725a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801725e:	931a      	str	r3, [sp, #104]	; 0x68
 8017260:	46a8      	mov	r8, r5
 8017262:	2205      	movs	r2, #5
 8017264:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017268:	485e      	ldr	r0, [pc, #376]	; (80173e4 <_vfiprintf_r+0x210>)
 801726a:	f7e8 ffd1 	bl	8000210 <memchr>
 801726e:	9b04      	ldr	r3, [sp, #16]
 8017270:	bb78      	cbnz	r0, 80172d2 <_vfiprintf_r+0xfe>
 8017272:	06d9      	lsls	r1, r3, #27
 8017274:	bf44      	itt	mi
 8017276:	2220      	movmi	r2, #32
 8017278:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801727c:	071a      	lsls	r2, r3, #28
 801727e:	bf44      	itt	mi
 8017280:	222b      	movmi	r2, #43	; 0x2b
 8017282:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017286:	782a      	ldrb	r2, [r5, #0]
 8017288:	2a2a      	cmp	r2, #42	; 0x2a
 801728a:	d02a      	beq.n	80172e2 <_vfiprintf_r+0x10e>
 801728c:	9a07      	ldr	r2, [sp, #28]
 801728e:	46a8      	mov	r8, r5
 8017290:	2000      	movs	r0, #0
 8017292:	250a      	movs	r5, #10
 8017294:	4641      	mov	r1, r8
 8017296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801729a:	3b30      	subs	r3, #48	; 0x30
 801729c:	2b09      	cmp	r3, #9
 801729e:	d969      	bls.n	8017374 <_vfiprintf_r+0x1a0>
 80172a0:	b360      	cbz	r0, 80172fc <_vfiprintf_r+0x128>
 80172a2:	e024      	b.n	80172ee <_vfiprintf_r+0x11a>
 80172a4:	4b50      	ldr	r3, [pc, #320]	; (80173e8 <_vfiprintf_r+0x214>)
 80172a6:	429c      	cmp	r4, r3
 80172a8:	d101      	bne.n	80172ae <_vfiprintf_r+0xda>
 80172aa:	68b4      	ldr	r4, [r6, #8]
 80172ac:	e7a2      	b.n	80171f4 <_vfiprintf_r+0x20>
 80172ae:	4b4f      	ldr	r3, [pc, #316]	; (80173ec <_vfiprintf_r+0x218>)
 80172b0:	429c      	cmp	r4, r3
 80172b2:	bf08      	it	eq
 80172b4:	68f4      	ldreq	r4, [r6, #12]
 80172b6:	e79d      	b.n	80171f4 <_vfiprintf_r+0x20>
 80172b8:	4621      	mov	r1, r4
 80172ba:	4630      	mov	r0, r6
 80172bc:	f7fd fb9a 	bl	80149f4 <__swsetup_r>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d09d      	beq.n	8017200 <_vfiprintf_r+0x2c>
 80172c4:	f04f 30ff 	mov.w	r0, #4294967295
 80172c8:	b01d      	add	sp, #116	; 0x74
 80172ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ce:	46a8      	mov	r8, r5
 80172d0:	e7a2      	b.n	8017218 <_vfiprintf_r+0x44>
 80172d2:	4a44      	ldr	r2, [pc, #272]	; (80173e4 <_vfiprintf_r+0x210>)
 80172d4:	1a80      	subs	r0, r0, r2
 80172d6:	fa0b f000 	lsl.w	r0, fp, r0
 80172da:	4318      	orrs	r0, r3
 80172dc:	9004      	str	r0, [sp, #16]
 80172de:	4645      	mov	r5, r8
 80172e0:	e7be      	b.n	8017260 <_vfiprintf_r+0x8c>
 80172e2:	9a03      	ldr	r2, [sp, #12]
 80172e4:	1d11      	adds	r1, r2, #4
 80172e6:	6812      	ldr	r2, [r2, #0]
 80172e8:	9103      	str	r1, [sp, #12]
 80172ea:	2a00      	cmp	r2, #0
 80172ec:	db01      	blt.n	80172f2 <_vfiprintf_r+0x11e>
 80172ee:	9207      	str	r2, [sp, #28]
 80172f0:	e004      	b.n	80172fc <_vfiprintf_r+0x128>
 80172f2:	4252      	negs	r2, r2
 80172f4:	f043 0302 	orr.w	r3, r3, #2
 80172f8:	9207      	str	r2, [sp, #28]
 80172fa:	9304      	str	r3, [sp, #16]
 80172fc:	f898 3000 	ldrb.w	r3, [r8]
 8017300:	2b2e      	cmp	r3, #46	; 0x2e
 8017302:	d10e      	bne.n	8017322 <_vfiprintf_r+0x14e>
 8017304:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017308:	2b2a      	cmp	r3, #42	; 0x2a
 801730a:	d138      	bne.n	801737e <_vfiprintf_r+0x1aa>
 801730c:	9b03      	ldr	r3, [sp, #12]
 801730e:	1d1a      	adds	r2, r3, #4
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	9203      	str	r2, [sp, #12]
 8017314:	2b00      	cmp	r3, #0
 8017316:	bfb8      	it	lt
 8017318:	f04f 33ff 	movlt.w	r3, #4294967295
 801731c:	f108 0802 	add.w	r8, r8, #2
 8017320:	9305      	str	r3, [sp, #20]
 8017322:	4d33      	ldr	r5, [pc, #204]	; (80173f0 <_vfiprintf_r+0x21c>)
 8017324:	f898 1000 	ldrb.w	r1, [r8]
 8017328:	2203      	movs	r2, #3
 801732a:	4628      	mov	r0, r5
 801732c:	f7e8 ff70 	bl	8000210 <memchr>
 8017330:	b140      	cbz	r0, 8017344 <_vfiprintf_r+0x170>
 8017332:	2340      	movs	r3, #64	; 0x40
 8017334:	1b40      	subs	r0, r0, r5
 8017336:	fa03 f000 	lsl.w	r0, r3, r0
 801733a:	9b04      	ldr	r3, [sp, #16]
 801733c:	4303      	orrs	r3, r0
 801733e:	f108 0801 	add.w	r8, r8, #1
 8017342:	9304      	str	r3, [sp, #16]
 8017344:	f898 1000 	ldrb.w	r1, [r8]
 8017348:	482a      	ldr	r0, [pc, #168]	; (80173f4 <_vfiprintf_r+0x220>)
 801734a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801734e:	2206      	movs	r2, #6
 8017350:	f108 0701 	add.w	r7, r8, #1
 8017354:	f7e8 ff5c 	bl	8000210 <memchr>
 8017358:	2800      	cmp	r0, #0
 801735a:	d037      	beq.n	80173cc <_vfiprintf_r+0x1f8>
 801735c:	4b26      	ldr	r3, [pc, #152]	; (80173f8 <_vfiprintf_r+0x224>)
 801735e:	bb1b      	cbnz	r3, 80173a8 <_vfiprintf_r+0x1d4>
 8017360:	9b03      	ldr	r3, [sp, #12]
 8017362:	3307      	adds	r3, #7
 8017364:	f023 0307 	bic.w	r3, r3, #7
 8017368:	3308      	adds	r3, #8
 801736a:	9303      	str	r3, [sp, #12]
 801736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801736e:	444b      	add	r3, r9
 8017370:	9309      	str	r3, [sp, #36]	; 0x24
 8017372:	e750      	b.n	8017216 <_vfiprintf_r+0x42>
 8017374:	fb05 3202 	mla	r2, r5, r2, r3
 8017378:	2001      	movs	r0, #1
 801737a:	4688      	mov	r8, r1
 801737c:	e78a      	b.n	8017294 <_vfiprintf_r+0xc0>
 801737e:	2300      	movs	r3, #0
 8017380:	f108 0801 	add.w	r8, r8, #1
 8017384:	9305      	str	r3, [sp, #20]
 8017386:	4619      	mov	r1, r3
 8017388:	250a      	movs	r5, #10
 801738a:	4640      	mov	r0, r8
 801738c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017390:	3a30      	subs	r2, #48	; 0x30
 8017392:	2a09      	cmp	r2, #9
 8017394:	d903      	bls.n	801739e <_vfiprintf_r+0x1ca>
 8017396:	2b00      	cmp	r3, #0
 8017398:	d0c3      	beq.n	8017322 <_vfiprintf_r+0x14e>
 801739a:	9105      	str	r1, [sp, #20]
 801739c:	e7c1      	b.n	8017322 <_vfiprintf_r+0x14e>
 801739e:	fb05 2101 	mla	r1, r5, r1, r2
 80173a2:	2301      	movs	r3, #1
 80173a4:	4680      	mov	r8, r0
 80173a6:	e7f0      	b.n	801738a <_vfiprintf_r+0x1b6>
 80173a8:	ab03      	add	r3, sp, #12
 80173aa:	9300      	str	r3, [sp, #0]
 80173ac:	4622      	mov	r2, r4
 80173ae:	4b13      	ldr	r3, [pc, #76]	; (80173fc <_vfiprintf_r+0x228>)
 80173b0:	a904      	add	r1, sp, #16
 80173b2:	4630      	mov	r0, r6
 80173b4:	f7fb fce0 	bl	8012d78 <_printf_float>
 80173b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80173bc:	4681      	mov	r9, r0
 80173be:	d1d5      	bne.n	801736c <_vfiprintf_r+0x198>
 80173c0:	89a3      	ldrh	r3, [r4, #12]
 80173c2:	065b      	lsls	r3, r3, #25
 80173c4:	f53f af7e 	bmi.w	80172c4 <_vfiprintf_r+0xf0>
 80173c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80173ca:	e77d      	b.n	80172c8 <_vfiprintf_r+0xf4>
 80173cc:	ab03      	add	r3, sp, #12
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	4622      	mov	r2, r4
 80173d2:	4b0a      	ldr	r3, [pc, #40]	; (80173fc <_vfiprintf_r+0x228>)
 80173d4:	a904      	add	r1, sp, #16
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7fb ff84 	bl	80132e4 <_printf_i>
 80173dc:	e7ec      	b.n	80173b8 <_vfiprintf_r+0x1e4>
 80173de:	bf00      	nop
 80173e0:	08018320 	.word	0x08018320
 80173e4:	0801846c 	.word	0x0801846c
 80173e8:	08018340 	.word	0x08018340
 80173ec:	08018300 	.word	0x08018300
 80173f0:	08018472 	.word	0x08018472
 80173f4:	08018476 	.word	0x08018476
 80173f8:	08012d79 	.word	0x08012d79
 80173fc:	080171af 	.word	0x080171af

08017400 <_scanf_chars>:
 8017400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017404:	4615      	mov	r5, r2
 8017406:	688a      	ldr	r2, [r1, #8]
 8017408:	4680      	mov	r8, r0
 801740a:	460c      	mov	r4, r1
 801740c:	b932      	cbnz	r2, 801741c <_scanf_chars+0x1c>
 801740e:	698a      	ldr	r2, [r1, #24]
 8017410:	2a00      	cmp	r2, #0
 8017412:	bf14      	ite	ne
 8017414:	f04f 32ff 	movne.w	r2, #4294967295
 8017418:	2201      	moveq	r2, #1
 801741a:	608a      	str	r2, [r1, #8]
 801741c:	6822      	ldr	r2, [r4, #0]
 801741e:	06d1      	lsls	r1, r2, #27
 8017420:	bf5f      	itttt	pl
 8017422:	681a      	ldrpl	r2, [r3, #0]
 8017424:	1d11      	addpl	r1, r2, #4
 8017426:	6019      	strpl	r1, [r3, #0]
 8017428:	6817      	ldrpl	r7, [r2, #0]
 801742a:	2600      	movs	r6, #0
 801742c:	69a3      	ldr	r3, [r4, #24]
 801742e:	b1db      	cbz	r3, 8017468 <_scanf_chars+0x68>
 8017430:	2b01      	cmp	r3, #1
 8017432:	d107      	bne.n	8017444 <_scanf_chars+0x44>
 8017434:	682b      	ldr	r3, [r5, #0]
 8017436:	6962      	ldr	r2, [r4, #20]
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	5cd3      	ldrb	r3, [r2, r3]
 801743c:	b9a3      	cbnz	r3, 8017468 <_scanf_chars+0x68>
 801743e:	2e00      	cmp	r6, #0
 8017440:	d132      	bne.n	80174a8 <_scanf_chars+0xa8>
 8017442:	e006      	b.n	8017452 <_scanf_chars+0x52>
 8017444:	2b02      	cmp	r3, #2
 8017446:	d007      	beq.n	8017458 <_scanf_chars+0x58>
 8017448:	2e00      	cmp	r6, #0
 801744a:	d12d      	bne.n	80174a8 <_scanf_chars+0xa8>
 801744c:	69a3      	ldr	r3, [r4, #24]
 801744e:	2b01      	cmp	r3, #1
 8017450:	d12a      	bne.n	80174a8 <_scanf_chars+0xa8>
 8017452:	2001      	movs	r0, #1
 8017454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017458:	f7fe fe32 	bl	80160c0 <__locale_ctype_ptr>
 801745c:	682b      	ldr	r3, [r5, #0]
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	4418      	add	r0, r3
 8017462:	7843      	ldrb	r3, [r0, #1]
 8017464:	071b      	lsls	r3, r3, #28
 8017466:	d4ef      	bmi.n	8017448 <_scanf_chars+0x48>
 8017468:	6823      	ldr	r3, [r4, #0]
 801746a:	06da      	lsls	r2, r3, #27
 801746c:	bf5e      	ittt	pl
 801746e:	682b      	ldrpl	r3, [r5, #0]
 8017470:	781b      	ldrbpl	r3, [r3, #0]
 8017472:	703b      	strbpl	r3, [r7, #0]
 8017474:	682a      	ldr	r2, [r5, #0]
 8017476:	686b      	ldr	r3, [r5, #4]
 8017478:	f102 0201 	add.w	r2, r2, #1
 801747c:	602a      	str	r2, [r5, #0]
 801747e:	68a2      	ldr	r2, [r4, #8]
 8017480:	f103 33ff 	add.w	r3, r3, #4294967295
 8017484:	f102 32ff 	add.w	r2, r2, #4294967295
 8017488:	606b      	str	r3, [r5, #4]
 801748a:	f106 0601 	add.w	r6, r6, #1
 801748e:	bf58      	it	pl
 8017490:	3701      	addpl	r7, #1
 8017492:	60a2      	str	r2, [r4, #8]
 8017494:	b142      	cbz	r2, 80174a8 <_scanf_chars+0xa8>
 8017496:	2b00      	cmp	r3, #0
 8017498:	dcc8      	bgt.n	801742c <_scanf_chars+0x2c>
 801749a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801749e:	4629      	mov	r1, r5
 80174a0:	4640      	mov	r0, r8
 80174a2:	4798      	blx	r3
 80174a4:	2800      	cmp	r0, #0
 80174a6:	d0c1      	beq.n	801742c <_scanf_chars+0x2c>
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	f013 0310 	ands.w	r3, r3, #16
 80174ae:	d105      	bne.n	80174bc <_scanf_chars+0xbc>
 80174b0:	68e2      	ldr	r2, [r4, #12]
 80174b2:	3201      	adds	r2, #1
 80174b4:	60e2      	str	r2, [r4, #12]
 80174b6:	69a2      	ldr	r2, [r4, #24]
 80174b8:	b102      	cbz	r2, 80174bc <_scanf_chars+0xbc>
 80174ba:	703b      	strb	r3, [r7, #0]
 80174bc:	6923      	ldr	r3, [r4, #16]
 80174be:	441e      	add	r6, r3
 80174c0:	6126      	str	r6, [r4, #16]
 80174c2:	2000      	movs	r0, #0
 80174c4:	e7c6      	b.n	8017454 <_scanf_chars+0x54>
	...

080174c8 <_scanf_i>:
 80174c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	469a      	mov	sl, r3
 80174ce:	4b74      	ldr	r3, [pc, #464]	; (80176a0 <_scanf_i+0x1d8>)
 80174d0:	460c      	mov	r4, r1
 80174d2:	4683      	mov	fp, r0
 80174d4:	4616      	mov	r6, r2
 80174d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80174da:	b087      	sub	sp, #28
 80174dc:	ab03      	add	r3, sp, #12
 80174de:	68a7      	ldr	r7, [r4, #8]
 80174e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80174e4:	4b6f      	ldr	r3, [pc, #444]	; (80176a4 <_scanf_i+0x1dc>)
 80174e6:	69a1      	ldr	r1, [r4, #24]
 80174e8:	4a6f      	ldr	r2, [pc, #444]	; (80176a8 <_scanf_i+0x1e0>)
 80174ea:	2903      	cmp	r1, #3
 80174ec:	bf08      	it	eq
 80174ee:	461a      	moveq	r2, r3
 80174f0:	1e7b      	subs	r3, r7, #1
 80174f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80174f6:	bf84      	itt	hi
 80174f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80174fc:	60a3      	strhi	r3, [r4, #8]
 80174fe:	6823      	ldr	r3, [r4, #0]
 8017500:	9200      	str	r2, [sp, #0]
 8017502:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017506:	bf88      	it	hi
 8017508:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801750c:	f104 091c 	add.w	r9, r4, #28
 8017510:	6023      	str	r3, [r4, #0]
 8017512:	bf8c      	ite	hi
 8017514:	197f      	addhi	r7, r7, r5
 8017516:	2700      	movls	r7, #0
 8017518:	464b      	mov	r3, r9
 801751a:	f04f 0800 	mov.w	r8, #0
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	6831      	ldr	r1, [r6, #0]
 8017522:	ab03      	add	r3, sp, #12
 8017524:	2202      	movs	r2, #2
 8017526:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801752a:	7809      	ldrb	r1, [r1, #0]
 801752c:	f7e8 fe70 	bl	8000210 <memchr>
 8017530:	9b01      	ldr	r3, [sp, #4]
 8017532:	b330      	cbz	r0, 8017582 <_scanf_i+0xba>
 8017534:	f1b8 0f01 	cmp.w	r8, #1
 8017538:	d15a      	bne.n	80175f0 <_scanf_i+0x128>
 801753a:	6862      	ldr	r2, [r4, #4]
 801753c:	b92a      	cbnz	r2, 801754a <_scanf_i+0x82>
 801753e:	6822      	ldr	r2, [r4, #0]
 8017540:	2108      	movs	r1, #8
 8017542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017546:	6061      	str	r1, [r4, #4]
 8017548:	6022      	str	r2, [r4, #0]
 801754a:	6822      	ldr	r2, [r4, #0]
 801754c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017550:	6022      	str	r2, [r4, #0]
 8017552:	68a2      	ldr	r2, [r4, #8]
 8017554:	1e51      	subs	r1, r2, #1
 8017556:	60a1      	str	r1, [r4, #8]
 8017558:	b19a      	cbz	r2, 8017582 <_scanf_i+0xba>
 801755a:	6832      	ldr	r2, [r6, #0]
 801755c:	1c51      	adds	r1, r2, #1
 801755e:	6031      	str	r1, [r6, #0]
 8017560:	7812      	ldrb	r2, [r2, #0]
 8017562:	701a      	strb	r2, [r3, #0]
 8017564:	1c5d      	adds	r5, r3, #1
 8017566:	6873      	ldr	r3, [r6, #4]
 8017568:	3b01      	subs	r3, #1
 801756a:	2b00      	cmp	r3, #0
 801756c:	6073      	str	r3, [r6, #4]
 801756e:	dc07      	bgt.n	8017580 <_scanf_i+0xb8>
 8017570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017574:	4631      	mov	r1, r6
 8017576:	4658      	mov	r0, fp
 8017578:	4798      	blx	r3
 801757a:	2800      	cmp	r0, #0
 801757c:	f040 8086 	bne.w	801768c <_scanf_i+0x1c4>
 8017580:	462b      	mov	r3, r5
 8017582:	f108 0801 	add.w	r8, r8, #1
 8017586:	f1b8 0f03 	cmp.w	r8, #3
 801758a:	d1c8      	bne.n	801751e <_scanf_i+0x56>
 801758c:	6862      	ldr	r2, [r4, #4]
 801758e:	b90a      	cbnz	r2, 8017594 <_scanf_i+0xcc>
 8017590:	220a      	movs	r2, #10
 8017592:	6062      	str	r2, [r4, #4]
 8017594:	6862      	ldr	r2, [r4, #4]
 8017596:	4945      	ldr	r1, [pc, #276]	; (80176ac <_scanf_i+0x1e4>)
 8017598:	6960      	ldr	r0, [r4, #20]
 801759a:	9301      	str	r3, [sp, #4]
 801759c:	1a89      	subs	r1, r1, r2
 801759e:	f000 f8df 	bl	8017760 <__sccl>
 80175a2:	9b01      	ldr	r3, [sp, #4]
 80175a4:	f04f 0800 	mov.w	r8, #0
 80175a8:	461d      	mov	r5, r3
 80175aa:	68a3      	ldr	r3, [r4, #8]
 80175ac:	6822      	ldr	r2, [r4, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d03a      	beq.n	8017628 <_scanf_i+0x160>
 80175b2:	6831      	ldr	r1, [r6, #0]
 80175b4:	6960      	ldr	r0, [r4, #20]
 80175b6:	f891 c000 	ldrb.w	ip, [r1]
 80175ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80175be:	2800      	cmp	r0, #0
 80175c0:	d032      	beq.n	8017628 <_scanf_i+0x160>
 80175c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80175c6:	d121      	bne.n	801760c <_scanf_i+0x144>
 80175c8:	0510      	lsls	r0, r2, #20
 80175ca:	d51f      	bpl.n	801760c <_scanf_i+0x144>
 80175cc:	f108 0801 	add.w	r8, r8, #1
 80175d0:	b117      	cbz	r7, 80175d8 <_scanf_i+0x110>
 80175d2:	3301      	adds	r3, #1
 80175d4:	3f01      	subs	r7, #1
 80175d6:	60a3      	str	r3, [r4, #8]
 80175d8:	6873      	ldr	r3, [r6, #4]
 80175da:	3b01      	subs	r3, #1
 80175dc:	2b00      	cmp	r3, #0
 80175de:	6073      	str	r3, [r6, #4]
 80175e0:	dd1b      	ble.n	801761a <_scanf_i+0x152>
 80175e2:	6833      	ldr	r3, [r6, #0]
 80175e4:	3301      	adds	r3, #1
 80175e6:	6033      	str	r3, [r6, #0]
 80175e8:	68a3      	ldr	r3, [r4, #8]
 80175ea:	3b01      	subs	r3, #1
 80175ec:	60a3      	str	r3, [r4, #8]
 80175ee:	e7dc      	b.n	80175aa <_scanf_i+0xe2>
 80175f0:	f1b8 0f02 	cmp.w	r8, #2
 80175f4:	d1ad      	bne.n	8017552 <_scanf_i+0x8a>
 80175f6:	6822      	ldr	r2, [r4, #0]
 80175f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80175fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017600:	d1bf      	bne.n	8017582 <_scanf_i+0xba>
 8017602:	2110      	movs	r1, #16
 8017604:	6061      	str	r1, [r4, #4]
 8017606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801760a:	e7a1      	b.n	8017550 <_scanf_i+0x88>
 801760c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017610:	6022      	str	r2, [r4, #0]
 8017612:	780b      	ldrb	r3, [r1, #0]
 8017614:	702b      	strb	r3, [r5, #0]
 8017616:	3501      	adds	r5, #1
 8017618:	e7de      	b.n	80175d8 <_scanf_i+0x110>
 801761a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801761e:	4631      	mov	r1, r6
 8017620:	4658      	mov	r0, fp
 8017622:	4798      	blx	r3
 8017624:	2800      	cmp	r0, #0
 8017626:	d0df      	beq.n	80175e8 <_scanf_i+0x120>
 8017628:	6823      	ldr	r3, [r4, #0]
 801762a:	05d9      	lsls	r1, r3, #23
 801762c:	d50c      	bpl.n	8017648 <_scanf_i+0x180>
 801762e:	454d      	cmp	r5, r9
 8017630:	d908      	bls.n	8017644 <_scanf_i+0x17c>
 8017632:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801763a:	4632      	mov	r2, r6
 801763c:	4658      	mov	r0, fp
 801763e:	4798      	blx	r3
 8017640:	1e6f      	subs	r7, r5, #1
 8017642:	463d      	mov	r5, r7
 8017644:	454d      	cmp	r5, r9
 8017646:	d029      	beq.n	801769c <_scanf_i+0x1d4>
 8017648:	6822      	ldr	r2, [r4, #0]
 801764a:	f012 0210 	ands.w	r2, r2, #16
 801764e:	d113      	bne.n	8017678 <_scanf_i+0x1b0>
 8017650:	702a      	strb	r2, [r5, #0]
 8017652:	6863      	ldr	r3, [r4, #4]
 8017654:	9e00      	ldr	r6, [sp, #0]
 8017656:	4649      	mov	r1, r9
 8017658:	4658      	mov	r0, fp
 801765a:	47b0      	blx	r6
 801765c:	f8da 3000 	ldr.w	r3, [sl]
 8017660:	6821      	ldr	r1, [r4, #0]
 8017662:	1d1a      	adds	r2, r3, #4
 8017664:	f8ca 2000 	str.w	r2, [sl]
 8017668:	f011 0f20 	tst.w	r1, #32
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	d010      	beq.n	8017692 <_scanf_i+0x1ca>
 8017670:	6018      	str	r0, [r3, #0]
 8017672:	68e3      	ldr	r3, [r4, #12]
 8017674:	3301      	adds	r3, #1
 8017676:	60e3      	str	r3, [r4, #12]
 8017678:	eba5 0509 	sub.w	r5, r5, r9
 801767c:	44a8      	add	r8, r5
 801767e:	6925      	ldr	r5, [r4, #16]
 8017680:	4445      	add	r5, r8
 8017682:	6125      	str	r5, [r4, #16]
 8017684:	2000      	movs	r0, #0
 8017686:	b007      	add	sp, #28
 8017688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768c:	f04f 0800 	mov.w	r8, #0
 8017690:	e7ca      	b.n	8017628 <_scanf_i+0x160>
 8017692:	07ca      	lsls	r2, r1, #31
 8017694:	bf4c      	ite	mi
 8017696:	8018      	strhmi	r0, [r3, #0]
 8017698:	6018      	strpl	r0, [r3, #0]
 801769a:	e7ea      	b.n	8017672 <_scanf_i+0x1aa>
 801769c:	2001      	movs	r0, #1
 801769e:	e7f2      	b.n	8017686 <_scanf_i+0x1be>
 80176a0:	08017fc4 	.word	0x08017fc4
 80176a4:	080148c9 	.word	0x080148c9
 80176a8:	080178dd 	.word	0x080178dd
 80176ac:	0801848d 	.word	0x0801848d

080176b0 <_putc_r>:
 80176b0:	b570      	push	{r4, r5, r6, lr}
 80176b2:	460d      	mov	r5, r1
 80176b4:	4614      	mov	r4, r2
 80176b6:	4606      	mov	r6, r0
 80176b8:	b118      	cbz	r0, 80176c2 <_putc_r+0x12>
 80176ba:	6983      	ldr	r3, [r0, #24]
 80176bc:	b90b      	cbnz	r3, 80176c2 <_putc_r+0x12>
 80176be:	f7fe f94b 	bl	8015958 <__sinit>
 80176c2:	4b13      	ldr	r3, [pc, #76]	; (8017710 <_putc_r+0x60>)
 80176c4:	429c      	cmp	r4, r3
 80176c6:	d112      	bne.n	80176ee <_putc_r+0x3e>
 80176c8:	6874      	ldr	r4, [r6, #4]
 80176ca:	68a3      	ldr	r3, [r4, #8]
 80176cc:	3b01      	subs	r3, #1
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	60a3      	str	r3, [r4, #8]
 80176d2:	da16      	bge.n	8017702 <_putc_r+0x52>
 80176d4:	69a2      	ldr	r2, [r4, #24]
 80176d6:	4293      	cmp	r3, r2
 80176d8:	db02      	blt.n	80176e0 <_putc_r+0x30>
 80176da:	b2eb      	uxtb	r3, r5
 80176dc:	2b0a      	cmp	r3, #10
 80176de:	d110      	bne.n	8017702 <_putc_r+0x52>
 80176e0:	4622      	mov	r2, r4
 80176e2:	4629      	mov	r1, r5
 80176e4:	4630      	mov	r0, r6
 80176e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176ea:	f7fd b91f 	b.w	801492c <__swbuf_r>
 80176ee:	4b09      	ldr	r3, [pc, #36]	; (8017714 <_putc_r+0x64>)
 80176f0:	429c      	cmp	r4, r3
 80176f2:	d101      	bne.n	80176f8 <_putc_r+0x48>
 80176f4:	68b4      	ldr	r4, [r6, #8]
 80176f6:	e7e8      	b.n	80176ca <_putc_r+0x1a>
 80176f8:	4b07      	ldr	r3, [pc, #28]	; (8017718 <_putc_r+0x68>)
 80176fa:	429c      	cmp	r4, r3
 80176fc:	bf08      	it	eq
 80176fe:	68f4      	ldreq	r4, [r6, #12]
 8017700:	e7e3      	b.n	80176ca <_putc_r+0x1a>
 8017702:	6823      	ldr	r3, [r4, #0]
 8017704:	1c5a      	adds	r2, r3, #1
 8017706:	6022      	str	r2, [r4, #0]
 8017708:	701d      	strb	r5, [r3, #0]
 801770a:	b2e8      	uxtb	r0, r5
 801770c:	bd70      	pop	{r4, r5, r6, pc}
 801770e:	bf00      	nop
 8017710:	08018320 	.word	0x08018320
 8017714:	08018340 	.word	0x08018340
 8017718:	08018300 	.word	0x08018300

0801771c <_read_r>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	4c07      	ldr	r4, [pc, #28]	; (801773c <_read_r+0x20>)
 8017720:	4605      	mov	r5, r0
 8017722:	4608      	mov	r0, r1
 8017724:	4611      	mov	r1, r2
 8017726:	2200      	movs	r2, #0
 8017728:	6022      	str	r2, [r4, #0]
 801772a:	461a      	mov	r2, r3
 801772c:	f7ee f8a8 	bl	8005880 <_read>
 8017730:	1c43      	adds	r3, r0, #1
 8017732:	d102      	bne.n	801773a <_read_r+0x1e>
 8017734:	6823      	ldr	r3, [r4, #0]
 8017736:	b103      	cbz	r3, 801773a <_read_r+0x1e>
 8017738:	602b      	str	r3, [r5, #0]
 801773a:	bd38      	pop	{r3, r4, r5, pc}
 801773c:	2003be0c 	.word	0x2003be0c

08017740 <_sbrk_r>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4c06      	ldr	r4, [pc, #24]	; (801775c <_sbrk_r+0x1c>)
 8017744:	2300      	movs	r3, #0
 8017746:	4605      	mov	r5, r0
 8017748:	4608      	mov	r0, r1
 801774a:	6023      	str	r3, [r4, #0]
 801774c:	f7ee f8ea 	bl	8005924 <_sbrk>
 8017750:	1c43      	adds	r3, r0, #1
 8017752:	d102      	bne.n	801775a <_sbrk_r+0x1a>
 8017754:	6823      	ldr	r3, [r4, #0]
 8017756:	b103      	cbz	r3, 801775a <_sbrk_r+0x1a>
 8017758:	602b      	str	r3, [r5, #0]
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	2003be0c 	.word	0x2003be0c

08017760 <__sccl>:
 8017760:	b570      	push	{r4, r5, r6, lr}
 8017762:	780b      	ldrb	r3, [r1, #0]
 8017764:	2b5e      	cmp	r3, #94	; 0x5e
 8017766:	bf13      	iteet	ne
 8017768:	1c4a      	addne	r2, r1, #1
 801776a:	1c8a      	addeq	r2, r1, #2
 801776c:	784b      	ldrbeq	r3, [r1, #1]
 801776e:	2100      	movne	r1, #0
 8017770:	bf08      	it	eq
 8017772:	2101      	moveq	r1, #1
 8017774:	1e44      	subs	r4, r0, #1
 8017776:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801777a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801777e:	42ac      	cmp	r4, r5
 8017780:	d1fb      	bne.n	801777a <__sccl+0x1a>
 8017782:	b913      	cbnz	r3, 801778a <__sccl+0x2a>
 8017784:	3a01      	subs	r2, #1
 8017786:	4610      	mov	r0, r2
 8017788:	bd70      	pop	{r4, r5, r6, pc}
 801778a:	f081 0401 	eor.w	r4, r1, #1
 801778e:	54c4      	strb	r4, [r0, r3]
 8017790:	1c51      	adds	r1, r2, #1
 8017792:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017796:	2d2d      	cmp	r5, #45	; 0x2d
 8017798:	f101 36ff 	add.w	r6, r1, #4294967295
 801779c:	460a      	mov	r2, r1
 801779e:	d006      	beq.n	80177ae <__sccl+0x4e>
 80177a0:	2d5d      	cmp	r5, #93	; 0x5d
 80177a2:	d0f0      	beq.n	8017786 <__sccl+0x26>
 80177a4:	b90d      	cbnz	r5, 80177aa <__sccl+0x4a>
 80177a6:	4632      	mov	r2, r6
 80177a8:	e7ed      	b.n	8017786 <__sccl+0x26>
 80177aa:	462b      	mov	r3, r5
 80177ac:	e7ef      	b.n	801778e <__sccl+0x2e>
 80177ae:	780e      	ldrb	r6, [r1, #0]
 80177b0:	2e5d      	cmp	r6, #93	; 0x5d
 80177b2:	d0fa      	beq.n	80177aa <__sccl+0x4a>
 80177b4:	42b3      	cmp	r3, r6
 80177b6:	dcf8      	bgt.n	80177aa <__sccl+0x4a>
 80177b8:	3301      	adds	r3, #1
 80177ba:	429e      	cmp	r6, r3
 80177bc:	54c4      	strb	r4, [r0, r3]
 80177be:	dcfb      	bgt.n	80177b8 <__sccl+0x58>
 80177c0:	3102      	adds	r1, #2
 80177c2:	e7e6      	b.n	8017792 <__sccl+0x32>

080177c4 <strncmp>:
 80177c4:	b510      	push	{r4, lr}
 80177c6:	b16a      	cbz	r2, 80177e4 <strncmp+0x20>
 80177c8:	3901      	subs	r1, #1
 80177ca:	1884      	adds	r4, r0, r2
 80177cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80177d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d103      	bne.n	80177e0 <strncmp+0x1c>
 80177d8:	42a0      	cmp	r0, r4
 80177da:	d001      	beq.n	80177e0 <strncmp+0x1c>
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d1f5      	bne.n	80177cc <strncmp+0x8>
 80177e0:	1a98      	subs	r0, r3, r2
 80177e2:	bd10      	pop	{r4, pc}
 80177e4:	4610      	mov	r0, r2
 80177e6:	e7fc      	b.n	80177e2 <strncmp+0x1e>

080177e8 <_strtoul_l.isra.0>:
 80177e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177ec:	4680      	mov	r8, r0
 80177ee:	4689      	mov	r9, r1
 80177f0:	4692      	mov	sl, r2
 80177f2:	461e      	mov	r6, r3
 80177f4:	460f      	mov	r7, r1
 80177f6:	463d      	mov	r5, r7
 80177f8:	9808      	ldr	r0, [sp, #32]
 80177fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177fe:	f7fe fc5b 	bl	80160b8 <__locale_ctype_ptr_l>
 8017802:	4420      	add	r0, r4
 8017804:	7843      	ldrb	r3, [r0, #1]
 8017806:	f013 0308 	ands.w	r3, r3, #8
 801780a:	d130      	bne.n	801786e <_strtoul_l.isra.0+0x86>
 801780c:	2c2d      	cmp	r4, #45	; 0x2d
 801780e:	d130      	bne.n	8017872 <_strtoul_l.isra.0+0x8a>
 8017810:	787c      	ldrb	r4, [r7, #1]
 8017812:	1cbd      	adds	r5, r7, #2
 8017814:	2101      	movs	r1, #1
 8017816:	2e00      	cmp	r6, #0
 8017818:	d05c      	beq.n	80178d4 <_strtoul_l.isra.0+0xec>
 801781a:	2e10      	cmp	r6, #16
 801781c:	d109      	bne.n	8017832 <_strtoul_l.isra.0+0x4a>
 801781e:	2c30      	cmp	r4, #48	; 0x30
 8017820:	d107      	bne.n	8017832 <_strtoul_l.isra.0+0x4a>
 8017822:	782b      	ldrb	r3, [r5, #0]
 8017824:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017828:	2b58      	cmp	r3, #88	; 0x58
 801782a:	d14e      	bne.n	80178ca <_strtoul_l.isra.0+0xe2>
 801782c:	786c      	ldrb	r4, [r5, #1]
 801782e:	2610      	movs	r6, #16
 8017830:	3502      	adds	r5, #2
 8017832:	f04f 32ff 	mov.w	r2, #4294967295
 8017836:	2300      	movs	r3, #0
 8017838:	fbb2 f2f6 	udiv	r2, r2, r6
 801783c:	fb06 fc02 	mul.w	ip, r6, r2
 8017840:	ea6f 0c0c 	mvn.w	ip, ip
 8017844:	4618      	mov	r0, r3
 8017846:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801784a:	2f09      	cmp	r7, #9
 801784c:	d817      	bhi.n	801787e <_strtoul_l.isra.0+0x96>
 801784e:	463c      	mov	r4, r7
 8017850:	42a6      	cmp	r6, r4
 8017852:	dd23      	ble.n	801789c <_strtoul_l.isra.0+0xb4>
 8017854:	2b00      	cmp	r3, #0
 8017856:	db1e      	blt.n	8017896 <_strtoul_l.isra.0+0xae>
 8017858:	4282      	cmp	r2, r0
 801785a:	d31c      	bcc.n	8017896 <_strtoul_l.isra.0+0xae>
 801785c:	d101      	bne.n	8017862 <_strtoul_l.isra.0+0x7a>
 801785e:	45a4      	cmp	ip, r4
 8017860:	db19      	blt.n	8017896 <_strtoul_l.isra.0+0xae>
 8017862:	fb00 4006 	mla	r0, r0, r6, r4
 8017866:	2301      	movs	r3, #1
 8017868:	f815 4b01 	ldrb.w	r4, [r5], #1
 801786c:	e7eb      	b.n	8017846 <_strtoul_l.isra.0+0x5e>
 801786e:	462f      	mov	r7, r5
 8017870:	e7c1      	b.n	80177f6 <_strtoul_l.isra.0+0xe>
 8017872:	2c2b      	cmp	r4, #43	; 0x2b
 8017874:	bf04      	itt	eq
 8017876:	1cbd      	addeq	r5, r7, #2
 8017878:	787c      	ldrbeq	r4, [r7, #1]
 801787a:	4619      	mov	r1, r3
 801787c:	e7cb      	b.n	8017816 <_strtoul_l.isra.0+0x2e>
 801787e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017882:	2f19      	cmp	r7, #25
 8017884:	d801      	bhi.n	801788a <_strtoul_l.isra.0+0xa2>
 8017886:	3c37      	subs	r4, #55	; 0x37
 8017888:	e7e2      	b.n	8017850 <_strtoul_l.isra.0+0x68>
 801788a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801788e:	2f19      	cmp	r7, #25
 8017890:	d804      	bhi.n	801789c <_strtoul_l.isra.0+0xb4>
 8017892:	3c57      	subs	r4, #87	; 0x57
 8017894:	e7dc      	b.n	8017850 <_strtoul_l.isra.0+0x68>
 8017896:	f04f 33ff 	mov.w	r3, #4294967295
 801789a:	e7e5      	b.n	8017868 <_strtoul_l.isra.0+0x80>
 801789c:	2b00      	cmp	r3, #0
 801789e:	da09      	bge.n	80178b4 <_strtoul_l.isra.0+0xcc>
 80178a0:	2322      	movs	r3, #34	; 0x22
 80178a2:	f8c8 3000 	str.w	r3, [r8]
 80178a6:	f04f 30ff 	mov.w	r0, #4294967295
 80178aa:	f1ba 0f00 	cmp.w	sl, #0
 80178ae:	d107      	bne.n	80178c0 <_strtoul_l.isra.0+0xd8>
 80178b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b4:	b101      	cbz	r1, 80178b8 <_strtoul_l.isra.0+0xd0>
 80178b6:	4240      	negs	r0, r0
 80178b8:	f1ba 0f00 	cmp.w	sl, #0
 80178bc:	d0f8      	beq.n	80178b0 <_strtoul_l.isra.0+0xc8>
 80178be:	b10b      	cbz	r3, 80178c4 <_strtoul_l.isra.0+0xdc>
 80178c0:	f105 39ff 	add.w	r9, r5, #4294967295
 80178c4:	f8ca 9000 	str.w	r9, [sl]
 80178c8:	e7f2      	b.n	80178b0 <_strtoul_l.isra.0+0xc8>
 80178ca:	2430      	movs	r4, #48	; 0x30
 80178cc:	2e00      	cmp	r6, #0
 80178ce:	d1b0      	bne.n	8017832 <_strtoul_l.isra.0+0x4a>
 80178d0:	2608      	movs	r6, #8
 80178d2:	e7ae      	b.n	8017832 <_strtoul_l.isra.0+0x4a>
 80178d4:	2c30      	cmp	r4, #48	; 0x30
 80178d6:	d0a4      	beq.n	8017822 <_strtoul_l.isra.0+0x3a>
 80178d8:	260a      	movs	r6, #10
 80178da:	e7aa      	b.n	8017832 <_strtoul_l.isra.0+0x4a>

080178dc <_strtoul_r>:
 80178dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178de:	4c06      	ldr	r4, [pc, #24]	; (80178f8 <_strtoul_r+0x1c>)
 80178e0:	4d06      	ldr	r5, [pc, #24]	; (80178fc <_strtoul_r+0x20>)
 80178e2:	6824      	ldr	r4, [r4, #0]
 80178e4:	6a24      	ldr	r4, [r4, #32]
 80178e6:	2c00      	cmp	r4, #0
 80178e8:	bf08      	it	eq
 80178ea:	462c      	moveq	r4, r5
 80178ec:	9400      	str	r4, [sp, #0]
 80178ee:	f7ff ff7b 	bl	80177e8 <_strtoul_l.isra.0>
 80178f2:	b003      	add	sp, #12
 80178f4:	bd30      	pop	{r4, r5, pc}
 80178f6:	bf00      	nop
 80178f8:	2000000c 	.word	0x2000000c
 80178fc:	20000070 	.word	0x20000070

08017900 <__submore>:
 8017900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017904:	460c      	mov	r4, r1
 8017906:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801790c:	4299      	cmp	r1, r3
 801790e:	d11d      	bne.n	801794c <__submore+0x4c>
 8017910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017914:	f7ff f8de 	bl	8016ad4 <_malloc_r>
 8017918:	b918      	cbnz	r0, 8017922 <__submore+0x22>
 801791a:	f04f 30ff 	mov.w	r0, #4294967295
 801791e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017926:	63a3      	str	r3, [r4, #56]	; 0x38
 8017928:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801792c:	6360      	str	r0, [r4, #52]	; 0x34
 801792e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017932:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017936:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801793a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801793e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017942:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017946:	6020      	str	r0, [r4, #0]
 8017948:	2000      	movs	r0, #0
 801794a:	e7e8      	b.n	801791e <__submore+0x1e>
 801794c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801794e:	0077      	lsls	r7, r6, #1
 8017950:	463a      	mov	r2, r7
 8017952:	f000 f85a 	bl	8017a0a <_realloc_r>
 8017956:	4605      	mov	r5, r0
 8017958:	2800      	cmp	r0, #0
 801795a:	d0de      	beq.n	801791a <__submore+0x1a>
 801795c:	eb00 0806 	add.w	r8, r0, r6
 8017960:	4601      	mov	r1, r0
 8017962:	4632      	mov	r2, r6
 8017964:	4640      	mov	r0, r8
 8017966:	f7fb f95f 	bl	8012c28 <memcpy>
 801796a:	f8c4 8000 	str.w	r8, [r4]
 801796e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017972:	e7e9      	b.n	8017948 <__submore+0x48>

08017974 <__ascii_wctomb>:
 8017974:	b149      	cbz	r1, 801798a <__ascii_wctomb+0x16>
 8017976:	2aff      	cmp	r2, #255	; 0xff
 8017978:	bf85      	ittet	hi
 801797a:	238a      	movhi	r3, #138	; 0x8a
 801797c:	6003      	strhi	r3, [r0, #0]
 801797e:	700a      	strbls	r2, [r1, #0]
 8017980:	f04f 30ff 	movhi.w	r0, #4294967295
 8017984:	bf98      	it	ls
 8017986:	2001      	movls	r0, #1
 8017988:	4770      	bx	lr
 801798a:	4608      	mov	r0, r1
 801798c:	4770      	bx	lr
	...

08017990 <_fstat_r>:
 8017990:	b538      	push	{r3, r4, r5, lr}
 8017992:	4c07      	ldr	r4, [pc, #28]	; (80179b0 <_fstat_r+0x20>)
 8017994:	2300      	movs	r3, #0
 8017996:	4605      	mov	r5, r0
 8017998:	4608      	mov	r0, r1
 801799a:	4611      	mov	r1, r2
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	f7ed ff98 	bl	80058d2 <_fstat>
 80179a2:	1c43      	adds	r3, r0, #1
 80179a4:	d102      	bne.n	80179ac <_fstat_r+0x1c>
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	b103      	cbz	r3, 80179ac <_fstat_r+0x1c>
 80179aa:	602b      	str	r3, [r5, #0]
 80179ac:	bd38      	pop	{r3, r4, r5, pc}
 80179ae:	bf00      	nop
 80179b0:	2003be0c 	.word	0x2003be0c

080179b4 <_isatty_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	4c06      	ldr	r4, [pc, #24]	; (80179d0 <_isatty_r+0x1c>)
 80179b8:	2300      	movs	r3, #0
 80179ba:	4605      	mov	r5, r0
 80179bc:	4608      	mov	r0, r1
 80179be:	6023      	str	r3, [r4, #0]
 80179c0:	f7ed ff97 	bl	80058f2 <_isatty>
 80179c4:	1c43      	adds	r3, r0, #1
 80179c6:	d102      	bne.n	80179ce <_isatty_r+0x1a>
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	b103      	cbz	r3, 80179ce <_isatty_r+0x1a>
 80179cc:	602b      	str	r3, [r5, #0]
 80179ce:	bd38      	pop	{r3, r4, r5, pc}
 80179d0:	2003be0c 	.word	0x2003be0c

080179d4 <memmove>:
 80179d4:	4288      	cmp	r0, r1
 80179d6:	b510      	push	{r4, lr}
 80179d8:	eb01 0302 	add.w	r3, r1, r2
 80179dc:	d807      	bhi.n	80179ee <memmove+0x1a>
 80179de:	1e42      	subs	r2, r0, #1
 80179e0:	4299      	cmp	r1, r3
 80179e2:	d00a      	beq.n	80179fa <memmove+0x26>
 80179e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80179ec:	e7f8      	b.n	80179e0 <memmove+0xc>
 80179ee:	4283      	cmp	r3, r0
 80179f0:	d9f5      	bls.n	80179de <memmove+0xa>
 80179f2:	1881      	adds	r1, r0, r2
 80179f4:	1ad2      	subs	r2, r2, r3
 80179f6:	42d3      	cmn	r3, r2
 80179f8:	d100      	bne.n	80179fc <memmove+0x28>
 80179fa:	bd10      	pop	{r4, pc}
 80179fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017a04:	e7f7      	b.n	80179f6 <memmove+0x22>

08017a06 <__malloc_lock>:
 8017a06:	4770      	bx	lr

08017a08 <__malloc_unlock>:
 8017a08:	4770      	bx	lr

08017a0a <_realloc_r>:
 8017a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a0c:	4607      	mov	r7, r0
 8017a0e:	4614      	mov	r4, r2
 8017a10:	460e      	mov	r6, r1
 8017a12:	b921      	cbnz	r1, 8017a1e <_realloc_r+0x14>
 8017a14:	4611      	mov	r1, r2
 8017a16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017a1a:	f7ff b85b 	b.w	8016ad4 <_malloc_r>
 8017a1e:	b922      	cbnz	r2, 8017a2a <_realloc_r+0x20>
 8017a20:	f7ff f80a 	bl	8016a38 <_free_r>
 8017a24:	4625      	mov	r5, r4
 8017a26:	4628      	mov	r0, r5
 8017a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a2a:	f000 f814 	bl	8017a56 <_malloc_usable_size_r>
 8017a2e:	42a0      	cmp	r0, r4
 8017a30:	d20f      	bcs.n	8017a52 <_realloc_r+0x48>
 8017a32:	4621      	mov	r1, r4
 8017a34:	4638      	mov	r0, r7
 8017a36:	f7ff f84d 	bl	8016ad4 <_malloc_r>
 8017a3a:	4605      	mov	r5, r0
 8017a3c:	2800      	cmp	r0, #0
 8017a3e:	d0f2      	beq.n	8017a26 <_realloc_r+0x1c>
 8017a40:	4631      	mov	r1, r6
 8017a42:	4622      	mov	r2, r4
 8017a44:	f7fb f8f0 	bl	8012c28 <memcpy>
 8017a48:	4631      	mov	r1, r6
 8017a4a:	4638      	mov	r0, r7
 8017a4c:	f7fe fff4 	bl	8016a38 <_free_r>
 8017a50:	e7e9      	b.n	8017a26 <_realloc_r+0x1c>
 8017a52:	4635      	mov	r5, r6
 8017a54:	e7e7      	b.n	8017a26 <_realloc_r+0x1c>

08017a56 <_malloc_usable_size_r>:
 8017a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a5a:	1f18      	subs	r0, r3, #4
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	bfbc      	itt	lt
 8017a60:	580b      	ldrlt	r3, [r1, r0]
 8017a62:	18c0      	addlt	r0, r0, r3
 8017a64:	4770      	bx	lr
	...

08017a68 <_init>:
 8017a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a6a:	bf00      	nop
 8017a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a6e:	bc08      	pop	{r3}
 8017a70:	469e      	mov	lr, r3
 8017a72:	4770      	bx	lr

08017a74 <_fini>:
 8017a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a76:	bf00      	nop
 8017a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a7a:	bc08      	pop	{r3}
 8017a7c:	469e      	mov	lr, r3
 8017a7e:	4770      	bx	lr
