
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019278  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08019438  08019438  00029438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a044  0801a044  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a044  0801a044  0002a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a04c  0801a04c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a04c  0801a04c  0002a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a054  0801a054  0002a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a058  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045af0  200001e0  0801a234  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045cd0  0801a234  00035cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a940  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bed  00000000  00000000  0006ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  00072740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  00074a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035499  00000000  00000000  00076a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000264c6  00000000  00000000  000abef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110e0c  00000000  00000000  000d23bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e31cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a604  00000000  00000000  001e3248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019420 	.word	0x08019420

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019420 	.word	0x08019420

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fec6 	bl	800ad68 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200437c4 	.word	0x200437c4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 feae 	bl	800ad68 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200437c4 	.word	0x200437c4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fd4f 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fab6 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fab0 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 faaa 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 faa4 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fa9e 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fa98 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fa92 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fa8c 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fa86 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fa80 	bl	8009598 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fa74 	bl	8009598 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fa6e 	bl	8009598 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fd4d 	bl	8016bc8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fb7e 	bl	800e8f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fb7a 	bl	800e8f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fb76 	bl	800e8f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fb72 	bl	800e8f8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200438b0 	.word	0x200438b0
 8001248:	20043818 	.word	0x20043818
 800124c:	20043938 	.word	0x20043938

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200438b0 	.word	0x200438b0
 800137c:	20043938 	.word	0x20043938
 8001380:	20043818 	.word	0x20043818

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200438b0 	.word	0x200438b0
 80013c4:	20043818 	.word	0x20043818
 80013c8:	20043938 	.word	0x20043938

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fb32 	bl	800ea98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fb2e 	bl	800ea98 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20043a18 	.word	0x20043a18
 8001458:	200436fc 	.word	0x200436fc
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f011 fec2 	bl	801354c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20042608 	.word	0x20042608

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fa8d 	bl	8015d30 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f011 ff06 	bl	8013634 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f011 ff01 	bl	8013634 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fc6f 	bl	8013122 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019438 	.word	0x08019438
 8001870:	20042578 	.word	0x20042578
 8001874:	20042608 	.word	0x20042608
 8001878:	200425f8 	.word	0x200425f8

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 fe7d 	bl	80135a0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 f8e8 	bl	8013a7c <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 fe77 	bl	80135a0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fa28 	bl	8015d30 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 fea4 	bl	8013634 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fc12 	bl	8013122 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 fe16 	bl	801354c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20042478 	.word	0x20042478
 8001930:	20041338 	.word	0x20041338
 8001934:	08019454 	.word	0x08019454
 8001938:	08019438 	.word	0x08019438
 800193c:	20042578 	.word	0x20042578
 8001940:	20042608 	.word	0x20042608
 8001944:	200425f8 	.word	0x200425f8

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fa2b 	bl	8015dd8 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fa46 	bl	8013e38 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 fdc8 	bl	801354c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019444 	.word	0x08019444
 80019cc:	20042578 	.word	0x20042578
 80019d0:	20042608 	.word	0x20042608

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 f9e5 	bl	8015dd8 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fa00 	bl	8013e38 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fd82 	bl	801354c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019450 	.word	0x08019450
 8001a58:	20042578 	.word	0x20042578
 8001a5c:	20042608 	.word	0x20042608

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f010 ffe4 	bl	8012a3c <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019460 	.word	0x08019460
 8001a94:	20041438 	.word	0x20041438

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 f9c3 	bl	8015e30 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 f9bf 	bl	8015e30 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20042478 	.word	0x20042478
 8001ac0:	20041338 	.word	0x20041338

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 f899 	bl	8013c00 <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f011 fd66 	bl	80135a0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f010 fff5 	bl	8012ac8 <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f011 fd5e 	bl	80135a0 <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20042478 	.word	0x20042478
 8001aec:	20041338 	.word	0x20041338
 8001af0:	20042608 	.word	0x20042608
 8001af4:	08019454 	.word	0x08019454

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20042578 	.word	0x20042578

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f008 ffbc 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c f965 	bl	800de24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c fa92 	bl	800e08c <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f008 ffa8 	bl	800aac4 <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200436a4 	.word	0x200436a4

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f008 ff8b 	bl	800aac4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c f934 	bl	800de24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c f92e 	bl	800de24 <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f008 ff78 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	200436a4 	.word	0x200436a4

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20043640 	.word	0x20043640
 8001ca4:	2004363e 	.word	0x2004363e
 8001ca8:	20043638 	.word	0x20043638

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f007 fc36 	bl	8009598 <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08019464 	.word	0x08019464
 8001d38:	08019470 	.word	0x08019470
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a316      	add	r3, pc, #88	; (adr r3, 8001dd0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a310      	add	r3, pc, #64	; (adr r3, 8001dd8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	eb851eb8 	.word	0xeb851eb8
 8001dd4:	3f9eb851 	.word	0x3f9eb851
 8001dd8:	70a3d70a 	.word	0x70a3d70a
 8001ddc:	3fef0a3d 	.word	0x3fef0a3d
 8001de0:	20043640 	.word	0x20043640
 8001de4:	2004363e 	.word	0x2004363e
 8001de8:	20043638 	.word	0x20043638
 8001dec:	20000210 	.word	0x20000210

08001df0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	a316      	add	r3, pc, #88	; (adr r3, 8001e74 <_ZN3IMU8getOmegaEv+0x84>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fd2c 	bl	800087c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2e:	a313      	add	r3, pc, #76	; (adr r3, 8001e7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fbf6 	bl	8000628 <__aeabi_dmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_ZN3IMU8getOmegaEv+0x80>)
 8001e4a:	f7fe fd17 	bl	800087c <__aeabi_ddiv>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f7fe fedf 	bl	8000c18 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	ee07 3a90 	vmov	s15, r3
}
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	40668000 	.word	0x40668000
 8001e74:	66666666 	.word	0x66666666
 8001e78:	40306666 	.word	0x40306666
 8001e7c:	54411744 	.word	0x54411744
 8001e80:	400921fb 	.word	0x400921fb

08001e84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e94:	f007 fb80 	bl	8009598 <HAL_Delay>
	lcd_clear();
 8001e98:	f7ff f902 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f90e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ea4:	4840      	ldr	r0, [pc, #256]	; (8001fa8 <_ZN3IMU11calibrationEv+0x124>)
 8001ea6:	f7ff f935 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f907 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001eb2:	483e      	ldr	r0, [pc, #248]	; (8001fac <_ZN3IMU11calibrationEv+0x128>)
 8001eb4:	f7ff f92e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001eb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ebc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec2:	1e5d      	subs	r5, r3, #1
 8001ec4:	61bd      	str	r5, [r7, #24]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0154      	lsls	r4, r2, #5
 8001eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ede:	014b      	lsls	r3, r1, #5
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	0154      	lsls	r4, r2, #5
 8001ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ef8:	014b      	lsls	r3, r1, #5
 8001efa:	462b      	mov	r3, r5
 8001efc:	3301      	adds	r3, #1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3303      	adds	r3, #3
 8001f02:	3307      	adds	r3, #7
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0c:	466b      	mov	r3, sp
 8001f0e:	3303      	adds	r3, #3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	83fb      	strh	r3, [r7, #30]
 8001f1a:	8bfa      	ldrh	r2, [r7, #30]
 8001f1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da13      	bge.n	8001f4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f2a:	8bfb      	ldrh	r3, [r7, #30]
 8001f2c:	ee07 2a90 	vmov	s15, r2
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f007 fb2a 	bl	8009598 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	3301      	adds	r3, #1
 8001f48:	83fb      	strh	r3, [r7, #30]
 8001f4a:	e7e6      	b.n	8001f1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	462b      	mov	r3, r5
 8001f54:	3301      	adds	r3, #1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d00e      	beq.n	8001f82 <_ZN3IMU11calibrationEv+0xfe>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e7ec      	b.n	8001f5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9c:	46b5      	mov	sp, r6
}
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08019474 	.word	0x08019474
 8001fac:	08019480 	.word	0x08019480

08001fb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	1dfa      	adds	r2, r7, #7
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <INA260_read+0x50>)
 8001fce:	f008 fecb 	bl	800ad68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <INA260_read+0x50>)
 8001fe2:	f008 ffbf 	bl	800af64 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fe6:	7b3b      	ldrb	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	7b7b      	ldrb	r3, [r7, #13]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20043858 	.word	0x20043858

08002004 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af02      	add	r7, sp, #8
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	4603      	mov	r3, r0
 8002018:	71bb      	strb	r3, [r7, #6]
 800201a:	460b      	mov	r3, r1
 800201c:	717b      	strb	r3, [r7, #5]
 800201e:	4613      	mov	r3, r2
 8002020:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	737b      	strb	r3, [r7, #13]
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b299      	uxth	r1, r3
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <INA260_write+0x48>)
 800203e:	f008 fe93 	bl	800ad68 <HAL_I2C_Master_Transmit>
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	20043858 	.word	0x20043858

08002050 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	79f9      	ldrb	r1, [r7, #7]
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ffcb 	bl	8002004 <INA260_write>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	461a      	mov	r2, r3
 8002084:	21df      	movs	r1, #223	; 0xdf
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffe2 	bl	8002050 <setConfig>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
{

}
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 80020be:	f008 fce9 	bl	800aa94 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x2e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020da:	2101      	movs	r1, #1
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <_ZN8JoyStick8getValueEv+0xc0>)
 80020de:	f008 fcd9 	bl	800aa94 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x4e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002100:	f008 fcc8 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x70>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800211c:	2104      	movs	r1, #4
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <_ZN8JoyStick8getValueEv+0xc4>)
 8002120:	f008 fcb8 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x90>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002140:	f008 fca8 	bl	800aa94 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0xb0>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800215c:	89fb      	ldrh	r3, [r7, #14]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40020400 	.word	0x40020400

08002174 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b52      	cmp	r3, #82	; 0x52
 8002184:	d112      	bne.n	80021ac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218c:	4856      	ldr	r0, [pc, #344]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800218e:	f008 fc99 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002198:	4853      	ldr	r0, [pc, #332]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f008 fc93 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f008 fc8d 	bl	800aac4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021aa:	e098      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b47      	cmp	r3, #71	; 0x47
 80021b0:	d112      	bne.n	80021d8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	484b      	ldr	r0, [pc, #300]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f008 fc83 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f008 fc7d 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d0:	4845      	ldr	r0, [pc, #276]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f008 fc77 	bl	800aac4 <HAL_GPIO_WritePin>
}
 80021d6:	e082      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b42      	cmp	r3, #66	; 0x42
 80021dc:	d112      	bne.n	8002204 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e4:	4840      	ldr	r0, [pc, #256]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f008 fc6d 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f008 fc67 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	483a      	ldr	r0, [pc, #232]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f008 fc61 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8002202:	e06c      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b43      	cmp	r3, #67	; 0x43
 8002208:	d112      	bne.n	8002230 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4835      	ldr	r0, [pc, #212]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f008 fc57 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221c:	4832      	ldr	r0, [pc, #200]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f008 fc51 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002228:	482f      	ldr	r0, [pc, #188]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f008 fc4b 	bl	800aac4 <HAL_GPIO_WritePin>
}
 800222e:	e056      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b4d      	cmp	r3, #77	; 0x4d
 8002234:	d112      	bne.n	800225c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f008 fc41 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4827      	ldr	r0, [pc, #156]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f008 fc3b 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f008 fc35 	bl	800aac4 <HAL_GPIO_WritePin>
}
 800225a:	e040      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b59      	cmp	r3, #89	; 0x59
 8002260:	d112      	bne.n	8002288 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f008 fc2b 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f008 fc25 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f008 fc1f 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8002286:	e02a      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b57      	cmp	r3, #87	; 0x57
 800228c:	d112      	bne.n	80022b4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f008 fc15 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f008 fc0f 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f008 fc09 	bl	800aac4 <HAL_GPIO_WritePin>
}
 80022b2:	e014      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b7e      	cmp	r3, #126	; 0x7e
 80022b8:	d111      	bne.n	80022de <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f008 fbff 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f008 fbf9 	bl	800aac4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022da:	f008 fbf3 	bl	800aac4 <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800230c:	f008 fbda 	bl	800aac4 <HAL_GPIO_WritePin>
 8002310:	e009      	b.n	8002326 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002322:	f008 fbcf 	bl	800aac4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002336:	f008 fbc5 	bl	800aac4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800233a:	e009      	b.n	8002350 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800233c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800234c:	f008 fbba 	bl	800aac4 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000

0800235c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	; 0x48
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe92 	bl	8002094 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	331c      	adds	r3, #28
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	429a      	cmp	r2, r3
 8002384:	d008      	beq.n	8002398 <_ZN10LineSensorC1Ev+0x3c>
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	3302      	adds	r3, #2
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	e7f2      	b.n	800237e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d009      	beq.n	80023c6 <_ZN10LineSensorC1Ev+0x6a>
 80023b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	3304      	adds	r3, #4
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	e7f1      	b.n	80023aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d009      	beq.n	80023f4 <_ZN10LineSensorC1Ev+0x98>
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	3304      	adds	r3, #4
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	e7f1      	b.n	80023d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3338      	adds	r3, #56	; 0x38
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d009      	beq.n	8002422 <_ZN10LineSensorC1Ev+0xc6>
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002418:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	3304      	adds	r3, #4
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	e7f1      	b.n	8002406 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	3748      	adds	r7, #72	; 0x48
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	220e      	movs	r2, #14
 8002438:	4619      	mov	r1, r3
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800243c:	f007 f912 	bl	8009664 <HAL_ADC_Start_DMA>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2004377c 	.word	0x2004377c

0800244c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	dc2f      	bgt.n	80024be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3392      	adds	r3, #146	; 0x92
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	33a0      	adds	r3, #160	; 0xa0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	440b      	add	r3, r1
 80024aa:	3306      	adds	r3, #6
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e7cc      	b.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d902      	bls.n	80024d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]


}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	2000021c 	.word	0x2000021c

080024e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	f200 80b8 	bhi.w	8002670 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002506:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800250a:	2b09      	cmp	r3, #9
 800250c:	d81c      	bhi.n	8002548 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800250e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002512:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002516:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4423      	add	r3, r4
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3304      	adds	r3, #4
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440b      	add	r3, r1
 8002538:	3b30      	subs	r3, #48	; 0x30
 800253a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800253c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002540:	3301      	adds	r3, #1
 8002542:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002546:	e7de      	b.n	8002506 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800254e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002552:	2b09      	cmp	r3, #9
 8002554:	d84d      	bhi.n	80025f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002560:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002564:	2b09      	cmp	r3, #9
 8002566:	d83e      	bhi.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002568:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002572:	4413      	add	r3, r2
 8002574:	3b30      	subs	r3, #48	; 0x30
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002584:	4413      	add	r3, r2
 8002586:	3b30      	subs	r3, #48	; 0x30
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d521      	bpl.n	80025da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002596:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a0:	4413      	add	r3, r2
 80025a2:	3b30      	subs	r3, #48	; 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025b6:	440a      	add	r2, r1
 80025b8:	3a30      	subs	r2, #48	; 0x30
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c2:	440b      	add	r3, r1
 80025c4:	3b30      	subs	r3, #48	; 0x30
 80025c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025d2:	4413      	add	r3, r2
 80025d4:	3b30      	subs	r3, #48	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025de:	3301      	adds	r3, #1
 80025e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025e4:	e7bc      	b.n	8002560 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ea:	3301      	adds	r3, #1
 80025ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025f0:	e7ad      	b.n	800254e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffbf 	bl	8000578 <__aeabi_f2d>
 80025fa:	a32a      	add	r3, pc, #168	; (adr r3, 80026a4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f812 	bl	8000628 <__aeabi_dmul>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4625      	mov	r5, r4
 800260a:	461c      	mov	r4, r3
 800260c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ffad 	bl	8000578 <__aeabi_f2d>
 800261e:	a31c      	add	r3, pc, #112	; (adr r3, 8002690 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f800 	bl	8000628 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe44 	bl	80002bc <__adddf3>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fae8 	bl	8000c18 <__aeabi_d2f>
 8002648:	4601      	mov	r1, r0
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002668:	3301      	adds	r3, #1
 800266a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800266e:	e742      	b.n	80024f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002678:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	66666666 	.word	0x66666666
 8002694:	3fee6666 	.word	0x3fee6666
 8002698:	20000220 	.word	0x20000220
 800269c:	20000214 	.word	0x20000214
 80026a0:	20000218 	.word	0x20000218
 80026a4:	9999999a 	.word	0x9999999a
 80026a8:	3fa99999 	.word	0x3fa99999

080026ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0a0      	sub	sp, #128	; 0x80
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f006 ff6f 	bl	8009598 <HAL_Delay>

	lcd_clear();
 80026ba:	f7fe fcf1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fcfd 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80026c6:	4886      	ldr	r0, [pc, #536]	; (80028e0 <_ZN10LineSensor11calibrationEv+0x234>)
 80026c8:	f7fe fd24 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80026cc:	2101      	movs	r1, #1
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fcf6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80026d4:	4883      	ldr	r0, [pc, #524]	; (80028e4 <_ZN10LineSensor11calibrationEv+0x238>)
 80026d6:	f7fe fd1d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026da:	2300      	movs	r3, #0
 80026dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80026e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026e4:	2b0d      	cmp	r3, #13
 80026e6:	d823      	bhi.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80026e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80026ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	32b0      	adds	r2, #176	; 0xb0
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	440a      	add	r2, r1
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002700:	440b      	add	r3, r1
 8002702:	3b40      	subs	r3, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002706:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800270a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	32b0      	adds	r2, #176	; 0xb0
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	440a      	add	r2, r1
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800271e:	440b      	add	r3, r1
 8002720:	3b78      	subs	r3, #120	; 0x78
 8002722:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002724:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002728:	3301      	adds	r3, #1
 800272a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800272e:	e7d7      	b.n	80026e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fcb8 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800273c:	4603      	mov	r3, r0
 800273e:	2b02      	cmp	r3, #2
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d079      	beq.n	8002840 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002752:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d850      	bhi.n	80027fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800275a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002764:	4413      	add	r3, r2
 8002766:	3b40      	subs	r3, #64	; 0x40
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	33b0      	adds	r3, #176	; 0xb0
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d50f      	bpl.n	80027a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002786:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800278a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	32b0      	adds	r2, #176	; 0xb0
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	440a      	add	r2, r1
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800279e:	440b      	add	r3, r1
 80027a0:	3b40      	subs	r3, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e024      	b.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80027a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b0:	4413      	add	r3, r2
 80027b2:	3b78      	subs	r3, #120	; 0x78
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	33b0      	adds	r3, #176	; 0xb0
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	dd0e      	ble.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80027d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80027d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	32b0      	adds	r2, #176	; 0xb0
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	440a      	add	r2, r1
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027ea:	440b      	add	r3, r1
 80027ec:	3b78      	subs	r3, #120	; 0x78
 80027ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027f4:	3301      	adds	r3, #1
 80027f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027fa:	e7aa      	b.n	8002752 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fd96 	bl	8005334 <_ZN12RotarySwitch8getValueEv>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800281e:	2201      	movs	r2, #1
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd61 	bl	80022ec <_ZN3LED2LREaa>
 800282a:	e781      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fd57 	bl	80022ec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800283e:	e777      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002846:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800284a:	2b0d      	cmp	r3, #13
 800284c:	d826      	bhi.n	800289c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800284e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002858:	4413      	add	r3, r2
 800285a:	3b40      	subs	r3, #64	; 0x40
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800286a:	4413      	add	r3, r2
 800286c:	3b78      	subs	r3, #120	; 0x78
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002876:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800287a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80028e8 <_ZN10LineSensor11calibrationEv+0x23c>
 800287e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	3392      	adds	r3, #146	; 0x92
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002890:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002894:	3301      	adds	r3, #1
 8002896:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800289a:	e7d4      	b.n	8002846 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800289c:	2300      	movs	r3, #0
 800289e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028a6:	2b0d      	cmp	r3, #13
 80028a8:	d815      	bhi.n	80028d6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80028aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80028ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028b8:	440a      	add	r2, r1
 80028ba:	3a78      	subs	r2, #120	; 0x78
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	33a0      	adds	r3, #160	; 0xa0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028ce:	3301      	adds	r3, #1
 80028d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028d4:	e7e5      	b.n	80028a2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80028d6:	bf00      	nop
 80028d8:	3780      	adds	r7, #128	; 0x80
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	0801948c 	.word	0x0801948c
 80028e4:	08019498 	.word	0x08019498
 80028e8:	447a0000 	.word	0x447a0000

080028ec <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d012      	beq.n	8002938 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800298c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	db02      	blt.n	8002930 <_ZN10LineSensor13emergencyStopEv+0x44>
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	3301      	adds	r3, #1
 800292e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3304      	adds	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e7e8      	b.n	800290a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	2b0d      	cmp	r3, #13
 800293c:	d906      	bls.n	800294c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e002      	b.n	8002952 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2b31      	cmp	r3, #49	; 0x31
 8002958:	d903      	bls.n	8002962 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e002      	b.n	8002968 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002970:	4293      	cmp	r3, r2
 8002972:	d903      	bls.n	800297c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002976:	f242 7210 	movw	r2, #10000	; 0x2710
 800297a:	801a      	strh	r2, [r3, #0]

	return flag;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800297e:	781b      	ldrb	r3, [r3, #0]

}
 8002980:	4618      	mov	r0, r3
 8002982:	3724      	adds	r7, #36	; 0x24
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	442f0000 	.word	0x442f0000
 8002990:	20000258 	.word	0x20000258
 8002994:	2000025a 	.word	0x2000025a

08002998 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	ed87 0a01 	vstr	s0, [r7, #4]
 80029a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002a36:	337c      	adds	r3, #124	; 0x7c
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a44:	3340      	adds	r3, #64	; 0x40
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a50:	3342      	adds	r3, #66	; 0x42
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a5c:	3344      	adds	r3, #68	; 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a68:	3318      	adds	r3, #24
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a74:	331a      	adds	r3, #26
 8002a76:	2200      	movs	r2, #0
 8002a78:	801a      	strh	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a80:	331c      	adds	r3, #28
 8002a82:	2200      	movs	r2, #0
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a8c:	331e      	adds	r3, #30
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a98:	331f      	adds	r3, #31
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aa4:	3320      	adds	r3, #32
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ab0:	3324      	adds	r3, #36	; 0x24
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002abe:	3328      	adds	r3, #40	; 0x28
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002acc:	332c      	adds	r3, #44	; 0x2c
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ada:	3330      	adds	r3, #48	; 0x30
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ae8:	3334      	adds	r3, #52	; 0x34
 8002aea:	2200      	movs	r2, #0
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002af4:	3336      	adds	r3, #54	; 0x36
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b22:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b28:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	82fb      	strh	r3, [r7, #22]
 8002b2e:	8afb      	ldrh	r3, [r7, #22]
 8002b30:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d80c      	bhi.n	8002b52 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x19a>
		velocity_table_[i] = 0;
 8002b38:	8afb      	ldrh	r3, [r7, #22]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	82fb      	strh	r3, [r7, #22]
 8002b50:	e7ed      	b.n	8002b2e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x176>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b52:	2300      	movs	r3, #0
 8002b54:	82bb      	strh	r3, [r7, #20]
 8002b56:	8abb      	ldrh	r3, [r7, #20]
 8002b58:	2b63      	cmp	r3, #99	; 0x63
 8002b5a:	d80d      	bhi.n	8002b78 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1c0>
		crossline_distance_[i] = 0;
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002b64:	3312      	adds	r3, #18
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b70:	8abb      	ldrh	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	82bb      	strh	r3, [r7, #20]
 8002b76:	e7ee      	b.n	8002b56 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x19e>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b78:	2300      	movs	r3, #0
 8002b7a:	827b      	strh	r3, [r7, #18]
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b82:	d20d      	bcs.n	8002ba0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1e8>
		sideline_distance_[i] = 0;
 8002b84:	8a7b      	ldrh	r3, [r7, #18]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b8c:	3336      	adds	r3, #54	; 0x36
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b98:	8a7b      	ldrh	r3, [r7, #18]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	827b      	strh	r3, [r7, #18]
 8002b9e:	e7ed      	b.n	8002b7c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1c4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	823b      	strh	r3, [r7, #16]
 8002ba4:	8a3b      	ldrh	r3, [r7, #16]
 8002ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002baa:	d20d      	bcs.n	8002bc8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x210>
		all_sideline_distance_[i] = 0;
 8002bac:	8a3b      	ldrh	r3, [r7, #16]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002bb4:	331e      	adds	r3, #30
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bc0:	8a3b      	ldrh	r3, [r7, #16]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	823b      	strh	r3, [r7, #16]
 8002bc6:	e7ed      	b.n	8002ba4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ec>
	}
}
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002c40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002c64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002c84:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002c8c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc71 	bl	8000578 <__aeabi_f2d>
 8002c96:	a316      	add	r3, pc, #88	; (adr r3, 8002cf0 <_ZN9LineTrace9calcErrorEv+0x118>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fcc4 	bl	8000628 <__aeabi_dmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4625      	mov	r5, r4
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc63 	bl	8000578 <__aeabi_f2d>
 8002cb2:	a311      	add	r3, pc, #68	; (adr r3, 8002cf8 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fcb6 	bl	8000628 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7fd fafa 	bl	80002bc <__adddf3>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	460c      	mov	r4, r1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	4621      	mov	r1, r4
 8002cd0:	f7fd ffa2 	bl	8000c18 <__aeabi_d2f>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002cdc:	6013      	str	r3, [r2, #0]

	return diff;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	ee07 3a90 	vmov	s15, r3

}
 8002ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	47ae147b 	.word	0x47ae147b
 8002cf4:	3fb47ae1 	.word	0x3fb47ae1
 8002cf8:	d70a3d71 	.word	0xd70a3d71
 8002cfc:	3fed70a3 	.word	0x3fed70a3
 8002d00:	2000025c 	.word	0x2000025c
 8002d04:	2000027c 	.word	0x2000027c

08002d08 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff61 	bl	8002bd8 <_ZN9LineTrace9calcErrorEv>
 8002d16:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d24:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	p = kp_ * diff;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d42:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	ee17 0a90 	vmov	r0, s15
 8002d62:	f7fd fc09 	bl	8000578 <__aeabi_f2d>
 8002d66:	a32a      	add	r3, pc, #168	; (adr r3, 8002e10 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fd86 	bl	800087c <__aeabi_ddiv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	4618      	mov	r0, r3
 8002d76:	4621      	mov	r1, r4
 8002d78:	f7fd ff4e 	bl	8000c18 <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbf7 	bl	8000578 <__aeabi_f2d>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002d94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	ee17 0a90 	vmov	r0, s15
 8002da0:	f7fd fbea 	bl	8000578 <__aeabi_f2d>
 8002da4:	a31a      	add	r3, pc, #104	; (adr r3, 8002e10 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fc3d 	bl	8000628 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fa81 	bl	80002bc <__adddf3>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	f7fd ff29 	bl	8000c18 <__aeabi_d2f>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dca:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002dcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de2:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002df0:	edd7 0a02 	vldr	s1, [r7, #8]
 8002df4:	eeb0 0a67 	vmov.f32	s0, s15
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f002 fe19 	bl	8005a30 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	6013      	str	r3, [r2, #0]

}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0c:	f3af 8000 	nop.w
 8002e10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e14:	3f50624d 	.word	0x3f50624d
 8002e18:	20000284 	.word	0x20000284
 8002e1c:	20000280 	.word	0x20000280

08002e20 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fc77 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 f93e 	bl	80050b8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fe69 	bl	8004b18 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fecd 	bl	8004c02 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	461c      	mov	r4, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f7fe fc27 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002e96:	eef0 7a40 	vmov.f32	s15, s0
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002ea0:	3312      	adds	r3, #18
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ec8:	3318      	adds	r3, #24
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b63      	cmp	r3, #99	; 0x63
 8002ece:	d905      	bls.n	8002edc <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	2263      	movs	r2, #99	; 0x63
 8002eda:	801a      	strh	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd90      	pop	{r4, r7, pc}

08002ee4 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ef6:	331a      	adds	r3, #26
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	461c      	mov	r4, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7fe fbf1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f02:	eef0 7a40 	vmov.f32	s15, s0
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f0c:	3336      	adds	r3, #54	; 0x36
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f1c:	331a      	adds	r3, #26
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f2a:	331a      	adds	r3, #26
 8002f2c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f34:	331a      	adds	r3, #26
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3c:	d306      	bcc.n	8002f4c <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f44:	331a      	adds	r3, #26
 8002f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f4a:	801a      	strh	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <_ZN9LineTrace24storeAllSideLineDistanceEv>:

void LineTrace::storeAllSideLineDistance()
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f66:	331c      	adds	r3, #28
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f7fe fbb9 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f72:	eef0 7a40 	vmov.f32	s15, s0
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 8002f7c:	331e      	adds	r3, #30
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f8c:	331c      	adds	r3, #28
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f9a:	331c      	adds	r3, #28
 8002f9c:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fa4:	331c      	adds	r3, #28
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fac:	d306      	bcc.n	8002fbc <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fb4:	331c      	adds	r3, #28
 8002fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fba:	801a      	strh	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}

08002fc4 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	ed2d 8b02 	vpush	{d8}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d046      	beq.n	8003068 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11c      	bne.n	8003024 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69dc      	ldr	r4, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fb67 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8002ff8:	eeb0 8a40 	vmov.f32	s16, s0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 f848 	bl	8005096 <_ZN8Odometry8getThetaEv>
 8003006:	ec53 2b10 	vmov	r2, r3, d0
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fe03 	bl	8000c18 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
 8003014:	ee00 3a90 	vmov	s1, r3
 8003018:	eeb0 0a48 	vmov.f32	s0, s16
 800301c:	4620      	mov	r0, r4
 800301e:	f001 fc41 	bl	80048a4 <_ZN6Logger21storeDistanceAndThetaEff>
 8003022:	e01b      	b.n	800305c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69dc      	ldr	r4, [r3, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f002 fd87 	bl	8005b40 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003032:	eeb0 8a40 	vmov.f32	s16, s0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 f82b 	bl	8005096 <_ZN8Odometry8getThetaEv>
 8003040:	ec53 2b10 	vmov	r2, r3, d0
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fde6 	bl	8000c18 <__aeabi_d2f>
 800304c:	4603      	mov	r3, r0
 800304e:	ee00 3a90 	vmov	s1, r3
 8003052:	eeb0 0a48 	vmov.f32	s0, s16
 8003056:	4620      	mov	r0, r4
 8003058:	f001 fc6c 	bl	8004934 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003066:	801a      	strh	r2, [r3, #0]
	}
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	ecbd 8b02 	vpop	{d8}
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	20000260 	.word	0x20000260

08003078 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6959      	ldr	r1, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800308a:	3318      	adds	r3, #24
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003094:	3312      	adds	r3, #18
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	4608      	mov	r0, r1
 80030a4:	f7fe fb2d 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030ae:	3318      	adds	r3, #24
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030bc:	3318      	adds	r3, #24
 80030be:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030c6:	3318      	adds	r3, #24
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b63      	cmp	r3, #99	; 0x63
 80030cc:	d905      	bls.n	80030da <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030d4:	3318      	adds	r3, #24
 80030d6:	2263      	movs	r2, #99	; 0x63
 80030d8:	801a      	strh	r2, [r3, #0]

}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030ec:	2300      	movs	r3, #0
 80030ee:	82fb      	strh	r3, [r7, #22]
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f6:	d237      	bcs.n	8003168 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003100:	3336      	adds	r3, #54	; 0x36
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fae8 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003114:	eeb0 7a40 	vmov.f32	s14, s0
 8003118:	edd7 7a04 	vldr	s15, [r7, #16]
 800311c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003120:	eeb0 0a67 	vmov.f32	s0, s15
 8003124:	f7ff fc38 	bl	8002998 <_ZSt3absf>
 8003128:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800312c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003130:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003190 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d810      	bhi.n	8003160 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6959      	ldr	r1, [r3, #20]
 8003142:	8afb      	ldrh	r3, [r7, #22]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800314a:	3336      	adds	r3, #54	; 0x36
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	eeb0 0a67 	vmov.f32	s0, s15
 8003158:	4608      	mov	r0, r1
 800315a:	f7fe fad2 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800315e:	e003      	b.n	8003168 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003160:	8afb      	ldrh	r3, [r7, #22]
 8003162:	3301      	adds	r3, #1
 8003164:	82fb      	strh	r3, [r7, #22]
 8003166:	e7c3      	b.n	80030f0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800316e:	331a      	adds	r3, #26
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003176:	d306      	bcc.n	8003186 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800317e:	331a      	adds	r3, #26
 8003180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003184:	801a      	strh	r2, [r3, #0]

}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	42a00000 	.word	0x42a00000

08003194 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031a6:	3344      	adds	r3, #68	; 0x44
 80031a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d143      	bne.n	8003238 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 80031b0:	edd7 7a00 	vldr	s15, [r7]
 80031b4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d504      	bpl.n	80031cc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e076      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 80031cc:	edd7 7a00 	vldr	s15, [r7]
 80031d0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80032d4 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d502      	bpl.n	80031e4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031de:	4b3e      	ldr	r3, [pc, #248]	; (80032d8 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e06a      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 80031e4:	edd7 7a00 	vldr	s15, [r7]
 80031e8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032dc <_ZN9LineTrace15radius2VelocityEf+0x148>
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d503      	bpl.n	80031fe <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80031f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e05d      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 80031fe:	edd7 7a00 	vldr	s15, [r7]
 8003202:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80032e0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320e:	d502      	bpl.n	8003216 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e051      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003216:	edd7 7a00 	vldr	s15, [r7]
 800321a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032e8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800321e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	d502      	bpl.n	800322e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e045      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e040      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800323e:	3344      	adds	r3, #68	; 0x44
 8003240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d136      	bne.n	80032b6 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	d504      	bpl.n	8003264 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e02a      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003264:	edd7 7a00 	vldr	s15, [r7]
 8003268:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032e0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800326c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d502      	bpl.n	800327c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e01e      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032e8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d502      	bpl.n	8003294 <_ZN9LineTrace15radius2VelocityEf+0x100>
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e012      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003294:	edd7 7a00 	vldr	s15, [r7]
 8003298:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032f4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d502      	bpl.n	80032ac <_ZN9LineTrace15radius2VelocityEf+0x118>
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e006      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e001      	b.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032b8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	ee07 3a90 	vmov	s15, r3
}
 80032c0:	eeb0 0a67 	vmov.f32	s0, s15
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	43960000 	.word	0x43960000
 80032d4:	44480000 	.word	0x44480000
 80032d8:	3fd9999a 	.word	0x3fd9999a
 80032dc:	447a0000 	.word	0x447a0000
 80032e0:	44bb8000 	.word	0x44bb8000
 80032e4:	40133333 	.word	0x40133333
 80032e8:	44fa0000 	.word	0x44fa0000
 80032ec:	40200000 	.word	0x40200000
 80032f0:	40066666 	.word	0x40066666
 80032f4:	451c4000 	.word	0x451c4000
 80032f8:	40400000 	.word	0x40400000
 80032fc:	3fa66666 	.word	0x3fa66666

08003300 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	ed87 0a02 	vstr	s0, [r7, #8]
 800330c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800330e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003312:	83fb      	strh	r3, [r7, #30]
 8003314:	8bfb      	ldrh	r3, [r7, #30]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8089 	beq.w	800342e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800331c:	8bfb      	ldrh	r3, [r7, #30]
 800331e:	3b01      	subs	r3, #1
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	8bfb      	ldrh	r3, [r7, #30]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003346:	edd7 7a06 	vldr	s15, [r7, #24]
 800334a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	dd68      	ble.n	8003426 <_ZN9LineTrace20decelerateProcessingEfPKf+0x126>
			float t = p_distance[i]*1e-3 / v_diff;
 8003354:	8bfb      	ldrh	r3, [r7, #30]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f90a 	bl	8000578 <__aeabi_f2d>
 8003364:	a334      	add	r3, pc, #208	; (adr r3, 8003438 <_ZN9LineTrace20decelerateProcessingEfPKf+0x138>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd f95d 	bl	8000628 <__aeabi_dmul>
 800336e:	4603      	mov	r3, r0
 8003370:	460c      	mov	r4, r1
 8003372:	4625      	mov	r5, r4
 8003374:	461c      	mov	r4, r3
 8003376:	69b8      	ldr	r0, [r7, #24]
 8003378:	f7fd f8fe 	bl	8000578 <__aeabi_f2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fd fa7a 	bl	800087c <__aeabi_ddiv>
 8003388:	4603      	mov	r3, r0
 800338a:	460c      	mov	r4, r1
 800338c:	4618      	mov	r0, r3
 800338e:	4621      	mov	r1, r4
 8003390:	f7fd fc42 	bl	8000c18 <__aeabi_d2f>
 8003394:	4603      	mov	r3, r0
 8003396:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003398:	edd7 6a06 	vldr	s13, [r7, #24]
 800339c:	ed97 7a05 	vldr	s14, [r7, #20]
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80033ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b8:	dd35      	ble.n	8003426 <_ZN9LineTrace20decelerateProcessingEfPKf+0x126>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f8d5 	bl	8000578 <__aeabi_f2d>
 80033ce:	4604      	mov	r4, r0
 80033d0:	460d      	mov	r5, r1
 80033d2:	8bfb      	ldrh	r3, [r7, #30]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	ee17 0a90 	vmov	r0, s15
 80033ea:	f7fd f8c5 	bl	8000578 <__aeabi_f2d>
 80033ee:	a312      	add	r3, pc, #72	; (adr r3, 8003438 <_ZN9LineTrace20decelerateProcessingEfPKf+0x138>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f918 	bl	8000628 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc ff5c 	bl	80002bc <__adddf3>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	4619      	mov	r1, r3
 800340a:	4622      	mov	r2, r4
 800340c:	8bfb      	ldrh	r3, [r7, #30]
 800340e:	1e5c      	subs	r4, r3, #1
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	f7fd fc00 	bl	8000c18 <__aeabi_d2f>
 8003418:	4601      	mov	r1, r0
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	3b01      	subs	r3, #1
 800342a:	83fb      	strh	r3, [r7, #30]
 800342c:	e772      	b.n	8003314 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800342e:	bf00      	nop
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bdb0      	pop	{r4, r5, r7, pc}
 8003436:	bf00      	nop
 8003438:	d2f1a9fc 	.word	0xd2f1a9fc
 800343c:	3f50624d 	.word	0x3f50624d

08003440 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	ed87 0a02 	vstr	s0, [r7, #8]
 800344c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800344e:	2300      	movs	r3, #0
 8003450:	83fb      	strh	r3, [r7, #30]
 8003452:	8bfb      	ldrh	r3, [r7, #30]
 8003454:	f241 726f 	movw	r2, #5999	; 0x176f
 8003458:	4293      	cmp	r3, r2
 800345a:	f200 8089 	bhi.w	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800345e:	8bfb      	ldrh	r3, [r7, #30]
 8003460:	3301      	adds	r3, #1
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	ed93 7a00 	vldr	s14, [r3]
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003488:	edd7 7a06 	vldr	s15, [r7, #24]
 800348c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	dd68      	ble.n	8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x128>
			float t = p_distance[i]*1e-3 / v_diff;
 8003496:	8bfb      	ldrh	r3, [r7, #30]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f869 	bl	8000578 <__aeabi_f2d>
 80034a6:	a334      	add	r3, pc, #208	; (adr r3, 8003578 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fd f8bc 	bl	8000628 <__aeabi_dmul>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	4625      	mov	r5, r4
 80034b6:	461c      	mov	r4, r3
 80034b8:	69b8      	ldr	r0, [r7, #24]
 80034ba:	f7fd f85d 	bl	8000578 <__aeabi_f2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4620      	mov	r0, r4
 80034c4:	4629      	mov	r1, r5
 80034c6:	f7fd f9d9 	bl	800087c <__aeabi_ddiv>
 80034ca:	4603      	mov	r3, r0
 80034cc:	460c      	mov	r4, r1
 80034ce:	4618      	mov	r0, r3
 80034d0:	4621      	mov	r1, r4
 80034d2:	f7fd fba1 	bl	8000c18 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034da:	edd7 6a06 	vldr	s13, [r7, #24]
 80034de:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e6:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	dd35      	ble.n	8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x128>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f834 	bl	8000578 <__aeabi_f2d>
 8003510:	4604      	mov	r4, r0
 8003512:	460d      	mov	r5, r1
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	ed93 7a00 	vldr	s14, [r3]
 8003520:	edd7 7a02 	vldr	s15, [r7, #8]
 8003524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003528:	ee17 0a90 	vmov	r0, s15
 800352c:	f7fd f824 	bl	8000578 <__aeabi_f2d>
 8003530:	a311      	add	r3, pc, #68	; (adr r3, 8003578 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f877 	bl	8000628 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4620      	mov	r0, r4
 8003540:	4629      	mov	r1, r5
 8003542:	f7fc febb 	bl	80002bc <__adddf3>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	4619      	mov	r1, r3
 800354c:	4622      	mov	r2, r4
 800354e:	8bfb      	ldrh	r3, [r7, #30]
 8003550:	1c5c      	adds	r4, r3, #1
 8003552:	4608      	mov	r0, r1
 8003554:	4611      	mov	r1, r2
 8003556:	f7fd fb5f 	bl	8000c18 <__aeabi_d2f>
 800355a:	4601      	mov	r1, r0
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003568:	8bfb      	ldrh	r3, [r7, #30]
 800356a:	3301      	adds	r3, #1
 800356c:	83fb      	strh	r3, [r7, #30]
 800356e:	e770      	b.n	8003452 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	d2f1a9fc 	.word	0xd2f1a9fc
 800357c:	3f50624d 	.word	0x3f50624d

08003580 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe f8d5 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003598:	3340      	adds	r3, #64	; 0x40
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b4:	3340      	adds	r3, #64	; 0x40
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c0:	3342      	adds	r3, #66	; 0x42
 80035c2:	2200      	movs	r2, #0
 80035c4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80035cc:	337c      	adds	r3, #124	; 0x7c
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ee:	3340      	adds	r3, #64	; 0x40
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8084 	beq.w	8003700 <_ZN9LineTrace20updateTargetVelocityEv+0x120>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f871 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003602:	eeb0 7a40 	vmov.f32	s14, s0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800360c:	337c      	adds	r3, #124	; 0x7c
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	bfac      	ite	ge
 800361c:	2301      	movge	r3, #1
 800361e:	2300      	movlt	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d026      	beq.n	8003674 <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800362c:	337c      	adds	r3, #124	; 0x7c
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003638:	3342      	adds	r3, #66	; 0x42
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	332e      	adds	r3, #46	; 0x2e
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003654:	337c      	adds	r3, #124	; 0x7c
 8003656:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003660:	3342      	adds	r3, #66	; 0x42
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800366e:	3342      	adds	r3, #66	; 0x42
 8003670:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003672:	e7c1      	b.n	80035f8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800367a:	3342      	adds	r3, #66	; 0x42
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003682:	4293      	cmp	r3, r2
 8003684:	d906      	bls.n	8003694 <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800368c:	3342      	adds	r3, #66	; 0x42
 800368e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003692:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800369a:	337c      	adds	r3, #124	; 0x7c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 80036a0:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe f81c 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036ac:	eef0 7a40 	vmov.f32	s15, s0
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80036b2:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036bc:	3342      	adds	r3, #66	; 0x42
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80036c2:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ca:	3342      	adds	r3, #66	; 0x42
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	eeb0 0a67 	vmov.f32	s0, s15
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa86 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ec:	3342      	adds	r3, #66	; 0x42
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a05      	ldr	r2, [pc, #20]	; (8003714 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80036fe:	6013      	str	r3, [r2, #0]

	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	2000026c 	.word	0x2000026c
 800370c:	20000270 	.word	0x20000270
 8003710:	20000274 	.word	0x20000274
 8003714:	20000278 	.word	0x20000278

08003718 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd ffca 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003732:	eeb0 7a40 	vmov.f32	s14, s0
 8003736:	edd7 7a00 	vldr	s15, [r7]
 800373a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8003780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003784:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800378c:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b8:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037bc:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037c2:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x168>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80037d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037da:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80038cc <_ZN9LineTrace11isCrossLineEv+0x170>
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d50f      	bpl.n	8003808 <_ZN9LineTrace11isCrossLineEv+0xac>
 80037e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038cc <_ZN9LineTrace11isCrossLineEv+0x170>
 80037f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f8:	d506      	bpl.n	8003808 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 80037fa:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	e002      	b.n	800380e <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800380e:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d94d      	bls.n	80038b2 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003824:	2200      	movs	r2, #0
 8003826:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800382e:	3320      	adds	r3, #32
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800383a:	3344      	adds	r3, #68	; 0x44
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fb17 	bl	8002e78 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800384a:	e032      	b.n	80038b2 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fc13 	bl	8003078 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003858:	3334      	adds	r3, #52	; 0x34
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e028      	b.n	80038b2 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003860:	edd7 7a03 	vldr	s15, [r7, #12]
 8003864:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038d8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dd0f      	ble.n	8003892 <_ZN9LineTrace11isCrossLineEv+0x136>
 8003872:	edd7 7a02 	vldr	s15, [r7, #8]
 8003876:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80038d8 <_ZN9LineTrace11isCrossLineEv+0x17c>
 800387a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	dd06      	ble.n	8003892 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	e002      	b.n	8003898 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	2b09      	cmp	r3, #9
 800389e:	d908      	bls.n	80038b2 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000264 	.word	0x20000264
 80038c4:	20000268 	.word	0x20000268
 80038c8:	2000028b 	.word	0x2000028b
 80038cc:	44160000 	.word	0x44160000
 80038d0:	20000288 	.word	0x20000288
 80038d4:	2000028a 	.word	0x2000028a
 80038d8:	43fa0000 	.word	0x43fa0000

080038dc <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd feea 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80038f2:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fbcb 	bl	8005096 <_ZN8Odometry8getThetaEv>
 8003900:	ec54 3b10 	vmov	r3, r4, d0
 8003904:	4618      	mov	r0, r3
 8003906:	4621      	mov	r1, r4
 8003908:	f7fd f986 	bl	8000c18 <__aeabi_d2f>
 800390c:	4603      	mov	r3, r0
 800390e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003910:	edd7 7a04 	vldr	s15, [r7, #16]
 8003914:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d101      	bne.n	8003922 <_ZN9LineTrace8isStableEv+0x46>
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <_ZN9LineTrace8isStableEv+0xd0>)
 8003920:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003922:	ed97 7a02 	vldr	s14, [r7, #8]
 8003926:	edd7 7a04 	vldr	s15, [r7, #16]
 800392a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800392e:	eeb0 0a66 	vmov.f32	s0, s13
 8003932:	f7ff f831 	bl	8002998 <_ZSt3absf>
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800393a:	edd7 7a03 	vldr	s15, [r7, #12]
 800393e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039b0 <_ZN9LineTrace8isStableEv+0xd4>
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	db01      	blt.n	8003950 <_ZN9LineTrace8isStableEv+0x74>
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <_ZN9LineTrace8isStableEv+0xd8>)
 800394e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003956:	3320      	adds	r3, #32
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800396a:	3320      	adds	r3, #32
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003970:	edd7 7a03 	vldr	s15, [r7, #12]
 8003974:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039bc <_ZN9LineTrace8isStableEv+0xe0>
 8003978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003980:	db06      	blt.n	8003990 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <_ZN9LineTrace8isStableEv+0xdc>)
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b16      	cmp	r3, #22
 800399c:	d901      	bls.n	80039a2 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	3727c5ac 	.word	0x3727c5ac
 80039b0:	459c4000 	.word	0x459c4000
 80039b4:	459c4000 	.word	0x459c4000
 80039b8:	2000028c 	.word	0x2000028c
 80039bc:	44fa0000 	.word	0x44fa0000

080039c0 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039cc:	2201      	movs	r2, #1
 80039ce:	4951      	ldr	r1, [pc, #324]	; (8003b14 <_ZN9LineTrace4initEv+0x154>)
 80039d0:	4851      	ldr	r0, [pc, #324]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 80039d2:	f7fd ffb9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039da:	2201      	movs	r2, #1
 80039dc:	494f      	ldr	r1, [pc, #316]	; (8003b1c <_ZN9LineTrace4initEv+0x15c>)
 80039de:	484e      	ldr	r0, [pc, #312]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 80039e0:	f7fd ffb2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	494d      	ldr	r1, [pc, #308]	; (8003b20 <_ZN9LineTrace4initEv+0x160>)
 80039ec:	484a      	ldr	r0, [pc, #296]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 80039ee:	f7fd ffab 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80039fa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80039fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003a02:	eef0 0a47 	vmov.f32	s1, s14
 8003a06:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f89c 	bl	8003b48 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a14:	2201      	movs	r2, #1
 8003a16:	4943      	ldr	r1, [pc, #268]	; (8003b24 <_ZN9LineTrace4initEv+0x164>)
 8003a18:	483f      	ldr	r0, [pc, #252]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003a1a:	f7fd ff95 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a22:	2201      	movs	r2, #1
 8003a24:	4940      	ldr	r1, [pc, #256]	; (8003b28 <_ZN9LineTrace4initEv+0x168>)
 8003a26:	483c      	ldr	r0, [pc, #240]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003a28:	f7fd ff8e 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a2c:	f107 0320 	add.w	r3, r7, #32
 8003a30:	2201      	movs	r2, #1
 8003a32:	493e      	ldr	r1, [pc, #248]	; (8003b2c <_ZN9LineTrace4initEv+0x16c>)
 8003a34:	4838      	ldr	r0, [pc, #224]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003a36:	f7fd ff87 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	2201      	movs	r2, #1
 8003a40:	493b      	ldr	r1, [pc, #236]	; (8003b30 <_ZN9LineTrace4initEv+0x170>)
 8003a42:	4835      	ldr	r0, [pc, #212]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003a44:	f7fd ff80 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a48:	f107 0318 	add.w	r3, r7, #24
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4939      	ldr	r1, [pc, #228]	; (8003b34 <_ZN9LineTrace4initEv+0x174>)
 8003a50:	4831      	ldr	r0, [pc, #196]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003a52:	f7fd ff79 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8c7 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a68:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8d0 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a72:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a76:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8d9 	bl	8003c32 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a84:	eeb0 0a67 	vmov.f32	s0, s15
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8e2 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a92:	eeb0 0a67 	vmov.f32	s0, s15
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8eb 	bl	8003c72 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4925      	ldr	r1, [pc, #148]	; (8003b38 <_ZN9LineTrace4initEv+0x178>)
 8003aa4:	481c      	ldr	r0, [pc, #112]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003aa6:	f7fd ff4f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003aaa:	f107 0310 	add.w	r3, r7, #16
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4922      	ldr	r1, [pc, #136]	; (8003b3c <_ZN9LineTrace4initEv+0x17c>)
 8003ab2:	4819      	ldr	r0, [pc, #100]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003ab4:	f7fd ff48 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003abc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ac0:	eef0 0a47 	vmov.f32	s1, s14
 8003ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f932 	bl	8003d32 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4917      	ldr	r1, [pc, #92]	; (8003b40 <_ZN9LineTrace4initEv+0x180>)
 8003ae2:	480d      	ldr	r0, [pc, #52]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003ae4:	f7fd ff30 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ae8:	f107 0308 	add.w	r3, r7, #8
 8003aec:	2201      	movs	r2, #1
 8003aee:	4915      	ldr	r1, [pc, #84]	; (8003b44 <_ZN9LineTrace4initEv+0x184>)
 8003af0:	4809      	ldr	r0, [pc, #36]	; (8003b18 <_ZN9LineTrace4initEv+0x158>)
 8003af2:	f7fd ff29 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8003afe:	eef0 0a47 	vmov.f32	s1, s14
 8003b02:	eeb0 0a67 	vmov.f32	s0, s15
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f92d 	bl	8003d66 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b0c:	bf00      	nop
 8003b0e:	3738      	adds	r7, #56	; 0x38
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08019510 	.word	0x08019510
 8003b18:	08019518 	.word	0x08019518
 8003b1c:	08019520 	.word	0x08019520
 8003b20:	08019528 	.word	0x08019528
 8003b24:	08019530 	.word	0x08019530
 8003b28:	0801953c 	.word	0x0801953c
 8003b2c:	08019548 	.word	0x08019548
 8003b30:	08019554 	.word	0x08019554
 8003b34:	08019560 	.word	0x08019560
 8003b38:	0801956c 	.word	0x0801956c
 8003b3c:	08019574 	.word	0x08019574
 8003b40:	0801957c 	.word	0x0801957c
 8003b44:	08019588 	.word	0x08019588

08003b48 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b54:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b58:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	ee07 3a90 	vmov	s15, r3
}
 8003b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	ee07 3a90 	vmov	s15, r3
}
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	ee07 3a90 	vmov	s15, r3
}
 8003bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca0:	ee07 3a90 	vmov	s15, r3
}
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cc0:	ee07 3a90 	vmov	s15, r3
}
 8003cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce0:	ee07 3a90 	vmov	s15, r3
}
 8003ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d00:	ee07 3a90 	vmov	s15, r3
}
 8003d04:	eeb0 0a67 	vmov.f32	s0, s15
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d20:	ee07 3a90 	vmov	s15, r3
}
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d3e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d54:	3328      	adds	r3, #40	; 0x28
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d72:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d7c:	332c      	adds	r3, #44	; 0x2c
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d88:	3330      	adds	r3, #48	; 0x30
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003da8:	3324      	adds	r3, #36	; 0x24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	ee07 3a90 	vmov	s15, r3
}
 8003db0:	eeb0 0a67 	vmov.f32	s0, s15
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dcc:	3330      	adds	r3, #48	; 0x30
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	ee07 3a90 	vmov	s15, r3
}
 8003dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003df0:	332c      	adds	r3, #44	; 0x2c
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e14:	3328      	adds	r3, #40	; 0x28
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	ee07 3a90 	vmov	s15, r3
}
 8003e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 815b 	beq.w	80040f6 <_ZN9LineTrace4flipEv+0x2ca>
		// ---- line following processing -----//
		pidTrace();
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fe ff61 	bl	8002d08 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003e46:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fc64 	bl	8003718 <_ZN9LineTrace16isTargetDistanceEf>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <_ZN9LineTrace4flipEv+0xac>
			// ---- Store Logs ------//
			storeLogs();
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff f8b4 	bl	8002fc4 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69dc      	ldr	r4, [r3, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd ffc3 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8003e6a:	eef0 7a40 	vmov.f32	s15, s0
 8003e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 fc9a 	bl	80047ac <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003e82:	eeb0 0a67 	vmov.f32	s0, s15
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fccd 	bl	8004826 <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fd25 	bl	80038dc <_ZN9LineTrace8isStableEv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00c      	beq.n	8003eb2 <_ZN9LineTrace4flipEv+0x86>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fb99 	bl	80055d4 <_ZN10SideSensor9getStatusEv>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d101      	bne.n	8003eb2 <_ZN9LineTrace4flipEv+0x86>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <_ZN9LineTrace4flipEv+0x88>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <_ZN9LineTrace4flipEv+0x98>
#endif
				stable_flag_ = true;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ebe:	331f      	adds	r3, #31
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fc29 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f8f0 	bl	80050b8 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff fb81 	bl	80035e0 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fc3c 	bl	800375c <_ZN9LineTrace11isCrossLineEv>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <_ZN9LineTrace4flipEv+0xd2>
			side_sensor_->enableIgnore();
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 fb98 	bl	8005624 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd fc3c 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fba8 	bl	8005658 <_ZN10SideSensor13getIgnoreFlagEv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00f      	beq.n	8003f2e <_ZN9LineTrace4flipEv+0x102>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fc20 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003f18:	eeb0 7a40 	vmov.f32	s14, s0
 8003f1c:	eddf 7a78 	vldr	s15, [pc, #480]	; 8004100 <_ZN9LineTrace4flipEv+0x2d4>
 8003f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	db01      	blt.n	8003f2e <_ZN9LineTrace4flipEv+0x102>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <_ZN9LineTrace4flipEv+0x104>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <_ZN9LineTrace4flipEv+0x112>
			side_sensor_->disableIgnore();
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fb80 	bl	800563e <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f44:	331f      	adds	r3, #31
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <_ZN9LineTrace4flipEv+0x138>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fb3f 	bl	80055d4 <_ZN10SideSensor9getStatusEv>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d101      	bne.n	8003f64 <_ZN9LineTrace4flipEv+0x138>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <_ZN9LineTrace4flipEv+0x13a>
 8003f64:	2300      	movs	r3, #0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d020      	beq.n	8003fac <_ZN9LineTrace4flipEv+0x180>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f70:	3344      	adds	r3, #68	; 0x44
 8003f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <_ZN9LineTrace4flipEv+0x156>
				storeSideLineDistance();
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe ffb2 	bl	8002ee4 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f80:	e008      	b.n	8003f94 <_ZN9LineTrace4flipEv+0x168>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff f8ae 	bl	80030e4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f8e:	3334      	adds	r3, #52	; 0x34
 8003f90:	2200      	movs	r2, #0
 8003f92:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f9a:	331f      	adds	r3, #31
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fa6:	3320      	adds	r3, #32
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fb2:	331f      	adds	r3, #31
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <_ZN9LineTrace4flipEv+0x1a0>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe f991 	bl	80022ec <_ZN3LED2LREaa>
 8003fca:	e007      	b.n	8003fdc <_ZN9LineTrace4flipEv+0x1b0>
		else led_.LR(-1, 0);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe f988 	bl	80022ec <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fe2:	3336      	adds	r3, #54	; 0x36
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <_ZN9LineTrace4flipEv+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 faed 	bl	80055d4 <_ZN10SideSensor9getStatusEv>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d101      	bne.n	8004008 <_ZN9LineTrace4flipEv+0x1dc>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <_ZN9LineTrace4flipEv+0x1de>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <_ZN9LineTrace4flipEv+0x206>
#endif
			all_sideline_flag_ = true;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004014:	3336      	adds	r3, #54	; 0x36
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004020:	3344      	adds	r3, #68	; 0x44
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d120      	bne.n	800406c <_ZN9LineTrace4flipEv+0x240>
				storeAllSideLineDistance();
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe ff92 	bl	8002f54 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8004030:	e01c      	b.n	800406c <_ZN9LineTrace4flipEv+0x240>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004038:	3336      	adds	r3, #54	; 0x36
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <_ZN9LineTrace4flipEv+0x22e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fac5 	bl	80055d4 <_ZN10SideSensor9getStatusEv>
 800404a:	4603      	mov	r3, r0
 800404c:	43db      	mvns	r3, r3
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d101      	bne.n	800405a <_ZN9LineTrace4flipEv+0x22e>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <_ZN9LineTrace4flipEv+0x230>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <_ZN9LineTrace4flipEv+0x240>
#endif
			all_sideline_flag_ = false;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004066:	3336      	adds	r3, #54	; 0x36
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fc3b 	bl	80028ec <_ZN10LineSensor13emergencyStopEv>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <_ZN9LineTrace4flipEv+0x262>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004104 <_ZN9LineTrace4flipEv+0x2d8>
 8004084:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004104 <_ZN9LineTrace4flipEv+0x2d8>
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fcd1 	bl	8005a30 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004094:	3334      	adds	r3, #52	; 0x34
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040a2:	3334      	adds	r3, #52	; 0x34
 80040a4:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040ac:	3334      	adds	r3, #52	; 0x34
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d906      	bls.n	80040c6 <_ZN9LineTrace4flipEv+0x29a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040be:	3334      	adds	r3, #52	; 0x34
 80040c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80040c4:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040cc:	3334      	adds	r3, #52	; 0x34
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	2b50      	cmp	r3, #80	; 0x50
 80040d2:	d808      	bhi.n	80040e6 <_ZN9LineTrace4flipEv+0x2ba>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	330c      	adds	r3, #12
 80040d8:	2201      	movs	r2, #1
 80040da:	f04f 31ff 	mov.w	r1, #4294967295
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe f904 	bl	80022ec <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040e4:	e007      	b.n	80040f6 <_ZN9LineTrace4flipEv+0x2ca>
		else led_.LR(-1, 0);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	330c      	adds	r3, #12
 80040ea:	2200      	movs	r2, #0
 80040ec:	f04f 31ff 	mov.w	r1, #4294967295
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f8fb 	bl	80022ec <_ZN3LED2LREaa>
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	bf00      	nop
 8004100:	43480000 	.word	0x43480000
 8004104:	00000000 	.word	0x00000000

08004108 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800411a:	3344      	adds	r3, #68	; 0x44
 800411c:	887a      	ldrh	r2, [r7, #2]
 800411e:	801a      	strh	r2, [r3, #0]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	i_reset_flag_ = true;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	velocity_ctrl_->start();
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fcca 	bl	8005ae2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fa56 	bl	8005604 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800415e:	3318      	adds	r3, #24
 8004160:	2200      	movs	r2, #0
 8004162:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800416a:	331a      	adds	r3, #26
 800416c:	2200      	movs	r2, #0
 800416e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004176:	331c      	adds	r3, #28
 8004178:	2200      	movs	r2, #0
 800417a:	801a      	strh	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004190:	2300      	movs	r3, #0
 8004192:	737b      	strb	r3, [r7, #13]
	start();
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ffc9 	bl	800412c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d15b      	bne.n	8004258 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <_ZN9LineTrace7runningEv+0x28>
 80041a6:	2b0a      	cmp	r3, #10
 80041a8:	d030      	beq.n	800420c <_ZN9LineTrace7runningEv+0x88>
 80041aa:	e054      	b.n	8004256 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 fa1b 	bl	80055ec <_ZN10SideSensor16getWhiteLineCntREv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fe2a 	bl	8002e20 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041d2:	3344      	adds	r3, #68	; 0x44
 80041d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff f9cf 	bl	8003580 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fac5 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd faa3 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	330c      	adds	r3, #12
 80041fa:	f04f 32ff 	mov.w	r2, #4294967295
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe f873 	bl	80022ec <_ZN3LED2LREaa>
				stage = 10;
 8004206:	230a      	movs	r3, #10
 8004208:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800420a:	e021      	b.n	8004250 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f9eb 	bl	80055ec <_ZN10SideSensor16getWhiteLineCntREv>
 8004216:	4603      	mov	r3, r0
 8004218:	2b02      	cmp	r3, #2
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe fe15 	bl	8002e56 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff f9ba 	bl	80035a6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004232:	2064      	movs	r0, #100	; 0x64
 8004234:	f005 f9b0 	bl	8009598 <HAL_Delay>

				setTargetVelocity(0);
 8004238:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004268 <_ZN9LineTrace7runningEv+0xe4>
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fcd8 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004246:	f005 f9a7 	bl	8009598 <HAL_Delay>

				goal_flag = true;
 800424a:	2301      	movs	r3, #1
 800424c:	737b      	strb	r3, [r7, #13]

			}

			break;
 800424e:	e001      	b.n	8004254 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004250:	bf00      	nop
 8004252:	e7a2      	b.n	800419a <_ZN9LineTrace7runningEv+0x16>
			break;
 8004254:	bf00      	nop
	while(goal_flag == false){
 8004256:	e7a0      	b.n	800419a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f807 	bl	800426c <_ZN9LineTrace4stopEv>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00000000 	.word	0x00000000

0800426c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	velocity_ctrl_->stop();
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fc41 	bl	8005b08 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	330c      	adds	r3, #12
 800428a:	2201      	movs	r2, #1
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe f82b 	bl	80022ec <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800429c:	3344      	adds	r3, #68	; 0x44
 800429e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69d8      	ldr	r0, [r3, #28]
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <_ZN9LineTrace4stopEv+0xcc>)
 80042ac:	4a23      	ldr	r2, [pc, #140]	; (800433c <_ZN9LineTrace4stopEv+0xd0>)
 80042ae:	4924      	ldr	r1, [pc, #144]	; (8004340 <_ZN9LineTrace4stopEv+0xd4>)
 80042b0:	f000 fbcd 	bl	8004a4e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80042b4:	e006      	b.n	80042c4 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69d8      	ldr	r0, [r3, #28]
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <_ZN9LineTrace4stopEv+0xd8>)
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <_ZN9LineTrace4stopEv+0xdc>)
 80042be:	4920      	ldr	r1, [pc, #128]	; (8004340 <_ZN9LineTrace4stopEv+0xd4>)
 80042c0:	f000 fbe8 	bl	8004a94 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042ca:	3348      	adds	r3, #72	; 0x48
 80042cc:	2200      	movs	r2, #0
 80042ce:	9200      	str	r2, [sp, #0]
 80042d0:	2264      	movs	r2, #100	; 0x64
 80042d2:	491e      	ldr	r1, [pc, #120]	; (800434c <_ZN9LineTrace4stopEv+0xe0>)
 80042d4:	481a      	ldr	r0, [pc, #104]	; (8004340 <_ZN9LineTrace4stopEv+0xd4>)
 80042d6:	f7fd fad1 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80042e0:	33d8      	adds	r3, #216	; 0xd8
 80042e2:	2200      	movs	r2, #0
 80042e4:	9200      	str	r2, [sp, #0]
 80042e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042ea:	4919      	ldr	r1, [pc, #100]	; (8004350 <_ZN9LineTrace4stopEv+0xe4>)
 80042ec:	4814      	ldr	r0, [pc, #80]	; (8004340 <_ZN9LineTrace4stopEv+0xd4>)
 80042ee:	f7fd fac5 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80042f8:	3378      	adds	r3, #120	; 0x78
 80042fa:	2200      	movs	r2, #0
 80042fc:	9200      	str	r2, [sp, #0]
 80042fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004302:	4914      	ldr	r1, [pc, #80]	; (8004354 <_ZN9LineTrace4stopEv+0xe8>)
 8004304:	480e      	ldr	r0, [pc, #56]	; (8004340 <_ZN9LineTrace4stopEv+0xd4>)
 8004306:	f7fd fab9 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	330c      	adds	r3, #12
 800430e:	2200      	movs	r2, #0
 8004310:	f04f 31ff 	mov.w	r1, #4294967295
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd ffe9 	bl	80022ec <_ZN3LED2LREaa>

	logger_->resetIdx();
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fc46 	bl	8004bb0 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fbf5 	bl	8004b18 <_ZN6Logger10resetLogs2Ev>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	08019594 	.word	0x08019594
 800433c:	080195a0 	.word	0x080195a0
 8004340:	080195b0 	.word	0x080195b0
 8004344:	080195bc 	.word	0x080195bc
 8004348:	080195c8 	.word	0x080195c8
 800434c:	080195d8 	.word	0x080195d8
 8004350:	080195e8 	.word	0x080195e8
 8004354:	080195f4 	.word	0x080195f4

08004358 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b08b      	sub	sp, #44	; 0x2c
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fb2d 	bl	80049c4 <_ZN6Logger23getDistanceArrayPointerEv>
 800436a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fb34 	bl	80049de <_ZN6Logger20getThetaArrayPointerEv>
 8004376:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004378:	2300      	movs	r3, #0
 800437a:	837b      	strh	r3, [r7, #26]
 800437c:	8b7b      	ldrh	r3, [r7, #26]
 800437e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004382:	4293      	cmp	r3, r2
 8004384:	d84a      	bhi.n	800441c <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 8004386:	8b7b      	ldrh	r3, [r7, #26]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004392:	8b7b      	ldrh	r3, [r7, #26]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800439e:	edd7 7a07 	vldr	s15, [r7, #28]
 80043a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043aa:	d101      	bne.n	80043b0 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043ac:	4b4b      	ldr	r3, [pc, #300]	; (80044dc <_ZN9LineTrace20createVelocityTabeleEv+0x184>)
 80043ae:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80043b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80043b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043bc:	eeb0 0a66 	vmov.f32	s0, s13
 80043c0:	f7fe faea 	bl	8002998 <_ZSt3absf>
 80043c4:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80043c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043cc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80044e0 <_ZN9LineTrace20createVelocityTabeleEv+0x188>
 80043d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	db01      	blt.n	80043de <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80043da:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>)
 80043dc:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80043de:	8b7c      	ldrh	r4, [r7, #26]
 80043e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fe fed5 	bl	8003194 <_ZN9LineTrace15radius2VelocityEf>
 80043ea:	eef0 7a40 	vmov.f32	s15, s0
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80043fc:	8b7b      	ldrh	r3, [r7, #26]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	441a      	add	r2, r3
 8004404:	8b7b      	ldrh	r3, [r7, #26]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	332e      	adds	r3, #46	; 0x2e
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3304      	adds	r3, #4
 8004412:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004414:	8b7b      	ldrh	r3, [r7, #26]
 8004416:	3301      	adds	r3, #1
 8004418:	837b      	strh	r3, [r7, #26]
 800441a:	e7af      	b.n	800437c <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004422:	3344      	adds	r3, #68	; 0x44
 8004424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d11f      	bne.n	800446c <_ZN9LineTrace20createVelocityTabeleEv+0x114>
		velocity_table_[0] = min_velocity_;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004438:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004440:	3328      	adds	r3, #40	; 0x28
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	eeb0 0a67 	vmov.f32	s0, s15
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fe ff57 	bl	8003300 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004458:	3324      	adds	r3, #36	; 0x24
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	eeb0 0a67 	vmov.f32	s0, s15
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fe ffeb 	bl	8003440 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800446a:	e026      	b.n	80044ba <_ZN9LineTrace20createVelocityTabeleEv+0x162>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004472:	3344      	adds	r3, #68	; 0x44
 8004474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d11e      	bne.n	80044ba <_ZN9LineTrace20createVelocityTabeleEv+0x162>
		velocity_table_[0] = min_velocity2_;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004488:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004490:	3330      	adds	r3, #48	; 0x30
 8004492:	edd3 7a00 	vldr	s15, [r3]
 8004496:	6939      	ldr	r1, [r7, #16]
 8004498:	eeb0 0a67 	vmov.f32	s0, s15
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fe ff2f 	bl	8003300 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044a8:	332c      	adds	r3, #44	; 0x2c
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fe ffc3 	bl	8003440 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 42bd 	add.w	r2, r3, #24192	; 0x5e80
 80044c0:	2300      	movs	r3, #0
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	f241 7270 	movw	r2, #6000	; 0x1770
 80044ca:	4907      	ldr	r1, [pc, #28]	; (80044e8 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80044cc:	4807      	ldr	r0, [pc, #28]	; (80044ec <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80044ce:	f7fd f9d5 	bl	800187c <sd_write_array_float>

}
 80044d2:	bf00      	nop
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	bf00      	nop
 80044dc:	3727c5ac 	.word	0x3727c5ac
 80044e0:	459c4000 	.word	0x459c4000
 80044e4:	459c4000 	.word	0x459c4000
 80044e8:	08019604 	.word	0x08019604
 80044ec:	080195b0 	.word	0x080195b0

080044f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b08b      	sub	sp, #44	; 0x2c
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69d8      	ldr	r0, [r3, #28]
 80044fc:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1b8>)
 80044fe:	4a6b      	ldr	r2, [pc, #428]	; (80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004500:	496b      	ldr	r1, [pc, #428]	; (80046b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004502:	f000 faeb 	bl	8004adc <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800450c:	3348      	adds	r3, #72	; 0x48
 800450e:	2264      	movs	r2, #100	; 0x64
 8004510:	4968      	ldr	r1, [pc, #416]	; (80046b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004512:	4867      	ldr	r0, [pc, #412]	; (80046b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004514:	f7fd fa18 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800451e:	33d8      	adds	r3, #216	; 0xd8
 8004520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004524:	4964      	ldr	r1, [pc, #400]	; (80046b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004526:	4862      	ldr	r0, [pc, #392]	; (80046b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004528:	f7fd fa0e 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fa47 	bl	80049c4 <_ZN6Logger23getDistanceArrayPointerEv>
 8004536:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fa4e 	bl	80049de <_ZN6Logger20getThetaArrayPointerEv>
 8004542:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004544:	2300      	movs	r3, #0
 8004546:	837b      	strh	r3, [r7, #26]
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	f241 726f 	movw	r2, #5999	; 0x176f
 800454e:	4293      	cmp	r3, r2
 8004550:	d84a      	bhi.n	80045e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 8004552:	8b7b      	ldrh	r3, [r7, #26]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800455e:	8b7b      	ldrh	r3, [r7, #26]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800456a:	edd7 7a07 	vldr	s15, [r7, #28]
 800456e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004576:	d101      	bne.n	800457c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800457a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800457c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004580:	edd7 7a07 	vldr	s15, [r7, #28]
 8004584:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004588:	eeb0 0a66 	vmov.f32	s0, s13
 800458c:	f7fe fa04 	bl	8002998 <_ZSt3absf>
 8004590:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004594:	edd7 7a05 	vldr	s15, [r7, #20]
 8004598:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>
 800459c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	db01      	blt.n	80045aa <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045a6:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>)
 80045a8:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045aa:	8b7c      	ldrh	r4, [r7, #26]
 80045ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe fdef 	bl	8003194 <_ZN9LineTrace15radius2VelocityEf>
 80045b6:	eef0 7a40 	vmov.f32	s15, s0
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	441a      	add	r2, r3
 80045d0:	8b7b      	ldrh	r3, [r7, #26]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	332e      	adds	r3, #46	; 0x2e
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3304      	adds	r3, #4
 80045de:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045e0:	8b7b      	ldrh	r3, [r7, #26]
 80045e2:	3301      	adds	r3, #1
 80045e4:	837b      	strh	r3, [r7, #26]
 80045e6:	e7af      	b.n	8004548 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045ee:	3344      	adds	r3, #68	; 0x44
 80045f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d11f      	bne.n	8004638 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x148>
		velocity_table_[0] = min_velocity_;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004604:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800460c:	3328      	adds	r3, #40	; 0x28
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fe fe71 	bl	8003300 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004624:	3324      	adds	r3, #36	; 0x24
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	eeb0 0a67 	vmov.f32	s0, s15
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fe ff05 	bl	8003440 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004636:	e026      	b.n	8004686 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x196>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800463e:	3344      	adds	r3, #68	; 0x44
 8004640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11e      	bne.n	8004686 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x196>
		velocity_table_[0] = min_velocity2_;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004654:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800465c:	3330      	adds	r3, #48	; 0x30
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	6939      	ldr	r1, [r7, #16]
 8004664:	eeb0 0a67 	vmov.f32	s0, s15
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fe fe49 	bl	8003300 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004674:	332c      	adds	r3, #44	; 0x2c
 8004676:	edd3 7a00 	vldr	s15, [r3]
 800467a:	6939      	ldr	r1, [r7, #16]
 800467c:	eeb0 0a67 	vmov.f32	s0, s15
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fe fedd 	bl	8003440 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 42bd 	add.w	r2, r3, #24192	; 0x5e80
 800468c:	2300      	movs	r3, #0
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	f241 7270 	movw	r2, #6000	; 0x1770
 8004696:	490c      	ldr	r1, [pc, #48]	; (80046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004698:	4805      	ldr	r0, [pc, #20]	; (80046b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800469a:	f7fd f8ef 	bl	800187c <sd_write_array_float>

}
 800469e:	bf00      	nop
 80046a0:	3724      	adds	r7, #36	; 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	bf00      	nop
 80046a8:	08019594 	.word	0x08019594
 80046ac:	080195a0 	.word	0x080195a0
 80046b0:	080195b0 	.word	0x080195b0
 80046b4:	080195d8 	.word	0x080195d8
 80046b8:	080195e8 	.word	0x080195e8
 80046bc:	3727c5ac 	.word	0x3727c5ac
 80046c0:	459c4000 	.word	0x459c4000
 80046c4:	459c4000 	.word	0x459c4000
 80046c8:	08019604 	.word	0x08019604

080046cc <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046e8:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80046ec:	2200      	movs	r2, #0
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046fa:	2200      	movs	r2, #0
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004704:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004708:	2200      	movs	r2, #0
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004728:	f7fd f99a 	bl	8001a60 <sd_mount>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d016      	beq.n	800476a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800473c:	f7fc fcb0 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004740:	2100      	movs	r1, #0
 8004742:	2000      	movs	r0, #0
 8004744:	f7fc fcbc 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004748:	4815      	ldr	r0, [pc, #84]	; (80047a0 <_ZN6Logger10sdCardInitEv+0x84>)
 800474a:	f7fc fce3 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800474e:	2101      	movs	r1, #1
 8004750:	2000      	movs	r0, #0
 8004752:	f7fc fcb5 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004756:	4813      	ldr	r0, [pc, #76]	; (80047a4 <_ZN6Logger10sdCardInitEv+0x88>)
 8004758:	f7fc fcdc 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800475c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004760:	f004 ff1a 	bl	8009598 <HAL_Delay>

	  ret = true;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
 8004768:	e015      	b.n	8004796 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800476a:	f7fc fc99 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800476e:	2100      	movs	r1, #0
 8004770:	2000      	movs	r0, #0
 8004772:	f7fc fca5 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004776:	480a      	ldr	r0, [pc, #40]	; (80047a0 <_ZN6Logger10sdCardInitEv+0x84>)
 8004778:	f7fc fccc 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800477c:	2101      	movs	r1, #1
 800477e:	2000      	movs	r0, #0
 8004780:	f7fc fc9e 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004784:	4808      	ldr	r0, [pc, #32]	; (80047a8 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004786:	f7fc fcc5 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800478a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800478e:	f004 ff03 	bl	8009598 <HAL_Delay>

	  ret = false;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	08019614 	.word	0x08019614
 80047a4:	08019620 	.word	0x08019620
 80047a8:	08019628 	.word	0x08019628

080047ac <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d028      	beq.n	800481a <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047ce:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047e4:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047f4:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80047f8:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004800:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800480a:	d306      	bcc.n	800481a <_ZN6Logger8storeLogEf+0x6e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004812:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004816:	2200      	movs	r2, #0
 8004818:	801a      	strh	r2, [r3, #0]
	}
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004838:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02a      	beq.n	8004898 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004848:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004862:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004872:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004876:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800487e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004888:	d306      	bcc.n	8004898 <_ZN6Logger9storeLog2Ef+0x72>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004890:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004894:	2200      	movs	r2, #0
 8004896:	801a      	strh	r2, [r3, #0]
	}
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80048b0:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048ba:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048d4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80048e0:	3310      	adds	r3, #16
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048f0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004900:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004904:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800490c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	f241 726f 	movw	r2, #5999	; 0x176f
 8004916:	4293      	cmp	r3, r2
 8004918:	d906      	bls.n	8004928 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004920:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004924:	2200      	movs	r2, #0
 8004926:	801a      	strh	r2, [r3, #0]
	//}
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004940:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800494a:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004964:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 8004970:	3370      	adds	r3, #112	; 0x70
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004980:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004990:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004994:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800499c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	f241 726f 	movw	r2, #5999	; 0x176f
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d906      	bls.n	80049b8 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049b0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049b4:	2200      	movs	r2, #0
 80049b6:	801a      	strh	r2, [r3, #0]
	//}
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80049ec:	3340      	adds	r3, #64	; 0x40
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af02      	add	r7, sp, #8
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f7fc ff31 	bl	800187c <sd_write_array_float>
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af02      	add	r7, sp, #8
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004a34:	2300      	movs	r3, #0
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f7fc ff1b 	bl	800187c <sd_write_array_float>
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004a62:	2300      	movs	r3, #0
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4613      	mov	r3, r2
 8004a68:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	f7fc ff04 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a7a:	3340      	adds	r3, #64	; 0x40
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	9200      	str	r2, [sp, #0]
 8004a80:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	68b8      	ldr	r0, [r7, #8]
 8004a88:	f7fc fef8 	bl	800187c <sd_write_array_float>
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68b8      	ldr	r0, [r7, #8]
 8004ab6:	f7fc fee1 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004ac0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	f241 7270 	movw	r2, #6000	; 0x1770
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f7fc fed4 	bl	800187c <sd_write_array_float>
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004af0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	68b8      	ldr	r0, [r7, #8]
 8004af8:	f7fc ff26 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004b02:	3340      	adds	r3, #64	; 0x40
 8004b04:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	68b8      	ldr	r0, [r7, #8]
 8004b0c:	f7fc ff1c 	bl	8001948 <sd_read_array_float>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b32:	3340      	adds	r3, #64	; 0x40
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d009      	beq.n	8004b52 <_ZN6Logger10resetLogs2Ev+0x3a>
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e7f1      	b.n	8004b36 <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004b58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b68:	3340      	adds	r3, #64	; 0x40
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d009      	beq.n	8004b88 <_ZN6Logger10resetLogs2Ev+0x70>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	3304      	adds	r3, #4
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	e7f1      	b.n	8004b6c <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b8e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004b92:	2200      	movs	r2, #0
 8004b94:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b9c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	801a      	strh	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	372c      	adds	r7, #44	; 0x2c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bbe:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bcc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	801a      	strh	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	805a      	strh	r2, [r3, #2]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c50:	2108      	movs	r1, #8
 8004c52:	4805      	ldr	r0, [pc, #20]	; (8004c68 <_ZN5Motor4initEv+0x20>)
 8004c54:	f009 fe50 	bl	800e8f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c58:	210c      	movs	r1, #12
 8004c5a:	4803      	ldr	r0, [pc, #12]	; (8004c68 <_ZN5Motor4initEv+0x20>)
 8004c5c:	f009 fe4c 	bl	800e8f8 <HAL_TIM_PWM_Start>

}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	2004373c 	.word	0x2004373c

08004c6c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da0d      	bge.n	8004c9a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c84:	481f      	ldr	r0, [pc, #124]	; (8004d04 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c86:	f005 ff1d 	bl	800aac4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	425b      	negs	r3, r3
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	81fb      	strh	r3, [r7, #14]
 8004c98:	e00a      	b.n	8004cb0 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ca0:	4818      	ldr	r0, [pc, #96]	; (8004d04 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ca2:	f005 ff0f 	bl	800aac4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da0d      	bge.n	8004cd6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cc0:	4810      	ldr	r0, [pc, #64]	; (8004d04 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cc2:	f005 feff 	bl	800aac4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	425b      	negs	r3, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	81bb      	strh	r3, [r7, #12]
 8004cd4:	e00a      	b.n	8004cec <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cdc:	4809      	ldr	r0, [pc, #36]	; (8004d04 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cde:	f005 fef1 	bl	800aac4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004cec:	89fa      	ldrh	r2, [r7, #14]
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004cf4:	89ba      	ldrh	r2, [r7, #12]
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40020c00 	.word	0x40020c00
 8004d08:	2004373c 	.word	0x2004373c

08004d0c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6178      	str	r0, [r7, #20]
 8004d14:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d18:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d26:	f7fb ff0f 	bl	8000b48 <__aeabi_dcmpgt>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <_ZN5Motor8setRatioEdd+0x30>
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	4c2b      	ldr	r4, [pc, #172]	; (8004de4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d36:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d3a:	e00e      	b.n	8004d5a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d46:	f7fb fee1 	bl	8000b0c <__aeabi_dcmplt>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <_ZN5Motor8setRatioEdd+0x4e>
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	4c24      	ldr	r4, [pc, #144]	; (8004de8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d56:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d64:	f7fb fef0 	bl	8000b48 <__aeabi_dcmpgt>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <_ZN5Motor8setRatioEdd+0x6e>
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	4c1c      	ldr	r4, [pc, #112]	; (8004de4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d74:	e9c7 3400 	strd	r3, r4, [r7]
 8004d78:	e00e      	b.n	8004d98 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d84:	f7fb fec2 	bl	8000b0c <__aeabi_dcmplt>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <_ZN5Motor8setRatioEdd+0x8c>
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	4c15      	ldr	r4, [pc, #84]	; (8004de8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d94:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <_ZN5Motor8setRatioEdd+0xe0>)
 8004d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004da2:	f7fb fc41 	bl	8000628 <__aeabi_dmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	4618      	mov	r0, r3
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7fb feeb 	bl	8000b88 <__aeabi_d2iz>
 8004db2:	4603      	mov	r3, r0
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <_ZN5Motor8setRatioEdd+0xe0>)
 8004dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc4:	f7fb fc30 	bl	8000628 <__aeabi_dmul>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f7fb feda 	bl	8000b88 <__aeabi_d2iz>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b21a      	sxth	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	805a      	strh	r2, [r3, #2]

}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	3ff00000 	.word	0x3ff00000
 8004de8:	bff00000 	.word	0xbff00000
 8004dec:	409c2000 	.word	0x409c2000

08004df0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004df0:	b490      	push	{r4, r7}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	f04f 0400 	mov.w	r4, #0
 8004e32:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	f04f 0400 	mov.w	r4, #0
 8004e40:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc90      	pop	{r4, r7}
 8004e60:	4770      	bx	lr
 8004e62:	0000      	movs	r0, r0
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fc ffba 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8004e7c:	ee10 3a10 	vmov	r3, s0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb fb79 	bl	8000578 <__aeabi_f2d>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fc fc08 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004e98:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004e9c:	a376      	add	r3, pc, #472	; (adr r3, 8005078 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ea6:	f7fb fbbf 	bl	8000628 <__aeabi_dmul>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7fb fb5c 	bl	8000578 <__aeabi_f2d>
 8004ec0:	4682      	mov	sl, r0
 8004ec2:	468b      	mov	fp, r1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ed8:	f7fb fcd0 	bl	800087c <__aeabi_ddiv>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb f9ea 	bl	80002bc <__adddf3>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	ec43 2b17 	vmov	d7, r2, r3
 8004ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ef4:	eef0 0a67 	vmov.f32	s1, s15
 8004ef8:	f00f f842 	bl	8013f80 <cos>
 8004efc:	ec53 2b10 	vmov	r2, r3, d0
 8004f00:	4650      	mov	r0, sl
 8004f02:	4659      	mov	r1, fp
 8004f04:	f7fb fb90 	bl	8000628 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb f9d4 	bl	80002bc <__adddf3>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7fb fb27 	bl	8000578 <__aeabi_f2d>
 8004f2a:	4682      	mov	sl, r0
 8004f2c:	468b      	mov	fp, r1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f42:	f7fb fc9b 	bl	800087c <__aeabi_ddiv>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f7fb f9b5 	bl	80002bc <__adddf3>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	ec43 2b17 	vmov	d7, r2, r3
 8004f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f5e:	eef0 0a67 	vmov.f32	s1, s15
 8004f62:	f00f f851 	bl	8014008 <sin>
 8004f66:	ec53 2b10 	vmov	r2, r3, d0
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	f7fb fb5b 	bl	8000628 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f99f 	bl	80002bc <__adddf3>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004f94:	461a      	mov	r2, r3
 8004f96:	4623      	mov	r3, r4
 8004f98:	f7fb f990 	bl	80002bc <__adddf3>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb6:	eef0 0a67 	vmov.f32	s1, s15
 8004fba:	f00e ffe1 	bl	8013f80 <cos>
 8004fbe:	ec51 0b10 	vmov	r0, r1, d0
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004fc8:	f7fb fb2e 	bl	8000628 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb f972 	bl	80002bc <__adddf3>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fee:	eeb0 0a47 	vmov.f32	s0, s14
 8004ff2:	eef0 0a67 	vmov.f32	s1, s15
 8004ff6:	f00f f807 	bl	8014008 <sin>
 8004ffa:	ec51 0b10 	vmov	r0, r1, d0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	4b19      	ldr	r3, [pc, #100]	; (8005068 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005004:	f7fb fb10 	bl	8000628 <__aeabi_dmul>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4620      	mov	r0, r4
 800500e:	4629      	mov	r1, r5
 8005010:	f7fb f954 	bl	80002bc <__adddf3>
 8005014:	4603      	mov	r3, r0
 8005016:	460c      	mov	r4, r1
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005024:	4618      	mov	r0, r3
 8005026:	4621      	mov	r1, r4
 8005028:	f7fb fdf6 	bl	8000c18 <__aeabi_d2f>
 800502c:	4602      	mov	r2, r0
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005030:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005038:	4618      	mov	r0, r3
 800503a:	4621      	mov	r1, r4
 800503c:	f7fb fdec 	bl	8000c18 <__aeabi_d2f>
 8005040:	4602      	mov	r2, r0
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005044:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800504c:	4618      	mov	r0, r3
 800504e:	4621      	mov	r1, r4
 8005050:	f7fb fde2 	bl	8000c18 <__aeabi_d2f>
 8005054:	4602      	mov	r2, r0
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005058:	601a      	str	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005064:	f3af 8000 	nop.w
 8005068:	405b8000 	.word	0x405b8000
 800506c:	20000290 	.word	0x20000290
 8005070:	20000294 	.word	0x20000294
 8005074:	20000298 	.word	0x20000298
 8005078:	d2f1a9fc 	.word	0xd2f1a9fc
 800507c:	3f50624d 	.word	0x3f50624d

08005080 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff feed 	bl	8004e68 <_ZN8Odometry12calcPotitionEv>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005096:	b490      	push	{r4, r7}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
	return theta_;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80050a8:	eeb0 0a47 	vmov.f32	s0, s14
 80050ac:	eef0 0a67 	vmov.f32	s1, s15
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc90      	pop	{r4, r7}
 80050b6:	4770      	bx	lr

080050b8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050b8:	b490      	push	{r4, r7}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc90      	pop	{r4, r7}
 80050f2:	4770      	bx	lr

080050f4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80050f4:	b490      	push	{r4, r7}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	f04f 0400 	mov.w	r4, #0
 800511a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f04f 0400 	mov.w	r4, #0
 8005128:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005132:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005136:	2200      	movs	r2, #0
 8005138:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800513a:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <_ZN13PathFollowingC1Ev+0xec>)
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <_ZN13PathFollowingC1Ev+0xec>)
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <_ZN13PathFollowingC1Ev+0xec>)
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800519c:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <_ZN13PathFollowingC1Ev+0xf0>)
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051b8:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc90      	pop	{r4, r7}
 80051de:	4770      	bx	lr
 80051e0:	20043c40 	.word	0x20043c40
 80051e4:	20043bd0 	.word	0x20043bd0
 80051e8:	20043c30 	.word	0x20043c30

080051ec <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80051f4:	f001 fc2e 	bl	8006a54 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80051f8:	f107 0318 	add.w	r3, r7, #24
 80051fc:	2201      	movs	r2, #1
 80051fe:	4915      	ldr	r1, [pc, #84]	; (8005254 <_ZN13PathFollowing4initEv+0x68>)
 8005200:	4815      	ldr	r0, [pc, #84]	; (8005258 <_ZN13PathFollowing4initEv+0x6c>)
 8005202:	f7fc fbe7 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005206:	f107 0310 	add.w	r3, r7, #16
 800520a:	2201      	movs	r2, #1
 800520c:	4913      	ldr	r1, [pc, #76]	; (800525c <_ZN13PathFollowing4initEv+0x70>)
 800520e:	4812      	ldr	r0, [pc, #72]	; (8005258 <_ZN13PathFollowing4initEv+0x6c>)
 8005210:	f7fc fbe0 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	2201      	movs	r2, #1
 800521a:	4911      	ldr	r1, [pc, #68]	; (8005260 <_ZN13PathFollowing4initEv+0x74>)
 800521c:	480e      	ldr	r0, [pc, #56]	; (8005258 <_ZN13PathFollowing4initEv+0x6c>)
 800521e:	f7fc fbd9 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005222:	ed97 7b06 	vldr	d7, [r7, #24]
 8005226:	ed97 6b04 	vldr	d6, [r7, #16]
 800522a:	ed97 5b02 	vldr	d5, [r7, #8]
 800522e:	eeb0 2a45 	vmov.f32	s4, s10
 8005232:	eef0 2a65 	vmov.f32	s5, s11
 8005236:	eeb0 1a46 	vmov.f32	s2, s12
 800523a:	eef0 1a66 	vmov.f32	s3, s13
 800523e:	eeb0 0a47 	vmov.f32	s0, s14
 8005242:	eef0 0a67 	vmov.f32	s1, s15
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f80c 	bl	8005264 <_ZN13PathFollowing7setGainEddd>
}
 800524c:	bf00      	nop
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	08019630 	.word	0x08019630
 8005258:	08019638 	.word	0x08019638
 800525c:	08019640 	.word	0x08019640
 8005260:	08019648 	.word	0x08019648

08005264 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005264:	b490      	push	{r4, r7}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	61f8      	str	r0, [r7, #28]
 800526c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005270:	ed87 1b02 	vstr	d1, [r7, #8]
 8005274:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005278:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800527a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800527e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005284:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005288:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800528e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005292:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005296:	bf00      	nop
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bc90      	pop	{r4, r7}
 800529e:	4770      	bx	lr
 80052a0:	20043c40 	.word	0x20043c40

080052a4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052ac:	2088      	movs	r0, #136	; 0x88
 80052ae:	f7fc fee2 	bl	8002076 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052b2:	2080      	movs	r0, #128	; 0x80
 80052b4:	f7fc fedf 	bl	8002076 <INA260_init>
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052c8:	2188      	movs	r1, #136	; 0x88
 80052ca:	2002      	movs	r0, #2
 80052cc:	f7fc fe70 	bl	8001fb0 <INA260_read>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f93e 	bl	8000554 <__aeabi_i2d>
 80052d8:	a30c      	add	r3, pc, #48	; (adr r3, 800530c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f7fb f9a3 	bl	8000628 <__aeabi_dmul>
 80052e2:	4603      	mov	r3, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	4618      	mov	r0, r3
 80052e8:	4621      	mov	r1, r4
 80052ea:	f7fb fc95 	bl	8000c18 <__aeabi_d2f>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a03      	ldr	r2, [pc, #12]	; (8005308 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80052fa:	6013      	str	r3, [r2, #0]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bd90      	pop	{r4, r7, pc}
 8005304:	f3af 8000 	nop.w
 8005308:	2000029c 	.word	0x2000029c
 800530c:	47ae147b 	.word	0x47ae147b
 8005310:	3f547ae1 	.word	0x3f547ae1

08005314 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	ee07 3a90 	vmov	s15, r3

}
 8005324:	eeb0 0a67 	vmov.f32	s0, s15
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005340:	2102      	movs	r1, #2
 8005342:	4822      	ldr	r0, [pc, #136]	; (80053cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005344:	f005 fba6 	bl	800aa94 <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005360:	2108      	movs	r1, #8
 8005362:	481a      	ldr	r0, [pc, #104]	; (80053cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005364:	f005 fb96 	bl	800aa94 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005380:	2110      	movs	r1, #16
 8005382:	4812      	ldr	r0, [pc, #72]	; (80053cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005384:	f005 fb86 	bl	800aa94 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	480a      	ldr	r0, [pc, #40]	; (80053cc <_ZN12RotarySwitch8getValueEv+0x98>)
 80053a4:	f005 fb76 	bl	800aa94 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	f043 0308 	orr.w	r3, r3, #8
 80053be:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053c0:	89fb      	ldrh	r3, [r7, #14]

}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40020c00 	.word	0x40020c00

080053d0 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	805a      	strh	r2, [r3, #2]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	809a      	strh	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	719a      	strb	r2, [r3, #6]
{

}
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	799b      	ldrb	r3, [r3, #6]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80c7 	beq.w	80055a6 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005418:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f083 0301 	eor.w	r3, r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d027      	beq.n	8005476 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005426:	2104      	movs	r1, #4
 8005428:	4862      	ldr	r0, [pc, #392]	; (80055b4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800542a:	f005 fb33 	bl	800aa94 <HAL_GPIO_ReadPin>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800543e:	4b5e      	ldr	r3, [pc, #376]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e002      	b.n	8005452 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 800544c:	4b5a      	ldr	r3, [pc, #360]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800544e:	2200      	movs	r2, #0
 8005450:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005452:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d93f      	bls.n	80054da <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005468:	4b51      	ldr	r3, [pc, #324]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800546e:	4b52      	ldr	r3, [pc, #328]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005470:	2200      	movs	r2, #0
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e031      	b.n	80054da <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8005476:	4b4e      	ldr	r3, [pc, #312]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d02d      	beq.n	80054da <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800547e:	2104      	movs	r1, #4
 8005480:	484c      	ldr	r0, [pc, #304]	; (80055b4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005482:	f005 fb07 	bl	800aa94 <HAL_GPIO_ReadPin>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8005496:	4b48      	ldr	r3, [pc, #288]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e002      	b.n	80054aa <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80054a4:	4b44      	ldr	r3, [pc, #272]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054aa:	4b43      	ldr	r3, [pc, #268]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d913      	bls.n	80054da <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	f083 0301 	eor.w	r3, r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	889b      	ldrh	r3, [r3, #4]
 80054ca:	3301      	adds	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	889a      	ldrh	r2, [r3, #4]
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80054d8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	f083 0301 	eor.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d027      	beq.n	8005538 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80054e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ec:	4835      	ldr	r0, [pc, #212]	; (80055c4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80054ee:	f005 fad1 	bl	800aa94 <HAL_GPIO_ReadPin>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005512:	2200      	movs	r2, #0
 8005514:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005516:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d90c      	bls.n	8005538 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005532:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005534:	2200      	movs	r2, #0
 8005536:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005538:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02e      	beq.n	800559e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005544:	481f      	ldr	r0, [pc, #124]	; (80055c4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005546:	f005 faa5 	bl	800aa94 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d006      	beq.n	8005568 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	4b19      	ldr	r3, [pc, #100]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e002      	b.n	800556e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005568:	4b17      	ldr	r3, [pc, #92]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800556a:	2200      	movs	r2, #0
 800556c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d913      	bls.n	800559e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	f083 0302 	eor.w	r3, r3, #2
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	885b      	ldrh	r3, [r3, #2]
 800558e:	3301      	adds	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	885a      	ldrh	r2, [r3, #2]
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <_ZN10SideSensor12updateStatusEv+0x1cc>)
 800559c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80055a4:	801a      	strh	r2, [r3, #0]
	}

}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200002a6 	.word	0x200002a6
 80055b4:	40021000 	.word	0x40021000
 80055b8:	200002aa 	.word	0x200002aa
 80055bc:	200002a4 	.word	0x200002a4
 80055c0:	200002a7 	.word	0x200002a7
 80055c4:	40020c00 	.word	0x40020c00
 80055c8:	200002a8 	.word	0x200002a8
 80055cc:	200002a2 	.word	0x200002a2
 80055d0:	200002a0 	.word	0x200002a0

080055d4 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	return status_;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	881b      	ldrh	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	889b      	ldrh	r3, [r3, #4]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	809a      	strh	r2, [r3, #4]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	719a      	strb	r2, [r3, #6]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	719a      	strb	r2, [r3, #6]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	799b      	ldrb	r3, [r3, #6]
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005680:	3308      	adds	r3, #8
 8005682:	4611      	mov	r1, r2
 8005684:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005688:	4618      	mov	r0, r3
 800568a:	f00f fcf9 	bl	8015080 <memcpy>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	0801966c 	.word	0x0801966c

080056c4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	ed97 0a00 	vldr	s0, [r7]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f862 	bl	80047ac <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80056f2:	eeb0 0a67 	vmov.f32	s0, s15
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7ff f895 	bl	8004826 <_ZN6Logger9storeLog2Ef>
	}

}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005712:	2b00      	cmp	r3, #0
 8005714:	d046      	beq.n	80057a4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3204      	adds	r2, #4
 8005728:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005744:	3301      	adds	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005756:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800575e:	2bf9      	cmp	r3, #249	; 0xf9
 8005760:	d903      	bls.n	800576a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	22fa      	movs	r2, #250	; 0xfa
 8005766:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685c      	ldr	r4, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005774:	4618      	mov	r0, r3
 8005776:	f7fa feff 	bl	8000578 <__aeabi_f2d>
 800577a:	4605      	mov	r5, r0
 800577c:	460e      	mov	r6, r1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005784:	eef1 7a67 	vneg.f32	s15, s15
 8005788:	ee17 3a90 	vmov	r3, s15
 800578c:	4618      	mov	r0, r3
 800578e:	f7fa fef3 	bl	8000578 <__aeabi_f2d>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	ec43 2b11 	vmov	d1, r2, r3
 800579a:	ec46 5b10 	vmov	d0, r5, r6
 800579e:	4620      	mov	r0, r4
 80057a0:	f7ff fab4 	bl	8004d0c <_ZN5Motor8setRatioEdd>

	}

}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ac:	200002ac 	.word	0x200002ac

080057b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	619a      	str	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	61da      	str	r2, [r3, #28]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	621a      	str	r2, [r3, #32]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	f107 020c 	add.w	r2, r7, #12
 8005858:	f107 0110 	add.w	r1, r7, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f7fb ff0f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005862:	ed97 7a04 	vldr	s14, [r7, #16]
 8005866:	edd7 7a03 	vldr	s15, [r7, #12]
 800586a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800586e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005876:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800587a:	6978      	ldr	r0, [r7, #20]
 800587c:	f7fa fe7c 	bl	8000578 <__aeabi_f2d>
 8005880:	a30b      	add	r3, pc, #44	; (adr r3, 80058b0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fecf 	bl	8000628 <__aeabi_dmul>
 800588a:	4603      	mov	r3, r0
 800588c:	460c      	mov	r4, r1
 800588e:	4618      	mov	r0, r3
 8005890:	4621      	mov	r1, r4
 8005892:	f7fb f9c1 	bl	8000c18 <__aeabi_d2f>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	ee07 3a90 	vmov	s15, r3
}
 80058a4:	eeb0 0a67 	vmov.f32	s0, s15
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}
 80058ae:	bf00      	nop
 80058b0:	1ab1d998 	.word	0x1ab1d998
 80058b4:	3f7830b5 	.word	0x3f7830b5

080058b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80058b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	ed93 7a00 	vldr	s14, [r3]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80058cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80058de:	4b48      	ldr	r3, [pc, #288]	; (8005a00 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80058f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005900:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fa fe37 	bl	8000578 <__aeabi_f2d>
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	ed93 7a06 	vldr	s14, [r3, #24]
 8005914:	edd7 7a05 	vldr	s15, [r7, #20]
 8005918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591c:	ee17 0a90 	vmov	r0, s15
 8005920:	f7fa fe2a 	bl	8000578 <__aeabi_f2d>
 8005924:	a334      	add	r3, pc, #208	; (adr r3, 80059f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fe7d 	bl	8000628 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fa fcc1 	bl	80002bc <__adddf3>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	4618      	mov	r0, r3
 8005940:	4621      	mov	r1, r4
 8005942:	f7fb f969 	bl	8000c18 <__aeabi_d2f>
 8005946:	4602      	mov	r2, r0
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800594a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005952:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005954:	edd3 7a00 	vldr	s15, [r3]
 8005958:	edd7 6a05 	vldr	s13, [r7, #20]
 800595c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005964:	ee17 0a90 	vmov	r0, s15
 8005968:	f7fa fe06 	bl	8000578 <__aeabi_f2d>
 800596c:	a322      	add	r3, pc, #136	; (adr r3, 80059f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa ff83 	bl	800087c <__aeabi_ddiv>
 8005976:	4603      	mov	r3, r0
 8005978:	460c      	mov	r4, r1
 800597a:	4618      	mov	r0, r3
 800597c:	4621      	mov	r1, r4
 800597e:	f7fb f94b 	bl	8000c18 <__aeabi_d2f>
 8005982:	4603      	mov	r3, r0
 8005984:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005986:	ed97 7a04 	vldr	s14, [r7, #16]
 800598a:	edd7 7a03 	vldr	s15, [r7, #12]
 800598e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005992:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80059aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b2:	ee17 0a90 	vmov	r0, s15
 80059b6:	f7fa fddf 	bl	8000578 <__aeabi_f2d>
 80059ba:	4605      	mov	r5, r0
 80059bc:	460e      	mov	r6, r1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80059c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059cc:	ee17 0a90 	vmov	r0, s15
 80059d0:	f7fa fdd2 	bl	8000578 <__aeabi_f2d>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	ec43 2b11 	vmov	d1, r2, r3
 80059dc:	ec46 5b10 	vmov	d0, r5, r6
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff f993 	bl	8004d0c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80059e6:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f4:	f3af 8000 	nop.w
 80059f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80059fc:	3f50624d 	.word	0x3f50624d
 8005a00:	200002b4 	.word	0x200002b4
 8005a04:	200002b0 	.word	0x200002b0

08005a08 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a14:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a3c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a64:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a68:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a96:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a9a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff febf 	bl	8005848 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff feef 	bl	80058b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005b38 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b20:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b38 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff f8f1 	bl	8004d0c <_ZN5Motor8setRatioEdd>

}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	f3af 8000 	nop.w
	...

08005b40 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	ee07 3a90 	vmov	s15, r3
}
 8005b50:	eeb0 0a67 	vmov.f32	s0, s15
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b72:	f001 fe2b 	bl	80077cc <cppFlip100ns>

		tim7_timer++;
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b7e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d902      	bls.n	8005b90 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005b8a:	4b18      	ldr	r3, [pc, #96]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005b9a:	f001 fdcd 	bl	8007738 <cppFlip1ms>

		tim6_timer++;
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ba6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d902      	bls.n	8005bb8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0f      	ldr	r2, [pc, #60]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005bc2:	f001 fe0d 	bl	80077e0 <cppFlip10ms>

		tim13_timer++;
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bce:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a06      	ldr	r2, [pc, #24]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d902      	bls.n	8005be0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
	}

}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40001400 	.word	0x40001400
 8005bec:	200438f0 	.word	0x200438f0
 8005bf0:	0001869f 	.word	0x0001869f
 8005bf4:	40001000 	.word	0x40001000
 8005bf8:	200438ac 	.word	0x200438ac
 8005bfc:	40001c00 	.word	0x40001c00
 8005c00:	200438f4 	.word	0x200438f4

08005c04 <init>:

void init()
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c0e:	4808      	ldr	r0, [pc, #32]	; (8005c30 <init+0x2c>)
 8005c10:	f004 ff58 	bl	800aac4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005c14:	4807      	ldr	r0, [pc, #28]	; (8005c34 <init+0x30>)
 8005c16:	f008 fe20 	bl	800e85a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005c1a:	4807      	ldr	r0, [pc, #28]	; (8005c38 <init+0x34>)
 8005c1c:	f008 fe1d 	bl	800e85a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005c20:	4806      	ldr	r0, [pc, #24]	; (8005c3c <init+0x38>)
 8005c22:	f008 fe1a 	bl	800e85a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005c26:	f001 fce3 	bl	80075f0 <cppInit>

	//path_following_initialize();

}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40021000 	.word	0x40021000
 8005c34:	200439d8 	.word	0x200439d8
 8005c38:	20043b7c 	.word	0x20043b7c
 8005c3c:	200438f8 	.word	0x200438f8

08005c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c44:	f003 fc36 	bl	80094b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c48:	f000 f82a 	bl	8005ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c4c:	f000 fdbc 	bl	80067c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c50:	f000 fd8a 	bl	8006768 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c54:	f000 f9e8 	bl	8006028 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c58:	f000 fa14 	bl	8006084 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c5c:	f000 fa32 	bl	80060c4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c60:	f000 fa66 	bl	8006130 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c64:	f000 fb70 	bl	8006348 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c68:	f000 fc3c 	bl	80064e4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c6c:	f000 fd52 	bl	8006714 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c70:	f00a fdc6 	bl	8010800 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c74:	f000 fbcc 	bl	8006410 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c78:	f000 f9a8 	bl	8005fcc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c7c:	f000 fb00 	bl	8006280 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005c80:	f000 fc88 	bl	8006594 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c84:	f000 fcd4 	bl	8006630 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005c88:	f000 f898 	bl	8005dbc <MX_ADC2_Init>
  MX_TIM7_Init();
 8005c8c:	f000 fbf6 	bl	800647c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005c90:	f000 fd1c 	bl	80066cc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005c94:	f7ff ffb6 	bl	8005c04 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005c98:	f001 fdba 	bl	8007810 <cppLoop>
 8005c9c:	e7fc      	b.n	8005c98 <main+0x58>
	...

08005ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b0a4      	sub	sp, #144	; 0x90
 8005ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ca6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005caa:	2234      	movs	r2, #52	; 0x34
 8005cac:	2100      	movs	r1, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f00f f9f1 	bl	8015096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	223c      	movs	r2, #60	; 0x3c
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f00f f9e2 	bl	8015096 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	4b37      	ldr	r3, [pc, #220]	; (8005db4 <SystemClock_Config+0x114>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4a36      	ldr	r2, [pc, #216]	; (8005db4 <SystemClock_Config+0x114>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce2:	4b34      	ldr	r3, [pc, #208]	; (8005db4 <SystemClock_Config+0x114>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <SystemClock_Config+0x118>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a30      	ldr	r2, [pc, #192]	; (8005db8 <SystemClock_Config+0x118>)
 8005cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <SystemClock_Config+0x118>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d14:	2302      	movs	r3, #2
 8005d16:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d1c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d1e:	2308      	movs	r3, #8
 8005d20:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005d22:	23b4      	movs	r3, #180	; 0xb4
 8005d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005d2e:	2308      	movs	r3, #8
 8005d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d34:	2302      	movs	r3, #2
 8005d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f006 fae2 	bl	800c308 <HAL_RCC_OscConfig>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d4a:	f000 fe7f 	bl	8006a4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d4e:	f005 fe5d 	bl	800ba0c <HAL_PWREx_EnableOverDrive>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d58:	f000 fe78 	bl	8006a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d60:	2302      	movs	r3, #2
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d64:	2300      	movs	r3, #0
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d72:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d78:	2105      	movs	r1, #5
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f005 fe96 	bl	800baac <HAL_RCC_ClockConfig>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005d86:	f000 fe61 	bl	8006a4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005d8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005d90:	2300      	movs	r3, #0
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d98:	f107 030c 	add.w	r3, r7, #12
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f006 f875 	bl	800be8c <HAL_RCCEx_PeriphCLKConfig>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005da8:	f000 fe50 	bl	8006a4c <Error_Handler>
  }
}
 8005dac:	bf00      	nop
 8005dae:	3790      	adds	r7, #144	; 0x90
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40007000 	.word	0x40007000

08005dbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005dce:	4b7c      	ldr	r3, [pc, #496]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005dd0:	4a7c      	ldr	r2, [pc, #496]	; (8005fc4 <MX_ADC2_Init+0x208>)
 8005dd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005dd4:	4b7a      	ldr	r3, [pc, #488]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005ddc:	4b78      	ldr	r3, [pc, #480]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005de2:	4b77      	ldr	r3, [pc, #476]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005de8:	4b75      	ldr	r3, [pc, #468]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005dee:	4b74      	ldr	r3, [pc, #464]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005df6:	4b72      	ldr	r3, [pc, #456]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dfc:	4b70      	ldr	r3, [pc, #448]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005dfe:	4a72      	ldr	r2, [pc, #456]	; (8005fc8 <MX_ADC2_Init+0x20c>)
 8005e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e02:	4b6f      	ldr	r3, [pc, #444]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005e08:	4b6d      	ldr	r3, [pc, #436]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e0a:	220e      	movs	r2, #14
 8005e0c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e0e:	4b6c      	ldr	r3, [pc, #432]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e16:	4b6a      	ldr	r3, [pc, #424]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e1c:	4868      	ldr	r0, [pc, #416]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e1e:	f003 fbdd 	bl	80095dc <HAL_ADC_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e28:	f000 fe10 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e30:	2301      	movs	r3, #1
 8005e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e34:	2306      	movs	r3, #6
 8005e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e38:	463b      	mov	r3, r7
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4860      	ldr	r0, [pc, #384]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e3e:	f003 fd21 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e48:	f000 fe00 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e4c:	230b      	movs	r3, #11
 8005e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e50:	2302      	movs	r3, #2
 8005e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e54:	463b      	mov	r3, r7
 8005e56:	4619      	mov	r1, r3
 8005e58:	4859      	ldr	r0, [pc, #356]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e5a:	f003 fd13 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e64:	f000 fdf2 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e68:	230c      	movs	r3, #12
 8005e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e70:	463b      	mov	r3, r7
 8005e72:	4619      	mov	r1, r3
 8005e74:	4852      	ldr	r0, [pc, #328]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e76:	f003 fd05 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005e80:	f000 fde4 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005e84:	230d      	movs	r3, #13
 8005e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	4619      	mov	r1, r3
 8005e90:	484b      	ldr	r0, [pc, #300]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005e92:	f003 fcf7 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005e9c:	f000 fdd6 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005ea4:	2305      	movs	r3, #5
 8005ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4844      	ldr	r0, [pc, #272]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005eae:	f003 fce9 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005eb8:	f000 fdc8 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ec0:	2306      	movs	r3, #6
 8005ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	483d      	ldr	r0, [pc, #244]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005eca:	f003 fcdb 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ed4:	f000 fdba 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005edc:	2307      	movs	r3, #7
 8005ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4836      	ldr	r0, [pc, #216]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005ee6:	f003 fccd 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005ef0:	f000 fdac 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005ef8:	2308      	movs	r3, #8
 8005efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005efc:	463b      	mov	r3, r7
 8005efe:	4619      	mov	r1, r3
 8005f00:	482f      	ldr	r0, [pc, #188]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f02:	f003 fcbf 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005f0c:	f000 fd9e 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005f10:	2304      	movs	r3, #4
 8005f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005f14:	2309      	movs	r3, #9
 8005f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f18:	463b      	mov	r3, r7
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4828      	ldr	r0, [pc, #160]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f1e:	f003 fcb1 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005f28:	f000 fd90 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f2c:	2305      	movs	r3, #5
 8005f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005f30:	230a      	movs	r3, #10
 8005f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f34:	463b      	mov	r3, r7
 8005f36:	4619      	mov	r1, r3
 8005f38:	4821      	ldr	r0, [pc, #132]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f3a:	f003 fca3 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f44:	f000 fd82 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f48:	2306      	movs	r3, #6
 8005f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f4c:	230b      	movs	r3, #11
 8005f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f50:	463b      	mov	r3, r7
 8005f52:	4619      	mov	r1, r3
 8005f54:	481a      	ldr	r0, [pc, #104]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f56:	f003 fc95 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f60:	f000 fd74 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f64:	2307      	movs	r3, #7
 8005f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f68:	230c      	movs	r3, #12
 8005f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4813      	ldr	r0, [pc, #76]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f72:	f003 fc87 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f7c:	f000 fd66 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f80:	2308      	movs	r3, #8
 8005f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005f84:	230d      	movs	r3, #13
 8005f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f88:	463b      	mov	r3, r7
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	480c      	ldr	r0, [pc, #48]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005f8e:	f003 fc79 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005f98:	f000 fd58 	bl	8006a4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005fa0:	230e      	movs	r3, #14
 8005fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4805      	ldr	r0, [pc, #20]	; (8005fc0 <MX_ADC2_Init+0x204>)
 8005faa:	f003 fc6b 	bl	8009884 <HAL_ADC_ConfigChannel>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005fb4:	f000 fd4a 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	2004377c 	.word	0x2004377c
 8005fc4:	40012100 	.word	0x40012100
 8005fc8:	0f000001 	.word	0x0f000001

08005fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <MX_I2C1_Init+0x50>)
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <MX_I2C1_Init+0x54>)
 8005fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <MX_I2C1_Init+0x50>)
 8005fd8:	4a12      	ldr	r2, [pc, #72]	; (8006024 <MX_I2C1_Init+0x58>)
 8005fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <MX_I2C1_Init+0x50>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <MX_I2C1_Init+0x50>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <MX_I2C1_Init+0x50>)
 8005fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	; (800601c <MX_I2C1_Init+0x50>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <MX_I2C1_Init+0x50>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ffc:	4b07      	ldr	r3, [pc, #28]	; (800601c <MX_I2C1_Init+0x50>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <MX_I2C1_Init+0x50>)
 8006004:	2280      	movs	r2, #128	; 0x80
 8006006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006008:	4804      	ldr	r0, [pc, #16]	; (800601c <MX_I2C1_Init+0x50>)
 800600a:	f004 fd75 	bl	800aaf8 <HAL_I2C_Init>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006014:	f000 fd1a 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006018:	bf00      	nop
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200437c4 	.word	0x200437c4
 8006020:	40005400 	.word	0x40005400
 8006024:	000186a0 	.word	0x000186a0

08006028 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800602c:	4b12      	ldr	r3, [pc, #72]	; (8006078 <MX_I2C2_Init+0x50>)
 800602e:	4a13      	ldr	r2, [pc, #76]	; (800607c <MX_I2C2_Init+0x54>)
 8006030:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <MX_I2C2_Init+0x50>)
 8006034:	4a12      	ldr	r2, [pc, #72]	; (8006080 <MX_I2C2_Init+0x58>)
 8006036:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <MX_I2C2_Init+0x50>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <MX_I2C2_Init+0x50>)
 8006040:	2200      	movs	r2, #0
 8006042:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <MX_I2C2_Init+0x50>)
 8006046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800604a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <MX_I2C2_Init+0x50>)
 800604e:	2200      	movs	r2, #0
 8006050:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <MX_I2C2_Init+0x50>)
 8006054:	2200      	movs	r2, #0
 8006056:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <MX_I2C2_Init+0x50>)
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <MX_I2C2_Init+0x50>)
 8006060:	2280      	movs	r2, #128	; 0x80
 8006062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006064:	4804      	ldr	r0, [pc, #16]	; (8006078 <MX_I2C2_Init+0x50>)
 8006066:	f004 fd47 	bl	800aaf8 <HAL_I2C_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006070:	f000 fcec 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006074:	bf00      	nop
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20043858 	.word	0x20043858
 800607c:	40005800 	.word	0x40005800
 8006080:	000186a0 	.word	0x000186a0

08006084 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 800608a:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <MX_SDIO_SD_Init+0x3c>)
 800608c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 800609c:	2200      	movs	r2, #0
 800609e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <MX_SDIO_SD_Init+0x38>)
 80060ae:	2202      	movs	r2, #2
 80060b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20043a58 	.word	0x20043a58
 80060c0:	40012c00 	.word	0x40012c00

080060c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <MX_SPI2_Init+0x64>)
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <MX_SPI2_Init+0x68>)
 80060cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <MX_SPI2_Init+0x64>)
 80060d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <MX_SPI2_Init+0x64>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <MX_SPI2_Init+0x64>)
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <MX_SPI2_Init+0x64>)
 80060e4:	2202      	movs	r2, #2
 80060e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <MX_SPI2_Init+0x64>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <MX_SPI2_Init+0x64>)
 80060f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <MX_SPI2_Init+0x64>)
 80060f8:	2228      	movs	r2, #40	; 0x28
 80060fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <MX_SPI2_Init+0x64>)
 80060fe:	2200      	movs	r2, #0
 8006100:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <MX_SPI2_Init+0x64>)
 8006104:	2200      	movs	r2, #0
 8006106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <MX_SPI2_Init+0x64>)
 800610a:	2200      	movs	r2, #0
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <MX_SPI2_Init+0x64>)
 8006110:	220a      	movs	r2, #10
 8006112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006114:	4804      	ldr	r0, [pc, #16]	; (8006128 <MX_SPI2_Init+0x64>)
 8006116:	f007 fe21 	bl	800dd5c <HAL_SPI_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006120:	f000 fc94 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	200436a4 	.word	0x200436a4
 800612c:	40003800 	.word	0x40003800

08006130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b09a      	sub	sp, #104	; 0x68
 8006134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f00e ffa9 	bl	8015096 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800614e:	f107 0320 	add.w	r3, r7, #32
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	611a      	str	r2, [r3, #16]
 800615e:	615a      	str	r2, [r3, #20]
 8006160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006162:	463b      	mov	r3, r7
 8006164:	2220      	movs	r2, #32
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f00e ff94 	bl	8015096 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800616e:	4b42      	ldr	r3, [pc, #264]	; (8006278 <MX_TIM1_Init+0x148>)
 8006170:	4a42      	ldr	r2, [pc, #264]	; (800627c <MX_TIM1_Init+0x14c>)
 8006172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <MX_TIM1_Init+0x148>)
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800617a:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <MX_TIM1_Init+0x148>)
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006180:	4b3d      	ldr	r3, [pc, #244]	; (8006278 <MX_TIM1_Init+0x148>)
 8006182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006188:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <MX_TIM1_Init+0x148>)
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800618e:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <MX_TIM1_Init+0x148>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006194:	4b38      	ldr	r3, [pc, #224]	; (8006278 <MX_TIM1_Init+0x148>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800619a:	4837      	ldr	r0, [pc, #220]	; (8006278 <MX_TIM1_Init+0x148>)
 800619c:	f008 fb81 	bl	800e8a2 <HAL_TIM_PWM_Init>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061a6:	f000 fc51 	bl	8006a4c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061aa:	2303      	movs	r3, #3
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061ae:	2300      	movs	r3, #0
 80061b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061b2:	2301      	movs	r3, #1
 80061b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061b6:	2300      	movs	r3, #0
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061be:	2300      	movs	r3, #0
 80061c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061c2:	2301      	movs	r3, #1
 80061c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061c6:	2300      	movs	r3, #0
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80061ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061d2:	4619      	mov	r1, r3
 80061d4:	4828      	ldr	r0, [pc, #160]	; (8006278 <MX_TIM1_Init+0x148>)
 80061d6:	f008 fbcd 	bl	800e974 <HAL_TIM_Encoder_Init>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80061e0:	f000 fc34 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061f0:	4619      	mov	r1, r3
 80061f2:	4821      	ldr	r0, [pc, #132]	; (8006278 <MX_TIM1_Init+0x148>)
 80061f4:	f009 f8f4 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80061fe:	f000 fc25 	bl	8006a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006202:	2360      	movs	r3, #96	; 0x60
 8006204:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800620a:	2300      	movs	r3, #0
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800620e:	2300      	movs	r3, #0
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800621a:	2300      	movs	r3, #0
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800621e:	f107 0320 	add.w	r3, r7, #32
 8006222:	2208      	movs	r2, #8
 8006224:	4619      	mov	r1, r3
 8006226:	4814      	ldr	r0, [pc, #80]	; (8006278 <MX_TIM1_Init+0x148>)
 8006228:	f008 fd76 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006232:	f000 fc0b 	bl	8006a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006236:	2300      	movs	r3, #0
 8006238:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800623a:	2300      	movs	r3, #0
 800623c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800624a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800624e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006254:	463b      	mov	r3, r7
 8006256:	4619      	mov	r1, r3
 8006258:	4807      	ldr	r0, [pc, #28]	; (8006278 <MX_TIM1_Init+0x148>)
 800625a:	f009 f93d 	bl	800f4d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006264:	f000 fbf2 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006268:	4803      	ldr	r0, [pc, #12]	; (8006278 <MX_TIM1_Init+0x148>)
 800626a:	f000 ffdf 	bl	800722c <HAL_TIM_MspPostInit>

}
 800626e:	bf00      	nop
 8006270:	3768      	adds	r7, #104	; 0x68
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20043a18 	.word	0x20043a18
 800627c:	40010000 	.word	0x40010000

08006280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006286:	f107 0320 	add.w	r3, r7, #32
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	609a      	str	r2, [r3, #8]
 800629a:	60da      	str	r2, [r3, #12]
 800629c:	611a      	str	r2, [r3, #16]
 800629e:	615a      	str	r2, [r3, #20]
 80062a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062a2:	4b27      	ldr	r3, [pc, #156]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <MX_TIM3_Init+0xc4>)
 80062a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062b6:	f241 1293 	movw	r2, #4499	; 0x1193
 80062ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80062c8:	481d      	ldr	r0, [pc, #116]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062ca:	f008 faea 	bl	800e8a2 <HAL_TIM_PWM_Init>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80062d4:	f000 fbba 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062d8:	2300      	movs	r3, #0
 80062da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062dc:	2300      	movs	r3, #0
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062e0:	f107 0320 	add.w	r3, r7, #32
 80062e4:	4619      	mov	r1, r3
 80062e6:	4816      	ldr	r0, [pc, #88]	; (8006340 <MX_TIM3_Init+0xc0>)
 80062e8:	f009 f87a 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80062f2:	f000 fbab 	bl	8006a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062f6:	2360      	movs	r3, #96	; 0x60
 80062f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	2200      	movs	r2, #0
 800630a:	4619      	mov	r1, r3
 800630c:	480c      	ldr	r0, [pc, #48]	; (8006340 <MX_TIM3_Init+0xc0>)
 800630e:	f008 fd03 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006318:	f000 fb98 	bl	8006a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	2204      	movs	r2, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4807      	ldr	r0, [pc, #28]	; (8006340 <MX_TIM3_Init+0xc0>)
 8006324:	f008 fcf8 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800632e:	f000 fb8d 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006332:	4803      	ldr	r0, [pc, #12]	; (8006340 <MX_TIM3_Init+0xc0>)
 8006334:	f000 ff7a 	bl	800722c <HAL_TIM_MspPostInit>

}
 8006338:	bf00      	nop
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200438b0 	.word	0x200438b0
 8006344:	40000400 	.word	0x40000400

08006348 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800634e:	f107 0320 	add.w	r3, r7, #32
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	609a      	str	r2, [r3, #8]
 8006362:	60da      	str	r2, [r3, #12]
 8006364:	611a      	str	r2, [r3, #16]
 8006366:	615a      	str	r2, [r3, #20]
 8006368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800636a:	4b27      	ldr	r3, [pc, #156]	; (8006408 <MX_TIM4_Init+0xc0>)
 800636c:	4a27      	ldr	r2, [pc, #156]	; (800640c <MX_TIM4_Init+0xc4>)
 800636e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <MX_TIM4_Init+0xc0>)
 8006372:	2200      	movs	r2, #0
 8006374:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <MX_TIM4_Init+0xc0>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800637c:	4b22      	ldr	r3, [pc, #136]	; (8006408 <MX_TIM4_Init+0xc0>)
 800637e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006382:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <MX_TIM4_Init+0xc0>)
 8006386:	2200      	movs	r2, #0
 8006388:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800638a:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <MX_TIM4_Init+0xc0>)
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006390:	481d      	ldr	r0, [pc, #116]	; (8006408 <MX_TIM4_Init+0xc0>)
 8006392:	f008 fa86 	bl	800e8a2 <HAL_TIM_PWM_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800639c:	f000 fb56 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063a0:	2300      	movs	r3, #0
 80063a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063a8:	f107 0320 	add.w	r3, r7, #32
 80063ac:	4619      	mov	r1, r3
 80063ae:	4816      	ldr	r0, [pc, #88]	; (8006408 <MX_TIM4_Init+0xc0>)
 80063b0:	f009 f816 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80063ba:	f000 fb47 	bl	8006a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063be:	2360      	movs	r3, #96	; 0x60
 80063c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	2208      	movs	r2, #8
 80063d2:	4619      	mov	r1, r3
 80063d4:	480c      	ldr	r0, [pc, #48]	; (8006408 <MX_TIM4_Init+0xc0>)
 80063d6:	f008 fc9f 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80063e0:	f000 fb34 	bl	8006a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	220c      	movs	r2, #12
 80063e8:	4619      	mov	r1, r3
 80063ea:	4807      	ldr	r0, [pc, #28]	; (8006408 <MX_TIM4_Init+0xc0>)
 80063ec:	f008 fc94 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80063f6:	f000 fb29 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80063fa:	4803      	ldr	r0, [pc, #12]	; (8006408 <MX_TIM4_Init+0xc0>)
 80063fc:	f000 ff16 	bl	800722c <HAL_TIM_MspPostInit>

}
 8006400:	bf00      	nop
 8006402:	3728      	adds	r7, #40	; 0x28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	2004373c 	.word	0x2004373c
 800640c:	40000800 	.word	0x40000800

08006410 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006416:	463b      	mov	r3, r7
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <MX_TIM6_Init+0x64>)
 8006420:	4a15      	ldr	r2, [pc, #84]	; (8006478 <MX_TIM6_Init+0x68>)
 8006422:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <MX_TIM6_Init+0x64>)
 8006426:	2259      	movs	r2, #89	; 0x59
 8006428:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <MX_TIM6_Init+0x64>)
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006430:	4b10      	ldr	r3, [pc, #64]	; (8006474 <MX_TIM6_Init+0x64>)
 8006432:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006436:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <MX_TIM6_Init+0x64>)
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800643e:	480d      	ldr	r0, [pc, #52]	; (8006474 <MX_TIM6_Init+0x64>)
 8006440:	f008 f9e0 	bl	800e804 <HAL_TIM_Base_Init>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800644a:	f000 faff 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800644e:	2300      	movs	r3, #0
 8006450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006456:	463b      	mov	r3, r7
 8006458:	4619      	mov	r1, r3
 800645a:	4806      	ldr	r0, [pc, #24]	; (8006474 <MX_TIM6_Init+0x64>)
 800645c:	f008 ffc0 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006466:	f000 faf1 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200439d8 	.word	0x200439d8
 8006478:	40001000 	.word	0x40001000

0800647c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006482:	463b      	mov	r3, r7
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <MX_TIM7_Init+0x60>)
 800648c:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <MX_TIM7_Init+0x64>)
 800648e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <MX_TIM7_Init+0x60>)
 8006492:	22b3      	movs	r2, #179	; 0xb3
 8006494:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <MX_TIM7_Init+0x60>)
 8006498:	2200      	movs	r2, #0
 800649a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800649c:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <MX_TIM7_Init+0x60>)
 800649e:	2231      	movs	r2, #49	; 0x31
 80064a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064a2:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <MX_TIM7_Init+0x60>)
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80064a8:	480c      	ldr	r0, [pc, #48]	; (80064dc <MX_TIM7_Init+0x60>)
 80064aa:	f008 f9ab 	bl	800e804 <HAL_TIM_Base_Init>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80064b4:	f000 faca 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064b8:	2300      	movs	r3, #0
 80064ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80064c0:	463b      	mov	r3, r7
 80064c2:	4619      	mov	r1, r3
 80064c4:	4805      	ldr	r0, [pc, #20]	; (80064dc <MX_TIM7_Init+0x60>)
 80064c6:	f008 ff8b 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80064d0:	f000 fabc 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20043b7c 	.word	0x20043b7c
 80064e0:	40001400 	.word	0x40001400

080064e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	; 0x30
 80064e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f00e fdcf 	bl	8015096 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <MX_TIM8_Init+0xa8>)
 8006502:	4a23      	ldr	r2, [pc, #140]	; (8006590 <MX_TIM8_Init+0xac>)
 8006504:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006506:	4b21      	ldr	r3, [pc, #132]	; (800658c <MX_TIM8_Init+0xa8>)
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <MX_TIM8_Init+0xa8>)
 800650e:	2210      	movs	r2, #16
 8006510:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <MX_TIM8_Init+0xa8>)
 8006514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006518:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <MX_TIM8_Init+0xa8>)
 800651c:	2200      	movs	r2, #0
 800651e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006520:	4b1a      	ldr	r3, [pc, #104]	; (800658c <MX_TIM8_Init+0xa8>)
 8006522:	2200      	movs	r2, #0
 8006524:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006526:	4b19      	ldr	r3, [pc, #100]	; (800658c <MX_TIM8_Init+0xa8>)
 8006528:	2200      	movs	r2, #0
 800652a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800652c:	2303      	movs	r3, #3
 800652e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006540:	2300      	movs	r3, #0
 8006542:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006544:	2301      	movs	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006548:	2300      	movs	r3, #0
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	4619      	mov	r1, r3
 8006556:	480d      	ldr	r0, [pc, #52]	; (800658c <MX_TIM8_Init+0xa8>)
 8006558:	f008 fa0c 	bl	800e974 <HAL_TIM_Encoder_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006562:	f000 fa73 	bl	8006a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4806      	ldr	r0, [pc, #24]	; (800658c <MX_TIM8_Init+0xa8>)
 8006574:	f008 ff34 	bl	800f3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800657e:	f000 fa65 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006582:	bf00      	nop
 8006584:	3730      	adds	r7, #48	; 0x30
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200436fc 	.word	0x200436fc
 8006590:	40010400 	.word	0x40010400

08006594 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	609a      	str	r2, [r3, #8]
 80065a4:	60da      	str	r2, [r3, #12]
 80065a6:	611a      	str	r2, [r3, #16]
 80065a8:	615a      	str	r2, [r3, #20]
 80065aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065ac:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <MX_TIM10_Init+0x94>)
 80065ae:	4a1f      	ldr	r2, [pc, #124]	; (800662c <MX_TIM10_Init+0x98>)
 80065b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <MX_TIM10_Init+0x94>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <MX_TIM10_Init+0x94>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <MX_TIM10_Init+0x94>)
 80065c0:	f242 3227 	movw	r2, #8999	; 0x2327
 80065c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065c6:	4b18      	ldr	r3, [pc, #96]	; (8006628 <MX_TIM10_Init+0x94>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <MX_TIM10_Init+0x94>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80065d2:	4815      	ldr	r0, [pc, #84]	; (8006628 <MX_TIM10_Init+0x94>)
 80065d4:	f008 f916 	bl	800e804 <HAL_TIM_Base_Init>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065de:	f000 fa35 	bl	8006a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80065e2:	4811      	ldr	r0, [pc, #68]	; (8006628 <MX_TIM10_Init+0x94>)
 80065e4:	f008 f95d 	bl	800e8a2 <HAL_TIM_PWM_Init>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065ee:	f000 fa2d 	bl	8006a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065f2:	2360      	movs	r3, #96	; 0x60
 80065f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	2200      	movs	r2, #0
 8006606:	4619      	mov	r1, r3
 8006608:	4807      	ldr	r0, [pc, #28]	; (8006628 <MX_TIM10_Init+0x94>)
 800660a:	f008 fb85 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006614:	f000 fa1a 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006618:	4803      	ldr	r0, [pc, #12]	; (8006628 <MX_TIM10_Init+0x94>)
 800661a:	f000 fe07 	bl	800722c <HAL_TIM_MspPostInit>

}
 800661e:	bf00      	nop
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20043818 	.word	0x20043818
 800662c:	40014400 	.word	0x40014400

08006630 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	611a      	str	r2, [r3, #16]
 8006644:	615a      	str	r2, [r3, #20]
 8006646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006648:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <MX_TIM11_Init+0x94>)
 800664a:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <MX_TIM11_Init+0x98>)
 800664c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <MX_TIM11_Init+0x94>)
 8006650:	2201      	movs	r2, #1
 8006652:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <MX_TIM11_Init+0x94>)
 8006656:	2200      	movs	r2, #0
 8006658:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800665a:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <MX_TIM11_Init+0x94>)
 800665c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006660:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <MX_TIM11_Init+0x94>)
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <MX_TIM11_Init+0x94>)
 800666a:	2200      	movs	r2, #0
 800666c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800666e:	4815      	ldr	r0, [pc, #84]	; (80066c4 <MX_TIM11_Init+0x94>)
 8006670:	f008 f8c8 	bl	800e804 <HAL_TIM_Base_Init>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800667a:	f000 f9e7 	bl	8006a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800667e:	4811      	ldr	r0, [pc, #68]	; (80066c4 <MX_TIM11_Init+0x94>)
 8006680:	f008 f90f 	bl	800e8a2 <HAL_TIM_PWM_Init>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800668a:	f000 f9df 	bl	8006a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800668e:	2360      	movs	r3, #96	; 0x60
 8006690:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	2200      	movs	r2, #0
 80066a2:	4619      	mov	r1, r3
 80066a4:	4807      	ldr	r0, [pc, #28]	; (80066c4 <MX_TIM11_Init+0x94>)
 80066a6:	f008 fb37 	bl	800ed18 <HAL_TIM_PWM_ConfigChannel>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80066b0:	f000 f9cc 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80066b4:	4803      	ldr	r0, [pc, #12]	; (80066c4 <MX_TIM11_Init+0x94>)
 80066b6:	f000 fdb9 	bl	800722c <HAL_TIM_MspPostInit>

}
 80066ba:	bf00      	nop
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20043938 	.word	0x20043938
 80066c8:	40014800 	.word	0x40014800

080066cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80066d0:	4b0e      	ldr	r3, [pc, #56]	; (800670c <MX_TIM13_Init+0x40>)
 80066d2:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <MX_TIM13_Init+0x44>)
 80066d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <MX_TIM13_Init+0x40>)
 80066d8:	2259      	movs	r2, #89	; 0x59
 80066da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <MX_TIM13_Init+0x40>)
 80066de:	2200      	movs	r2, #0
 80066e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80066e2:	4b0a      	ldr	r3, [pc, #40]	; (800670c <MX_TIM13_Init+0x40>)
 80066e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80066e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <MX_TIM13_Init+0x40>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <MX_TIM13_Init+0x40>)
 80066f2:	2280      	movs	r2, #128	; 0x80
 80066f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80066f6:	4805      	ldr	r0, [pc, #20]	; (800670c <MX_TIM13_Init+0x40>)
 80066f8:	f008 f884 	bl	800e804 <HAL_TIM_Base_Init>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006702:	f000 f9a3 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006706:	bf00      	nop
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200438f8 	.word	0x200438f8
 8006710:	40001c00 	.word	0x40001c00

08006714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 800671a:	4a12      	ldr	r2, [pc, #72]	; (8006764 <MX_USART2_UART_Init+0x50>)
 800671c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 8006720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 8006728:	2200      	movs	r2, #0
 800672a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 800672e:	2200      	movs	r2, #0
 8006730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006732:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 8006734:	2200      	movs	r2, #0
 8006736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 800673a:	220c      	movs	r2, #12
 800673c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 8006740:	2200      	movs	r2, #0
 8006742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 8006746:	2200      	movs	r2, #0
 8006748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800674a:	4805      	ldr	r0, [pc, #20]	; (8006760 <MX_USART2_UART_Init+0x4c>)
 800674c:	f008 ff2a 	bl	800f5a4 <HAL_UART_Init>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006756:	f000 f979 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20043adc 	.word	0x20043adc
 8006764:	40004400 	.word	0x40004400

08006768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <MX_DMA_Init+0x5c>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <MX_DMA_Init+0x5c>)
 8006778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800677c:	6313      	str	r3, [r2, #48]	; 0x30
 800677e:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <MX_DMA_Init+0x5c>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006786:	607b      	str	r3, [r7, #4]
 8006788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800678a:	2200      	movs	r2, #0
 800678c:	2100      	movs	r1, #0
 800678e:	203a      	movs	r0, #58	; 0x3a
 8006790:	f003 fc03 	bl	8009f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006794:	203a      	movs	r0, #58	; 0x3a
 8006796:	f003 fc1c 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	203b      	movs	r0, #59	; 0x3b
 80067a0:	f003 fbfb 	bl	8009f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80067a4:	203b      	movs	r0, #59	; 0x3b
 80067a6:	f003 fc14 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	2045      	movs	r0, #69	; 0x45
 80067b0:	f003 fbf3 	bl	8009f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80067b4:	2045      	movs	r0, #69	; 0x45
 80067b6:	f003 fc0c 	bl	8009fd2 <HAL_NVIC_EnableIRQ>

}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800

080067c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	; 0x30
 80067cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ce:	f107 031c 	add.w	r3, r7, #28
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	609a      	str	r2, [r3, #8]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	4b94      	ldr	r3, [pc, #592]	; (8006a34 <MX_GPIO_Init+0x26c>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	4a93      	ldr	r2, [pc, #588]	; (8006a34 <MX_GPIO_Init+0x26c>)
 80067e8:	f043 0310 	orr.w	r3, r3, #16
 80067ec:	6313      	str	r3, [r2, #48]	; 0x30
 80067ee:	4b91      	ldr	r3, [pc, #580]	; (8006a34 <MX_GPIO_Init+0x26c>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	4b8d      	ldr	r3, [pc, #564]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4a8c      	ldr	r2, [pc, #560]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	6313      	str	r3, [r2, #48]	; 0x30
 800680a:	4b8a      	ldr	r3, [pc, #552]	; (8006a34 <MX_GPIO_Init+0x26c>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	4b86      	ldr	r3, [pc, #536]	; (8006a34 <MX_GPIO_Init+0x26c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	4a85      	ldr	r2, [pc, #532]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	6313      	str	r3, [r2, #48]	; 0x30
 8006826:	4b83      	ldr	r3, [pc, #524]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	4b7f      	ldr	r3, [pc, #508]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	4a7e      	ldr	r2, [pc, #504]	; (8006a34 <MX_GPIO_Init+0x26c>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6313      	str	r3, [r2, #48]	; 0x30
 8006842:	4b7c      	ldr	r3, [pc, #496]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	4b78      	ldr	r3, [pc, #480]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	4a77      	ldr	r2, [pc, #476]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	6313      	str	r3, [r2, #48]	; 0x30
 800685e:	4b75      	ldr	r3, [pc, #468]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	4b71      	ldr	r3, [pc, #452]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	4a70      	ldr	r2, [pc, #448]	; (8006a34 <MX_GPIO_Init+0x26c>)
 8006874:	f043 0308 	orr.w	r3, r3, #8
 8006878:	6313      	str	r3, [r2, #48]	; 0x30
 800687a:	4b6e      	ldr	r3, [pc, #440]	; (8006a34 <MX_GPIO_Init+0x26c>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006886:	2200      	movs	r2, #0
 8006888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800688c:	486a      	ldr	r0, [pc, #424]	; (8006a38 <MX_GPIO_Init+0x270>)
 800688e:	f004 f919 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006892:	2200      	movs	r2, #0
 8006894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006898:	4868      	ldr	r0, [pc, #416]	; (8006a3c <MX_GPIO_Init+0x274>)
 800689a:	f004 f913 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068a4:	4866      	ldr	r0, [pc, #408]	; (8006a40 <MX_GPIO_Init+0x278>)
 80068a6:	f004 f90d 	bl	800aac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068aa:	2200      	movs	r2, #0
 80068ac:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80068b0:	4864      	ldr	r0, [pc, #400]	; (8006a44 <MX_GPIO_Init+0x27c>)
 80068b2:	f004 f907 	bl	800aac4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068b6:	2304      	movs	r3, #4
 80068b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ba:	2300      	movs	r3, #0
 80068bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	4619      	mov	r1, r3
 80068c8:	485b      	ldr	r0, [pc, #364]	; (8006a38 <MX_GPIO_Init+0x270>)
 80068ca:	f003 ff39 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80068ce:	230f      	movs	r3, #15
 80068d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068d2:	2303      	movs	r3, #3
 80068d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068da:	f107 031c 	add.w	r3, r7, #28
 80068de:	4619      	mov	r1, r3
 80068e0:	4859      	ldr	r0, [pc, #356]	; (8006a48 <MX_GPIO_Init+0x280>)
 80068e2:	f003 ff2d 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068e6:	23e1      	movs	r3, #225	; 0xe1
 80068e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068ea:	2303      	movs	r3, #3
 80068ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f2:	f107 031c 	add.w	r3, r7, #28
 80068f6:	4619      	mov	r1, r3
 80068f8:	4852      	ldr	r0, [pc, #328]	; (8006a44 <MX_GPIO_Init+0x27c>)
 80068fa:	f003 ff21 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068fe:	2303      	movs	r3, #3
 8006900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006902:	2303      	movs	r3, #3
 8006904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800690a:	f107 031c 	add.w	r3, r7, #28
 800690e:	4619      	mov	r1, r3
 8006910:	484a      	ldr	r0, [pc, #296]	; (8006a3c <MX_GPIO_Init+0x274>)
 8006912:	f003 ff15 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006916:	2304      	movs	r3, #4
 8006918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800691a:	2300      	movs	r3, #0
 800691c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800691e:	2301      	movs	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006922:	f107 031c 	add.w	r3, r7, #28
 8006926:	4619      	mov	r1, r3
 8006928:	4844      	ldr	r0, [pc, #272]	; (8006a3c <MX_GPIO_Init+0x274>)
 800692a:	f003 ff09 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800692e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006934:	2300      	movs	r3, #0
 8006936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006938:	2301      	movs	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800693c:	f107 031c 	add.w	r3, r7, #28
 8006940:	4619      	mov	r1, r3
 8006942:	483d      	ldr	r0, [pc, #244]	; (8006a38 <MX_GPIO_Init+0x270>)
 8006944:	f003 fefc 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800694c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800694e:	2301      	movs	r3, #1
 8006950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006956:	2300      	movs	r3, #0
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800695a:	f107 031c 	add.w	r3, r7, #28
 800695e:	4619      	mov	r1, r3
 8006960:	4835      	ldr	r0, [pc, #212]	; (8006a38 <MX_GPIO_Init+0x270>)
 8006962:	f003 feed 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800696a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800696c:	2301      	movs	r3, #1
 800696e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006970:	2300      	movs	r3, #0
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006974:	2300      	movs	r3, #0
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006978:	f107 031c 	add.w	r3, r7, #28
 800697c:	4619      	mov	r1, r3
 800697e:	482f      	ldr	r0, [pc, #188]	; (8006a3c <MX_GPIO_Init+0x274>)
 8006980:	f003 fede 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	4619      	mov	r1, r3
 8006998:	4829      	ldr	r0, [pc, #164]	; (8006a40 <MX_GPIO_Init+0x278>)
 800699a:	f003 fed1 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800699e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a4:	2301      	movs	r3, #1
 80069a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069b0:	f107 031c 	add.w	r3, r7, #28
 80069b4:	4619      	mov	r1, r3
 80069b6:	4822      	ldr	r0, [pc, #136]	; (8006a40 <MX_GPIO_Init+0x278>)
 80069b8:	f003 fec2 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069c2:	2301      	movs	r3, #1
 80069c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069c6:	2301      	movs	r3, #1
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ca:	2300      	movs	r3, #0
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ce:	f107 031c 	add.w	r3, r7, #28
 80069d2:	4619      	mov	r1, r3
 80069d4:	481a      	ldr	r0, [pc, #104]	; (8006a40 <MX_GPIO_Init+0x278>)
 80069d6:	f003 feb3 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80069da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80069de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e0:	2301      	movs	r3, #1
 80069e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	2300      	movs	r3, #0
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ec:	f107 031c 	add.w	r3, r7, #28
 80069f0:	4619      	mov	r1, r3
 80069f2:	4814      	ldr	r0, [pc, #80]	; (8006a44 <MX_GPIO_Init+0x27c>)
 80069f4:	f003 fea4 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80069f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069fe:	2300      	movs	r3, #0
 8006a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a06:	f107 031c 	add.w	r3, r7, #28
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	480d      	ldr	r0, [pc, #52]	; (8006a44 <MX_GPIO_Init+0x27c>)
 8006a0e:	f003 fe97 	bl	800a740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006a12:	239b      	movs	r3, #155	; 0x9b
 8006a14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a16:	2300      	movs	r3, #0
 8006a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a1e:	f107 031c 	add.w	r3, r7, #28
 8006a22:	4619      	mov	r1, r3
 8006a24:	4806      	ldr	r0, [pc, #24]	; (8006a40 <MX_GPIO_Init+0x278>)
 8006a26:	f003 fe8b 	bl	800a740 <HAL_GPIO_Init>

}
 8006a2a:	bf00      	nop
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40023800 	.word	0x40023800
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40020400 	.word	0x40020400
 8006a40:	40020c00 	.word	0x40020c00
 8006a44:	40020000 	.word	0x40020000
 8006a48:	40020800 	.word	0x40020800

08006a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a52:	e7fe      	b.n	8006a52 <Error_Handler+0x6>

08006a54 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a58:	bf00      	nop
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a78:	6453      	str	r3, [r2, #68]	; 0x44
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	4a08      	ldr	r2, [pc, #32]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6413      	str	r3, [r2, #64]	; 0x40
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <HAL_MspInit+0x4c>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800

08006ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08c      	sub	sp, #48	; 0x30
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006abc:	f107 031c 	add.w	r3, r7, #28
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a4a      	ldr	r2, [pc, #296]	; (8006bfc <HAL_ADC_MspInit+0x148>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f040 808e 	bne.w	8006bf4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	4a47      	ldr	r2, [pc, #284]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ae8:	4b45      	ldr	r3, [pc, #276]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	4a40      	ldr	r2, [pc, #256]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006afe:	f043 0304 	orr.w	r3, r3, #4
 8006b02:	6313      	str	r3, [r2, #48]	; 0x30
 8006b04:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b10:	2300      	movs	r3, #0
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	4b3a      	ldr	r3, [pc, #232]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	4a39      	ldr	r2, [pc, #228]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b20:	4b37      	ldr	r3, [pc, #220]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	4a32      	ldr	r2, [pc, #200]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b36:	f043 0302 	orr.w	r3, r3, #2
 8006b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3c:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <HAL_ADC_MspInit+0x14c>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b48:	230f      	movs	r3, #15
 8006b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b54:	f107 031c 	add.w	r3, r7, #28
 8006b58:	4619      	mov	r1, r3
 8006b5a:	482a      	ldr	r0, [pc, #168]	; (8006c04 <HAL_ADC_MspInit+0x150>)
 8006b5c:	f003 fdf0 	bl	800a740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b60:	23ff      	movs	r3, #255	; 0xff
 8006b62:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b64:	2303      	movs	r3, #3
 8006b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6c:	f107 031c 	add.w	r3, r7, #28
 8006b70:	4619      	mov	r1, r3
 8006b72:	4825      	ldr	r0, [pc, #148]	; (8006c08 <HAL_ADC_MspInit+0x154>)
 8006b74:	f003 fde4 	bl	800a740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b84:	f107 031c 	add.w	r3, r7, #28
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4820      	ldr	r0, [pc, #128]	; (8006c0c <HAL_ADC_MspInit+0x158>)
 8006b8c:	f003 fdd8 	bl	800a740 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006b90:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006b92:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <HAL_ADC_MspInit+0x160>)
 8006b94:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006b96:	4b1e      	ldr	r3, [pc, #120]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b9c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b9e:	4b1c      	ldr	r3, [pc, #112]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006baa:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bb0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bb2:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bc0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bc8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bca:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bd0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006bd8:	480d      	ldr	r0, [pc, #52]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bda:	f003 fa15 	bl	800a008 <HAL_DMA_Init>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006be4:	f7ff ff32 	bl	8006a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <HAL_ADC_MspInit+0x15c>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bf4:	bf00      	nop
 8006bf6:	3730      	adds	r7, #48	; 0x30
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40012100 	.word	0x40012100
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40020800 	.word	0x40020800
 8006c08:	40020000 	.word	0x40020000
 8006c0c:	40020400 	.word	0x40020400
 8006c10:	20043b1c 	.word	0x20043b1c
 8006c14:	40026440 	.word	0x40026440

08006c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08c      	sub	sp, #48	; 0x30
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c20:	f107 031c 	add.w	r3, r7, #28
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <HAL_I2C_MspInit+0xe8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d12c      	bne.n	8006c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c56:	23c0      	movs	r3, #192	; 0xc0
 8006c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c5a:	2312      	movs	r3, #18
 8006c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c62:	2303      	movs	r3, #3
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c66:	2304      	movs	r3, #4
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c6a:	f107 031c 	add.w	r3, r7, #28
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4825      	ldr	r0, [pc, #148]	; (8006d08 <HAL_I2C_MspInit+0xf0>)
 8006c72:	f003 fd65 	bl	800a740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c84:	6413      	str	r3, [r2, #64]	; 0x40
 8006c86:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c92:	e031      	b.n	8006cf8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <HAL_I2C_MspInit+0xf4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d12c      	bne.n	8006cf8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	4b18      	ldr	r3, [pc, #96]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	6313      	str	r3, [r2, #48]	; 0x30
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cc0:	2312      	movs	r3, #18
 8006cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ccc:	2304      	movs	r3, #4
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd0:	f107 031c 	add.w	r3, r7, #28
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	480c      	ldr	r0, [pc, #48]	; (8006d08 <HAL_I2C_MspInit+0xf0>)
 8006cd8:	f003 fd32 	bl	800a740 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cea:	6413      	str	r3, [r2, #64]	; 0x40
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_I2C_MspInit+0xec>)
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	3730      	adds	r7, #48	; 0x30
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40005400 	.word	0x40005400
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40020400 	.word	0x40020400
 8006d0c:	40005800 	.word	0x40005800

08006d10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a69      	ldr	r2, [pc, #420]	; (8006ed4 <HAL_SD_MspInit+0x1c4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f040 80cb 	bne.w	8006eca <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	4b67      	ldr	r3, [pc, #412]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3c:	4a66      	ldr	r2, [pc, #408]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d42:	6453      	str	r3, [r2, #68]	; 0x44
 8006d44:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	4b60      	ldr	r3, [pc, #384]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	4a5f      	ldr	r2, [pc, #380]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d5a:	f043 0304 	orr.w	r3, r3, #4
 8006d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d60:	4b5d      	ldr	r3, [pc, #372]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	4b59      	ldr	r3, [pc, #356]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	4a58      	ldr	r2, [pc, #352]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d76:	f043 0308 	orr.w	r3, r3, #8
 8006d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7c:	4b56      	ldr	r3, [pc, #344]	; (8006ed8 <HAL_SD_MspInit+0x1c8>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d96:	2303      	movs	r3, #3
 8006d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	4619      	mov	r1, r3
 8006da4:	484d      	ldr	r0, [pc, #308]	; (8006edc <HAL_SD_MspInit+0x1cc>)
 8006da6:	f003 fccb 	bl	800a740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006daa:	2304      	movs	r3, #4
 8006dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dae:	2302      	movs	r3, #2
 8006db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db6:	2303      	movs	r3, #3
 8006db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006dba:	230c      	movs	r3, #12
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dbe:	f107 0314 	add.w	r3, r7, #20
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4846      	ldr	r0, [pc, #280]	; (8006ee0 <HAL_SD_MspInit+0x1d0>)
 8006dc6:	f003 fcbb 	bl	800a740 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006dca:	4b46      	ldr	r3, [pc, #280]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006dcc:	4a46      	ldr	r2, [pc, #280]	; (8006ee8 <HAL_SD_MspInit+0x1d8>)
 8006dce:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006dd0:	4b44      	ldr	r3, [pc, #272]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dd6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dd8:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dde:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006de4:	4b3f      	ldr	r3, [pc, #252]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dea:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dec:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006df2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006df4:	4b3b      	ldr	r3, [pc, #236]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dfa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006dfc:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006dfe:	2220      	movs	r2, #32
 8006e00:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e02:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e08:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e12:	2203      	movs	r2, #3
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e16:	4b33      	ldr	r3, [pc, #204]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e1e:	4b31      	ldr	r3, [pc, #196]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e26:	482f      	ldr	r0, [pc, #188]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e28:	f003 f8ee 	bl	800a008 <HAL_DMA_Init>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006e32:	f7ff fe0b 	bl	8006a4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e3c:	4a29      	ldr	r2, [pc, #164]	; (8006ee4 <HAL_SD_MspInit+0x1d4>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e42:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <HAL_SD_MspInit+0x1e0>)
 8006e46:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e48:	4b28      	ldr	r3, [pc, #160]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e4e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e50:	4b26      	ldr	r3, [pc, #152]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e56:	4b25      	ldr	r3, [pc, #148]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e5c:	4b23      	ldr	r3, [pc, #140]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e62:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e6a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e6c:	4b1f      	ldr	r3, [pc, #124]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e72:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e74:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e76:	2220      	movs	r2, #32
 8006e78:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e80:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e82:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e84:	2204      	movs	r2, #4
 8006e86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e88:	4b18      	ldr	r3, [pc, #96]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006e8e:	4b17      	ldr	r3, [pc, #92]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e96:	4b15      	ldr	r3, [pc, #84]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006e98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006e9e:	4813      	ldr	r0, [pc, #76]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006ea0:	f003 f8b2 	bl	800a008 <HAL_DMA_Init>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006eaa:	f7ff fdcf 	bl	8006a4c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a0e      	ldr	r2, [pc, #56]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	; (8006eec <HAL_SD_MspInit+0x1dc>)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	2031      	movs	r0, #49	; 0x31
 8006ec0:	f003 f86b 	bl	8009f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006ec4:	2031      	movs	r0, #49	; 0x31
 8006ec6:	f003 f884 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006eca:	bf00      	nop
 8006ecc:	3728      	adds	r7, #40	; 0x28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	40020800 	.word	0x40020800
 8006ee0:	40020c00 	.word	0x40020c00
 8006ee4:	20043644 	.word	0x20043644
 8006ee8:	40026458 	.word	0x40026458
 8006eec:	20043978 	.word	0x20043978
 8006ef0:	400264a0 	.word	0x400264a0

08006ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <HAL_SPI_MspInit+0x84>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d12c      	bne.n	8006f70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	4a17      	ldr	r2, [pc, #92]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f24:	6413      	str	r3, [r2, #64]	; 0x40
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	6313      	str	r3, [r2, #48]	; 0x30
 8006f42:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <HAL_SPI_MspInit+0x88>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f54:	2302      	movs	r3, #2
 8006f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f60:	2305      	movs	r3, #5
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4805      	ldr	r0, [pc, #20]	; (8006f80 <HAL_SPI_MspInit+0x8c>)
 8006f6c:	f003 fbe8 	bl	800a740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f70:	bf00      	nop
 8006f72:	3728      	adds	r7, #40	; 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40003800 	.word	0x40003800
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	40020400 	.word	0x40020400

08006f84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08c      	sub	sp, #48	; 0x30
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8c:	f107 031c 	add.w	r3, r7, #28
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2d      	ldr	r2, [pc, #180]	; (8007058 <HAL_TIM_PWM_MspInit+0xd4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12d      	bne.n	8007002 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	4b2c      	ldr	r3, [pc, #176]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	4a2b      	ldr	r2, [pc, #172]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	4b25      	ldr	r3, [pc, #148]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	4a24      	ldr	r2, [pc, #144]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fcc:	f043 0310 	orr.w	r3, r3, #16
 8006fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd2:	4b22      	ldr	r3, [pc, #136]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006fde:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ff4:	f107 031c 	add.w	r3, r7, #28
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4819      	ldr	r0, [pc, #100]	; (8007060 <HAL_TIM_PWM_MspInit+0xdc>)
 8006ffc:	f003 fba0 	bl	800a740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007000:	e026      	b.n	8007050 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_TIM_PWM_MspInit+0xe0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d10e      	bne.n	800702a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8007016:	f043 0302 	orr.w	r3, r3, #2
 800701a:	6413      	str	r3, [r2, #64]	; 0x40
 800701c:	4b0f      	ldr	r3, [pc, #60]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693b      	ldr	r3, [r7, #16]
}
 8007028:	e012      	b.n	8007050 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a0e      	ldr	r2, [pc, #56]	; (8007068 <HAL_TIM_PWM_MspInit+0xe4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d10d      	bne.n	8007050 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4b08      	ldr	r3, [pc, #32]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	4a07      	ldr	r2, [pc, #28]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	6413      	str	r3, [r2, #64]	; 0x40
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <HAL_TIM_PWM_MspInit+0xd8>)
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	3730      	adds	r7, #48	; 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40010000 	.word	0x40010000
 800705c:	40023800 	.word	0x40023800
 8007060:	40021000 	.word	0x40021000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800

0800706c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a3e      	ldr	r2, [pc, #248]	; (8007174 <HAL_TIM_Base_MspInit+0x108>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d116      	bne.n	80070ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800707e:	2300      	movs	r3, #0
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	4a3c      	ldr	r2, [pc, #240]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007088:	f043 0310 	orr.w	r3, r3, #16
 800708c:	6413      	str	r3, [r2, #64]	; 0x40
 800708e:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800709a:	2200      	movs	r2, #0
 800709c:	2101      	movs	r1, #1
 800709e:	2036      	movs	r0, #54	; 0x36
 80070a0:	f002 ff7b 	bl	8009f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070a4:	2036      	movs	r0, #54	; 0x36
 80070a6:	f002 ff94 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80070aa:	e05e      	b.n	800716a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a32      	ldr	r2, [pc, #200]	; (800717c <HAL_TIM_Base_MspInit+0x110>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d116      	bne.n	80070e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	4b2f      	ldr	r3, [pc, #188]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4a2e      	ldr	r2, [pc, #184]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40
 80070c6:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	2037      	movs	r0, #55	; 0x37
 80070d8:	f002 ff5f 	bl	8009f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070dc:	2037      	movs	r0, #55	; 0x37
 80070de:	f002 ff78 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
}
 80070e2:	e042      	b.n	800716a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a25      	ldr	r2, [pc, #148]	; (8007180 <HAL_TIM_Base_MspInit+0x114>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d10e      	bne.n	800710c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	4b21      	ldr	r3, [pc, #132]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	4a20      	ldr	r2, [pc, #128]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 80070f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fc:	6453      	str	r3, [r2, #68]	; 0x44
 80070fe:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]
}
 800710a:	e02e      	b.n	800716a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_TIM_Base_MspInit+0x118>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10e      	bne.n	8007134 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007124:	6453      	str	r3, [r2, #68]	; 0x44
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	693b      	ldr	r3, [r7, #16]
}
 8007132:	e01a      	b.n	800716a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a13      	ldr	r2, [pc, #76]	; (8007188 <HAL_TIM_Base_MspInit+0x11c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d115      	bne.n	800716a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a0c      	ldr	r2, [pc, #48]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
 800714e:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <HAL_TIM_Base_MspInit+0x10c>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	202c      	movs	r0, #44	; 0x2c
 8007160:	f002 ff1b 	bl	8009f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007164:	202c      	movs	r0, #44	; 0x2c
 8007166:	f002 ff34 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
}
 800716a:	bf00      	nop
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40001000 	.word	0x40001000
 8007178:	40023800 	.word	0x40023800
 800717c:	40001400 	.word	0x40001400
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800
 8007188:	40001c00 	.word	0x40001c00

0800718c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	; 0x28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007194:	f107 0314 	add.w	r3, r7, #20
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_TIM_Encoder_MspInit+0x94>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d133      	bne.n	8007216 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071b8:	f043 0302 	orr.w	r3, r3, #2
 80071bc:	6453      	str	r3, [r2, #68]	; 0x44
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a14      	ldr	r2, [pc, #80]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071d4:	f043 0304 	orr.w	r3, r3, #4
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <HAL_TIM_Encoder_MspInit+0x98>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071e6:	23c0      	movs	r3, #192	; 0xc0
 80071e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ea:	2302      	movs	r3, #2
 80071ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f2:	2300      	movs	r3, #0
 80071f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80071f6:	2303      	movs	r3, #3
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071fa:	f107 0314 	add.w	r3, r7, #20
 80071fe:	4619      	mov	r1, r3
 8007200:	4809      	ldr	r0, [pc, #36]	; (8007228 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007202:	f003 fa9d 	bl	800a740 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007206:	2200      	movs	r2, #0
 8007208:	2100      	movs	r1, #0
 800720a:	202c      	movs	r0, #44	; 0x2c
 800720c:	f002 fec5 	bl	8009f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007210:	202c      	movs	r0, #44	; 0x2c
 8007212:	f002 fede 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007216:	bf00      	nop
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40010400 	.word	0x40010400
 8007224:	40023800 	.word	0x40023800
 8007228:	40020800 	.word	0x40020800

0800722c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007234:	f107 031c 	add.w	r3, r7, #28
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5c      	ldr	r2, [pc, #368]	; (80073bc <HAL_TIM_MspPostInit+0x190>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d11f      	bne.n	800728e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	4b5b      	ldr	r3, [pc, #364]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	4a5a      	ldr	r2, [pc, #360]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007258:	f043 0310 	orr.w	r3, r3, #16
 800725c:	6313      	str	r3, [r2, #48]	; 0x30
 800725e:	4b58      	ldr	r3, [pc, #352]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800726a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800726e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007270:	2302      	movs	r3, #2
 8007272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007274:	2300      	movs	r3, #0
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007278:	2300      	movs	r3, #0
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800727c:	2301      	movs	r3, #1
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007280:	f107 031c 	add.w	r3, r7, #28
 8007284:	4619      	mov	r1, r3
 8007286:	484f      	ldr	r0, [pc, #316]	; (80073c4 <HAL_TIM_MspPostInit+0x198>)
 8007288:	f003 fa5a 	bl	800a740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800728c:	e091      	b.n	80073b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a4d      	ldr	r2, [pc, #308]	; (80073c8 <HAL_TIM_MspPostInit+0x19c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d11e      	bne.n	80072d6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	4b48      	ldr	r3, [pc, #288]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	4a47      	ldr	r2, [pc, #284]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 80072a2:	f043 0302 	orr.w	r3, r3, #2
 80072a6:	6313      	str	r3, [r2, #48]	; 0x30
 80072a8:	4b45      	ldr	r3, [pc, #276]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072b4:	2330      	movs	r3, #48	; 0x30
 80072b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b8:	2302      	movs	r3, #2
 80072ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072c4:	2302      	movs	r3, #2
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072c8:	f107 031c 	add.w	r3, r7, #28
 80072cc:	4619      	mov	r1, r3
 80072ce:	483f      	ldr	r0, [pc, #252]	; (80073cc <HAL_TIM_MspPostInit+0x1a0>)
 80072d0:	f003 fa36 	bl	800a740 <HAL_GPIO_Init>
}
 80072d4:	e06d      	b.n	80073b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <HAL_TIM_MspPostInit+0x1a4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d11f      	bne.n	8007320 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	4a35      	ldr	r2, [pc, #212]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 80072ea:	f043 0308 	orr.w	r3, r3, #8
 80072ee:	6313      	str	r3, [r2, #48]	; 0x30
 80072f0:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80072fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007302:	2302      	movs	r3, #2
 8007304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007306:	2300      	movs	r3, #0
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800730a:	2300      	movs	r3, #0
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800730e:	2302      	movs	r3, #2
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007312:	f107 031c 	add.w	r3, r7, #28
 8007316:	4619      	mov	r1, r3
 8007318:	482e      	ldr	r0, [pc, #184]	; (80073d4 <HAL_TIM_MspPostInit+0x1a8>)
 800731a:	f003 fa11 	bl	800a740 <HAL_GPIO_Init>
}
 800731e:	e048      	b.n	80073b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <HAL_TIM_MspPostInit+0x1ac>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d11f      	bne.n	800736a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	4a23      	ldr	r2, [pc, #140]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	6313      	str	r3, [r2, #48]	; 0x30
 800733a:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800734a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734c:	2302      	movs	r3, #2
 800734e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007354:	2300      	movs	r3, #0
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007358:	2303      	movs	r3, #3
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735c:	f107 031c 	add.w	r3, r7, #28
 8007360:	4619      	mov	r1, r3
 8007362:	481a      	ldr	r0, [pc, #104]	; (80073cc <HAL_TIM_MspPostInit+0x1a0>)
 8007364:	f003 f9ec 	bl	800a740 <HAL_GPIO_Init>
}
 8007368:	e023      	b.n	80073b2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_TIM_MspPostInit+0x1b0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d11e      	bne.n	80073b2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007374:	2300      	movs	r3, #0
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	4a10      	ldr	r2, [pc, #64]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	6313      	str	r3, [r2, #48]	; 0x30
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <HAL_TIM_MspPostInit+0x194>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007396:	2302      	movs	r3, #2
 8007398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739e:	2300      	movs	r3, #0
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80073a2:	2303      	movs	r3, #3
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a6:	f107 031c 	add.w	r3, r7, #28
 80073aa:	4619      	mov	r1, r3
 80073ac:	4807      	ldr	r0, [pc, #28]	; (80073cc <HAL_TIM_MspPostInit+0x1a0>)
 80073ae:	f003 f9c7 	bl	800a740 <HAL_GPIO_Init>
}
 80073b2:	bf00      	nop
 80073b4:	3730      	adds	r7, #48	; 0x30
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40023800 	.word	0x40023800
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40020400 	.word	0x40020400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40020c00 	.word	0x40020c00
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800

080073e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	609a      	str	r2, [r3, #8]
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <HAL_UART_MspInit+0x84>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d12b      	bne.n	800745a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	4b18      	ldr	r3, [pc, #96]	; (8007468 <HAL_UART_MspInit+0x88>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	4a17      	ldr	r2, [pc, #92]	; (8007468 <HAL_UART_MspInit+0x88>)
 800740c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007410:	6413      	str	r3, [r2, #64]	; 0x40
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <HAL_UART_MspInit+0x88>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <HAL_UART_MspInit+0x88>)
 8007424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007426:	4a10      	ldr	r2, [pc, #64]	; (8007468 <HAL_UART_MspInit+0x88>)
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	6313      	str	r3, [r2, #48]	; 0x30
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_UART_MspInit+0x88>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800743a:	2360      	movs	r3, #96	; 0x60
 800743c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743e:	2302      	movs	r3, #2
 8007440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007446:	2303      	movs	r3, #3
 8007448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800744a:	2307      	movs	r3, #7
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800744e:	f107 0314 	add.w	r3, r7, #20
 8007452:	4619      	mov	r1, r3
 8007454:	4805      	ldr	r0, [pc, #20]	; (800746c <HAL_UART_MspInit+0x8c>)
 8007456:	f003 f973 	bl	800a740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800745a:	bf00      	nop
 800745c:	3728      	adds	r7, #40	; 0x28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40004400 	.word	0x40004400
 8007468:	40023800 	.word	0x40023800
 800746c:	40020c00 	.word	0x40020c00

08007470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <NMI_Handler+0x4>

08007476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800747a:	e7fe      	b.n	800747a <HardFault_Handler+0x4>

0800747c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007480:	e7fe      	b.n	8007480 <MemManage_Handler+0x4>

08007482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007482:	b480      	push	{r7}
 8007484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007486:	e7fe      	b.n	8007486 <BusFault_Handler+0x4>

08007488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800748c:	e7fe      	b.n	800748c <UsageFault_Handler+0x4>

0800748e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074aa:	b480      	push	{r7}
 80074ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074ae:	bf00      	nop
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074bc:	f002 f84c 	bl	8009558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80074c8:	4803      	ldr	r0, [pc, #12]	; (80074d8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80074ca:	f007 fb1c 	bl	800eb06 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80074ce:	4803      	ldr	r0, [pc, #12]	; (80074dc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80074d0:	f007 fb19 	bl	800eb06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80074d4:	bf00      	nop
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	200436fc 	.word	0x200436fc
 80074dc:	200438f8 	.word	0x200438f8

080074e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80074e4:	4802      	ldr	r0, [pc, #8]	; (80074f0 <SDIO_IRQHandler+0x10>)
 80074e6:	f005 fbb5 	bl	800cc54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20043a58 	.word	0x20043a58

080074f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <TIM6_DAC_IRQHandler+0x10>)
 80074fa:	f007 fb04 	bl	800eb06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200439d8 	.word	0x200439d8

08007508 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800750c:	4802      	ldr	r0, [pc, #8]	; (8007518 <TIM7_IRQHandler+0x10>)
 800750e:	f007 fafa 	bl	800eb06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20043b7c 	.word	0x20043b7c

0800751c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007520:	4802      	ldr	r0, [pc, #8]	; (800752c <DMA2_Stream2_IRQHandler+0x10>)
 8007522:	f002 fe99 	bl	800a258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20043b1c 	.word	0x20043b1c

08007530 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007534:	4802      	ldr	r0, [pc, #8]	; (8007540 <DMA2_Stream3_IRQHandler+0x10>)
 8007536:	f002 fe8f 	bl	800a258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800753a:	bf00      	nop
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20043644 	.word	0x20043644

08007544 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007548:	4802      	ldr	r0, [pc, #8]	; (8007554 <DMA2_Stream6_IRQHandler+0x10>)
 800754a:	f002 fe85 	bl	800a258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20043978 	.word	0x20043978

08007558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007560:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <_sbrk+0x5c>)
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <_sbrk+0x60>)
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800756c:	4b13      	ldr	r3, [pc, #76]	; (80075bc <_sbrk+0x64>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007574:	4b11      	ldr	r3, [pc, #68]	; (80075bc <_sbrk+0x64>)
 8007576:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <_sbrk+0x68>)
 8007578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800757a:	4b10      	ldr	r3, [pc, #64]	; (80075bc <_sbrk+0x64>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	d207      	bcs.n	8007598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007588:	f00d fd50 	bl	801502c <__errno>
 800758c:	4602      	mov	r2, r0
 800758e:	230c      	movs	r3, #12
 8007590:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	e009      	b.n	80075ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007598:	4b08      	ldr	r3, [pc, #32]	; (80075bc <_sbrk+0x64>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800759e:	4b07      	ldr	r3, [pc, #28]	; (80075bc <_sbrk+0x64>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	4a05      	ldr	r2, [pc, #20]	; (80075bc <_sbrk+0x64>)
 80075a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20050000 	.word	0x20050000
 80075b8:	00000800 	.word	0x00000800
 80075bc:	200002b8 	.word	0x200002b8
 80075c0:	20045cd0 	.word	0x20045cd0

080075c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075c8:	4b08      	ldr	r3, [pc, #32]	; (80075ec <SystemInit+0x28>)
 80075ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <SystemInit+0x28>)
 80075d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <SystemInit+0x28>)
 80075da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075de:	609a      	str	r2, [r3, #8]
#endif
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80075f0:	b598      	push	{r3, r4, r7, lr}
 80075f2:	af00      	add	r7, sp, #0
	lcd_init();
 80075f4:	f7f9 fd10 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80075f8:	483b      	ldr	r0, [pc, #236]	; (80076e8 <cppInit+0xf8>)
 80075fa:	f7fd fe53 	bl	80052a4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80075fe:	2064      	movs	r0, #100	; 0x64
 8007600:	f001 ffca 	bl	8009598 <HAL_Delay>
	power_sensor.updateValues();
 8007604:	4838      	ldr	r0, [pc, #224]	; (80076e8 <cppInit+0xf8>)
 8007606:	f7fd fe5b 	bl	80052c0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800760a:	f7f9 fd49 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800760e:	2100      	movs	r1, #0
 8007610:	2000      	movs	r0, #0
 8007612:	f7f9 fd55 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007616:	4835      	ldr	r0, [pc, #212]	; (80076ec <cppInit+0xfc>)
 8007618:	f7f9 fd7c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800761c:	2101      	movs	r1, #1
 800761e:	2000      	movs	r0, #0
 8007620:	f7f9 fd4e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007624:	4830      	ldr	r0, [pc, #192]	; (80076e8 <cppInit+0xf8>)
 8007626:	f7fd fe75 	bl	8005314 <_ZN11PowerSensor17getButteryVoltageEv>
 800762a:	ee10 3a10 	vmov	r3, s0
 800762e:	4618      	mov	r0, r3
 8007630:	f7f8 ffa2 	bl	8000578 <__aeabi_f2d>
 8007634:	4603      	mov	r3, r0
 8007636:	460c      	mov	r4, r1
 8007638:	461a      	mov	r2, r3
 800763a:	4623      	mov	r3, r4
 800763c:	482c      	ldr	r0, [pc, #176]	; (80076f0 <cppInit+0x100>)
 800763e:	f7f9 fd69 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007646:	f001 ffa7 	bl	8009598 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800764a:	482a      	ldr	r0, [pc, #168]	; (80076f4 <cppInit+0x104>)
 800764c:	f7fd f866 	bl	800471c <_ZN6Logger10sdCardInitEv>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <cppInit+0x76>
		led.fullColor('G');
 8007656:	2147      	movs	r1, #71	; 0x47
 8007658:	4827      	ldr	r0, [pc, #156]	; (80076f8 <cppInit+0x108>)
 800765a:	f7fa fd8b 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800765e:	2064      	movs	r0, #100	; 0x64
 8007660:	f001 ff9a 	bl	8009598 <HAL_Delay>
 8007664:	e006      	b.n	8007674 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007666:	2152      	movs	r1, #82	; 0x52
 8007668:	4823      	ldr	r0, [pc, #140]	; (80076f8 <cppInit+0x108>)
 800766a:	f7fa fd83 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800766e:	2064      	movs	r0, #100	; 0x64
 8007670:	f001 ff92 	bl	8009598 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007674:	4821      	ldr	r0, [pc, #132]	; (80076fc <cppInit+0x10c>)
 8007676:	f7fa fed9 	bl	800242c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800767a:	4821      	ldr	r0, [pc, #132]	; (8007700 <cppInit+0x110>)
 800767c:	f7fd fae4 	bl	8004c48 <_ZN5Motor4initEv>
	encoder.init();
 8007680:	4820      	ldr	r0, [pc, #128]	; (8007704 <cppInit+0x114>)
 8007682:	f7f9 fecf 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007686:	4820      	ldr	r0, [pc, #128]	; (8007708 <cppInit+0x118>)
 8007688:	f7fa fb32 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 800768c:	481f      	ldr	r0, [pc, #124]	; (800770c <cppInit+0x11c>)
 800768e:	f7fc f997 	bl	80039c0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007692:	481a      	ldr	r0, [pc, #104]	; (80076fc <cppInit+0x10c>)
 8007694:	f7fb f80a 	bl	80026ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800769c:	f001 ff7c 	bl	8009598 <HAL_Delay>

	led.fullColor('M');
 80076a0:	214d      	movs	r1, #77	; 0x4d
 80076a2:	4815      	ldr	r0, [pc, #84]	; (80076f8 <cppInit+0x108>)
 80076a4:	f7fa fd66 	bl	8002174 <_ZN3LED9fullColorEc>
	imu.calibration();
 80076a8:	4817      	ldr	r0, [pc, #92]	; (8007708 <cppInit+0x118>)
 80076aa:	f7fa fbeb 	bl	8001e84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80076ae:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007710 <cppInit+0x120>
 80076b2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007714 <cppInit+0x124>
 80076b6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007718 <cppInit+0x128>
 80076ba:	4818      	ldr	r0, [pc, #96]	; (800771c <cppInit+0x12c>)
 80076bc:	f7fe f9cc 	bl	8005a58 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 80076c0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007720 <cppInit+0x130>
 80076c4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007724 <cppInit+0x134>
 80076c8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007728 <cppInit+0x138>
 80076cc:	4813      	ldr	r0, [pc, #76]	; (800771c <cppInit+0x12c>)
 80076ce:	f7fe f9dc 	bl	8005a8a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80076d2:	4816      	ldr	r0, [pc, #88]	; (800772c <cppInit+0x13c>)
 80076d4:	f7fd fcf0 	bl	80050b8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80076d8:	4815      	ldr	r0, [pc, #84]	; (8007730 <cppInit+0x140>)
 80076da:	f7fd fd87 	bl	80051ec <_ZN13PathFollowing4initEv>

	esc.init();
 80076de:	4815      	ldr	r0, [pc, #84]	; (8007734 <cppInit+0x144>)
 80076e0:	f7f9 fd84 	bl	80011ec <_ZN3ESC4initEv>

}
 80076e4:	bf00      	nop
 80076e6:	bd98      	pop	{r3, r4, r7, pc}
 80076e8:	200005cc 	.word	0x200005cc
 80076ec:	08019890 	.word	0x08019890
 80076f0:	08019898 	.word	0x08019898
 80076f4:	200005ec 	.word	0x200005ec
 80076f8:	200005c8 	.word	0x200005c8
 80076fc:	200002bc 	.word	0x200002bc
 8007700:	200005c4 	.word	0x200005c4
 8007704:	2001bb74 	.word	0x2001bb74
 8007708:	200005d8 	.word	0x200005d8
 800770c:	2001bc10 	.word	0x2001bc10
 8007710:	3cceca68 	.word	0x3cceca68
 8007714:	4180f06f 	.word	0x4180f06f
 8007718:	3fea2d0e 	.word	0x3fea2d0e
 800771c:	2001bb94 	.word	0x2001bb94
 8007720:	00000000 	.word	0x00000000
 8007724:	3f5e3fbc 	.word	0x3f5e3fbc
 8007728:	3d75c28f 	.word	0x3d75c28f
 800772c:	2001bbd0 	.word	0x2001bbd0
 8007730:	20029b58 	.word	0x20029b58
 8007734:	20041280 	.word	0x20041280

08007738 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800773c:	4819      	ldr	r0, [pc, #100]	; (80077a4 <cppFlip1ms+0x6c>)
 800773e:	f7fa fed3 	bl	80024e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007742:	4819      	ldr	r0, [pc, #100]	; (80077a8 <cppFlip1ms+0x70>)
 8007744:	f7fa fafc 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007748:	4818      	ldr	r0, [pc, #96]	; (80077ac <cppFlip1ms+0x74>)
 800774a:	f7f9 fe8d 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800774e:	4818      	ldr	r0, [pc, #96]	; (80077b0 <cppFlip1ms+0x78>)
 8007750:	f7fc fb6c 	bl	8003e2c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007754:	4817      	ldr	r0, [pc, #92]	; (80077b4 <cppFlip1ms+0x7c>)
 8007756:	f7fe f9b1 	bl	8005abc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800775a:	4817      	ldr	r0, [pc, #92]	; (80077b8 <cppFlip1ms+0x80>)
 800775c:	f7fd fc90 	bl	8005080 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007760:	4816      	ldr	r0, [pc, #88]	; (80077bc <cppFlip1ms+0x84>)
 8007762:	f7fd fe4d 	bl	8005400 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007766:	4816      	ldr	r0, [pc, #88]	; (80077c0 <cppFlip1ms+0x88>)
 8007768:	f7fd fa80 	bl	8004c6c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <cppFlip1ms+0x8c>)
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	3301      	adds	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <cppFlip1ms+0x8c>)
 8007776:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007778:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <cppFlip1ms+0x8c>)
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d90c      	bls.n	800779a <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <cppFlip1ms+0x70>)
 8007782:	f7fa fb35 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8007786:	eef0 7a40 	vmov.f32	s15, s0
 800778a:	eeb0 0a67 	vmov.f32	s0, s15
 800778e:	480e      	ldr	r0, [pc, #56]	; (80077c8 <cppFlip1ms+0x90>)
 8007790:	f7fd ff98 	bl	80056c4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <cppFlip1ms+0x8c>)
 8007796:	2200      	movs	r2, #0
 8007798:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800779a:	4804      	ldr	r0, [pc, #16]	; (80077ac <cppFlip1ms+0x74>)
 800779c:	f7f9 ff4e 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80077a0:	bf00      	nop
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200002bc 	.word	0x200002bc
 80077a8:	200005d8 	.word	0x200005d8
 80077ac:	2001bb74 	.word	0x2001bb74
 80077b0:	2001bc10 	.word	0x2001bc10
 80077b4:	2001bb94 	.word	0x2001bb94
 80077b8:	2001bbd0 	.word	0x2001bbd0
 80077bc:	200005b4 	.word	0x200005b4
 80077c0:	200005c4 	.word	0x200005c4
 80077c4:	20041282 	.word	0x20041282
 80077c8:	20029948 	.word	0x20029948

080077cc <cppFlip100ns>:

void cppFlip100ns(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80077d0:	4802      	ldr	r0, [pc, #8]	; (80077dc <cppFlip100ns+0x10>)
 80077d2:	f7fa fe3b 	bl	800244c <_ZN10LineSensor17storeSensorValuesEv>
}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	200002bc 	.word	0x200002bc

080077e0 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80077e4:	4b08      	ldr	r3, [pc, #32]	; (8007808 <cppFlip10ms+0x28>)
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <cppFlip10ms+0x28>)
 80077ee:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <cppFlip10ms+0x28>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d905      	bls.n	8007804 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80077f8:	4804      	ldr	r0, [pc, #16]	; (800780c <cppFlip10ms+0x2c>)
 80077fa:	f7fd ff83 	bl	8005704 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80077fe:	4b02      	ldr	r3, [pc, #8]	; (8007808 <cppFlip10ms+0x28>)
 8007800:	2200      	movs	r2, #0
 8007802:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007804:	bf00      	nop
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20041284 	.word	0x20041284
 800780c:	20029948 	.word	0x20029948

08007810 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	b085      	sub	sp, #20
 8007814:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007816:	4baf      	ldr	r3, [pc, #700]	; (8007ad4 <cppLoop+0x2c4>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f3bf 8f5b 	dmb	ish
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <cppLoop+0x4e>
 8007832:	48a8      	ldr	r0, [pc, #672]	; (8007ad4 <cppLoop+0x2c4>)
 8007834:	f00c fb95 	bl	8013f62 <__cxa_guard_acquire>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <cppLoop+0x4e>
 8007848:	48a3      	ldr	r0, [pc, #652]	; (8007ad8 <cppLoop+0x2c8>)
 800784a:	f7fc f996 	bl	8003b7a <_ZN9LineTrace5getKpEv>
 800784e:	eef0 7a40 	vmov.f32	s15, s0
 8007852:	4ba2      	ldr	r3, [pc, #648]	; (8007adc <cppLoop+0x2cc>)
 8007854:	edc3 7a00 	vstr	s15, [r3]
 8007858:	489e      	ldr	r0, [pc, #632]	; (8007ad4 <cppLoop+0x2c4>)
 800785a:	f00c fb8e 	bl	8013f7a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800785e:	4ba0      	ldr	r3, [pc, #640]	; (8007ae0 <cppLoop+0x2d0>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3bf 8f5b 	dmb	ish
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <cppLoop+0x96>
 800787a:	4899      	ldr	r0, [pc, #612]	; (8007ae0 <cppLoop+0x2d0>)
 800787c:	f00c fb71 	bl	8013f62 <__cxa_guard_acquire>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <cppLoop+0x96>
 8007890:	4891      	ldr	r0, [pc, #580]	; (8007ad8 <cppLoop+0x2c8>)
 8007892:	f7fc f981 	bl	8003b98 <_ZN9LineTrace5getKiEv>
 8007896:	eef0 7a40 	vmov.f32	s15, s0
 800789a:	4b92      	ldr	r3, [pc, #584]	; (8007ae4 <cppLoop+0x2d4>)
 800789c:	edc3 7a00 	vstr	s15, [r3]
 80078a0:	488f      	ldr	r0, [pc, #572]	; (8007ae0 <cppLoop+0x2d0>)
 80078a2:	f00c fb6a 	bl	8013f7a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80078a6:	4b90      	ldr	r3, [pc, #576]	; (8007ae8 <cppLoop+0x2d8>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f3bf 8f5b 	dmb	ish
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <cppLoop+0xde>
 80078c2:	4889      	ldr	r0, [pc, #548]	; (8007ae8 <cppLoop+0x2d8>)
 80078c4:	f00c fb4d 	bl	8013f62 <__cxa_guard_acquire>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <cppLoop+0xde>
 80078d8:	487f      	ldr	r0, [pc, #508]	; (8007ad8 <cppLoop+0x2c8>)
 80078da:	f7fc f96c 	bl	8003bb6 <_ZN9LineTrace5getKdEv>
 80078de:	eef0 7a40 	vmov.f32	s15, s0
 80078e2:	4b82      	ldr	r3, [pc, #520]	; (8007aec <cppLoop+0x2dc>)
 80078e4:	edc3 7a00 	vstr	s15, [r3]
 80078e8:	487f      	ldr	r0, [pc, #508]	; (8007ae8 <cppLoop+0x2d8>)
 80078ea:	f00c fb46 	bl	8013f7a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80078ee:	4b80      	ldr	r3, [pc, #512]	; (8007af0 <cppLoop+0x2e0>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f3bf 8f5b 	dmb	ish
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d015      	beq.n	8007936 <cppLoop+0x126>
 800790a:	4879      	ldr	r0, [pc, #484]	; (8007af0 <cppLoop+0x2e0>)
 800790c:	f00c fb29 	bl	8013f62 <__cxa_guard_acquire>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <cppLoop+0x126>
 8007920:	486d      	ldr	r0, [pc, #436]	; (8007ad8 <cppLoop+0x2c8>)
 8007922:	f7fc f9b6 	bl	8003c92 <_ZN9LineTrace17getTargetVelocityEv>
 8007926:	eef0 7a40 	vmov.f32	s15, s0
 800792a:	4b72      	ldr	r3, [pc, #456]	; (8007af4 <cppLoop+0x2e4>)
 800792c:	edc3 7a00 	vstr	s15, [r3]
 8007930:	486f      	ldr	r0, [pc, #444]	; (8007af0 <cppLoop+0x2e0>)
 8007932:	f00c fb22 	bl	8013f7a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007936:	4b70      	ldr	r3, [pc, #448]	; (8007af8 <cppLoop+0x2e8>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f3bf 8f5b 	dmb	ish
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <cppLoop+0x16e>
 8007952:	4869      	ldr	r0, [pc, #420]	; (8007af8 <cppLoop+0x2e8>)
 8007954:	f00c fb05 	bl	8013f62 <__cxa_guard_acquire>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <cppLoop+0x16e>
 8007968:	485b      	ldr	r0, [pc, #364]	; (8007ad8 <cppLoop+0x2c8>)
 800796a:	f7fc f9a2 	bl	8003cb2 <_ZN9LineTrace14getMaxVelocityEv>
 800796e:	eef0 7a40 	vmov.f32	s15, s0
 8007972:	4b62      	ldr	r3, [pc, #392]	; (8007afc <cppLoop+0x2ec>)
 8007974:	edc3 7a00 	vstr	s15, [r3]
 8007978:	485f      	ldr	r0, [pc, #380]	; (8007af8 <cppLoop+0x2e8>)
 800797a:	f00c fafe 	bl	8013f7a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800797e:	4b60      	ldr	r3, [pc, #384]	; (8007b00 <cppLoop+0x2f0>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f3bf 8f5b 	dmb	ish
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <cppLoop+0x1b6>
 800799a:	4859      	ldr	r0, [pc, #356]	; (8007b00 <cppLoop+0x2f0>)
 800799c:	f00c fae1 	bl	8013f62 <__cxa_guard_acquire>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <cppLoop+0x1b6>
 80079b0:	4849      	ldr	r0, [pc, #292]	; (8007ad8 <cppLoop+0x2c8>)
 80079b2:	f7fc f98e 	bl	8003cd2 <_ZN9LineTrace15getMaxVelocity2Ev>
 80079b6:	eef0 7a40 	vmov.f32	s15, s0
 80079ba:	4b52      	ldr	r3, [pc, #328]	; (8007b04 <cppLoop+0x2f4>)
 80079bc:	edc3 7a00 	vstr	s15, [r3]
 80079c0:	484f      	ldr	r0, [pc, #316]	; (8007b00 <cppLoop+0x2f0>)
 80079c2:	f00c fada 	bl	8013f7a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80079c6:	4b50      	ldr	r3, [pc, #320]	; (8007b08 <cppLoop+0x2f8>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f3bf 8f5b 	dmb	ish
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d015      	beq.n	8007a0e <cppLoop+0x1fe>
 80079e2:	4849      	ldr	r0, [pc, #292]	; (8007b08 <cppLoop+0x2f8>)
 80079e4:	f00c fabd 	bl	8013f62 <__cxa_guard_acquire>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <cppLoop+0x1fe>
 80079f8:	4837      	ldr	r0, [pc, #220]	; (8007ad8 <cppLoop+0x2c8>)
 80079fa:	f7fc f97a 	bl	8003cf2 <_ZN9LineTrace14getMinVelocityEv>
 80079fe:	eef0 7a40 	vmov.f32	s15, s0
 8007a02:	4b42      	ldr	r3, [pc, #264]	; (8007b0c <cppLoop+0x2fc>)
 8007a04:	edc3 7a00 	vstr	s15, [r3]
 8007a08:	483f      	ldr	r0, [pc, #252]	; (8007b08 <cppLoop+0x2f8>)
 8007a0a:	f00c fab6 	bl	8013f7a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007a0e:	4b40      	ldr	r3, [pc, #256]	; (8007b10 <cppLoop+0x300>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f3bf 8f5b 	dmb	ish
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <cppLoop+0x246>
 8007a2a:	4839      	ldr	r0, [pc, #228]	; (8007b10 <cppLoop+0x300>)
 8007a2c:	f00c fa99 	bl	8013f62 <__cxa_guard_acquire>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <cppLoop+0x246>
 8007a40:	4825      	ldr	r0, [pc, #148]	; (8007ad8 <cppLoop+0x2c8>)
 8007a42:	f7fc f966 	bl	8003d12 <_ZN9LineTrace15getMinVelocity2Ev>
 8007a46:	eef0 7a40 	vmov.f32	s15, s0
 8007a4a:	4b32      	ldr	r3, [pc, #200]	; (8007b14 <cppLoop+0x304>)
 8007a4c:	edc3 7a00 	vstr	s15, [r3]
 8007a50:	482f      	ldr	r0, [pc, #188]	; (8007b10 <cppLoop+0x300>)
 8007a52:	f00c fa92 	bl	8013f7a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007a56:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <cppLoop+0x308>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f3bf 8f5b 	dmb	ish
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d015      	beq.n	8007a9e <cppLoop+0x28e>
 8007a72:	4829      	ldr	r0, [pc, #164]	; (8007b18 <cppLoop+0x308>)
 8007a74:	f00c fa75 	bl	8013f62 <__cxa_guard_acquire>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bf14      	ite	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	2300      	moveq	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <cppLoop+0x28e>
 8007a88:	4813      	ldr	r0, [pc, #76]	; (8007ad8 <cppLoop+0x2c8>)
 8007a8a:	f7fc f986 	bl	8003d9a <_ZN9LineTrace9getMaxAccEv>
 8007a8e:	eef0 7a40 	vmov.f32	s15, s0
 8007a92:	4b22      	ldr	r3, [pc, #136]	; (8007b1c <cppLoop+0x30c>)
 8007a94:	edc3 7a00 	vstr	s15, [r3]
 8007a98:	481f      	ldr	r0, [pc, #124]	; (8007b18 <cppLoop+0x308>)
 8007a9a:	f00c fa6e 	bl	8013f7a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007a9e:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <cppLoop+0x310>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f3bf 8f5b 	dmb	ish
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03f      	beq.n	8007b3a <cppLoop+0x32a>
 8007aba:	4819      	ldr	r0, [pc, #100]	; (8007b20 <cppLoop+0x310>)
 8007abc:	f00c fa51 	bl	8013f62 <__cxa_guard_acquire>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d034      	beq.n	8007b3a <cppLoop+0x32a>
 8007ad0:	e028      	b.n	8007b24 <cppLoop+0x314>
 8007ad2:	bf00      	nop
 8007ad4:	20041294 	.word	0x20041294
 8007ad8:	2001bc10 	.word	0x2001bc10
 8007adc:	20041290 	.word	0x20041290
 8007ae0:	2004129c 	.word	0x2004129c
 8007ae4:	20041298 	.word	0x20041298
 8007ae8:	200412a4 	.word	0x200412a4
 8007aec:	200412a0 	.word	0x200412a0
 8007af0:	200412ac 	.word	0x200412ac
 8007af4:	200412a8 	.word	0x200412a8
 8007af8:	200412b4 	.word	0x200412b4
 8007afc:	200412b0 	.word	0x200412b0
 8007b00:	200412bc 	.word	0x200412bc
 8007b04:	200412b8 	.word	0x200412b8
 8007b08:	200412c4 	.word	0x200412c4
 8007b0c:	200412c0 	.word	0x200412c0
 8007b10:	200412cc 	.word	0x200412cc
 8007b14:	200412c8 	.word	0x200412c8
 8007b18:	200412d4 	.word	0x200412d4
 8007b1c:	200412d0 	.word	0x200412d0
 8007b20:	200412dc 	.word	0x200412dc
 8007b24:	48b2      	ldr	r0, [pc, #712]	; (8007df0 <cppLoop+0x5e0>)
 8007b26:	f7fc f96e 	bl	8003e06 <_ZN9LineTrace9getMaxDecEv>
 8007b2a:	eef0 7a40 	vmov.f32	s15, s0
 8007b2e:	4bb1      	ldr	r3, [pc, #708]	; (8007df4 <cppLoop+0x5e4>)
 8007b30:	edc3 7a00 	vstr	s15, [r3]
 8007b34:	48b0      	ldr	r0, [pc, #704]	; (8007df8 <cppLoop+0x5e8>)
 8007b36:	f00c fa20 	bl	8013f7a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007b3a:	4bb0      	ldr	r3, [pc, #704]	; (8007dfc <cppLoop+0x5ec>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f3bf 8f5b 	dmb	ish
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d015      	beq.n	8007b82 <cppLoop+0x372>
 8007b56:	48a9      	ldr	r0, [pc, #676]	; (8007dfc <cppLoop+0x5ec>)
 8007b58:	f00c fa03 	bl	8013f62 <__cxa_guard_acquire>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	2300      	moveq	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <cppLoop+0x372>
 8007b6c:	48a0      	ldr	r0, [pc, #640]	; (8007df0 <cppLoop+0x5e0>)
 8007b6e:	f7fc f938 	bl	8003de2 <_ZN9LineTrace10getMaxAcc2Ev>
 8007b72:	eef0 7a40 	vmov.f32	s15, s0
 8007b76:	4ba2      	ldr	r3, [pc, #648]	; (8007e00 <cppLoop+0x5f0>)
 8007b78:	edc3 7a00 	vstr	s15, [r3]
 8007b7c:	489f      	ldr	r0, [pc, #636]	; (8007dfc <cppLoop+0x5ec>)
 8007b7e:	f00c f9fc 	bl	8013f7a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007b82:	4ba0      	ldr	r3, [pc, #640]	; (8007e04 <cppLoop+0x5f4>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f3bf 8f5b 	dmb	ish
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d015      	beq.n	8007bca <cppLoop+0x3ba>
 8007b9e:	4899      	ldr	r0, [pc, #612]	; (8007e04 <cppLoop+0x5f4>)
 8007ba0:	f00c f9df 	bl	8013f62 <__cxa_guard_acquire>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf14      	ite	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	2300      	moveq	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <cppLoop+0x3ba>
 8007bb4:	488e      	ldr	r0, [pc, #568]	; (8007df0 <cppLoop+0x5e0>)
 8007bb6:	f7fc f902 	bl	8003dbe <_ZN9LineTrace10getMaxDec2Ev>
 8007bba:	eef0 7a40 	vmov.f32	s15, s0
 8007bbe:	4b92      	ldr	r3, [pc, #584]	; (8007e08 <cppLoop+0x5f8>)
 8007bc0:	edc3 7a00 	vstr	s15, [r3]
 8007bc4:	488f      	ldr	r0, [pc, #572]	; (8007e04 <cppLoop+0x5f4>)
 8007bc6:	f00c f9d8 	bl	8013f7a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007bca:	4890      	ldr	r0, [pc, #576]	; (8007e0c <cppLoop+0x5fc>)
 8007bcc:	f7fd fbb2 	bl	8005334 <_ZN12RotarySwitch8getValueEv>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b0f      	cmp	r3, #15
 8007bd4:	f201 8397 	bhi.w	8009306 <cppLoop+0x1af6>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <cppLoop+0x3d0>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c21 	.word	0x08007c21
 8007be4:	08007fd1 	.word	0x08007fd1
 8007be8:	08008089 	.word	0x08008089
 8007bec:	0800823f 	.word	0x0800823f
 8007bf0:	0800830b 	.word	0x0800830b
 8007bf4:	08008595 	.word	0x08008595
 8007bf8:	08008661 	.word	0x08008661
 8007bfc:	080088f7 	.word	0x080088f7
 8007c00:	08008b83 	.word	0x08008b83
 8007c04:	08008e0d 	.word	0x08008e0d
 8007c08:	08008ec9 	.word	0x08008ec9
 8007c0c:	08008f69 	.word	0x08008f69
 8007c10:	08008fef 	.word	0x08008fef
 8007c14:	08009089 	.word	0x08009089
 8007c18:	08009199 	.word	0x08009199
 8007c1c:	08009251 	.word	0x08009251
	case 0:
		led.fullColor('W');
 8007c20:	2157      	movs	r1, #87	; 0x57
 8007c22:	487b      	ldr	r0, [pc, #492]	; (8007e10 <cppLoop+0x600>)
 8007c24:	f7fa faa6 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c28:	f7f9 fa3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7f9 fa46 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007c34:	486e      	ldr	r0, [pc, #440]	; (8007df0 <cppLoop+0x5e0>)
 8007c36:	f7fb ffa0 	bl	8003b7a <_ZN9LineTrace5getKpEv>
 8007c3a:	eeb0 7a40 	vmov.f32	s14, s0
 8007c3e:	eddf 7a75 	vldr	s15, [pc, #468]	; 8007e14 <cppLoop+0x604>
 8007c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c46:	ee17 0a90 	vmov	r0, s15
 8007c4a:	f7f8 fc95 	bl	8000578 <__aeabi_f2d>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	460c      	mov	r4, r1
 8007c52:	461a      	mov	r2, r3
 8007c54:	4623      	mov	r3, r4
 8007c56:	4870      	ldr	r0, [pc, #448]	; (8007e18 <cppLoop+0x608>)
 8007c58:	f7f9 fa5c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	2000      	movs	r0, #0
 8007c60:	f7f9 fa2e 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007c64:	4862      	ldr	r0, [pc, #392]	; (8007df0 <cppLoop+0x5e0>)
 8007c66:	f7fb ff97 	bl	8003b98 <_ZN9LineTrace5getKiEv>
 8007c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8007c6e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8007e1c <cppLoop+0x60c>
 8007c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c76:	ee17 0a90 	vmov	r0, s15
 8007c7a:	f7f8 fc7d 	bl	8000578 <__aeabi_f2d>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	460e      	mov	r6, r1
 8007c82:	485b      	ldr	r0, [pc, #364]	; (8007df0 <cppLoop+0x5e0>)
 8007c84:	f7fb ff97 	bl	8003bb6 <_ZN9LineTrace5getKdEv>
 8007c88:	eeb0 7a40 	vmov.f32	s14, s0
 8007c8c:	eddf 7a64 	vldr	s15, [pc, #400]	; 8007e20 <cppLoop+0x610>
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	ee17 0a90 	vmov	r0, s15
 8007c98:	f7f8 fc6e 	bl	8000578 <__aeabi_f2d>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	e9cd 3400 	strd	r3, r4, [sp]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4633      	mov	r3, r6
 8007ca8:	485e      	ldr	r0, [pc, #376]	; (8007e24 <cppLoop+0x614>)
 8007caa:	f7f9 fa33 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007cae:	485e      	ldr	r0, [pc, #376]	; (8007e28 <cppLoop+0x618>)
 8007cb0:	f7fa f9fc 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b08      	cmp	r3, #8
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d022      	beq.n	8007d0a <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8007cca:	4851      	ldr	r0, [pc, #324]	; (8007e10 <cppLoop+0x600>)
 8007ccc:	f7fa fb0e 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007cd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007cd4:	f001 fc60 	bl	8009598 <HAL_Delay>

			selector++;
 8007cd8:	4b54      	ldr	r3, [pc, #336]	; (8007e2c <cppLoop+0x61c>)
 8007cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	b21a      	sxth	r2, r3
 8007ce6:	4b51      	ldr	r3, [pc, #324]	; (8007e2c <cppLoop+0x61c>)
 8007ce8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007cea:	4b50      	ldr	r3, [pc, #320]	; (8007e2c <cppLoop+0x61c>)
 8007cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	dd02      	ble.n	8007cfa <cppLoop+0x4ea>
 8007cf4:	4b4d      	ldr	r3, [pc, #308]	; (8007e2c <cppLoop+0x61c>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8007d00:	4843      	ldr	r0, [pc, #268]	; (8007e10 <cppLoop+0x600>)
 8007d02:	f7fa faf3 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007d06:	f001 bb00 	b.w	800930a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_R){
 8007d0a:	4847      	ldr	r0, [pc, #284]	; (8007e28 <cppLoop+0x618>)
 8007d0c:	f7fa f9ce 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 808d 	beq.w	8007e3c <cppLoop+0x62c>
			led.LR(-1, 1);
 8007d22:	2201      	movs	r2, #1
 8007d24:	f04f 31ff 	mov.w	r1, #4294967295
 8007d28:	4839      	ldr	r0, [pc, #228]	; (8007e10 <cppLoop+0x600>)
 8007d2a:	f7fa fadf 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d2e:	2064      	movs	r0, #100	; 0x64
 8007d30:	f001 fc32 	bl	8009598 <HAL_Delay>
			if(selector == 0){
 8007d34:	4b3d      	ldr	r3, [pc, #244]	; (8007e2c <cppLoop+0x61c>)
 8007d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d113      	bne.n	8007d66 <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007d3e:	4b3c      	ldr	r3, [pc, #240]	; (8007e30 <cppLoop+0x620>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7f8 fc18 	bl	8000578 <__aeabi_f2d>
 8007d48:	a323      	add	r3, pc, #140	; (adr r3, 8007dd8 <cppLoop+0x5c8>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fab5 	bl	80002bc <__adddf3>
 8007d52:	4603      	mov	r3, r0
 8007d54:	460c      	mov	r4, r1
 8007d56:	4618      	mov	r0, r3
 8007d58:	4621      	mov	r1, r4
 8007d5a:	f7f8 ff5d 	bl	8000c18 <__aeabi_d2f>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b33      	ldr	r3, [pc, #204]	; (8007e30 <cppLoop+0x620>)
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	e02b      	b.n	8007dbe <cppLoop+0x5ae>
			else if(selector == 1){
 8007d66:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <cppLoop+0x61c>)
 8007d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d113      	bne.n	8007d98 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007d70:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <cppLoop+0x624>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7f8 fbff 	bl	8000578 <__aeabi_f2d>
 8007d7a:	a319      	add	r3, pc, #100	; (adr r3, 8007de0 <cppLoop+0x5d0>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f7f8 fa9c 	bl	80002bc <__adddf3>
 8007d84:	4603      	mov	r3, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4618      	mov	r0, r3
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	f7f8 ff44 	bl	8000c18 <__aeabi_d2f>
 8007d90:	4602      	mov	r2, r0
 8007d92:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <cppLoop+0x624>)
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e012      	b.n	8007dbe <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007d98:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <cppLoop+0x628>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7f8 fbeb 	bl	8000578 <__aeabi_f2d>
 8007da2:	a311      	add	r3, pc, #68	; (adr r3, 8007de8 <cppLoop+0x5d8>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fa88 	bl	80002bc <__adddf3>
 8007dac:	4603      	mov	r3, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	4618      	mov	r0, r3
 8007db2:	4621      	mov	r1, r4
 8007db4:	f7f8 ff30 	bl	8000c18 <__aeabi_d2f>
 8007db8:	4602      	mov	r2, r0
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <cppLoop+0x628>)
 8007dbc:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007dbe:	2152      	movs	r1, #82	; 0x52
 8007dc0:	4813      	ldr	r0, [pc, #76]	; (8007e10 <cppLoop+0x600>)
 8007dc2:	f7fa f9d7 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8007dcc:	4810      	ldr	r0, [pc, #64]	; (8007e10 <cppLoop+0x600>)
 8007dce:	f7fa fa8d 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007dd2:	f001 ba9a 	b.w	800930a <cppLoop+0x1afa>
 8007dd6:	bf00      	nop
 8007dd8:	88e368f1 	.word	0x88e368f1
 8007ddc:	3ee4f8b5 	.word	0x3ee4f8b5
 8007de0:	eb1c432d 	.word	0xeb1c432d
 8007de4:	3f1a36e2 	.word	0x3f1a36e2
 8007de8:	a0b5ed8d 	.word	0xa0b5ed8d
 8007dec:	3eb0c6f7 	.word	0x3eb0c6f7
 8007df0:	2001bc10 	.word	0x2001bc10
 8007df4:	200412d8 	.word	0x200412d8
 8007df8:	200412dc 	.word	0x200412dc
 8007dfc:	200412e4 	.word	0x200412e4
 8007e00:	200412e0 	.word	0x200412e0
 8007e04:	200412ec 	.word	0x200412ec
 8007e08:	200412e8 	.word	0x200412e8
 8007e0c:	200005c0 	.word	0x200005c0
 8007e10:	200005c8 	.word	0x200005c8
 8007e14:	447a0000 	.word	0x447a0000
 8007e18:	0801989c 	.word	0x0801989c
 8007e1c:	42c80000 	.word	0x42c80000
 8007e20:	461c4000 	.word	0x461c4000
 8007e24:	080198a8 	.word	0x080198a8
 8007e28:	200005bc 	.word	0x200005bc
 8007e2c:	20041286 	.word	0x20041286
 8007e30:	20041290 	.word	0x20041290
 8007e34:	20041298 	.word	0x20041298
 8007e38:	200412a0 	.word	0x200412a0
		else if(joy_stick.getValue() == JOY_L){
 8007e3c:	48c0      	ldr	r0, [pc, #768]	; (8008140 <cppLoop+0x930>)
 8007e3e:	f7fa f935 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d059      	beq.n	8007f06 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e52:	2201      	movs	r2, #1
 8007e54:	f04f 31ff 	mov.w	r1, #4294967295
 8007e58:	48ba      	ldr	r0, [pc, #744]	; (8008144 <cppLoop+0x934>)
 8007e5a:	f7fa fa47 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e5e:	2064      	movs	r0, #100	; 0x64
 8007e60:	f001 fb9a 	bl	8009598 <HAL_Delay>
			if(selector == 0){
 8007e64:	4bb8      	ldr	r3, [pc, #736]	; (8008148 <cppLoop+0x938>)
 8007e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d113      	bne.n	8007e96 <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 8007e6e:	4bb7      	ldr	r3, [pc, #732]	; (800814c <cppLoop+0x93c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f8 fb80 	bl	8000578 <__aeabi_f2d>
 8007e78:	a3a9      	add	r3, pc, #676	; (adr r3, 8008120 <cppLoop+0x910>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fa1b 	bl	80002b8 <__aeabi_dsub>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	4618      	mov	r0, r3
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f7f8 fec5 	bl	8000c18 <__aeabi_d2f>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4bae      	ldr	r3, [pc, #696]	; (800814c <cppLoop+0x93c>)
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e02b      	b.n	8007eee <cppLoop+0x6de>
			else if(selector == 1){
 8007e96:	4bac      	ldr	r3, [pc, #688]	; (8008148 <cppLoop+0x938>)
 8007e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d113      	bne.n	8007ec8 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 8007ea0:	4bab      	ldr	r3, [pc, #684]	; (8008150 <cppLoop+0x940>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7f8 fb67 	bl	8000578 <__aeabi_f2d>
 8007eaa:	a39f      	add	r3, pc, #636	; (adr r3, 8008128 <cppLoop+0x918>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fa02 	bl	80002b8 <__aeabi_dsub>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	4621      	mov	r1, r4
 8007ebc:	f7f8 feac 	bl	8000c18 <__aeabi_d2f>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	4ba3      	ldr	r3, [pc, #652]	; (8008150 <cppLoop+0x940>)
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e012      	b.n	8007eee <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8007ec8:	4ba2      	ldr	r3, [pc, #648]	; (8008154 <cppLoop+0x944>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7f8 fb53 	bl	8000578 <__aeabi_f2d>
 8007ed2:	a397      	add	r3, pc, #604	; (adr r3, 8008130 <cppLoop+0x920>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 f9ee 	bl	80002b8 <__aeabi_dsub>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f7f8 fe98 	bl	8000c18 <__aeabi_d2f>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4b9a      	ldr	r3, [pc, #616]	; (8008154 <cppLoop+0x944>)
 8007eec:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007eee:	2152      	movs	r1, #82	; 0x52
 8007ef0:	4894      	ldr	r0, [pc, #592]	; (8008144 <cppLoop+0x934>)
 8007ef2:	f7fa f93f 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8007efc:	4891      	ldr	r0, [pc, #580]	; (8008144 <cppLoop+0x934>)
 8007efe:	f7fa f9f5 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007f02:	f001 ba02 	b.w	800930a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_D){
 8007f06:	488e      	ldr	r0, [pc, #568]	; (8008140 <cppLoop+0x930>)
 8007f08:	f7fa f8d0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	bf0c      	ite	eq
 8007f12:	2301      	moveq	r3, #1
 8007f14:	2300      	movne	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d011      	beq.n	8007f40 <cppLoop+0x730>
			led.LR(-1, 1);
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f22:	4888      	ldr	r0, [pc, #544]	; (8008144 <cppLoop+0x934>)
 8007f24:	f7fa f9e2 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f2c:	f001 fb34 	bl	8009598 <HAL_Delay>
			led.LR(-1, 0);
 8007f30:	2200      	movs	r2, #0
 8007f32:	f04f 31ff 	mov.w	r1, #4294967295
 8007f36:	4883      	ldr	r0, [pc, #524]	; (8008144 <cppLoop+0x934>)
 8007f38:	f7fa f9d8 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007f3c:	f001 b9e5 	b.w	800930a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_C){
 8007f40:	487f      	ldr	r0, [pc, #508]	; (8008140 <cppLoop+0x930>)
 8007f42:	f7fa f8b3 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f001 81d9 	beq.w	800930a <cppLoop+0x1afa>
			led.LR(-1, 1);
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f5e:	4879      	ldr	r0, [pc, #484]	; (8008144 <cppLoop+0x934>)
 8007f60:	f7fa f9c4 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f68:	f001 fb16 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	4b76      	ldr	r3, [pc, #472]	; (800814c <cppLoop+0x93c>)
 8007f72:	2201      	movs	r2, #1
 8007f74:	4978      	ldr	r1, [pc, #480]	; (8008158 <cppLoop+0x948>)
 8007f76:	4879      	ldr	r0, [pc, #484]	; (800815c <cppLoop+0x94c>)
 8007f78:	f7f9 fc80 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	4b73      	ldr	r3, [pc, #460]	; (8008150 <cppLoop+0x940>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	4976      	ldr	r1, [pc, #472]	; (8008160 <cppLoop+0x950>)
 8007f86:	4875      	ldr	r0, [pc, #468]	; (800815c <cppLoop+0x94c>)
 8007f88:	f7f9 fc78 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4b70      	ldr	r3, [pc, #448]	; (8008154 <cppLoop+0x944>)
 8007f92:	2201      	movs	r2, #1
 8007f94:	4973      	ldr	r1, [pc, #460]	; (8008164 <cppLoop+0x954>)
 8007f96:	4871      	ldr	r0, [pc, #452]	; (800815c <cppLoop+0x94c>)
 8007f98:	f7f9 fc70 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007f9c:	4b6b      	ldr	r3, [pc, #428]	; (800814c <cppLoop+0x93c>)
 8007f9e:	edd3 7a00 	vldr	s15, [r3]
 8007fa2:	4b6b      	ldr	r3, [pc, #428]	; (8008150 <cppLoop+0x940>)
 8007fa4:	ed93 7a00 	vldr	s14, [r3]
 8007fa8:	4b6a      	ldr	r3, [pc, #424]	; (8008154 <cppLoop+0x944>)
 8007faa:	edd3 6a00 	vldr	s13, [r3]
 8007fae:	eeb0 1a66 	vmov.f32	s2, s13
 8007fb2:	eef0 0a47 	vmov.f32	s1, s14
 8007fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8007fba:	486b      	ldr	r0, [pc, #428]	; (8008168 <cppLoop+0x958>)
 8007fbc:	f7fb fdc4 	bl	8003b48 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc6:	485f      	ldr	r0, [pc, #380]	; (8008144 <cppLoop+0x934>)
 8007fc8:	f7fa f990 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007fcc:	f001 b99d 	b.w	800930a <cppLoop+0x1afa>

	case 1:
		led.fullColor('C');
 8007fd0:	2143      	movs	r1, #67	; 0x43
 8007fd2:	485c      	ldr	r0, [pc, #368]	; (8008144 <cppLoop+0x934>)
 8007fd4:	f7fa f8ce 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fd8:	f7f9 f862 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fdc:	2100      	movs	r1, #0
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7f9 f86e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007fe4:	4861      	ldr	r0, [pc, #388]	; (800816c <cppLoop+0x95c>)
 8007fe6:	f7f9 f895 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fea:	2101      	movs	r1, #1
 8007fec:	2000      	movs	r0, #0
 8007fee:	f7f9 f867 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007ff2:	4b5f      	ldr	r3, [pc, #380]	; (8008170 <cppLoop+0x960>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f8 fabe 	bl	8000578 <__aeabi_f2d>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	461a      	mov	r2, r3
 8008002:	4623      	mov	r3, r4
 8008004:	485b      	ldr	r0, [pc, #364]	; (8008174 <cppLoop+0x964>)
 8008006:	f7f9 f885 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800800a:	484d      	ldr	r0, [pc, #308]	; (8008140 <cppLoop+0x930>)
 800800c:	f7fa f84e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008010:	4603      	mov	r3, r0
 8008012:	2b02      	cmp	r3, #2
 8008014:	bf0c      	ite	eq
 8008016:	2301      	moveq	r3, #1
 8008018:	2300      	movne	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	f001 8176 	beq.w	800930e <cppLoop+0x1afe>
			HAL_Delay(500);
 8008022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008026:	f001 fab7 	bl	8009598 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800802a:	4b51      	ldr	r3, [pc, #324]	; (8008170 <cppLoop+0x960>)
 800802c:	edd3 7a00 	vldr	s15, [r3]
 8008030:	eeb0 0a67 	vmov.f32	s0, s15
 8008034:	484c      	ldr	r0, [pc, #304]	; (8008168 <cppLoop+0x958>)
 8008036:	f7fb fddc 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800803a:	f04f 32ff 	mov.w	r2, #4294967295
 800803e:	2101      	movs	r1, #1
 8008040:	4840      	ldr	r0, [pc, #256]	; (8008144 <cppLoop+0x934>)
 8008042:	f7fa f953 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8008046:	2100      	movs	r1, #0
 8008048:	4847      	ldr	r0, [pc, #284]	; (8008168 <cppLoop+0x958>)
 800804a:	f7fc f85d 	bl	8004108 <_ZN9LineTrace7setModeEs>
			HAL_Delay(1000);
 800804e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008052:	f001 faa1 	bl	8009598 <HAL_Delay>
			esc.on(0.6, 0.6, 0.6, 0.6);
 8008056:	eddf 1a48 	vldr	s3, [pc, #288]	; 8008178 <cppLoop+0x968>
 800805a:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8008178 <cppLoop+0x968>
 800805e:	eddf 0a46 	vldr	s1, [pc, #280]	; 8008178 <cppLoop+0x968>
 8008062:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008178 <cppLoop+0x968>
 8008066:	4845      	ldr	r0, [pc, #276]	; (800817c <cppLoop+0x96c>)
 8008068:	f7f9 f8f2 	bl	8001250 <_ZN3ESC2onEffff>
			line_trace.running();
 800806c:	483e      	ldr	r0, [pc, #248]	; (8008168 <cppLoop+0x958>)
 800806e:	f7fc f889 	bl	8004184 <_ZN9LineTrace7runningEv>
			esc.off();
 8008072:	4842      	ldr	r0, [pc, #264]	; (800817c <cppLoop+0x96c>)
 8008074:	f7f9 f986 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	2100      	movs	r1, #0
 800807e:	4831      	ldr	r0, [pc, #196]	; (8008144 <cppLoop+0x934>)
 8008080:	f7fa f934 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008084:	f001 b943 	b.w	800930e <cppLoop+0x1afe>

	case 2:
		led.fullColor('B');
 8008088:	2142      	movs	r1, #66	; 0x42
 800808a:	482e      	ldr	r0, [pc, #184]	; (8008144 <cppLoop+0x934>)
 800808c:	f7fa f872 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008090:	f7f9 f806 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008094:	2100      	movs	r1, #0
 8008096:	2000      	movs	r0, #0
 8008098:	f7f9 f812 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800809c:	4833      	ldr	r0, [pc, #204]	; (800816c <cppLoop+0x95c>)
 800809e:	f7f9 f839 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080a2:	2101      	movs	r1, #1
 80080a4:	2000      	movs	r0, #0
 80080a6:	f7f9 f80b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <cppLoop+0x960>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f8 fa62 	bl	8000578 <__aeabi_f2d>
 80080b4:	4603      	mov	r3, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	461a      	mov	r2, r3
 80080ba:	4623      	mov	r3, r4
 80080bc:	4830      	ldr	r0, [pc, #192]	; (8008180 <cppLoop+0x970>)
 80080be:	f7f9 f829 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80080c2:	481f      	ldr	r0, [pc, #124]	; (8008140 <cppLoop+0x930>)
 80080c4:	f7f9 fff2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d055      	beq.n	8008184 <cppLoop+0x974>
			led.LR(-1, 1);
 80080d8:	2201      	movs	r2, #1
 80080da:	f04f 31ff 	mov.w	r1, #4294967295
 80080de:	4819      	ldr	r0, [pc, #100]	; (8008144 <cppLoop+0x934>)
 80080e0:	f7fa f904 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080e4:	2064      	movs	r0, #100	; 0x64
 80080e6:	f001 fa57 	bl	8009598 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80080ea:	4b21      	ldr	r3, [pc, #132]	; (8008170 <cppLoop+0x960>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f8 fa42 	bl	8000578 <__aeabi_f2d>
 80080f4:	a310      	add	r3, pc, #64	; (adr r3, 8008138 <cppLoop+0x928>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f8df 	bl	80002bc <__adddf3>
 80080fe:	4603      	mov	r3, r0
 8008100:	460c      	mov	r4, r1
 8008102:	4618      	mov	r0, r3
 8008104:	4621      	mov	r1, r4
 8008106:	f7f8 fd87 	bl	8000c18 <__aeabi_d2f>
 800810a:	4602      	mov	r2, r0
 800810c:	4b18      	ldr	r3, [pc, #96]	; (8008170 <cppLoop+0x960>)
 800810e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008110:	2200      	movs	r2, #0
 8008112:	f04f 31ff 	mov.w	r1, #4294967295
 8008116:	480b      	ldr	r0, [pc, #44]	; (8008144 <cppLoop+0x934>)
 8008118:	f7fa f8e8 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800811c:	f001 b8f9 	b.w	8009312 <cppLoop+0x1b02>
 8008120:	88e368f1 	.word	0x88e368f1
 8008124:	3ee4f8b5 	.word	0x3ee4f8b5
 8008128:	eb1c432d 	.word	0xeb1c432d
 800812c:	3f1a36e2 	.word	0x3f1a36e2
 8008130:	a0b5ed8d 	.word	0xa0b5ed8d
 8008134:	3eb0c6f7 	.word	0x3eb0c6f7
 8008138:	9999999a 	.word	0x9999999a
 800813c:	3fb99999 	.word	0x3fb99999
 8008140:	200005bc 	.word	0x200005bc
 8008144:	200005c8 	.word	0x200005c8
 8008148:	20041286 	.word	0x20041286
 800814c:	20041290 	.word	0x20041290
 8008150:	20041298 	.word	0x20041298
 8008154:	200412a0 	.word	0x200412a0
 8008158:	080198b8 	.word	0x080198b8
 800815c:	080198c0 	.word	0x080198c0
 8008160:	080198c8 	.word	0x080198c8
 8008164:	080198d0 	.word	0x080198d0
 8008168:	2001bc10 	.word	0x2001bc10
 800816c:	080198d8 	.word	0x080198d8
 8008170:	200412a8 	.word	0x200412a8
 8008174:	080198e4 	.word	0x080198e4
 8008178:	3f19999a 	.word	0x3f19999a
 800817c:	20041280 	.word	0x20041280
 8008180:	080198f0 	.word	0x080198f0
		else if(joy_stick.getValue() == JOY_L){
 8008184:	48b4      	ldr	r0, [pc, #720]	; (8008458 <cppLoop+0xc48>)
 8008186:	f7f9 ff91 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	bf0c      	ite	eq
 8008190:	2301      	moveq	r3, #1
 8008192:	2300      	movne	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d023      	beq.n	80081e2 <cppLoop+0x9d2>
			led.LR(-1, 1);
 800819a:	2201      	movs	r2, #1
 800819c:	f04f 31ff 	mov.w	r1, #4294967295
 80081a0:	48ae      	ldr	r0, [pc, #696]	; (800845c <cppLoop+0xc4c>)
 80081a2:	f7fa f8a3 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081a6:	2064      	movs	r0, #100	; 0x64
 80081a8:	f001 f9f6 	bl	8009598 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80081ac:	4bac      	ldr	r3, [pc, #688]	; (8008460 <cppLoop+0xc50>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7f8 f9e1 	bl	8000578 <__aeabi_f2d>
 80081b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008450 <cppLoop+0xc40>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 f87c 	bl	80002b8 <__aeabi_dsub>
 80081c0:	4603      	mov	r3, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	4618      	mov	r0, r3
 80081c6:	4621      	mov	r1, r4
 80081c8:	f7f8 fd26 	bl	8000c18 <__aeabi_d2f>
 80081cc:	4602      	mov	r2, r0
 80081ce:	4ba4      	ldr	r3, [pc, #656]	; (8008460 <cppLoop+0xc50>)
 80081d0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80081d2:	2200      	movs	r2, #0
 80081d4:	f04f 31ff 	mov.w	r1, #4294967295
 80081d8:	48a0      	ldr	r0, [pc, #640]	; (800845c <cppLoop+0xc4c>)
 80081da:	f7fa f887 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80081de:	f001 b898 	b.w	8009312 <cppLoop+0x1b02>
		else if(joy_stick.getValue() == JOY_C){
 80081e2:	489d      	ldr	r0, [pc, #628]	; (8008458 <cppLoop+0xc48>)
 80081e4:	f7f9 ff62 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	bf0c      	ite	eq
 80081ee:	2301      	moveq	r3, #1
 80081f0:	2300      	movne	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f001 808c 	beq.w	8009312 <cppLoop+0x1b02>
			led.LR(-1, 1);
 80081fa:	2201      	movs	r2, #1
 80081fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008200:	4896      	ldr	r0, [pc, #600]	; (800845c <cppLoop+0xc4c>)
 8008202:	f7fa f873 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008206:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800820a:	f001 f9c5 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800820e:	2300      	movs	r3, #0
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4b93      	ldr	r3, [pc, #588]	; (8008460 <cppLoop+0xc50>)
 8008214:	2201      	movs	r2, #1
 8008216:	4993      	ldr	r1, [pc, #588]	; (8008464 <cppLoop+0xc54>)
 8008218:	4893      	ldr	r0, [pc, #588]	; (8008468 <cppLoop+0xc58>)
 800821a:	f7f9 fb2f 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800821e:	4b90      	ldr	r3, [pc, #576]	; (8008460 <cppLoop+0xc50>)
 8008220:	edd3 7a00 	vldr	s15, [r3]
 8008224:	eeb0 0a67 	vmov.f32	s0, s15
 8008228:	4890      	ldr	r0, [pc, #576]	; (800846c <cppLoop+0xc5c>)
 800822a:	f7fb fce2 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800822e:	2200      	movs	r2, #0
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	4889      	ldr	r0, [pc, #548]	; (800845c <cppLoop+0xc4c>)
 8008236:	f7fa f859 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800823a:	f001 b86a 	b.w	8009312 <cppLoop+0x1b02>

	case 3:
		led.fullColor('Y');
 800823e:	2159      	movs	r1, #89	; 0x59
 8008240:	4886      	ldr	r0, [pc, #536]	; (800845c <cppLoop+0xc4c>)
 8008242:	f7f9 ff97 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008246:	f7f8 ff2b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800824a:	2100      	movs	r1, #0
 800824c:	2000      	movs	r0, #0
 800824e:	f7f8 ff37 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008252:	4b87      	ldr	r3, [pc, #540]	; (8008470 <cppLoop+0xc60>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f7f8 f98e 	bl	8000578 <__aeabi_f2d>
 800825c:	4603      	mov	r3, r0
 800825e:	460c      	mov	r4, r1
 8008260:	461a      	mov	r2, r3
 8008262:	4623      	mov	r3, r4
 8008264:	4883      	ldr	r0, [pc, #524]	; (8008474 <cppLoop+0xc64>)
 8008266:	f7f8 ff55 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800826a:	2101      	movs	r1, #1
 800826c:	2000      	movs	r0, #0
 800826e:	f7f8 ff27 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008272:	4b81      	ldr	r3, [pc, #516]	; (8008478 <cppLoop+0xc68>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f97e 	bl	8000578 <__aeabi_f2d>
 800827c:	4603      	mov	r3, r0
 800827e:	460c      	mov	r4, r1
 8008280:	461a      	mov	r2, r3
 8008282:	4623      	mov	r3, r4
 8008284:	487d      	ldr	r0, [pc, #500]	; (800847c <cppLoop+0xc6c>)
 8008286:	f7f8 ff45 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800828a:	4873      	ldr	r0, [pc, #460]	; (8008458 <cppLoop+0xc48>)
 800828c:	f7f9 ff0e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008290:	4603      	mov	r3, r0
 8008292:	2b02      	cmp	r3, #2
 8008294:	bf0c      	ite	eq
 8008296:	2301      	moveq	r3, #1
 8008298:	2300      	movne	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	f001 803a 	beq.w	8009316 <cppLoop+0x1b06>
			HAL_Delay(500);
 80082a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082a6:	f001 f977 	bl	8009598 <HAL_Delay>

			led.LR(1, -1);
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295
 80082ae:	2101      	movs	r1, #1
 80082b0:	486a      	ldr	r0, [pc, #424]	; (800845c <cppLoop+0xc4c>)
 80082b2:	f7fa f81b 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80082b6:	2101      	movs	r1, #1
 80082b8:	486c      	ldr	r0, [pc, #432]	; (800846c <cppLoop+0xc5c>)
 80082ba:	f7fb ff25 	bl	8004108 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80082be:	4b6e      	ldr	r3, [pc, #440]	; (8008478 <cppLoop+0xc68>)
 80082c0:	edd3 7a00 	vldr	s15, [r3]
 80082c4:	eeb0 0a67 	vmov.f32	s0, s15
 80082c8:	4868      	ldr	r0, [pc, #416]	; (800846c <cppLoop+0xc5c>)
 80082ca:	f7fb fc92 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80082ce:	4b68      	ldr	r3, [pc, #416]	; (8008470 <cppLoop+0xc60>)
 80082d0:	edd3 7a00 	vldr	s15, [r3]
 80082d4:	eeb0 0a67 	vmov.f32	s0, s15
 80082d8:	4864      	ldr	r0, [pc, #400]	; (800846c <cppLoop+0xc5c>)
 80082da:	f7fb fc9a 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80082de:	4b66      	ldr	r3, [pc, #408]	; (8008478 <cppLoop+0xc68>)
 80082e0:	edd3 7a00 	vldr	s15, [r3]
 80082e4:	eeb0 0a67 	vmov.f32	s0, s15
 80082e8:	4860      	ldr	r0, [pc, #384]	; (800846c <cppLoop+0xc5c>)
 80082ea:	f7fb fcb2 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80082ee:	485f      	ldr	r0, [pc, #380]	; (800846c <cppLoop+0xc5c>)
 80082f0:	f7fc f832 	bl	8004358 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80082f4:	485d      	ldr	r0, [pc, #372]	; (800846c <cppLoop+0xc5c>)
 80082f6:	f7fb ff45 	bl	8004184 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	2100      	movs	r1, #0
 8008300:	4856      	ldr	r0, [pc, #344]	; (800845c <cppLoop+0xc4c>)
 8008302:	f7f9 fff3 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008306:	f001 b806 	b.w	8009316 <cppLoop+0x1b06>

	case 4:
		led.fullColor('G');
 800830a:	2147      	movs	r1, #71	; 0x47
 800830c:	4853      	ldr	r0, [pc, #332]	; (800845c <cppLoop+0xc4c>)
 800830e:	f7f9 ff31 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008312:	f7f8 fec5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008316:	2100      	movs	r1, #0
 8008318:	2000      	movs	r0, #0
 800831a:	f7f8 fed1 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800831e:	4853      	ldr	r0, [pc, #332]	; (800846c <cppLoop+0xc5c>)
 8008320:	f7fb fcc7 	bl	8003cb2 <_ZN9LineTrace14getMaxVelocityEv>
 8008324:	ee10 3a10 	vmov	r3, s0
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 f925 	bl	8000578 <__aeabi_f2d>
 800832e:	4603      	mov	r3, r0
 8008330:	460c      	mov	r4, r1
 8008332:	461a      	mov	r2, r3
 8008334:	4623      	mov	r3, r4
 8008336:	484f      	ldr	r0, [pc, #316]	; (8008474 <cppLoop+0xc64>)
 8008338:	f7f8 feec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800833c:	2101      	movs	r1, #1
 800833e:	2000      	movs	r0, #0
 8008340:	f7f8 febe 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008344:	4849      	ldr	r0, [pc, #292]	; (800846c <cppLoop+0xc5c>)
 8008346:	f7fb fcd4 	bl	8003cf2 <_ZN9LineTrace14getMinVelocityEv>
 800834a:	ee10 3a10 	vmov	r3, s0
 800834e:	4618      	mov	r0, r3
 8008350:	f7f8 f912 	bl	8000578 <__aeabi_f2d>
 8008354:	4603      	mov	r3, r0
 8008356:	460c      	mov	r4, r1
 8008358:	461a      	mov	r2, r3
 800835a:	4623      	mov	r3, r4
 800835c:	4848      	ldr	r0, [pc, #288]	; (8008480 <cppLoop+0xc70>)
 800835e:	f7f8 fed9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008362:	483d      	ldr	r0, [pc, #244]	; (8008458 <cppLoop+0xc48>)
 8008364:	f7f9 fea2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008368:	4603      	mov	r3, r0
 800836a:	2b08      	cmp	r3, #8
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d022      	beq.n	80083be <cppLoop+0xbae>
			led.LR(-1, 1);
 8008378:	2201      	movs	r2, #1
 800837a:	f04f 31ff 	mov.w	r1, #4294967295
 800837e:	4837      	ldr	r0, [pc, #220]	; (800845c <cppLoop+0xc4c>)
 8008380:	f7f9 ffb4 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008384:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008388:	f001 f906 	bl	8009598 <HAL_Delay>

			selector_vel++;
 800838c:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <cppLoop+0xc74>)
 800838e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008392:	b29b      	uxth	r3, r3
 8008394:	3301      	adds	r3, #1
 8008396:	b29b      	uxth	r3, r3
 8008398:	b21a      	sxth	r2, r3
 800839a:	4b3a      	ldr	r3, [pc, #232]	; (8008484 <cppLoop+0xc74>)
 800839c:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800839e:	4b39      	ldr	r3, [pc, #228]	; (8008484 <cppLoop+0xc74>)
 80083a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	dd02      	ble.n	80083ae <cppLoop+0xb9e>
 80083a8:	4b36      	ldr	r3, [pc, #216]	; (8008484 <cppLoop+0xc74>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80083ae:	2200      	movs	r2, #0
 80083b0:	f04f 31ff 	mov.w	r1, #4294967295
 80083b4:	4829      	ldr	r0, [pc, #164]	; (800845c <cppLoop+0xc4c>)
 80083b6:	f7f9 ff99 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80083ba:	f000 bfae 	b.w	800931a <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_R){
 80083be:	4826      	ldr	r0, [pc, #152]	; (8008458 <cppLoop+0xc48>)
 80083c0:	f7f9 fe74 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d059      	beq.n	8008488 <cppLoop+0xc78>
			led.LR(-1, 1);
 80083d4:	2201      	movs	r2, #1
 80083d6:	f04f 31ff 	mov.w	r1, #4294967295
 80083da:	4820      	ldr	r0, [pc, #128]	; (800845c <cppLoop+0xc4c>)
 80083dc:	f7f9 ff86 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083e0:	2064      	movs	r0, #100	; 0x64
 80083e2:	f001 f8d9 	bl	8009598 <HAL_Delay>
			if(selector_vel == 0)
 80083e6:	4b27      	ldr	r3, [pc, #156]	; (8008484 <cppLoop+0xc74>)
 80083e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d113      	bne.n	8008418 <cppLoop+0xc08>
				adj_max_velocity = adj_max_velocity + 0.1;
 80083f0:	4b1f      	ldr	r3, [pc, #124]	; (8008470 <cppLoop+0xc60>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7f8 f8bf 	bl	8000578 <__aeabi_f2d>
 80083fa:	a315      	add	r3, pc, #84	; (adr r3, 8008450 <cppLoop+0xc40>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f7 ff5c 	bl	80002bc <__adddf3>
 8008404:	4603      	mov	r3, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4618      	mov	r0, r3
 800840a:	4621      	mov	r1, r4
 800840c:	f7f8 fc04 	bl	8000c18 <__aeabi_d2f>
 8008410:	4602      	mov	r2, r0
 8008412:	4b17      	ldr	r3, [pc, #92]	; (8008470 <cppLoop+0xc60>)
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e012      	b.n	800843e <cppLoop+0xc2e>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008418:	4b17      	ldr	r3, [pc, #92]	; (8008478 <cppLoop+0xc68>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f7f8 f8ab 	bl	8000578 <__aeabi_f2d>
 8008422:	a30b      	add	r3, pc, #44	; (adr r3, 8008450 <cppLoop+0xc40>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f7 ff48 	bl	80002bc <__adddf3>
 800842c:	4603      	mov	r3, r0
 800842e:	460c      	mov	r4, r1
 8008430:	4618      	mov	r0, r3
 8008432:	4621      	mov	r1, r4
 8008434:	f7f8 fbf0 	bl	8000c18 <__aeabi_d2f>
 8008438:	4602      	mov	r2, r0
 800843a:	4b0f      	ldr	r3, [pc, #60]	; (8008478 <cppLoop+0xc68>)
 800843c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800843e:	2200      	movs	r2, #0
 8008440:	f04f 31ff 	mov.w	r1, #4294967295
 8008444:	4805      	ldr	r0, [pc, #20]	; (800845c <cppLoop+0xc4c>)
 8008446:	f7f9 ff51 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800844a:	f000 bf66 	b.w	800931a <cppLoop+0x1b0a>
 800844e:	bf00      	nop
 8008450:	9999999a 	.word	0x9999999a
 8008454:	3fb99999 	.word	0x3fb99999
 8008458:	200005bc 	.word	0x200005bc
 800845c:	200005c8 	.word	0x200005c8
 8008460:	200412a8 	.word	0x200412a8
 8008464:	080198fc 	.word	0x080198fc
 8008468:	080198c0 	.word	0x080198c0
 800846c:	2001bc10 	.word	0x2001bc10
 8008470:	200412b0 	.word	0x200412b0
 8008474:	08019908 	.word	0x08019908
 8008478:	200412c0 	.word	0x200412c0
 800847c:	080198e4 	.word	0x080198e4
 8008480:	080198f0 	.word	0x080198f0
 8008484:	2004128c 	.word	0x2004128c
		else if(joy_stick.getValue() == JOY_L){
 8008488:	48bb      	ldr	r0, [pc, #748]	; (8008778 <cppLoop+0xf68>)
 800848a:	f7f9 fe0f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800848e:	4603      	mov	r3, r0
 8008490:	2b01      	cmp	r3, #1
 8008492:	bf0c      	ite	eq
 8008494:	2301      	moveq	r3, #1
 8008496:	2300      	movne	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d03c      	beq.n	8008518 <cppLoop+0xd08>
			led.LR(-1, 1);
 800849e:	2201      	movs	r2, #1
 80084a0:	f04f 31ff 	mov.w	r1, #4294967295
 80084a4:	48b5      	ldr	r0, [pc, #724]	; (800877c <cppLoop+0xf6c>)
 80084a6:	f7f9 ff21 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084aa:	2064      	movs	r0, #100	; 0x64
 80084ac:	f001 f874 	bl	8009598 <HAL_Delay>
			if(selector_vel == 0)
 80084b0:	4bb3      	ldr	r3, [pc, #716]	; (8008780 <cppLoop+0xf70>)
 80084b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d113      	bne.n	80084e2 <cppLoop+0xcd2>
				adj_max_velocity = adj_max_velocity - 0.1;
 80084ba:	4bb2      	ldr	r3, [pc, #712]	; (8008784 <cppLoop+0xf74>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f8 f85a 	bl	8000578 <__aeabi_f2d>
 80084c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8008770 <cppLoop+0xf60>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fef5 	bl	80002b8 <__aeabi_dsub>
 80084ce:	4603      	mov	r3, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	4618      	mov	r0, r3
 80084d4:	4621      	mov	r1, r4
 80084d6:	f7f8 fb9f 	bl	8000c18 <__aeabi_d2f>
 80084da:	4602      	mov	r2, r0
 80084dc:	4ba9      	ldr	r3, [pc, #676]	; (8008784 <cppLoop+0xf74>)
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e012      	b.n	8008508 <cppLoop+0xcf8>
				adj_min_velocity = adj_min_velocity - 0.1;
 80084e2:	4ba9      	ldr	r3, [pc, #676]	; (8008788 <cppLoop+0xf78>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 f846 	bl	8000578 <__aeabi_f2d>
 80084ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8008770 <cppLoop+0xf60>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f7 fee1 	bl	80002b8 <__aeabi_dsub>
 80084f6:	4603      	mov	r3, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	4618      	mov	r0, r3
 80084fc:	4621      	mov	r1, r4
 80084fe:	f7f8 fb8b 	bl	8000c18 <__aeabi_d2f>
 8008502:	4602      	mov	r2, r0
 8008504:	4ba0      	ldr	r3, [pc, #640]	; (8008788 <cppLoop+0xf78>)
 8008506:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008508:	2200      	movs	r2, #0
 800850a:	f04f 31ff 	mov.w	r1, #4294967295
 800850e:	489b      	ldr	r0, [pc, #620]	; (800877c <cppLoop+0xf6c>)
 8008510:	f7f9 feec 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008514:	f000 bf01 	b.w	800931a <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_C){
 8008518:	4897      	ldr	r0, [pc, #604]	; (8008778 <cppLoop+0xf68>)
 800851a:	f7f9 fdc7 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800851e:	4603      	mov	r3, r0
 8008520:	2b02      	cmp	r3, #2
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 86f5 	beq.w	800931a <cppLoop+0x1b0a>
			led.LR(-1, 1);
 8008530:	2201      	movs	r2, #1
 8008532:	f04f 31ff 	mov.w	r1, #4294967295
 8008536:	4891      	ldr	r0, [pc, #580]	; (800877c <cppLoop+0xf6c>)
 8008538:	f7f9 fed8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800853c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008540:	f001 f82a 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008544:	2300      	movs	r3, #0
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4b8e      	ldr	r3, [pc, #568]	; (8008784 <cppLoop+0xf74>)
 800854a:	2201      	movs	r2, #1
 800854c:	498f      	ldr	r1, [pc, #572]	; (800878c <cppLoop+0xf7c>)
 800854e:	4890      	ldr	r0, [pc, #576]	; (8008790 <cppLoop+0xf80>)
 8008550:	f7f9 f994 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008554:	2300      	movs	r3, #0
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4b8b      	ldr	r3, [pc, #556]	; (8008788 <cppLoop+0xf78>)
 800855a:	2201      	movs	r2, #1
 800855c:	498d      	ldr	r1, [pc, #564]	; (8008794 <cppLoop+0xf84>)
 800855e:	488c      	ldr	r0, [pc, #560]	; (8008790 <cppLoop+0xf80>)
 8008560:	f7f9 f98c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008564:	4b87      	ldr	r3, [pc, #540]	; (8008784 <cppLoop+0xf74>)
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	eeb0 0a67 	vmov.f32	s0, s15
 800856e:	488a      	ldr	r0, [pc, #552]	; (8008798 <cppLoop+0xf88>)
 8008570:	f7fb fb4f 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008574:	4b84      	ldr	r3, [pc, #528]	; (8008788 <cppLoop+0xf78>)
 8008576:	edd3 7a00 	vldr	s15, [r3]
 800857a:	eeb0 0a67 	vmov.f32	s0, s15
 800857e:	4886      	ldr	r0, [pc, #536]	; (8008798 <cppLoop+0xf88>)
 8008580:	f7fb fb67 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008584:	2200      	movs	r2, #0
 8008586:	f04f 31ff 	mov.w	r1, #4294967295
 800858a:	487c      	ldr	r0, [pc, #496]	; (800877c <cppLoop+0xf6c>)
 800858c:	f7f9 feae 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008590:	f000 bec3 	b.w	800931a <cppLoop+0x1b0a>

	case 5:
		led.fullColor('M');
 8008594:	214d      	movs	r1, #77	; 0x4d
 8008596:	4879      	ldr	r0, [pc, #484]	; (800877c <cppLoop+0xf6c>)
 8008598:	f7f9 fdec 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800859c:	f7f8 fd80 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085a0:	2100      	movs	r1, #0
 80085a2:	2000      	movs	r0, #0
 80085a4:	f7f8 fd8c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80085a8:	4b7c      	ldr	r3, [pc, #496]	; (800879c <cppLoop+0xf8c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 ffe3 	bl	8000578 <__aeabi_f2d>
 80085b2:	4603      	mov	r3, r0
 80085b4:	460c      	mov	r4, r1
 80085b6:	461a      	mov	r2, r3
 80085b8:	4623      	mov	r3, r4
 80085ba:	4879      	ldr	r0, [pc, #484]	; (80087a0 <cppLoop+0xf90>)
 80085bc:	f7f8 fdaa 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085c0:	2101      	movs	r1, #1
 80085c2:	2000      	movs	r0, #0
 80085c4:	f7f8 fd7c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80085c8:	4b76      	ldr	r3, [pc, #472]	; (80087a4 <cppLoop+0xf94>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f7 ffd3 	bl	8000578 <__aeabi_f2d>
 80085d2:	4603      	mov	r3, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	461a      	mov	r2, r3
 80085d8:	4623      	mov	r3, r4
 80085da:	4873      	ldr	r0, [pc, #460]	; (80087a8 <cppLoop+0xf98>)
 80085dc:	f7f8 fd9a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80085e0:	4865      	ldr	r0, [pc, #404]	; (8008778 <cppLoop+0xf68>)
 80085e2:	f7f9 fd63 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8693 	beq.w	800931e <cppLoop+0x1b0e>
			HAL_Delay(500);
 80085f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085fc:	f000 ffcc 	bl	8009598 <HAL_Delay>

			led.LR(1, -1);
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	2101      	movs	r1, #1
 8008606:	485d      	ldr	r0, [pc, #372]	; (800877c <cppLoop+0xf6c>)
 8008608:	f7f9 fe70 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800860c:	2102      	movs	r1, #2
 800860e:	4862      	ldr	r0, [pc, #392]	; (8008798 <cppLoop+0xf88>)
 8008610:	f7fb fd7a 	bl	8004108 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008614:	4b63      	ldr	r3, [pc, #396]	; (80087a4 <cppLoop+0xf94>)
 8008616:	edd3 7a00 	vldr	s15, [r3]
 800861a:	eeb0 0a67 	vmov.f32	s0, s15
 800861e:	485e      	ldr	r0, [pc, #376]	; (8008798 <cppLoop+0xf88>)
 8008620:	f7fb fae7 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008624:	4b5d      	ldr	r3, [pc, #372]	; (800879c <cppLoop+0xf8c>)
 8008626:	edd3 7a00 	vldr	s15, [r3]
 800862a:	eeb0 0a67 	vmov.f32	s0, s15
 800862e:	485a      	ldr	r0, [pc, #360]	; (8008798 <cppLoop+0xf88>)
 8008630:	f7fb faff 	bl	8003c32 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008634:	4b5b      	ldr	r3, [pc, #364]	; (80087a4 <cppLoop+0xf94>)
 8008636:	edd3 7a00 	vldr	s15, [r3]
 800863a:	eeb0 0a67 	vmov.f32	s0, s15
 800863e:	4856      	ldr	r0, [pc, #344]	; (8008798 <cppLoop+0xf88>)
 8008640:	f7fb fb17 	bl	8003c72 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008644:	4854      	ldr	r0, [pc, #336]	; (8008798 <cppLoop+0xf88>)
 8008646:	f7fb fe87 	bl	8004358 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800864a:	4853      	ldr	r0, [pc, #332]	; (8008798 <cppLoop+0xf88>)
 800864c:	f7fb fd9a 	bl	8004184 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	2100      	movs	r1, #0
 8008656:	4849      	ldr	r0, [pc, #292]	; (800877c <cppLoop+0xf6c>)
 8008658:	f7f9 fe48 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800865c:	f000 be5f 	b.w	800931e <cppLoop+0x1b0e>

	case 6:
		led.fullColor('R');
 8008660:	2152      	movs	r1, #82	; 0x52
 8008662:	4846      	ldr	r0, [pc, #280]	; (800877c <cppLoop+0xf6c>)
 8008664:	f7f9 fd86 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008668:	f7f8 fd1a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800866c:	2100      	movs	r1, #0
 800866e:	2000      	movs	r0, #0
 8008670:	f7f8 fd26 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008674:	4848      	ldr	r0, [pc, #288]	; (8008798 <cppLoop+0xf88>)
 8008676:	f7fb fb2c 	bl	8003cd2 <_ZN9LineTrace15getMaxVelocity2Ev>
 800867a:	ee10 3a10 	vmov	r3, s0
 800867e:	4618      	mov	r0, r3
 8008680:	f7f7 ff7a 	bl	8000578 <__aeabi_f2d>
 8008684:	4603      	mov	r3, r0
 8008686:	460c      	mov	r4, r1
 8008688:	461a      	mov	r2, r3
 800868a:	4623      	mov	r3, r4
 800868c:	4844      	ldr	r0, [pc, #272]	; (80087a0 <cppLoop+0xf90>)
 800868e:	f7f8 fd41 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008692:	2101      	movs	r1, #1
 8008694:	2000      	movs	r0, #0
 8008696:	f7f8 fd13 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800869a:	483f      	ldr	r0, [pc, #252]	; (8008798 <cppLoop+0xf88>)
 800869c:	f7fb fb39 	bl	8003d12 <_ZN9LineTrace15getMinVelocity2Ev>
 80086a0:	ee10 3a10 	vmov	r3, s0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7f7 ff67 	bl	8000578 <__aeabi_f2d>
 80086aa:	4603      	mov	r3, r0
 80086ac:	460c      	mov	r4, r1
 80086ae:	461a      	mov	r2, r3
 80086b0:	4623      	mov	r3, r4
 80086b2:	483e      	ldr	r0, [pc, #248]	; (80087ac <cppLoop+0xf9c>)
 80086b4:	f7f8 fd2e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80086b8:	482f      	ldr	r0, [pc, #188]	; (8008778 <cppLoop+0xf68>)
 80086ba:	f7f9 fcf7 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	bf0c      	ite	eq
 80086c4:	2301      	moveq	r3, #1
 80086c6:	2300      	movne	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d022      	beq.n	8008714 <cppLoop+0xf04>
			led.LR(-1, 1);
 80086ce:	2201      	movs	r2, #1
 80086d0:	f04f 31ff 	mov.w	r1, #4294967295
 80086d4:	4829      	ldr	r0, [pc, #164]	; (800877c <cppLoop+0xf6c>)
 80086d6:	f7f9 fe09 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086de:	f000 ff5b 	bl	8009598 <HAL_Delay>

			selector_vel2++;
 80086e2:	4b33      	ldr	r3, [pc, #204]	; (80087b0 <cppLoop+0xfa0>)
 80086e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3301      	adds	r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	b21a      	sxth	r2, r3
 80086f0:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <cppLoop+0xfa0>)
 80086f2:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80086f4:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <cppLoop+0xfa0>)
 80086f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	dd02      	ble.n	8008704 <cppLoop+0xef4>
 80086fe:	4b2c      	ldr	r3, [pc, #176]	; (80087b0 <cppLoop+0xfa0>)
 8008700:	2200      	movs	r2, #0
 8008702:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008704:	2200      	movs	r2, #0
 8008706:	f04f 31ff 	mov.w	r1, #4294967295
 800870a:	481c      	ldr	r0, [pc, #112]	; (800877c <cppLoop+0xf6c>)
 800870c:	f7f9 fdee 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008710:	f000 be07 	b.w	8009322 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_R){
 8008714:	4818      	ldr	r0, [pc, #96]	; (8008778 <cppLoop+0xf68>)
 8008716:	f7f9 fcc9 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800871a:	4603      	mov	r3, r0
 800871c:	2b10      	cmp	r3, #16
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d05f      	beq.n	80087ea <cppLoop+0xfda>
			led.LR(-1, 1);
 800872a:	2201      	movs	r2, #1
 800872c:	f04f 31ff 	mov.w	r1, #4294967295
 8008730:	4812      	ldr	r0, [pc, #72]	; (800877c <cppLoop+0xf6c>)
 8008732:	f7f9 fddb 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008736:	2064      	movs	r0, #100	; 0x64
 8008738:	f000 ff2e 	bl	8009598 <HAL_Delay>
			if(selector_vel2 == 0)
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <cppLoop+0xfa0>)
 800873e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d136      	bne.n	80087b4 <cppLoop+0xfa4>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008746:	4b15      	ldr	r3, [pc, #84]	; (800879c <cppLoop+0xf8c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f7f7 ff14 	bl	8000578 <__aeabi_f2d>
 8008750:	a307      	add	r3, pc, #28	; (adr r3, 8008770 <cppLoop+0xf60>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f7f7 fdb1 	bl	80002bc <__adddf3>
 800875a:	4603      	mov	r3, r0
 800875c:	460c      	mov	r4, r1
 800875e:	4618      	mov	r0, r3
 8008760:	4621      	mov	r1, r4
 8008762:	f7f8 fa59 	bl	8000c18 <__aeabi_d2f>
 8008766:	4602      	mov	r2, r0
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <cppLoop+0xf8c>)
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e035      	b.n	80087da <cppLoop+0xfca>
 800876e:	bf00      	nop
 8008770:	9999999a 	.word	0x9999999a
 8008774:	3fb99999 	.word	0x3fb99999
 8008778:	200005bc 	.word	0x200005bc
 800877c:	200005c8 	.word	0x200005c8
 8008780:	2004128c 	.word	0x2004128c
 8008784:	200412b0 	.word	0x200412b0
 8008788:	200412c0 	.word	0x200412c0
 800878c:	08019914 	.word	0x08019914
 8008790:	080198c0 	.word	0x080198c0
 8008794:	08019920 	.word	0x08019920
 8008798:	2001bc10 	.word	0x2001bc10
 800879c:	200412b8 	.word	0x200412b8
 80087a0:	0801992c 	.word	0x0801992c
 80087a4:	200412c8 	.word	0x200412c8
 80087a8:	080198e4 	.word	0x080198e4
 80087ac:	080198f0 	.word	0x080198f0
 80087b0:	2004128e 	.word	0x2004128e
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80087b4:	4bba      	ldr	r3, [pc, #744]	; (8008aa0 <cppLoop+0x1290>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f7 fedd 	bl	8000578 <__aeabi_f2d>
 80087be:	a3b6      	add	r3, pc, #728	; (adr r3, 8008a98 <cppLoop+0x1288>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fd7a 	bl	80002bc <__adddf3>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4618      	mov	r0, r3
 80087ce:	4621      	mov	r1, r4
 80087d0:	f7f8 fa22 	bl	8000c18 <__aeabi_d2f>
 80087d4:	4602      	mov	r2, r0
 80087d6:	4bb2      	ldr	r3, [pc, #712]	; (8008aa0 <cppLoop+0x1290>)
 80087d8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087da:	2200      	movs	r2, #0
 80087dc:	f04f 31ff 	mov.w	r1, #4294967295
 80087e0:	48b0      	ldr	r0, [pc, #704]	; (8008aa4 <cppLoop+0x1294>)
 80087e2:	f7f9 fd83 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80087e6:	f000 bd9c 	b.w	8009322 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_L){
 80087ea:	48af      	ldr	r0, [pc, #700]	; (8008aa8 <cppLoop+0x1298>)
 80087ec:	f7f9 fc5e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d03c      	beq.n	800887a <cppLoop+0x106a>
			led.LR(-1, 1);
 8008800:	2201      	movs	r2, #1
 8008802:	f04f 31ff 	mov.w	r1, #4294967295
 8008806:	48a7      	ldr	r0, [pc, #668]	; (8008aa4 <cppLoop+0x1294>)
 8008808:	f7f9 fd70 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800880c:	2064      	movs	r0, #100	; 0x64
 800880e:	f000 fec3 	bl	8009598 <HAL_Delay>
			if(selector_vel2 == 0)
 8008812:	4ba6      	ldr	r3, [pc, #664]	; (8008aac <cppLoop+0x129c>)
 8008814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d113      	bne.n	8008844 <cppLoop+0x1034>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800881c:	4ba4      	ldr	r3, [pc, #656]	; (8008ab0 <cppLoop+0x12a0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f7f7 fea9 	bl	8000578 <__aeabi_f2d>
 8008826:	a39c      	add	r3, pc, #624	; (adr r3, 8008a98 <cppLoop+0x1288>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f7 fd44 	bl	80002b8 <__aeabi_dsub>
 8008830:	4603      	mov	r3, r0
 8008832:	460c      	mov	r4, r1
 8008834:	4618      	mov	r0, r3
 8008836:	4621      	mov	r1, r4
 8008838:	f7f8 f9ee 	bl	8000c18 <__aeabi_d2f>
 800883c:	4602      	mov	r2, r0
 800883e:	4b9c      	ldr	r3, [pc, #624]	; (8008ab0 <cppLoop+0x12a0>)
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e012      	b.n	800886a <cppLoop+0x105a>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008844:	4b96      	ldr	r3, [pc, #600]	; (8008aa0 <cppLoop+0x1290>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f7f7 fe95 	bl	8000578 <__aeabi_f2d>
 800884e:	a392      	add	r3, pc, #584	; (adr r3, 8008a98 <cppLoop+0x1288>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fd30 	bl	80002b8 <__aeabi_dsub>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	4618      	mov	r0, r3
 800885e:	4621      	mov	r1, r4
 8008860:	f7f8 f9da 	bl	8000c18 <__aeabi_d2f>
 8008864:	4602      	mov	r2, r0
 8008866:	4b8e      	ldr	r3, [pc, #568]	; (8008aa0 <cppLoop+0x1290>)
 8008868:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800886a:	2200      	movs	r2, #0
 800886c:	f04f 31ff 	mov.w	r1, #4294967295
 8008870:	488c      	ldr	r0, [pc, #560]	; (8008aa4 <cppLoop+0x1294>)
 8008872:	f7f9 fd3b 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008876:	f000 bd54 	b.w	8009322 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_C){
 800887a:	488b      	ldr	r0, [pc, #556]	; (8008aa8 <cppLoop+0x1298>)
 800887c:	f7f9 fc16 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008880:	4603      	mov	r3, r0
 8008882:	2b02      	cmp	r3, #2
 8008884:	bf0c      	ite	eq
 8008886:	2301      	moveq	r3, #1
 8008888:	2300      	movne	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8548 	beq.w	8009322 <cppLoop+0x1b12>
			led.LR(-1, 1);
 8008892:	2201      	movs	r2, #1
 8008894:	f04f 31ff 	mov.w	r1, #4294967295
 8008898:	4882      	ldr	r0, [pc, #520]	; (8008aa4 <cppLoop+0x1294>)
 800889a:	f7f9 fd27 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800889e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088a2:	f000 fe79 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80088a6:	2300      	movs	r3, #0
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	4b81      	ldr	r3, [pc, #516]	; (8008ab0 <cppLoop+0x12a0>)
 80088ac:	2201      	movs	r2, #1
 80088ae:	4981      	ldr	r1, [pc, #516]	; (8008ab4 <cppLoop+0x12a4>)
 80088b0:	4881      	ldr	r0, [pc, #516]	; (8008ab8 <cppLoop+0x12a8>)
 80088b2:	f7f8 ffe3 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	4b79      	ldr	r3, [pc, #484]	; (8008aa0 <cppLoop+0x1290>)
 80088bc:	2201      	movs	r2, #1
 80088be:	497f      	ldr	r1, [pc, #508]	; (8008abc <cppLoop+0x12ac>)
 80088c0:	487d      	ldr	r0, [pc, #500]	; (8008ab8 <cppLoop+0x12a8>)
 80088c2:	f7f8 ffdb 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80088c6:	4b7a      	ldr	r3, [pc, #488]	; (8008ab0 <cppLoop+0x12a0>)
 80088c8:	edd3 7a00 	vldr	s15, [r3]
 80088cc:	eeb0 0a67 	vmov.f32	s0, s15
 80088d0:	487b      	ldr	r0, [pc, #492]	; (8008ac0 <cppLoop+0x12b0>)
 80088d2:	f7fb f9ae 	bl	8003c32 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80088d6:	4b72      	ldr	r3, [pc, #456]	; (8008aa0 <cppLoop+0x1290>)
 80088d8:	edd3 7a00 	vldr	s15, [r3]
 80088dc:	eeb0 0a67 	vmov.f32	s0, s15
 80088e0:	4877      	ldr	r0, [pc, #476]	; (8008ac0 <cppLoop+0x12b0>)
 80088e2:	f7fb f9c6 	bl	8003c72 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80088e6:	2200      	movs	r2, #0
 80088e8:	f04f 31ff 	mov.w	r1, #4294967295
 80088ec:	486d      	ldr	r0, [pc, #436]	; (8008aa4 <cppLoop+0x1294>)
 80088ee:	f7f9 fcfd 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80088f2:	f000 bd16 	b.w	8009322 <cppLoop+0x1b12>

	case 7:
		led.fullColor('W');
 80088f6:	2157      	movs	r1, #87	; 0x57
 80088f8:	486a      	ldr	r0, [pc, #424]	; (8008aa4 <cppLoop+0x1294>)
 80088fa:	f7f9 fc3b 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088fe:	f7f8 fbcf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008902:	2100      	movs	r1, #0
 8008904:	2000      	movs	r0, #0
 8008906:	f7f8 fbdb 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800890a:	486d      	ldr	r0, [pc, #436]	; (8008ac0 <cppLoop+0x12b0>)
 800890c:	f7fb fa45 	bl	8003d9a <_ZN9LineTrace9getMaxAccEv>
 8008910:	ee10 3a10 	vmov	r3, s0
 8008914:	4618      	mov	r0, r3
 8008916:	f7f7 fe2f 	bl	8000578 <__aeabi_f2d>
 800891a:	4603      	mov	r3, r0
 800891c:	460c      	mov	r4, r1
 800891e:	461a      	mov	r2, r3
 8008920:	4623      	mov	r3, r4
 8008922:	4868      	ldr	r0, [pc, #416]	; (8008ac4 <cppLoop+0x12b4>)
 8008924:	f7f8 fbf6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008928:	2101      	movs	r1, #1
 800892a:	2000      	movs	r0, #0
 800892c:	f7f8 fbc8 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008930:	4863      	ldr	r0, [pc, #396]	; (8008ac0 <cppLoop+0x12b0>)
 8008932:	f7fb fa68 	bl	8003e06 <_ZN9LineTrace9getMaxDecEv>
 8008936:	ee10 3a10 	vmov	r3, s0
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe1c 	bl	8000578 <__aeabi_f2d>
 8008940:	4603      	mov	r3, r0
 8008942:	460c      	mov	r4, r1
 8008944:	461a      	mov	r2, r3
 8008946:	4623      	mov	r3, r4
 8008948:	485f      	ldr	r0, [pc, #380]	; (8008ac8 <cppLoop+0x12b8>)
 800894a:	f7f8 fbe3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800894e:	4856      	ldr	r0, [pc, #344]	; (8008aa8 <cppLoop+0x1298>)
 8008950:	f7f9 fbac 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008954:	4603      	mov	r3, r0
 8008956:	2b08      	cmp	r3, #8
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d022      	beq.n	80089aa <cppLoop+0x119a>
			led.LR(-1, 1);
 8008964:	2201      	movs	r2, #1
 8008966:	f04f 31ff 	mov.w	r1, #4294967295
 800896a:	484e      	ldr	r0, [pc, #312]	; (8008aa4 <cppLoop+0x1294>)
 800896c:	f7f9 fcbe 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008970:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008974:	f000 fe10 	bl	8009598 <HAL_Delay>

			selector_acc++;
 8008978:	4b54      	ldr	r3, [pc, #336]	; (8008acc <cppLoop+0x12bc>)
 800897a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800897e:	b29b      	uxth	r3, r3
 8008980:	3301      	adds	r3, #1
 8008982:	b29b      	uxth	r3, r3
 8008984:	b21a      	sxth	r2, r3
 8008986:	4b51      	ldr	r3, [pc, #324]	; (8008acc <cppLoop+0x12bc>)
 8008988:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800898a:	4b50      	ldr	r3, [pc, #320]	; (8008acc <cppLoop+0x12bc>)
 800898c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008990:	2b01      	cmp	r3, #1
 8008992:	dd02      	ble.n	800899a <cppLoop+0x118a>
 8008994:	4b4d      	ldr	r3, [pc, #308]	; (8008acc <cppLoop+0x12bc>)
 8008996:	2200      	movs	r2, #0
 8008998:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800899a:	2200      	movs	r2, #0
 800899c:	f04f 31ff 	mov.w	r1, #4294967295
 80089a0:	4840      	ldr	r0, [pc, #256]	; (8008aa4 <cppLoop+0x1294>)
 80089a2:	f7f9 fca3 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80089a6:	f000 bcbe 	b.w	8009326 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_R){
 80089aa:	483f      	ldr	r0, [pc, #252]	; (8008aa8 <cppLoop+0x1298>)
 80089ac:	f7f9 fb7e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	bf0c      	ite	eq
 80089b6:	2301      	moveq	r3, #1
 80089b8:	2300      	movne	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d03c      	beq.n	8008a3a <cppLoop+0x122a>
			led.LR(-1, 1);
 80089c0:	2201      	movs	r2, #1
 80089c2:	f04f 31ff 	mov.w	r1, #4294967295
 80089c6:	4837      	ldr	r0, [pc, #220]	; (8008aa4 <cppLoop+0x1294>)
 80089c8:	f7f9 fc90 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089cc:	2064      	movs	r0, #100	; 0x64
 80089ce:	f000 fde3 	bl	8009598 <HAL_Delay>
			if(selector_acc == 0){
 80089d2:	4b3e      	ldr	r3, [pc, #248]	; (8008acc <cppLoop+0x12bc>)
 80089d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d113      	bne.n	8008a04 <cppLoop+0x11f4>
				adj_acc = adj_acc + 0.1;
 80089dc:	4b3c      	ldr	r3, [pc, #240]	; (8008ad0 <cppLoop+0x12c0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7f7 fdc9 	bl	8000578 <__aeabi_f2d>
 80089e6:	a32c      	add	r3, pc, #176	; (adr r3, 8008a98 <cppLoop+0x1288>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f7f7 fc66 	bl	80002bc <__adddf3>
 80089f0:	4603      	mov	r3, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	4618      	mov	r0, r3
 80089f6:	4621      	mov	r1, r4
 80089f8:	f7f8 f90e 	bl	8000c18 <__aeabi_d2f>
 80089fc:	4602      	mov	r2, r0
 80089fe:	4b34      	ldr	r3, [pc, #208]	; (8008ad0 <cppLoop+0x12c0>)
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	e012      	b.n	8008a2a <cppLoop+0x121a>
				adj_dec = adj_dec + 0.1;
 8008a04:	4b33      	ldr	r3, [pc, #204]	; (8008ad4 <cppLoop+0x12c4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fdb5 	bl	8000578 <__aeabi_f2d>
 8008a0e:	a322      	add	r3, pc, #136	; (adr r3, 8008a98 <cppLoop+0x1288>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fc52 	bl	80002bc <__adddf3>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f7f8 f8fa 	bl	8000c18 <__aeabi_d2f>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <cppLoop+0x12c4>)
 8008a28:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a30:	481c      	ldr	r0, [pc, #112]	; (8008aa4 <cppLoop+0x1294>)
 8008a32:	f7f9 fc5b 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008a36:	f000 bc76 	b.w	8009326 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_L){
 8008a3a:	481b      	ldr	r0, [pc, #108]	; (8008aa8 <cppLoop+0x1298>)
 8008a3c:	f7f9 fb36 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	bf0c      	ite	eq
 8008a46:	2301      	moveq	r3, #1
 8008a48:	2300      	movne	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d05e      	beq.n	8008b0e <cppLoop+0x12fe>
			led.LR(-1, 1);
 8008a50:	2201      	movs	r2, #1
 8008a52:	f04f 31ff 	mov.w	r1, #4294967295
 8008a56:	4813      	ldr	r0, [pc, #76]	; (8008aa4 <cppLoop+0x1294>)
 8008a58:	f7f9 fc48 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a5c:	2064      	movs	r0, #100	; 0x64
 8008a5e:	f000 fd9b 	bl	8009598 <HAL_Delay>
			if(selector_acc == 0){
 8008a62:	4b1a      	ldr	r3, [pc, #104]	; (8008acc <cppLoop+0x12bc>)
 8008a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d135      	bne.n	8008ad8 <cppLoop+0x12c8>
				adj_acc = adj_acc - 0.1;
 8008a6c:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <cppLoop+0x12c0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7f7 fd81 	bl	8000578 <__aeabi_f2d>
 8008a76:	a308      	add	r3, pc, #32	; (adr r3, 8008a98 <cppLoop+0x1288>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fc1c 	bl	80002b8 <__aeabi_dsub>
 8008a80:	4603      	mov	r3, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4618      	mov	r0, r3
 8008a86:	4621      	mov	r1, r4
 8008a88:	f7f8 f8c6 	bl	8000c18 <__aeabi_d2f>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <cppLoop+0x12c0>)
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e034      	b.n	8008afe <cppLoop+0x12ee>
 8008a94:	f3af 8000 	nop.w
 8008a98:	9999999a 	.word	0x9999999a
 8008a9c:	3fb99999 	.word	0x3fb99999
 8008aa0:	200412c8 	.word	0x200412c8
 8008aa4:	200005c8 	.word	0x200005c8
 8008aa8:	200005bc 	.word	0x200005bc
 8008aac:	2004128e 	.word	0x2004128e
 8008ab0:	200412b8 	.word	0x200412b8
 8008ab4:	08019938 	.word	0x08019938
 8008ab8:	080198c0 	.word	0x080198c0
 8008abc:	08019944 	.word	0x08019944
 8008ac0:	2001bc10 	.word	0x2001bc10
 8008ac4:	08019950 	.word	0x08019950
 8008ac8:	0801995c 	.word	0x0801995c
 8008acc:	20041288 	.word	0x20041288
 8008ad0:	200412d0 	.word	0x200412d0
 8008ad4:	200412d8 	.word	0x200412d8
				adj_dec = adj_dec - 0.1;
 8008ad8:	4bbd      	ldr	r3, [pc, #756]	; (8008dd0 <cppLoop+0x15c0>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fd4b 	bl	8000578 <__aeabi_f2d>
 8008ae2:	a3b9      	add	r3, pc, #740	; (adr r3, 8008dc8 <cppLoop+0x15b8>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fbe6 	bl	80002b8 <__aeabi_dsub>
 8008aec:	4603      	mov	r3, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	4618      	mov	r0, r3
 8008af2:	4621      	mov	r1, r4
 8008af4:	f7f8 f890 	bl	8000c18 <__aeabi_d2f>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4bb5      	ldr	r3, [pc, #724]	; (8008dd0 <cppLoop+0x15c0>)
 8008afc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008afe:	2200      	movs	r2, #0
 8008b00:	f04f 31ff 	mov.w	r1, #4294967295
 8008b04:	48b3      	ldr	r0, [pc, #716]	; (8008dd4 <cppLoop+0x15c4>)
 8008b06:	f7f9 fbf1 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008b0a:	f000 bc0c 	b.w	8009326 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_C){
 8008b0e:	48b2      	ldr	r0, [pc, #712]	; (8008dd8 <cppLoop+0x15c8>)
 8008b10:	f7f9 facc 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	bf0c      	ite	eq
 8008b1a:	2301      	moveq	r3, #1
 8008b1c:	2300      	movne	r3, #0
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8400 	beq.w	8009326 <cppLoop+0x1b16>
			led.LR(-1, 1);
 8008b26:	2201      	movs	r2, #1
 8008b28:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2c:	48a9      	ldr	r0, [pc, #676]	; (8008dd4 <cppLoop+0x15c4>)
 8008b2e:	f7f9 fbdd 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b36:	f000 fd2f 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	4ba7      	ldr	r3, [pc, #668]	; (8008ddc <cppLoop+0x15cc>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	49a7      	ldr	r1, [pc, #668]	; (8008de0 <cppLoop+0x15d0>)
 8008b44:	48a7      	ldr	r0, [pc, #668]	; (8008de4 <cppLoop+0x15d4>)
 8008b46:	f7f8 fe99 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4ba0      	ldr	r3, [pc, #640]	; (8008dd0 <cppLoop+0x15c0>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	49a5      	ldr	r1, [pc, #660]	; (8008de8 <cppLoop+0x15d8>)
 8008b54:	48a3      	ldr	r0, [pc, #652]	; (8008de4 <cppLoop+0x15d4>)
 8008b56:	f7f8 fe91 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008b5a:	4ba0      	ldr	r3, [pc, #640]	; (8008ddc <cppLoop+0x15cc>)
 8008b5c:	edd3 7a00 	vldr	s15, [r3]
 8008b60:	4b9b      	ldr	r3, [pc, #620]	; (8008dd0 <cppLoop+0x15c0>)
 8008b62:	ed93 7a00 	vldr	s14, [r3]
 8008b66:	eef0 0a47 	vmov.f32	s1, s14
 8008b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6e:	489f      	ldr	r0, [pc, #636]	; (8008dec <cppLoop+0x15dc>)
 8008b70:	f7fb f8df 	bl	8003d32 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008b74:	2200      	movs	r2, #0
 8008b76:	f04f 31ff 	mov.w	r1, #4294967295
 8008b7a:	4896      	ldr	r0, [pc, #600]	; (8008dd4 <cppLoop+0x15c4>)
 8008b7c:	f7f9 fbb6 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008b80:	e3d1      	b.n	8009326 <cppLoop+0x1b16>

	case 8:
		led.fullColor('W');
 8008b82:	2157      	movs	r1, #87	; 0x57
 8008b84:	4893      	ldr	r0, [pc, #588]	; (8008dd4 <cppLoop+0x15c4>)
 8008b86:	f7f9 faf5 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b8a:	f7f8 fa89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b8e:	2100      	movs	r1, #0
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7f8 fa95 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008b96:	4895      	ldr	r0, [pc, #596]	; (8008dec <cppLoop+0x15dc>)
 8008b98:	f7fb f923 	bl	8003de2 <_ZN9LineTrace10getMaxAcc2Ev>
 8008b9c:	ee10 3a10 	vmov	r3, s0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f7 fce9 	bl	8000578 <__aeabi_f2d>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	461a      	mov	r2, r3
 8008bac:	4623      	mov	r3, r4
 8008bae:	4890      	ldr	r0, [pc, #576]	; (8008df0 <cppLoop+0x15e0>)
 8008bb0:	f7f8 fab0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f7f8 fa82 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008bbc:	488b      	ldr	r0, [pc, #556]	; (8008dec <cppLoop+0x15dc>)
 8008bbe:	f7fb f8fe 	bl	8003dbe <_ZN9LineTrace10getMaxDec2Ev>
 8008bc2:	ee10 3a10 	vmov	r3, s0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f7 fcd6 	bl	8000578 <__aeabi_f2d>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	4887      	ldr	r0, [pc, #540]	; (8008df4 <cppLoop+0x15e4>)
 8008bd6:	f7f8 fa9d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008bda:	487f      	ldr	r0, [pc, #508]	; (8008dd8 <cppLoop+0x15c8>)
 8008bdc:	f7f9 fa66 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	bf0c      	ite	eq
 8008be6:	2301      	moveq	r3, #1
 8008be8:	2300      	movne	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d021      	beq.n	8008c34 <cppLoop+0x1424>
			led.LR(-1, 1);
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf6:	4877      	ldr	r0, [pc, #476]	; (8008dd4 <cppLoop+0x15c4>)
 8008bf8:	f7f9 fb78 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c00:	f000 fcca 	bl	8009598 <HAL_Delay>

			selector_acc2++;
 8008c04:	4b7c      	ldr	r3, [pc, #496]	; (8008df8 <cppLoop+0x15e8>)
 8008c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	b21a      	sxth	r2, r3
 8008c12:	4b79      	ldr	r3, [pc, #484]	; (8008df8 <cppLoop+0x15e8>)
 8008c14:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008c16:	4b78      	ldr	r3, [pc, #480]	; (8008df8 <cppLoop+0x15e8>)
 8008c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	dd02      	ble.n	8008c26 <cppLoop+0x1416>
 8008c20:	4b75      	ldr	r3, [pc, #468]	; (8008df8 <cppLoop+0x15e8>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c26:	2200      	movs	r2, #0
 8008c28:	f04f 31ff 	mov.w	r1, #4294967295
 8008c2c:	4869      	ldr	r0, [pc, #420]	; (8008dd4 <cppLoop+0x15c4>)
 8008c2e:	f7f9 fb5d 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008c32:	e37a      	b.n	800932a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_R){
 8008c34:	4868      	ldr	r0, [pc, #416]	; (8008dd8 <cppLoop+0x15c8>)
 8008c36:	f7f9 fa39 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	bf0c      	ite	eq
 8008c40:	2301      	moveq	r3, #1
 8008c42:	2300      	movne	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d03b      	beq.n	8008cc2 <cppLoop+0x14b2>
			led.LR(-1, 1);
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c50:	4860      	ldr	r0, [pc, #384]	; (8008dd4 <cppLoop+0x15c4>)
 8008c52:	f7f9 fb4b 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c56:	2064      	movs	r0, #100	; 0x64
 8008c58:	f000 fc9e 	bl	8009598 <HAL_Delay>
			if(selector_acc2 == 0){
 8008c5c:	4b66      	ldr	r3, [pc, #408]	; (8008df8 <cppLoop+0x15e8>)
 8008c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d113      	bne.n	8008c8e <cppLoop+0x147e>
				adj_acc2 = adj_acc2 + 0.1;
 8008c66:	4b65      	ldr	r3, [pc, #404]	; (8008dfc <cppLoop+0x15ec>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f7 fc84 	bl	8000578 <__aeabi_f2d>
 8008c70:	a355      	add	r3, pc, #340	; (adr r3, 8008dc8 <cppLoop+0x15b8>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fb21 	bl	80002bc <__adddf3>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4618      	mov	r0, r3
 8008c80:	4621      	mov	r1, r4
 8008c82:	f7f7 ffc9 	bl	8000c18 <__aeabi_d2f>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b5c      	ldr	r3, [pc, #368]	; (8008dfc <cppLoop+0x15ec>)
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e012      	b.n	8008cb4 <cppLoop+0x14a4>
				adj_dec2 = adj_dec2 + 0.1;
 8008c8e:	4b5c      	ldr	r3, [pc, #368]	; (8008e00 <cppLoop+0x15f0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7f7 fc70 	bl	8000578 <__aeabi_f2d>
 8008c98:	a34b      	add	r3, pc, #300	; (adr r3, 8008dc8 <cppLoop+0x15b8>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fb0d 	bl	80002bc <__adddf3>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f7f7 ffb5 	bl	8000c18 <__aeabi_d2f>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b53      	ldr	r3, [pc, #332]	; (8008e00 <cppLoop+0x15f0>)
 8008cb2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8008cba:	4846      	ldr	r0, [pc, #280]	; (8008dd4 <cppLoop+0x15c4>)
 8008cbc:	f7f9 fb16 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008cc0:	e333      	b.n	800932a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_L){
 8008cc2:	4845      	ldr	r0, [pc, #276]	; (8008dd8 <cppLoop+0x15c8>)
 8008cc4:	f7f9 f9f2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d03b      	beq.n	8008d50 <cppLoop+0x1540>
			led.LR(-1, 1);
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f04f 31ff 	mov.w	r1, #4294967295
 8008cde:	483d      	ldr	r0, [pc, #244]	; (8008dd4 <cppLoop+0x15c4>)
 8008ce0:	f7f9 fb04 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ce4:	2064      	movs	r0, #100	; 0x64
 8008ce6:	f000 fc57 	bl	8009598 <HAL_Delay>
			if(selector_acc2 == 0){
 8008cea:	4b43      	ldr	r3, [pc, #268]	; (8008df8 <cppLoop+0x15e8>)
 8008cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d113      	bne.n	8008d1c <cppLoop+0x150c>
				adj_acc2 = adj_acc2 - 0.1;
 8008cf4:	4b41      	ldr	r3, [pc, #260]	; (8008dfc <cppLoop+0x15ec>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7f7 fc3d 	bl	8000578 <__aeabi_f2d>
 8008cfe:	a332      	add	r3, pc, #200	; (adr r3, 8008dc8 <cppLoop+0x15b8>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fad8 	bl	80002b8 <__aeabi_dsub>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	4621      	mov	r1, r4
 8008d10:	f7f7 ff82 	bl	8000c18 <__aeabi_d2f>
 8008d14:	4602      	mov	r2, r0
 8008d16:	4b39      	ldr	r3, [pc, #228]	; (8008dfc <cppLoop+0x15ec>)
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	e012      	b.n	8008d42 <cppLoop+0x1532>
				adj_dec2 = adj_dec2 - 0.1;
 8008d1c:	4b38      	ldr	r3, [pc, #224]	; (8008e00 <cppLoop+0x15f0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7f7 fc29 	bl	8000578 <__aeabi_f2d>
 8008d26:	a328      	add	r3, pc, #160	; (adr r3, 8008dc8 <cppLoop+0x15b8>)
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	f7f7 fac4 	bl	80002b8 <__aeabi_dsub>
 8008d30:	4603      	mov	r3, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	4618      	mov	r0, r3
 8008d36:	4621      	mov	r1, r4
 8008d38:	f7f7 ff6e 	bl	8000c18 <__aeabi_d2f>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	4b30      	ldr	r3, [pc, #192]	; (8008e00 <cppLoop+0x15f0>)
 8008d40:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d42:	2200      	movs	r2, #0
 8008d44:	f04f 31ff 	mov.w	r1, #4294967295
 8008d48:	4822      	ldr	r0, [pc, #136]	; (8008dd4 <cppLoop+0x15c4>)
 8008d4a:	f7f9 facf 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008d4e:	e2ec      	b.n	800932a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_C){
 8008d50:	4821      	ldr	r0, [pc, #132]	; (8008dd8 <cppLoop+0x15c8>)
 8008d52:	f7f9 f9ab 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	bf0c      	ite	eq
 8008d5c:	2301      	moveq	r3, #1
 8008d5e:	2300      	movne	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 82e1 	beq.w	800932a <cppLoop+0x1b1a>
			led.LR(-1, 1);
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6e:	4819      	ldr	r0, [pc, #100]	; (8008dd4 <cppLoop+0x15c4>)
 8008d70:	f7f9 fabc 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d78:	f000 fc0e 	bl	8009598 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4b1e      	ldr	r3, [pc, #120]	; (8008dfc <cppLoop+0x15ec>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	491f      	ldr	r1, [pc, #124]	; (8008e04 <cppLoop+0x15f4>)
 8008d86:	4817      	ldr	r0, [pc, #92]	; (8008de4 <cppLoop+0x15d4>)
 8008d88:	f7f8 fd78 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <cppLoop+0x15f0>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	491c      	ldr	r1, [pc, #112]	; (8008e08 <cppLoop+0x15f8>)
 8008d96:	4813      	ldr	r0, [pc, #76]	; (8008de4 <cppLoop+0x15d4>)
 8008d98:	f7f8 fd70 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008d9c:	4b17      	ldr	r3, [pc, #92]	; (8008dfc <cppLoop+0x15ec>)
 8008d9e:	edd3 7a00 	vldr	s15, [r3]
 8008da2:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <cppLoop+0x15f0>)
 8008da4:	ed93 7a00 	vldr	s14, [r3]
 8008da8:	eef0 0a47 	vmov.f32	s1, s14
 8008dac:	eeb0 0a67 	vmov.f32	s0, s15
 8008db0:	480e      	ldr	r0, [pc, #56]	; (8008dec <cppLoop+0x15dc>)
 8008db2:	f7fa ffd8 	bl	8003d66 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <cppLoop+0x15c4>)
 8008dbe:	f7f9 fa95 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008dc2:	e2b2      	b.n	800932a <cppLoop+0x1b1a>
 8008dc4:	f3af 8000 	nop.w
 8008dc8:	9999999a 	.word	0x9999999a
 8008dcc:	3fb99999 	.word	0x3fb99999
 8008dd0:	200412d8 	.word	0x200412d8
 8008dd4:	200005c8 	.word	0x200005c8
 8008dd8:	200005bc 	.word	0x200005bc
 8008ddc:	200412d0 	.word	0x200412d0
 8008de0:	08019968 	.word	0x08019968
 8008de4:	080198c0 	.word	0x080198c0
 8008de8:	08019970 	.word	0x08019970
 8008dec:	2001bc10 	.word	0x2001bc10
 8008df0:	08019978 	.word	0x08019978
 8008df4:	08019984 	.word	0x08019984
 8008df8:	2004128a 	.word	0x2004128a
 8008dfc:	200412e0 	.word	0x200412e0
 8008e00:	200412e8 	.word	0x200412e8
 8008e04:	08019990 	.word	0x08019990
 8008e08:	0801999c 	.word	0x0801999c

	case 9:
		led.fullColor('~');
 8008e0c:	217e      	movs	r1, #126	; 0x7e
 8008e0e:	48c6      	ldr	r0, [pc, #792]	; (8009128 <cppLoop+0x1918>)
 8008e10:	f7f9 f9b0 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e14:	f7f8 f944 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f7f8 f950 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008e20:	48c2      	ldr	r0, [pc, #776]	; (800912c <cppLoop+0x191c>)
 8008e22:	f7f8 f977 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e26:	2101      	movs	r1, #1
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7f8 f949 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008e2e:	48c0      	ldr	r0, [pc, #768]	; (8009130 <cppLoop+0x1920>)
 8008e30:	f7f8 f970 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008e34:	48bf      	ldr	r0, [pc, #764]	; (8009134 <cppLoop+0x1924>)
 8008e36:	f7f9 f939 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8271 	beq.w	800932e <cppLoop+0x1b1e>
			led.LR(-1, 1);
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e52:	48b5      	ldr	r0, [pc, #724]	; (8009128 <cppLoop+0x1918>)
 8008e54:	f7f9 fa4a 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e5c:	f000 fb9c 	bl	8009598 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008e60:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8009138 <cppLoop+0x1928>
 8008e64:	48b5      	ldr	r0, [pc, #724]	; (800913c <cppLoop+0x192c>)
 8008e66:	f7fa feb5 	bl	8003bd4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008e6a:	48b4      	ldr	r0, [pc, #720]	; (800913c <cppLoop+0x192c>)
 8008e6c:	f7fb f95e 	bl	800412c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e74:	f000 fb90 	bl	8009598 <HAL_Delay>

			led.fullColor('R');
 8008e78:	2152      	movs	r1, #82	; 0x52
 8008e7a:	48ab      	ldr	r0, [pc, #684]	; (8009128 <cppLoop+0x1918>)
 8008e7c:	f7f9 f97a 	bl	8002174 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008e80:	48af      	ldr	r0, [pc, #700]	; (8009140 <cppLoop+0x1930>)
 8008e82:	f7f8 fc4d 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008e86:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e8a:	f000 fb85 	bl	8009598 <HAL_Delay>

			line_trace.stop();
 8008e8e:	48ab      	ldr	r0, [pc, #684]	; (800913c <cppLoop+0x192c>)
 8008e90:	f7fb f9ec 	bl	800426c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008e94:	49ab      	ldr	r1, [pc, #684]	; (8009144 <cppLoop+0x1934>)
 8008e96:	48ac      	ldr	r0, [pc, #688]	; (8009148 <cppLoop+0x1938>)
 8008e98:	f7f8 fc7b 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8008e9c:	48a8      	ldr	r0, [pc, #672]	; (8009140 <cppLoop+0x1930>)
 8008e9e:	f7f8 fc03 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008ea2:	eef0 7a40 	vmov.f32	s15, s0
 8008ea6:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	2201      	movs	r2, #1
 8008eae:	4619      	mov	r1, r3
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	f7f8 fc91 	bl	80017d8 <sd_write_float>
			user_fclose();
 8008eb6:	f7f8 fc7f 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec0:	4899      	ldr	r0, [pc, #612]	; (8009128 <cppLoop+0x1918>)
 8008ec2:	f7f9 fa13 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8008ec6:	e232      	b.n	800932e <cppLoop+0x1b1e>

	case 10:
		led.fullColor('~');
 8008ec8:	217e      	movs	r1, #126	; 0x7e
 8008eca:	4897      	ldr	r0, [pc, #604]	; (8009128 <cppLoop+0x1918>)
 8008ecc:	f7f9 f952 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ed0:	f7f8 f8e6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	f7f8 f8f2 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008edc:	489b      	ldr	r0, [pc, #620]	; (800914c <cppLoop+0x193c>)
 8008ede:	f7f8 f919 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f7f8 f8eb 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008eea:	4899      	ldr	r0, [pc, #612]	; (8009150 <cppLoop+0x1940>)
 8008eec:	f7f8 f912 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008ef0:	4890      	ldr	r0, [pc, #576]	; (8009134 <cppLoop+0x1924>)
 8008ef2:	f7f9 f8db 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	bf0c      	ite	eq
 8008efc:	2301      	moveq	r3, #1
 8008efe:	2300      	movne	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 8215 	beq.w	8009332 <cppLoop+0x1b22>
			HAL_Delay(500);
 8008f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f0c:	f000 fb44 	bl	8009598 <HAL_Delay>
			led.LR(-1, 1);
 8008f10:	2201      	movs	r2, #1
 8008f12:	f04f 31ff 	mov.w	r1, #4294967295
 8008f16:	4884      	ldr	r0, [pc, #528]	; (8009128 <cppLoop+0x1918>)
 8008f18:	f7f9 f9e8 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	4887      	ldr	r0, [pc, #540]	; (800913c <cppLoop+0x192c>)
 8008f20:	f7fb f8f2 	bl	8004108 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008f24:	4b8b      	ldr	r3, [pc, #556]	; (8009154 <cppLoop+0x1944>)
 8008f26:	edd3 7a00 	vldr	s15, [r3]
 8008f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f2e:	4883      	ldr	r0, [pc, #524]	; (800913c <cppLoop+0x192c>)
 8008f30:	f7fa fe5f 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008f34:	4b87      	ldr	r3, [pc, #540]	; (8009154 <cppLoop+0x1944>)
 8008f36:	edd3 7a00 	vldr	s15, [r3]
 8008f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f3e:	487f      	ldr	r0, [pc, #508]	; (800913c <cppLoop+0x192c>)
 8008f40:	f7fa fe67 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008f44:	4b83      	ldr	r3, [pc, #524]	; (8009154 <cppLoop+0x1944>)
 8008f46:	edd3 7a00 	vldr	s15, [r3]
 8008f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f4e:	487b      	ldr	r0, [pc, #492]	; (800913c <cppLoop+0x192c>)
 8008f50:	f7fa fe7f 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008f54:	4879      	ldr	r0, [pc, #484]	; (800913c <cppLoop+0x192c>)
 8008f56:	f7fb facb 	bl	80044f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f60:	4871      	ldr	r0, [pc, #452]	; (8009128 <cppLoop+0x1918>)
 8008f62:	f7f9 f9c3 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008f66:	e1e4      	b.n	8009332 <cppLoop+0x1b22>

	case 11:
		led.fullColor('~');
 8008f68:	217e      	movs	r1, #126	; 0x7e
 8008f6a:	486f      	ldr	r0, [pc, #444]	; (8009128 <cppLoop+0x1918>)
 8008f6c:	f7f9 f902 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f70:	f7f8 f896 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f74:	2100      	movs	r1, #0
 8008f76:	2000      	movs	r0, #0
 8008f78:	f7f8 f8a2 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008f7c:	4876      	ldr	r0, [pc, #472]	; (8009158 <cppLoop+0x1948>)
 8008f7e:	f7f8 f8c9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f82:	2101      	movs	r1, #1
 8008f84:	2000      	movs	r0, #0
 8008f86:	f7f8 f89b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008f8a:	4874      	ldr	r0, [pc, #464]	; (800915c <cppLoop+0x194c>)
 8008f8c:	f7f8 f8c2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008f90:	4868      	ldr	r0, [pc, #416]	; (8009134 <cppLoop+0x1924>)
 8008f92:	f7f9 f88b 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 81c7 	beq.w	8009336 <cppLoop+0x1b26>
			HAL_Delay(1000);
 8008fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fac:	f000 faf4 	bl	8009598 <HAL_Delay>
			led.LR(-1, 1);
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb6:	485c      	ldr	r0, [pc, #368]	; (8009128 <cppLoop+0x1918>)
 8008fb8:	f7f9 f998 	bl	80022ec <_ZN3LED2LREaa>

			esc.on(0.5, 0.5, 0.5, 0.5);
 8008fbc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8008fc0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8008fc4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008fc8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008fcc:	4864      	ldr	r0, [pc, #400]	; (8009160 <cppLoop+0x1950>)
 8008fce:	f7f8 f93f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(2000);
 8008fd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008fd6:	f000 fadf 	bl	8009598 <HAL_Delay>
			esc.off();
 8008fda:	4861      	ldr	r0, [pc, #388]	; (8009160 <cppLoop+0x1950>)
 8008fdc:	f7f8 f9d2 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8008fe6:	4850      	ldr	r0, [pc, #320]	; (8009128 <cppLoop+0x1918>)
 8008fe8:	f7f9 f980 	bl	80022ec <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 8008fec:	e1a3      	b.n	8009336 <cppLoop+0x1b26>

	case 12:
		led.fullColor('~');
 8008fee:	217e      	movs	r1, #126	; 0x7e
 8008ff0:	484d      	ldr	r0, [pc, #308]	; (8009128 <cppLoop+0x1918>)
 8008ff2:	f7f9 f8bf 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ff6:	f7f8 f853 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f7f8 f85f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009002:	4858      	ldr	r0, [pc, #352]	; (8009164 <cppLoop+0x1954>)
 8009004:	f7f8 f886 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009008:	2101      	movs	r1, #1
 800900a:	2000      	movs	r0, #0
 800900c:	f7f8 f858 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009010:	4855      	ldr	r0, [pc, #340]	; (8009168 <cppLoop+0x1958>)
 8009012:	f7f8 f87f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009016:	4847      	ldr	r0, [pc, #284]	; (8009134 <cppLoop+0x1924>)
 8009018:	f7f9 f848 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800901c:	4603      	mov	r3, r0
 800901e:	2b02      	cmp	r3, #2
 8009020:	bf0c      	ite	eq
 8009022:	2301      	moveq	r3, #1
 8009024:	2300      	movne	r3, #0
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 8186 	beq.w	800933a <cppLoop+0x1b2a>
			HAL_Delay(1500);
 800902e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009032:	f000 fab1 	bl	8009598 <HAL_Delay>
			led.LR(-1, 1);
 8009036:	2201      	movs	r2, #1
 8009038:	f04f 31ff 	mov.w	r1, #4294967295
 800903c:	483a      	ldr	r0, [pc, #232]	; (8009128 <cppLoop+0x1918>)
 800903e:	f7f9 f955 	bl	80022ec <_ZN3LED2LREaa>

			logger.start();
 8009042:	484a      	ldr	r0, [pc, #296]	; (800916c <cppLoop+0x195c>)
 8009044:	f7fb fdcc 	bl	8004be0 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009048:	4849      	ldr	r0, [pc, #292]	; (8009170 <cppLoop+0x1960>)
 800904a:	f7fc fd4a 	bl	8005ae2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 800904e:	eddf 0a49 	vldr	s1, [pc, #292]	; 8009174 <cppLoop+0x1964>
 8009052:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8009138 <cppLoop+0x1928>
 8009056:	4846      	ldr	r0, [pc, #280]	; (8009170 <cppLoop+0x1960>)
 8009058:	f7fc fcd6 	bl	8005a08 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800905c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009060:	f000 fa9a 	bl	8009598 <HAL_Delay>

			logger.stop();
 8009064:	4841      	ldr	r0, [pc, #260]	; (800916c <cppLoop+0x195c>)
 8009066:	f7fb fdcc 	bl	8004c02 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800906a:	4841      	ldr	r0, [pc, #260]	; (8009170 <cppLoop+0x1960>)
 800906c:	f7fc fd4c 	bl	8005b08 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009070:	4a41      	ldr	r2, [pc, #260]	; (8009178 <cppLoop+0x1968>)
 8009072:	4942      	ldr	r1, [pc, #264]	; (800917c <cppLoop+0x196c>)
 8009074:	483d      	ldr	r0, [pc, #244]	; (800916c <cppLoop+0x195c>)
 8009076:	f7fb fcc0 	bl	80049fa <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800907a:	2200      	movs	r2, #0
 800907c:	f04f 31ff 	mov.w	r1, #4294967295
 8009080:	4829      	ldr	r0, [pc, #164]	; (8009128 <cppLoop+0x1918>)
 8009082:	f7f9 f933 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8009086:	e158      	b.n	800933a <cppLoop+0x1b2a>

	case 13:

		led.fullColor('~');
 8009088:	217e      	movs	r1, #126	; 0x7e
 800908a:	4827      	ldr	r0, [pc, #156]	; (8009128 <cppLoop+0x1918>)
 800908c:	f7f9 f872 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009090:	f7f8 f806 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009094:	2100      	movs	r1, #0
 8009096:	2000      	movs	r0, #0
 8009098:	f7f8 f812 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 800909c:	4838      	ldr	r0, [pc, #224]	; (8009180 <cppLoop+0x1970>)
 800909e:	f7f8 f839 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090a2:	2101      	movs	r1, #1
 80090a4:	2000      	movs	r0, #0
 80090a6:	f7f8 f80b 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80090aa:	4836      	ldr	r0, [pc, #216]	; (8009184 <cppLoop+0x1974>)
 80090ac:	f7f8 f832 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80090b0:	4820      	ldr	r0, [pc, #128]	; (8009134 <cppLoop+0x1924>)
 80090b2:	f7f8 fffb 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	bf0c      	ite	eq
 80090bc:	2301      	moveq	r3, #1
 80090be:	2300      	movne	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 813b 	beq.w	800933e <cppLoop+0x1b2e>
			HAL_Delay(500);
 80090c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090cc:	f000 fa64 	bl	8009598 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 80090d0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8009188 <cppLoop+0x1978>
 80090d4:	4819      	ldr	r0, [pc, #100]	; (800913c <cppLoop+0x192c>)
 80090d6:	f7fa fd8c 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	2101      	movs	r1, #1
 80090e0:	4811      	ldr	r0, [pc, #68]	; (8009128 <cppLoop+0x1918>)
 80090e2:	f7f9 f903 	bl	80022ec <_ZN3LED2LREaa>

			logger.resetIdx();
 80090e6:	4821      	ldr	r0, [pc, #132]	; (800916c <cppLoop+0x195c>)
 80090e8:	f7fb fd62 	bl	8004bb0 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80090ec:	2100      	movs	r1, #0
 80090ee:	4813      	ldr	r0, [pc, #76]	; (800913c <cppLoop+0x192c>)
 80090f0:	f7fb f80a 	bl	8004108 <_ZN9LineTrace7setModeEs>
			logger.start();
 80090f4:	481d      	ldr	r0, [pc, #116]	; (800916c <cppLoop+0x195c>)
 80090f6:	f7fb fd73 	bl	8004be0 <_ZN6Logger5startEv>
			line_trace.running();
 80090fa:	4810      	ldr	r0, [pc, #64]	; (800913c <cppLoop+0x192c>)
 80090fc:	f7fb f842 	bl	8004184 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009100:	481a      	ldr	r0, [pc, #104]	; (800916c <cppLoop+0x195c>)
 8009102:	f7fb fd7e 	bl	8004c02 <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 8009106:	4a21      	ldr	r2, [pc, #132]	; (800918c <cppLoop+0x197c>)
 8009108:	4921      	ldr	r1, [pc, #132]	; (8009190 <cppLoop+0x1980>)
 800910a:	4818      	ldr	r0, [pc, #96]	; (800916c <cppLoop+0x195c>)
 800910c:	f7fb fc75 	bl	80049fa <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 8009110:	4a20      	ldr	r2, [pc, #128]	; (8009194 <cppLoop+0x1984>)
 8009112:	491f      	ldr	r1, [pc, #124]	; (8009190 <cppLoop+0x1980>)
 8009114:	4815      	ldr	r0, [pc, #84]	; (800916c <cppLoop+0x195c>)
 8009116:	f7fb fc84 	bl	8004a22 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	2100      	movs	r1, #0
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <cppLoop+0x1918>)
 8009122:	f7f9 f8e3 	bl	80022ec <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009126:	e10a      	b.n	800933e <cppLoop+0x1b2e>
 8009128:	200005c8 	.word	0x200005c8
 800912c:	080199a8 	.word	0x080199a8
 8009130:	080199b0 	.word	0x080199b0
 8009134:	200005bc 	.word	0x200005bc
 8009138:	00000000 	.word	0x00000000
 800913c:	2001bc10 	.word	0x2001bc10
 8009140:	2001bb74 	.word	0x2001bb74
 8009144:	080199bc 	.word	0x080199bc
 8009148:	080199c4 	.word	0x080199c4
 800914c:	080199d0 	.word	0x080199d0
 8009150:	080199dc 	.word	0x080199dc
 8009154:	200412b8 	.word	0x200412b8
 8009158:	080199e8 	.word	0x080199e8
 800915c:	080199ec 	.word	0x080199ec
 8009160:	20041280 	.word	0x20041280
 8009164:	080199f4 	.word	0x080199f4
 8009168:	080199f8 	.word	0x080199f8
 800916c:	200005ec 	.word	0x200005ec
 8009170:	2001bb94 	.word	0x2001bb94
 8009174:	4048f5c3 	.word	0x4048f5c3
 8009178:	08019a04 	.word	0x08019a04
 800917c:	08019a10 	.word	0x08019a10
 8009180:	08019a1c 	.word	0x08019a1c
 8009184:	08019a24 	.word	0x08019a24
 8009188:	3e99999a 	.word	0x3e99999a
 800918c:	08019a2c 	.word	0x08019a2c
 8009190:	08019a38 	.word	0x08019a38
 8009194:	08019a44 	.word	0x08019a44

	case 14:
		led.fullColor('W');
 8009198:	2157      	movs	r1, #87	; 0x57
 800919a:	486f      	ldr	r0, [pc, #444]	; (8009358 <cppLoop+0x1b48>)
 800919c:	f7f8 ffea 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091a0:	f7f7 ff7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091a4:	2100      	movs	r1, #0
 80091a6:	2000      	movs	r0, #0
 80091a8:	f7f7 ff8a 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80091ac:	486b      	ldr	r0, [pc, #428]	; (800935c <cppLoop+0x1b4c>)
 80091ae:	f7f7 ffb1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091b2:	2101      	movs	r1, #1
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7f7 ff83 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80091ba:	4b69      	ldr	r3, [pc, #420]	; (8009360 <cppLoop+0x1b50>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7f7 f9da 	bl	8000578 <__aeabi_f2d>
 80091c4:	4603      	mov	r3, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	461a      	mov	r2, r3
 80091ca:	4623      	mov	r3, r4
 80091cc:	4865      	ldr	r0, [pc, #404]	; (8009364 <cppLoop+0x1b54>)
 80091ce:	f7f7 ffa1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80091d2:	4865      	ldr	r0, [pc, #404]	; (8009368 <cppLoop+0x1b58>)
 80091d4:	f7f8 ff6a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b02      	cmp	r3, #2
 80091dc:	bf0c      	ite	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	2300      	movne	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 80ac 	beq.w	8009342 <cppLoop+0x1b32>
			HAL_Delay(500);
 80091ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091ee:	f000 f9d3 	bl	8009598 <HAL_Delay>

			led.LR(1, -1);
 80091f2:	f04f 32ff 	mov.w	r2, #4294967295
 80091f6:	2101      	movs	r1, #1
 80091f8:	4857      	ldr	r0, [pc, #348]	; (8009358 <cppLoop+0x1b48>)
 80091fa:	f7f9 f877 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80091fe:	2102      	movs	r1, #2
 8009200:	485a      	ldr	r0, [pc, #360]	; (800936c <cppLoop+0x1b5c>)
 8009202:	f7fa ff81 	bl	8004108 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009206:	4b5a      	ldr	r3, [pc, #360]	; (8009370 <cppLoop+0x1b60>)
 8009208:	edd3 7a00 	vldr	s15, [r3]
 800920c:	eeb0 0a67 	vmov.f32	s0, s15
 8009210:	4856      	ldr	r0, [pc, #344]	; (800936c <cppLoop+0x1b5c>)
 8009212:	f7fa fcee 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009216:	4b52      	ldr	r3, [pc, #328]	; (8009360 <cppLoop+0x1b50>)
 8009218:	edd3 7a00 	vldr	s15, [r3]
 800921c:	eeb0 0a67 	vmov.f32	s0, s15
 8009220:	4852      	ldr	r0, [pc, #328]	; (800936c <cppLoop+0x1b5c>)
 8009222:	f7fa fcf6 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009226:	4b4e      	ldr	r3, [pc, #312]	; (8009360 <cppLoop+0x1b50>)
 8009228:	edd3 7a00 	vldr	s15, [r3]
 800922c:	eeb0 0a67 	vmov.f32	s0, s15
 8009230:	484e      	ldr	r0, [pc, #312]	; (800936c <cppLoop+0x1b5c>)
 8009232:	f7fa fd0e 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009236:	484d      	ldr	r0, [pc, #308]	; (800936c <cppLoop+0x1b5c>)
 8009238:	f7fb f95a 	bl	80044f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800923c:	484b      	ldr	r0, [pc, #300]	; (800936c <cppLoop+0x1b5c>)
 800923e:	f7fa ffa1 	bl	8004184 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009242:	f04f 32ff 	mov.w	r2, #4294967295
 8009246:	2100      	movs	r1, #0
 8009248:	4843      	ldr	r0, [pc, #268]	; (8009358 <cppLoop+0x1b48>)
 800924a:	f7f9 f84f 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800924e:	e078      	b.n	8009342 <cppLoop+0x1b32>

	case 15:
		led.fullColor('W');
 8009250:	2157      	movs	r1, #87	; 0x57
 8009252:	4841      	ldr	r0, [pc, #260]	; (8009358 <cppLoop+0x1b48>)
 8009254:	f7f8 ff8e 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009258:	f7f7 ff22 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800925c:	2100      	movs	r1, #0
 800925e:	2000      	movs	r0, #0
 8009260:	f7f7 ff2e 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009264:	4843      	ldr	r0, [pc, #268]	; (8009374 <cppLoop+0x1b64>)
 8009266:	f7f7 ff55 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800926a:	2101      	movs	r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	f7f7 ff27 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009272:	4b41      	ldr	r3, [pc, #260]	; (8009378 <cppLoop+0x1b68>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7f7 f97e 	bl	8000578 <__aeabi_f2d>
 800927c:	4603      	mov	r3, r0
 800927e:	460c      	mov	r4, r1
 8009280:	461a      	mov	r2, r3
 8009282:	4623      	mov	r3, r4
 8009284:	4837      	ldr	r0, [pc, #220]	; (8009364 <cppLoop+0x1b54>)
 8009286:	f7f7 ff45 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800928a:	4837      	ldr	r0, [pc, #220]	; (8009368 <cppLoop+0x1b58>)
 800928c:	f7f8 ff0e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8009290:	4603      	mov	r3, r0
 8009292:	2b02      	cmp	r3, #2
 8009294:	bf0c      	ite	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	2300      	movne	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d052      	beq.n	8009346 <cppLoop+0x1b36>
			HAL_Delay(500);
 80092a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092a4:	f000 f978 	bl	8009598 <HAL_Delay>

			led.LR(1, -1);
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	2101      	movs	r1, #1
 80092ae:	482a      	ldr	r0, [pc, #168]	; (8009358 <cppLoop+0x1b48>)
 80092b0:	f7f9 f81c 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80092b4:	2101      	movs	r1, #1
 80092b6:	482d      	ldr	r0, [pc, #180]	; (800936c <cppLoop+0x1b5c>)
 80092b8:	f7fa ff26 	bl	8004108 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80092bc:	4b2f      	ldr	r3, [pc, #188]	; (800937c <cppLoop+0x1b6c>)
 80092be:	edd3 7a00 	vldr	s15, [r3]
 80092c2:	eeb0 0a67 	vmov.f32	s0, s15
 80092c6:	4829      	ldr	r0, [pc, #164]	; (800936c <cppLoop+0x1b5c>)
 80092c8:	f7fa fc93 	bl	8003bf2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80092cc:	4b2a      	ldr	r3, [pc, #168]	; (8009378 <cppLoop+0x1b68>)
 80092ce:	edd3 7a00 	vldr	s15, [r3]
 80092d2:	eeb0 0a67 	vmov.f32	s0, s15
 80092d6:	4825      	ldr	r0, [pc, #148]	; (800936c <cppLoop+0x1b5c>)
 80092d8:	f7fa fc9b 	bl	8003c12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80092dc:	4b27      	ldr	r3, [pc, #156]	; (800937c <cppLoop+0x1b6c>)
 80092de:	edd3 7a00 	vldr	s15, [r3]
 80092e2:	eeb0 0a67 	vmov.f32	s0, s15
 80092e6:	4821      	ldr	r0, [pc, #132]	; (800936c <cppLoop+0x1b5c>)
 80092e8:	f7fa fcb3 	bl	8003c52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80092ec:	481f      	ldr	r0, [pc, #124]	; (800936c <cppLoop+0x1b5c>)
 80092ee:	f7fb f8ff 	bl	80044f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80092f2:	481e      	ldr	r0, [pc, #120]	; (800936c <cppLoop+0x1b5c>)
 80092f4:	f7fa ff46 	bl	8004184 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80092f8:	f04f 32ff 	mov.w	r2, #4294967295
 80092fc:	2100      	movs	r1, #0
 80092fe:	4816      	ldr	r0, [pc, #88]	; (8009358 <cppLoop+0x1b48>)
 8009300:	f7f8 fff4 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8009304:	e01f      	b.n	8009346 <cppLoop+0x1b36>

	default:
		break;
 8009306:	bf00      	nop
 8009308:	e01e      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800930a:	bf00      	nop
 800930c:	e01c      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800930e:	bf00      	nop
 8009310:	e01a      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009312:	bf00      	nop
 8009314:	e018      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009316:	bf00      	nop
 8009318:	e016      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800931a:	bf00      	nop
 800931c:	e014      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800931e:	bf00      	nop
 8009320:	e012      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009322:	bf00      	nop
 8009324:	e010      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009326:	bf00      	nop
 8009328:	e00e      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800932a:	bf00      	nop
 800932c:	e00c      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800932e:	bf00      	nop
 8009330:	e00a      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009332:	bf00      	nop
 8009334:	e008      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009336:	bf00      	nop
 8009338:	e006      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800933a:	bf00      	nop
 800933c:	e004      	b.n	8009348 <cppLoop+0x1b38>
		break;
 800933e:	bf00      	nop
 8009340:	e002      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <cppLoop+0x1b38>
		break;
 8009346:	bf00      	nop

	}

	HAL_Delay(30);
 8009348:	201e      	movs	r0, #30
 800934a:	f000 f925 	bl	8009598 <HAL_Delay>

}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009356:	bf00      	nop
 8009358:	200005c8 	.word	0x200005c8
 800935c:	08019a50 	.word	0x08019a50
 8009360:	200412b8 	.word	0x200412b8
 8009364:	080198e4 	.word	0x080198e4
 8009368:	200005bc 	.word	0x200005bc
 800936c:	2001bc10 	.word	0x2001bc10
 8009370:	200412c8 	.word	0x200412c8
 8009374:	08019a5c 	.word	0x08019a5c
 8009378:	200412b0 	.word	0x200412b0
 800937c:	200412c0 	.word	0x200412c0

08009380 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af06      	add	r7, sp, #24
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d140      	bne.n	8009412 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009396:	4293      	cmp	r3, r2
 8009398:	d13b      	bne.n	8009412 <_Z41__static_initialization_and_destruction_0ii+0x92>
LineSensor line_sensor;
 800939a:	4820      	ldr	r0, [pc, #128]	; (800941c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800939c:	f7f8 ffde 	bl	800235c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80093a0:	481f      	ldr	r0, [pc, #124]	; (8009420 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80093a2:	f7fc f815 	bl	80053d0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80093a6:	481f      	ldr	r0, [pc, #124]	; (8009424 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80093a8:	f7f8 fe74 	bl	8002094 <_ZN8JoyStickC1Ev>
Motor motor;
 80093ac:	481e      	ldr	r0, [pc, #120]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80093ae:	f7fb fc39 	bl	8004c24 <_ZN5MotorC1Ev>
IMU imu;
 80093b2:	481e      	ldr	r0, [pc, #120]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093b4:	f7f8 fc7a 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 80093b8:	481d      	ldr	r0, [pc, #116]	; (8009430 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80093ba:	f7fb f987 	bl	80046cc <_ZN6LoggerC1Ev>
Encoder encoder;
 80093be:	481d      	ldr	r0, [pc, #116]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093c0:	f7f8 f804 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80093c4:	4b19      	ldr	r3, [pc, #100]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093c6:	4a1b      	ldr	r2, [pc, #108]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093c8:	4917      	ldr	r1, [pc, #92]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80093ca:	481b      	ldr	r0, [pc, #108]	; (8009438 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80093cc:	f7fc f9f0 	bl	80057b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80093d0:	4b19      	ldr	r3, [pc, #100]	; (8009438 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80093d2:	4a16      	ldr	r2, [pc, #88]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093d4:	4917      	ldr	r1, [pc, #92]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093d6:	4819      	ldr	r0, [pc, #100]	; (800943c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80093d8:	f7fb fd0a 	bl	8004df0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80093dc:	4b13      	ldr	r3, [pc, #76]	; (800942c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	4b13      	ldr	r3, [pc, #76]	; (8009430 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	4b15      	ldr	r3, [pc, #84]	; (800943c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	4b12      	ldr	r3, [pc, #72]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80093f2:	4a0a      	ldr	r2, [pc, #40]	; (800941c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80093f4:	490c      	ldr	r1, [pc, #48]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80093f6:	4812      	ldr	r0, [pc, #72]	; (8009440 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80093f8:	f7f9 fade 	bl	80029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80093fc:	4a0a      	ldr	r2, [pc, #40]	; (8009428 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80093fe:	490c      	ldr	r1, [pc, #48]	; (8009430 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009400:	4810      	ldr	r0, [pc, #64]	; (8009444 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009402:	f7fc f935 	bl	8005670 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009406:	4810      	ldr	r0, [pc, #64]	; (8009448 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009408:	f7fb fe74 	bl	80050f4 <_ZN13PathFollowingC1Ev>
ESC esc;
 800940c:	480f      	ldr	r0, [pc, #60]	; (800944c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800940e:	f7f7 fee1 	bl	80011d4 <_ZN3ESCC1Ev>
}
 8009412:	bf00      	nop
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200002bc 	.word	0x200002bc
 8009420:	200005b4 	.word	0x200005b4
 8009424:	200005bc 	.word	0x200005bc
 8009428:	200005c4 	.word	0x200005c4
 800942c:	200005d8 	.word	0x200005d8
 8009430:	200005ec 	.word	0x200005ec
 8009434:	2001bb74 	.word	0x2001bb74
 8009438:	2001bb94 	.word	0x2001bb94
 800943c:	2001bbd0 	.word	0x2001bbd0
 8009440:	2001bc10 	.word	0x2001bc10
 8009444:	20029948 	.word	0x20029948
 8009448:	20029b58 	.word	0x20029b58
 800944c:	20041280 	.word	0x20041280

08009450 <_GLOBAL__sub_I_line_sensor>:
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
 8009454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009458:	2001      	movs	r0, #1
 800945a:	f7ff ff91 	bl	8009380 <_Z41__static_initialization_and_destruction_0ii>
 800945e:	bd80      	pop	{r7, pc}

08009460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009498 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009464:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009466:	e003      	b.n	8009470 <LoopCopyDataInit>

08009468 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009468:	4b0c      	ldr	r3, [pc, #48]	; (800949c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800946a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800946c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800946e:	3104      	adds	r1, #4

08009470 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009470:	480b      	ldr	r0, [pc, #44]	; (80094a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009472:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009474:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009476:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009478:	d3f6      	bcc.n	8009468 <CopyDataInit>
  ldr  r2, =_sbss
 800947a:	4a0b      	ldr	r2, [pc, #44]	; (80094a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800947c:	e002      	b.n	8009484 <LoopFillZerobss>

0800947e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800947e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009480:	f842 3b04 	str.w	r3, [r2], #4

08009484 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009484:	4b09      	ldr	r3, [pc, #36]	; (80094ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009486:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009488:	d3f9      	bcc.n	800947e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800948a:	f7fe f89b 	bl	80075c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800948e:	f00b fdd3 	bl	8015038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009492:	f7fc fbd5 	bl	8005c40 <main>
  bx  lr    
 8009496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009498:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800949c:	0801a058 	.word	0x0801a058
  ldr  r0, =_sdata
 80094a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80094a4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80094a8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80094ac:	20045cd0 	.word	0x20045cd0

080094b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094b0:	e7fe      	b.n	80094b0 <ADC_IRQHandler>
	...

080094b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80094b8:	4b0e      	ldr	r3, [pc, #56]	; (80094f4 <HAL_Init+0x40>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a0d      	ldr	r2, [pc, #52]	; (80094f4 <HAL_Init+0x40>)
 80094be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <HAL_Init+0x40>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <HAL_Init+0x40>)
 80094ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094d0:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <HAL_Init+0x40>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a07      	ldr	r2, [pc, #28]	; (80094f4 <HAL_Init+0x40>)
 80094d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094dc:	2003      	movs	r0, #3
 80094de:	f000 fd51 	bl	8009f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094e2:	2000      	movs	r0, #0
 80094e4:	f000 f808 	bl	80094f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094e8:	f7fd fabc 	bl	8006a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40023c00 	.word	0x40023c00

080094f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009500:	4b12      	ldr	r3, [pc, #72]	; (800954c <HAL_InitTick+0x54>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	4b12      	ldr	r3, [pc, #72]	; (8009550 <HAL_InitTick+0x58>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800950e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009512:	fbb2 f3f3 	udiv	r3, r2, r3
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fd69 	bl	8009fee <HAL_SYSTICK_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e00e      	b.n	8009544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b0f      	cmp	r3, #15
 800952a:	d80a      	bhi.n	8009542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800952c:	2200      	movs	r2, #0
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	f04f 30ff 	mov.w	r0, #4294967295
 8009534:	f000 fd31 	bl	8009f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009538:	4a06      	ldr	r2, [pc, #24]	; (8009554 <HAL_InitTick+0x5c>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	e000      	b.n	8009544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20000000 	.word	0x20000000
 8009550:	20000008 	.word	0x20000008
 8009554:	20000004 	.word	0x20000004

08009558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <HAL_IncTick+0x20>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	4b06      	ldr	r3, [pc, #24]	; (800957c <HAL_IncTick+0x24>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4413      	add	r3, r2
 8009568:	4a04      	ldr	r2, [pc, #16]	; (800957c <HAL_IncTick+0x24>)
 800956a:	6013      	str	r3, [r2, #0]
}
 800956c:	bf00      	nop
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000008 	.word	0x20000008
 800957c:	20043c58 	.word	0x20043c58

08009580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
  return uwTick;
 8009584:	4b03      	ldr	r3, [pc, #12]	; (8009594 <HAL_GetTick+0x14>)
 8009586:	681b      	ldr	r3, [r3, #0]
}
 8009588:	4618      	mov	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20043c58 	.word	0x20043c58

08009598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095a0:	f7ff ffee 	bl	8009580 <HAL_GetTick>
 80095a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b0:	d005      	beq.n	80095be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <HAL_Delay+0x40>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80095be:	bf00      	nop
 80095c0:	f7ff ffde 	bl	8009580 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d8f7      	bhi.n	80095c0 <HAL_Delay+0x28>
  {
  }
}
 80095d0:	bf00      	nop
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20000008 	.word	0x20000008

080095dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e033      	b.n	800965a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7fd fa5a 	bl	8006ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	f003 0310 	and.w	r3, r3, #16
 8009616:	2b00      	cmp	r3, #0
 8009618:	d118      	bne.n	800964c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009622:	f023 0302 	bic.w	r3, r3, #2
 8009626:	f043 0202 	orr.w	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa5a 	bl	8009ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f023 0303 	bic.w	r3, r3, #3
 8009642:	f043 0201 	orr.w	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
 800964a:	e001      	b.n	8009650 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_ADC_Start_DMA+0x1e>
 800967e:	2302      	movs	r3, #2
 8009680:	e0cc      	b.n	800981c <HAL_ADC_Start_DMA+0x1b8>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	d018      	beq.n	80096ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80096a8:	4b5e      	ldr	r3, [pc, #376]	; (8009824 <HAL_ADC_Start_DMA+0x1c0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a5e      	ldr	r2, [pc, #376]	; (8009828 <HAL_ADC_Start_DMA+0x1c4>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	0c9a      	lsrs	r2, r3, #18
 80096b4:	4613      	mov	r3, r2
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80096bc:	e002      	b.n	80096c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1f9      	bne.n	80096be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	f040 80a0 	bne.w	800981a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009718:	d106      	bne.n	8009728 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971e:	f023 0206 	bic.w	r2, r3, #6
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	645a      	str	r2, [r3, #68]	; 0x44
 8009726:	e002      	b.n	800972e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009736:	4b3d      	ldr	r3, [pc, #244]	; (800982c <HAL_ADC_Start_DMA+0x1c8>)
 8009738:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	4a3c      	ldr	r2, [pc, #240]	; (8009830 <HAL_ADC_Start_DMA+0x1cc>)
 8009740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	4a3b      	ldr	r2, [pc, #236]	; (8009834 <HAL_ADC_Start_DMA+0x1d0>)
 8009748:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	4a3a      	ldr	r2, [pc, #232]	; (8009838 <HAL_ADC_Start_DMA+0x1d4>)
 8009750:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800975a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800976a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800977a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	334c      	adds	r3, #76	; 0x4c
 8009786:	4619      	mov	r1, r3
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f000 fcea 	bl	800a164 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f003 031f 	and.w	r3, r3, #31
 8009798:	2b00      	cmp	r3, #0
 800979a:	d12a      	bne.n	80097f2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a26      	ldr	r2, [pc, #152]	; (800983c <HAL_ADC_Start_DMA+0x1d8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d015      	beq.n	80097d2 <HAL_ADC_Start_DMA+0x16e>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a25      	ldr	r2, [pc, #148]	; (8009840 <HAL_ADC_Start_DMA+0x1dc>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d105      	bne.n	80097bc <HAL_ADC_Start_DMA+0x158>
 80097b0:	4b1e      	ldr	r3, [pc, #120]	; (800982c <HAL_ADC_Start_DMA+0x1c8>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a20      	ldr	r2, [pc, #128]	; (8009844 <HAL_ADC_Start_DMA+0x1e0>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d129      	bne.n	800981a <HAL_ADC_Start_DMA+0x1b6>
 80097c6:	4b19      	ldr	r3, [pc, #100]	; (800982c <HAL_ADC_Start_DMA+0x1c8>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	2b0f      	cmp	r3, #15
 80097d0:	d823      	bhi.n	800981a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d11c      	bne.n	800981a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689a      	ldr	r2, [r3, #8]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097ee:	609a      	str	r2, [r3, #8]
 80097f0:	e013      	b.n	800981a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a11      	ldr	r2, [pc, #68]	; (800983c <HAL_ADC_Start_DMA+0x1d8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d10e      	bne.n	800981a <HAL_ADC_Start_DMA+0x1b6>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d107      	bne.n	800981a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009818:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000000 	.word	0x20000000
 8009828:	431bde83 	.word	0x431bde83
 800982c:	40012300 	.word	0x40012300
 8009830:	08009ce1 	.word	0x08009ce1
 8009834:	08009d9b 	.word	0x08009d9b
 8009838:	08009db7 	.word	0x08009db7
 800983c:	40012000 	.word	0x40012000
 8009840:	40012100 	.word	0x40012100
 8009844:	40012200 	.word	0x40012200

08009848 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_ADC_ConfigChannel+0x1c>
 800989c:	2302      	movs	r3, #2
 800989e:	e113      	b.n	8009ac8 <HAL_ADC_ConfigChannel+0x244>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d925      	bls.n	80098fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68d9      	ldr	r1, [r3, #12]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	4613      	mov	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	3b1e      	subs	r3, #30
 80098c6:	2207      	movs	r2, #7
 80098c8:	fa02 f303 	lsl.w	r3, r2, r3
 80098cc:	43da      	mvns	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	400a      	ands	r2, r1
 80098d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68d9      	ldr	r1, [r3, #12]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4618      	mov	r0, r3
 80098e8:	4603      	mov	r3, r0
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	4403      	add	r3, r0
 80098ee:	3b1e      	subs	r3, #30
 80098f0:	409a      	lsls	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	60da      	str	r2, [r3, #12]
 80098fa:	e022      	b.n	8009942 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6919      	ldr	r1, [r3, #16]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	4613      	mov	r3, r2
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	4413      	add	r3, r2
 8009910:	2207      	movs	r2, #7
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	43da      	mvns	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	400a      	ands	r2, r1
 800991e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6919      	ldr	r1, [r3, #16]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	4618      	mov	r0, r3
 8009932:	4603      	mov	r3, r0
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4403      	add	r3, r0
 8009938:	409a      	lsls	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b06      	cmp	r3, #6
 8009948:	d824      	bhi.n	8009994 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	3b05      	subs	r3, #5
 800995c:	221f      	movs	r2, #31
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	43da      	mvns	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	400a      	ands	r2, r1
 800996a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	4618      	mov	r0, r3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	3b05      	subs	r3, #5
 8009986:	fa00 f203 	lsl.w	r2, r0, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	635a      	str	r2, [r3, #52]	; 0x34
 8009992:	e04c      	b.n	8009a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	2b0c      	cmp	r3, #12
 800999a:	d824      	bhi.n	80099e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	3b23      	subs	r3, #35	; 0x23
 80099ae:	221f      	movs	r2, #31
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	43da      	mvns	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	400a      	ands	r2, r1
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	4618      	mov	r0, r3
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	3b23      	subs	r3, #35	; 0x23
 80099d8:	fa00 f203 	lsl.w	r2, r0, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30
 80099e4:	e023      	b.n	8009a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	3b41      	subs	r3, #65	; 0x41
 80099f8:	221f      	movs	r2, #31
 80099fa:	fa02 f303 	lsl.w	r3, r2, r3
 80099fe:	43da      	mvns	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	400a      	ands	r2, r1
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4618      	mov	r0, r3
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	3b41      	subs	r3, #65	; 0x41
 8009a22:	fa00 f203 	lsl.w	r2, r0, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a2e:	4b29      	ldr	r3, [pc, #164]	; (8009ad4 <HAL_ADC_ConfigChannel+0x250>)
 8009a30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a28      	ldr	r2, [pc, #160]	; (8009ad8 <HAL_ADC_ConfigChannel+0x254>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d10f      	bne.n	8009a5c <HAL_ADC_ConfigChannel+0x1d8>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b12      	cmp	r3, #18
 8009a42:	d10b      	bne.n	8009a5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1d      	ldr	r2, [pc, #116]	; (8009ad8 <HAL_ADC_ConfigChannel+0x254>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d12b      	bne.n	8009abe <HAL_ADC_ConfigChannel+0x23a>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1c      	ldr	r2, [pc, #112]	; (8009adc <HAL_ADC_ConfigChannel+0x258>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d003      	beq.n	8009a78 <HAL_ADC_ConfigChannel+0x1f4>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b11      	cmp	r3, #17
 8009a76:	d122      	bne.n	8009abe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a11      	ldr	r2, [pc, #68]	; (8009adc <HAL_ADC_ConfigChannel+0x258>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d111      	bne.n	8009abe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009a9a:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <HAL_ADC_ConfigChannel+0x25c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a11      	ldr	r2, [pc, #68]	; (8009ae4 <HAL_ADC_ConfigChannel+0x260>)
 8009aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa4:	0c9a      	lsrs	r2, r3, #18
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009ab0:	e002      	b.n	8009ab8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f9      	bne.n	8009ab2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	40012300 	.word	0x40012300
 8009ad8:	40012000 	.word	0x40012000
 8009adc:	10000012 	.word	0x10000012
 8009ae0:	20000000 	.word	0x20000000
 8009ae4:	431bde83 	.word	0x431bde83

08009ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009af0:	4b79      	ldr	r3, [pc, #484]	; (8009cd8 <ADC_Init+0x1f0>)
 8009af2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6859      	ldr	r1, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	021a      	lsls	r2, r3, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6859      	ldr	r1, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	430a      	orrs	r2, r1
 8009b52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6899      	ldr	r1, [r3, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68da      	ldr	r2, [r3, #12]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	4a58      	ldr	r2, [pc, #352]	; (8009cdc <ADC_Init+0x1f4>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d022      	beq.n	8009bc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6899      	ldr	r1, [r3, #8]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6899      	ldr	r1, [r3, #8]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]
 8009bc4:	e00f      	b.n	8009be6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0202 	bic.w	r2, r2, #2
 8009bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6899      	ldr	r1, [r3, #8]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	7e1b      	ldrb	r3, [r3, #24]
 8009c00:	005a      	lsls	r2, r3, #1
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01b      	beq.n	8009c4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	035a      	lsls	r2, r3, #13
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
 8009c4a:	e007      	b.n	8009c5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	051a      	lsls	r2, r3, #20
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6899      	ldr	r1, [r3, #8]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c9e:	025a      	lsls	r2, r3, #9
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6899      	ldr	r1, [r3, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	029a      	lsls	r2, r3, #10
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	609a      	str	r2, [r3, #8]
}
 8009ccc:	bf00      	nop
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40012300 	.word	0x40012300
 8009cdc:	0f000001 	.word	0x0f000001

08009ce0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d13c      	bne.n	8009d74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d12b      	bne.n	8009d6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d127      	bne.n	8009d6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d119      	bne.n	8009d6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0220 	bic.w	r2, r2, #32
 8009d46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	f043 0201 	orr.w	r2, r3, #1
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fd6b 	bl	8009848 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009d72:	e00e      	b.n	8009d92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff fd75 	bl	8009870 <HAL_ADC_ErrorCallback>
}
 8009d86:	e004      	b.n	8009d92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
}
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff fd57 	bl	800985c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009dae:	bf00      	nop
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2240      	movs	r2, #64	; 0x40
 8009dc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	f043 0204 	orr.w	r2, r3, #4
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff fd4a 	bl	8009870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <__NVIC_SetPriorityGrouping+0x44>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e00:	4013      	ands	r3, r2
 8009e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e16:	4a04      	ldr	r2, [pc, #16]	; (8009e28 <__NVIC_SetPriorityGrouping+0x44>)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	60d3      	str	r3, [r2, #12]
}
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	e000ed00 	.word	0xe000ed00

08009e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e30:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <__NVIC_GetPriorityGrouping+0x18>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	0a1b      	lsrs	r3, r3, #8
 8009e36:	f003 0307 	and.w	r3, r3, #7
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	e000ed00 	.word	0xe000ed00

08009e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	db0b      	blt.n	8009e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	f003 021f 	and.w	r2, r3, #31
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <__NVIC_EnableIRQ+0x38>)
 8009e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e66:	095b      	lsrs	r3, r3, #5
 8009e68:	2001      	movs	r0, #1
 8009e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8009e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	e000e100 	.word	0xe000e100

08009e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	db0a      	blt.n	8009eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	490c      	ldr	r1, [pc, #48]	; (8009ed0 <__NVIC_SetPriority+0x4c>)
 8009e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea2:	0112      	lsls	r2, r2, #4
 8009ea4:	b2d2      	uxtb	r2, r2
 8009ea6:	440b      	add	r3, r1
 8009ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009eac:	e00a      	b.n	8009ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	4908      	ldr	r1, [pc, #32]	; (8009ed4 <__NVIC_SetPriority+0x50>)
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	3b04      	subs	r3, #4
 8009ebc:	0112      	lsls	r2, r2, #4
 8009ebe:	b2d2      	uxtb	r2, r2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	761a      	strb	r2, [r3, #24]
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	e000e100 	.word	0xe000e100
 8009ed4:	e000ed00 	.word	0xe000ed00

08009ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b089      	sub	sp, #36	; 0x24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f1c3 0307 	rsb	r3, r3, #7
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	bf28      	it	cs
 8009ef6:	2304      	movcs	r3, #4
 8009ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	3304      	adds	r3, #4
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d902      	bls.n	8009f08 <NVIC_EncodePriority+0x30>
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	3b03      	subs	r3, #3
 8009f06:	e000      	b.n	8009f0a <NVIC_EncodePriority+0x32>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	fa02 f303 	lsl.w	r3, r2, r3
 8009f16:	43da      	mvns	r2, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	401a      	ands	r2, r3
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f20:	f04f 31ff 	mov.w	r1, #4294967295
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2a:	43d9      	mvns	r1, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f30:	4313      	orrs	r3, r2
         );
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3724      	adds	r7, #36	; 0x24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f50:	d301      	bcc.n	8009f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f52:	2301      	movs	r3, #1
 8009f54:	e00f      	b.n	8009f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f56:	4a0a      	ldr	r2, [pc, #40]	; (8009f80 <SysTick_Config+0x40>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f5e:	210f      	movs	r1, #15
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	f7ff ff8e 	bl	8009e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <SysTick_Config+0x40>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f6e:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <SysTick_Config+0x40>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	e000e010 	.word	0xe000e010

08009f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff ff29 	bl	8009de4 <__NVIC_SetPriorityGrouping>
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b086      	sub	sp, #24
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fac:	f7ff ff3e 	bl	8009e2c <__NVIC_GetPriorityGrouping>
 8009fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	6978      	ldr	r0, [r7, #20]
 8009fb8:	f7ff ff8e 	bl	8009ed8 <NVIC_EncodePriority>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff ff5d 	bl	8009e84 <__NVIC_SetPriority>
}
 8009fca:	bf00      	nop
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	4603      	mov	r3, r0
 8009fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff ff31 	bl	8009e48 <__NVIC_EnableIRQ>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ffa2 	bl	8009f40 <SysTick_Config>
 8009ffc:	4603      	mov	r3, r0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a014:	f7ff fab4 	bl	8009580 <HAL_GetTick>
 800a018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e099      	b.n	800a158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 0201 	bic.w	r2, r2, #1
 800a042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a044:	e00f      	b.n	800a066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a046:	f7ff fa9b 	bl	8009580 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b05      	cmp	r3, #5
 800a052:	d908      	bls.n	800a066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2220      	movs	r2, #32
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2203      	movs	r2, #3
 800a05e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e078      	b.n	800a158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e8      	bne.n	800a046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	4b38      	ldr	r3, [pc, #224]	; (800a160 <HAL_DMA_Init+0x158>)
 800a080:	4013      	ands	r3, r2
 800a082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a09e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d107      	bne.n	800a0d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d117      	bne.n	800a12a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00e      	beq.n	800a12a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fa9d 	bl	800a64c <DMA_CheckFifoParam>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2240      	movs	r2, #64	; 0x40
 800a11c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a126:	2301      	movs	r3, #1
 800a128:	e016      	b.n	800a158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa54 	bl	800a5e0 <DMA_CalcBaseAndBitshift>
 800a138:	4603      	mov	r3, r0
 800a13a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a140:	223f      	movs	r2, #63	; 0x3f
 800a142:	409a      	lsls	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	f010803f 	.word	0xf010803f

0800a164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_DMA_Start_IT+0x26>
 800a186:	2302      	movs	r3, #2
 800a188:	e040      	b.n	800a20c <HAL_DMA_Start_IT+0xa8>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d12f      	bne.n	800a1fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f9e6 	bl	800a584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1bc:	223f      	movs	r2, #63	; 0x3f
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0216 	orr.w	r2, r2, #22
 800a1d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0208 	orr.w	r2, r2, #8
 800a1ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	e005      	b.n	800a20a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a206:	2302      	movs	r3, #2
 800a208:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d004      	beq.n	800a232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2280      	movs	r2, #128	; 0x80
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e00c      	b.n	800a24c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2205      	movs	r2, #5
 800a236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0201 	bic.w	r2, r2, #1
 800a248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a264:	4b92      	ldr	r3, [pc, #584]	; (800a4b0 <HAL_DMA_IRQHandler+0x258>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a92      	ldr	r2, [pc, #584]	; (800a4b4 <HAL_DMA_IRQHandler+0x25c>)
 800a26a:	fba2 2303 	umull	r2, r3, r2, r3
 800a26e:	0a9b      	lsrs	r3, r3, #10
 800a270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a282:	2208      	movs	r2, #8
 800a284:	409a      	lsls	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4013      	ands	r3, r2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d01a      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d013      	beq.n	800a2c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0204 	bic.w	r2, r2, #4
 800a2aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	409a      	lsls	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2bc:	f043 0201 	orr.w	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	409a      	lsls	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d012      	beq.n	800a2fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	409a      	lsls	r2, r3
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f2:	f043 0202 	orr.w	r2, r3, #2
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fe:	2204      	movs	r2, #4
 800a300:	409a      	lsls	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	4013      	ands	r3, r2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d012      	beq.n	800a330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0302 	and.w	r3, r3, #2
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a31c:	2204      	movs	r2, #4
 800a31e:	409a      	lsls	r2, r3
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a328:	f043 0204 	orr.w	r2, r3, #4
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a334:	2210      	movs	r2, #16
 800a336:	409a      	lsls	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d043      	beq.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0308 	and.w	r3, r3, #8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d03c      	beq.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a352:	2210      	movs	r2, #16
 800a354:	409a      	lsls	r2, r3
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d018      	beq.n	800a39a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d108      	bne.n	800a388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d024      	beq.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
 800a386:	e01f      	b.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01b      	beq.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	e016      	b.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d107      	bne.n	800a3b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0208 	bic.w	r2, r2, #8
 800a3b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	409a      	lsls	r2, r3
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 808e 	beq.w	800a4f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8086 	beq.w	800a4f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	409a      	lsls	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b05      	cmp	r3, #5
 800a400:	d136      	bne.n	800a470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 0216 	bic.w	r2, r2, #22
 800a410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <HAL_DMA_IRQHandler+0x1da>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d007      	beq.n	800a442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0208 	bic.w	r2, r2, #8
 800a440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a446:	223f      	movs	r2, #63	; 0x3f
 800a448:	409a      	lsls	r2, r3
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a462:	2b00      	cmp	r3, #0
 800a464:	d07d      	beq.n	800a562 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
        }
        return;
 800a46e:	e078      	b.n	800a562 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01c      	beq.n	800a4b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d108      	bne.n	800a49e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a490:	2b00      	cmp	r3, #0
 800a492:	d030      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
 800a49c:	e02b      	b.n	800a4f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d027      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
 800a4ae:	e022      	b.n	800a4f6 <HAL_DMA_IRQHandler+0x29e>
 800a4b0:	20000000 	.word	0x20000000
 800a4b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10f      	bne.n	800a4e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0210 	bic.w	r2, r2, #16
 800a4d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d032      	beq.n	800a564 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d022      	beq.n	800a550 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2205      	movs	r2, #5
 800a50e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0201 	bic.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3301      	adds	r3, #1
 800a526:	60bb      	str	r3, [r7, #8]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d307      	bcc.n	800a53e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f2      	bne.n	800a522 <HAL_DMA_IRQHandler+0x2ca>
 800a53c:	e000      	b.n	800a540 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a53e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	4798      	blx	r3
 800a560:	e000      	b.n	800a564 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a562:	bf00      	nop
    }
  }
}
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop

0800a56c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	2b40      	cmp	r3, #64	; 0x40
 800a5b0:	d108      	bne.n	800a5c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5c2:	e007      	b.n	800a5d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	60da      	str	r2, [r3, #12]
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	3b10      	subs	r3, #16
 800a5f0:	4a14      	ldr	r2, [pc, #80]	; (800a644 <DMA_CalcBaseAndBitshift+0x64>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	091b      	lsrs	r3, r3, #4
 800a5f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a5fa:	4a13      	ldr	r2, [pc, #76]	; (800a648 <DMA_CalcBaseAndBitshift+0x68>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d909      	bls.n	800a622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	1d1a      	adds	r2, r3, #4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	659a      	str	r2, [r3, #88]	; 0x58
 800a620:	e007      	b.n	800a632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a636:	4618      	mov	r0, r3
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	aaaaaaab 	.word	0xaaaaaaab
 800a648:	08019a9c 	.word	0x08019a9c

0800a64c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d11f      	bne.n	800a6a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d855      	bhi.n	800a718 <DMA_CheckFifoParam+0xcc>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <DMA_CheckFifoParam+0x28>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a685 	.word	0x0800a685
 800a678:	0800a697 	.word	0x0800a697
 800a67c:	0800a685 	.word	0x0800a685
 800a680:	0800a719 	.word	0x0800a719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d045      	beq.n	800a71c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a694:	e042      	b.n	800a71c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a69e:	d13f      	bne.n	800a720 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a4:	e03c      	b.n	800a720 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ae:	d121      	bne.n	800a6f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d836      	bhi.n	800a724 <DMA_CheckFifoParam+0xd8>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <DMA_CheckFifoParam+0x70>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6cd 	.word	0x0800a6cd
 800a6c0:	0800a6d3 	.word	0x0800a6d3
 800a6c4:	0800a6cd 	.word	0x0800a6cd
 800a6c8:	0800a6e5 	.word	0x0800a6e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d0:	e02f      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d024      	beq.n	800a728 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6e2:	e021      	b.n	800a728 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6ec:	d11e      	bne.n	800a72c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6f2:	e01b      	b.n	800a72c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d902      	bls.n	800a700 <DMA_CheckFifoParam+0xb4>
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d003      	beq.n	800a706 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a6fe:	e018      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
      break;
 800a704:	e015      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00e      	beq.n	800a730 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
      break;
 800a716:	e00b      	b.n	800a730 <DMA_CheckFifoParam+0xe4>
      break;
 800a718:	bf00      	nop
 800a71a:	e00a      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;
 800a71c:	bf00      	nop
 800a71e:	e008      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;
 800a720:	bf00      	nop
 800a722:	e006      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;
 800a724:	bf00      	nop
 800a726:	e004      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;
 800a728:	bf00      	nop
 800a72a:	e002      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;   
 800a72c:	bf00      	nop
 800a72e:	e000      	b.n	800a732 <DMA_CheckFifoParam+0xe6>
      break;
 800a730:	bf00      	nop
    }
  } 
  
  return status; 
 800a732:	7bfb      	ldrb	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a740:	b480      	push	{r7}
 800a742:	b089      	sub	sp, #36	; 0x24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a752:	2300      	movs	r3, #0
 800a754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a756:	2300      	movs	r3, #0
 800a758:	61fb      	str	r3, [r7, #28]
 800a75a:	e177      	b.n	800aa4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a75c:	2201      	movs	r2, #1
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	fa02 f303 	lsl.w	r3, r2, r3
 800a764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4013      	ands	r3, r2
 800a76e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	429a      	cmp	r2, r3
 800a776:	f040 8166 	bne.w	800aa46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d00b      	beq.n	800a79a <HAL_GPIO_Init+0x5a>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d007      	beq.n	800a79a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a78e:	2b11      	cmp	r3, #17
 800a790:	d003      	beq.n	800a79a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b12      	cmp	r3, #18
 800a798:	d130      	bne.n	800a7fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7aa:	43db      	mvns	r3, r3
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d8:	43db      	mvns	r3, r3
 800a7da:	69ba      	ldr	r2, [r7, #24]
 800a7dc:	4013      	ands	r3, r2
 800a7de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	091b      	lsrs	r3, r3, #4
 800a7e6:	f003 0201 	and.w	r2, r3, #1
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	2203      	movs	r2, #3
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	43db      	mvns	r3, r3
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	4013      	ands	r3, r2
 800a812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	fa02 f303 	lsl.w	r3, r2, r3
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	4313      	orrs	r3, r2
 800a824:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	2b02      	cmp	r3, #2
 800a832:	d003      	beq.n	800a83c <HAL_GPIO_Init+0xfc>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	2b12      	cmp	r3, #18
 800a83a:	d123      	bne.n	800a884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	08da      	lsrs	r2, r3, #3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3208      	adds	r2, #8
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	f003 0307 	and.w	r3, r3, #7
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	220f      	movs	r2, #15
 800a854:	fa02 f303 	lsl.w	r3, r2, r3
 800a858:	43db      	mvns	r3, r3
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	4013      	ands	r3, r2
 800a85e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	fa02 f303 	lsl.w	r3, r2, r3
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	4313      	orrs	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	08da      	lsrs	r2, r3, #3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3208      	adds	r2, #8
 800a87e:	69b9      	ldr	r1, [r7, #24]
 800a880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	2203      	movs	r2, #3
 800a890:	fa02 f303 	lsl.w	r3, r2, r3
 800a894:	43db      	mvns	r3, r3
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	4013      	ands	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f003 0203 	and.w	r2, r3, #3
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 80c0 	beq.w	800aa46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	4b65      	ldr	r3, [pc, #404]	; (800aa60 <HAL_GPIO_Init+0x320>)
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ce:	4a64      	ldr	r2, [pc, #400]	; (800aa60 <HAL_GPIO_Init+0x320>)
 800a8d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8d4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8d6:	4b62      	ldr	r3, [pc, #392]	; (800aa60 <HAL_GPIO_Init+0x320>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8e2:	4a60      	ldr	r2, [pc, #384]	; (800aa64 <HAL_GPIO_Init+0x324>)
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	089b      	lsrs	r3, r3, #2
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	220f      	movs	r2, #15
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	43db      	mvns	r3, r3
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	4013      	ands	r3, r2
 800a904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a57      	ldr	r2, [pc, #348]	; (800aa68 <HAL_GPIO_Init+0x328>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d037      	beq.n	800a97e <HAL_GPIO_Init+0x23e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a56      	ldr	r2, [pc, #344]	; (800aa6c <HAL_GPIO_Init+0x32c>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d031      	beq.n	800a97a <HAL_GPIO_Init+0x23a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a55      	ldr	r2, [pc, #340]	; (800aa70 <HAL_GPIO_Init+0x330>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d02b      	beq.n	800a976 <HAL_GPIO_Init+0x236>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a54      	ldr	r2, [pc, #336]	; (800aa74 <HAL_GPIO_Init+0x334>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d025      	beq.n	800a972 <HAL_GPIO_Init+0x232>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a53      	ldr	r2, [pc, #332]	; (800aa78 <HAL_GPIO_Init+0x338>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01f      	beq.n	800a96e <HAL_GPIO_Init+0x22e>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a52      	ldr	r2, [pc, #328]	; (800aa7c <HAL_GPIO_Init+0x33c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d019      	beq.n	800a96a <HAL_GPIO_Init+0x22a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a51      	ldr	r2, [pc, #324]	; (800aa80 <HAL_GPIO_Init+0x340>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d013      	beq.n	800a966 <HAL_GPIO_Init+0x226>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a50      	ldr	r2, [pc, #320]	; (800aa84 <HAL_GPIO_Init+0x344>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00d      	beq.n	800a962 <HAL_GPIO_Init+0x222>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a4f      	ldr	r2, [pc, #316]	; (800aa88 <HAL_GPIO_Init+0x348>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <HAL_GPIO_Init+0x21e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a4e      	ldr	r2, [pc, #312]	; (800aa8c <HAL_GPIO_Init+0x34c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d101      	bne.n	800a95a <HAL_GPIO_Init+0x21a>
 800a956:	2309      	movs	r3, #9
 800a958:	e012      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a95a:	230a      	movs	r3, #10
 800a95c:	e010      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a95e:	2308      	movs	r3, #8
 800a960:	e00e      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a962:	2307      	movs	r3, #7
 800a964:	e00c      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a966:	2306      	movs	r3, #6
 800a968:	e00a      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a96a:	2305      	movs	r3, #5
 800a96c:	e008      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a96e:	2304      	movs	r3, #4
 800a970:	e006      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a972:	2303      	movs	r3, #3
 800a974:	e004      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a976:	2302      	movs	r3, #2
 800a978:	e002      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <HAL_GPIO_Init+0x240>
 800a97e:	2300      	movs	r3, #0
 800a980:	69fa      	ldr	r2, [r7, #28]
 800a982:	f002 0203 	and.w	r2, r2, #3
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	4093      	lsls	r3, r2
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a990:	4934      	ldr	r1, [pc, #208]	; (800aa64 <HAL_GPIO_Init+0x324>)
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	089b      	lsrs	r3, r3, #2
 800a996:	3302      	adds	r3, #2
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a99e:	4b3c      	ldr	r3, [pc, #240]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	43db      	mvns	r3, r3
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9c2:	4a33      	ldr	r2, [pc, #204]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a9c8:	4b31      	ldr	r3, [pc, #196]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9ec:	4a28      	ldr	r2, [pc, #160]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a9f2:	4b27      	ldr	r3, [pc, #156]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	43db      	mvns	r3, r3
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa16:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa1c:	4b1c      	ldr	r3, [pc, #112]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	43db      	mvns	r3, r3
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa40:	4a13      	ldr	r2, [pc, #76]	; (800aa90 <HAL_GPIO_Init+0x350>)
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2b0f      	cmp	r3, #15
 800aa50:	f67f ae84 	bls.w	800a75c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa54:	bf00      	nop
 800aa56:	3724      	adds	r7, #36	; 0x24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	40023800 	.word	0x40023800
 800aa64:	40013800 	.word	0x40013800
 800aa68:	40020000 	.word	0x40020000
 800aa6c:	40020400 	.word	0x40020400
 800aa70:	40020800 	.word	0x40020800
 800aa74:	40020c00 	.word	0x40020c00
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	40021400 	.word	0x40021400
 800aa80:	40021800 	.word	0x40021800
 800aa84:	40021c00 	.word	0x40021c00
 800aa88:	40022000 	.word	0x40022000
 800aa8c:	40022400 	.word	0x40022400
 800aa90:	40013c00 	.word	0x40013c00

0800aa94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691a      	ldr	r2, [r3, #16]
 800aaa4:	887b      	ldrh	r3, [r7, #2]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
 800aab0:	e001      	b.n	800aab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aab2:	2300      	movs	r3, #0
 800aab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
 800aad0:	4613      	mov	r3, r2
 800aad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aad4:	787b      	ldrb	r3, [r7, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aada:	887a      	ldrh	r2, [r7, #2]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aae0:	e003      	b.n	800aaea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aae2:	887b      	ldrh	r3, [r7, #2]
 800aae4:	041a      	lsls	r2, r3, #16
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	619a      	str	r2, [r3, #24]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e11f      	b.n	800ad4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7fc f87a 	bl	8006c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2224      	movs	r2, #36	; 0x24
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0201 	bic.w	r2, r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ab5c:	f001 f96e 	bl	800be3c <HAL_RCC_GetPCLK1Freq>
 800ab60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	4a7b      	ldr	r2, [pc, #492]	; (800ad54 <HAL_I2C_Init+0x25c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d807      	bhi.n	800ab7c <HAL_I2C_Init+0x84>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4a7a      	ldr	r2, [pc, #488]	; (800ad58 <HAL_I2C_Init+0x260>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	bf94      	ite	ls
 800ab74:	2301      	movls	r3, #1
 800ab76:	2300      	movhi	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	e006      	b.n	800ab8a <HAL_I2C_Init+0x92>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4a77      	ldr	r2, [pc, #476]	; (800ad5c <HAL_I2C_Init+0x264>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	bf94      	ite	ls
 800ab84:	2301      	movls	r3, #1
 800ab86:	2300      	movhi	r3, #0
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e0db      	b.n	800ad4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4a72      	ldr	r2, [pc, #456]	; (800ad60 <HAL_I2C_Init+0x268>)
 800ab96:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9a:	0c9b      	lsrs	r3, r3, #18
 800ab9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	4a64      	ldr	r2, [pc, #400]	; (800ad54 <HAL_I2C_Init+0x25c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d802      	bhi.n	800abcc <HAL_I2C_Init+0xd4>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	3301      	adds	r3, #1
 800abca:	e009      	b.n	800abe0 <HAL_I2C_Init+0xe8>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abd2:	fb02 f303 	mul.w	r3, r2, r3
 800abd6:	4a63      	ldr	r2, [pc, #396]	; (800ad64 <HAL_I2C_Init+0x26c>)
 800abd8:	fba2 2303 	umull	r2, r3, r2, r3
 800abdc:	099b      	lsrs	r3, r3, #6
 800abde:	3301      	adds	r3, #1
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	6812      	ldr	r2, [r2, #0]
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800abf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	4956      	ldr	r1, [pc, #344]	; (800ad54 <HAL_I2C_Init+0x25c>)
 800abfc:	428b      	cmp	r3, r1
 800abfe:	d80d      	bhi.n	800ac1c <HAL_I2C_Init+0x124>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	1e59      	subs	r1, r3, #1
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac0e:	3301      	adds	r3, #1
 800ac10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	bf38      	it	cc
 800ac18:	2304      	movcc	r3, #4
 800ac1a:	e04f      	b.n	800acbc <HAL_I2C_Init+0x1c4>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d111      	bne.n	800ac48 <HAL_I2C_Init+0x150>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	1e58      	subs	r0, r3, #1
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6859      	ldr	r1, [r3, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	440b      	add	r3, r1
 800ac32:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac36:	3301      	adds	r3, #1
 800ac38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bf0c      	ite	eq
 800ac40:	2301      	moveq	r3, #1
 800ac42:	2300      	movne	r3, #0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	e012      	b.n	800ac6e <HAL_I2C_Init+0x176>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	1e58      	subs	r0, r3, #1
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6859      	ldr	r1, [r3, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	440b      	add	r3, r1
 800ac56:	0099      	lsls	r1, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bf0c      	ite	eq
 800ac68:	2301      	moveq	r3, #1
 800ac6a:	2300      	movne	r3, #0
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <HAL_I2C_Init+0x17e>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e022      	b.n	800acbc <HAL_I2C_Init+0x1c4>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10e      	bne.n	800ac9c <HAL_I2C_Init+0x1a4>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	1e58      	subs	r0, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6859      	ldr	r1, [r3, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	440b      	add	r3, r1
 800ac8c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac90:	3301      	adds	r3, #1
 800ac92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9a:	e00f      	b.n	800acbc <HAL_I2C_Init+0x1c4>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	1e58      	subs	r0, r3, #1
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6859      	ldr	r1, [r3, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	0099      	lsls	r1, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	fbb0 f3f3 	udiv	r3, r0, r3
 800acb2:	3301      	adds	r3, #1
 800acb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	6809      	ldr	r1, [r1, #0]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69da      	ldr	r2, [r3, #28]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800acea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6911      	ldr	r1, [r2, #16]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	68d2      	ldr	r2, [r2, #12]
 800acf6:	4311      	orrs	r1, r2
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695a      	ldr	r2, [r3, #20]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	000186a0 	.word	0x000186a0
 800ad58:	001e847f 	.word	0x001e847f
 800ad5c:	003d08ff 	.word	0x003d08ff
 800ad60:	431bde83 	.word	0x431bde83
 800ad64:	10624dd3 	.word	0x10624dd3

0800ad68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	607a      	str	r2, [r7, #4]
 800ad72:	461a      	mov	r2, r3
 800ad74:	460b      	mov	r3, r1
 800ad76:	817b      	strh	r3, [r7, #10]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad7c:	f7fe fc00 	bl	8009580 <HAL_GetTick>
 800ad80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	f040 80e0 	bne.w	800af50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	2319      	movs	r3, #25
 800ad96:	2201      	movs	r2, #1
 800ad98:	4970      	ldr	r1, [pc, #448]	; (800af5c <HAL_I2C_Master_Transmit+0x1f4>)
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fc58 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ada6:	2302      	movs	r3, #2
 800ada8:	e0d3      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d101      	bne.n	800adb8 <HAL_I2C_Master_Transmit+0x50>
 800adb4:	2302      	movs	r3, #2
 800adb6:	e0cc      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d007      	beq.n	800adde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0201 	orr.w	r2, r2, #1
 800addc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2221      	movs	r2, #33	; 0x21
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2210      	movs	r2, #16
 800adfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	893a      	ldrh	r2, [r7, #8]
 800ae0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4a50      	ldr	r2, [pc, #320]	; (800af60 <HAL_I2C_Master_Transmit+0x1f8>)
 800ae1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ae20:	8979      	ldrh	r1, [r7, #10]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	6a3a      	ldr	r2, [r7, #32]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fac2 	bl	800b3b0 <I2C_MasterRequestWrite>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e08d      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	613b      	str	r3, [r7, #16]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ae4c:	e066      	b.n	800af1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	6a39      	ldr	r1, [r7, #32]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 fcd2 	bl	800b7fc <I2C_WaitOnTXEFlagUntilTimeout>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00d      	beq.n	800ae7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d107      	bne.n	800ae76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e06b      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aea2:	3b01      	subs	r3, #1
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d11b      	bne.n	800aef0 <HAL_I2C_Master_Transmit+0x188>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d017      	beq.n	800aef0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	781a      	ldrb	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	6a39      	ldr	r1, [r7, #32]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 fcc2 	bl	800b87e <I2C_WaitOnBTFFlagUntilTimeout>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	2b04      	cmp	r3, #4
 800af06:	d107      	bne.n	800af18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e01a      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af20:	2b00      	cmp	r3, #0
 800af22:	d194      	bne.n	800ae4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2220      	movs	r2, #32
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e000      	b.n	800af52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800af50:	2302      	movs	r3, #2
  }
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	00100002 	.word	0x00100002
 800af60:	ffff0000 	.word	0xffff0000

0800af64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	; 0x30
 800af68:	af02      	add	r7, sp, #8
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	607a      	str	r2, [r7, #4]
 800af6e:	461a      	mov	r2, r3
 800af70:	460b      	mov	r3, r1
 800af72:	817b      	strh	r3, [r7, #10]
 800af74:	4613      	mov	r3, r2
 800af76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af78:	f7fe fb02 	bl	8009580 <HAL_GetTick>
 800af7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b20      	cmp	r3, #32
 800af88:	f040 820b 	bne.w	800b3a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	2319      	movs	r3, #25
 800af92:	2201      	movs	r2, #1
 800af94:	497c      	ldr	r1, [pc, #496]	; (800b188 <HAL_I2C_Master_Receive+0x224>)
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fb5a 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800afa2:	2302      	movs	r3, #2
 800afa4:	e1fe      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_I2C_Master_Receive+0x50>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e1f7      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d007      	beq.n	800afda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2222      	movs	r2, #34	; 0x22
 800afee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2210      	movs	r2, #16
 800aff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	893a      	ldrh	r2, [r7, #8]
 800b00a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4a5c      	ldr	r2, [pc, #368]	; (800b18c <HAL_I2C_Master_Receive+0x228>)
 800b01a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b01c:	8979      	ldrh	r1, [r7, #10]
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 fa46 	bl	800b4b4 <I2C_MasterRequestRead>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e1b8      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d113      	bne.n	800b062 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b03a:	2300      	movs	r3, #0
 800b03c:	623b      	str	r3, [r7, #32]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	623b      	str	r3, [r7, #32]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	623b      	str	r3, [r7, #32]
 800b04e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	e18c      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b066:	2b01      	cmp	r3, #1
 800b068:	d11b      	bne.n	800b0a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b07a:	2300      	movs	r3, #0
 800b07c:	61fb      	str	r3, [r7, #28]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	61fb      	str	r3, [r7, #28]
 800b08e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e16c      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d11b      	bne.n	800b0e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	61bb      	str	r3, [r7, #24]
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	e14c      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b108:	e138      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b10e:	2b03      	cmp	r3, #3
 800b110:	f200 80f1 	bhi.w	800b2f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d123      	bne.n	800b164 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fbed 	bl	800b900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e139      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691a      	ldr	r2, [r3, #16]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b14c:	3b01      	subs	r3, #1
 800b14e:	b29a      	uxth	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b162:	e10b      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d14e      	bne.n	800b20a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2200      	movs	r2, #0
 800b174:	4906      	ldr	r1, [pc, #24]	; (800b190 <HAL_I2C_Master_Receive+0x22c>)
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fa6a 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d008      	beq.n	800b194 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e10e      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
 800b186:	bf00      	nop
 800b188:	00100002 	.word	0x00100002
 800b18c:	ffff0000 	.word	0xffff0000
 800b190:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b208:	e0b8      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	2200      	movs	r2, #0
 800b212:	4966      	ldr	r1, [pc, #408]	; (800b3ac <HAL_I2C_Master_Receive+0x448>)
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 fa1b 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e0bf      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b250:	3b01      	subs	r3, #1
 800b252:	b29a      	uxth	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	2200      	movs	r2, #0
 800b26e:	494f      	ldr	r1, [pc, #316]	; (800b3ac <HAL_I2C_Master_Receive+0x448>)
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 f9ed 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e091      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b28e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691a      	ldr	r2, [r3, #16]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	b2d2      	uxtb	r2, r2
 800b29c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	691a      	ldr	r2, [r3, #16]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	b2d2      	uxtb	r2, r2
 800b2ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2f4:	e042      	b.n	800b37c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f000 fb00 	bl	800b900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e04c      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	b29a      	uxth	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b04      	cmp	r3, #4
 800b348:	d118      	bne.n	800b37c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	691a      	ldr	r2, [r3, #16]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	b2d2      	uxtb	r2, r2
 800b356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b366:	3b01      	subs	r3, #1
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b372:	b29b      	uxth	r3, r3
 800b374:	3b01      	subs	r3, #1
 800b376:	b29a      	uxth	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b380:	2b00      	cmp	r3, #0
 800b382:	f47f aec2 	bne.w	800b10a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e000      	b.n	800b3a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b3a2:	2302      	movs	r3, #2
  }
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3728      	adds	r7, #40	; 0x28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	00010004 	.word	0x00010004

0800b3b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b088      	sub	sp, #32
 800b3b4:	af02      	add	r7, sp, #8
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	607a      	str	r2, [r7, #4]
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d006      	beq.n	800b3da <I2C_MasterRequestWrite+0x2a>
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d003      	beq.n	800b3da <I2C_MasterRequestWrite+0x2a>
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b3d8:	d108      	bne.n	800b3ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	e00b      	b.n	800b404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f0:	2b12      	cmp	r3, #18
 800b3f2:	d107      	bne.n	800b404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f91d 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00d      	beq.n	800b438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b42a:	d103      	bne.n	800b434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e035      	b.n	800b4a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b440:	d108      	bne.n	800b454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b442:	897b      	ldrh	r3, [r7, #10]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	461a      	mov	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b450:	611a      	str	r2, [r3, #16]
 800b452:	e01b      	b.n	800b48c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b454:	897b      	ldrh	r3, [r7, #10]
 800b456:	11db      	asrs	r3, r3, #7
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	f003 0306 	and.w	r3, r3, #6
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f063 030f 	orn	r3, r3, #15
 800b464:	b2da      	uxtb	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	490e      	ldr	r1, [pc, #56]	; (800b4ac <I2C_MasterRequestWrite+0xfc>)
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 f943 	bl	800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e010      	b.n	800b4a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b482:	897b      	ldrh	r3, [r7, #10]
 800b484:	b2da      	uxtb	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	4907      	ldr	r1, [pc, #28]	; (800b4b0 <I2C_MasterRequestWrite+0x100>)
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 f933 	bl	800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e000      	b.n	800b4a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	00010008 	.word	0x00010008
 800b4b0:	00010002 	.word	0x00010002

0800b4b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	607a      	str	r2, [r7, #4]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d006      	beq.n	800b4ee <I2C_MasterRequestRead+0x3a>
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d003      	beq.n	800b4ee <I2C_MasterRequestRead+0x3a>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b4ec:	d108      	bne.n	800b500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	e00b      	b.n	800b518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b504:	2b11      	cmp	r3, #17
 800b506:	d107      	bne.n	800b518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 f893 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00d      	beq.n	800b54c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53e:	d103      	bne.n	800b548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	e079      	b.n	800b640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b554:	d108      	bne.n	800b568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b556:	897b      	ldrh	r3, [r7, #10]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	611a      	str	r2, [r3, #16]
 800b566:	e05f      	b.n	800b628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b568:	897b      	ldrh	r3, [r7, #10]
 800b56a:	11db      	asrs	r3, r3, #7
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	f003 0306 	and.w	r3, r3, #6
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f063 030f 	orn	r3, r3, #15
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	4930      	ldr	r1, [pc, #192]	; (800b648 <I2C_MasterRequestRead+0x194>)
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f000 f8b9 	bl	800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e054      	b.n	800b640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b596:	897b      	ldrh	r3, [r7, #10]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4929      	ldr	r1, [pc, #164]	; (800b64c <I2C_MasterRequestRead+0x198>)
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 f8a9 	bl	800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e044      	b.n	800b640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	613b      	str	r3, [r7, #16]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	613b      	str	r3, [r7, #16]
 800b5ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f831 	bl	800b650 <I2C_WaitOnFlagUntilTimeout>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00d      	beq.n	800b610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b602:	d103      	bne.n	800b60c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b60a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e017      	b.n	800b640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b610:	897b      	ldrh	r3, [r7, #10]
 800b612:	11db      	asrs	r3, r3, #7
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0306 	and.w	r3, r3, #6
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	f063 030e 	orn	r3, r3, #14
 800b620:	b2da      	uxtb	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	4907      	ldr	r1, [pc, #28]	; (800b64c <I2C_MasterRequestRead+0x198>)
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f865 	bl	800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	00010008 	.word	0x00010008
 800b64c:	00010002 	.word	0x00010002

0800b650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b660:	e025      	b.n	800b6ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d021      	beq.n	800b6ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b66a:	f7fd ff89 	bl	8009580 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d302      	bcc.n	800b680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d116      	bne.n	800b6ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2220      	movs	r2, #32
 800b68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	f043 0220 	orr.w	r2, r3, #32
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e023      	b.n	800b6f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	0c1b      	lsrs	r3, r3, #16
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d10d      	bne.n	800b6d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	43da      	mvns	r2, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bf0c      	ite	eq
 800b6ca:	2301      	moveq	r3, #1
 800b6cc:	2300      	movne	r3, #0
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	e00c      	b.n	800b6ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	43da      	mvns	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	4013      	ands	r3, r2
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d0b6      	beq.n	800b662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
 800b70a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b70c:	e051      	b.n	800b7b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71c:	d123      	bne.n	800b766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b72c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	f043 0204 	orr.w	r2, r3, #4
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e046      	b.n	800b7f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76c:	d021      	beq.n	800b7b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b76e:	f7fd ff07 	bl	8009580 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d302      	bcc.n	800b784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d116      	bne.n	800b7b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2220      	movs	r2, #32
 800b78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	f043 0220 	orr.w	r2, r3, #32
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e020      	b.n	800b7f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d10c      	bne.n	800b7d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	43da      	mvns	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bf14      	ite	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	2300      	moveq	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	e00b      	b.n	800b7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	43da      	mvns	r2, r3
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bf14      	ite	ne
 800b7e8:	2301      	movne	r3, #1
 800b7ea:	2300      	moveq	r3, #0
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d18d      	bne.n	800b70e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b808:	e02d      	b.n	800b866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f000 f8ce 	bl	800b9ac <I2C_IsAcknowledgeFailed>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e02d      	b.n	800b876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b820:	d021      	beq.n	800b866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b822:	f7fd fead 	bl	8009580 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d302      	bcc.n	800b838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d116      	bne.n	800b866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2220      	movs	r2, #32
 800b842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	f043 0220 	orr.w	r2, r3, #32
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e007      	b.n	800b876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b870:	2b80      	cmp	r3, #128	; 0x80
 800b872:	d1ca      	bne.n	800b80a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b88a:	e02d      	b.n	800b8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f88d 	bl	800b9ac <I2C_IsAcknowledgeFailed>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e02d      	b.n	800b8f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a2:	d021      	beq.n	800b8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8a4:	f7fd fe6c 	bl	8009580 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d302      	bcc.n	800b8ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d116      	bne.n	800b8e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	f043 0220 	orr.w	r2, r3, #32
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e007      	b.n	800b8f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d1ca      	bne.n	800b88c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b90c:	e042      	b.n	800b994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	2b10      	cmp	r3, #16
 800b91a:	d119      	bne.n	800b950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f06f 0210 	mvn.w	r2, #16
 800b924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2220      	movs	r2, #32
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e029      	b.n	800b9a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b950:	f7fd fe16 	bl	8009580 <HAL_GetTick>
 800b954:	4602      	mov	r2, r0
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d302      	bcc.n	800b966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d116      	bne.n	800b994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2220      	movs	r2, #32
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b980:	f043 0220 	orr.w	r2, r3, #32
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e007      	b.n	800b9a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99e:	2b40      	cmp	r3, #64	; 0x40
 800b9a0:	d1b5      	bne.n	800b90e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c2:	d11b      	bne.n	800b9fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e8:	f043 0204 	orr.w	r2, r3, #4
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e000      	b.n	800b9fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
	...

0800ba0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ba16:	2300      	movs	r3, #0
 800ba18:	603b      	str	r3, [r7, #0]
 800ba1a:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <HAL_PWREx_EnableOverDrive+0x90>)
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	4a1f      	ldr	r2, [pc, #124]	; (800ba9c <HAL_PWREx_EnableOverDrive+0x90>)
 800ba20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba24:	6413      	str	r3, [r2, #64]	; 0x40
 800ba26:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <HAL_PWREx_EnableOverDrive+0x90>)
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ba32:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <HAL_PWREx_EnableOverDrive+0x94>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ba38:	f7fd fda2 	bl	8009580 <HAL_GetTick>
 800ba3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ba3e:	e009      	b.n	800ba54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ba40:	f7fd fd9e 	bl	8009580 <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba4e:	d901      	bls.n	800ba54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e01f      	b.n	800ba94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ba54:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba60:	d1ee      	bne.n	800ba40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ba62:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ba68:	f7fd fd8a 	bl	8009580 <HAL_GetTick>
 800ba6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ba6e:	e009      	b.n	800ba84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ba70:	f7fd fd86 	bl	8009580 <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba7e:	d901      	bls.n	800ba84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e007      	b.n	800ba94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ba84:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba90:	d1ee      	bne.n	800ba70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	40023800 	.word	0x40023800
 800baa0:	420e0040 	.word	0x420e0040
 800baa4:	40007000 	.word	0x40007000
 800baa8:	420e0044 	.word	0x420e0044

0800baac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e0cc      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bac0:	4b68      	ldr	r3, [pc, #416]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d90c      	bls.n	800bae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bace:	4b65      	ldr	r3, [pc, #404]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	b2d2      	uxtb	r2, r2
 800bad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bad6:	4b63      	ldr	r3, [pc, #396]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 030f 	and.w	r3, r3, #15
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d001      	beq.n	800bae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e0b8      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d020      	beq.n	800bb36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb00:	4b59      	ldr	r3, [pc, #356]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	4a58      	ldr	r2, [pc, #352]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bb0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d005      	beq.n	800bb24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb18:	4b53      	ldr	r3, [pc, #332]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	4a52      	ldr	r2, [pc, #328]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bb22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb24:	4b50      	ldr	r3, [pc, #320]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	494d      	ldr	r1, [pc, #308]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d044      	beq.n	800bbcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d107      	bne.n	800bb5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb4a:	4b47      	ldr	r3, [pc, #284]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d119      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	e07f      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d003      	beq.n	800bb6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d107      	bne.n	800bb7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb6a:	4b3f      	ldr	r3, [pc, #252]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d109      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e06f      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb7a:	4b3b      	ldr	r3, [pc, #236]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e067      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb8a:	4b37      	ldr	r3, [pc, #220]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f023 0203 	bic.w	r2, r3, #3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	4934      	ldr	r1, [pc, #208]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb9c:	f7fd fcf0 	bl	8009580 <HAL_GetTick>
 800bba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bba2:	e00a      	b.n	800bbba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bba4:	f7fd fcec 	bl	8009580 <HAL_GetTick>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d901      	bls.n	800bbba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e04f      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbba:	4b2b      	ldr	r3, [pc, #172]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f003 020c 	and.w	r2, r3, #12
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d1eb      	bne.n	800bba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bbcc:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d20c      	bcs.n	800bbf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbda:	4b22      	ldr	r3, [pc, #136]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbe2:	4b20      	ldr	r3, [pc, #128]	; (800bc64 <HAL_RCC_ClockConfig+0x1b8>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 030f 	and.w	r3, r3, #15
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d001      	beq.n	800bbf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e032      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d008      	beq.n	800bc12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc00:	4b19      	ldr	r3, [pc, #100]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	4916      	ldr	r1, [pc, #88]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 0308 	and.w	r3, r3, #8
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d009      	beq.n	800bc32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	490e      	ldr	r1, [pc, #56]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bc32:	f000 f821 	bl	800bc78 <HAL_RCC_GetSysClockFreq>
 800bc36:	4601      	mov	r1, r0
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <HAL_RCC_ClockConfig+0x1bc>)
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	091b      	lsrs	r3, r3, #4
 800bc3e:	f003 030f 	and.w	r3, r3, #15
 800bc42:	4a0a      	ldr	r2, [pc, #40]	; (800bc6c <HAL_RCC_ClockConfig+0x1c0>)
 800bc44:	5cd3      	ldrb	r3, [r2, r3]
 800bc46:	fa21 f303 	lsr.w	r3, r1, r3
 800bc4a:	4a09      	ldr	r2, [pc, #36]	; (800bc70 <HAL_RCC_ClockConfig+0x1c4>)
 800bc4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <HAL_RCC_ClockConfig+0x1c8>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fd fc50 	bl	80094f8 <HAL_InitTick>

  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	40023c00 	.word	0x40023c00
 800bc68:	40023800 	.word	0x40023800
 800bc6c:	08019a84 	.word	0x08019a84
 800bc70:	20000000 	.word	0x20000000
 800bc74:	20000004 	.word	0x20000004

0800bc78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	607b      	str	r3, [r7, #4]
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	2300      	movs	r3, #0
 800bc88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc8e:	4b63      	ldr	r3, [pc, #396]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f003 030c 	and.w	r3, r3, #12
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d007      	beq.n	800bcaa <HAL_RCC_GetSysClockFreq+0x32>
 800bc9a:	2b08      	cmp	r3, #8
 800bc9c:	d008      	beq.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x38>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f040 80b4 	bne.w	800be0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bca4:	4b5e      	ldr	r3, [pc, #376]	; (800be20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bca6:	60bb      	str	r3, [r7, #8]
       break;
 800bca8:	e0b3      	b.n	800be12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bcaa:	4b5d      	ldr	r3, [pc, #372]	; (800be20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bcac:	60bb      	str	r3, [r7, #8]
      break;
 800bcae:	e0b0      	b.n	800be12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bcb0:	4b5a      	ldr	r3, [pc, #360]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bcba:	4b58      	ldr	r3, [pc, #352]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d04a      	beq.n	800bd5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcc6:	4b55      	ldr	r3, [pc, #340]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	099b      	lsrs	r3, r3, #6
 800bccc:	f04f 0400 	mov.w	r4, #0
 800bcd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	ea03 0501 	and.w	r5, r3, r1
 800bcdc:	ea04 0602 	and.w	r6, r4, r2
 800bce0:	4629      	mov	r1, r5
 800bce2:	4632      	mov	r2, r6
 800bce4:	f04f 0300 	mov.w	r3, #0
 800bce8:	f04f 0400 	mov.w	r4, #0
 800bcec:	0154      	lsls	r4, r2, #5
 800bcee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bcf2:	014b      	lsls	r3, r1, #5
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	1b49      	subs	r1, r1, r5
 800bcfa:	eb62 0206 	sbc.w	r2, r2, r6
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	f04f 0400 	mov.w	r4, #0
 800bd06:	0194      	lsls	r4, r2, #6
 800bd08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bd0c:	018b      	lsls	r3, r1, #6
 800bd0e:	1a5b      	subs	r3, r3, r1
 800bd10:	eb64 0402 	sbc.w	r4, r4, r2
 800bd14:	f04f 0100 	mov.w	r1, #0
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	00e2      	lsls	r2, r4, #3
 800bd1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bd22:	00d9      	lsls	r1, r3, #3
 800bd24:	460b      	mov	r3, r1
 800bd26:	4614      	mov	r4, r2
 800bd28:	195b      	adds	r3, r3, r5
 800bd2a:	eb44 0406 	adc.w	r4, r4, r6
 800bd2e:	f04f 0100 	mov.w	r1, #0
 800bd32:	f04f 0200 	mov.w	r2, #0
 800bd36:	02a2      	lsls	r2, r4, #10
 800bd38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bd3c:	0299      	lsls	r1, r3, #10
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4614      	mov	r4, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	4621      	mov	r1, r4
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f04f 0400 	mov.w	r4, #0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4623      	mov	r3, r4
 800bd50:	f7f4 ffb2 	bl	8000cb8 <__aeabi_uldivmod>
 800bd54:	4603      	mov	r3, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	e049      	b.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd5c:	4b2f      	ldr	r3, [pc, #188]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	099b      	lsrs	r3, r3, #6
 800bd62:	f04f 0400 	mov.w	r4, #0
 800bd66:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bd6a:	f04f 0200 	mov.w	r2, #0
 800bd6e:	ea03 0501 	and.w	r5, r3, r1
 800bd72:	ea04 0602 	and.w	r6, r4, r2
 800bd76:	4629      	mov	r1, r5
 800bd78:	4632      	mov	r2, r6
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	f04f 0400 	mov.w	r4, #0
 800bd82:	0154      	lsls	r4, r2, #5
 800bd84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bd88:	014b      	lsls	r3, r1, #5
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	1b49      	subs	r1, r1, r5
 800bd90:	eb62 0206 	sbc.w	r2, r2, r6
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	f04f 0400 	mov.w	r4, #0
 800bd9c:	0194      	lsls	r4, r2, #6
 800bd9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bda2:	018b      	lsls	r3, r1, #6
 800bda4:	1a5b      	subs	r3, r3, r1
 800bda6:	eb64 0402 	sbc.w	r4, r4, r2
 800bdaa:	f04f 0100 	mov.w	r1, #0
 800bdae:	f04f 0200 	mov.w	r2, #0
 800bdb2:	00e2      	lsls	r2, r4, #3
 800bdb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bdb8:	00d9      	lsls	r1, r3, #3
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	195b      	adds	r3, r3, r5
 800bdc0:	eb44 0406 	adc.w	r4, r4, r6
 800bdc4:	f04f 0100 	mov.w	r1, #0
 800bdc8:	f04f 0200 	mov.w	r2, #0
 800bdcc:	02a2      	lsls	r2, r4, #10
 800bdce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bdd2:	0299      	lsls	r1, r3, #10
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	4621      	mov	r1, r4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f04f 0400 	mov.w	r4, #0
 800bde2:	461a      	mov	r2, r3
 800bde4:	4623      	mov	r3, r4
 800bde6:	f7f4 ff67 	bl	8000cb8 <__aeabi_uldivmod>
 800bdea:	4603      	mov	r3, r0
 800bdec:	460c      	mov	r4, r1
 800bdee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	0c1b      	lsrs	r3, r3, #16
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	fbb2 f3f3 	udiv	r3, r2, r3
 800be08:	60bb      	str	r3, [r7, #8]
      break;
 800be0a:	e002      	b.n	800be12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be0e:	60bb      	str	r3, [r7, #8]
      break;
 800be10:	bf00      	nop
    }
  }
  return sysclockfreq;
 800be12:	68bb      	ldr	r3, [r7, #8]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1c:	40023800 	.word	0x40023800
 800be20:	00f42400 	.word	0x00f42400

0800be24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be28:	4b03      	ldr	r3, [pc, #12]	; (800be38 <HAL_RCC_GetHCLKFreq+0x14>)
 800be2a:	681b      	ldr	r3, [r3, #0]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20000000 	.word	0x20000000

0800be3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800be40:	f7ff fff0 	bl	800be24 <HAL_RCC_GetHCLKFreq>
 800be44:	4601      	mov	r1, r0
 800be46:	4b05      	ldr	r3, [pc, #20]	; (800be5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	0a9b      	lsrs	r3, r3, #10
 800be4c:	f003 0307 	and.w	r3, r3, #7
 800be50:	4a03      	ldr	r2, [pc, #12]	; (800be60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800be52:	5cd3      	ldrb	r3, [r2, r3]
 800be54:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be58:	4618      	mov	r0, r3
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	40023800 	.word	0x40023800
 800be60:	08019a94 	.word	0x08019a94

0800be64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800be68:	f7ff ffdc 	bl	800be24 <HAL_RCC_GetHCLKFreq>
 800be6c:	4601      	mov	r1, r0
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	0b5b      	lsrs	r3, r3, #13
 800be74:	f003 0307 	and.w	r3, r3, #7
 800be78:	4a03      	ldr	r2, [pc, #12]	; (800be88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be7a:	5cd3      	ldrb	r3, [r2, r3]
 800be7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be80:	4618      	mov	r0, r3
 800be82:	bd80      	pop	{r7, pc}
 800be84:	40023800 	.word	0x40023800
 800be88:	08019a94 	.word	0x08019a94

0800be8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be94:	2300      	movs	r3, #0
 800be96:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800beb4:	4b66      	ldr	r3, [pc, #408]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800beb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beba:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec2:	4963      	ldr	r1, [pc, #396]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00a      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bed6:	4b5e      	ldr	r3, [pc, #376]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bedc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	495a      	ldr	r1, [pc, #360]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10b      	bne.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d105      	bne.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d075      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bf10:	4b50      	ldr	r3, [pc, #320]	; (800c054 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf16:	f7fd fb33 	bl	8009580 <HAL_GetTick>
 800bf1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf1c:	e008      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bf1e:	f7fd fb2f 	bl	8009580 <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d901      	bls.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e1dc      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf30:	4b47      	ldr	r3, [pc, #284]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f0      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	019a      	lsls	r2, r3, #6
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	071b      	lsls	r3, r3, #28
 800bf54:	493e      	ldr	r1, [pc, #248]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01f      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf68:	4b39      	ldr	r3, [pc, #228]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf6e:	0f1b      	lsrs	r3, r3, #28
 800bf70:	f003 0307 	and.w	r3, r3, #7
 800bf74:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	019a      	lsls	r2, r3, #6
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	061b      	lsls	r3, r3, #24
 800bf82:	431a      	orrs	r2, r3
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	071b      	lsls	r3, r3, #28
 800bf88:	4931      	ldr	r1, [pc, #196]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bf90:	4b2f      	ldr	r3, [pc, #188]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf96:	f023 021f 	bic.w	r2, r3, #31
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	492b      	ldr	r1, [pc, #172]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	019a      	lsls	r2, r3, #6
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	061b      	lsls	r3, r3, #24
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	071b      	lsls	r3, r3, #28
 800bfc8:	4921      	ldr	r1, [pc, #132]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bfd0:	4b20      	ldr	r3, [pc, #128]	; (800c054 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bfd6:	f7fd fad3 	bl	8009580 <HAL_GetTick>
 800bfda:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bfdc:	e008      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bfde:	f7fd facf 	bl	8009580 <HAL_GetTick>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d901      	bls.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e17c      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bff0:	4b17      	ldr	r3, [pc, #92]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d0f0      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d112      	bne.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10c      	bne.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80ce 	beq.w	800c1be <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c02a:	f040 80c8 	bne.w	800c1be <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c02e:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c034:	f7fd faa4 	bl	8009580 <HAL_GetTick>
 800c038:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c03a:	e00f      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c03c:	f7fd faa0 	bl	8009580 <HAL_GetTick>
 800c040:	4602      	mov	r2, r0
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	2b02      	cmp	r3, #2
 800c048:	d908      	bls.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e14d      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c04e:	bf00      	nop
 800c050:	40023800 	.word	0x40023800
 800c054:	42470068 	.word	0x42470068
 800c058:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c05c:	4ba5      	ldr	r3, [pc, #660]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c068:	d0e8      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	d02e      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c076:	4b9f      	ldr	r3, [pc, #636]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c07c:	0c1b      	lsrs	r3, r3, #16
 800c07e:	f003 0303 	and.w	r3, r3, #3
 800c082:	3301      	adds	r3, #1
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c088:	4b9a      	ldr	r3, [pc, #616]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	0f1b      	lsrs	r3, r3, #28
 800c090:	f003 0307 	and.w	r3, r3, #7
 800c094:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	019a      	lsls	r2, r3, #6
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	085b      	lsrs	r3, r3, #1
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	041b      	lsls	r3, r3, #16
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	061b      	lsls	r3, r3, #24
 800c0ac:	431a      	orrs	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	071b      	lsls	r3, r3, #28
 800c0b2:	4990      	ldr	r1, [pc, #576]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c0ba:	4b8e      	ldr	r3, [pc, #568]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	021b      	lsls	r3, r3, #8
 800c0cc:	4989      	ldr	r1, [pc, #548]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d02c      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c0e0:	4b84      	ldr	r3, [pc, #528]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	0c1b      	lsrs	r3, r3, #16
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0f2:	4b80      	ldr	r3, [pc, #512]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f8:	0e1b      	lsrs	r3, r3, #24
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	019a      	lsls	r2, r3, #6
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	085b      	lsrs	r3, r3, #1
 800c10a:	3b01      	subs	r3, #1
 800c10c:	041b      	lsls	r3, r3, #16
 800c10e:	431a      	orrs	r2, r3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	061b      	lsls	r3, r3, #24
 800c114:	431a      	orrs	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	071b      	lsls	r3, r3, #28
 800c11c:	4975      	ldr	r1, [pc, #468]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c124:	4b73      	ldr	r3, [pc, #460]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	4970      	ldr	r1, [pc, #448]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c134:	4313      	orrs	r3, r2
 800c136:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c142:	2b00      	cmp	r3, #0
 800c144:	d024      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c14a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c14e:	d11f      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c150:	4b68      	ldr	r3, [pc, #416]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c156:	0e1b      	lsrs	r3, r3, #24
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c15e:	4b65      	ldr	r3, [pc, #404]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c164:	0f1b      	lsrs	r3, r3, #28
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	019a      	lsls	r2, r3, #6
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	085b      	lsrs	r3, r3, #1
 800c178:	3b01      	subs	r3, #1
 800c17a:	041b      	lsls	r3, r3, #16
 800c17c:	431a      	orrs	r2, r3
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	061b      	lsls	r3, r3, #24
 800c182:	431a      	orrs	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	071b      	lsls	r3, r3, #28
 800c188:	495a      	ldr	r1, [pc, #360]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c190:	4b59      	ldr	r3, [pc, #356]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c192:	2201      	movs	r2, #1
 800c194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c196:	f7fd f9f3 	bl	8009580 <HAL_GetTick>
 800c19a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c19c:	e008      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c19e:	f7fd f9ef 	bl	8009580 <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d901      	bls.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e09c      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c1b0:	4b50      	ldr	r3, [pc, #320]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1bc:	d1ef      	bne.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0320 	and.w	r3, r3, #32
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 8083 	beq.w	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	4b48      	ldr	r3, [pc, #288]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d4:	4a47      	ldr	r2, [pc, #284]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1da:	6413      	str	r3, [r2, #64]	; 0x40
 800c1dc:	4b45      	ldr	r3, [pc, #276]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1e4:	60bb      	str	r3, [r7, #8]
 800c1e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c1e8:	4b44      	ldr	r3, [pc, #272]	; (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a43      	ldr	r2, [pc, #268]	; (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c1ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c1f4:	f7fd f9c4 	bl	8009580 <HAL_GetTick>
 800c1f8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c1fa:	e008      	b.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c1fc:	f7fd f9c0 	bl	8009580 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b02      	cmp	r3, #2
 800c208:	d901      	bls.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e06d      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c20e:	4b3b      	ldr	r3, [pc, #236]	; (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0f0      	beq.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c21a:	4b36      	ldr	r3, [pc, #216]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c222:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02f      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	429a      	cmp	r2, r3
 800c236:	d028      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c238:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c240:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c242:	4b2f      	ldr	r3, [pc, #188]	; (800c300 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c248:	4b2d      	ldr	r3, [pc, #180]	; (800c300 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c24e:	4a29      	ldr	r2, [pc, #164]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c254:	4b27      	ldr	r3, [pc, #156]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d114      	bne.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c260:	f7fd f98e 	bl	8009580 <HAL_GetTick>
 800c264:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c266:	e00a      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c268:	f7fd f98a 	bl	8009580 <HAL_GetTick>
 800c26c:	4602      	mov	r2, r0
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	f241 3288 	movw	r2, #5000	; 0x1388
 800c276:	4293      	cmp	r3, r2
 800c278:	d901      	bls.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e035      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c27e:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c282:	f003 0302 	and.w	r3, r3, #2
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0ee      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c296:	d10d      	bne.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c298:	4b16      	ldr	r3, [pc, #88]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c2a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2ac:	4911      	ldr	r1, [pc, #68]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	608b      	str	r3, [r1, #8]
 800c2b2:	e005      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c2b4:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c2be:	6093      	str	r3, [r2, #8]
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2cc:	4909      	ldr	r1, [pc, #36]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0310 	and.w	r3, r3, #16
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c2e6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3720      	adds	r7, #32
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	40023800 	.word	0x40023800
 800c2f8:	42470070 	.word	0x42470070
 800c2fc:	40007000 	.word	0x40007000
 800c300:	42470e40 	.word	0x42470e40
 800c304:	424711e0 	.word	0x424711e0

0800c308 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c310:	2300      	movs	r3, #0
 800c312:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d075      	beq.n	800c40c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c320:	4ba2      	ldr	r3, [pc, #648]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 030c 	and.w	r3, r3, #12
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d00c      	beq.n	800c346 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c32c:	4b9f      	ldr	r3, [pc, #636]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c334:	2b08      	cmp	r3, #8
 800c336:	d112      	bne.n	800c35e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c338:	4b9c      	ldr	r3, [pc, #624]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c344:	d10b      	bne.n	800c35e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c346:	4b99      	ldr	r3, [pc, #612]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d05b      	beq.n	800c40a <HAL_RCC_OscConfig+0x102>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d157      	bne.n	800c40a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e20b      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c366:	d106      	bne.n	800c376 <HAL_RCC_OscConfig+0x6e>
 800c368:	4b90      	ldr	r3, [pc, #576]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a8f      	ldr	r2, [pc, #572]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c36e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c372:	6013      	str	r3, [r2, #0]
 800c374:	e01d      	b.n	800c3b2 <HAL_RCC_OscConfig+0xaa>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c37e:	d10c      	bne.n	800c39a <HAL_RCC_OscConfig+0x92>
 800c380:	4b8a      	ldr	r3, [pc, #552]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a89      	ldr	r2, [pc, #548]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	4b87      	ldr	r3, [pc, #540]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a86      	ldr	r2, [pc, #536]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	e00b      	b.n	800c3b2 <HAL_RCC_OscConfig+0xaa>
 800c39a:	4b84      	ldr	r3, [pc, #528]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a83      	ldr	r2, [pc, #524]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c3a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	4b81      	ldr	r3, [pc, #516]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a80      	ldr	r2, [pc, #512]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c3ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d013      	beq.n	800c3e2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ba:	f7fd f8e1 	bl	8009580 <HAL_GetTick>
 800c3be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3c0:	e008      	b.n	800c3d4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3c2:	f7fd f8dd 	bl	8009580 <HAL_GetTick>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	2b64      	cmp	r3, #100	; 0x64
 800c3ce:	d901      	bls.n	800c3d4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	e1d0      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3d4:	4b75      	ldr	r3, [pc, #468]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0f0      	beq.n	800c3c2 <HAL_RCC_OscConfig+0xba>
 800c3e0:	e014      	b.n	800c40c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e2:	f7fd f8cd 	bl	8009580 <HAL_GetTick>
 800c3e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3e8:	e008      	b.n	800c3fc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3ea:	f7fd f8c9 	bl	8009580 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b64      	cmp	r3, #100	; 0x64
 800c3f6:	d901      	bls.n	800c3fc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e1bc      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3fc:	4b6b      	ldr	r3, [pc, #428]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1f0      	bne.n	800c3ea <HAL_RCC_OscConfig+0xe2>
 800c408:	e000      	b.n	800c40c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c40a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d063      	beq.n	800c4e0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c418:	4b64      	ldr	r3, [pc, #400]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f003 030c 	and.w	r3, r3, #12
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c424:	4b61      	ldr	r3, [pc, #388]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d11c      	bne.n	800c46a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c430:	4b5e      	ldr	r3, [pc, #376]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d116      	bne.n	800c46a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c43c:	4b5b      	ldr	r3, [pc, #364]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0302 	and.w	r3, r3, #2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <HAL_RCC_OscConfig+0x14c>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d001      	beq.n	800c454 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e190      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c454:	4b55      	ldr	r3, [pc, #340]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	4952      	ldr	r1, [pc, #328]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c464:	4313      	orrs	r3, r2
 800c466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c468:	e03a      	b.n	800c4e0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d020      	beq.n	800c4b4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c472:	4b4f      	ldr	r3, [pc, #316]	; (800c5b0 <HAL_RCC_OscConfig+0x2a8>)
 800c474:	2201      	movs	r2, #1
 800c476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c478:	f7fd f882 	bl	8009580 <HAL_GetTick>
 800c47c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c47e:	e008      	b.n	800c492 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c480:	f7fd f87e 	bl	8009580 <HAL_GetTick>
 800c484:	4602      	mov	r2, r0
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d901      	bls.n	800c492 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	e171      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c492:	4b46      	ldr	r3, [pc, #280]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0302 	and.w	r3, r3, #2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0f0      	beq.n	800c480 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c49e:	4b43      	ldr	r3, [pc, #268]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	493f      	ldr	r1, [pc, #252]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	600b      	str	r3, [r1, #0]
 800c4b2:	e015      	b.n	800c4e0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4b4:	4b3e      	ldr	r3, [pc, #248]	; (800c5b0 <HAL_RCC_OscConfig+0x2a8>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ba:	f7fd f861 	bl	8009580 <HAL_GetTick>
 800c4be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4c0:	e008      	b.n	800c4d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4c2:	f7fd f85d 	bl	8009580 <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d901      	bls.n	800c4d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e150      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4d4:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1f0      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d030      	beq.n	800c54e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d016      	beq.n	800c522 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4f4:	4b2f      	ldr	r3, [pc, #188]	; (800c5b4 <HAL_RCC_OscConfig+0x2ac>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4fa:	f7fd f841 	bl	8009580 <HAL_GetTick>
 800c4fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c500:	e008      	b.n	800c514 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c502:	f7fd f83d 	bl	8009580 <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d901      	bls.n	800c514 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e130      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c514:	4b25      	ldr	r3, [pc, #148]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c518:	f003 0302 	and.w	r3, r3, #2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f0      	beq.n	800c502 <HAL_RCC_OscConfig+0x1fa>
 800c520:	e015      	b.n	800c54e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c522:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <HAL_RCC_OscConfig+0x2ac>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c528:	f7fd f82a 	bl	8009580 <HAL_GetTick>
 800c52c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c52e:	e008      	b.n	800c542 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c530:	f7fd f826 	bl	8009580 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d901      	bls.n	800c542 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e119      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c542:	4b1a      	ldr	r3, [pc, #104]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1f0      	bne.n	800c530 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0304 	and.w	r3, r3, #4
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 809f 	beq.w	800c69a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c55c:	2300      	movs	r3, #0
 800c55e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c560:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10f      	bne.n	800c58c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c574:	4a0d      	ldr	r2, [pc, #52]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c57a:	6413      	str	r3, [r2, #64]	; 0x40
 800c57c:	4b0b      	ldr	r3, [pc, #44]	; (800c5ac <HAL_RCC_OscConfig+0x2a4>)
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c588:	2301      	movs	r3, #1
 800c58a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <HAL_RCC_OscConfig+0x2b0>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c594:	2b00      	cmp	r3, #0
 800c596:	d120      	bne.n	800c5da <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <HAL_RCC_OscConfig+0x2b0>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a06      	ldr	r2, [pc, #24]	; (800c5b8 <HAL_RCC_OscConfig+0x2b0>)
 800c59e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5a4:	f7fc ffec 	bl	8009580 <HAL_GetTick>
 800c5a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5aa:	e010      	b.n	800c5ce <HAL_RCC_OscConfig+0x2c6>
 800c5ac:	40023800 	.word	0x40023800
 800c5b0:	42470000 	.word	0x42470000
 800c5b4:	42470e80 	.word	0x42470e80
 800c5b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5bc:	f7fc ffe0 	bl	8009580 <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e0d3      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5ce:	4b6c      	ldr	r3, [pc, #432]	; (800c780 <HAL_RCC_OscConfig+0x478>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0f0      	beq.n	800c5bc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d106      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x2e8>
 800c5e2:	4b68      	ldr	r3, [pc, #416]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e6:	4a67      	ldr	r2, [pc, #412]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c5e8:	f043 0301 	orr.w	r3, r3, #1
 800c5ec:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ee:	e01c      	b.n	800c62a <HAL_RCC_OscConfig+0x322>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	2b05      	cmp	r3, #5
 800c5f6:	d10c      	bne.n	800c612 <HAL_RCC_OscConfig+0x30a>
 800c5f8:	4b62      	ldr	r3, [pc, #392]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fc:	4a61      	ldr	r2, [pc, #388]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c5fe:	f043 0304 	orr.w	r3, r3, #4
 800c602:	6713      	str	r3, [r2, #112]	; 0x70
 800c604:	4b5f      	ldr	r3, [pc, #380]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c608:	4a5e      	ldr	r2, [pc, #376]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	6713      	str	r3, [r2, #112]	; 0x70
 800c610:	e00b      	b.n	800c62a <HAL_RCC_OscConfig+0x322>
 800c612:	4b5c      	ldr	r3, [pc, #368]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c616:	4a5b      	ldr	r2, [pc, #364]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c618:	f023 0301 	bic.w	r3, r3, #1
 800c61c:	6713      	str	r3, [r2, #112]	; 0x70
 800c61e:	4b59      	ldr	r3, [pc, #356]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c622:	4a58      	ldr	r2, [pc, #352]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c624:	f023 0304 	bic.w	r3, r3, #4
 800c628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d015      	beq.n	800c65e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c632:	f7fc ffa5 	bl	8009580 <HAL_GetTick>
 800c636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c638:	e00a      	b.n	800c650 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c63a:	f7fc ffa1 	bl	8009580 <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	f241 3288 	movw	r2, #5000	; 0x1388
 800c648:	4293      	cmp	r3, r2
 800c64a:	d901      	bls.n	800c650 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e092      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c650:	4b4c      	ldr	r3, [pc, #304]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c654:	f003 0302 	and.w	r3, r3, #2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d0ee      	beq.n	800c63a <HAL_RCC_OscConfig+0x332>
 800c65c:	e014      	b.n	800c688 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c65e:	f7fc ff8f 	bl	8009580 <HAL_GetTick>
 800c662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c664:	e00a      	b.n	800c67c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c666:	f7fc ff8b 	bl	8009580 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	f241 3288 	movw	r2, #5000	; 0x1388
 800c674:	4293      	cmp	r3, r2
 800c676:	d901      	bls.n	800c67c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	e07c      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c67c:	4b41      	ldr	r3, [pc, #260]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1ee      	bne.n	800c666 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d105      	bne.n	800c69a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c68e:	4b3d      	ldr	r3, [pc, #244]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	4a3c      	ldr	r2, [pc, #240]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d068      	beq.n	800c774 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6a2:	4b38      	ldr	r3, [pc, #224]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 030c 	and.w	r3, r3, #12
 800c6aa:	2b08      	cmp	r3, #8
 800c6ac:	d060      	beq.n	800c770 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d145      	bne.n	800c742 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6b6:	4b34      	ldr	r3, [pc, #208]	; (800c788 <HAL_RCC_OscConfig+0x480>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6bc:	f7fc ff60 	bl	8009580 <HAL_GetTick>
 800c6c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6c2:	e008      	b.n	800c6d6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6c4:	f7fc ff5c 	bl	8009580 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d901      	bls.n	800c6d6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	e04f      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6d6:	4b2b      	ldr	r3, [pc, #172]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1f0      	bne.n	800c6c4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	69da      	ldr	r2, [r3, #28]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	019b      	lsls	r3, r3, #6
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f8:	085b      	lsrs	r3, r3, #1
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	041b      	lsls	r3, r3, #16
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	061b      	lsls	r3, r3, #24
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	071b      	lsls	r3, r3, #28
 800c70e:	491d      	ldr	r1, [pc, #116]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c710:	4313      	orrs	r3, r2
 800c712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c714:	4b1c      	ldr	r3, [pc, #112]	; (800c788 <HAL_RCC_OscConfig+0x480>)
 800c716:	2201      	movs	r2, #1
 800c718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c71a:	f7fc ff31 	bl	8009580 <HAL_GetTick>
 800c71e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c720:	e008      	b.n	800c734 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c722:	f7fc ff2d 	bl	8009580 <HAL_GetTick>
 800c726:	4602      	mov	r2, r0
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d901      	bls.n	800c734 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c730:	2303      	movs	r3, #3
 800c732:	e020      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c734:	4b13      	ldr	r3, [pc, #76]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0f0      	beq.n	800c722 <HAL_RCC_OscConfig+0x41a>
 800c740:	e018      	b.n	800c774 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c742:	4b11      	ldr	r3, [pc, #68]	; (800c788 <HAL_RCC_OscConfig+0x480>)
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c748:	f7fc ff1a 	bl	8009580 <HAL_GetTick>
 800c74c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c74e:	e008      	b.n	800c762 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c750:	f7fc ff16 	bl	8009580 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d901      	bls.n	800c762 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e009      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c762:	4b08      	ldr	r3, [pc, #32]	; (800c784 <HAL_RCC_OscConfig+0x47c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f0      	bne.n	800c750 <HAL_RCC_OscConfig+0x448>
 800c76e:	e001      	b.n	800c774 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e000      	b.n	800c776 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	40007000 	.word	0x40007000
 800c784:	40023800 	.word	0x40023800
 800c788:	42470060 	.word	0x42470060

0800c78c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d101      	bne.n	800c79e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e022      	b.n	800c7e4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7fa faad 	bl	8006d10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f814 	bl	800c7ec <HAL_SD_InitCard>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d001      	beq.n	800c7ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e00a      	b.n	800c7e4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c7ec:	b5b0      	push	{r4, r5, r7, lr}
 800c7ee:	b08e      	sub	sp, #56	; 0x38
 800c7f0:	af04      	add	r7, sp, #16
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c800:	2300      	movs	r3, #0
 800c802:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c808:	2376      	movs	r3, #118	; 0x76
 800c80a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681d      	ldr	r5, [r3, #0]
 800c810:	466c      	mov	r4, sp
 800c812:	f107 0314 	add.w	r3, r7, #20
 800c816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c81a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c824:	4628      	mov	r0, r5
 800c826:	f003 fa87 	bl	800fd38 <SDIO_Init>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c838:	2301      	movs	r3, #1
 800c83a:	e031      	b.n	800c8a0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c83c:	4b1a      	ldr	r3, [pc, #104]	; (800c8a8 <HAL_SD_InitCard+0xbc>)
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4618      	mov	r0, r3
 800c848:	f003 fabf 	bl	800fdca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c84c:	4b16      	ldr	r3, [pc, #88]	; (800c8a8 <HAL_SD_InitCard+0xbc>)
 800c84e:	2201      	movs	r2, #1
 800c850:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 ffc6 	bl	800d7e4 <SD_PowerON>
 800c858:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e013      	b.n	800c8a0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fee5 	bl	800d648 <SD_InitCard>
 800c87e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00b      	beq.n	800c89e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e000      	b.n	800c8a0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3728      	adds	r7, #40	; 0x28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c8a8:	422580a0 	.word	0x422580a0

0800c8ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	; 0x30
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d107      	bne.n	800c8d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e0c7      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	f040 80c0 	bne.w	800ca62 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	441a      	add	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d907      	bls.n	800c906 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e0ae      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2203      	movs	r2, #3
 800c90a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c924:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	4a50      	ldr	r2, [pc, #320]	; (800ca6c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c92c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c932:	4a4f      	ldr	r2, [pc, #316]	; (800ca70 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c934:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93a:	2200      	movs	r2, #0
 800c93c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3380      	adds	r3, #128	; 0x80
 800c948:	4619      	mov	r1, r3
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	025b      	lsls	r3, r3, #9
 800c950:	089b      	lsrs	r3, r3, #2
 800c952:	f7fd fc07 	bl	800a164 <HAL_DMA_Start_IT>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d017      	beq.n	800c98c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c96a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a40      	ldr	r2, [pc, #256]	; (800ca74 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c978:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	e06b      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c98c:	4b3a      	ldr	r3, [pc, #232]	; (800ca78 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c98e:	2201      	movs	r2, #1
 800c990:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c996:	2b01      	cmp	r3, #1
 800c998:	d002      	beq.n	800c9a0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	025b      	lsls	r3, r3, #9
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f003 faa1 	bl	800fef0 <SDMMC_CmdBlockLength>
 800c9ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00f      	beq.n	800c9d6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a2e      	ldr	r2, [pc, #184]	; (800ca74 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e046      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9da:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	025b      	lsls	r3, r3, #9
 800c9e0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c9e2:	2390      	movs	r3, #144	; 0x90
 800c9e4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f107 0210 	add.w	r2, r7, #16
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f003 fa4b 	bl	800fe98 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d90a      	bls.n	800ca1e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2282      	movs	r2, #130	; 0x82
 800ca0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca14:	4618      	mov	r0, r3
 800ca16:	f003 faaf 	bl	800ff78 <SDMMC_CmdReadMultiBlock>
 800ca1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ca1c:	e009      	b.n	800ca32 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2281      	movs	r2, #129	; 0x81
 800ca22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f003 fa82 	bl	800ff34 <SDMMC_CmdReadSingleBlock>
 800ca30:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d012      	beq.n	800ca5e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a0d      	ldr	r2, [pc, #52]	; (800ca74 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ca3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	431a      	orrs	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e002      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e000      	b.n	800ca64 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ca62:	2302      	movs	r3, #2
  }
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3730      	adds	r7, #48	; 0x30
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	0800d457 	.word	0x0800d457
 800ca70:	0800d4c9 	.word	0x0800d4c9
 800ca74:	004005ff 	.word	0x004005ff
 800ca78:	4225858c 	.word	0x4225858c

0800ca7c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08c      	sub	sp, #48	; 0x30
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d107      	bne.n	800caa4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e0ca      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b01      	cmp	r3, #1
 800caae:	f040 80c3 	bne.w	800cc38 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	441a      	add	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d907      	bls.n	800cad6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e0b1      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2203      	movs	r2, #3
 800cada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f042 021a 	orr.w	r2, r2, #26
 800caf4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cafa:	4a52      	ldr	r2, [pc, #328]	; (800cc44 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cafc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb02:	4a51      	ldr	r2, [pc, #324]	; (800cc48 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cb04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d002      	beq.n	800cb1c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	025b      	lsls	r3, r3, #9
 800cb1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb24:	4618      	mov	r0, r3
 800cb26:	f003 f9e3 	bl	800fef0 <SDMMC_CmdBlockLength>
 800cb2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00f      	beq.n	800cb52 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a45      	ldr	r2, [pc, #276]	; (800cc4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	431a      	orrs	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e073      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d90a      	bls.n	800cb6e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	22a0      	movs	r2, #160	; 0xa0
 800cb5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb64:	4618      	mov	r0, r3
 800cb66:	f003 fa4b 	bl	8010000 <SDMMC_CmdWriteMultiBlock>
 800cb6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb6c:	e009      	b.n	800cb82 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2290      	movs	r2, #144	; 0x90
 800cb72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f003 fa1e 	bl	800ffbc <SDMMC_CmdWriteSingleBlock>
 800cb80:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d012      	beq.n	800cbae <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a2f      	ldr	r2, [pc, #188]	; (800cc4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cb8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	431a      	orrs	r2, r3
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2200      	movs	r2, #0
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e045      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cbae:	4b28      	ldr	r3, [pc, #160]	; (800cc50 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	3380      	adds	r3, #128	; 0x80
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	025b      	lsls	r3, r3, #9
 800cbc6:	089b      	lsrs	r3, r3, #2
 800cbc8:	f7fd facc 	bl	800a164 <HAL_DMA_Start_IT>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01a      	beq.n	800cc08 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f022 021a 	bic.w	r2, r2, #26
 800cbe0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a19      	ldr	r2, [pc, #100]	; (800cc4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cbe8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e018      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	025b      	lsls	r3, r3, #9
 800cc12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cc14:	2390      	movs	r3, #144	; 0x90
 800cc16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f107 0210 	add.w	r2, r7, #16
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f003 f932 	bl	800fe98 <SDIO_ConfigData>

      return HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	e000      	b.n	800cc3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cc38:	2302      	movs	r3, #2
  }
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3730      	adds	r7, #48	; 0x30
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	0800d42d 	.word	0x0800d42d
 800cc48:	0800d4c9 	.word	0x0800d4c9
 800cc4c:	004005ff 	.word	0x004005ff
 800cc50:	4225858c 	.word	0x4225858c

0800cc54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d008      	beq.n	800cc82 <HAL_SD_IRQHandler+0x2e>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f003 0308 	and.w	r3, r3, #8
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 ffc8 	bl	800dc10 <SD_Read_IT>
 800cc80:	e155      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 808f 	beq.w	800cdb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	6812      	ldr	r2, [r2, #0]
 800cca6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ccaa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ccae:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0201 	bic.w	r2, r2, #1
 800ccbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f003 0308 	and.w	r3, r3, #8
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d039      	beq.n	800cd3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f003 0302 	and.w	r3, r3, #2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <HAL_SD_IRQHandler+0x8a>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0320 	and.w	r3, r3, #32
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d011      	beq.n	800cd02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f003 f9ae 	bl	8010044 <SDMMC_CmdStopTransfer>
 800cce8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d008      	beq.n	800cd02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f91f 	bl	800cf40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d104      	bne.n	800cd2e <HAL_SD_IRQHandler+0xda>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0302 	and.w	r3, r3, #2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f003 fe04 	bl	801093c <HAL_SD_RxCpltCallback>
 800cd34:	e0fb      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f003 fdf6 	bl	8010928 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd3c:	e0f7      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80f2 	beq.w	800cf2e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d011      	beq.n	800cd78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f003 f973 	bl	8010044 <SDMMC_CmdStopTransfer>
 800cd5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d008      	beq.n	800cd78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	431a      	orrs	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f8e4 	bl	800cf40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 80d5 	bne.w	800cf2e <HAL_SD_IRQHandler+0x2da>
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f040 80cf 	bne.w	800cf2e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f022 0208 	bic.w	r2, r2, #8
 800cd9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f003 fdbd 	bl	8010928 <HAL_SD_TxCpltCallback>
}
 800cdae:	e0be      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d008      	beq.n	800cdd0 <HAL_SD_IRQHandler+0x17c>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d003      	beq.n	800cdd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 ff72 	bl	800dcb2 <SD_Write_IT>
 800cdce:	e0ae      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 80a7 	beq.w	800cf2e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d005      	beq.n	800cdfa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	f043 0202 	orr.w	r2, r3, #2
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce00:	f003 0308 	and.w	r3, r3, #8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0c:	f043 0208 	orr.w	r2, r3, #8
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d005      	beq.n	800ce2e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce26:	f043 0220 	orr.w	r2, r3, #32
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d005      	beq.n	800ce48 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	f043 0210 	orr.w	r2, r3, #16
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce50:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ce60:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f003 f8ec 	bl	8010044 <SDMMC_CmdStopTransfer>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f003 0308 	and.w	r3, r3, #8
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f855 	bl	800cf40 <HAL_SD_ErrorCallback>
}
 800ce96:	e04a      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d045      	beq.n	800cf2e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d104      	bne.n	800ceb6 <HAL_SD_IRQHandler+0x262>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d011      	beq.n	800ceda <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceba:	4a1f      	ldr	r2, [pc, #124]	; (800cf38 <HAL_SD_IRQHandler+0x2e4>)
 800cebc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fd f9a6 	bl	800a214 <HAL_DMA_Abort_IT>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d02f      	beq.n	800cf2e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 fb4a 	bl	800d56c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ced8:	e029      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d104      	bne.n	800ceee <HAL_SD_IRQHandler+0x29a>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d011      	beq.n	800cf12 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef2:	4a12      	ldr	r2, [pc, #72]	; (800cf3c <HAL_SD_IRQHandler+0x2e8>)
 800cef4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd f98a 	bl	800a214 <HAL_DMA_Abort_IT>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d013      	beq.n	800cf2e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fb65 	bl	800d5da <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cf10:	e00d      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f003 fcf4 	bl	8010914 <HAL_SD_AbortCallback>
}
 800cf2c:	e7ff      	b.n	800cf2e <HAL_SD_IRQHandler+0x2da>
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	0800d56d 	.word	0x0800d56d
 800cf3c:	0800d5db 	.word	0x0800d5db

0800cf40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf62:	0f9b      	lsrs	r3, r3, #30
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf6e:	0e9b      	lsrs	r3, r3, #26
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	f003 030f 	and.w	r3, r3, #15
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf80:	0e1b      	lsrs	r3, r3, #24
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 0303 	and.w	r3, r3, #3
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf92:	0c1b      	lsrs	r3, r3, #16
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9e:	0a1b      	lsrs	r3, r3, #8
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfb4:	0d1b      	lsrs	r3, r3, #20
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfc0:	0c1b      	lsrs	r3, r3, #16
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfd2:	0bdb      	lsrs	r3, r3, #15
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfe4:	0b9b      	lsrs	r3, r3, #14
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cff6:	0b5b      	lsrs	r3, r3, #13
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d008:	0b1b      	lsrs	r3, r3, #12
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2200      	movs	r2, #0
 800d01a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d020:	2b00      	cmp	r3, #0
 800d022:	d163      	bne.n	800d0ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d028:	009a      	lsls	r2, r3, #2
 800d02a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d02e:	4013      	ands	r3, r2
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d034:	0f92      	lsrs	r2, r2, #30
 800d036:	431a      	orrs	r2, r3
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d040:	0edb      	lsrs	r3, r3, #27
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 0307 	and.w	r3, r3, #7
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d052:	0e1b      	lsrs	r3, r3, #24
 800d054:	b2db      	uxtb	r3, r3
 800d056:	f003 0307 	and.w	r3, r3, #7
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d064:	0d5b      	lsrs	r3, r3, #21
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0307 	and.w	r3, r3, #7
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d076:	0c9b      	lsrs	r3, r3, #18
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	f003 0307 	and.w	r3, r3, #7
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d088:	0bdb      	lsrs	r3, r3, #15
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 0307 	and.w	r3, r3, #7
 800d090:	b2da      	uxtb	r2, r3
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	7e1b      	ldrb	r3, [r3, #24]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	3302      	adds	r3, #2
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d0b6:	fb02 f203 	mul.w	r2, r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	7a1b      	ldrb	r3, [r3, #8]
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	409a      	lsls	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d0d8:	0a52      	lsrs	r2, r2, #9
 800d0da:	fb02 f203 	mul.w	r2, r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e8:	661a      	str	r2, [r3, #96]	; 0x60
 800d0ea:	e031      	b.n	800d150 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d11d      	bne.n	800d130 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0f8:	041b      	lsls	r3, r3, #16
 800d0fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d102:	0c1b      	lsrs	r3, r3, #16
 800d104:	431a      	orrs	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	3301      	adds	r3, #1
 800d110:	029a      	lsls	r2, r3, #10
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d124:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	661a      	str	r2, [r3, #96]	; 0x60
 800d12e:	e00f      	b.n	800d150 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a58      	ldr	r2, [pc, #352]	; (800d298 <HAL_SD_GetCardCSD+0x344>)
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e09d      	b.n	800d28c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d154:	0b9b      	lsrs	r3, r3, #14
 800d156:	b2db      	uxtb	r3, r3
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d166:	09db      	lsrs	r3, r3, #7
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d188:	0fdb      	lsrs	r3, r3, #31
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d194:	0f5b      	lsrs	r3, r3, #29
 800d196:	b2db      	uxtb	r3, r3
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	0e9b      	lsrs	r3, r3, #26
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b8:	0d9b      	lsrs	r3, r3, #22
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ca:	0d5b      	lsrs	r3, r3, #21
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1fa:	0bdb      	lsrs	r3, r3, #15
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	b2da      	uxtb	r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20e:	0b9b      	lsrs	r3, r3, #14
 800d210:	b2db      	uxtb	r3, r3
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	b2da      	uxtb	r2, r3
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d222:	0b5b      	lsrs	r3, r3, #13
 800d224:	b2db      	uxtb	r3, r3
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d236:	0b1b      	lsrs	r3, r3, #12
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	0a9b      	lsrs	r3, r3, #10
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25e:	0a1b      	lsrs	r3, r3, #8
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0303 	and.w	r3, r3, #3
 800d266:	b2da      	uxtb	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d272:	085b      	lsrs	r3, r3, #1
 800d274:	b2db      	uxtb	r3, r3
 800d276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	004005ff 	.word	0x004005ff

0800d29c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d2f4:	b5b0      	push	{r4, r5, r7, lr}
 800d2f6:	b08e      	sub	sp, #56	; 0x38
 800d2f8:	af04      	add	r7, sp, #16
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2203      	movs	r2, #3
 800d302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d02e      	beq.n	800d36c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d314:	d106      	bne.n	800d324 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	639a      	str	r2, [r3, #56]	; 0x38
 800d322:	e029      	b.n	800d378 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d32a:	d10a      	bne.n	800d342 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fb0f 	bl	800d950 <SD_WideBus_Enable>
 800d332:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	431a      	orrs	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	639a      	str	r2, [r3, #56]	; 0x38
 800d340:	e01a      	b.n	800d378 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fb4c 	bl	800d9e6 <SD_WideBus_Disable>
 800d34e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	639a      	str	r2, [r3, #56]	; 0x38
 800d35c:	e00c      	b.n	800d378 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d362:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	639a      	str	r2, [r3, #56]	; 0x38
 800d36a:	e005      	b.n	800d378 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d009      	beq.n	800d394 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a18      	ldr	r2, [pc, #96]	; (800d3e8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d386:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e024      	b.n	800d3de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681d      	ldr	r5, [r3, #0]
 800d3ba:	466c      	mov	r4, sp
 800d3bc:	f107 0318 	add.w	r3, r7, #24
 800d3c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3c8:	f107 030c 	add.w	r3, r7, #12
 800d3cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f002 fcb2 	bl	800fd38 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3728      	adds	r7, #40	; 0x28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	004005ff 	.word	0x004005ff

0800d3ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d3f8:	f107 030c 	add.w	r3, r7, #12
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa7e 	bl	800d900 <SD_SendStatus>
 800d404:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d005      	beq.n	800d418 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	431a      	orrs	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	0a5b      	lsrs	r3, r3, #9
 800d41c:	f003 030f 	and.w	r3, r3, #15
 800d420:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d422:	693b      	ldr	r3, [r7, #16]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d438:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d448:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d44a:	bf00      	nop
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d462:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d468:	2b82      	cmp	r3, #130	; 0x82
 800d46a:	d111      	bne.n	800d490 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f002 fde7 	bl	8010044 <SDMMC_CmdStopTransfer>
 800d476:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d008      	beq.n	800d490 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	431a      	orrs	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7ff fd58 	bl	800cf40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0208 	bic.w	r2, r2, #8
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f003 fa3f 	bl	801093c <HAL_SD_RxCpltCallback>
#endif
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
	...

0800d4c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7fd f848 	bl	800a56c <HAL_DMA_GetError>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d03e      	beq.n	800d560 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d002      	beq.n	800d4fe <SD_DMAError+0x36>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d12d      	bne.n	800d55a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a19      	ldr	r2, [pc, #100]	; (800d568 <SD_DMAError+0xa0>)
 800d504:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d514:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d522:	6978      	ldr	r0, [r7, #20]
 800d524:	f7ff ff62 	bl	800d3ec <HAL_SD_GetCardState>
 800d528:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b06      	cmp	r3, #6
 800d52e:	d002      	beq.n	800d536 <SD_DMAError+0x6e>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b05      	cmp	r3, #5
 800d534:	d10a      	bne.n	800d54c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f002 fd82 	bl	8010044 <SDMMC_CmdStopTransfer>
 800d540:	4602      	mov	r2, r0
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d546:	431a      	orrs	r2, r3
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2200      	movs	r2, #0
 800d558:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d55a:	6978      	ldr	r0, [r7, #20]
 800d55c:	f7ff fcf0 	bl	800cf40 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d560:	bf00      	nop
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	004005ff 	.word	0x004005ff

0800d56c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d578:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d582:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff ff31 	bl	800d3ec <HAL_SD_GetCardState>
 800d58a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b06      	cmp	r3, #6
 800d59e:	d002      	beq.n	800d5a6 <SD_DMATxAbort+0x3a>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b05      	cmp	r3, #5
 800d5a4:	d10a      	bne.n	800d5bc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f002 fd4a 	bl	8010044 <SDMMC_CmdStopTransfer>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d103      	bne.n	800d5cc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f003 f9a5 	bl	8010914 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d5ca:	e002      	b.n	800d5d2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f7ff fcb7 	bl	800cf40 <HAL_SD_ErrorCallback>
}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff fefa 	bl	800d3ec <HAL_SD_GetCardState>
 800d5f8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	2b06      	cmp	r3, #6
 800d60c:	d002      	beq.n	800d614 <SD_DMARxAbort+0x3a>
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b05      	cmp	r3, #5
 800d612:	d10a      	bne.n	800d62a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4618      	mov	r0, r3
 800d61a:	f002 fd13 	bl	8010044 <SDMMC_CmdStopTransfer>
 800d61e:	4602      	mov	r2, r0
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	431a      	orrs	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d103      	bne.n	800d63a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f003 f96e 	bl	8010914 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d638:	e002      	b.n	800d640 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff fc80 	bl	800cf40 <HAL_SD_ErrorCallback>
}
 800d640:	bf00      	nop
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b094      	sub	sp, #80	; 0x50
 800d64c:	af04      	add	r7, sp, #16
 800d64e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d650:	2301      	movs	r3, #1
 800d652:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f002 fbc5 	bl	800fde8 <SDIO_GetPowerState>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d668:	e0b7      	b.n	800d7da <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d02f      	beq.n	800d6d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f002 fdee 	bl	8010258 <SDMMC_CmdSendCID>
 800d67c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <SD_InitCard+0x40>
    {
      return errorstate;
 800d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d686:	e0a8      	b.n	800d7da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2100      	movs	r1, #0
 800d68e:	4618      	mov	r0, r3
 800d690:	f002 fbef 	bl	800fe72 <SDIO_GetResponse>
 800d694:	4602      	mov	r2, r0
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2104      	movs	r1, #4
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f002 fbe6 	bl	800fe72 <SDIO_GetResponse>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2108      	movs	r1, #8
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f002 fbdd 	bl	800fe72 <SDIO_GetResponse>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	210c      	movs	r1, #12
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f002 fbd4 	bl	800fe72 <SDIO_GetResponse>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d00d      	beq.n	800d6f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f107 020e 	add.w	r2, r7, #14
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f002 fdf4 	bl	80102d2 <SDMMC_CmdSetRelAdd>
 800d6ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800d6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f4:	e071      	b.n	800d7da <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d036      	beq.n	800d76c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d6fe:	89fb      	ldrh	r3, [r7, #14]
 800d700:	461a      	mov	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70e:	041b      	lsls	r3, r3, #16
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f002 fdbe 	bl	8010294 <SDMMC_CmdSendCSD>
 800d718:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d722:	e05a      	b.n	800d7da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2100      	movs	r1, #0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f002 fba1 	bl	800fe72 <SDIO_GetResponse>
 800d730:	4602      	mov	r2, r0
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2104      	movs	r1, #4
 800d73c:	4618      	mov	r0, r3
 800d73e:	f002 fb98 	bl	800fe72 <SDIO_GetResponse>
 800d742:	4602      	mov	r2, r0
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2108      	movs	r1, #8
 800d74e:	4618      	mov	r0, r3
 800d750:	f002 fb8f 	bl	800fe72 <SDIO_GetResponse>
 800d754:	4602      	mov	r2, r0
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	210c      	movs	r1, #12
 800d760:	4618      	mov	r0, r3
 800d762:	f002 fb86 	bl	800fe72 <SDIO_GetResponse>
 800d766:	4602      	mov	r2, r0
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2104      	movs	r1, #4
 800d772:	4618      	mov	r0, r3
 800d774:	f002 fb7d 	bl	800fe72 <SDIO_GetResponse>
 800d778:	4603      	mov	r3, r0
 800d77a:	0d1a      	lsrs	r2, r3, #20
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d780:	f107 0310 	add.w	r3, r7, #16
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fbe4 	bl	800cf54 <HAL_SD_GetCardCSD>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d796:	e020      	b.n	800d7da <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6819      	ldr	r1, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a0:	041b      	lsls	r3, r3, #16
 800d7a2:	f04f 0400 	mov.w	r4, #0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	4623      	mov	r3, r4
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	f002 fc6c 	bl	8010088 <SDMMC_CmdSelDesel>
 800d7b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <SD_InitCard+0x174>
  {
    return errorstate;
 800d7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ba:	e00e      	b.n	800d7da <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681d      	ldr	r5, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	466c      	mov	r4, sp
 800d7c4:	f103 0210 	add.w	r2, r3, #16
 800d7c8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f002 fab0 	bl	800fd38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3740      	adds	r7, #64	; 0x40
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d7e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f002 fc66 	bl	80100ce <SDMMC_CmdGoIdleState>
 800d802:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	e072      	b.n	800d8f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4618      	mov	r0, r3
 800d814:	f002 fc79 	bl	801010a <SDMMC_CmdOperCond>
 800d818:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00d      	beq.n	800d83c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f002 fc4f 	bl	80100ce <SDMMC_CmdGoIdleState>
 800d830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	e05b      	b.n	800d8f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d846:	2b01      	cmp	r3, #1
 800d848:	d137      	bne.n	800d8ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2100      	movs	r1, #0
 800d850:	4618      	mov	r0, r3
 800d852:	f002 fc79 	bl	8010148 <SDMMC_CmdAppCommand>
 800d856:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d02d      	beq.n	800d8ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d85e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d862:	e047      	b.n	800d8f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2100      	movs	r1, #0
 800d86a:	4618      	mov	r0, r3
 800d86c:	f002 fc6c 	bl	8010148 <SDMMC_CmdAppCommand>
 800d870:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <SD_PowerON+0x98>
    {
      return errorstate;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	e03b      	b.n	800d8f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	491e      	ldr	r1, [pc, #120]	; (800d8fc <SD_PowerON+0x118>)
 800d882:	4618      	mov	r0, r3
 800d884:	f002 fc82 	bl	801018c <SDMMC_CmdAppOperCommand>
 800d888:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d894:	e02e      	b.n	800d8f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2100      	movs	r1, #0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f002 fae8 	bl	800fe72 <SDIO_GetResponse>
 800d8a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	0fdb      	lsrs	r3, r3, #31
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d101      	bne.n	800d8b0 <SD_PowerON+0xcc>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <SD_PowerON+0xce>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	613b      	str	r3, [r7, #16]

    count++;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d802      	bhi.n	800d8ca <SD_PowerON+0xe6>
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0cc      	beq.n	800d864 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d902      	bls.n	800d8da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d8d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d8d8:	e00c      	b.n	800d8f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	645a      	str	r2, [r3, #68]	; 0x44
 800d8ea:	e002      	b.n	800d8f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	c1100000 	.word	0xc1100000

0800d900 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d102      	bne.n	800d916 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d914:	e018      	b.n	800d948 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d91e:	041b      	lsls	r3, r3, #16
 800d920:	4619      	mov	r1, r3
 800d922:	4610      	mov	r0, r2
 800d924:	f002 fcf6 	bl	8010314 <SDMMC_CmdSendStatus>
 800d928:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	e009      	b.n	800d948 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2100      	movs	r1, #0
 800d93a:	4618      	mov	r0, r3
 800d93c:	f002 fa99 	bl	800fe72 <SDIO_GetResponse>
 800d940:	4602      	mov	r2, r0
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d958:	2300      	movs	r3, #0
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2100      	movs	r1, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f002 fa83 	bl	800fe72 <SDIO_GetResponse>
 800d96c:	4603      	mov	r3, r0
 800d96e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d976:	d102      	bne.n	800d97e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d97c:	e02f      	b.n	800d9de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d97e:	f107 030c 	add.w	r3, r7, #12
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f879 	bl	800da7c <SD_FindSCR>
 800d98a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	e023      	b.n	800d9de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d01c      	beq.n	800d9da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a8:	041b      	lsls	r3, r3, #16
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f002 fbcb 	bl	8010148 <SDMMC_CmdAppCommand>
 800d9b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	e00f      	b.n	800d9de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2102      	movs	r1, #2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f002 fc04 	bl	80101d2 <SDMMC_CmdBusWidth>
 800d9ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	e003      	b.n	800d9de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e001      	b.n	800d9de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d9da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3718      	adds	r7, #24
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b086      	sub	sp, #24
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f002 fa38 	bl	800fe72 <SDIO_GetResponse>
 800da02:	4603      	mov	r3, r0
 800da04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da0c:	d102      	bne.n	800da14 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da12:	e02f      	b.n	800da74 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da14:	f107 030c 	add.w	r3, r7, #12
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f82e 	bl	800da7c <SD_FindSCR>
 800da20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	e023      	b.n	800da74 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da32:	2b00      	cmp	r3, #0
 800da34:	d01c      	beq.n	800da70 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da3e:	041b      	lsls	r3, r3, #16
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f002 fb80 	bl	8010148 <SDMMC_CmdAppCommand>
 800da48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	e00f      	b.n	800da74 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2100      	movs	r1, #0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f002 fbb9 	bl	80101d2 <SDMMC_CmdBusWidth>
 800da60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d001      	beq.n	800da6c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	e003      	b.n	800da74 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da6c:	2300      	movs	r3, #0
 800da6e:	e001      	b.n	800da74 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800da74:	4618      	mov	r0, r3
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800da7c:	b590      	push	{r4, r7, lr}
 800da7e:	b08f      	sub	sp, #60	; 0x3c
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da86:	f7fb fd7b 	bl	8009580 <HAL_GetTick>
 800da8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800da8c:	2300      	movs	r3, #0
 800da8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800da90:	2300      	movs	r3, #0
 800da92:	60bb      	str	r3, [r7, #8]
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2108      	movs	r1, #8
 800daa2:	4618      	mov	r0, r3
 800daa4:	f002 fa24 	bl	800fef0 <SDMMC_CmdBlockLength>
 800daa8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	e0a9      	b.n	800dc08 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabc:	041b      	lsls	r3, r3, #16
 800dabe:	4619      	mov	r1, r3
 800dac0:	4610      	mov	r0, r2
 800dac2:	f002 fb41 	bl	8010148 <SDMMC_CmdAppCommand>
 800dac6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	e09a      	b.n	800dc08 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dad2:	f04f 33ff 	mov.w	r3, #4294967295
 800dad6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dad8:	2308      	movs	r3, #8
 800dada:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dadc:	2330      	movs	r3, #48	; 0x30
 800dade:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dae0:	2302      	movs	r3, #2
 800dae2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dae8:	2301      	movs	r3, #1
 800daea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f107 0210 	add.w	r2, r7, #16
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f002 f9ce 	bl	800fe98 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4618      	mov	r0, r3
 800db02:	f002 fb88 	bl	8010216 <SDMMC_CmdSendSCR>
 800db06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d022      	beq.n	800db54 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db10:	e07a      	b.n	800dc08 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00e      	beq.n	800db3e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	f107 0208 	add.w	r2, r7, #8
 800db2c:	18d4      	adds	r4, r2, r3
 800db2e:	4608      	mov	r0, r1
 800db30:	f002 f92d 	bl	800fd8e <SDIO_ReadFIFO>
 800db34:	4603      	mov	r3, r0
 800db36:	6023      	str	r3, [r4, #0]
      index++;
 800db38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3a:	3301      	adds	r3, #1
 800db3c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db3e:	f7fb fd1f 	bl	8009580 <HAL_GetTick>
 800db42:	4602      	mov	r2, r0
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4c:	d102      	bne.n	800db54 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db52:	e059      	b.n	800dc08 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db5a:	f240 432a 	movw	r3, #1066	; 0x42a
 800db5e:	4013      	ands	r3, r2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d0d6      	beq.n	800db12 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2208      	movs	r2, #8
 800db78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db7a:	2308      	movs	r3, #8
 800db7c:	e044      	b.n	800dc08 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d005      	beq.n	800db98 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2202      	movs	r2, #2
 800db92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db94:	2302      	movs	r3, #2
 800db96:	e037      	b.n	800dc08 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9e:	f003 0320 	and.w	r3, r3, #32
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d005      	beq.n	800dbb2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2220      	movs	r2, #32
 800dbac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dbae:	2320      	movs	r3, #32
 800dbb0:	e02a      	b.n	800dc08 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dbba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	061a      	lsls	r2, r3, #24
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	021b      	lsls	r3, r3, #8
 800dbc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	0a1b      	lsrs	r3, r3, #8
 800dbce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dbd2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	0e1b      	lsrs	r3, r3, #24
 800dbd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	601a      	str	r2, [r3, #0]
    scr++;
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	061a      	lsls	r2, r3, #24
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	021b      	lsls	r3, r3, #8
 800dbec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	0a1b      	lsrs	r3, r3, #8
 800dbf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbfa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	0e1b      	lsrs	r3, r3, #24
 800dc00:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc04:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	373c      	adds	r7, #60	; 0x3c
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}

0800dc10 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc22:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d03f      	beq.n	800dcaa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	e033      	b.n	800dc98 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f002 f8aa 	bl	800fd8e <SDIO_ReadFIFO>
 800dc3a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	3301      	adds	r3, #1
 800dc48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	0a1b      	lsrs	r3, r3, #8
 800dc54:	b2da      	uxtb	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	0c1b      	lsrs	r3, r3, #16
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	3301      	adds	r3, #1
 800dc74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	0e1b      	lsrs	r3, r3, #24
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	3301      	adds	r3, #1
 800dc96:	617b      	str	r3, [r7, #20]
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2b07      	cmp	r3, #7
 800dc9c:	d9c8      	bls.n	800dc30 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dcaa:	bf00      	nop
 800dcac:	3718      	adds	r7, #24
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b086      	sub	sp, #24
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d043      	beq.n	800dd54 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	e037      	b.n	800dd42 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	021a      	lsls	r2, r3, #8
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	041a      	lsls	r2, r3, #16
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	061a      	lsls	r2, r3, #24
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3301      	adds	r3, #1
 800dd24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f107 0208 	add.w	r2, r7, #8
 800dd34:	4611      	mov	r1, r2
 800dd36:	4618      	mov	r0, r3
 800dd38:	f002 f836 	bl	800fda8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	2b07      	cmp	r3, #7
 800dd46:	d9c4      	bls.n	800dcd2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	693a      	ldr	r2, [r7, #16]
 800dd52:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dd54:	bf00      	nop
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e056      	b.n	800de1c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d106      	bne.n	800dd8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7f9 f8b3 	bl	8006ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2202      	movs	r2, #2
 800dd92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dda4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	431a      	orrs	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	69db      	ldr	r3, [r3, #28]
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	ea42 0103 	orr.w	r1, r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	430a      	orrs	r2, r1
 800dde4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	0c1b      	lsrs	r3, r3, #16
 800ddec:	f003 0104 	and.w	r1, r3, #4
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	69da      	ldr	r2, [r3, #28]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2201      	movs	r2, #1
 800de16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	4613      	mov	r3, r2
 800de32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d101      	bne.n	800de46 <HAL_SPI_Transmit+0x22>
 800de42:	2302      	movs	r3, #2
 800de44:	e11e      	b.n	800e084 <HAL_SPI_Transmit+0x260>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de4e:	f7fb fb97 	bl	8009580 <HAL_GetTick>
 800de52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de54:	88fb      	ldrh	r3, [r7, #6]
 800de56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b01      	cmp	r3, #1
 800de62:	d002      	beq.n	800de6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de64:	2302      	movs	r3, #2
 800de66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de68:	e103      	b.n	800e072 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <HAL_SPI_Transmit+0x52>
 800de70:	88fb      	ldrh	r3, [r7, #6]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de7a:	e0fa      	b.n	800e072 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2203      	movs	r2, #3
 800de80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	88fa      	ldrh	r2, [r7, #6]
 800de94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	88fa      	ldrh	r2, [r7, #6]
 800de9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2200      	movs	r2, #0
 800deac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2200      	movs	r2, #0
 800deb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dec2:	d107      	bne.n	800ded4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ded2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dede:	2b40      	cmp	r3, #64	; 0x40
 800dee0:	d007      	beq.n	800def2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800defa:	d14b      	bne.n	800df94 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <HAL_SPI_Transmit+0xe6>
 800df04:	8afb      	ldrh	r3, [r7, #22]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d13e      	bne.n	800df88 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df0e:	881a      	ldrh	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1a:	1c9a      	adds	r2, r3, #2
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df24:	b29b      	uxth	r3, r3
 800df26:	3b01      	subs	r3, #1
 800df28:	b29a      	uxth	r2, r3
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df2e:	e02b      	b.n	800df88 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	f003 0302 	and.w	r3, r3, #2
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	d112      	bne.n	800df64 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df42:	881a      	ldrh	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4e:	1c9a      	adds	r2, r3, #2
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df58:	b29b      	uxth	r3, r3
 800df5a:	3b01      	subs	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	86da      	strh	r2, [r3, #54]	; 0x36
 800df62:	e011      	b.n	800df88 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df64:	f7fb fb0c 	bl	8009580 <HAL_GetTick>
 800df68:	4602      	mov	r2, r0
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	429a      	cmp	r2, r3
 800df72:	d803      	bhi.n	800df7c <HAL_SPI_Transmit+0x158>
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7a:	d102      	bne.n	800df82 <HAL_SPI_Transmit+0x15e>
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800df82:	2303      	movs	r3, #3
 800df84:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df86:	e074      	b.n	800e072 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1ce      	bne.n	800df30 <HAL_SPI_Transmit+0x10c>
 800df92:	e04c      	b.n	800e02e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <HAL_SPI_Transmit+0x17e>
 800df9c:	8afb      	ldrh	r3, [r7, #22]
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d140      	bne.n	800e024 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	330c      	adds	r3, #12
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb4:	1c5a      	adds	r2, r3, #1
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800dfc8:	e02c      	b.n	800e024 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	f003 0302 	and.w	r3, r3, #2
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d113      	bne.n	800e000 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	330c      	adds	r3, #12
 800dfe2:	7812      	ldrb	r2, [r2, #0]
 800dfe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	86da      	strh	r2, [r3, #54]	; 0x36
 800dffe:	e011      	b.n	800e024 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e000:	f7fb fabe 	bl	8009580 <HAL_GetTick>
 800e004:	4602      	mov	r2, r0
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d803      	bhi.n	800e018 <HAL_SPI_Transmit+0x1f4>
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e016:	d102      	bne.n	800e01e <HAL_SPI_Transmit+0x1fa>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d102      	bne.n	800e024 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e01e:	2303      	movs	r3, #3
 800e020:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e022:	e026      	b.n	800e072 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e028:	b29b      	uxth	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1cd      	bne.n	800dfca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e02e:	69ba      	ldr	r2, [r7, #24]
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f000 fba4 	bl	800e780 <SPI_EndRxTxTransaction>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2220      	movs	r2, #32
 800e042:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10a      	bne.n	800e062 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e04c:	2300      	movs	r3, #0
 800e04e:	613b      	str	r3, [r7, #16]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	613b      	str	r3, [r7, #16]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	613b      	str	r3, [r7, #16]
 800e060:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	77fb      	strb	r3, [r7, #31]
 800e06e:	e000      	b.n	800e072 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e082:	7ffb      	ldrb	r3, [r7, #31]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	4613      	mov	r3, r2
 800e09a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0a8:	d112      	bne.n	800e0d0 <HAL_SPI_Receive+0x44>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10e      	bne.n	800e0d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2204      	movs	r2, #4
 800e0b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0ba:	88fa      	ldrh	r2, [r7, #6]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	68ba      	ldr	r2, [r7, #8]
 800e0c4:	68b9      	ldr	r1, [r7, #8]
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f000 f8e9 	bl	800e29e <HAL_SPI_TransmitReceive>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	e0e2      	b.n	800e296 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d101      	bne.n	800e0de <HAL_SPI_Receive+0x52>
 800e0da:	2302      	movs	r3, #2
 800e0dc:	e0db      	b.n	800e296 <HAL_SPI_Receive+0x20a>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0e6:	f7fb fa4b 	bl	8009580 <HAL_GetTick>
 800e0ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d002      	beq.n	800e0fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e0fc:	e0c2      	b.n	800e284 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <HAL_SPI_Receive+0x7e>
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d102      	bne.n	800e110 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e10e:	e0b9      	b.n	800e284 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2204      	movs	r2, #4
 800e114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	88fa      	ldrh	r2, [r7, #6]
 800e128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	88fa      	ldrh	r2, [r7, #6]
 800e12e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2200      	movs	r2, #0
 800e14c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e156:	d107      	bne.n	800e168 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e166:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e172:	2b40      	cmp	r3, #64	; 0x40
 800e174:	d007      	beq.n	800e186 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d162      	bne.n	800e254 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e18e:	e02e      	b.n	800e1ee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d115      	bne.n	800e1ca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f103 020c 	add.w	r2, r3, #12
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1aa:	7812      	ldrb	r2, [r2, #0]
 800e1ac:	b2d2      	uxtb	r2, r2
 800e1ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1c8:	e011      	b.n	800e1ee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1ca:	f7fb f9d9 	bl	8009580 <HAL_GetTick>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	683a      	ldr	r2, [r7, #0]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d803      	bhi.n	800e1e2 <HAL_SPI_Receive+0x156>
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e0:	d102      	bne.n	800e1e8 <HAL_SPI_Receive+0x15c>
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e1ec:	e04a      	b.n	800e284 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1cb      	bne.n	800e190 <HAL_SPI_Receive+0x104>
 800e1f8:	e031      	b.n	800e25e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b01      	cmp	r3, #1
 800e206:	d113      	bne.n	800e230 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68da      	ldr	r2, [r3, #12]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e212:	b292      	uxth	r2, r2
 800e214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21a:	1c9a      	adds	r2, r3, #2
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e224:	b29b      	uxth	r3, r3
 800e226:	3b01      	subs	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e22e:	e011      	b.n	800e254 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e230:	f7fb f9a6 	bl	8009580 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d803      	bhi.n	800e248 <HAL_SPI_Receive+0x1bc>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d102      	bne.n	800e24e <HAL_SPI_Receive+0x1c2>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d102      	bne.n	800e254 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e252:	e017      	b.n	800e284 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e258:	b29b      	uxth	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1cd      	bne.n	800e1fa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 fa27 	bl	800e6b6 <SPI_EndRxTransaction>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2220      	movs	r2, #32
 800e272:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	75fb      	strb	r3, [r7, #23]
 800e280:	e000      	b.n	800e284 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e294:	7dfb      	ldrb	r3, [r7, #23]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b08c      	sub	sp, #48	; 0x30
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	607a      	str	r2, [r7, #4]
 800e2aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d101      	bne.n	800e2c4 <HAL_SPI_TransmitReceive+0x26>
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e18a      	b.n	800e5da <HAL_SPI_TransmitReceive+0x33c>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2cc:	f7fb f958 	bl	8009580 <HAL_GetTick>
 800e2d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e2e2:	887b      	ldrh	r3, [r7, #2]
 800e2e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e2e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d00f      	beq.n	800e30e <HAL_SPI_TransmitReceive+0x70>
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2f4:	d107      	bne.n	800e306 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d103      	bne.n	800e306 <HAL_SPI_TransmitReceive+0x68>
 800e2fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e302:	2b04      	cmp	r3, #4
 800e304:	d003      	beq.n	800e30e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e306:	2302      	movs	r3, #2
 800e308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e30c:	e15b      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d005      	beq.n	800e320 <HAL_SPI_TransmitReceive+0x82>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <HAL_SPI_TransmitReceive+0x82>
 800e31a:	887b      	ldrh	r3, [r7, #2]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d103      	bne.n	800e328 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e326:	e14e      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b04      	cmp	r3, #4
 800e332:	d003      	beq.n	800e33c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2205      	movs	r2, #5
 800e338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	887a      	ldrh	r2, [r7, #2]
 800e34c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	887a      	ldrh	r2, [r7, #2]
 800e352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	887a      	ldrh	r2, [r7, #2]
 800e35e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	887a      	ldrh	r2, [r7, #2]
 800e364:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37c:	2b40      	cmp	r3, #64	; 0x40
 800e37e:	d007      	beq.n	800e390 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e38e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e398:	d178      	bne.n	800e48c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d002      	beq.n	800e3a8 <HAL_SPI_TransmitReceive+0x10a>
 800e3a2:	8b7b      	ldrh	r3, [r7, #26]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d166      	bne.n	800e476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ac:	881a      	ldrh	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b8:	1c9a      	adds	r2, r3, #2
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3cc:	e053      	b.n	800e476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	f003 0302 	and.w	r3, r3, #2
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d11b      	bne.n	800e414 <HAL_SPI_TransmitReceive+0x176>
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d016      	beq.n	800e414 <HAL_SPI_TransmitReceive+0x176>
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d113      	bne.n	800e414 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f0:	881a      	ldrh	r2, [r3, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fc:	1c9a      	adds	r2, r3, #2
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e406:	b29b      	uxth	r3, r3
 800e408:	3b01      	subs	r3, #1
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e410:	2300      	movs	r3, #0
 800e412:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d119      	bne.n	800e456 <HAL_SPI_TransmitReceive+0x1b8>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e426:	b29b      	uxth	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d014      	beq.n	800e456 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68da      	ldr	r2, [r3, #12]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e436:	b292      	uxth	r2, r2
 800e438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e43e:	1c9a      	adds	r2, r3, #2
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b01      	subs	r3, #1
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e452:	2301      	movs	r3, #1
 800e454:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e456:	f7fb f893 	bl	8009580 <HAL_GetTick>
 800e45a:	4602      	mov	r2, r0
 800e45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e462:	429a      	cmp	r2, r3
 800e464:	d807      	bhi.n	800e476 <HAL_SPI_TransmitReceive+0x1d8>
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e46c:	d003      	beq.n	800e476 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e474:	e0a7      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1a6      	bne.n	800e3ce <HAL_SPI_TransmitReceive+0x130>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e484:	b29b      	uxth	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1a1      	bne.n	800e3ce <HAL_SPI_TransmitReceive+0x130>
 800e48a:	e07c      	b.n	800e586 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <HAL_SPI_TransmitReceive+0x1fc>
 800e494:	8b7b      	ldrh	r3, [r7, #26]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d16b      	bne.n	800e572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	330c      	adds	r3, #12
 800e4a4:	7812      	ldrb	r2, [r2, #0]
 800e4a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4c0:	e057      	b.n	800e572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	f003 0302 	and.w	r3, r3, #2
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d11c      	bne.n	800e50a <HAL_SPI_TransmitReceive+0x26c>
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d017      	beq.n	800e50a <HAL_SPI_TransmitReceive+0x26c>
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d114      	bne.n	800e50a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	330c      	adds	r3, #12
 800e4ea:	7812      	ldrb	r2, [r2, #0]
 800e4ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	3b01      	subs	r3, #1
 800e500:	b29a      	uxth	r2, r3
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	2b01      	cmp	r3, #1
 800e516:	d119      	bne.n	800e54c <HAL_SPI_TransmitReceive+0x2ae>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d014      	beq.n	800e54c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68da      	ldr	r2, [r3, #12]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e53e:	b29b      	uxth	r3, r3
 800e540:	3b01      	subs	r3, #1
 800e542:	b29a      	uxth	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e548:	2301      	movs	r3, #1
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e54c:	f7fb f818 	bl	8009580 <HAL_GetTick>
 800e550:	4602      	mov	r2, r0
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e558:	429a      	cmp	r2, r3
 800e55a:	d803      	bhi.n	800e564 <HAL_SPI_TransmitReceive+0x2c6>
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e562:	d102      	bne.n	800e56a <HAL_SPI_TransmitReceive+0x2cc>
 800e564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e566:	2b00      	cmp	r3, #0
 800e568:	d103      	bne.n	800e572 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e56a:	2303      	movs	r3, #3
 800e56c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e570:	e029      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e576:	b29b      	uxth	r3, r3
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1a2      	bne.n	800e4c2 <HAL_SPI_TransmitReceive+0x224>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e580:	b29b      	uxth	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d19d      	bne.n	800e4c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f000 f8f8 	bl	800e780 <SPI_EndRxTxTransaction>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d006      	beq.n	800e5a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2220      	movs	r2, #32
 800e5a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e5a2:	e010      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10b      	bne.n	800e5c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	617b      	str	r3, [r7, #20]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	617b      	str	r3, [r7, #20]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	617b      	str	r3, [r7, #20]
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	e000      	b.n	800e5c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e5c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e5d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3730      	adds	r7, #48	; 0x30
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	603b      	str	r3, [r7, #0]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e5f2:	e04c      	b.n	800e68e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fa:	d048      	beq.n	800e68e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e5fc:	f7fa ffc0 	bl	8009580 <HAL_GetTick>
 800e600:	4602      	mov	r2, r0
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d902      	bls.n	800e612 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d13d      	bne.n	800e68e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e62a:	d111      	bne.n	800e650 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e634:	d004      	beq.n	800e640 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e63e:	d107      	bne.n	800e650 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e64e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e658:	d10f      	bne.n	800e67a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e00f      	b.n	800e6ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	689a      	ldr	r2, [r3, #8]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	4013      	ands	r3, r2
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	bf0c      	ite	eq
 800e69e:	2301      	moveq	r3, #1
 800e6a0:	2300      	movne	r3, #0
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d1a3      	bne.n	800e5f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b086      	sub	sp, #24
 800e6ba:	af02      	add	r7, sp, #8
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6ca:	d111      	bne.n	800e6f0 <SPI_EndRxTransaction+0x3a>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d4:	d004      	beq.n	800e6e0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6de:	d107      	bne.n	800e6f0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6f8:	d12a      	bne.n	800e750 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e702:	d012      	beq.n	800e72a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2200      	movs	r2, #0
 800e70c:	2180      	movs	r1, #128	; 0x80
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff ff67 	bl	800e5e2 <SPI_WaitFlagStateUntilTimeout>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d02d      	beq.n	800e776 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71e:	f043 0220 	orr.w	r2, r3, #32
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e726:	2303      	movs	r3, #3
 800e728:	e026      	b.n	800e778 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2200      	movs	r2, #0
 800e732:	2101      	movs	r1, #1
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f7ff ff54 	bl	800e5e2 <SPI_WaitFlagStateUntilTimeout>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d01a      	beq.n	800e776 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e744:	f043 0220 	orr.w	r2, r3, #32
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e74c:	2303      	movs	r3, #3
 800e74e:	e013      	b.n	800e778 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2200      	movs	r2, #0
 800e758:	2101      	movs	r1, #1
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f7ff ff41 	bl	800e5e2 <SPI_WaitFlagStateUntilTimeout>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76a:	f043 0220 	orr.w	r2, r3, #32
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	e000      	b.n	800e778 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b088      	sub	sp, #32
 800e784:	af02      	add	r7, sp, #8
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e78c:	4b1b      	ldr	r3, [pc, #108]	; (800e7fc <SPI_EndRxTxTransaction+0x7c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a1b      	ldr	r2, [pc, #108]	; (800e800 <SPI_EndRxTxTransaction+0x80>)
 800e792:	fba2 2303 	umull	r2, r3, r2, r3
 800e796:	0d5b      	lsrs	r3, r3, #21
 800e798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e79c:	fb02 f303 	mul.w	r3, r2, r3
 800e7a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7aa:	d112      	bne.n	800e7d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2180      	movs	r1, #128	; 0x80
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff ff13 	bl	800e5e2 <SPI_WaitFlagStateUntilTimeout>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d016      	beq.n	800e7f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c6:	f043 0220 	orr.w	r2, r3, #32
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e00f      	b.n	800e7f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00a      	beq.n	800e7ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7e8:	2b80      	cmp	r3, #128	; 0x80
 800e7ea:	d0f2      	beq.n	800e7d2 <SPI_EndRxTxTransaction+0x52>
 800e7ec:	e000      	b.n	800e7f0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e7ee:	bf00      	nop
  }

  return HAL_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20000000 	.word	0x20000000
 800e800:	165e9f81 	.word	0x165e9f81

0800e804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e01d      	b.n	800e852 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7f8 fc1e 	bl	800706c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2202      	movs	r2, #2
 800e834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3304      	adds	r3, #4
 800e840:	4619      	mov	r1, r3
 800e842:	4610      	mov	r0, r2
 800e844:	f000 fb56 	bl	800eef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b085      	sub	sp, #20
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68da      	ldr	r2, [r3, #12]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f042 0201 	orr.w	r2, r2, #1
 800e870:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2b06      	cmp	r3, #6
 800e882:	d007      	beq.n	800e894 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f042 0201 	orr.w	r2, r2, #1
 800e892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d101      	bne.n	800e8b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e01d      	b.n	800e8f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d106      	bne.n	800e8ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7f8 fb5b 	bl	8006f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f000 fb07 	bl	800eef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2201      	movs	r2, #1
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 fd42 	bl	800f394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a15      	ldr	r2, [pc, #84]	; (800e96c <HAL_TIM_PWM_Start+0x74>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d004      	beq.n	800e924 <HAL_TIM_PWM_Start+0x2c>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a14      	ldr	r2, [pc, #80]	; (800e970 <HAL_TIM_PWM_Start+0x78>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d101      	bne.n	800e928 <HAL_TIM_PWM_Start+0x30>
 800e924:	2301      	movs	r3, #1
 800e926:	e000      	b.n	800e92a <HAL_TIM_PWM_Start+0x32>
 800e928:	2300      	movs	r3, #0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d007      	beq.n	800e93e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e93c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	f003 0307 	and.w	r3, r3, #7
 800e948:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b06      	cmp	r3, #6
 800e94e:	d007      	beq.n	800e960 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f042 0201 	orr.w	r2, r2, #1
 800e95e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	40010000 	.word	0x40010000
 800e970:	40010400 	.word	0x40010400

0800e974 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e984:	2301      	movs	r3, #1
 800e986:	e083      	b.n	800ea90 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7f8 fbf5 	bl	800718c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9b8:	f023 0307 	bic.w	r3, r3, #7
 800e9bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	f000 fa93 	bl	800eef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	699b      	ldr	r3, [r3, #24]
 800e9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9f6:	f023 0303 	bic.w	r3, r3, #3
 800e9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	689a      	ldr	r2, [r3, #8]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	021b      	lsls	r3, r3, #8
 800ea06:	4313      	orrs	r3, r2
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ea14:	f023 030c 	bic.w	r3, r3, #12
 800ea18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ea24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	68da      	ldr	r2, [r3, #12]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	4313      	orrs	r3, r2
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	4313      	orrs	r3, r2
 800ea36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	011a      	lsls	r2, r3, #4
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	031b      	lsls	r3, r3, #12
 800ea44:	4313      	orrs	r3, r2
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ea52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ea5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	011b      	lsls	r3, r3, #4
 800ea66:	4313      	orrs	r3, r2
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <HAL_TIM_Encoder_Start+0x16>
 800eaa8:	2b04      	cmp	r3, #4
 800eaaa:	d008      	beq.n	800eabe <HAL_TIM_Encoder_Start+0x26>
 800eaac:	e00f      	b.n	800eace <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2201      	movs	r2, #1
 800eab4:	2100      	movs	r1, #0
 800eab6:	4618      	mov	r0, r3
 800eab8:	f000 fc6c 	bl	800f394 <TIM_CCxChannelCmd>
      break;
 800eabc:	e016      	b.n	800eaec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2201      	movs	r2, #1
 800eac4:	2104      	movs	r1, #4
 800eac6:	4618      	mov	r0, r3
 800eac8:	f000 fc64 	bl	800f394 <TIM_CCxChannelCmd>
      break;
 800eacc:	e00e      	b.n	800eaec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2201      	movs	r2, #1
 800ead4:	2100      	movs	r1, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 fc5c 	bl	800f394 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2201      	movs	r2, #1
 800eae2:	2104      	movs	r1, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 fc55 	bl	800f394 <TIM_CCxChannelCmd>
      break;
 800eaea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f042 0201 	orr.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	f003 0302 	and.w	r3, r3, #2
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d122      	bne.n	800eb62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d11b      	bne.n	800eb62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f06f 0202 	mvn.w	r2, #2
 800eb32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	699b      	ldr	r3, [r3, #24]
 800eb40:	f003 0303 	and.w	r3, r3, #3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 f9b5 	bl	800eeb8 <HAL_TIM_IC_CaptureCallback>
 800eb4e:	e005      	b.n	800eb5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 f9a7 	bl	800eea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f9b8 	bl	800eecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	f003 0304 	and.w	r3, r3, #4
 800eb6c:	2b04      	cmp	r3, #4
 800eb6e:	d122      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	f003 0304 	and.w	r3, r3, #4
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d11b      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f06f 0204 	mvn.w	r2, #4
 800eb86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f98b 	bl	800eeb8 <HAL_TIM_IC_CaptureCallback>
 800eba2:	e005      	b.n	800ebb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 f97d 	bl	800eea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f98e 	bl	800eecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	f003 0308 	and.w	r3, r3, #8
 800ebc0:	2b08      	cmp	r3, #8
 800ebc2:	d122      	bne.n	800ec0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	f003 0308 	and.w	r3, r3, #8
 800ebce:	2b08      	cmp	r3, #8
 800ebd0:	d11b      	bne.n	800ec0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f06f 0208 	mvn.w	r2, #8
 800ebda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2204      	movs	r2, #4
 800ebe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	f003 0303 	and.w	r3, r3, #3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d003      	beq.n	800ebf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f961 	bl	800eeb8 <HAL_TIM_IC_CaptureCallback>
 800ebf6:	e005      	b.n	800ec04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f953 	bl	800eea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f964 	bl	800eecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	f003 0310 	and.w	r3, r3, #16
 800ec14:	2b10      	cmp	r3, #16
 800ec16:	d122      	bne.n	800ec5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	f003 0310 	and.w	r3, r3, #16
 800ec22:	2b10      	cmp	r3, #16
 800ec24:	d11b      	bne.n	800ec5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f06f 0210 	mvn.w	r2, #16
 800ec2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2208      	movs	r2, #8
 800ec34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	69db      	ldr	r3, [r3, #28]
 800ec3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d003      	beq.n	800ec4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f000 f937 	bl	800eeb8 <HAL_TIM_IC_CaptureCallback>
 800ec4a:	e005      	b.n	800ec58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f929 	bl	800eea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f93a 	bl	800eecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	691b      	ldr	r3, [r3, #16]
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d10e      	bne.n	800ec8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	f003 0301 	and.w	r3, r3, #1
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d107      	bne.n	800ec8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f06f 0201 	mvn.w	r2, #1
 800ec82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7f6 ff6b 	bl	8005b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec94:	2b80      	cmp	r3, #128	; 0x80
 800ec96:	d10e      	bne.n	800ecb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eca2:	2b80      	cmp	r3, #128	; 0x80
 800eca4:	d107      	bne.n	800ecb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fc6d 	bl	800f590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	691b      	ldr	r3, [r3, #16]
 800ecbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecc0:	2b40      	cmp	r3, #64	; 0x40
 800ecc2:	d10e      	bne.n	800ece2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecce:	2b40      	cmp	r3, #64	; 0x40
 800ecd0:	d107      	bne.n	800ece2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ecda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f8ff 	bl	800eee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b20      	cmp	r3, #32
 800ecee:	d10e      	bne.n	800ed0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	f003 0320 	and.w	r3, r3, #32
 800ecfa:	2b20      	cmp	r3, #32
 800ecfc:	d107      	bne.n	800ed0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f06f 0220 	mvn.w	r2, #32
 800ed06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 fc37 	bl	800f57c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
	...

0800ed18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d101      	bne.n	800ed32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ed2e:	2302      	movs	r3, #2
 800ed30:	e0b4      	b.n	800ee9c <HAL_TIM_PWM_ConfigChannel+0x184>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2202      	movs	r2, #2
 800ed3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b0c      	cmp	r3, #12
 800ed46:	f200 809f 	bhi.w	800ee88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ed4a:	a201      	add	r2, pc, #4	; (adr r2, 800ed50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ed4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed50:	0800ed85 	.word	0x0800ed85
 800ed54:	0800ee89 	.word	0x0800ee89
 800ed58:	0800ee89 	.word	0x0800ee89
 800ed5c:	0800ee89 	.word	0x0800ee89
 800ed60:	0800edc5 	.word	0x0800edc5
 800ed64:	0800ee89 	.word	0x0800ee89
 800ed68:	0800ee89 	.word	0x0800ee89
 800ed6c:	0800ee89 	.word	0x0800ee89
 800ed70:	0800ee07 	.word	0x0800ee07
 800ed74:	0800ee89 	.word	0x0800ee89
 800ed78:	0800ee89 	.word	0x0800ee89
 800ed7c:	0800ee89 	.word	0x0800ee89
 800ed80:	0800ee47 	.word	0x0800ee47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 f952 	bl	800f034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	699a      	ldr	r2, [r3, #24]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f042 0208 	orr.w	r2, r2, #8
 800ed9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	699a      	ldr	r2, [r3, #24]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f022 0204 	bic.w	r2, r2, #4
 800edae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6999      	ldr	r1, [r3, #24]
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	691a      	ldr	r2, [r3, #16]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	430a      	orrs	r2, r1
 800edc0:	619a      	str	r2, [r3, #24]
      break;
 800edc2:	e062      	b.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	68b9      	ldr	r1, [r7, #8]
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 f9a2 	bl	800f114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	699a      	ldr	r2, [r3, #24]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800edde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	699a      	ldr	r2, [r3, #24]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6999      	ldr	r1, [r3, #24]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	021a      	lsls	r2, r3, #8
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	430a      	orrs	r2, r1
 800ee02:	619a      	str	r2, [r3, #24]
      break;
 800ee04:	e041      	b.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68b9      	ldr	r1, [r7, #8]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 f9f7 	bl	800f200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	69da      	ldr	r2, [r3, #28]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f042 0208 	orr.w	r2, r2, #8
 800ee20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f022 0204 	bic.w	r2, r2, #4
 800ee30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	69d9      	ldr	r1, [r3, #28]
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	691a      	ldr	r2, [r3, #16]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	430a      	orrs	r2, r1
 800ee42:	61da      	str	r2, [r3, #28]
      break;
 800ee44:	e021      	b.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f000 fa4b 	bl	800f2e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	69da      	ldr	r2, [r3, #28]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	69da      	ldr	r2, [r3, #28]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	69d9      	ldr	r1, [r3, #28]
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	021a      	lsls	r2, r3, #8
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	430a      	orrs	r2, r1
 800ee84:	61da      	str	r2, [r3, #28]
      break;
 800ee86:	e000      	b.n	800ee8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ee88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eeac:	bf00      	nop
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a40      	ldr	r2, [pc, #256]	; (800f008 <TIM_Base_SetConfig+0x114>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d013      	beq.n	800ef34 <TIM_Base_SetConfig+0x40>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef12:	d00f      	beq.n	800ef34 <TIM_Base_SetConfig+0x40>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a3d      	ldr	r2, [pc, #244]	; (800f00c <TIM_Base_SetConfig+0x118>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d00b      	beq.n	800ef34 <TIM_Base_SetConfig+0x40>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a3c      	ldr	r2, [pc, #240]	; (800f010 <TIM_Base_SetConfig+0x11c>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d007      	beq.n	800ef34 <TIM_Base_SetConfig+0x40>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a3b      	ldr	r2, [pc, #236]	; (800f014 <TIM_Base_SetConfig+0x120>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d003      	beq.n	800ef34 <TIM_Base_SetConfig+0x40>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a3a      	ldr	r2, [pc, #232]	; (800f018 <TIM_Base_SetConfig+0x124>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d108      	bne.n	800ef46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a2f      	ldr	r2, [pc, #188]	; (800f008 <TIM_Base_SetConfig+0x114>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d02b      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef54:	d027      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a2c      	ldr	r2, [pc, #176]	; (800f00c <TIM_Base_SetConfig+0x118>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d023      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a2b      	ldr	r2, [pc, #172]	; (800f010 <TIM_Base_SetConfig+0x11c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d01f      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a2a      	ldr	r2, [pc, #168]	; (800f014 <TIM_Base_SetConfig+0x120>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d01b      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a29      	ldr	r2, [pc, #164]	; (800f018 <TIM_Base_SetConfig+0x124>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d017      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a28      	ldr	r2, [pc, #160]	; (800f01c <TIM_Base_SetConfig+0x128>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d013      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a27      	ldr	r2, [pc, #156]	; (800f020 <TIM_Base_SetConfig+0x12c>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d00f      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a26      	ldr	r2, [pc, #152]	; (800f024 <TIM_Base_SetConfig+0x130>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00b      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a25      	ldr	r2, [pc, #148]	; (800f028 <TIM_Base_SetConfig+0x134>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d007      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a24      	ldr	r2, [pc, #144]	; (800f02c <TIM_Base_SetConfig+0x138>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d003      	beq.n	800efa6 <TIM_Base_SetConfig+0xb2>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a23      	ldr	r2, [pc, #140]	; (800f030 <TIM_Base_SetConfig+0x13c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d108      	bne.n	800efb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	689a      	ldr	r2, [r3, #8]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a0a      	ldr	r2, [pc, #40]	; (800f008 <TIM_Base_SetConfig+0x114>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d003      	beq.n	800efec <TIM_Base_SetConfig+0xf8>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a0c      	ldr	r2, [pc, #48]	; (800f018 <TIM_Base_SetConfig+0x124>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d103      	bne.n	800eff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	691a      	ldr	r2, [r3, #16]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	615a      	str	r2, [r3, #20]
}
 800effa:	bf00      	nop
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	40010000 	.word	0x40010000
 800f00c:	40000400 	.word	0x40000400
 800f010:	40000800 	.word	0x40000800
 800f014:	40000c00 	.word	0x40000c00
 800f018:	40010400 	.word	0x40010400
 800f01c:	40014000 	.word	0x40014000
 800f020:	40014400 	.word	0x40014400
 800f024:	40014800 	.word	0x40014800
 800f028:	40001800 	.word	0x40001800
 800f02c:	40001c00 	.word	0x40001c00
 800f030:	40002000 	.word	0x40002000

0800f034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f034:	b480      	push	{r7}
 800f036:	b087      	sub	sp, #28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	f023 0201 	bic.w	r2, r3, #1
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	699b      	ldr	r3, [r3, #24]
 800f05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f023 0303 	bic.w	r3, r3, #3
 800f06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	4313      	orrs	r3, r2
 800f074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f023 0302 	bic.w	r3, r3, #2
 800f07c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	697a      	ldr	r2, [r7, #20]
 800f084:	4313      	orrs	r3, r2
 800f086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a20      	ldr	r2, [pc, #128]	; (800f10c <TIM_OC1_SetConfig+0xd8>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d003      	beq.n	800f098 <TIM_OC1_SetConfig+0x64>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a1f      	ldr	r2, [pc, #124]	; (800f110 <TIM_OC1_SetConfig+0xdc>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d10c      	bne.n	800f0b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	f023 0308 	bic.w	r3, r3, #8
 800f09e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f023 0304 	bic.w	r3, r3, #4
 800f0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a15      	ldr	r2, [pc, #84]	; (800f10c <TIM_OC1_SetConfig+0xd8>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d003      	beq.n	800f0c2 <TIM_OC1_SetConfig+0x8e>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a14      	ldr	r2, [pc, #80]	; (800f110 <TIM_OC1_SetConfig+0xdc>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d111      	bne.n	800f0e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	699b      	ldr	r3, [r3, #24]
 800f0e0:	693a      	ldr	r2, [r7, #16]
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	697a      	ldr	r2, [r7, #20]
 800f0fe:	621a      	str	r2, [r3, #32]
}
 800f100:	bf00      	nop
 800f102:	371c      	adds	r7, #28
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	40010000 	.word	0x40010000
 800f110:	40010400 	.word	0x40010400

0800f114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f114:	b480      	push	{r7}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	f023 0210 	bic.w	r2, r3, #16
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f14a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	4313      	orrs	r3, r2
 800f156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	f023 0320 	bic.w	r3, r3, #32
 800f15e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	011b      	lsls	r3, r3, #4
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	4313      	orrs	r3, r2
 800f16a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a22      	ldr	r2, [pc, #136]	; (800f1f8 <TIM_OC2_SetConfig+0xe4>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d003      	beq.n	800f17c <TIM_OC2_SetConfig+0x68>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a21      	ldr	r2, [pc, #132]	; (800f1fc <TIM_OC2_SetConfig+0xe8>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d10d      	bne.n	800f198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	011b      	lsls	r3, r3, #4
 800f18a:	697a      	ldr	r2, [r7, #20]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a17      	ldr	r2, [pc, #92]	; (800f1f8 <TIM_OC2_SetConfig+0xe4>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d003      	beq.n	800f1a8 <TIM_OC2_SetConfig+0x94>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a16      	ldr	r2, [pc, #88]	; (800f1fc <TIM_OC2_SetConfig+0xe8>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d113      	bne.n	800f1d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	697a      	ldr	r2, [r7, #20]
 800f1e8:	621a      	str	r2, [r3, #32]
}
 800f1ea:	bf00      	nop
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	40010000 	.word	0x40010000
 800f1fc:	40010400 	.word	0x40010400

0800f200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f200:	b480      	push	{r7}
 800f202:	b087      	sub	sp, #28
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f023 0303 	bic.w	r3, r3, #3
 800f236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	4313      	orrs	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	021b      	lsls	r3, r3, #8
 800f250:	697a      	ldr	r2, [r7, #20]
 800f252:	4313      	orrs	r3, r2
 800f254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a21      	ldr	r2, [pc, #132]	; (800f2e0 <TIM_OC3_SetConfig+0xe0>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d003      	beq.n	800f266 <TIM_OC3_SetConfig+0x66>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a20      	ldr	r2, [pc, #128]	; (800f2e4 <TIM_OC3_SetConfig+0xe4>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d10d      	bne.n	800f282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f26c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	021b      	lsls	r3, r3, #8
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a16      	ldr	r2, [pc, #88]	; (800f2e0 <TIM_OC3_SetConfig+0xe0>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d003      	beq.n	800f292 <TIM_OC3_SetConfig+0x92>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4a15      	ldr	r2, [pc, #84]	; (800f2e4 <TIM_OC3_SetConfig+0xe4>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d113      	bne.n	800f2ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	695b      	ldr	r3, [r3, #20]
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	693a      	ldr	r2, [r7, #16]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	685a      	ldr	r2, [r3, #4]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	697a      	ldr	r2, [r7, #20]
 800f2d2:	621a      	str	r2, [r3, #32]
}
 800f2d4:	bf00      	nop
 800f2d6:	371c      	adds	r7, #28
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr
 800f2e0:	40010000 	.word	0x40010000
 800f2e4:	40010400 	.word	0x40010400

0800f2e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a1b      	ldr	r3, [r3, #32]
 800f2f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f31e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	021b      	lsls	r3, r3, #8
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	4313      	orrs	r3, r2
 800f32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	031b      	lsls	r3, r3, #12
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a12      	ldr	r2, [pc, #72]	; (800f38c <TIM_OC4_SetConfig+0xa4>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d003      	beq.n	800f350 <TIM_OC4_SetConfig+0x68>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a11      	ldr	r2, [pc, #68]	; (800f390 <TIM_OC4_SetConfig+0xa8>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d109      	bne.n	800f364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	695b      	ldr	r3, [r3, #20]
 800f35c:	019b      	lsls	r3, r3, #6
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	4313      	orrs	r3, r2
 800f362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	621a      	str	r2, [r3, #32]
}
 800f37e:	bf00      	nop
 800f380:	371c      	adds	r7, #28
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	40010000 	.word	0x40010000
 800f390:	40010400 	.word	0x40010400

0800f394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f394:	b480      	push	{r7}
 800f396:	b087      	sub	sp, #28
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	f003 031f 	and.w	r3, r3, #31
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6a1a      	ldr	r2, [r3, #32]
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	43db      	mvns	r3, r3
 800f3b6:	401a      	ands	r2, r3
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6a1a      	ldr	r2, [r3, #32]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f003 031f 	and.w	r3, r3, #31
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3cc:	431a      	orrs	r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	621a      	str	r2, [r3, #32]
}
 800f3d2:	bf00      	nop
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
	...

0800f3e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d101      	bne.n	800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3f4:	2302      	movs	r3, #2
 800f3f6:	e05a      	b.n	800f4ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2202      	movs	r2, #2
 800f404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f41e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a21      	ldr	r2, [pc, #132]	; (800f4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d022      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f444:	d01d      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a1d      	ldr	r2, [pc, #116]	; (800f4c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d018      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a1b      	ldr	r2, [pc, #108]	; (800f4c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d013      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a1a      	ldr	r2, [pc, #104]	; (800f4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d00e      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a18      	ldr	r2, [pc, #96]	; (800f4cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d009      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a17      	ldr	r2, [pc, #92]	; (800f4d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d004      	beq.n	800f482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a15      	ldr	r2, [pc, #84]	; (800f4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d10c      	bne.n	800f49c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	4313      	orrs	r3, r2
 800f492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68ba      	ldr	r2, [r7, #8]
 800f49a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3714      	adds	r7, #20
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	40010000 	.word	0x40010000
 800f4c0:	40000400 	.word	0x40000400
 800f4c4:	40000800 	.word	0x40000800
 800f4c8:	40000c00 	.word	0x40000c00
 800f4cc:	40010400 	.word	0x40010400
 800f4d0:	40014000 	.word	0x40014000
 800f4d4:	40001800 	.word	0x40001800

0800f4d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d101      	bne.n	800f4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	e03d      	b.n	800f570 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	4313      	orrs	r3, r2
 800f508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	4313      	orrs	r3, r2
 800f516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	4313      	orrs	r3, r2
 800f524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4313      	orrs	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	4313      	orrs	r3, r2
 800f540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	4313      	orrs	r3, r2
 800f54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	69db      	ldr	r3, [r3, #28]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f584:	bf00      	nop
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f598:	bf00      	nop
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e03f      	b.n	800f636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7f7 ff08 	bl	80073e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2224      	movs	r2, #36	; 0x24
 800f5d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68da      	ldr	r2, [r3, #12]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f5e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f829 	bl	800f640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	691a      	ldr	r2, [r3, #16]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f5fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	695a      	ldr	r2, [r3, #20]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f60c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68da      	ldr	r2, [r3, #12]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f61c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2220      	movs	r2, #32
 800f628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2220      	movs	r2, #32
 800f630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	b085      	sub	sp, #20
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	68da      	ldr	r2, [r3, #12]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	430a      	orrs	r2, r1
 800f65e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689a      	ldr	r2, [r3, #8]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	691b      	ldr	r3, [r3, #16]
 800f668:	431a      	orrs	r2, r3
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	695b      	ldr	r3, [r3, #20]
 800f66e:	431a      	orrs	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	69db      	ldr	r3, [r3, #28]
 800f674:	4313      	orrs	r3, r2
 800f676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f682:	f023 030c 	bic.w	r3, r3, #12
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	6812      	ldr	r2, [r2, #0]
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	430b      	orrs	r3, r1
 800f68e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	695b      	ldr	r3, [r3, #20]
 800f696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	699a      	ldr	r2, [r3, #24]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	430a      	orrs	r2, r1
 800f6a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6ae:	f040 818b 	bne.w	800f9c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4ac1      	ldr	r2, [pc, #772]	; (800f9bc <UART_SetConfig+0x37c>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d005      	beq.n	800f6c8 <UART_SetConfig+0x88>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4abf      	ldr	r2, [pc, #764]	; (800f9c0 <UART_SetConfig+0x380>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	f040 80bd 	bne.w	800f842 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f6c8:	f7fc fbcc 	bl	800be64 <HAL_RCC_GetPCLK2Freq>
 800f6cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	461d      	mov	r5, r3
 800f6d2:	f04f 0600 	mov.w	r6, #0
 800f6d6:	46a8      	mov	r8, r5
 800f6d8:	46b1      	mov	r9, r6
 800f6da:	eb18 0308 	adds.w	r3, r8, r8
 800f6de:	eb49 0409 	adc.w	r4, r9, r9
 800f6e2:	4698      	mov	r8, r3
 800f6e4:	46a1      	mov	r9, r4
 800f6e6:	eb18 0805 	adds.w	r8, r8, r5
 800f6ea:	eb49 0906 	adc.w	r9, r9, r6
 800f6ee:	f04f 0100 	mov.w	r1, #0
 800f6f2:	f04f 0200 	mov.w	r2, #0
 800f6f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f6fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f6fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f702:	4688      	mov	r8, r1
 800f704:	4691      	mov	r9, r2
 800f706:	eb18 0005 	adds.w	r0, r8, r5
 800f70a:	eb49 0106 	adc.w	r1, r9, r6
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	461d      	mov	r5, r3
 800f714:	f04f 0600 	mov.w	r6, #0
 800f718:	196b      	adds	r3, r5, r5
 800f71a:	eb46 0406 	adc.w	r4, r6, r6
 800f71e:	461a      	mov	r2, r3
 800f720:	4623      	mov	r3, r4
 800f722:	f7f1 fac9 	bl	8000cb8 <__aeabi_uldivmod>
 800f726:	4603      	mov	r3, r0
 800f728:	460c      	mov	r4, r1
 800f72a:	461a      	mov	r2, r3
 800f72c:	4ba5      	ldr	r3, [pc, #660]	; (800f9c4 <UART_SetConfig+0x384>)
 800f72e:	fba3 2302 	umull	r2, r3, r3, r2
 800f732:	095b      	lsrs	r3, r3, #5
 800f734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	461d      	mov	r5, r3
 800f73c:	f04f 0600 	mov.w	r6, #0
 800f740:	46a9      	mov	r9, r5
 800f742:	46b2      	mov	sl, r6
 800f744:	eb19 0309 	adds.w	r3, r9, r9
 800f748:	eb4a 040a 	adc.w	r4, sl, sl
 800f74c:	4699      	mov	r9, r3
 800f74e:	46a2      	mov	sl, r4
 800f750:	eb19 0905 	adds.w	r9, r9, r5
 800f754:	eb4a 0a06 	adc.w	sl, sl, r6
 800f758:	f04f 0100 	mov.w	r1, #0
 800f75c:	f04f 0200 	mov.w	r2, #0
 800f760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f76c:	4689      	mov	r9, r1
 800f76e:	4692      	mov	sl, r2
 800f770:	eb19 0005 	adds.w	r0, r9, r5
 800f774:	eb4a 0106 	adc.w	r1, sl, r6
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	461d      	mov	r5, r3
 800f77e:	f04f 0600 	mov.w	r6, #0
 800f782:	196b      	adds	r3, r5, r5
 800f784:	eb46 0406 	adc.w	r4, r6, r6
 800f788:	461a      	mov	r2, r3
 800f78a:	4623      	mov	r3, r4
 800f78c:	f7f1 fa94 	bl	8000cb8 <__aeabi_uldivmod>
 800f790:	4603      	mov	r3, r0
 800f792:	460c      	mov	r4, r1
 800f794:	461a      	mov	r2, r3
 800f796:	4b8b      	ldr	r3, [pc, #556]	; (800f9c4 <UART_SetConfig+0x384>)
 800f798:	fba3 1302 	umull	r1, r3, r3, r2
 800f79c:	095b      	lsrs	r3, r3, #5
 800f79e:	2164      	movs	r1, #100	; 0x64
 800f7a0:	fb01 f303 	mul.w	r3, r1, r3
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	00db      	lsls	r3, r3, #3
 800f7a8:	3332      	adds	r3, #50	; 0x32
 800f7aa:	4a86      	ldr	r2, [pc, #536]	; (800f9c4 <UART_SetConfig+0x384>)
 800f7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800f7b0:	095b      	lsrs	r3, r3, #5
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f7b8:	4498      	add	r8, r3
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	461d      	mov	r5, r3
 800f7be:	f04f 0600 	mov.w	r6, #0
 800f7c2:	46a9      	mov	r9, r5
 800f7c4:	46b2      	mov	sl, r6
 800f7c6:	eb19 0309 	adds.w	r3, r9, r9
 800f7ca:	eb4a 040a 	adc.w	r4, sl, sl
 800f7ce:	4699      	mov	r9, r3
 800f7d0:	46a2      	mov	sl, r4
 800f7d2:	eb19 0905 	adds.w	r9, r9, r5
 800f7d6:	eb4a 0a06 	adc.w	sl, sl, r6
 800f7da:	f04f 0100 	mov.w	r1, #0
 800f7de:	f04f 0200 	mov.w	r2, #0
 800f7e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f7e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f7ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f7ee:	4689      	mov	r9, r1
 800f7f0:	4692      	mov	sl, r2
 800f7f2:	eb19 0005 	adds.w	r0, r9, r5
 800f7f6:	eb4a 0106 	adc.w	r1, sl, r6
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	461d      	mov	r5, r3
 800f800:	f04f 0600 	mov.w	r6, #0
 800f804:	196b      	adds	r3, r5, r5
 800f806:	eb46 0406 	adc.w	r4, r6, r6
 800f80a:	461a      	mov	r2, r3
 800f80c:	4623      	mov	r3, r4
 800f80e:	f7f1 fa53 	bl	8000cb8 <__aeabi_uldivmod>
 800f812:	4603      	mov	r3, r0
 800f814:	460c      	mov	r4, r1
 800f816:	461a      	mov	r2, r3
 800f818:	4b6a      	ldr	r3, [pc, #424]	; (800f9c4 <UART_SetConfig+0x384>)
 800f81a:	fba3 1302 	umull	r1, r3, r3, r2
 800f81e:	095b      	lsrs	r3, r3, #5
 800f820:	2164      	movs	r1, #100	; 0x64
 800f822:	fb01 f303 	mul.w	r3, r1, r3
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	00db      	lsls	r3, r3, #3
 800f82a:	3332      	adds	r3, #50	; 0x32
 800f82c:	4a65      	ldr	r2, [pc, #404]	; (800f9c4 <UART_SetConfig+0x384>)
 800f82e:	fba2 2303 	umull	r2, r3, r2, r3
 800f832:	095b      	lsrs	r3, r3, #5
 800f834:	f003 0207 	and.w	r2, r3, #7
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4442      	add	r2, r8
 800f83e:	609a      	str	r2, [r3, #8]
 800f840:	e26f      	b.n	800fd22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f842:	f7fc fafb 	bl	800be3c <HAL_RCC_GetPCLK1Freq>
 800f846:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	461d      	mov	r5, r3
 800f84c:	f04f 0600 	mov.w	r6, #0
 800f850:	46a8      	mov	r8, r5
 800f852:	46b1      	mov	r9, r6
 800f854:	eb18 0308 	adds.w	r3, r8, r8
 800f858:	eb49 0409 	adc.w	r4, r9, r9
 800f85c:	4698      	mov	r8, r3
 800f85e:	46a1      	mov	r9, r4
 800f860:	eb18 0805 	adds.w	r8, r8, r5
 800f864:	eb49 0906 	adc.w	r9, r9, r6
 800f868:	f04f 0100 	mov.w	r1, #0
 800f86c:	f04f 0200 	mov.w	r2, #0
 800f870:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f874:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f878:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f87c:	4688      	mov	r8, r1
 800f87e:	4691      	mov	r9, r2
 800f880:	eb18 0005 	adds.w	r0, r8, r5
 800f884:	eb49 0106 	adc.w	r1, r9, r6
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	461d      	mov	r5, r3
 800f88e:	f04f 0600 	mov.w	r6, #0
 800f892:	196b      	adds	r3, r5, r5
 800f894:	eb46 0406 	adc.w	r4, r6, r6
 800f898:	461a      	mov	r2, r3
 800f89a:	4623      	mov	r3, r4
 800f89c:	f7f1 fa0c 	bl	8000cb8 <__aeabi_uldivmod>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b47      	ldr	r3, [pc, #284]	; (800f9c4 <UART_SetConfig+0x384>)
 800f8a8:	fba3 2302 	umull	r2, r3, r3, r2
 800f8ac:	095b      	lsrs	r3, r3, #5
 800f8ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	461d      	mov	r5, r3
 800f8b6:	f04f 0600 	mov.w	r6, #0
 800f8ba:	46a9      	mov	r9, r5
 800f8bc:	46b2      	mov	sl, r6
 800f8be:	eb19 0309 	adds.w	r3, r9, r9
 800f8c2:	eb4a 040a 	adc.w	r4, sl, sl
 800f8c6:	4699      	mov	r9, r3
 800f8c8:	46a2      	mov	sl, r4
 800f8ca:	eb19 0905 	adds.w	r9, r9, r5
 800f8ce:	eb4a 0a06 	adc.w	sl, sl, r6
 800f8d2:	f04f 0100 	mov.w	r1, #0
 800f8d6:	f04f 0200 	mov.w	r2, #0
 800f8da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f8de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f8e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f8e6:	4689      	mov	r9, r1
 800f8e8:	4692      	mov	sl, r2
 800f8ea:	eb19 0005 	adds.w	r0, r9, r5
 800f8ee:	eb4a 0106 	adc.w	r1, sl, r6
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	461d      	mov	r5, r3
 800f8f8:	f04f 0600 	mov.w	r6, #0
 800f8fc:	196b      	adds	r3, r5, r5
 800f8fe:	eb46 0406 	adc.w	r4, r6, r6
 800f902:	461a      	mov	r2, r3
 800f904:	4623      	mov	r3, r4
 800f906:	f7f1 f9d7 	bl	8000cb8 <__aeabi_uldivmod>
 800f90a:	4603      	mov	r3, r0
 800f90c:	460c      	mov	r4, r1
 800f90e:	461a      	mov	r2, r3
 800f910:	4b2c      	ldr	r3, [pc, #176]	; (800f9c4 <UART_SetConfig+0x384>)
 800f912:	fba3 1302 	umull	r1, r3, r3, r2
 800f916:	095b      	lsrs	r3, r3, #5
 800f918:	2164      	movs	r1, #100	; 0x64
 800f91a:	fb01 f303 	mul.w	r3, r1, r3
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	3332      	adds	r3, #50	; 0x32
 800f924:	4a27      	ldr	r2, [pc, #156]	; (800f9c4 <UART_SetConfig+0x384>)
 800f926:	fba2 2303 	umull	r2, r3, r2, r3
 800f92a:	095b      	lsrs	r3, r3, #5
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f932:	4498      	add	r8, r3
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	461d      	mov	r5, r3
 800f938:	f04f 0600 	mov.w	r6, #0
 800f93c:	46a9      	mov	r9, r5
 800f93e:	46b2      	mov	sl, r6
 800f940:	eb19 0309 	adds.w	r3, r9, r9
 800f944:	eb4a 040a 	adc.w	r4, sl, sl
 800f948:	4699      	mov	r9, r3
 800f94a:	46a2      	mov	sl, r4
 800f94c:	eb19 0905 	adds.w	r9, r9, r5
 800f950:	eb4a 0a06 	adc.w	sl, sl, r6
 800f954:	f04f 0100 	mov.w	r1, #0
 800f958:	f04f 0200 	mov.w	r2, #0
 800f95c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f968:	4689      	mov	r9, r1
 800f96a:	4692      	mov	sl, r2
 800f96c:	eb19 0005 	adds.w	r0, r9, r5
 800f970:	eb4a 0106 	adc.w	r1, sl, r6
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	461d      	mov	r5, r3
 800f97a:	f04f 0600 	mov.w	r6, #0
 800f97e:	196b      	adds	r3, r5, r5
 800f980:	eb46 0406 	adc.w	r4, r6, r6
 800f984:	461a      	mov	r2, r3
 800f986:	4623      	mov	r3, r4
 800f988:	f7f1 f996 	bl	8000cb8 <__aeabi_uldivmod>
 800f98c:	4603      	mov	r3, r0
 800f98e:	460c      	mov	r4, r1
 800f990:	461a      	mov	r2, r3
 800f992:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <UART_SetConfig+0x384>)
 800f994:	fba3 1302 	umull	r1, r3, r3, r2
 800f998:	095b      	lsrs	r3, r3, #5
 800f99a:	2164      	movs	r1, #100	; 0x64
 800f99c:	fb01 f303 	mul.w	r3, r1, r3
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	3332      	adds	r3, #50	; 0x32
 800f9a6:	4a07      	ldr	r2, [pc, #28]	; (800f9c4 <UART_SetConfig+0x384>)
 800f9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ac:	095b      	lsrs	r3, r3, #5
 800f9ae:	f003 0207 	and.w	r2, r3, #7
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4442      	add	r2, r8
 800f9b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f9ba:	e1b2      	b.n	800fd22 <UART_SetConfig+0x6e2>
 800f9bc:	40011000 	.word	0x40011000
 800f9c0:	40011400 	.word	0x40011400
 800f9c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4ad7      	ldr	r2, [pc, #860]	; (800fd2c <UART_SetConfig+0x6ec>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d005      	beq.n	800f9de <UART_SetConfig+0x39e>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4ad6      	ldr	r2, [pc, #856]	; (800fd30 <UART_SetConfig+0x6f0>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	f040 80d1 	bne.w	800fb80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f9de:	f7fc fa41 	bl	800be64 <HAL_RCC_GetPCLK2Freq>
 800f9e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	469a      	mov	sl, r3
 800f9e8:	f04f 0b00 	mov.w	fp, #0
 800f9ec:	46d0      	mov	r8, sl
 800f9ee:	46d9      	mov	r9, fp
 800f9f0:	eb18 0308 	adds.w	r3, r8, r8
 800f9f4:	eb49 0409 	adc.w	r4, r9, r9
 800f9f8:	4698      	mov	r8, r3
 800f9fa:	46a1      	mov	r9, r4
 800f9fc:	eb18 080a 	adds.w	r8, r8, sl
 800fa00:	eb49 090b 	adc.w	r9, r9, fp
 800fa04:	f04f 0100 	mov.w	r1, #0
 800fa08:	f04f 0200 	mov.w	r2, #0
 800fa0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa18:	4688      	mov	r8, r1
 800fa1a:	4691      	mov	r9, r2
 800fa1c:	eb1a 0508 	adds.w	r5, sl, r8
 800fa20:	eb4b 0609 	adc.w	r6, fp, r9
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	f04f 0200 	mov.w	r2, #0
 800fa2e:	f04f 0300 	mov.w	r3, #0
 800fa32:	f04f 0400 	mov.w	r4, #0
 800fa36:	0094      	lsls	r4, r2, #2
 800fa38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa3c:	008b      	lsls	r3, r1, #2
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4623      	mov	r3, r4
 800fa42:	4628      	mov	r0, r5
 800fa44:	4631      	mov	r1, r6
 800fa46:	f7f1 f937 	bl	8000cb8 <__aeabi_uldivmod>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4bb8      	ldr	r3, [pc, #736]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fa52:	fba3 2302 	umull	r2, r3, r3, r2
 800fa56:	095b      	lsrs	r3, r3, #5
 800fa58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	469b      	mov	fp, r3
 800fa60:	f04f 0c00 	mov.w	ip, #0
 800fa64:	46d9      	mov	r9, fp
 800fa66:	46e2      	mov	sl, ip
 800fa68:	eb19 0309 	adds.w	r3, r9, r9
 800fa6c:	eb4a 040a 	adc.w	r4, sl, sl
 800fa70:	4699      	mov	r9, r3
 800fa72:	46a2      	mov	sl, r4
 800fa74:	eb19 090b 	adds.w	r9, r9, fp
 800fa78:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fa7c:	f04f 0100 	mov.w	r1, #0
 800fa80:	f04f 0200 	mov.w	r2, #0
 800fa84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa90:	4689      	mov	r9, r1
 800fa92:	4692      	mov	sl, r2
 800fa94:	eb1b 0509 	adds.w	r5, fp, r9
 800fa98:	eb4c 060a 	adc.w	r6, ip, sl
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	4619      	mov	r1, r3
 800faa2:	f04f 0200 	mov.w	r2, #0
 800faa6:	f04f 0300 	mov.w	r3, #0
 800faaa:	f04f 0400 	mov.w	r4, #0
 800faae:	0094      	lsls	r4, r2, #2
 800fab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fab4:	008b      	lsls	r3, r1, #2
 800fab6:	461a      	mov	r2, r3
 800fab8:	4623      	mov	r3, r4
 800faba:	4628      	mov	r0, r5
 800fabc:	4631      	mov	r1, r6
 800fabe:	f7f1 f8fb 	bl	8000cb8 <__aeabi_uldivmod>
 800fac2:	4603      	mov	r3, r0
 800fac4:	460c      	mov	r4, r1
 800fac6:	461a      	mov	r2, r3
 800fac8:	4b9a      	ldr	r3, [pc, #616]	; (800fd34 <UART_SetConfig+0x6f4>)
 800faca:	fba3 1302 	umull	r1, r3, r3, r2
 800face:	095b      	lsrs	r3, r3, #5
 800fad0:	2164      	movs	r1, #100	; 0x64
 800fad2:	fb01 f303 	mul.w	r3, r1, r3
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	011b      	lsls	r3, r3, #4
 800fada:	3332      	adds	r3, #50	; 0x32
 800fadc:	4a95      	ldr	r2, [pc, #596]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fade:	fba2 2303 	umull	r2, r3, r2, r3
 800fae2:	095b      	lsrs	r3, r3, #5
 800fae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fae8:	4498      	add	r8, r3
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	469b      	mov	fp, r3
 800faee:	f04f 0c00 	mov.w	ip, #0
 800faf2:	46d9      	mov	r9, fp
 800faf4:	46e2      	mov	sl, ip
 800faf6:	eb19 0309 	adds.w	r3, r9, r9
 800fafa:	eb4a 040a 	adc.w	r4, sl, sl
 800fafe:	4699      	mov	r9, r3
 800fb00:	46a2      	mov	sl, r4
 800fb02:	eb19 090b 	adds.w	r9, r9, fp
 800fb06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb0a:	f04f 0100 	mov.w	r1, #0
 800fb0e:	f04f 0200 	mov.w	r2, #0
 800fb12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb1e:	4689      	mov	r9, r1
 800fb20:	4692      	mov	sl, r2
 800fb22:	eb1b 0509 	adds.w	r5, fp, r9
 800fb26:	eb4c 060a 	adc.w	r6, ip, sl
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	f04f 0200 	mov.w	r2, #0
 800fb34:	f04f 0300 	mov.w	r3, #0
 800fb38:	f04f 0400 	mov.w	r4, #0
 800fb3c:	0094      	lsls	r4, r2, #2
 800fb3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb42:	008b      	lsls	r3, r1, #2
 800fb44:	461a      	mov	r2, r3
 800fb46:	4623      	mov	r3, r4
 800fb48:	4628      	mov	r0, r5
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	f7f1 f8b4 	bl	8000cb8 <__aeabi_uldivmod>
 800fb50:	4603      	mov	r3, r0
 800fb52:	460c      	mov	r4, r1
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b77      	ldr	r3, [pc, #476]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fb58:	fba3 1302 	umull	r1, r3, r3, r2
 800fb5c:	095b      	lsrs	r3, r3, #5
 800fb5e:	2164      	movs	r1, #100	; 0x64
 800fb60:	fb01 f303 	mul.w	r3, r1, r3
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	011b      	lsls	r3, r3, #4
 800fb68:	3332      	adds	r3, #50	; 0x32
 800fb6a:	4a72      	ldr	r2, [pc, #456]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fb6c:	fba2 2303 	umull	r2, r3, r2, r3
 800fb70:	095b      	lsrs	r3, r3, #5
 800fb72:	f003 020f 	and.w	r2, r3, #15
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4442      	add	r2, r8
 800fb7c:	609a      	str	r2, [r3, #8]
 800fb7e:	e0d0      	b.n	800fd22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fb80:	f7fc f95c 	bl	800be3c <HAL_RCC_GetPCLK1Freq>
 800fb84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	469a      	mov	sl, r3
 800fb8a:	f04f 0b00 	mov.w	fp, #0
 800fb8e:	46d0      	mov	r8, sl
 800fb90:	46d9      	mov	r9, fp
 800fb92:	eb18 0308 	adds.w	r3, r8, r8
 800fb96:	eb49 0409 	adc.w	r4, r9, r9
 800fb9a:	4698      	mov	r8, r3
 800fb9c:	46a1      	mov	r9, r4
 800fb9e:	eb18 080a 	adds.w	r8, r8, sl
 800fba2:	eb49 090b 	adc.w	r9, r9, fp
 800fba6:	f04f 0100 	mov.w	r1, #0
 800fbaa:	f04f 0200 	mov.w	r2, #0
 800fbae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fbb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fbb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fbba:	4688      	mov	r8, r1
 800fbbc:	4691      	mov	r9, r2
 800fbbe:	eb1a 0508 	adds.w	r5, sl, r8
 800fbc2:	eb4b 0609 	adc.w	r6, fp, r9
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	f04f 0200 	mov.w	r2, #0
 800fbd0:	f04f 0300 	mov.w	r3, #0
 800fbd4:	f04f 0400 	mov.w	r4, #0
 800fbd8:	0094      	lsls	r4, r2, #2
 800fbda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fbde:	008b      	lsls	r3, r1, #2
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	4623      	mov	r3, r4
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	f7f1 f866 	bl	8000cb8 <__aeabi_uldivmod>
 800fbec:	4603      	mov	r3, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4b50      	ldr	r3, [pc, #320]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fbf4:	fba3 2302 	umull	r2, r3, r3, r2
 800fbf8:	095b      	lsrs	r3, r3, #5
 800fbfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	469b      	mov	fp, r3
 800fc02:	f04f 0c00 	mov.w	ip, #0
 800fc06:	46d9      	mov	r9, fp
 800fc08:	46e2      	mov	sl, ip
 800fc0a:	eb19 0309 	adds.w	r3, r9, r9
 800fc0e:	eb4a 040a 	adc.w	r4, sl, sl
 800fc12:	4699      	mov	r9, r3
 800fc14:	46a2      	mov	sl, r4
 800fc16:	eb19 090b 	adds.w	r9, r9, fp
 800fc1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc1e:	f04f 0100 	mov.w	r1, #0
 800fc22:	f04f 0200 	mov.w	r2, #0
 800fc26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc32:	4689      	mov	r9, r1
 800fc34:	4692      	mov	sl, r2
 800fc36:	eb1b 0509 	adds.w	r5, fp, r9
 800fc3a:	eb4c 060a 	adc.w	r6, ip, sl
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	4619      	mov	r1, r3
 800fc44:	f04f 0200 	mov.w	r2, #0
 800fc48:	f04f 0300 	mov.w	r3, #0
 800fc4c:	f04f 0400 	mov.w	r4, #0
 800fc50:	0094      	lsls	r4, r2, #2
 800fc52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc56:	008b      	lsls	r3, r1, #2
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4623      	mov	r3, r4
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	4631      	mov	r1, r6
 800fc60:	f7f1 f82a 	bl	8000cb8 <__aeabi_uldivmod>
 800fc64:	4603      	mov	r3, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4b32      	ldr	r3, [pc, #200]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800fc70:	095b      	lsrs	r3, r3, #5
 800fc72:	2164      	movs	r1, #100	; 0x64
 800fc74:	fb01 f303 	mul.w	r3, r1, r3
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	011b      	lsls	r3, r3, #4
 800fc7c:	3332      	adds	r3, #50	; 0x32
 800fc7e:	4a2d      	ldr	r2, [pc, #180]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fc80:	fba2 2303 	umull	r2, r3, r2, r3
 800fc84:	095b      	lsrs	r3, r3, #5
 800fc86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc8a:	4498      	add	r8, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	469b      	mov	fp, r3
 800fc90:	f04f 0c00 	mov.w	ip, #0
 800fc94:	46d9      	mov	r9, fp
 800fc96:	46e2      	mov	sl, ip
 800fc98:	eb19 0309 	adds.w	r3, r9, r9
 800fc9c:	eb4a 040a 	adc.w	r4, sl, sl
 800fca0:	4699      	mov	r9, r3
 800fca2:	46a2      	mov	sl, r4
 800fca4:	eb19 090b 	adds.w	r9, r9, fp
 800fca8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fcac:	f04f 0100 	mov.w	r1, #0
 800fcb0:	f04f 0200 	mov.w	r2, #0
 800fcb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcc0:	4689      	mov	r9, r1
 800fcc2:	4692      	mov	sl, r2
 800fcc4:	eb1b 0509 	adds.w	r5, fp, r9
 800fcc8:	eb4c 060a 	adc.w	r6, ip, sl
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	f04f 0300 	mov.w	r3, #0
 800fcda:	f04f 0400 	mov.w	r4, #0
 800fcde:	0094      	lsls	r4, r2, #2
 800fce0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fce4:	008b      	lsls	r3, r1, #2
 800fce6:	461a      	mov	r2, r3
 800fce8:	4623      	mov	r3, r4
 800fcea:	4628      	mov	r0, r5
 800fcec:	4631      	mov	r1, r6
 800fcee:	f7f0 ffe3 	bl	8000cb8 <__aeabi_uldivmod>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4b0e      	ldr	r3, [pc, #56]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fcfa:	fba3 1302 	umull	r1, r3, r3, r2
 800fcfe:	095b      	lsrs	r3, r3, #5
 800fd00:	2164      	movs	r1, #100	; 0x64
 800fd02:	fb01 f303 	mul.w	r3, r1, r3
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	011b      	lsls	r3, r3, #4
 800fd0a:	3332      	adds	r3, #50	; 0x32
 800fd0c:	4a09      	ldr	r2, [pc, #36]	; (800fd34 <UART_SetConfig+0x6f4>)
 800fd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd12:	095b      	lsrs	r3, r3, #5
 800fd14:	f003 020f 	and.w	r2, r3, #15
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4442      	add	r2, r8
 800fd1e:	609a      	str	r2, [r3, #8]
}
 800fd20:	e7ff      	b.n	800fd22 <UART_SetConfig+0x6e2>
 800fd22:	bf00      	nop
 800fd24:	3714      	adds	r7, #20
 800fd26:	46bd      	mov	sp, r7
 800fd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2c:	40011000 	.word	0x40011000
 800fd30:	40011400 	.word	0x40011400
 800fd34:	51eb851f 	.word	0x51eb851f

0800fd38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fd38:	b084      	sub	sp, #16
 800fd3a:	b480      	push	{r7}
 800fd3c:	b085      	sub	sp, #20
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	f107 001c 	add.w	r0, r7, #28
 800fd46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fd4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fd50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fd52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fd56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fd5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fd5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800fd62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800fd72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	431a      	orrs	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	b004      	add	sp, #16
 800fd8c:	4770      	bx	lr

0800fd8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fd8e:	b480      	push	{r7}
 800fd90:	b083      	sub	sp, #12
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	370c      	adds	r7, #12
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b082      	sub	sp, #8
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2203      	movs	r2, #3
 800fdd6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800fdd8:	2002      	movs	r0, #2
 800fdda:	f7f9 fbdd 	bl	8009598 <HAL_Delay>
  
  return HAL_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f003 0303 	and.w	r3, r3, #3
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fe28:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fe2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fe3e:	f023 030f 	bic.w	r3, r3, #15
 800fe42:	68fa      	ldr	r2, [r7, #12]
 800fe44:	431a      	orrs	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	b2db      	uxtb	r3, r3
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	370c      	adds	r7, #12
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800fe72:	b480      	push	{r7}
 800fe74:	b085      	sub	sp, #20
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	3314      	adds	r3, #20
 800fe80:	461a      	mov	r2, r3
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	4413      	add	r3, r2
 800fe86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
}  
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3714      	adds	r7, #20
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800febe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fec4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800feca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	4313      	orrs	r3, r2
 800fed0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	431a      	orrs	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fee2:	2300      	movs	r3, #0

}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3714      	adds	r7, #20
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fefe:	2310      	movs	r3, #16
 800ff00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff02:	2340      	movs	r3, #64	; 0x40
 800ff04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff06:	2300      	movs	r3, #0
 800ff08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff10:	f107 0308 	add.w	r3, r7, #8
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff ff74 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ff1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff20:	2110      	movs	r1, #16
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 fa40 	bl	80103a8 <SDMMC_GetCmdResp1>
 800ff28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff2a:	69fb      	ldr	r3, [r7, #28]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3720      	adds	r7, #32
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b088      	sub	sp, #32
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ff42:	2311      	movs	r3, #17
 800ff44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff46:	2340      	movs	r3, #64	; 0x40
 800ff48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff54:	f107 0308 	add.w	r3, r7, #8
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff ff52 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ff60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff64:	2111      	movs	r1, #17
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 fa1e 	bl	80103a8 <SDMMC_GetCmdResp1>
 800ff6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff6e:	69fb      	ldr	r3, [r7, #28]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b088      	sub	sp, #32
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ff86:	2312      	movs	r3, #18
 800ff88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff8a:	2340      	movs	r3, #64	; 0x40
 800ff8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff98:	f107 0308 	add.w	r3, r7, #8
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff ff30 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ffa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffa8:	2112      	movs	r1, #18
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f9fc 	bl	80103a8 <SDMMC_GetCmdResp1>
 800ffb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffb2:	69fb      	ldr	r3, [r7, #28]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b088      	sub	sp, #32
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ffca:	2318      	movs	r3, #24
 800ffcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ffce:	2340      	movs	r3, #64	; 0x40
 800ffd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ffd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ffdc:	f107 0308 	add.w	r3, r7, #8
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff ff0e 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ffe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffec:	2118      	movs	r1, #24
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 f9da 	bl	80103a8 <SDMMC_GetCmdResp1>
 800fff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fff6:	69fb      	ldr	r3, [r7, #28]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3720      	adds	r7, #32
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b088      	sub	sp, #32
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801000e:	2319      	movs	r3, #25
 8010010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010012:	2340      	movs	r3, #64	; 0x40
 8010014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801001a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801001e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7ff feec 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801002c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010030:	2119      	movs	r1, #25
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f9b8 	bl	80103a8 <SDMMC_GetCmdResp1>
 8010038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801003a:	69fb      	ldr	r3, [r7, #28]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3720      	adds	r7, #32
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b088      	sub	sp, #32
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801004c:	2300      	movs	r3, #0
 801004e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010050:	230c      	movs	r3, #12
 8010052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010054:	2340      	movs	r3, #64	; 0x40
 8010056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010058:	2300      	movs	r3, #0
 801005a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801005c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010060:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010062:	f107 0308 	add.w	r3, r7, #8
 8010066:	4619      	mov	r1, r3
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff fecb 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801006e:	4a05      	ldr	r2, [pc, #20]	; (8010084 <SDMMC_CmdStopTransfer+0x40>)
 8010070:	210c      	movs	r1, #12
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f998 	bl	80103a8 <SDMMC_GetCmdResp1>
 8010078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801007a:	69fb      	ldr	r3, [r7, #28]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3720      	adds	r7, #32
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	05f5e100 	.word	0x05f5e100

08010088 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b08a      	sub	sp, #40	; 0x28
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010098:	2307      	movs	r3, #7
 801009a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801009c:	2340      	movs	r3, #64	; 0x40
 801009e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100a0:	2300      	movs	r3, #0
 80100a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100aa:	f107 0310 	add.w	r3, r7, #16
 80100ae:	4619      	mov	r1, r3
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f7ff fea7 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80100b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80100ba:	2107      	movs	r1, #7
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f000 f973 	bl	80103a8 <SDMMC_GetCmdResp1>
 80100c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3728      	adds	r7, #40	; 0x28
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b088      	sub	sp, #32
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80100de:	2300      	movs	r3, #0
 80100e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100e2:	2300      	movs	r3, #0
 80100e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100ec:	f107 0308 	add.w	r3, r7, #8
 80100f0:	4619      	mov	r1, r3
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f7ff fe86 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f92d 	bl	8010358 <SDMMC_GetCmdError>
 80100fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010100:	69fb      	ldr	r3, [r7, #28]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3720      	adds	r7, #32
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b088      	sub	sp, #32
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010112:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010118:	2308      	movs	r3, #8
 801011a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801011c:	2340      	movs	r3, #64	; 0x40
 801011e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010120:	2300      	movs	r3, #0
 8010122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801012a:	f107 0308 	add.w	r3, r7, #8
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff fe67 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 fb16 	bl	8010768 <SDMMC_GetCmdResp7>
 801013c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801013e:	69fb      	ldr	r3, [r7, #28]
}
 8010140:	4618      	mov	r0, r3
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b088      	sub	sp, #32
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010156:	2337      	movs	r3, #55	; 0x37
 8010158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801015a:	2340      	movs	r3, #64	; 0x40
 801015c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801015e:	2300      	movs	r3, #0
 8010160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010168:	f107 0308 	add.w	r3, r7, #8
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fe48 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010174:	f241 3288 	movw	r2, #5000	; 0x1388
 8010178:	2137      	movs	r1, #55	; 0x37
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 f914 	bl	80103a8 <SDMMC_GetCmdResp1>
 8010180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010182:	69fb      	ldr	r3, [r7, #28]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3720      	adds	r7, #32
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80101a2:	2329      	movs	r3, #41	; 0x29
 80101a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101a6:	2340      	movs	r3, #64	; 0x40
 80101a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101aa:	2300      	movs	r3, #0
 80101ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101b4:	f107 0308 	add.w	r3, r7, #8
 80101b8:	4619      	mov	r1, r3
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff fe22 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fa23 	bl	801060c <SDMMC_GetCmdResp3>
 80101c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101c8:	69fb      	ldr	r3, [r7, #28]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3720      	adds	r7, #32
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b088      	sub	sp, #32
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80101e0:	2306      	movs	r3, #6
 80101e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101e4:	2340      	movs	r3, #64	; 0x40
 80101e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101e8:	2300      	movs	r3, #0
 80101ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101f2:	f107 0308 	add.w	r3, r7, #8
 80101f6:	4619      	mov	r1, r3
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f7ff fe03 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80101fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010202:	2106      	movs	r1, #6
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 f8cf 	bl	80103a8 <SDMMC_GetCmdResp1>
 801020a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801020c:	69fb      	ldr	r3, [r7, #28]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3720      	adds	r7, #32
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b088      	sub	sp, #32
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801021e:	2300      	movs	r3, #0
 8010220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010222:	2333      	movs	r3, #51	; 0x33
 8010224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010226:	2340      	movs	r3, #64	; 0x40
 8010228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801022a:	2300      	movs	r3, #0
 801022c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010234:	f107 0308 	add.w	r3, r7, #8
 8010238:	4619      	mov	r1, r3
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fde2 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010240:	f241 3288 	movw	r2, #5000	; 0x1388
 8010244:	2133      	movs	r1, #51	; 0x33
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f8ae 	bl	80103a8 <SDMMC_GetCmdResp1>
 801024c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801024e:	69fb      	ldr	r3, [r7, #28]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3720      	adds	r7, #32
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b088      	sub	sp, #32
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010260:	2300      	movs	r3, #0
 8010262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010264:	2302      	movs	r3, #2
 8010266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010268:	23c0      	movs	r3, #192	; 0xc0
 801026a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801026c:	2300      	movs	r3, #0
 801026e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010276:	f107 0308 	add.w	r3, r7, #8
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff fdc1 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 f97c 	bl	8010580 <SDMMC_GetCmdResp2>
 8010288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801028a:	69fb      	ldr	r3, [r7, #28]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3720      	adds	r7, #32
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80102a2:	2309      	movs	r3, #9
 80102a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80102a6:	23c0      	movs	r3, #192	; 0xc0
 80102a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102aa:	2300      	movs	r3, #0
 80102ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102b4:	f107 0308 	add.w	r3, r7, #8
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff fda2 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f95d 	bl	8010580 <SDMMC_GetCmdResp2>
 80102c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102c8:	69fb      	ldr	r3, [r7, #28]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3720      	adds	r7, #32
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b088      	sub	sp, #32
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
 80102da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80102dc:	2300      	movs	r3, #0
 80102de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80102e0:	2303      	movs	r3, #3
 80102e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102e4:	2340      	movs	r3, #64	; 0x40
 80102e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102e8:	2300      	movs	r3, #0
 80102ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102f2:	f107 0308 	add.w	r3, r7, #8
 80102f6:	4619      	mov	r1, r3
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff fd83 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80102fe:	683a      	ldr	r2, [r7, #0]
 8010300:	2103      	movs	r1, #3
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f9bc 	bl	8010680 <SDMMC_GetCmdResp6>
 8010308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801030a:	69fb      	ldr	r3, [r7, #28]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3720      	adds	r7, #32
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010322:	230d      	movs	r3, #13
 8010324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010326:	2340      	movs	r3, #64	; 0x40
 8010328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801032a:	2300      	movs	r3, #0
 801032c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010332:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010334:	f107 0308 	add.w	r3, r7, #8
 8010338:	4619      	mov	r1, r3
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fd62 	bl	800fe04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010340:	f241 3288 	movw	r2, #5000	; 0x1388
 8010344:	210d      	movs	r1, #13
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 f82e 	bl	80103a8 <SDMMC_GetCmdResp1>
 801034c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801034e:	69fb      	ldr	r3, [r7, #28]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3720      	adds	r7, #32
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010358:	b490      	push	{r4, r7}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010360:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <SDMMC_GetCmdError+0x48>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a0f      	ldr	r2, [pc, #60]	; (80103a4 <SDMMC_GetCmdError+0x4c>)
 8010366:	fba2 2303 	umull	r2, r3, r2, r3
 801036a:	0a5b      	lsrs	r3, r3, #9
 801036c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010370:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010374:	4623      	mov	r3, r4
 8010376:	1e5c      	subs	r4, r3, #1
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801037c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010380:	e009      	b.n	8010396 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801038a:	2b00      	cmp	r3, #0
 801038c:	d0f2      	beq.n	8010374 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	22c5      	movs	r2, #197	; 0xc5
 8010392:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bc90      	pop	{r4, r7}
 801039e:	4770      	bx	lr
 80103a0:	20000000 	.word	0x20000000
 80103a4:	10624dd3 	.word	0x10624dd3

080103a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80103a8:	b590      	push	{r4, r7, lr}
 80103aa:	b087      	sub	sp, #28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	460b      	mov	r3, r1
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80103b6:	4b6f      	ldr	r3, [pc, #444]	; (8010574 <SDMMC_GetCmdResp1+0x1cc>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a6f      	ldr	r2, [pc, #444]	; (8010578 <SDMMC_GetCmdResp1+0x1d0>)
 80103bc:	fba2 2303 	umull	r2, r3, r2, r3
 80103c0:	0a5b      	lsrs	r3, r3, #9
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80103c8:	4623      	mov	r3, r4
 80103ca:	1e5c      	subs	r4, r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d102      	bne.n	80103d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80103d4:	e0c9      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d0f0      	beq.n	80103c8 <SDMMC_GetCmdResp1+0x20>
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d1eb      	bne.n	80103c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103f4:	f003 0304 	and.w	r3, r3, #4
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d004      	beq.n	8010406 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2204      	movs	r2, #4
 8010400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010402:	2304      	movs	r3, #4
 8010404:	e0b1      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801040a:	f003 0301 	and.w	r3, r3, #1
 801040e:	2b00      	cmp	r3, #0
 8010410:	d004      	beq.n	801041c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2201      	movs	r2, #1
 8010416:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010418:	2301      	movs	r3, #1
 801041a:	e0a6      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	22c5      	movs	r2, #197	; 0xc5
 8010420:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7ff fd18 	bl	800fe58 <SDIO_GetCommandResponse>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	7afb      	ldrb	r3, [r7, #11]
 801042e:	4293      	cmp	r3, r2
 8010430:	d001      	beq.n	8010436 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010432:	2301      	movs	r3, #1
 8010434:	e099      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010436:	2100      	movs	r1, #0
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f7ff fd1a 	bl	800fe72 <SDIO_GetResponse>
 801043e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010440:	693a      	ldr	r2, [r7, #16]
 8010442:	4b4e      	ldr	r3, [pc, #312]	; (801057c <SDMMC_GetCmdResp1+0x1d4>)
 8010444:	4013      	ands	r3, r2
 8010446:	2b00      	cmp	r3, #0
 8010448:	d101      	bne.n	801044e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801044a:	2300      	movs	r3, #0
 801044c:	e08d      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	da02      	bge.n	801045a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010458:	e087      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010464:	2340      	movs	r3, #64	; 0x40
 8010466:	e080      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010472:	2380      	movs	r3, #128	; 0x80
 8010474:	e079      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010484:	e071      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d002      	beq.n	8010496 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010494:	e069      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80104a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a4:	e061      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80104b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104b4:	e059      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80104c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104c4:	e051      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80104d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80104d4:	e049      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d002      	beq.n	80104e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80104e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80104e4:	e041      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80104f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104f4:	e039      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010504:	e031      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010510:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010514:	e029      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010520:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010524:	e021      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010534:	e019      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010544:	e011      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010554:	e009      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	f003 0308 	and.w	r3, r3, #8
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010560:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010564:	e001      	b.n	801056a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801056a:	4618      	mov	r0, r3
 801056c:	371c      	adds	r7, #28
 801056e:	46bd      	mov	sp, r7
 8010570:	bd90      	pop	{r4, r7, pc}
 8010572:	bf00      	nop
 8010574:	20000000 	.word	0x20000000
 8010578:	10624dd3 	.word	0x10624dd3
 801057c:	fdffe008 	.word	0xfdffe008

08010580 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010580:	b490      	push	{r4, r7}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010588:	4b1e      	ldr	r3, [pc, #120]	; (8010604 <SDMMC_GetCmdResp2+0x84>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a1e      	ldr	r2, [pc, #120]	; (8010608 <SDMMC_GetCmdResp2+0x88>)
 801058e:	fba2 2303 	umull	r2, r3, r2, r3
 8010592:	0a5b      	lsrs	r3, r3, #9
 8010594:	f241 3288 	movw	r2, #5000	; 0x1388
 8010598:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801059c:	4623      	mov	r3, r4
 801059e:	1e5c      	subs	r4, r3, #1
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d102      	bne.n	80105aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105a8:	e026      	b.n	80105f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d0f0      	beq.n	801059c <SDMMC_GetCmdResp2+0x1c>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1eb      	bne.n	801059c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c8:	f003 0304 	and.w	r3, r3, #4
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d004      	beq.n	80105da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2204      	movs	r2, #4
 80105d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105d6:	2304      	movs	r3, #4
 80105d8:	e00e      	b.n	80105f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105de:	f003 0301 	and.w	r3, r3, #1
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d004      	beq.n	80105f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2201      	movs	r2, #1
 80105ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e003      	b.n	80105f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	22c5      	movs	r2, #197	; 0xc5
 80105f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3710      	adds	r7, #16
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bc90      	pop	{r4, r7}
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	20000000 	.word	0x20000000
 8010608:	10624dd3 	.word	0x10624dd3

0801060c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801060c:	b490      	push	{r4, r7}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010614:	4b18      	ldr	r3, [pc, #96]	; (8010678 <SDMMC_GetCmdResp3+0x6c>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a18      	ldr	r2, [pc, #96]	; (801067c <SDMMC_GetCmdResp3+0x70>)
 801061a:	fba2 2303 	umull	r2, r3, r2, r3
 801061e:	0a5b      	lsrs	r3, r3, #9
 8010620:	f241 3288 	movw	r2, #5000	; 0x1388
 8010624:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010628:	4623      	mov	r3, r4
 801062a:	1e5c      	subs	r4, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010634:	e01b      	b.n	801066e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010642:	2b00      	cmp	r3, #0
 8010644:	d0f0      	beq.n	8010628 <SDMMC_GetCmdResp3+0x1c>
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1eb      	bne.n	8010628 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010654:	f003 0304 	and.w	r3, r3, #4
 8010658:	2b00      	cmp	r3, #0
 801065a:	d004      	beq.n	8010666 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2204      	movs	r2, #4
 8010660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010662:	2304      	movs	r3, #4
 8010664:	e003      	b.n	801066e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	22c5      	movs	r2, #197	; 0xc5
 801066a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bc90      	pop	{r4, r7}
 8010676:	4770      	bx	lr
 8010678:	20000000 	.word	0x20000000
 801067c:	10624dd3 	.word	0x10624dd3

08010680 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010680:	b590      	push	{r4, r7, lr}
 8010682:	b087      	sub	sp, #28
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	460b      	mov	r3, r1
 801068a:	607a      	str	r2, [r7, #4]
 801068c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801068e:	4b34      	ldr	r3, [pc, #208]	; (8010760 <SDMMC_GetCmdResp6+0xe0>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a34      	ldr	r2, [pc, #208]	; (8010764 <SDMMC_GetCmdResp6+0xe4>)
 8010694:	fba2 2303 	umull	r2, r3, r2, r3
 8010698:	0a5b      	lsrs	r3, r3, #9
 801069a:	f241 3288 	movw	r2, #5000	; 0x1388
 801069e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80106a2:	4623      	mov	r3, r4
 80106a4:	1e5c      	subs	r4, r3, #1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d102      	bne.n	80106b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106ae:	e052      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d0f0      	beq.n	80106a2 <SDMMC_GetCmdResp6+0x22>
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d1eb      	bne.n	80106a2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	f003 0304 	and.w	r3, r3, #4
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d004      	beq.n	80106e0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2204      	movs	r2, #4
 80106da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106dc:	2304      	movs	r3, #4
 80106de:	e03a      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d004      	beq.n	80106f6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2201      	movs	r2, #1
 80106f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106f2:	2301      	movs	r3, #1
 80106f4:	e02f      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f7ff fbae 	bl	800fe58 <SDIO_GetCommandResponse>
 80106fc:	4603      	mov	r3, r0
 80106fe:	461a      	mov	r2, r3
 8010700:	7afb      	ldrb	r3, [r7, #11]
 8010702:	4293      	cmp	r3, r2
 8010704:	d001      	beq.n	801070a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010706:	2301      	movs	r3, #1
 8010708:	e025      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	22c5      	movs	r2, #197	; 0xc5
 801070e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010710:	2100      	movs	r1, #0
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f7ff fbad 	bl	800fe72 <SDIO_GetResponse>
 8010718:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010720:	2b00      	cmp	r3, #0
 8010722:	d106      	bne.n	8010732 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	0c1b      	lsrs	r3, r3, #16
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801072e:	2300      	movs	r3, #0
 8010730:	e011      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010740:	e009      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010750:	e001      	b.n	8010756 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010756:	4618      	mov	r0, r3
 8010758:	371c      	adds	r7, #28
 801075a:	46bd      	mov	sp, r7
 801075c:	bd90      	pop	{r4, r7, pc}
 801075e:	bf00      	nop
 8010760:	20000000 	.word	0x20000000
 8010764:	10624dd3 	.word	0x10624dd3

08010768 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010768:	b490      	push	{r4, r7}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010770:	4b21      	ldr	r3, [pc, #132]	; (80107f8 <SDMMC_GetCmdResp7+0x90>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4a21      	ldr	r2, [pc, #132]	; (80107fc <SDMMC_GetCmdResp7+0x94>)
 8010776:	fba2 2303 	umull	r2, r3, r2, r3
 801077a:	0a5b      	lsrs	r3, r3, #9
 801077c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010780:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010784:	4623      	mov	r3, r4
 8010786:	1e5c      	subs	r4, r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	d102      	bne.n	8010792 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801078c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010790:	e02c      	b.n	80107ec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010796:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d0f0      	beq.n	8010784 <SDMMC_GetCmdResp7+0x1c>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1eb      	bne.n	8010784 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b0:	f003 0304 	and.w	r3, r3, #4
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2204      	movs	r2, #4
 80107bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107be:	2304      	movs	r3, #4
 80107c0:	e014      	b.n	80107ec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107c6:	f003 0301 	and.w	r3, r3, #1
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d004      	beq.n	80107d8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2201      	movs	r2, #1
 80107d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107d4:	2301      	movs	r3, #1
 80107d6:	e009      	b.n	80107ec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2240      	movs	r2, #64	; 0x40
 80107e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80107ea:	2300      	movs	r3, #0
  
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3710      	adds	r7, #16
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bc90      	pop	{r4, r7}
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	20000000 	.word	0x20000000
 80107fc:	10624dd3 	.word	0x10624dd3

08010800 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010804:	4904      	ldr	r1, [pc, #16]	; (8010818 <MX_FATFS_Init+0x18>)
 8010806:	4805      	ldr	r0, [pc, #20]	; (801081c <MX_FATFS_Init+0x1c>)
 8010808:	f003 fb9c 	bl	8013f44 <FATFS_LinkDriver>
 801080c:	4603      	mov	r3, r0
 801080e:	461a      	mov	r2, r3
 8010810:	4b03      	ldr	r3, [pc, #12]	; (8010820 <MX_FATFS_Init+0x20>)
 8010812:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010814:	bf00      	nop
 8010816:	bd80      	pop	{r7, pc}
 8010818:	20043c60 	.word	0x20043c60
 801081c:	08019aa4 	.word	0x08019aa4
 8010820:	20043c5c 	.word	0x20043c5c

08010824 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801082a:	2300      	movs	r3, #0
 801082c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801082e:	f000 f896 	bl	801095e <BSP_SD_IsDetected>
 8010832:	4603      	mov	r3, r0
 8010834:	2b01      	cmp	r3, #1
 8010836:	d001      	beq.n	801083c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010838:	2301      	movs	r3, #1
 801083a:	e012      	b.n	8010862 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801083c:	480b      	ldr	r0, [pc, #44]	; (801086c <BSP_SD_Init+0x48>)
 801083e:	f7fb ffa5 	bl	800c78c <HAL_SD_Init>
 8010842:	4603      	mov	r3, r0
 8010844:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010846:	79fb      	ldrb	r3, [r7, #7]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d109      	bne.n	8010860 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801084c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010850:	4806      	ldr	r0, [pc, #24]	; (801086c <BSP_SD_Init+0x48>)
 8010852:	f7fc fd4f 	bl	800d2f4 <HAL_SD_ConfigWideBusOperation>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801085c:	2301      	movs	r3, #1
 801085e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010860:	79fb      	ldrb	r3, [r7, #7]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	20043a58 	.word	0x20043a58

08010870 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b086      	sub	sp, #24
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	68f9      	ldr	r1, [r7, #12]
 8010886:	4806      	ldr	r0, [pc, #24]	; (80108a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010888:	f7fc f810 	bl	800c8ac <HAL_SD_ReadBlocks_DMA>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010892:	2301      	movs	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010896:	7dfb      	ldrb	r3, [r7, #23]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20043a58 	.word	0x20043a58

080108a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80108b0:	2300      	movs	r3, #0
 80108b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	68f9      	ldr	r1, [r7, #12]
 80108ba:	4806      	ldr	r0, [pc, #24]	; (80108d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80108bc:	f7fc f8de 	bl	800ca7c <HAL_SD_WriteBlocks_DMA>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80108ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	20043a58 	.word	0x20043a58

080108d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80108dc:	4805      	ldr	r0, [pc, #20]	; (80108f4 <BSP_SD_GetCardState+0x1c>)
 80108de:	f7fc fd85 	bl	800d3ec <HAL_SD_GetCardState>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b04      	cmp	r3, #4
 80108e6:	bf14      	ite	ne
 80108e8:	2301      	movne	r3, #1
 80108ea:	2300      	moveq	r3, #0
 80108ec:	b2db      	uxtb	r3, r3
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	20043a58 	.word	0x20043a58

080108f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	4803      	ldr	r0, [pc, #12]	; (8010910 <BSP_SD_GetCardInfo+0x18>)
 8010904:	f7fc fcca 	bl	800d29c <HAL_SD_GetCardInfo>
}
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	20043a58 	.word	0x20043a58

08010914 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801091c:	f000 f818 	bl	8010950 <BSP_SD_AbortCallback>
}
 8010920:	bf00      	nop
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010930:	f000 f9a8 	bl	8010c84 <BSP_SD_WriteCpltCallback>
}
 8010934:	bf00      	nop
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010944:	f000 f9aa 	bl	8010c9c <BSP_SD_ReadCpltCallback>
}
 8010948:	bf00      	nop
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010950:	b480      	push	{r7}
 8010952:	af00      	add	r7, sp, #0

}
 8010954:	bf00      	nop
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801095e:	b580      	push	{r7, lr}
 8010960:	b082      	sub	sp, #8
 8010962:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010964:	2301      	movs	r3, #1
 8010966:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010968:	f000 f80c 	bl	8010984 <BSP_PlatformIsDetected>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d101      	bne.n	8010976 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010972:	2300      	movs	r3, #0
 8010974:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010976:	79fb      	ldrb	r3, [r7, #7]
 8010978:	b2db      	uxtb	r3, r3
}
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801098a:	2301      	movs	r3, #1
 801098c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801098e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010992:	4806      	ldr	r0, [pc, #24]	; (80109ac <BSP_PlatformIsDetected+0x28>)
 8010994:	f7fa f87e 	bl	800aa94 <HAL_GPIO_ReadPin>
 8010998:	4603      	mov	r3, r0
 801099a:	2b00      	cmp	r3, #0
 801099c:	d001      	beq.n	80109a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801099e:	2300      	movs	r3, #0
 80109a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80109a2:	79fb      	ldrb	r3, [r7, #7]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	40020000 	.word	0x40020000

080109b0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80109b8:	f7f8 fde2 	bl	8009580 <HAL_GetTick>
 80109bc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80109be:	e006      	b.n	80109ce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80109c0:	f7ff ff8a 	bl	80108d8 <BSP_SD_GetCardState>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d101      	bne.n	80109ce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e009      	b.n	80109e2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80109ce:	f7f8 fdd7 	bl	8009580 <HAL_GetTick>
 80109d2:	4602      	mov	r2, r0
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d8f0      	bhi.n	80109c0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80109de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
	...

080109ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	4603      	mov	r3, r0
 80109f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80109f6:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <SD_CheckStatus+0x38>)
 80109f8:	2201      	movs	r2, #1
 80109fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80109fc:	f7ff ff6c 	bl	80108d8 <BSP_SD_GetCardState>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d107      	bne.n	8010a16 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010a06:	4b07      	ldr	r3, [pc, #28]	; (8010a24 <SD_CheckStatus+0x38>)
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	f023 0301 	bic.w	r3, r3, #1
 8010a10:	b2da      	uxtb	r2, r3
 8010a12:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <SD_CheckStatus+0x38>)
 8010a14:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010a16:	4b03      	ldr	r3, [pc, #12]	; (8010a24 <SD_CheckStatus+0x38>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	b2db      	uxtb	r3, r3
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	20000009 	.word	0x20000009

08010a28 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010a32:	f7ff fef7 	bl	8010824 <BSP_SD_Init>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d107      	bne.n	8010a4c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010a3c:	79fb      	ldrb	r3, [r7, #7]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff ffd4 	bl	80109ec <SD_CheckStatus>
 8010a44:	4603      	mov	r3, r0
 8010a46:	461a      	mov	r2, r3
 8010a48:	4b04      	ldr	r3, [pc, #16]	; (8010a5c <SD_initialize+0x34>)
 8010a4a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010a4c:	4b03      	ldr	r3, [pc, #12]	; (8010a5c <SD_initialize+0x34>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	b2db      	uxtb	r3, r3
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20000009 	.word	0x20000009

08010a60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010a6a:	79fb      	ldrb	r3, [r7, #7]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7ff ffbd 	bl	80109ec <SD_CheckStatus>
 8010a72:	4603      	mov	r3, r0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60b9      	str	r1, [r7, #8]
 8010a84:	607a      	str	r2, [r7, #4]
 8010a86:	603b      	str	r3, [r7, #0]
 8010a88:	4603      	mov	r3, r0
 8010a8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010a90:	f247 5030 	movw	r0, #30000	; 0x7530
 8010a94:	f7ff ff8c 	bl	80109b0 <SD_CheckStatusWithTimeout>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da01      	bge.n	8010aa2 <SD_read+0x26>
  {
    return res;
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	e03b      	b.n	8010b1a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010aa2:	683a      	ldr	r2, [r7, #0]
 8010aa4:	6879      	ldr	r1, [r7, #4]
 8010aa6:	68b8      	ldr	r0, [r7, #8]
 8010aa8:	f7ff fee2 	bl	8010870 <BSP_SD_ReadBlocks_DMA>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d132      	bne.n	8010b18 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010ab2:	4b1c      	ldr	r3, [pc, #112]	; (8010b24 <SD_read+0xa8>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010ab8:	f7f8 fd62 	bl	8009580 <HAL_GetTick>
 8010abc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010abe:	bf00      	nop
 8010ac0:	4b18      	ldr	r3, [pc, #96]	; (8010b24 <SD_read+0xa8>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d108      	bne.n	8010ada <SD_read+0x5e>
 8010ac8:	f7f8 fd5a 	bl	8009580 <HAL_GetTick>
 8010acc:	4602      	mov	r2, r0
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d9f2      	bls.n	8010ac0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010ada:	4b12      	ldr	r3, [pc, #72]	; (8010b24 <SD_read+0xa8>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	75fb      	strb	r3, [r7, #23]
 8010ae6:	e017      	b.n	8010b18 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010ae8:	4b0e      	ldr	r3, [pc, #56]	; (8010b24 <SD_read+0xa8>)
 8010aea:	2200      	movs	r2, #0
 8010aec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010aee:	f7f8 fd47 	bl	8009580 <HAL_GetTick>
 8010af2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010af4:	e007      	b.n	8010b06 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010af6:	f7ff feef 	bl	80108d8 <BSP_SD_GetCardState>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d102      	bne.n	8010b06 <SD_read+0x8a>
          {
            res = RES_OK;
 8010b00:	2300      	movs	r3, #0
 8010b02:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010b04:	e008      	b.n	8010b18 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b06:	f7f8 fd3b 	bl	8009580 <HAL_GetTick>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	1ad3      	subs	r3, r2, r3
 8010b10:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d9ee      	bls.n	8010af6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3718      	adds	r7, #24
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	200412f4 	.word	0x200412f4

08010b28 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010b3c:	4b24      	ldr	r3, [pc, #144]	; (8010bd0 <SD_write+0xa8>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010b42:	f247 5030 	movw	r0, #30000	; 0x7530
 8010b46:	f7ff ff33 	bl	80109b0 <SD_CheckStatusWithTimeout>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	da01      	bge.n	8010b54 <SD_write+0x2c>
  {
    return res;
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	e038      	b.n	8010bc6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	68b8      	ldr	r0, [r7, #8]
 8010b5a:	f7ff fea3 	bl	80108a4 <BSP_SD_WriteBlocks_DMA>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d12f      	bne.n	8010bc4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010b64:	f7f8 fd0c 	bl	8009580 <HAL_GetTick>
 8010b68:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010b6a:	bf00      	nop
 8010b6c:	4b18      	ldr	r3, [pc, #96]	; (8010bd0 <SD_write+0xa8>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d108      	bne.n	8010b86 <SD_write+0x5e>
 8010b74:	f7f8 fd04 	bl	8009580 <HAL_GetTick>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d9f2      	bls.n	8010b6c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010b86:	4b12      	ldr	r3, [pc, #72]	; (8010bd0 <SD_write+0xa8>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d102      	bne.n	8010b94 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	75fb      	strb	r3, [r7, #23]
 8010b92:	e017      	b.n	8010bc4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010b94:	4b0e      	ldr	r3, [pc, #56]	; (8010bd0 <SD_write+0xa8>)
 8010b96:	2200      	movs	r2, #0
 8010b98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010b9a:	f7f8 fcf1 	bl	8009580 <HAL_GetTick>
 8010b9e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ba0:	e007      	b.n	8010bb2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ba2:	f7ff fe99 	bl	80108d8 <BSP_SD_GetCardState>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d102      	bne.n	8010bb2 <SD_write+0x8a>
          {
            res = RES_OK;
 8010bac:	2300      	movs	r3, #0
 8010bae:	75fb      	strb	r3, [r7, #23]
            break;
 8010bb0:	e008      	b.n	8010bc4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010bb2:	f7f8 fce5 	bl	8009580 <HAL_GetTick>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d9ee      	bls.n	8010ba2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	200412f0 	.word	0x200412f0

08010bd4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08c      	sub	sp, #48	; 0x30
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	4603      	mov	r3, r0
 8010bdc:	603a      	str	r2, [r7, #0]
 8010bde:	71fb      	strb	r3, [r7, #7]
 8010be0:	460b      	mov	r3, r1
 8010be2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010be4:	2301      	movs	r3, #1
 8010be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010bea:	4b25      	ldr	r3, [pc, #148]	; (8010c80 <SD_ioctl+0xac>)
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	f003 0301 	and.w	r3, r3, #1
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d001      	beq.n	8010bfc <SD_ioctl+0x28>
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	e03c      	b.n	8010c76 <SD_ioctl+0xa2>

  switch (cmd)
 8010bfc:	79bb      	ldrb	r3, [r7, #6]
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d834      	bhi.n	8010c6c <SD_ioctl+0x98>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <SD_ioctl+0x34>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c19 	.word	0x08010c19
 8010c0c:	08010c21 	.word	0x08010c21
 8010c10:	08010c39 	.word	0x08010c39
 8010c14:	08010c53 	.word	0x08010c53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c1e:	e028      	b.n	8010c72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c20:	f107 030c 	add.w	r3, r7, #12
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff fe67 	bl	80108f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c30:	2300      	movs	r3, #0
 8010c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c36:	e01c      	b.n	8010c72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c38:	f107 030c 	add.w	r3, r7, #12
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fe5b 	bl	80108f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c50:	e00f      	b.n	8010c72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c52:	f107 030c 	add.w	r3, r7, #12
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ff fe4e 	bl	80108f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5e:	0a5a      	lsrs	r2, r3, #9
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c64:	2300      	movs	r3, #0
 8010c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c6a:	e002      	b.n	8010c72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010c6c:	2304      	movs	r3, #4
 8010c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3730      	adds	r7, #48	; 0x30
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	20000009 	.word	0x20000009

08010c84 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010c84:	b480      	push	{r7}
 8010c86:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010c88:	4b03      	ldr	r3, [pc, #12]	; (8010c98 <BSP_SD_WriteCpltCallback+0x14>)
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	601a      	str	r2, [r3, #0]
}
 8010c8e:	bf00      	nop
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr
 8010c98:	200412f0 	.word	0x200412f0

08010c9c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010ca0:	4b03      	ldr	r3, [pc, #12]	; (8010cb0 <BSP_SD_ReadCpltCallback+0x14>)
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	601a      	str	r2, [r3, #0]
}
 8010ca6:	bf00      	nop
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr
 8010cb0:	200412f4 	.word	0x200412f4

08010cb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	4603      	mov	r3, r0
 8010cbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cbe:	79fb      	ldrb	r3, [r7, #7]
 8010cc0:	4a08      	ldr	r2, [pc, #32]	; (8010ce4 <disk_status+0x30>)
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	79fa      	ldrb	r2, [r7, #7]
 8010ccc:	4905      	ldr	r1, [pc, #20]	; (8010ce4 <disk_status+0x30>)
 8010cce:	440a      	add	r2, r1
 8010cd0:	7a12      	ldrb	r2, [r2, #8]
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	4798      	blx	r3
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3710      	adds	r7, #16
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	20041320 	.word	0x20041320

08010ce8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010cf6:	79fb      	ldrb	r3, [r7, #7]
 8010cf8:	4a0d      	ldr	r2, [pc, #52]	; (8010d30 <disk_initialize+0x48>)
 8010cfa:	5cd3      	ldrb	r3, [r2, r3]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d111      	bne.n	8010d24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d00:	79fb      	ldrb	r3, [r7, #7]
 8010d02:	4a0b      	ldr	r2, [pc, #44]	; (8010d30 <disk_initialize+0x48>)
 8010d04:	2101      	movs	r1, #1
 8010d06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	4a09      	ldr	r2, [pc, #36]	; (8010d30 <disk_initialize+0x48>)
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	79fa      	ldrb	r2, [r7, #7]
 8010d16:	4906      	ldr	r1, [pc, #24]	; (8010d30 <disk_initialize+0x48>)
 8010d18:	440a      	add	r2, r1
 8010d1a:	7a12      	ldrb	r2, [r2, #8]
 8010d1c:	4610      	mov	r0, r2
 8010d1e:	4798      	blx	r3
 8010d20:	4603      	mov	r3, r0
 8010d22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	20041320 	.word	0x20041320

08010d34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b087      	sub	sp, #28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	4a0a      	ldr	r2, [pc, #40]	; (8010d70 <disk_read+0x3c>)
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	689c      	ldr	r4, [r3, #8]
 8010d50:	7bfb      	ldrb	r3, [r7, #15]
 8010d52:	4a07      	ldr	r2, [pc, #28]	; (8010d70 <disk_read+0x3c>)
 8010d54:	4413      	add	r3, r2
 8010d56:	7a18      	ldrb	r0, [r3, #8]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	47a0      	blx	r4
 8010d60:	4603      	mov	r3, r0
 8010d62:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd90      	pop	{r4, r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20041320 	.word	0x20041320

08010d74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d74:	b590      	push	{r4, r7, lr}
 8010d76:	b087      	sub	sp, #28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	607a      	str	r2, [r7, #4]
 8010d7e:	603b      	str	r3, [r7, #0]
 8010d80:	4603      	mov	r3, r0
 8010d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
 8010d86:	4a0a      	ldr	r2, [pc, #40]	; (8010db0 <disk_write+0x3c>)
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	68dc      	ldr	r4, [r3, #12]
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
 8010d92:	4a07      	ldr	r2, [pc, #28]	; (8010db0 <disk_write+0x3c>)
 8010d94:	4413      	add	r3, r2
 8010d96:	7a18      	ldrb	r0, [r3, #8]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	68b9      	ldr	r1, [r7, #8]
 8010d9e:	47a0      	blx	r4
 8010da0:	4603      	mov	r3, r0
 8010da2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	371c      	adds	r7, #28
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd90      	pop	{r4, r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20041320 	.word	0x20041320

08010db4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	603a      	str	r2, [r7, #0]
 8010dbe:	71fb      	strb	r3, [r7, #7]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010dc4:	79fb      	ldrb	r3, [r7, #7]
 8010dc6:	4a09      	ldr	r2, [pc, #36]	; (8010dec <disk_ioctl+0x38>)
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4413      	add	r3, r2
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	79fa      	ldrb	r2, [r7, #7]
 8010dd2:	4906      	ldr	r1, [pc, #24]	; (8010dec <disk_ioctl+0x38>)
 8010dd4:	440a      	add	r2, r1
 8010dd6:	7a10      	ldrb	r0, [r2, #8]
 8010dd8:	79b9      	ldrb	r1, [r7, #6]
 8010dda:	683a      	ldr	r2, [r7, #0]
 8010ddc:	4798      	blx	r3
 8010dde:	4603      	mov	r3, r0
 8010de0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20041320 	.word	0x20041320

08010df0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e00:	89fb      	ldrh	r3, [r7, #14]
 8010e02:	021b      	lsls	r3, r3, #8
 8010e04:	b21a      	sxth	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	b21b      	sxth	r3, r3
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	b21b      	sxth	r3, r3
 8010e10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e12:	89fb      	ldrh	r3, [r7, #14]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3714      	adds	r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3303      	adds	r3, #3
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	021b      	lsls	r3, r3, #8
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	3202      	adds	r2, #2
 8010e38:	7812      	ldrb	r2, [r2, #0]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	021b      	lsls	r3, r3, #8
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	3201      	adds	r2, #1
 8010e46:	7812      	ldrb	r2, [r2, #0]
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	021b      	lsls	r3, r3, #8
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	7812      	ldrb	r2, [r2, #0]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3714      	adds	r7, #20
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr

08010e66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e66:	b480      	push	{r7}
 8010e68:	b083      	sub	sp, #12
 8010e6a:	af00      	add	r7, sp, #0
 8010e6c:	6078      	str	r0, [r7, #4]
 8010e6e:	460b      	mov	r3, r1
 8010e70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	607a      	str	r2, [r7, #4]
 8010e78:	887a      	ldrh	r2, [r7, #2]
 8010e7a:	b2d2      	uxtb	r2, r2
 8010e7c:	701a      	strb	r2, [r3, #0]
 8010e7e:	887b      	ldrh	r3, [r7, #2]
 8010e80:	0a1b      	lsrs	r3, r3, #8
 8010e82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	1c5a      	adds	r2, r3, #1
 8010e88:	607a      	str	r2, [r7, #4]
 8010e8a:	887a      	ldrh	r2, [r7, #2]
 8010e8c:	b2d2      	uxtb	r2, r2
 8010e8e:	701a      	strb	r2, [r3, #0]
}
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	1c5a      	adds	r2, r3, #1
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	683a      	ldr	r2, [r7, #0]
 8010eae:	b2d2      	uxtb	r2, r2
 8010eb0:	701a      	strb	r2, [r3, #0]
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	0a1b      	lsrs	r3, r3, #8
 8010eb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	607a      	str	r2, [r7, #4]
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	701a      	strb	r2, [r3, #0]
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	0a1b      	lsrs	r3, r3, #8
 8010ec8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	1c5a      	adds	r2, r3, #1
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	683a      	ldr	r2, [r7, #0]
 8010ed2:	b2d2      	uxtb	r2, r2
 8010ed4:	701a      	strb	r2, [r3, #0]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	0a1b      	lsrs	r3, r3, #8
 8010eda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	607a      	str	r2, [r7, #4]
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	b2d2      	uxtb	r2, r2
 8010ee6:	701a      	strb	r2, [r3, #0]
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00d      	beq.n	8010f2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f0e:	693a      	ldr	r2, [r7, #16]
 8010f10:	1c53      	adds	r3, r2, #1
 8010f12:	613b      	str	r3, [r7, #16]
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	1c59      	adds	r1, r3, #1
 8010f18:	6179      	str	r1, [r7, #20]
 8010f1a:	7812      	ldrb	r2, [r2, #0]
 8010f1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	607b      	str	r3, [r7, #4]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1f1      	bne.n	8010f0e <mem_cpy+0x1a>
	}
}
 8010f2a:	bf00      	nop
 8010f2c:	371c      	adds	r7, #28
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr

08010f36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f36:	b480      	push	{r7}
 8010f38:	b087      	sub	sp, #28
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	1c5a      	adds	r2, r3, #1
 8010f4a:	617a      	str	r2, [r7, #20]
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	b2d2      	uxtb	r2, r2
 8010f50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	607b      	str	r3, [r7, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1f3      	bne.n	8010f46 <mem_set+0x10>
}
 8010f5e:	bf00      	nop
 8010f60:	371c      	adds	r7, #28
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f6a:	b480      	push	{r7}
 8010f6c:	b089      	sub	sp, #36	; 0x24
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	60f8      	str	r0, [r7, #12]
 8010f72:	60b9      	str	r1, [r7, #8]
 8010f74:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	61fb      	str	r3, [r7, #28]
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	61fa      	str	r2, [r7, #28]
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	61ba      	str	r2, [r7, #24]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	1acb      	subs	r3, r1, r3
 8010f96:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	607b      	str	r3, [r7, #4]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <mem_cmp+0x40>
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d0eb      	beq.n	8010f82 <mem_cmp+0x18>

	return r;
 8010faa:	697b      	ldr	r3, [r7, #20]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3724      	adds	r7, #36	; 0x24
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010fc2:	e002      	b.n	8010fca <chk_chr+0x12>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	607b      	str	r3, [r7, #4]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d005      	beq.n	8010fde <chk_chr+0x26>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d1f2      	bne.n	8010fc4 <chk_chr+0xc>
	return *str;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
	...

08010ff0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60bb      	str	r3, [r7, #8]
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	60fb      	str	r3, [r7, #12]
 8011002:	e029      	b.n	8011058 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011004:	4a27      	ldr	r2, [pc, #156]	; (80110a4 <chk_lock+0xb4>)
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	011b      	lsls	r3, r3, #4
 801100a:	4413      	add	r3, r2
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d01d      	beq.n	801104e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011012:	4a24      	ldr	r2, [pc, #144]	; (80110a4 <chk_lock+0xb4>)
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	011b      	lsls	r3, r3, #4
 8011018:	4413      	add	r3, r2
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	429a      	cmp	r2, r3
 8011022:	d116      	bne.n	8011052 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011024:	4a1f      	ldr	r2, [pc, #124]	; (80110a4 <chk_lock+0xb4>)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	011b      	lsls	r3, r3, #4
 801102a:	4413      	add	r3, r2
 801102c:	3304      	adds	r3, #4
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011034:	429a      	cmp	r2, r3
 8011036:	d10c      	bne.n	8011052 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011038:	4a1a      	ldr	r2, [pc, #104]	; (80110a4 <chk_lock+0xb4>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	011b      	lsls	r3, r3, #4
 801103e:	4413      	add	r3, r2
 8011040:	3308      	adds	r3, #8
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011048:	429a      	cmp	r2, r3
 801104a:	d102      	bne.n	8011052 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801104c:	e007      	b.n	801105e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801104e:	2301      	movs	r3, #1
 8011050:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	3301      	adds	r3, #1
 8011056:	60fb      	str	r3, [r7, #12]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d9d2      	bls.n	8011004 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b02      	cmp	r3, #2
 8011062:	d109      	bne.n	8011078 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d102      	bne.n	8011070 <chk_lock+0x80>
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2b02      	cmp	r3, #2
 801106e:	d101      	bne.n	8011074 <chk_lock+0x84>
 8011070:	2300      	movs	r3, #0
 8011072:	e010      	b.n	8011096 <chk_lock+0xa6>
 8011074:	2312      	movs	r3, #18
 8011076:	e00e      	b.n	8011096 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d108      	bne.n	8011090 <chk_lock+0xa0>
 801107e:	4a09      	ldr	r2, [pc, #36]	; (80110a4 <chk_lock+0xb4>)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	011b      	lsls	r3, r3, #4
 8011084:	4413      	add	r3, r2
 8011086:	330c      	adds	r3, #12
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801108e:	d101      	bne.n	8011094 <chk_lock+0xa4>
 8011090:	2310      	movs	r3, #16
 8011092:	e000      	b.n	8011096 <chk_lock+0xa6>
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3714      	adds	r7, #20
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	20041300 	.word	0x20041300

080110a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110ae:	2300      	movs	r3, #0
 80110b0:	607b      	str	r3, [r7, #4]
 80110b2:	e002      	b.n	80110ba <enq_lock+0x12>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	3301      	adds	r3, #1
 80110b8:	607b      	str	r3, [r7, #4]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d806      	bhi.n	80110ce <enq_lock+0x26>
 80110c0:	4a09      	ldr	r2, [pc, #36]	; (80110e8 <enq_lock+0x40>)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	011b      	lsls	r3, r3, #4
 80110c6:	4413      	add	r3, r2
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1f2      	bne.n	80110b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	bf14      	ite	ne
 80110d4:	2301      	movne	r3, #1
 80110d6:	2300      	moveq	r3, #0
 80110d8:	b2db      	uxtb	r3, r3
}
 80110da:	4618      	mov	r0, r3
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	20041300 	.word	0x20041300

080110ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110f6:	2300      	movs	r3, #0
 80110f8:	60fb      	str	r3, [r7, #12]
 80110fa:	e01f      	b.n	801113c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80110fc:	4a41      	ldr	r2, [pc, #260]	; (8011204 <inc_lock+0x118>)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	011b      	lsls	r3, r3, #4
 8011102:	4413      	add	r3, r2
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	429a      	cmp	r2, r3
 801110c:	d113      	bne.n	8011136 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801110e:	4a3d      	ldr	r2, [pc, #244]	; (8011204 <inc_lock+0x118>)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	011b      	lsls	r3, r3, #4
 8011114:	4413      	add	r3, r2
 8011116:	3304      	adds	r3, #4
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801111e:	429a      	cmp	r2, r3
 8011120:	d109      	bne.n	8011136 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011122:	4a38      	ldr	r2, [pc, #224]	; (8011204 <inc_lock+0x118>)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	4413      	add	r3, r2
 801112a:	3308      	adds	r3, #8
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011132:	429a      	cmp	r2, r3
 8011134:	d006      	beq.n	8011144 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	3301      	adds	r3, #1
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b01      	cmp	r3, #1
 8011140:	d9dc      	bls.n	80110fc <inc_lock+0x10>
 8011142:	e000      	b.n	8011146 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011144:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2b02      	cmp	r3, #2
 801114a:	d132      	bne.n	80111b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801114c:	2300      	movs	r3, #0
 801114e:	60fb      	str	r3, [r7, #12]
 8011150:	e002      	b.n	8011158 <inc_lock+0x6c>
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d806      	bhi.n	801116c <inc_lock+0x80>
 801115e:	4a29      	ldr	r2, [pc, #164]	; (8011204 <inc_lock+0x118>)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	011b      	lsls	r3, r3, #4
 8011164:	4413      	add	r3, r2
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d1f2      	bne.n	8011152 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b02      	cmp	r3, #2
 8011170:	d101      	bne.n	8011176 <inc_lock+0x8a>
 8011172:	2300      	movs	r3, #0
 8011174:	e040      	b.n	80111f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	4922      	ldr	r1, [pc, #136]	; (8011204 <inc_lock+0x118>)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	011b      	lsls	r3, r3, #4
 8011180:	440b      	add	r3, r1
 8011182:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	689a      	ldr	r2, [r3, #8]
 8011188:	491e      	ldr	r1, [pc, #120]	; (8011204 <inc_lock+0x118>)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	011b      	lsls	r3, r3, #4
 801118e:	440b      	add	r3, r1
 8011190:	3304      	adds	r3, #4
 8011192:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	695a      	ldr	r2, [r3, #20]
 8011198:	491a      	ldr	r1, [pc, #104]	; (8011204 <inc_lock+0x118>)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	011b      	lsls	r3, r3, #4
 801119e:	440b      	add	r3, r1
 80111a0:	3308      	adds	r3, #8
 80111a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80111a4:	4a17      	ldr	r2, [pc, #92]	; (8011204 <inc_lock+0x118>)
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	011b      	lsls	r3, r3, #4
 80111aa:	4413      	add	r3, r2
 80111ac:	330c      	adds	r3, #12
 80111ae:	2200      	movs	r2, #0
 80111b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d009      	beq.n	80111cc <inc_lock+0xe0>
 80111b8:	4a12      	ldr	r2, [pc, #72]	; (8011204 <inc_lock+0x118>)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	4413      	add	r3, r2
 80111c0:	330c      	adds	r3, #12
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d001      	beq.n	80111cc <inc_lock+0xe0>
 80111c8:	2300      	movs	r3, #0
 80111ca:	e015      	b.n	80111f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d108      	bne.n	80111e4 <inc_lock+0xf8>
 80111d2:	4a0c      	ldr	r2, [pc, #48]	; (8011204 <inc_lock+0x118>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	4413      	add	r3, r2
 80111da:	330c      	adds	r3, #12
 80111dc:	881b      	ldrh	r3, [r3, #0]
 80111de:	3301      	adds	r3, #1
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	e001      	b.n	80111e8 <inc_lock+0xfc>
 80111e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111e8:	4906      	ldr	r1, [pc, #24]	; (8011204 <inc_lock+0x118>)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	011b      	lsls	r3, r3, #4
 80111ee:	440b      	add	r3, r1
 80111f0:	330c      	adds	r3, #12
 80111f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3301      	adds	r3, #1
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20041300 	.word	0x20041300

08011208 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	3b01      	subs	r3, #1
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d825      	bhi.n	8011268 <dec_lock+0x60>
		n = Files[i].ctr;
 801121c:	4a17      	ldr	r2, [pc, #92]	; (801127c <dec_lock+0x74>)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	011b      	lsls	r3, r3, #4
 8011222:	4413      	add	r3, r2
 8011224:	330c      	adds	r3, #12
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801122a:	89fb      	ldrh	r3, [r7, #14]
 801122c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011230:	d101      	bne.n	8011236 <dec_lock+0x2e>
 8011232:	2300      	movs	r3, #0
 8011234:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011236:	89fb      	ldrh	r3, [r7, #14]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d002      	beq.n	8011242 <dec_lock+0x3a>
 801123c:	89fb      	ldrh	r3, [r7, #14]
 801123e:	3b01      	subs	r3, #1
 8011240:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011242:	4a0e      	ldr	r2, [pc, #56]	; (801127c <dec_lock+0x74>)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	011b      	lsls	r3, r3, #4
 8011248:	4413      	add	r3, r2
 801124a:	330c      	adds	r3, #12
 801124c:	89fa      	ldrh	r2, [r7, #14]
 801124e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011250:	89fb      	ldrh	r3, [r7, #14]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d105      	bne.n	8011262 <dec_lock+0x5a>
 8011256:	4a09      	ldr	r2, [pc, #36]	; (801127c <dec_lock+0x74>)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	011b      	lsls	r3, r3, #4
 801125c:	4413      	add	r3, r2
 801125e:	2200      	movs	r2, #0
 8011260:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	737b      	strb	r3, [r7, #13]
 8011266:	e001      	b.n	801126c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011268:	2302      	movs	r3, #2
 801126a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801126c:	7b7b      	ldrb	r3, [r7, #13]
}
 801126e:	4618      	mov	r0, r3
 8011270:	3714      	adds	r7, #20
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	20041300 	.word	0x20041300

08011280 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011288:	2300      	movs	r3, #0
 801128a:	60fb      	str	r3, [r7, #12]
 801128c:	e010      	b.n	80112b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801128e:	4a0d      	ldr	r2, [pc, #52]	; (80112c4 <clear_lock+0x44>)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	011b      	lsls	r3, r3, #4
 8011294:	4413      	add	r3, r2
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	429a      	cmp	r2, r3
 801129c:	d105      	bne.n	80112aa <clear_lock+0x2a>
 801129e:	4a09      	ldr	r2, [pc, #36]	; (80112c4 <clear_lock+0x44>)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	011b      	lsls	r3, r3, #4
 80112a4:	4413      	add	r3, r2
 80112a6:	2200      	movs	r2, #0
 80112a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	3301      	adds	r3, #1
 80112ae:	60fb      	str	r3, [r7, #12]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d9eb      	bls.n	801128e <clear_lock+0xe>
	}
}
 80112b6:	bf00      	nop
 80112b8:	3714      	adds	r7, #20
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	20041300 	.word	0x20041300

080112c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112d0:	2300      	movs	r3, #0
 80112d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	78db      	ldrb	r3, [r3, #3]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d034      	beq.n	8011346 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	7858      	ldrb	r0, [r3, #1]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80112ec:	2301      	movs	r3, #1
 80112ee:	697a      	ldr	r2, [r7, #20]
 80112f0:	f7ff fd40 	bl	8010d74 <disk_write>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d002      	beq.n	8011300 <sync_window+0x38>
			res = FR_DISK_ERR;
 80112fa:	2301      	movs	r3, #1
 80112fc:	73fb      	strb	r3, [r7, #15]
 80112fe:	e022      	b.n	8011346 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801130a:	697a      	ldr	r2, [r7, #20]
 801130c:	1ad2      	subs	r2, r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a1b      	ldr	r3, [r3, #32]
 8011312:	429a      	cmp	r2, r3
 8011314:	d217      	bcs.n	8011346 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	789b      	ldrb	r3, [r3, #2]
 801131a:	613b      	str	r3, [r7, #16]
 801131c:	e010      	b.n	8011340 <sync_window+0x78>
					wsect += fs->fsize;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a1b      	ldr	r3, [r3, #32]
 8011322:	697a      	ldr	r2, [r7, #20]
 8011324:	4413      	add	r3, r2
 8011326:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	7858      	ldrb	r0, [r3, #1]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011332:	2301      	movs	r3, #1
 8011334:	697a      	ldr	r2, [r7, #20]
 8011336:	f7ff fd1d 	bl	8010d74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	3b01      	subs	r3, #1
 801133e:	613b      	str	r3, [r7, #16]
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	2b01      	cmp	r3, #1
 8011344:	d8eb      	bhi.n	801131e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011346:	7bfb      	ldrb	r3, [r7, #15]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801135a:	2300      	movs	r3, #0
 801135c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	d01b      	beq.n	80113a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7ff ffad 	bl	80112c8 <sync_window>
 801136e:	4603      	mov	r3, r0
 8011370:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011372:	7bfb      	ldrb	r3, [r7, #15]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d113      	bne.n	80113a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7858      	ldrb	r0, [r3, #1]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011382:	2301      	movs	r3, #1
 8011384:	683a      	ldr	r2, [r7, #0]
 8011386:	f7ff fcd5 	bl	8010d34 <disk_read>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d004      	beq.n	801139a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011390:	f04f 33ff 	mov.w	r3, #4294967295
 8011394:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011396:	2301      	movs	r3, #1
 8011398:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80113a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3710      	adds	r7, #16
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f7ff ff87 	bl	80112c8 <sync_window>
 80113ba:	4603      	mov	r3, r0
 80113bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113be:	7bfb      	ldrb	r3, [r7, #15]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d159      	bne.n	8011478 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	d149      	bne.n	8011460 <sync_fs+0xb4>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	791b      	ldrb	r3, [r3, #4]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d145      	bne.n	8011460 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	461a      	mov	r2, r3
 80113e0:	2100      	movs	r1, #0
 80113e2:	f7ff fda8 	bl	8010f36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3338      	adds	r3, #56	; 0x38
 80113ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7ff fd37 	bl	8010e66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	3338      	adds	r3, #56	; 0x38
 80113fc:	4921      	ldr	r1, [pc, #132]	; (8011484 <sync_fs+0xd8>)
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff fd4c 	bl	8010e9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	3338      	adds	r3, #56	; 0x38
 8011408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801140c:	491e      	ldr	r1, [pc, #120]	; (8011488 <sync_fs+0xdc>)
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff fd44 	bl	8010e9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	3338      	adds	r3, #56	; 0x38
 8011418:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	4619      	mov	r1, r3
 8011422:	4610      	mov	r0, r2
 8011424:	f7ff fd3a 	bl	8010e9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3338      	adds	r3, #56	; 0x38
 801142c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	4619      	mov	r1, r3
 8011436:	4610      	mov	r0, r2
 8011438:	f7ff fd30 	bl	8010e9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	7858      	ldrb	r0, [r3, #1]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011454:	2301      	movs	r3, #1
 8011456:	f7ff fc8d 	bl	8010d74 <disk_write>
			fs->fsi_flag = 0;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2200      	movs	r2, #0
 801145e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	785b      	ldrb	r3, [r3, #1]
 8011464:	2200      	movs	r2, #0
 8011466:	2100      	movs	r1, #0
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fca3 	bl	8010db4 <disk_ioctl>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <sync_fs+0xcc>
 8011474:	2301      	movs	r3, #1
 8011476:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011478:	7bfb      	ldrb	r3, [r7, #15]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	41615252 	.word	0x41615252
 8011488:	61417272 	.word	0x61417272

0801148c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	3b02      	subs	r3, #2
 801149a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	69db      	ldr	r3, [r3, #28]
 80114a0:	3b02      	subs	r3, #2
 80114a2:	683a      	ldr	r2, [r7, #0]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d301      	bcc.n	80114ac <clust2sect+0x20>
 80114a8:	2300      	movs	r3, #0
 80114aa:	e008      	b.n	80114be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	895b      	ldrh	r3, [r3, #10]
 80114b0:	461a      	mov	r2, r3
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	fb03 f202 	mul.w	r2, r3, r2
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114bc:	4413      	add	r3, r2
}
 80114be:	4618      	mov	r0, r3
 80114c0:	370c      	adds	r7, #12
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr

080114ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b086      	sub	sp, #24
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	2b01      	cmp	r3, #1
 80114de:	d904      	bls.n	80114ea <get_fat+0x20>
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	69db      	ldr	r3, [r3, #28]
 80114e4:	683a      	ldr	r2, [r7, #0]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d302      	bcc.n	80114f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80114ea:	2301      	movs	r3, #1
 80114ec:	617b      	str	r3, [r7, #20]
 80114ee:	e0b7      	b.n	8011660 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80114f0:	f04f 33ff 	mov.w	r3, #4294967295
 80114f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d05a      	beq.n	80115b4 <get_fat+0xea>
 80114fe:	2b03      	cmp	r3, #3
 8011500:	d07d      	beq.n	80115fe <get_fat+0x134>
 8011502:	2b01      	cmp	r3, #1
 8011504:	f040 80a2 	bne.w	801164c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	60fb      	str	r3, [r7, #12]
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	085b      	lsrs	r3, r3, #1
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	4413      	add	r3, r2
 8011514:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	4619      	mov	r1, r3
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	fbb3 f3f1 	udiv	r3, r3, r1
 8011526:	4413      	add	r3, r2
 8011528:	4619      	mov	r1, r3
 801152a:	6938      	ldr	r0, [r7, #16]
 801152c:	f7ff ff10 	bl	8011350 <move_window>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 808d 	bne.w	8011652 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	1c5a      	adds	r2, r3, #1
 801153c:	60fa      	str	r2, [r7, #12]
 801153e:	693a      	ldr	r2, [r7, #16]
 8011540:	8992      	ldrh	r2, [r2, #12]
 8011542:	fbb3 f1f2 	udiv	r1, r3, r2
 8011546:	fb02 f201 	mul.w	r2, r2, r1
 801154a:	1a9b      	subs	r3, r3, r2
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	4413      	add	r3, r2
 8011550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011554:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	899b      	ldrh	r3, [r3, #12]
 801155e:	4619      	mov	r1, r3
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	fbb3 f3f1 	udiv	r3, r3, r1
 8011566:	4413      	add	r3, r2
 8011568:	4619      	mov	r1, r3
 801156a:	6938      	ldr	r0, [r7, #16]
 801156c:	f7ff fef0 	bl	8011350 <move_window>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d16f      	bne.n	8011656 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	899b      	ldrh	r3, [r3, #12]
 801157a:	461a      	mov	r2, r3
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011582:	fb02 f201 	mul.w	r2, r2, r1
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	4413      	add	r3, r2
 801158c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011590:	021b      	lsls	r3, r3, #8
 8011592:	461a      	mov	r2, r3
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	4313      	orrs	r3, r2
 8011598:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <get_fat+0xe0>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	091b      	lsrs	r3, r3, #4
 80115a8:	e002      	b.n	80115b0 <get_fat+0xe6>
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115b0:	617b      	str	r3, [r7, #20]
			break;
 80115b2:	e055      	b.n	8011660 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	899b      	ldrh	r3, [r3, #12]
 80115bc:	085b      	lsrs	r3, r3, #1
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4619      	mov	r1, r3
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80115c8:	4413      	add	r3, r2
 80115ca:	4619      	mov	r1, r3
 80115cc:	6938      	ldr	r0, [r7, #16]
 80115ce:	f7ff febf 	bl	8011350 <move_window>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d140      	bne.n	801165a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	005b      	lsls	r3, r3, #1
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	8992      	ldrh	r2, [r2, #12]
 80115e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80115ea:	fb02 f200 	mul.w	r2, r2, r0
 80115ee:	1a9b      	subs	r3, r3, r2
 80115f0:	440b      	add	r3, r1
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7ff fbfc 	bl	8010df0 <ld_word>
 80115f8:	4603      	mov	r3, r0
 80115fa:	617b      	str	r3, [r7, #20]
			break;
 80115fc:	e030      	b.n	8011660 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	899b      	ldrh	r3, [r3, #12]
 8011606:	089b      	lsrs	r3, r3, #2
 8011608:	b29b      	uxth	r3, r3
 801160a:	4619      	mov	r1, r3
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011612:	4413      	add	r3, r2
 8011614:	4619      	mov	r1, r3
 8011616:	6938      	ldr	r0, [r7, #16]
 8011618:	f7ff fe9a 	bl	8011350 <move_window>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d11d      	bne.n	801165e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	8992      	ldrh	r2, [r2, #12]
 8011630:	fbb3 f0f2 	udiv	r0, r3, r2
 8011634:	fb02 f200 	mul.w	r2, r2, r0
 8011638:	1a9b      	subs	r3, r3, r2
 801163a:	440b      	add	r3, r1
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff fbef 	bl	8010e20 <ld_dword>
 8011642:	4603      	mov	r3, r0
 8011644:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011648:	617b      	str	r3, [r7, #20]
			break;
 801164a:	e009      	b.n	8011660 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801164c:	2301      	movs	r3, #1
 801164e:	617b      	str	r3, [r7, #20]
 8011650:	e006      	b.n	8011660 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011652:	bf00      	nop
 8011654:	e004      	b.n	8011660 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011656:	bf00      	nop
 8011658:	e002      	b.n	8011660 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801165a:	bf00      	nop
 801165c:	e000      	b.n	8011660 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801165e:	bf00      	nop
		}
	}

	return val;
 8011660:	697b      	ldr	r3, [r7, #20]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801166a:	b590      	push	{r4, r7, lr}
 801166c:	b089      	sub	sp, #36	; 0x24
 801166e:	af00      	add	r7, sp, #0
 8011670:	60f8      	str	r0, [r7, #12]
 8011672:	60b9      	str	r1, [r7, #8]
 8011674:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011676:	2302      	movs	r3, #2
 8011678:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	2b01      	cmp	r3, #1
 801167e:	f240 8106 	bls.w	801188e <put_fat+0x224>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	69db      	ldr	r3, [r3, #28]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	429a      	cmp	r2, r3
 801168a:	f080 8100 	bcs.w	801188e <put_fat+0x224>
		switch (fs->fs_type) {
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	2b02      	cmp	r3, #2
 8011694:	f000 8088 	beq.w	80117a8 <put_fat+0x13e>
 8011698:	2b03      	cmp	r3, #3
 801169a:	f000 80b0 	beq.w	80117fe <put_fat+0x194>
 801169e:	2b01      	cmp	r3, #1
 80116a0:	f040 80f5 	bne.w	801188e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	61bb      	str	r3, [r7, #24]
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	085b      	lsrs	r3, r3, #1
 80116ac:	69ba      	ldr	r2, [r7, #24]
 80116ae:	4413      	add	r3, r2
 80116b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	899b      	ldrh	r3, [r3, #12]
 80116ba:	4619      	mov	r1, r3
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	fbb3 f3f1 	udiv	r3, r3, r1
 80116c2:	4413      	add	r3, r2
 80116c4:	4619      	mov	r1, r3
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f7ff fe42 	bl	8011350 <move_window>
 80116cc:	4603      	mov	r3, r0
 80116ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116d0:	7ffb      	ldrb	r3, [r7, #31]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f040 80d4 	bne.w	8011880 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	1c5a      	adds	r2, r3, #1
 80116e2:	61ba      	str	r2, [r7, #24]
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	8992      	ldrh	r2, [r2, #12]
 80116e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80116ec:	fb02 f200 	mul.w	r2, r2, r0
 80116f0:	1a9b      	subs	r3, r3, r2
 80116f2:	440b      	add	r3, r1
 80116f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d00d      	beq.n	801171c <put_fat+0xb2>
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	b25b      	sxtb	r3, r3
 8011706:	f003 030f 	and.w	r3, r3, #15
 801170a:	b25a      	sxtb	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	b2db      	uxtb	r3, r3
 8011710:	011b      	lsls	r3, r3, #4
 8011712:	b25b      	sxtb	r3, r3
 8011714:	4313      	orrs	r3, r2
 8011716:	b25b      	sxtb	r3, r3
 8011718:	b2db      	uxtb	r3, r3
 801171a:	e001      	b.n	8011720 <put_fat+0xb6>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	b2db      	uxtb	r3, r3
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2201      	movs	r2, #1
 8011728:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	899b      	ldrh	r3, [r3, #12]
 8011732:	4619      	mov	r1, r3
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	fbb3 f3f1 	udiv	r3, r3, r1
 801173a:	4413      	add	r3, r2
 801173c:	4619      	mov	r1, r3
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7ff fe06 	bl	8011350 <move_window>
 8011744:	4603      	mov	r3, r0
 8011746:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011748:	7ffb      	ldrb	r3, [r7, #31]
 801174a:	2b00      	cmp	r3, #0
 801174c:	f040 809a 	bne.w	8011884 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	899b      	ldrh	r3, [r3, #12]
 801175a:	461a      	mov	r2, r3
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011762:	fb02 f200 	mul.w	r2, r2, r0
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	440b      	add	r3, r1
 801176a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	f003 0301 	and.w	r3, r3, #1
 8011772:	2b00      	cmp	r3, #0
 8011774:	d003      	beq.n	801177e <put_fat+0x114>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	091b      	lsrs	r3, r3, #4
 801177a:	b2db      	uxtb	r3, r3
 801177c:	e00e      	b.n	801179c <put_fat+0x132>
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	781b      	ldrb	r3, [r3, #0]
 8011782:	b25b      	sxtb	r3, r3
 8011784:	f023 030f 	bic.w	r3, r3, #15
 8011788:	b25a      	sxtb	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	0a1b      	lsrs	r3, r3, #8
 801178e:	b25b      	sxtb	r3, r3
 8011790:	f003 030f 	and.w	r3, r3, #15
 8011794:	b25b      	sxtb	r3, r3
 8011796:	4313      	orrs	r3, r2
 8011798:	b25b      	sxtb	r3, r3
 801179a:	b2db      	uxtb	r3, r3
 801179c:	697a      	ldr	r2, [r7, #20]
 801179e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2201      	movs	r2, #1
 80117a4:	70da      	strb	r2, [r3, #3]
			break;
 80117a6:	e072      	b.n	801188e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	899b      	ldrh	r3, [r3, #12]
 80117b0:	085b      	lsrs	r3, r3, #1
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	4619      	mov	r1, r3
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80117bc:	4413      	add	r3, r2
 80117be:	4619      	mov	r1, r3
 80117c0:	68f8      	ldr	r0, [r7, #12]
 80117c2:	f7ff fdc5 	bl	8011350 <move_window>
 80117c6:	4603      	mov	r3, r0
 80117c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117ca:	7ffb      	ldrb	r3, [r7, #31]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d15b      	bne.n	8011888 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	005b      	lsls	r3, r3, #1
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	8992      	ldrh	r2, [r2, #12]
 80117de:	fbb3 f0f2 	udiv	r0, r3, r2
 80117e2:	fb02 f200 	mul.w	r2, r2, r0
 80117e6:	1a9b      	subs	r3, r3, r2
 80117e8:	440b      	add	r3, r1
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	b292      	uxth	r2, r2
 80117ee:	4611      	mov	r1, r2
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7ff fb38 	bl	8010e66 <st_word>
			fs->wflag = 1;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2201      	movs	r2, #1
 80117fa:	70da      	strb	r2, [r3, #3]
			break;
 80117fc:	e047      	b.n	801188e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	899b      	ldrh	r3, [r3, #12]
 8011806:	089b      	lsrs	r3, r3, #2
 8011808:	b29b      	uxth	r3, r3
 801180a:	4619      	mov	r1, r3
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011812:	4413      	add	r3, r2
 8011814:	4619      	mov	r1, r3
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f7ff fd9a 	bl	8011350 <move_window>
 801181c:	4603      	mov	r3, r0
 801181e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011820:	7ffb      	ldrb	r3, [r7, #31]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d132      	bne.n	801188c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	8992      	ldrh	r2, [r2, #12]
 801183a:	fbb3 f0f2 	udiv	r0, r3, r2
 801183e:	fb02 f200 	mul.w	r2, r2, r0
 8011842:	1a9b      	subs	r3, r3, r2
 8011844:	440b      	add	r3, r1
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff faea 	bl	8010e20 <ld_dword>
 801184c:	4603      	mov	r3, r0
 801184e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011852:	4323      	orrs	r3, r4
 8011854:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	8992      	ldrh	r2, [r2, #12]
 8011864:	fbb3 f0f2 	udiv	r0, r3, r2
 8011868:	fb02 f200 	mul.w	r2, r2, r0
 801186c:	1a9b      	subs	r3, r3, r2
 801186e:	440b      	add	r3, r1
 8011870:	6879      	ldr	r1, [r7, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	f7ff fb12 	bl	8010e9c <st_dword>
			fs->wflag = 1;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2201      	movs	r2, #1
 801187c:	70da      	strb	r2, [r3, #3]
			break;
 801187e:	e006      	b.n	801188e <put_fat+0x224>
			if (res != FR_OK) break;
 8011880:	bf00      	nop
 8011882:	e004      	b.n	801188e <put_fat+0x224>
			if (res != FR_OK) break;
 8011884:	bf00      	nop
 8011886:	e002      	b.n	801188e <put_fat+0x224>
			if (res != FR_OK) break;
 8011888:	bf00      	nop
 801188a:	e000      	b.n	801188e <put_fat+0x224>
			if (res != FR_OK) break;
 801188c:	bf00      	nop
		}
	}
	return res;
 801188e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3724      	adds	r7, #36	; 0x24
 8011894:	46bd      	mov	sp, r7
 8011896:	bd90      	pop	{r4, r7, pc}

08011898 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b088      	sub	sp, #32
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80118a4:	2300      	movs	r3, #0
 80118a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d904      	bls.n	80118be <remove_chain+0x26>
 80118b4:	69bb      	ldr	r3, [r7, #24]
 80118b6:	69db      	ldr	r3, [r3, #28]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d301      	bcc.n	80118c2 <remove_chain+0x2a>
 80118be:	2302      	movs	r3, #2
 80118c0:	e04b      	b.n	801195a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00c      	beq.n	80118e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80118c8:	f04f 32ff 	mov.w	r2, #4294967295
 80118cc:	6879      	ldr	r1, [r7, #4]
 80118ce:	69b8      	ldr	r0, [r7, #24]
 80118d0:	f7ff fecb 	bl	801166a <put_fat>
 80118d4:	4603      	mov	r3, r0
 80118d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80118d8:	7ffb      	ldrb	r3, [r7, #31]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <remove_chain+0x4a>
 80118de:	7ffb      	ldrb	r3, [r7, #31]
 80118e0:	e03b      	b.n	801195a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f7ff fdf0 	bl	80114ca <get_fat>
 80118ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d031      	beq.n	8011956 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d101      	bne.n	80118fc <remove_chain+0x64>
 80118f8:	2302      	movs	r3, #2
 80118fa:	e02e      	b.n	801195a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011902:	d101      	bne.n	8011908 <remove_chain+0x70>
 8011904:	2301      	movs	r3, #1
 8011906:	e028      	b.n	801195a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011908:	2200      	movs	r2, #0
 801190a:	68b9      	ldr	r1, [r7, #8]
 801190c:	69b8      	ldr	r0, [r7, #24]
 801190e:	f7ff feac 	bl	801166a <put_fat>
 8011912:	4603      	mov	r3, r0
 8011914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011916:	7ffb      	ldrb	r3, [r7, #31]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d001      	beq.n	8011920 <remove_chain+0x88>
 801191c:	7ffb      	ldrb	r3, [r7, #31]
 801191e:	e01c      	b.n	801195a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011920:	69bb      	ldr	r3, [r7, #24]
 8011922:	695a      	ldr	r2, [r3, #20]
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	69db      	ldr	r3, [r3, #28]
 8011928:	3b02      	subs	r3, #2
 801192a:	429a      	cmp	r2, r3
 801192c:	d20b      	bcs.n	8011946 <remove_chain+0xae>
			fs->free_clst++;
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	1c5a      	adds	r2, r3, #1
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	791b      	ldrb	r3, [r3, #4]
 801193c:	f043 0301 	orr.w	r3, r3, #1
 8011940:	b2da      	uxtb	r2, r3
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	69db      	ldr	r3, [r3, #28]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	429a      	cmp	r2, r3
 8011952:	d3c6      	bcc.n	80118e2 <remove_chain+0x4a>
 8011954:	e000      	b.n	8011958 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011956:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	3720      	adds	r7, #32
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011962:	b580      	push	{r7, lr}
 8011964:	b088      	sub	sp, #32
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10d      	bne.n	8011994 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	691b      	ldr	r3, [r3, #16]
 801197c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d004      	beq.n	801198e <create_chain+0x2c>
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	69db      	ldr	r3, [r3, #28]
 8011988:	69ba      	ldr	r2, [r7, #24]
 801198a:	429a      	cmp	r2, r3
 801198c:	d31b      	bcc.n	80119c6 <create_chain+0x64>
 801198e:	2301      	movs	r3, #1
 8011990:	61bb      	str	r3, [r7, #24]
 8011992:	e018      	b.n	80119c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011994:	6839      	ldr	r1, [r7, #0]
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7ff fd97 	bl	80114ca <get_fat>
 801199c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d801      	bhi.n	80119a8 <create_chain+0x46>
 80119a4:	2301      	movs	r3, #1
 80119a6:	e070      	b.n	8011a8a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ae:	d101      	bne.n	80119b4 <create_chain+0x52>
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	e06a      	b.n	8011a8a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	69db      	ldr	r3, [r3, #28]
 80119b8:	68fa      	ldr	r2, [r7, #12]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d201      	bcs.n	80119c2 <create_chain+0x60>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	e063      	b.n	8011a8a <create_chain+0x128>
		scl = clst;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	3301      	adds	r3, #1
 80119ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	69db      	ldr	r3, [r3, #28]
 80119d4:	69fa      	ldr	r2, [r7, #28]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d307      	bcc.n	80119ea <create_chain+0x88>
				ncl = 2;
 80119da:	2302      	movs	r3, #2
 80119dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80119de:	69fa      	ldr	r2, [r7, #28]
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d901      	bls.n	80119ea <create_chain+0x88>
 80119e6:	2300      	movs	r3, #0
 80119e8:	e04f      	b.n	8011a8a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119ea:	69f9      	ldr	r1, [r7, #28]
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f7ff fd6c 	bl	80114ca <get_fat>
 80119f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00e      	beq.n	8011a18 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d003      	beq.n	8011a08 <create_chain+0xa6>
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a06:	d101      	bne.n	8011a0c <create_chain+0xaa>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	e03e      	b.n	8011a8a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011a0c:	69fa      	ldr	r2, [r7, #28]
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d1da      	bne.n	80119ca <create_chain+0x68>
 8011a14:	2300      	movs	r3, #0
 8011a16:	e038      	b.n	8011a8a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011a18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1e:	69f9      	ldr	r1, [r7, #28]
 8011a20:	6938      	ldr	r0, [r7, #16]
 8011a22:	f7ff fe22 	bl	801166a <put_fat>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d109      	bne.n	8011a44 <create_chain+0xe2>
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d006      	beq.n	8011a44 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011a36:	69fa      	ldr	r2, [r7, #28]
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	6938      	ldr	r0, [r7, #16]
 8011a3c:	f7ff fe15 	bl	801166a <put_fat>
 8011a40:	4603      	mov	r3, r0
 8011a42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a44:	7dfb      	ldrb	r3, [r7, #23]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d116      	bne.n	8011a78 <create_chain+0x116>
		fs->last_clst = ncl;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	69fa      	ldr	r2, [r7, #28]
 8011a4e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	695a      	ldr	r2, [r3, #20]
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	3b02      	subs	r3, #2
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d804      	bhi.n	8011a68 <create_chain+0x106>
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	695b      	ldr	r3, [r3, #20]
 8011a62:	1e5a      	subs	r2, r3, #1
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	791b      	ldrb	r3, [r3, #4]
 8011a6c:	f043 0301 	orr.w	r3, r3, #1
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	711a      	strb	r2, [r3, #4]
 8011a76:	e007      	b.n	8011a88 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a78:	7dfb      	ldrb	r3, [r7, #23]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d102      	bne.n	8011a84 <create_chain+0x122>
 8011a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a82:	e000      	b.n	8011a86 <create_chain+0x124>
 8011a84:	2301      	movs	r3, #1
 8011a86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a88:	69fb      	ldr	r3, [r7, #28]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3720      	adds	r7, #32
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011a92:	b480      	push	{r7}
 8011a94:	b087      	sub	sp, #28
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
 8011a9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	899b      	ldrh	r3, [r3, #12]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	8952      	ldrh	r2, [r2, #10]
 8011aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8011abe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	1d1a      	adds	r2, r3, #4
 8011ac4:	613a      	str	r2, [r7, #16]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d101      	bne.n	8011ad4 <clmt_clust+0x42>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e010      	b.n	8011af6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011ad4:	697a      	ldr	r2, [r7, #20]
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d307      	bcc.n	8011aec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	1ad3      	subs	r3, r2, r3
 8011ae2:	617b      	str	r3, [r7, #20]
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011aea:	e7e9      	b.n	8011ac0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011aec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	4413      	add	r3, r2
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	371c      	adds	r7, #28
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr

08011b02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b086      	sub	sp, #24
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b18:	d204      	bcs.n	8011b24 <dir_sdi+0x22>
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	f003 031f 	and.w	r3, r3, #31
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011b24:	2302      	movs	r3, #2
 8011b26:	e071      	b.n	8011c0c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	683a      	ldr	r2, [r7, #0]
 8011b2c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d106      	bne.n	8011b48 <dir_sdi+0x46>
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b02      	cmp	r3, #2
 8011b40:	d902      	bls.n	8011b48 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d10c      	bne.n	8011b68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	095b      	lsrs	r3, r3, #5
 8011b52:	693a      	ldr	r2, [r7, #16]
 8011b54:	8912      	ldrh	r2, [r2, #8]
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d301      	bcc.n	8011b5e <dir_sdi+0x5c>
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	e056      	b.n	8011c0c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	61da      	str	r2, [r3, #28]
 8011b66:	e02d      	b.n	8011bc4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	895b      	ldrh	r3, [r3, #10]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	899b      	ldrh	r3, [r3, #12]
 8011b72:	fb03 f302 	mul.w	r3, r3, r2
 8011b76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b78:	e019      	b.n	8011bae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6979      	ldr	r1, [r7, #20]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff fca3 	bl	80114ca <get_fat>
 8011b84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8c:	d101      	bne.n	8011b92 <dir_sdi+0x90>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e03c      	b.n	8011c0c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d904      	bls.n	8011ba2 <dir_sdi+0xa0>
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	69db      	ldr	r3, [r3, #28]
 8011b9c:	697a      	ldr	r2, [r7, #20]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d301      	bcc.n	8011ba6 <dir_sdi+0xa4>
 8011ba2:	2302      	movs	r3, #2
 8011ba4:	e032      	b.n	8011c0c <dir_sdi+0x10a>
			ofs -= csz;
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d2e1      	bcs.n	8011b7a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011bb6:	6979      	ldr	r1, [r7, #20]
 8011bb8:	6938      	ldr	r0, [r7, #16]
 8011bba:	f7ff fc67 	bl	801148c <clust2sect>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	697a      	ldr	r2, [r7, #20]
 8011bc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	69db      	ldr	r3, [r3, #28]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <dir_sdi+0xd4>
 8011bd2:	2302      	movs	r3, #2
 8011bd4:	e01a      	b.n	8011c0c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	69da      	ldr	r2, [r3, #28]
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	4619      	mov	r1, r3
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011be6:	441a      	add	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	899b      	ldrh	r3, [r3, #12]
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bfe:	fb02 f200 	mul.w	r2, r2, r0
 8011c02:	1a9b      	subs	r3, r3, r2
 8011c04:	18ca      	adds	r2, r1, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011c0a:	2300      	movs	r3, #0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	3320      	adds	r3, #32
 8011c2a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	69db      	ldr	r3, [r3, #28]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d003      	beq.n	8011c3c <dir_next+0x28>
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c3a:	d301      	bcc.n	8011c40 <dir_next+0x2c>
 8011c3c:	2304      	movs	r3, #4
 8011c3e:	e0bb      	b.n	8011db8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	899b      	ldrh	r3, [r3, #12]
 8011c44:	461a      	mov	r2, r3
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c4c:	fb02 f201 	mul.w	r2, r2, r1
 8011c50:	1a9b      	subs	r3, r3, r2
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f040 809d 	bne.w	8011d92 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	699b      	ldr	r3, [r3, #24]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d10b      	bne.n	8011c82 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	095b      	lsrs	r3, r3, #5
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	8912      	ldrh	r2, [r2, #8]
 8011c72:	4293      	cmp	r3, r2
 8011c74:	f0c0 808d 	bcc.w	8011d92 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	61da      	str	r2, [r3, #28]
 8011c7e:	2304      	movs	r3, #4
 8011c80:	e09a      	b.n	8011db8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	461a      	mov	r2, r3
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	8952      	ldrh	r2, [r2, #10]
 8011c92:	3a01      	subs	r2, #1
 8011c94:	4013      	ands	r3, r2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d17b      	bne.n	8011d92 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7ff fc11 	bl	80114ca <get_fat>
 8011ca8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d801      	bhi.n	8011cb4 <dir_next+0xa0>
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	e081      	b.n	8011db8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cba:	d101      	bne.n	8011cc0 <dir_next+0xac>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e07b      	b.n	8011db8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	697a      	ldr	r2, [r7, #20]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d359      	bcc.n	8011d7e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d104      	bne.n	8011cda <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	61da      	str	r2, [r3, #28]
 8011cd6:	2304      	movs	r3, #4
 8011cd8:	e06e      	b.n	8011db8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	699b      	ldr	r3, [r3, #24]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	4610      	mov	r0, r2
 8011ce4:	f7ff fe3d 	bl	8011962 <create_chain>
 8011ce8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d101      	bne.n	8011cf4 <dir_next+0xe0>
 8011cf0:	2307      	movs	r3, #7
 8011cf2:	e061      	b.n	8011db8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d101      	bne.n	8011cfe <dir_next+0xea>
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e05c      	b.n	8011db8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d04:	d101      	bne.n	8011d0a <dir_next+0xf6>
 8011d06:	2301      	movs	r3, #1
 8011d08:	e056      	b.n	8011db8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f7ff fadc 	bl	80112c8 <sync_window>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <dir_next+0x106>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e04e      	b.n	8011db8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	899b      	ldrh	r3, [r3, #12]
 8011d24:	461a      	mov	r2, r3
 8011d26:	2100      	movs	r1, #0
 8011d28:	f7ff f905 	bl	8010f36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	613b      	str	r3, [r7, #16]
 8011d30:	6979      	ldr	r1, [r7, #20]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f7ff fbaa 	bl	801148c <clust2sect>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8011d3e:	e012      	b.n	8011d66 <dir_next+0x152>
						fs->wflag = 1;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2201      	movs	r2, #1
 8011d44:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f7ff fabe 	bl	80112c8 <sync_window>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d001      	beq.n	8011d56 <dir_next+0x142>
 8011d52:	2301      	movs	r3, #1
 8011d54:	e030      	b.n	8011db8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	613b      	str	r3, [r7, #16]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d60:	1c5a      	adds	r2, r3, #1
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	635a      	str	r2, [r3, #52]	; 0x34
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	895b      	ldrh	r3, [r3, #10]
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d3e6      	bcc.n	8011d40 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	1ad2      	subs	r2, r2, r3
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	697a      	ldr	r2, [r7, #20]
 8011d82:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d84:	6979      	ldr	r1, [r7, #20]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f7ff fb80 	bl	801148c <clust2sect>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68ba      	ldr	r2, [r7, #8]
 8011d96:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	899b      	ldrh	r3, [r3, #12]
 8011da2:	461a      	mov	r2, r3
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011daa:	fb02 f200 	mul.w	r2, r2, r0
 8011dae:	1a9b      	subs	r3, r3, r2
 8011db0:	18ca      	adds	r2, r1, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7ff fe95 	bl	8011b02 <dir_sdi>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d12b      	bne.n	8011e3a <dir_alloc+0x7a>
		n = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	69db      	ldr	r3, [r3, #28]
 8011dea:	4619      	mov	r1, r3
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f7ff faaf 	bl	8011350 <move_window>
 8011df2:	4603      	mov	r3, r0
 8011df4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011df6:	7dfb      	ldrb	r3, [r7, #23]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d11d      	bne.n	8011e38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6a1b      	ldr	r3, [r3, #32]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2be5      	cmp	r3, #229	; 0xe5
 8011e04:	d004      	beq.n	8011e10 <dir_alloc+0x50>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6a1b      	ldr	r3, [r3, #32]
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d107      	bne.n	8011e20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	3301      	adds	r3, #1
 8011e14:	613b      	str	r3, [r7, #16]
 8011e16:	693a      	ldr	r2, [r7, #16]
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d102      	bne.n	8011e24 <dir_alloc+0x64>
 8011e1e:	e00c      	b.n	8011e3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011e20:	2300      	movs	r3, #0
 8011e22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011e24:	2101      	movs	r1, #1
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff fef4 	bl	8011c14 <dir_next>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011e30:	7dfb      	ldrb	r3, [r7, #23]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d0d7      	beq.n	8011de6 <dir_alloc+0x26>
 8011e36:	e000      	b.n	8011e3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011e38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	2b04      	cmp	r3, #4
 8011e3e:	d101      	bne.n	8011e44 <dir_alloc+0x84>
 8011e40:	2307      	movs	r3, #7
 8011e42:	75fb      	strb	r3, [r7, #23]
	return res;
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3718      	adds	r7, #24
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b084      	sub	sp, #16
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	331a      	adds	r3, #26
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7fe ffc7 	bl	8010df0 <ld_word>
 8011e62:	4603      	mov	r3, r0
 8011e64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	2b03      	cmp	r3, #3
 8011e6c:	d109      	bne.n	8011e82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	3314      	adds	r3, #20
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fe ffbc 	bl	8010df0 <ld_word>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	041b      	lsls	r3, r3, #16
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e82:	68fb      	ldr	r3, [r7, #12]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	331a      	adds	r3, #26
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	b292      	uxth	r2, r2
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fe ffdf 	bl	8010e66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	2b03      	cmp	r3, #3
 8011eae:	d109      	bne.n	8011ec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	f103 0214 	add.w	r2, r3, #20
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	0c1b      	lsrs	r3, r3, #16
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	f7fe ffd1 	bl	8010e66 <st_word>
	}
}
 8011ec4:	bf00      	nop
 8011ec6:	3710      	adds	r7, #16
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011ed6:	2304      	movs	r3, #4
 8011ed8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011ee0:	e03c      	b.n	8011f5c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	69db      	ldr	r3, [r3, #28]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	6938      	ldr	r0, [r7, #16]
 8011eea:	f7ff fa31 	bl	8011350 <move_window>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d136      	bne.n	8011f66 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6a1b      	ldr	r3, [r3, #32]
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011f00:	7bfb      	ldrb	r3, [r7, #15]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d102      	bne.n	8011f0c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011f06:	2304      	movs	r3, #4
 8011f08:	75fb      	strb	r3, [r7, #23]
 8011f0a:	e031      	b.n	8011f70 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6a1b      	ldr	r3, [r3, #32]
 8011f10:	330b      	adds	r3, #11
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f18:	73bb      	strb	r3, [r7, #14]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	7bba      	ldrb	r2, [r7, #14]
 8011f1e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011f20:	7bfb      	ldrb	r3, [r7, #15]
 8011f22:	2be5      	cmp	r3, #229	; 0xe5
 8011f24:	d011      	beq.n	8011f4a <dir_read+0x7e>
 8011f26:	7bfb      	ldrb	r3, [r7, #15]
 8011f28:	2b2e      	cmp	r3, #46	; 0x2e
 8011f2a:	d00e      	beq.n	8011f4a <dir_read+0x7e>
 8011f2c:	7bbb      	ldrb	r3, [r7, #14]
 8011f2e:	2b0f      	cmp	r3, #15
 8011f30:	d00b      	beq.n	8011f4a <dir_read+0x7e>
 8011f32:	7bbb      	ldrb	r3, [r7, #14]
 8011f34:	f023 0320 	bic.w	r3, r3, #32
 8011f38:	2b08      	cmp	r3, #8
 8011f3a:	bf0c      	ite	eq
 8011f3c:	2301      	moveq	r3, #1
 8011f3e:	2300      	movne	r3, #0
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	461a      	mov	r2, r3
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	d00f      	beq.n	8011f6a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f7ff fe61 	bl	8011c14 <dir_next>
 8011f52:	4603      	mov	r3, r0
 8011f54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f56:	7dfb      	ldrb	r3, [r7, #23]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d108      	bne.n	8011f6e <dir_read+0xa2>
	while (dp->sect) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	69db      	ldr	r3, [r3, #28]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1be      	bne.n	8011ee2 <dir_read+0x16>
 8011f64:	e004      	b.n	8011f70 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f66:	bf00      	nop
 8011f68:	e002      	b.n	8011f70 <dir_read+0xa4>
				break;
 8011f6a:	bf00      	nop
 8011f6c:	e000      	b.n	8011f70 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f6e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d002      	beq.n	8011f7c <dir_read+0xb0>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	61da      	str	r2, [r3, #28]
	return res;
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3718      	adds	r7, #24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f86:	b580      	push	{r7, lr}
 8011f88:	b086      	sub	sp, #24
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f94:	2100      	movs	r1, #0
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7ff fdb3 	bl	8011b02 <dir_sdi>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <dir_find+0x24>
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	e03e      	b.n	8012028 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	69db      	ldr	r3, [r3, #28]
 8011fae:	4619      	mov	r1, r3
 8011fb0:	6938      	ldr	r0, [r7, #16]
 8011fb2:	f7ff f9cd 	bl	8011350 <move_window>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011fba:	7dfb      	ldrb	r3, [r7, #23]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d12f      	bne.n	8012020 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6a1b      	ldr	r3, [r3, #32]
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d102      	bne.n	8011fd4 <dir_find+0x4e>
 8011fce:	2304      	movs	r3, #4
 8011fd0:	75fb      	strb	r3, [r7, #23]
 8011fd2:	e028      	b.n	8012026 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a1b      	ldr	r3, [r3, #32]
 8011fd8:	330b      	adds	r3, #11
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	330b      	adds	r3, #11
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	f003 0308 	and.w	r3, r3, #8
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d10a      	bne.n	801200c <dir_find+0x86>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a18      	ldr	r0, [r3, #32]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	3324      	adds	r3, #36	; 0x24
 8011ffe:	220b      	movs	r2, #11
 8012000:	4619      	mov	r1, r3
 8012002:	f7fe ffb2 	bl	8010f6a <mem_cmp>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d00b      	beq.n	8012024 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801200c:	2100      	movs	r1, #0
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7ff fe00 	bl	8011c14 <dir_next>
 8012014:	4603      	mov	r3, r0
 8012016:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012018:	7dfb      	ldrb	r3, [r7, #23]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d0c5      	beq.n	8011faa <dir_find+0x24>
 801201e:	e002      	b.n	8012026 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012020:	bf00      	nop
 8012022:	e000      	b.n	8012026 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012024:	bf00      	nop

	return res;
 8012026:	7dfb      	ldrb	r3, [r7, #23]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3718      	adds	r7, #24
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801203e:	2101      	movs	r1, #1
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff febd 	bl	8011dc0 <dir_alloc>
 8012046:	4603      	mov	r3, r0
 8012048:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801204a:	7bfb      	ldrb	r3, [r7, #15]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d11c      	bne.n	801208a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	69db      	ldr	r3, [r3, #28]
 8012054:	4619      	mov	r1, r3
 8012056:	68b8      	ldr	r0, [r7, #8]
 8012058:	f7ff f97a 	bl	8011350 <move_window>
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d111      	bne.n	801208a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6a1b      	ldr	r3, [r3, #32]
 801206a:	2220      	movs	r2, #32
 801206c:	2100      	movs	r1, #0
 801206e:	4618      	mov	r0, r3
 8012070:	f7fe ff61 	bl	8010f36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6a18      	ldr	r0, [r3, #32]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3324      	adds	r3, #36	; 0x24
 801207c:	220b      	movs	r2, #11
 801207e:	4619      	mov	r1, r3
 8012080:	f7fe ff38 	bl	8010ef4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	2201      	movs	r2, #1
 8012088:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801208a:	7bfb      	ldrb	r3, [r7, #15]
}
 801208c:	4618      	mov	r0, r3
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	4619      	mov	r1, r3
 80120a8:	68f8      	ldr	r0, [r7, #12]
 80120aa:	f7ff f951 	bl	8011350 <move_window>
 80120ae:	4603      	mov	r3, r0
 80120b0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80120b2:	7afb      	ldrb	r3, [r7, #11]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d106      	bne.n	80120c6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6a1b      	ldr	r3, [r3, #32]
 80120bc:	22e5      	movs	r2, #229	; 0xe5
 80120be:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2201      	movs	r2, #1
 80120c4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80120c6:	7afb      	ldrb	r3, [r7, #11]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b088      	sub	sp, #32
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	60fb      	str	r3, [r7, #12]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	3324      	adds	r3, #36	; 0x24
 80120e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80120e6:	220b      	movs	r2, #11
 80120e8:	2120      	movs	r1, #32
 80120ea:	68b8      	ldr	r0, [r7, #8]
 80120ec:	f7fe ff23 	bl	8010f36 <mem_set>
	si = i = 0; ni = 8;
 80120f0:	2300      	movs	r3, #0
 80120f2:	613b      	str	r3, [r7, #16]
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	617b      	str	r3, [r7, #20]
 80120f8:	2308      	movs	r3, #8
 80120fa:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	4413      	add	r3, r2
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b2e      	cmp	r3, #46	; 0x2e
 8012106:	d12f      	bne.n	8012168 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	617a      	str	r2, [r7, #20]
 801210e:	68fa      	ldr	r2, [r7, #12]
 8012110:	4413      	add	r3, r2
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012116:	7ffb      	ldrb	r3, [r7, #31]
 8012118:	2b2e      	cmp	r3, #46	; 0x2e
 801211a:	d10a      	bne.n	8012132 <create_name+0x62>
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	2b02      	cmp	r3, #2
 8012120:	d807      	bhi.n	8012132 <create_name+0x62>
			sfn[i++] = c;
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	1c5a      	adds	r2, r3, #1
 8012126:	613a      	str	r2, [r7, #16]
 8012128:	68ba      	ldr	r2, [r7, #8]
 801212a:	4413      	add	r3, r2
 801212c:	7ffa      	ldrb	r2, [r7, #31]
 801212e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012130:	e7ea      	b.n	8012108 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012132:	7ffb      	ldrb	r3, [r7, #31]
 8012134:	2b2f      	cmp	r3, #47	; 0x2f
 8012136:	d007      	beq.n	8012148 <create_name+0x78>
 8012138:	7ffb      	ldrb	r3, [r7, #31]
 801213a:	2b5c      	cmp	r3, #92	; 0x5c
 801213c:	d004      	beq.n	8012148 <create_name+0x78>
 801213e:	7ffb      	ldrb	r3, [r7, #31]
 8012140:	2b20      	cmp	r3, #32
 8012142:	d901      	bls.n	8012148 <create_name+0x78>
 8012144:	2306      	movs	r3, #6
 8012146:	e084      	b.n	8012252 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	441a      	add	r2, r3
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012152:	7ffb      	ldrb	r3, [r7, #31]
 8012154:	2b20      	cmp	r3, #32
 8012156:	d801      	bhi.n	801215c <create_name+0x8c>
 8012158:	2224      	movs	r2, #36	; 0x24
 801215a:	e000      	b.n	801215e <create_name+0x8e>
 801215c:	2220      	movs	r2, #32
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	330b      	adds	r3, #11
 8012162:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012164:	2300      	movs	r3, #0
 8012166:	e074      	b.n	8012252 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	1c5a      	adds	r2, r3, #1
 801216c:	617a      	str	r2, [r7, #20]
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	4413      	add	r3, r2
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012176:	7ffb      	ldrb	r3, [r7, #31]
 8012178:	2b20      	cmp	r3, #32
 801217a:	d94e      	bls.n	801221a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801217c:	7ffb      	ldrb	r3, [r7, #31]
 801217e:	2b2f      	cmp	r3, #47	; 0x2f
 8012180:	d006      	beq.n	8012190 <create_name+0xc0>
 8012182:	7ffb      	ldrb	r3, [r7, #31]
 8012184:	2b5c      	cmp	r3, #92	; 0x5c
 8012186:	d110      	bne.n	80121aa <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012188:	e002      	b.n	8012190 <create_name+0xc0>
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	3301      	adds	r3, #1
 801218e:	617b      	str	r3, [r7, #20]
 8012190:	68fa      	ldr	r2, [r7, #12]
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	4413      	add	r3, r2
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	2b2f      	cmp	r3, #47	; 0x2f
 801219a:	d0f6      	beq.n	801218a <create_name+0xba>
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	4413      	add	r3, r2
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	2b5c      	cmp	r3, #92	; 0x5c
 80121a6:	d0f0      	beq.n	801218a <create_name+0xba>
			break;
 80121a8:	e038      	b.n	801221c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80121aa:	7ffb      	ldrb	r3, [r7, #31]
 80121ac:	2b2e      	cmp	r3, #46	; 0x2e
 80121ae:	d003      	beq.n	80121b8 <create_name+0xe8>
 80121b0:	693a      	ldr	r2, [r7, #16]
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d30c      	bcc.n	80121d2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	2b0b      	cmp	r3, #11
 80121bc:	d002      	beq.n	80121c4 <create_name+0xf4>
 80121be:	7ffb      	ldrb	r3, [r7, #31]
 80121c0:	2b2e      	cmp	r3, #46	; 0x2e
 80121c2:	d001      	beq.n	80121c8 <create_name+0xf8>
 80121c4:	2306      	movs	r3, #6
 80121c6:	e044      	b.n	8012252 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80121c8:	2308      	movs	r3, #8
 80121ca:	613b      	str	r3, [r7, #16]
 80121cc:	230b      	movs	r3, #11
 80121ce:	61bb      	str	r3, [r7, #24]
			continue;
 80121d0:	e022      	b.n	8012218 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80121d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	da04      	bge.n	80121e4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80121da:	7ffb      	ldrb	r3, [r7, #31]
 80121dc:	3b80      	subs	r3, #128	; 0x80
 80121de:	4a1f      	ldr	r2, [pc, #124]	; (801225c <create_name+0x18c>)
 80121e0:	5cd3      	ldrb	r3, [r2, r3]
 80121e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80121e4:	7ffb      	ldrb	r3, [r7, #31]
 80121e6:	4619      	mov	r1, r3
 80121e8:	481d      	ldr	r0, [pc, #116]	; (8012260 <create_name+0x190>)
 80121ea:	f7fe fee5 	bl	8010fb8 <chk_chr>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d001      	beq.n	80121f8 <create_name+0x128>
 80121f4:	2306      	movs	r3, #6
 80121f6:	e02c      	b.n	8012252 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80121f8:	7ffb      	ldrb	r3, [r7, #31]
 80121fa:	2b60      	cmp	r3, #96	; 0x60
 80121fc:	d905      	bls.n	801220a <create_name+0x13a>
 80121fe:	7ffb      	ldrb	r3, [r7, #31]
 8012200:	2b7a      	cmp	r3, #122	; 0x7a
 8012202:	d802      	bhi.n	801220a <create_name+0x13a>
 8012204:	7ffb      	ldrb	r3, [r7, #31]
 8012206:	3b20      	subs	r3, #32
 8012208:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	613a      	str	r2, [r7, #16]
 8012210:	68ba      	ldr	r2, [r7, #8]
 8012212:	4413      	add	r3, r2
 8012214:	7ffa      	ldrb	r2, [r7, #31]
 8012216:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012218:	e7a6      	b.n	8012168 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801221a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	441a      	add	r2, r3
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d101      	bne.n	8012230 <create_name+0x160>
 801222c:	2306      	movs	r3, #6
 801222e:	e010      	b.n	8012252 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	2be5      	cmp	r3, #229	; 0xe5
 8012236:	d102      	bne.n	801223e <create_name+0x16e>
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	2205      	movs	r2, #5
 801223c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801223e:	7ffb      	ldrb	r3, [r7, #31]
 8012240:	2b20      	cmp	r3, #32
 8012242:	d801      	bhi.n	8012248 <create_name+0x178>
 8012244:	2204      	movs	r2, #4
 8012246:	e000      	b.n	801224a <create_name+0x17a>
 8012248:	2200      	movs	r2, #0
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	330b      	adds	r3, #11
 801224e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012250:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012252:	4618      	mov	r0, r3
 8012254:	3720      	adds	r7, #32
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	08019ab8 	.word	0x08019ab8
 8012260:	08019a68 	.word	0x08019a68

08012264 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b2f      	cmp	r3, #47	; 0x2f
 801227e:	d00b      	beq.n	8012298 <follow_path+0x34>
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	2b5c      	cmp	r3, #92	; 0x5c
 8012286:	d007      	beq.n	8012298 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	699a      	ldr	r2, [r3, #24]
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	609a      	str	r2, [r3, #8]
 8012290:	e00d      	b.n	80122ae <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	3301      	adds	r3, #1
 8012296:	603b      	str	r3, [r7, #0]
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	2b2f      	cmp	r3, #47	; 0x2f
 801229e:	d0f8      	beq.n	8012292 <follow_path+0x2e>
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b5c      	cmp	r3, #92	; 0x5c
 80122a6:	d0f4      	beq.n	8012292 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	2200      	movs	r2, #0
 80122ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	2b1f      	cmp	r3, #31
 80122b4:	d80a      	bhi.n	80122cc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2280      	movs	r2, #128	; 0x80
 80122ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80122be:	2100      	movs	r1, #0
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7ff fc1e 	bl	8011b02 <dir_sdi>
 80122c6:	4603      	mov	r3, r0
 80122c8:	75fb      	strb	r3, [r7, #23]
 80122ca:	e05b      	b.n	8012384 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80122cc:	463b      	mov	r3, r7
 80122ce:	4619      	mov	r1, r3
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff fefd 	bl	80120d0 <create_name>
 80122d6:	4603      	mov	r3, r0
 80122d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d14c      	bne.n	801237a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fe50 	bl	8011f86 <dir_find>
 80122e6:	4603      	mov	r3, r0
 80122e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d01b      	beq.n	8012330 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	2b04      	cmp	r3, #4
 80122fc:	d13f      	bne.n	801237e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80122fe:	7afb      	ldrb	r3, [r7, #11]
 8012300:	f003 0320 	and.w	r3, r3, #32
 8012304:	2b00      	cmp	r3, #0
 8012306:	d00b      	beq.n	8012320 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012308:	7afb      	ldrb	r3, [r7, #11]
 801230a:	f003 0304 	and.w	r3, r3, #4
 801230e:	2b00      	cmp	r3, #0
 8012310:	d031      	beq.n	8012376 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2280      	movs	r2, #128	; 0x80
 8012316:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801231a:	2300      	movs	r3, #0
 801231c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801231e:	e02e      	b.n	801237e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012320:	7afb      	ldrb	r3, [r7, #11]
 8012322:	f003 0304 	and.w	r3, r3, #4
 8012326:	2b00      	cmp	r3, #0
 8012328:	d129      	bne.n	801237e <follow_path+0x11a>
 801232a:	2305      	movs	r3, #5
 801232c:	75fb      	strb	r3, [r7, #23]
				break;
 801232e:	e026      	b.n	801237e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012330:	7afb      	ldrb	r3, [r7, #11]
 8012332:	f003 0304 	and.w	r3, r3, #4
 8012336:	2b00      	cmp	r3, #0
 8012338:	d123      	bne.n	8012382 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	799b      	ldrb	r3, [r3, #6]
 801233e:	f003 0310 	and.w	r3, r3, #16
 8012342:	2b00      	cmp	r3, #0
 8012344:	d102      	bne.n	801234c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012346:	2305      	movs	r3, #5
 8012348:	75fb      	strb	r3, [r7, #23]
 801234a:	e01b      	b.n	8012384 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	695b      	ldr	r3, [r3, #20]
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	8992      	ldrh	r2, [r2, #12]
 801235a:	fbb3 f0f2 	udiv	r0, r3, r2
 801235e:	fb02 f200 	mul.w	r2, r2, r0
 8012362:	1a9b      	subs	r3, r3, r2
 8012364:	440b      	add	r3, r1
 8012366:	4619      	mov	r1, r3
 8012368:	68f8      	ldr	r0, [r7, #12]
 801236a:	f7ff fd70 	bl	8011e4e <ld_clust>
 801236e:	4602      	mov	r2, r0
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	609a      	str	r2, [r3, #8]
 8012374:	e7aa      	b.n	80122cc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012376:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012378:	e7a8      	b.n	80122cc <follow_path+0x68>
			if (res != FR_OK) break;
 801237a:	bf00      	nop
 801237c:	e002      	b.n	8012384 <follow_path+0x120>
				break;
 801237e:	bf00      	nop
 8012380:	e000      	b.n	8012384 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012382:	bf00      	nop
			}
		}
	}

	return res;
 8012384:	7dfb      	ldrb	r3, [r7, #23]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3718      	adds	r7, #24
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}

0801238e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801238e:	b480      	push	{r7}
 8012390:	b087      	sub	sp, #28
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012396:	f04f 33ff 	mov.w	r3, #4294967295
 801239a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d031      	beq.n	8012408 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	617b      	str	r3, [r7, #20]
 80123aa:	e002      	b.n	80123b2 <get_ldnumber+0x24>
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	3301      	adds	r3, #1
 80123b0:	617b      	str	r3, [r7, #20]
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b20      	cmp	r3, #32
 80123b8:	d903      	bls.n	80123c2 <get_ldnumber+0x34>
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b3a      	cmp	r3, #58	; 0x3a
 80123c0:	d1f4      	bne.n	80123ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b3a      	cmp	r3, #58	; 0x3a
 80123c8:	d11c      	bne.n	8012404 <get_ldnumber+0x76>
			tp = *path;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	1c5a      	adds	r2, r3, #1
 80123d4:	60fa      	str	r2, [r7, #12]
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	3b30      	subs	r3, #48	; 0x30
 80123da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	2b09      	cmp	r3, #9
 80123e0:	d80e      	bhi.n	8012400 <get_ldnumber+0x72>
 80123e2:	68fa      	ldr	r2, [r7, #12]
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d10a      	bne.n	8012400 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d107      	bne.n	8012400 <get_ldnumber+0x72>
					vol = (int)i;
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	3301      	adds	r3, #1
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	697a      	ldr	r2, [r7, #20]
 80123fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	e002      	b.n	801240a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012404:	2300      	movs	r3, #0
 8012406:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012408:	693b      	ldr	r3, [r7, #16]
}
 801240a:	4618      	mov	r0, r3
 801240c:	371c      	adds	r7, #28
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr
	...

08012418 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	70da      	strb	r2, [r3, #3]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f04f 32ff 	mov.w	r2, #4294967295
 801242e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012430:	6839      	ldr	r1, [r7, #0]
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7fe ff8c 	bl	8011350 <move_window>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <check_fs+0x2a>
 801243e:	2304      	movs	r3, #4
 8012440:	e038      	b.n	80124b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3338      	adds	r3, #56	; 0x38
 8012446:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe fcd0 	bl	8010df0 <ld_word>
 8012450:	4603      	mov	r3, r0
 8012452:	461a      	mov	r2, r3
 8012454:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012458:	429a      	cmp	r2, r3
 801245a:	d001      	beq.n	8012460 <check_fs+0x48>
 801245c:	2303      	movs	r3, #3
 801245e:	e029      	b.n	80124b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012466:	2be9      	cmp	r3, #233	; 0xe9
 8012468:	d009      	beq.n	801247e <check_fs+0x66>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012470:	2beb      	cmp	r3, #235	; 0xeb
 8012472:	d11e      	bne.n	80124b2 <check_fs+0x9a>
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801247a:	2b90      	cmp	r3, #144	; 0x90
 801247c:	d119      	bne.n	80124b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	3338      	adds	r3, #56	; 0x38
 8012482:	3336      	adds	r3, #54	; 0x36
 8012484:	4618      	mov	r0, r3
 8012486:	f7fe fccb 	bl	8010e20 <ld_dword>
 801248a:	4603      	mov	r3, r0
 801248c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012490:	4a0a      	ldr	r2, [pc, #40]	; (80124bc <check_fs+0xa4>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d101      	bne.n	801249a <check_fs+0x82>
 8012496:	2300      	movs	r3, #0
 8012498:	e00c      	b.n	80124b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3338      	adds	r3, #56	; 0x38
 801249e:	3352      	adds	r3, #82	; 0x52
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fe fcbd 	bl	8010e20 <ld_dword>
 80124a6:	4602      	mov	r2, r0
 80124a8:	4b05      	ldr	r3, [pc, #20]	; (80124c0 <check_fs+0xa8>)
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d101      	bne.n	80124b2 <check_fs+0x9a>
 80124ae:	2300      	movs	r3, #0
 80124b0:	e000      	b.n	80124b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80124b2:	2302      	movs	r3, #2
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	00544146 	.word	0x00544146
 80124c0:	33544146 	.word	0x33544146

080124c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b096      	sub	sp, #88	; 0x58
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	4613      	mov	r3, r2
 80124d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f7ff ff58 	bl	801238e <get_ldnumber>
 80124de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80124e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	da01      	bge.n	80124ea <find_volume+0x26>
 80124e6:	230b      	movs	r3, #11
 80124e8:	e268      	b.n	80129bc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80124ea:	4ab0      	ldr	r2, [pc, #704]	; (80127ac <find_volume+0x2e8>)
 80124ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <find_volume+0x3a>
 80124fa:	230c      	movs	r3, #12
 80124fc:	e25e      	b.n	80129bc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012502:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012504:	79fb      	ldrb	r3, [r7, #7]
 8012506:	f023 0301 	bic.w	r3, r3, #1
 801250a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d01a      	beq.n	801254a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012516:	785b      	ldrb	r3, [r3, #1]
 8012518:	4618      	mov	r0, r3
 801251a:	f7fe fbcb 	bl	8010cb4 <disk_status>
 801251e:	4603      	mov	r3, r0
 8012520:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012524:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012528:	f003 0301 	and.w	r3, r3, #1
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10c      	bne.n	801254a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d007      	beq.n	8012546 <find_volume+0x82>
 8012536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801253a:	f003 0304 	and.w	r3, r3, #4
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012542:	230a      	movs	r3, #10
 8012544:	e23a      	b.n	80129bc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012546:	2300      	movs	r3, #0
 8012548:	e238      	b.n	80129bc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254c:	2200      	movs	r2, #0
 801254e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012552:	b2da      	uxtb	r2, r3
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255a:	785b      	ldrb	r3, [r3, #1]
 801255c:	4618      	mov	r0, r3
 801255e:	f7fe fbc3 	bl	8010ce8 <disk_initialize>
 8012562:	4603      	mov	r3, r0
 8012564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801256c:	f003 0301 	and.w	r3, r3, #1
 8012570:	2b00      	cmp	r3, #0
 8012572:	d001      	beq.n	8012578 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012574:	2303      	movs	r3, #3
 8012576:	e221      	b.n	80129bc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d007      	beq.n	801258e <find_volume+0xca>
 801257e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012582:	f003 0304 	and.w	r3, r3, #4
 8012586:	2b00      	cmp	r3, #0
 8012588:	d001      	beq.n	801258e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801258a:	230a      	movs	r3, #10
 801258c:	e216      	b.n	80129bc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012590:	7858      	ldrb	r0, [r3, #1]
 8012592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012594:	330c      	adds	r3, #12
 8012596:	461a      	mov	r2, r3
 8012598:	2102      	movs	r1, #2
 801259a:	f7fe fc0b 	bl	8010db4 <disk_ioctl>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d001      	beq.n	80125a8 <find_volume+0xe4>
 80125a4:	2301      	movs	r3, #1
 80125a6:	e209      	b.n	80129bc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125b0:	d80d      	bhi.n	80125ce <find_volume+0x10a>
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	899b      	ldrh	r3, [r3, #12]
 80125b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125ba:	d308      	bcc.n	80125ce <find_volume+0x10a>
 80125bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125be:	899b      	ldrh	r3, [r3, #12]
 80125c0:	461a      	mov	r2, r3
 80125c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c4:	899b      	ldrh	r3, [r3, #12]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	4013      	ands	r3, r2
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d001      	beq.n	80125d2 <find_volume+0x10e>
 80125ce:	2301      	movs	r3, #1
 80125d0:	e1f4      	b.n	80129bc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80125d2:	2300      	movs	r3, #0
 80125d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80125d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125da:	f7ff ff1d 	bl	8012418 <check_fs>
 80125de:	4603      	mov	r3, r0
 80125e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80125e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	d14b      	bne.n	8012684 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125ec:	2300      	movs	r3, #0
 80125ee:	643b      	str	r3, [r7, #64]	; 0x40
 80125f0:	e01f      	b.n	8012632 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80125f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80125f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fa:	011b      	lsls	r3, r3, #4
 80125fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012600:	4413      	add	r3, r2
 8012602:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012606:	3304      	adds	r3, #4
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d006      	beq.n	801261c <find_volume+0x158>
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	3308      	adds	r3, #8
 8012612:	4618      	mov	r0, r3
 8012614:	f7fe fc04 	bl	8010e20 <ld_dword>
 8012618:	4602      	mov	r2, r0
 801261a:	e000      	b.n	801261e <find_volume+0x15a>
 801261c:	2200      	movs	r2, #0
 801261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012626:	440b      	add	r3, r1
 8012628:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801262e:	3301      	adds	r3, #1
 8012630:	643b      	str	r3, [r7, #64]	; 0x40
 8012632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012634:	2b03      	cmp	r3, #3
 8012636:	d9dc      	bls.n	80125f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012638:	2300      	movs	r3, #0
 801263a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801263e:	2b00      	cmp	r3, #0
 8012640:	d002      	beq.n	8012648 <find_volume+0x184>
 8012642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012644:	3b01      	subs	r3, #1
 8012646:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012650:	4413      	add	r3, r2
 8012652:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012656:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801265a:	2b00      	cmp	r3, #0
 801265c:	d005      	beq.n	801266a <find_volume+0x1a6>
 801265e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012662:	f7ff fed9 	bl	8012418 <check_fs>
 8012666:	4603      	mov	r3, r0
 8012668:	e000      	b.n	801266c <find_volume+0x1a8>
 801266a:	2303      	movs	r3, #3
 801266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012674:	2b01      	cmp	r3, #1
 8012676:	d905      	bls.n	8012684 <find_volume+0x1c0>
 8012678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801267a:	3301      	adds	r3, #1
 801267c:	643b      	str	r3, [r7, #64]	; 0x40
 801267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012680:	2b03      	cmp	r3, #3
 8012682:	d9e1      	bls.n	8012648 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012688:	2b04      	cmp	r3, #4
 801268a:	d101      	bne.n	8012690 <find_volume+0x1cc>
 801268c:	2301      	movs	r3, #1
 801268e:	e195      	b.n	80129bc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012694:	2b01      	cmp	r3, #1
 8012696:	d901      	bls.n	801269c <find_volume+0x1d8>
 8012698:	230d      	movs	r3, #13
 801269a:	e18f      	b.n	80129bc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	3338      	adds	r3, #56	; 0x38
 80126a0:	330b      	adds	r3, #11
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7fe fba4 	bl	8010df0 <ld_word>
 80126a8:	4603      	mov	r3, r0
 80126aa:	461a      	mov	r2, r3
 80126ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ae:	899b      	ldrh	r3, [r3, #12]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d001      	beq.n	80126b8 <find_volume+0x1f4>
 80126b4:	230d      	movs	r3, #13
 80126b6:	e181      	b.n	80129bc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80126b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ba:	3338      	adds	r3, #56	; 0x38
 80126bc:	3316      	adds	r3, #22
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fe fb96 	bl	8010df0 <ld_word>
 80126c4:	4603      	mov	r3, r0
 80126c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80126c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d106      	bne.n	80126dc <find_volume+0x218>
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	3338      	adds	r3, #56	; 0x38
 80126d2:	3324      	adds	r3, #36	; 0x24
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe fba3 	bl	8010e20 <ld_dword>
 80126da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80126dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80126e0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80126ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ee:	789b      	ldrb	r3, [r3, #2]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d005      	beq.n	8012700 <find_volume+0x23c>
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	789b      	ldrb	r3, [r3, #2]
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	d001      	beq.n	8012700 <find_volume+0x23c>
 80126fc:	230d      	movs	r3, #13
 80126fe:	e15d      	b.n	80129bc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012702:	789b      	ldrb	r3, [r3, #2]
 8012704:	461a      	mov	r2, r3
 8012706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012708:	fb02 f303 	mul.w	r3, r2, r3
 801270c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012714:	b29a      	uxth	r2, r3
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271c:	895b      	ldrh	r3, [r3, #10]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d008      	beq.n	8012734 <find_volume+0x270>
 8012722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012724:	895b      	ldrh	r3, [r3, #10]
 8012726:	461a      	mov	r2, r3
 8012728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272a:	895b      	ldrh	r3, [r3, #10]
 801272c:	3b01      	subs	r3, #1
 801272e:	4013      	ands	r3, r2
 8012730:	2b00      	cmp	r3, #0
 8012732:	d001      	beq.n	8012738 <find_volume+0x274>
 8012734:	230d      	movs	r3, #13
 8012736:	e141      	b.n	80129bc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273a:	3338      	adds	r3, #56	; 0x38
 801273c:	3311      	adds	r3, #17
 801273e:	4618      	mov	r0, r3
 8012740:	f7fe fb56 	bl	8010df0 <ld_word>
 8012744:	4603      	mov	r3, r0
 8012746:	461a      	mov	r2, r3
 8012748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274e:	891b      	ldrh	r3, [r3, #8]
 8012750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012752:	8992      	ldrh	r2, [r2, #12]
 8012754:	0952      	lsrs	r2, r2, #5
 8012756:	b292      	uxth	r2, r2
 8012758:	fbb3 f1f2 	udiv	r1, r3, r2
 801275c:	fb02 f201 	mul.w	r2, r2, r1
 8012760:	1a9b      	subs	r3, r3, r2
 8012762:	b29b      	uxth	r3, r3
 8012764:	2b00      	cmp	r3, #0
 8012766:	d001      	beq.n	801276c <find_volume+0x2a8>
 8012768:	230d      	movs	r3, #13
 801276a:	e127      	b.n	80129bc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276e:	3338      	adds	r3, #56	; 0x38
 8012770:	3313      	adds	r3, #19
 8012772:	4618      	mov	r0, r3
 8012774:	f7fe fb3c 	bl	8010df0 <ld_word>
 8012778:	4603      	mov	r3, r0
 801277a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801277c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <find_volume+0x2cc>
 8012782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012784:	3338      	adds	r3, #56	; 0x38
 8012786:	3320      	adds	r3, #32
 8012788:	4618      	mov	r0, r3
 801278a:	f7fe fb49 	bl	8010e20 <ld_dword>
 801278e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012792:	3338      	adds	r3, #56	; 0x38
 8012794:	330e      	adds	r3, #14
 8012796:	4618      	mov	r0, r3
 8012798:	f7fe fb2a 	bl	8010df0 <ld_word>
 801279c:	4603      	mov	r3, r0
 801279e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80127a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d104      	bne.n	80127b0 <find_volume+0x2ec>
 80127a6:	230d      	movs	r3, #13
 80127a8:	e108      	b.n	80129bc <find_volume+0x4f8>
 80127aa:	bf00      	nop
 80127ac:	200412f8 	.word	0x200412f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80127b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127b4:	4413      	add	r3, r2
 80127b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127b8:	8911      	ldrh	r1, [r2, #8]
 80127ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127bc:	8992      	ldrh	r2, [r2, #12]
 80127be:	0952      	lsrs	r2, r2, #5
 80127c0:	b292      	uxth	r2, r2
 80127c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80127c6:	b292      	uxth	r2, r2
 80127c8:	4413      	add	r3, r2
 80127ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80127cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d201      	bcs.n	80127d8 <find_volume+0x314>
 80127d4:	230d      	movs	r3, #13
 80127d6:	e0f1      	b.n	80129bc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80127d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127dc:	1ad3      	subs	r3, r2, r3
 80127de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127e0:	8952      	ldrh	r2, [r2, #10]
 80127e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80127e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80127e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d101      	bne.n	80127f2 <find_volume+0x32e>
 80127ee:	230d      	movs	r3, #13
 80127f0:	e0e4      	b.n	80129bc <find_volume+0x4f8>
		fmt = FS_FAT32;
 80127f2:	2303      	movs	r3, #3
 80127f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80127f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80127fe:	4293      	cmp	r3, r2
 8012800:	d802      	bhi.n	8012808 <find_volume+0x344>
 8012802:	2302      	movs	r3, #2
 8012804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801280e:	4293      	cmp	r3, r2
 8012810:	d802      	bhi.n	8012818 <find_volume+0x354>
 8012812:	2301      	movs	r3, #1
 8012814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281a:	1c9a      	adds	r2, r3, #2
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012824:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012826:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801282a:	441a      	add	r2, r3
 801282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	441a      	add	r2, r3
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801283a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801283e:	2b03      	cmp	r3, #3
 8012840:	d11e      	bne.n	8012880 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012844:	3338      	adds	r3, #56	; 0x38
 8012846:	332a      	adds	r3, #42	; 0x2a
 8012848:	4618      	mov	r0, r3
 801284a:	f7fe fad1 	bl	8010df0 <ld_word>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d001      	beq.n	8012858 <find_volume+0x394>
 8012854:	230d      	movs	r3, #13
 8012856:	e0b1      	b.n	80129bc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285a:	891b      	ldrh	r3, [r3, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d001      	beq.n	8012864 <find_volume+0x3a0>
 8012860:	230d      	movs	r3, #13
 8012862:	e0ab      	b.n	80129bc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	3338      	adds	r3, #56	; 0x38
 8012868:	332c      	adds	r3, #44	; 0x2c
 801286a:	4618      	mov	r0, r3
 801286c:	f7fe fad8 	bl	8010e20 <ld_dword>
 8012870:	4602      	mov	r2, r0
 8012872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012874:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012878:	69db      	ldr	r3, [r3, #28]
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	647b      	str	r3, [r7, #68]	; 0x44
 801287e:	e01f      	b.n	80128c0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012882:	891b      	ldrh	r3, [r3, #8]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <find_volume+0x3c8>
 8012888:	230d      	movs	r3, #13
 801288a:	e097      	b.n	80129bc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012892:	441a      	add	r2, r3
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801289c:	2b02      	cmp	r3, #2
 801289e:	d103      	bne.n	80128a8 <find_volume+0x3e4>
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	69db      	ldr	r3, [r3, #28]
 80128a4:	005b      	lsls	r3, r3, #1
 80128a6:	e00a      	b.n	80128be <find_volume+0x3fa>
 80128a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128aa:	69da      	ldr	r2, [r3, #28]
 80128ac:	4613      	mov	r3, r2
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	4413      	add	r3, r2
 80128b2:	085a      	lsrs	r2, r3, #1
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	69db      	ldr	r3, [r3, #28]
 80128b8:	f003 0301 	and.w	r3, r3, #1
 80128bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80128be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	6a1a      	ldr	r2, [r3, #32]
 80128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c6:	899b      	ldrh	r3, [r3, #12]
 80128c8:	4619      	mov	r1, r3
 80128ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128cc:	440b      	add	r3, r1
 80128ce:	3b01      	subs	r3, #1
 80128d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128d2:	8989      	ldrh	r1, [r1, #12]
 80128d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80128d8:	429a      	cmp	r2, r3
 80128da:	d201      	bcs.n	80128e0 <find_volume+0x41c>
 80128dc:	230d      	movs	r3, #13
 80128de:	e06d      	b.n	80129bc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80128e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e2:	f04f 32ff 	mov.w	r2, #4294967295
 80128e6:	615a      	str	r2, [r3, #20]
 80128e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ea:	695a      	ldr	r2, [r3, #20]
 80128ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80128f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f2:	2280      	movs	r2, #128	; 0x80
 80128f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80128f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128fa:	2b03      	cmp	r3, #3
 80128fc:	d149      	bne.n	8012992 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80128fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012900:	3338      	adds	r3, #56	; 0x38
 8012902:	3330      	adds	r3, #48	; 0x30
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe fa73 	bl	8010df0 <ld_word>
 801290a:	4603      	mov	r3, r0
 801290c:	2b01      	cmp	r3, #1
 801290e:	d140      	bne.n	8012992 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012912:	3301      	adds	r3, #1
 8012914:	4619      	mov	r1, r3
 8012916:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012918:	f7fe fd1a 	bl	8011350 <move_window>
 801291c:	4603      	mov	r3, r0
 801291e:	2b00      	cmp	r3, #0
 8012920:	d137      	bne.n	8012992 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012924:	2200      	movs	r2, #0
 8012926:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292a:	3338      	adds	r3, #56	; 0x38
 801292c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012930:	4618      	mov	r0, r3
 8012932:	f7fe fa5d 	bl	8010df0 <ld_word>
 8012936:	4603      	mov	r3, r0
 8012938:	461a      	mov	r2, r3
 801293a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801293e:	429a      	cmp	r2, r3
 8012940:	d127      	bne.n	8012992 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012944:	3338      	adds	r3, #56	; 0x38
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe fa6a 	bl	8010e20 <ld_dword>
 801294c:	4602      	mov	r2, r0
 801294e:	4b1d      	ldr	r3, [pc, #116]	; (80129c4 <find_volume+0x500>)
 8012950:	429a      	cmp	r2, r3
 8012952:	d11e      	bne.n	8012992 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012956:	3338      	adds	r3, #56	; 0x38
 8012958:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe fa5f 	bl	8010e20 <ld_dword>
 8012962:	4602      	mov	r2, r0
 8012964:	4b18      	ldr	r3, [pc, #96]	; (80129c8 <find_volume+0x504>)
 8012966:	429a      	cmp	r2, r3
 8012968:	d113      	bne.n	8012992 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296c:	3338      	adds	r3, #56	; 0x38
 801296e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012972:	4618      	mov	r0, r3
 8012974:	f7fe fa54 	bl	8010e20 <ld_dword>
 8012978:	4602      	mov	r2, r0
 801297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012980:	3338      	adds	r3, #56	; 0x38
 8012982:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012986:	4618      	mov	r0, r3
 8012988:	f7fe fa4a 	bl	8010e20 <ld_dword>
 801298c:	4602      	mov	r2, r0
 801298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012990:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012994:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012998:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801299a:	4b0c      	ldr	r3, [pc, #48]	; (80129cc <find_volume+0x508>)
 801299c:	881b      	ldrh	r3, [r3, #0]
 801299e:	3301      	adds	r3, #1
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <find_volume+0x508>)
 80129a4:	801a      	strh	r2, [r3, #0]
 80129a6:	4b09      	ldr	r3, [pc, #36]	; (80129cc <find_volume+0x508>)
 80129a8:	881a      	ldrh	r2, [r3, #0]
 80129aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ac:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	2200      	movs	r2, #0
 80129b2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80129b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129b6:	f7fe fc63 	bl	8011280 <clear_lock>
#endif
	return FR_OK;
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3758      	adds	r7, #88	; 0x58
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	41615252 	.word	0x41615252
 80129c8:	61417272 	.word	0x61417272
 80129cc:	200412fc 	.word	0x200412fc

080129d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80129da:	2309      	movs	r3, #9
 80129dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d01c      	beq.n	8012a1e <validate+0x4e>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d018      	beq.n	8012a1e <validate+0x4e>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d013      	beq.n	8012a1e <validate+0x4e>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	889a      	ldrh	r2, [r3, #4]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	88db      	ldrh	r3, [r3, #6]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d10c      	bne.n	8012a1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	785b      	ldrb	r3, [r3, #1]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fe f952 	bl	8010cb4 <disk_status>
 8012a10:	4603      	mov	r3, r0
 8012a12:	f003 0301 	and.w	r3, r3, #1
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d101      	bne.n	8012a1e <validate+0x4e>
			res = FR_OK;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012a1e:	7bfb      	ldrb	r3, [r7, #15]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d102      	bne.n	8012a2a <validate+0x5a>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	e000      	b.n	8012a2c <validate+0x5c>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	6013      	str	r3, [r2, #0]
	return res;
 8012a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
	...

08012a3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b088      	sub	sp, #32
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	4613      	mov	r3, r2
 8012a48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012a4e:	f107 0310 	add.w	r3, r7, #16
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7ff fc9b 	bl	801238e <get_ldnumber>
 8012a58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	da01      	bge.n	8012a64 <f_mount+0x28>
 8012a60:	230b      	movs	r3, #11
 8012a62:	e02b      	b.n	8012abc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012a64:	4a17      	ldr	r2, [pc, #92]	; (8012ac4 <f_mount+0x88>)
 8012a66:	69fb      	ldr	r3, [r7, #28]
 8012a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d005      	beq.n	8012a80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012a74:	69b8      	ldr	r0, [r7, #24]
 8012a76:	f7fe fc03 	bl	8011280 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d002      	beq.n	8012a8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	490d      	ldr	r1, [pc, #52]	; (8012ac4 <f_mount+0x88>)
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <f_mount+0x66>
 8012a9c:	79fb      	ldrb	r3, [r7, #7]
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d001      	beq.n	8012aa6 <f_mount+0x6a>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e00a      	b.n	8012abc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012aa6:	f107 010c 	add.w	r1, r7, #12
 8012aaa:	f107 0308 	add.w	r3, r7, #8
 8012aae:	2200      	movs	r2, #0
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7ff fd07 	bl	80124c4 <find_volume>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3720      	adds	r7, #32
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	200412f8 	.word	0x200412f8

08012ac8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b098      	sub	sp, #96	; 0x60
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d101      	bne.n	8012ae0 <f_open+0x18>
 8012adc:	2309      	movs	r3, #9
 8012ade:	e1ba      	b.n	8012e56 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ae0:	79fb      	ldrb	r3, [r7, #7]
 8012ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ae6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012ae8:	79fa      	ldrb	r2, [r7, #7]
 8012aea:	f107 0110 	add.w	r1, r7, #16
 8012aee:	f107 0308 	add.w	r3, r7, #8
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7ff fce6 	bl	80124c4 <find_volume>
 8012af8:	4603      	mov	r3, r0
 8012afa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012afe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f040 819e 	bne.w	8012e44 <f_open+0x37c>
		dj.obj.fs = fs;
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	f107 0314 	add.w	r3, r7, #20
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7ff fba5 	bl	8012264 <follow_path>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d11a      	bne.n	8012b5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012b28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012b2c:	b25b      	sxtb	r3, r3
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	da03      	bge.n	8012b3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012b32:	2306      	movs	r3, #6
 8012b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b38:	e011      	b.n	8012b5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b3a:	79fb      	ldrb	r3, [r7, #7]
 8012b3c:	f023 0301 	bic.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	bf14      	ite	ne
 8012b44:	2301      	movne	r3, #1
 8012b46:	2300      	moveq	r3, #0
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	f107 0314 	add.w	r3, r7, #20
 8012b50:	4611      	mov	r1, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe fa4c 	bl	8010ff0 <chk_lock>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b5e:	79fb      	ldrb	r3, [r7, #7]
 8012b60:	f003 031c 	and.w	r3, r3, #28
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d07e      	beq.n	8012c66 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d017      	beq.n	8012ba0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b74:	2b04      	cmp	r3, #4
 8012b76:	d10e      	bne.n	8012b96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b78:	f7fe fa96 	bl	80110a8 <enq_lock>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d006      	beq.n	8012b90 <f_open+0xc8>
 8012b82:	f107 0314 	add.w	r3, r7, #20
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7ff fa52 	bl	8012030 <dir_register>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	e000      	b.n	8012b92 <f_open+0xca>
 8012b90:	2312      	movs	r3, #18
 8012b92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b96:	79fb      	ldrb	r3, [r7, #7]
 8012b98:	f043 0308 	orr.w	r3, r3, #8
 8012b9c:	71fb      	strb	r3, [r7, #7]
 8012b9e:	e010      	b.n	8012bc2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ba0:	7ebb      	ldrb	r3, [r7, #26]
 8012ba2:	f003 0311 	and.w	r3, r3, #17
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d003      	beq.n	8012bb2 <f_open+0xea>
					res = FR_DENIED;
 8012baa:	2307      	movs	r3, #7
 8012bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012bb0:	e007      	b.n	8012bc2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012bb2:	79fb      	ldrb	r3, [r7, #7]
 8012bb4:	f003 0304 	and.w	r3, r3, #4
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d002      	beq.n	8012bc2 <f_open+0xfa>
 8012bbc:	2308      	movs	r3, #8
 8012bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d167      	bne.n	8012c9a <f_open+0x1d2>
 8012bca:	79fb      	ldrb	r3, [r7, #7]
 8012bcc:	f003 0308 	and.w	r3, r3, #8
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d062      	beq.n	8012c9a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012bd4:	4ba2      	ldr	r3, [pc, #648]	; (8012e60 <f_open+0x398>)
 8012bd6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bda:	330e      	adds	r3, #14
 8012bdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fe f95c 	bl	8010e9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be6:	3316      	adds	r3, #22
 8012be8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe f956 	bl	8010e9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf2:	330b      	adds	r3, #11
 8012bf4:	2220      	movs	r2, #32
 8012bf6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bfc:	4611      	mov	r1, r2
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7ff f925 	bl	8011e4e <ld_clust>
 8012c04:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7ff f93d 	bl	8011e8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c14:	331c      	adds	r3, #28
 8012c16:	2100      	movs	r1, #0
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe f93f 	bl	8010e9c <st_dword>
					fs->wflag = 1;
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	2201      	movs	r2, #1
 8012c22:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d037      	beq.n	8012c9a <f_open+0x1d2>
						dw = fs->winsect;
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c2e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012c30:	f107 0314 	add.w	r3, r7, #20
 8012c34:	2200      	movs	r2, #0
 8012c36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fe fe2d 	bl	8011898 <remove_chain>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d126      	bne.n	8012c9a <f_open+0x1d2>
							res = move_window(fs, dw);
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fe fb7d 	bl	8011350 <move_window>
 8012c56:	4603      	mov	r3, r0
 8012c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c60:	3a01      	subs	r2, #1
 8012c62:	611a      	str	r2, [r3, #16]
 8012c64:	e019      	b.n	8012c9a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d115      	bne.n	8012c9a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c6e:	7ebb      	ldrb	r3, [r7, #26]
 8012c70:	f003 0310 	and.w	r3, r3, #16
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d003      	beq.n	8012c80 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012c78:	2304      	movs	r3, #4
 8012c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c7e:	e00c      	b.n	8012c9a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c80:	79fb      	ldrb	r3, [r7, #7]
 8012c82:	f003 0302 	and.w	r3, r3, #2
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d007      	beq.n	8012c9a <f_open+0x1d2>
 8012c8a:	7ebb      	ldrb	r3, [r7, #26]
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <f_open+0x1d2>
						res = FR_DENIED;
 8012c94:	2307      	movs	r3, #7
 8012c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d128      	bne.n	8012cf4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012ca2:	79fb      	ldrb	r3, [r7, #7]
 8012ca4:	f003 0308 	and.w	r3, r3, #8
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012cc2:	79fb      	ldrb	r3, [r7, #7]
 8012cc4:	f023 0301 	bic.w	r3, r3, #1
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	bf14      	ite	ne
 8012ccc:	2301      	movne	r3, #1
 8012cce:	2300      	moveq	r3, #0
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f107 0314 	add.w	r3, r7, #20
 8012cd8:	4611      	mov	r1, r2
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fe fa06 	bl	80110ec <inc_lock>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	691b      	ldr	r3, [r3, #16]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d102      	bne.n	8012cf4 <f_open+0x22c>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f040 80a3 	bne.w	8012e44 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d02:	4611      	mov	r1, r2
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff f8a2 	bl	8011e4e <ld_clust>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d12:	331c      	adds	r3, #28
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe f883 	bl	8010e20 <ld_dword>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2200      	movs	r2, #0
 8012d24:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012d26:	693a      	ldr	r2, [r7, #16]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	88da      	ldrh	r2, [r3, #6]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	79fa      	ldrb	r2, [r7, #7]
 8012d38:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2200      	movs	r2, #0
 8012d44:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3330      	adds	r3, #48	; 0x30
 8012d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d54:	2100      	movs	r1, #0
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe f8ed 	bl	8010f36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d5c:	79fb      	ldrb	r3, [r7, #7]
 8012d5e:	f003 0320 	and.w	r3, r3, #32
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d06e      	beq.n	8012e44 <f_open+0x37c>
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d06a      	beq.n	8012e44 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	68da      	ldr	r2, [r3, #12]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	895b      	ldrh	r3, [r3, #10]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	899b      	ldrh	r3, [r3, #12]
 8012d80:	fb03 f302 	mul.w	r3, r3, r2
 8012d84:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	657b      	str	r3, [r7, #84]	; 0x54
 8012d92:	e016      	b.n	8012dc2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fe fb96 	bl	80114ca <get_fat>
 8012d9e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d802      	bhi.n	8012dac <f_open+0x2e4>
 8012da6:	2302      	movs	r3, #2
 8012da8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db2:	d102      	bne.n	8012dba <f_open+0x2f2>
 8012db4:	2301      	movs	r3, #1
 8012db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012dba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8012dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d103      	bne.n	8012dd2 <f_open+0x30a>
 8012dca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d8e0      	bhi.n	8012d94 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012dd6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d131      	bne.n	8012e44 <f_open+0x37c>
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	899b      	ldrh	r3, [r3, #12]
 8012de4:	461a      	mov	r2, r3
 8012de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dec:	fb02 f201 	mul.w	r2, r2, r1
 8012df0:	1a9b      	subs	r3, r3, r2
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d026      	beq.n	8012e44 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fe fb46 	bl	801148c <clust2sect>
 8012e00:	6478      	str	r0, [r7, #68]	; 0x44
 8012e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d103      	bne.n	8012e10 <f_open+0x348>
						res = FR_INT_ERR;
 8012e08:	2302      	movs	r3, #2
 8012e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012e0e:	e019      	b.n	8012e44 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	899b      	ldrh	r3, [r3, #12]
 8012e14:	461a      	mov	r2, r3
 8012e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8012e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e1e:	441a      	add	r2, r3
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	7858      	ldrb	r0, [r3, #1]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	6a1a      	ldr	r2, [r3, #32]
 8012e32:	2301      	movs	r3, #1
 8012e34:	f7fd ff7e 	bl	8010d34 <disk_read>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d002      	beq.n	8012e44 <f_open+0x37c>
 8012e3e:	2301      	movs	r3, #1
 8012e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d002      	beq.n	8012e52 <f_open+0x38a>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3760      	adds	r7, #96	; 0x60
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	274a0000 	.word	0x274a0000

08012e64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b08e      	sub	sp, #56	; 0x38
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
 8012e70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	f107 0214 	add.w	r2, r7, #20
 8012e82:	4611      	mov	r1, r2
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff fda3 	bl	80129d0 <validate>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d107      	bne.n	8012ea8 <f_read+0x44>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	7d5b      	ldrb	r3, [r3, #21]
 8012e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d002      	beq.n	8012eae <f_read+0x4a>
 8012ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eac:	e135      	b.n	801311a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	7d1b      	ldrb	r3, [r3, #20]
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <f_read+0x5a>
 8012eba:	2307      	movs	r3, #7
 8012ebc:	e12d      	b.n	801311a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	68da      	ldr	r2, [r3, #12]
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	699b      	ldr	r3, [r3, #24]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	f240 811e 	bls.w	8013110 <f_read+0x2ac>
 8012ed4:	6a3b      	ldr	r3, [r7, #32]
 8012ed6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012ed8:	e11a      	b.n	8013110 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	699b      	ldr	r3, [r3, #24]
 8012ede:	697a      	ldr	r2, [r7, #20]
 8012ee0:	8992      	ldrh	r2, [r2, #12]
 8012ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ee6:	fb02 f201 	mul.w	r2, r2, r1
 8012eea:	1a9b      	subs	r3, r3, r2
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f040 80d5 	bne.w	801309c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	699b      	ldr	r3, [r3, #24]
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	8992      	ldrh	r2, [r2, #12]
 8012efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8012efe:	697a      	ldr	r2, [r7, #20]
 8012f00:	8952      	ldrh	r2, [r2, #10]
 8012f02:	3a01      	subs	r2, #1
 8012f04:	4013      	ands	r3, r2
 8012f06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d12f      	bne.n	8012f6e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	699b      	ldr	r3, [r3, #24]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d103      	bne.n	8012f1e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8012f1c:	e013      	b.n	8012f46 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d007      	beq.n	8012f36 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	699b      	ldr	r3, [r3, #24]
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f7fe fdb0 	bl	8011a92 <clmt_clust>
 8012f32:	6338      	str	r0, [r7, #48]	; 0x30
 8012f34:	e007      	b.n	8012f46 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012f36:	68fa      	ldr	r2, [r7, #12]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	69db      	ldr	r3, [r3, #28]
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	4610      	mov	r0, r2
 8012f40:	f7fe fac3 	bl	80114ca <get_fat>
 8012f44:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d804      	bhi.n	8012f56 <f_read+0xf2>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2202      	movs	r2, #2
 8012f50:	755a      	strb	r2, [r3, #21]
 8012f52:	2302      	movs	r3, #2
 8012f54:	e0e1      	b.n	801311a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f5c:	d104      	bne.n	8012f68 <f_read+0x104>
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2201      	movs	r2, #1
 8012f62:	755a      	strb	r2, [r3, #21]
 8012f64:	2301      	movs	r3, #1
 8012f66:	e0d8      	b.n	801311a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	69db      	ldr	r3, [r3, #28]
 8012f74:	4619      	mov	r1, r3
 8012f76:	4610      	mov	r0, r2
 8012f78:	f7fe fa88 	bl	801148c <clust2sect>
 8012f7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d104      	bne.n	8012f8e <f_read+0x12a>
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2202      	movs	r2, #2
 8012f88:	755a      	strb	r2, [r3, #21]
 8012f8a:	2302      	movs	r3, #2
 8012f8c:	e0c5      	b.n	801311a <f_read+0x2b6>
			sect += csect;
 8012f8e:	69ba      	ldr	r2, [r7, #24]
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	4413      	add	r3, r2
 8012f94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	899b      	ldrh	r3, [r3, #12]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fa2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d041      	beq.n	801302e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012faa:	69fa      	ldr	r2, [r7, #28]
 8012fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fae:	4413      	add	r3, r2
 8012fb0:	697a      	ldr	r2, [r7, #20]
 8012fb2:	8952      	ldrh	r2, [r2, #10]
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d905      	bls.n	8012fc4 <f_read+0x160>
					cc = fs->csize - csect;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	895b      	ldrh	r3, [r3, #10]
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	7858      	ldrb	r0, [r3, #1]
 8012fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fca:	69ba      	ldr	r2, [r7, #24]
 8012fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fce:	f7fd feb1 	bl	8010d34 <disk_read>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d004      	beq.n	8012fe2 <f_read+0x17e>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	755a      	strb	r2, [r3, #21]
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e09b      	b.n	801311a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	7d1b      	ldrb	r3, [r3, #20]
 8012fe6:	b25b      	sxtb	r3, r3
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	da18      	bge.n	801301e <f_read+0x1ba>
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6a1a      	ldr	r2, [r3, #32]
 8012ff0:	69bb      	ldr	r3, [r7, #24]
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d911      	bls.n	801301e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	6a1a      	ldr	r2, [r3, #32]
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	1ad3      	subs	r3, r2, r3
 8013002:	697a      	ldr	r2, [r7, #20]
 8013004:	8992      	ldrh	r2, [r2, #12]
 8013006:	fb02 f303 	mul.w	r3, r2, r3
 801300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801300c:	18d0      	adds	r0, r2, r3
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	899b      	ldrh	r3, [r3, #12]
 8013018:	461a      	mov	r2, r3
 801301a:	f7fd ff6b 	bl	8010ef4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	899b      	ldrh	r3, [r3, #12]
 8013022:	461a      	mov	r2, r3
 8013024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013026:	fb02 f303 	mul.w	r3, r2, r3
 801302a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801302c:	e05c      	b.n	80130e8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	6a1b      	ldr	r3, [r3, #32]
 8013032:	69ba      	ldr	r2, [r7, #24]
 8013034:	429a      	cmp	r2, r3
 8013036:	d02e      	beq.n	8013096 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	7d1b      	ldrb	r3, [r3, #20]
 801303c:	b25b      	sxtb	r3, r3
 801303e:	2b00      	cmp	r3, #0
 8013040:	da18      	bge.n	8013074 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	7858      	ldrb	r0, [r3, #1]
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6a1a      	ldr	r2, [r3, #32]
 8013050:	2301      	movs	r3, #1
 8013052:	f7fd fe8f 	bl	8010d74 <disk_write>
 8013056:	4603      	mov	r3, r0
 8013058:	2b00      	cmp	r3, #0
 801305a:	d004      	beq.n	8013066 <f_read+0x202>
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2201      	movs	r2, #1
 8013060:	755a      	strb	r2, [r3, #21]
 8013062:	2301      	movs	r3, #1
 8013064:	e059      	b.n	801311a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	7d1b      	ldrb	r3, [r3, #20]
 801306a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801306e:	b2da      	uxtb	r2, r3
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	7858      	ldrb	r0, [r3, #1]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801307e:	2301      	movs	r3, #1
 8013080:	69ba      	ldr	r2, [r7, #24]
 8013082:	f7fd fe57 	bl	8010d34 <disk_read>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d004      	beq.n	8013096 <f_read+0x232>
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2201      	movs	r2, #1
 8013090:	755a      	strb	r2, [r3, #21]
 8013092:	2301      	movs	r3, #1
 8013094:	e041      	b.n	801311a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	69ba      	ldr	r2, [r7, #24]
 801309a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	899b      	ldrh	r3, [r3, #12]
 80130a0:	4618      	mov	r0, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	699b      	ldr	r3, [r3, #24]
 80130a6:	697a      	ldr	r2, [r7, #20]
 80130a8:	8992      	ldrh	r2, [r2, #12]
 80130aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80130ae:	fb02 f201 	mul.w	r2, r2, r1
 80130b2:	1a9b      	subs	r3, r3, r2
 80130b4:	1ac3      	subs	r3, r0, r3
 80130b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80130b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d901      	bls.n	80130c4 <f_read+0x260>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	699b      	ldr	r3, [r3, #24]
 80130ce:	697a      	ldr	r2, [r7, #20]
 80130d0:	8992      	ldrh	r2, [r2, #12]
 80130d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80130d6:	fb02 f200 	mul.w	r2, r2, r0
 80130da:	1a9b      	subs	r3, r3, r2
 80130dc:	440b      	add	r3, r1
 80130de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130e0:	4619      	mov	r1, r3
 80130e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130e4:	f7fd ff06 	bl	8010ef4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80130e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	4413      	add	r3, r2
 80130ee:	627b      	str	r3, [r7, #36]	; 0x24
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	699a      	ldr	r2, [r3, #24]
 80130f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f6:	441a      	add	r2, r3
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	619a      	str	r2, [r3, #24]
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	441a      	add	r2, r3
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	601a      	str	r2, [r3, #0]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310c:	1ad3      	subs	r3, r2, r3
 801310e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f47f aee1 	bne.w	8012eda <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013118:	2300      	movs	r3, #0
}
 801311a:	4618      	mov	r0, r3
 801311c:	3738      	adds	r7, #56	; 0x38
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b08c      	sub	sp, #48	; 0x30
 8013126:	af00      	add	r7, sp, #0
 8013128:	60f8      	str	r0, [r7, #12]
 801312a:	60b9      	str	r1, [r7, #8]
 801312c:	607a      	str	r2, [r7, #4]
 801312e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	2200      	movs	r2, #0
 8013138:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f107 0210 	add.w	r2, r7, #16
 8013140:	4611      	mov	r1, r2
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff fc44 	bl	80129d0 <validate>
 8013148:	4603      	mov	r3, r0
 801314a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801314e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013152:	2b00      	cmp	r3, #0
 8013154:	d107      	bne.n	8013166 <f_write+0x44>
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	7d5b      	ldrb	r3, [r3, #21]
 801315a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801315e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013162:	2b00      	cmp	r3, #0
 8013164:	d002      	beq.n	801316c <f_write+0x4a>
 8013166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801316a:	e16a      	b.n	8013442 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	7d1b      	ldrb	r3, [r3, #20]
 8013170:	f003 0302 	and.w	r3, r3, #2
 8013174:	2b00      	cmp	r3, #0
 8013176:	d101      	bne.n	801317c <f_write+0x5a>
 8013178:	2307      	movs	r3, #7
 801317a:	e162      	b.n	8013442 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	699a      	ldr	r2, [r3, #24]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	441a      	add	r2, r3
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	699b      	ldr	r3, [r3, #24]
 8013188:	429a      	cmp	r2, r3
 801318a:	f080 814c 	bcs.w	8013426 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	699b      	ldr	r3, [r3, #24]
 8013192:	43db      	mvns	r3, r3
 8013194:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013196:	e146      	b.n	8013426 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	699b      	ldr	r3, [r3, #24]
 801319c:	693a      	ldr	r2, [r7, #16]
 801319e:	8992      	ldrh	r2, [r2, #12]
 80131a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80131a4:	fb02 f201 	mul.w	r2, r2, r1
 80131a8:	1a9b      	subs	r3, r3, r2
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f040 80f1 	bne.w	8013392 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	699b      	ldr	r3, [r3, #24]
 80131b4:	693a      	ldr	r2, [r7, #16]
 80131b6:	8992      	ldrh	r2, [r2, #12]
 80131b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80131bc:	693a      	ldr	r2, [r7, #16]
 80131be:	8952      	ldrh	r2, [r2, #10]
 80131c0:	3a01      	subs	r2, #1
 80131c2:	4013      	ands	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d143      	bne.n	8013254 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d10c      	bne.n	80131ee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80131da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d11a      	bne.n	8013216 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2100      	movs	r1, #0
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fe fbbc 	bl	8011962 <create_chain>
 80131ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80131ec:	e013      	b.n	8013216 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d007      	beq.n	8013206 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	4619      	mov	r1, r3
 80131fc:	68f8      	ldr	r0, [r7, #12]
 80131fe:	f7fe fc48 	bl	8011a92 <clmt_clust>
 8013202:	62b8      	str	r0, [r7, #40]	; 0x28
 8013204:	e007      	b.n	8013216 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	4619      	mov	r1, r3
 801320e:	4610      	mov	r0, r2
 8013210:	f7fe fba7 	bl	8011962 <create_chain>
 8013214:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013218:	2b00      	cmp	r3, #0
 801321a:	f000 8109 	beq.w	8013430 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013220:	2b01      	cmp	r3, #1
 8013222:	d104      	bne.n	801322e <f_write+0x10c>
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2202      	movs	r2, #2
 8013228:	755a      	strb	r2, [r3, #21]
 801322a:	2302      	movs	r3, #2
 801322c:	e109      	b.n	8013442 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013234:	d104      	bne.n	8013240 <f_write+0x11e>
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2201      	movs	r2, #1
 801323a:	755a      	strb	r2, [r3, #21]
 801323c:	2301      	movs	r3, #1
 801323e:	e100      	b.n	8013442 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013244:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	689b      	ldr	r3, [r3, #8]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d102      	bne.n	8013254 <f_write+0x132>
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013252:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	7d1b      	ldrb	r3, [r3, #20]
 8013258:	b25b      	sxtb	r3, r3
 801325a:	2b00      	cmp	r3, #0
 801325c:	da18      	bge.n	8013290 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	7858      	ldrb	r0, [r3, #1]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	6a1a      	ldr	r2, [r3, #32]
 801326c:	2301      	movs	r3, #1
 801326e:	f7fd fd81 	bl	8010d74 <disk_write>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d004      	beq.n	8013282 <f_write+0x160>
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2201      	movs	r2, #1
 801327c:	755a      	strb	r2, [r3, #21]
 801327e:	2301      	movs	r3, #1
 8013280:	e0df      	b.n	8013442 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	7d1b      	ldrb	r3, [r3, #20]
 8013286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801328a:	b2da      	uxtb	r2, r3
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013290:	693a      	ldr	r2, [r7, #16]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	69db      	ldr	r3, [r3, #28]
 8013296:	4619      	mov	r1, r3
 8013298:	4610      	mov	r0, r2
 801329a:	f7fe f8f7 	bl	801148c <clust2sect>
 801329e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d104      	bne.n	80132b0 <f_write+0x18e>
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2202      	movs	r2, #2
 80132aa:	755a      	strb	r2, [r3, #21]
 80132ac:	2302      	movs	r3, #2
 80132ae:	e0c8      	b.n	8013442 <f_write+0x320>
			sect += csect;
 80132b0:	697a      	ldr	r2, [r7, #20]
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	4413      	add	r3, r2
 80132b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	899b      	ldrh	r3, [r3, #12]
 80132bc:	461a      	mov	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80132c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80132c6:	6a3b      	ldr	r3, [r7, #32]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d043      	beq.n	8013354 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80132cc:	69ba      	ldr	r2, [r7, #24]
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	4413      	add	r3, r2
 80132d2:	693a      	ldr	r2, [r7, #16]
 80132d4:	8952      	ldrh	r2, [r2, #10]
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d905      	bls.n	80132e6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	895b      	ldrh	r3, [r3, #10]
 80132de:	461a      	mov	r2, r3
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	1ad3      	subs	r3, r2, r3
 80132e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	7858      	ldrb	r0, [r3, #1]
 80132ea:	6a3b      	ldr	r3, [r7, #32]
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	69f9      	ldr	r1, [r7, #28]
 80132f0:	f7fd fd40 	bl	8010d74 <disk_write>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d004      	beq.n	8013304 <f_write+0x1e2>
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2201      	movs	r2, #1
 80132fe:	755a      	strb	r2, [r3, #21]
 8013300:	2301      	movs	r3, #1
 8013302:	e09e      	b.n	8013442 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6a1a      	ldr	r2, [r3, #32]
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	1ad3      	subs	r3, r2, r3
 801330c:	6a3a      	ldr	r2, [r7, #32]
 801330e:	429a      	cmp	r2, r3
 8013310:	d918      	bls.n	8013344 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6a1a      	ldr	r2, [r3, #32]
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	693a      	ldr	r2, [r7, #16]
 8013322:	8992      	ldrh	r2, [r2, #12]
 8013324:	fb02 f303 	mul.w	r3, r2, r3
 8013328:	69fa      	ldr	r2, [r7, #28]
 801332a:	18d1      	adds	r1, r2, r3
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	899b      	ldrh	r3, [r3, #12]
 8013330:	461a      	mov	r2, r3
 8013332:	f7fd fddf 	bl	8010ef4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	7d1b      	ldrb	r3, [r3, #20]
 801333a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801333e:	b2da      	uxtb	r2, r3
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	899b      	ldrh	r3, [r3, #12]
 8013348:	461a      	mov	r2, r3
 801334a:	6a3b      	ldr	r3, [r7, #32]
 801334c:	fb02 f303 	mul.w	r3, r2, r3
 8013350:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013352:	e04b      	b.n	80133ec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6a1b      	ldr	r3, [r3, #32]
 8013358:	697a      	ldr	r2, [r7, #20]
 801335a:	429a      	cmp	r2, r3
 801335c:	d016      	beq.n	801338c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	699a      	ldr	r2, [r3, #24]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013366:	429a      	cmp	r2, r3
 8013368:	d210      	bcs.n	801338c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	7858      	ldrb	r0, [r3, #1]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013374:	2301      	movs	r3, #1
 8013376:	697a      	ldr	r2, [r7, #20]
 8013378:	f7fd fcdc 	bl	8010d34 <disk_read>
 801337c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801337e:	2b00      	cmp	r3, #0
 8013380:	d004      	beq.n	801338c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2201      	movs	r2, #1
 8013386:	755a      	strb	r2, [r3, #21]
 8013388:	2301      	movs	r3, #1
 801338a:	e05a      	b.n	8013442 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	899b      	ldrh	r3, [r3, #12]
 8013396:	4618      	mov	r0, r3
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	693a      	ldr	r2, [r7, #16]
 801339e:	8992      	ldrh	r2, [r2, #12]
 80133a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133a4:	fb02 f201 	mul.w	r2, r2, r1
 80133a8:	1a9b      	subs	r3, r3, r2
 80133aa:	1ac3      	subs	r3, r0, r3
 80133ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80133ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d901      	bls.n	80133ba <f_write+0x298>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	699b      	ldr	r3, [r3, #24]
 80133c4:	693a      	ldr	r2, [r7, #16]
 80133c6:	8992      	ldrh	r2, [r2, #12]
 80133c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80133cc:	fb02 f200 	mul.w	r2, r2, r0
 80133d0:	1a9b      	subs	r3, r3, r2
 80133d2:	440b      	add	r3, r1
 80133d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133d6:	69f9      	ldr	r1, [r7, #28]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7fd fd8b 	bl	8010ef4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	7d1b      	ldrb	r3, [r3, #20]
 80133e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80133e6:	b2da      	uxtb	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80133ec:	69fa      	ldr	r2, [r7, #28]
 80133ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f0:	4413      	add	r3, r2
 80133f2:	61fb      	str	r3, [r7, #28]
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	699a      	ldr	r2, [r3, #24]
 80133f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fa:	441a      	add	r2, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	619a      	str	r2, [r3, #24]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	68da      	ldr	r2, [r3, #12]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	699b      	ldr	r3, [r3, #24]
 8013408:	429a      	cmp	r2, r3
 801340a:	bf38      	it	cc
 801340c:	461a      	movcc	r2, r3
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	60da      	str	r2, [r3, #12]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	441a      	add	r2, r3
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	f47f aeb5 	bne.w	8013198 <f_write+0x76>
 801342e:	e000      	b.n	8013432 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013430:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	7d1b      	ldrb	r3, [r3, #20]
 8013436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801343a:	b2da      	uxtb	r2, r3
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	3730      	adds	r7, #48	; 0x30
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
	...

0801344c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b086      	sub	sp, #24
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f107 0208 	add.w	r2, r7, #8
 801345a:	4611      	mov	r1, r2
 801345c:	4618      	mov	r0, r3
 801345e:	f7ff fab7 	bl	80129d0 <validate>
 8013462:	4603      	mov	r3, r0
 8013464:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013466:	7dfb      	ldrb	r3, [r7, #23]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d167      	bne.n	801353c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	7d1b      	ldrb	r3, [r3, #20]
 8013470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013474:	2b00      	cmp	r3, #0
 8013476:	d061      	beq.n	801353c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	7d1b      	ldrb	r3, [r3, #20]
 801347c:	b25b      	sxtb	r3, r3
 801347e:	2b00      	cmp	r3, #0
 8013480:	da15      	bge.n	80134ae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	7858      	ldrb	r0, [r3, #1]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6a1a      	ldr	r2, [r3, #32]
 8013490:	2301      	movs	r3, #1
 8013492:	f7fd fc6f 	bl	8010d74 <disk_write>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d001      	beq.n	80134a0 <f_sync+0x54>
 801349c:	2301      	movs	r3, #1
 801349e:	e04e      	b.n	801353e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	7d1b      	ldrb	r3, [r3, #20]
 80134a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80134ae:	4b26      	ldr	r3, [pc, #152]	; (8013548 <f_sync+0xfc>)
 80134b0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80134b2:	68ba      	ldr	r2, [r7, #8]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b8:	4619      	mov	r1, r3
 80134ba:	4610      	mov	r0, r2
 80134bc:	f7fd ff48 	bl	8011350 <move_window>
 80134c0:	4603      	mov	r3, r0
 80134c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80134c4:	7dfb      	ldrb	r3, [r7, #23]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d138      	bne.n	801353c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	330b      	adds	r3, #11
 80134d4:	781a      	ldrb	r2, [r3, #0]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	330b      	adds	r3, #11
 80134da:	f042 0220 	orr.w	r2, r2, #32
 80134de:	b2d2      	uxtb	r2, r2
 80134e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6818      	ldr	r0, [r3, #0]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	689b      	ldr	r3, [r3, #8]
 80134ea:	461a      	mov	r2, r3
 80134ec:	68f9      	ldr	r1, [r7, #12]
 80134ee:	f7fe fccd 	bl	8011e8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f103 021c 	add.w	r2, r3, #28
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	4619      	mov	r1, r3
 80134fe:	4610      	mov	r0, r2
 8013500:	f7fd fccc 	bl	8010e9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	3316      	adds	r3, #22
 8013508:	6939      	ldr	r1, [r7, #16]
 801350a:	4618      	mov	r0, r3
 801350c:	f7fd fcc6 	bl	8010e9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	3312      	adds	r3, #18
 8013514:	2100      	movs	r1, #0
 8013516:	4618      	mov	r0, r3
 8013518:	f7fd fca5 	bl	8010e66 <st_word>
					fs->wflag = 1;
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	2201      	movs	r2, #1
 8013520:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	4618      	mov	r0, r3
 8013526:	f7fd ff41 	bl	80113ac <sync_fs>
 801352a:	4603      	mov	r3, r0
 801352c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	7d1b      	ldrb	r3, [r3, #20]
 8013532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013536:	b2da      	uxtb	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801353c:	7dfb      	ldrb	r3, [r7, #23]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	274a0000 	.word	0x274a0000

0801354c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f7ff ff79 	bl	801344c <f_sync>
 801355a:	4603      	mov	r3, r0
 801355c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801355e:	7bfb      	ldrb	r3, [r7, #15]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d118      	bne.n	8013596 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f107 0208 	add.w	r2, r7, #8
 801356a:	4611      	mov	r1, r2
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fa2f 	bl	80129d0 <validate>
 8013572:	4603      	mov	r3, r0
 8013574:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013576:	7bfb      	ldrb	r3, [r7, #15]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10c      	bne.n	8013596 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	691b      	ldr	r3, [r3, #16]
 8013580:	4618      	mov	r0, r3
 8013582:	f7fd fe41 	bl	8011208 <dec_lock>
 8013586:	4603      	mov	r3, r0
 8013588:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801358a:	7bfb      	ldrb	r3, [r7, #15]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d102      	bne.n	8013596 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013596:	7bfb      	ldrb	r3, [r7, #15]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80135a0:	b590      	push	{r4, r7, lr}
 80135a2:	b091      	sub	sp, #68	; 0x44
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80135a8:	f107 0108 	add.w	r1, r7, #8
 80135ac:	1d3b      	adds	r3, r7, #4
 80135ae:	2200      	movs	r2, #0
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fe ff87 	bl	80124c4 <find_volume>
 80135b6:	4603      	mov	r3, r0
 80135b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80135bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d131      	bne.n	8013628 <f_chdir+0x88>
		dj.obj.fs = fs;
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	f107 030c 	add.w	r3, r7, #12
 80135ce:	4611      	mov	r1, r2
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fe fe47 	bl	8012264 <follow_path>
 80135d6:	4603      	mov	r3, r0
 80135d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80135dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d11a      	bne.n	801361a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80135e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80135e8:	b25b      	sxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	da03      	bge.n	80135f6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	697a      	ldr	r2, [r7, #20]
 80135f2:	619a      	str	r2, [r3, #24]
 80135f4:	e011      	b.n	801361a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80135f6:	7cbb      	ldrb	r3, [r7, #18]
 80135f8:	f003 0310 	and.w	r3, r3, #16
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d009      	beq.n	8013614 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013604:	68bc      	ldr	r4, [r7, #8]
 8013606:	4611      	mov	r1, r2
 8013608:	4618      	mov	r0, r3
 801360a:	f7fe fc20 	bl	8011e4e <ld_clust>
 801360e:	4603      	mov	r3, r0
 8013610:	61a3      	str	r3, [r4, #24]
 8013612:	e002      	b.n	801361a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013614:	2305      	movs	r3, #5
 8013616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801361a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801361e:	2b04      	cmp	r3, #4
 8013620:	d102      	bne.n	8013628 <f_chdir+0x88>
 8013622:	2305      	movs	r3, #5
 8013624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013628:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801362c:	4618      	mov	r0, r3
 801362e:	3744      	adds	r7, #68	; 0x44
 8013630:	46bd      	mov	sp, r7
 8013632:	bd90      	pop	{r4, r7, pc}

08013634 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b090      	sub	sp, #64	; 0x40
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f107 0208 	add.w	r2, r7, #8
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff f9c2 	bl	80129d0 <validate>
 801364c:	4603      	mov	r3, r0
 801364e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013652:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013656:	2b00      	cmp	r3, #0
 8013658:	d103      	bne.n	8013662 <f_lseek+0x2e>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	7d5b      	ldrb	r3, [r3, #21]
 801365e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013666:	2b00      	cmp	r3, #0
 8013668:	d002      	beq.n	8013670 <f_lseek+0x3c>
 801366a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801366e:	e201      	b.n	8013a74 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013674:	2b00      	cmp	r3, #0
 8013676:	f000 80d9 	beq.w	801382c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013680:	d15a      	bne.n	8013738 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013686:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368a:	1d1a      	adds	r2, r3, #4
 801368c:	627a      	str	r2, [r7, #36]	; 0x24
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	617b      	str	r3, [r7, #20]
 8013692:	2302      	movs	r3, #2
 8013694:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d03a      	beq.n	8013718 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80136a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a4:	613b      	str	r3, [r7, #16]
 80136a6:	2300      	movs	r3, #0
 80136a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ac:	3302      	adds	r3, #2
 80136ae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80136b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b2:	60fb      	str	r3, [r7, #12]
 80136b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b6:	3301      	adds	r3, #1
 80136b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fd ff03 	bl	80114ca <get_fat>
 80136c4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80136c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d804      	bhi.n	80136d6 <f_lseek+0xa2>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2202      	movs	r2, #2
 80136d0:	755a      	strb	r2, [r3, #21]
 80136d2:	2302      	movs	r3, #2
 80136d4:	e1ce      	b.n	8013a74 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136dc:	d104      	bne.n	80136e8 <f_lseek+0xb4>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2201      	movs	r2, #1
 80136e2:	755a      	strb	r2, [r3, #21]
 80136e4:	2301      	movs	r3, #1
 80136e6:	e1c5      	b.n	8013a74 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	3301      	adds	r3, #1
 80136ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d0de      	beq.n	80136b0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80136f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d809      	bhi.n	801370e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80136fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fc:	1d1a      	adds	r2, r3, #4
 80136fe:	627a      	str	r2, [r7, #36]	; 0x24
 8013700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013702:	601a      	str	r2, [r3, #0]
 8013704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013706:	1d1a      	adds	r2, r3, #4
 8013708:	627a      	str	r2, [r7, #36]	; 0x24
 801370a:	693a      	ldr	r2, [r7, #16]
 801370c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	69db      	ldr	r3, [r3, #28]
 8013712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013714:	429a      	cmp	r2, r3
 8013716:	d3c4      	bcc.n	80136a2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801371e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	429a      	cmp	r2, r3
 8013726:	d803      	bhi.n	8013730 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	2200      	movs	r2, #0
 801372c:	601a      	str	r2, [r3, #0]
 801372e:	e19f      	b.n	8013a70 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013730:	2311      	movs	r3, #17
 8013732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013736:	e19b      	b.n	8013a70 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	683a      	ldr	r2, [r7, #0]
 801373e:	429a      	cmp	r2, r3
 8013740:	d902      	bls.n	8013748 <f_lseek+0x114>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	683a      	ldr	r2, [r7, #0]
 801374c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	f000 818d 	beq.w	8013a70 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	3b01      	subs	r3, #1
 801375a:	4619      	mov	r1, r3
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7fe f998 	bl	8011a92 <clmt_clust>
 8013762:	4602      	mov	r2, r0
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013768:	68ba      	ldr	r2, [r7, #8]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	69db      	ldr	r3, [r3, #28]
 801376e:	4619      	mov	r1, r3
 8013770:	4610      	mov	r0, r2
 8013772:	f7fd fe8b 	bl	801148c <clust2sect>
 8013776:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d104      	bne.n	8013788 <f_lseek+0x154>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2202      	movs	r2, #2
 8013782:	755a      	strb	r2, [r3, #21]
 8013784:	2302      	movs	r3, #2
 8013786:	e175      	b.n	8013a74 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	3b01      	subs	r3, #1
 801378c:	68ba      	ldr	r2, [r7, #8]
 801378e:	8992      	ldrh	r2, [r2, #12]
 8013790:	fbb3 f3f2 	udiv	r3, r3, r2
 8013794:	68ba      	ldr	r2, [r7, #8]
 8013796:	8952      	ldrh	r2, [r2, #10]
 8013798:	3a01      	subs	r2, #1
 801379a:	4013      	ands	r3, r2
 801379c:	69ba      	ldr	r2, [r7, #24]
 801379e:	4413      	add	r3, r2
 80137a0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	699b      	ldr	r3, [r3, #24]
 80137a6:	68ba      	ldr	r2, [r7, #8]
 80137a8:	8992      	ldrh	r2, [r2, #12]
 80137aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80137ae:	fb02 f201 	mul.w	r2, r2, r1
 80137b2:	1a9b      	subs	r3, r3, r2
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 815b 	beq.w	8013a70 <f_lseek+0x43c>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6a1b      	ldr	r3, [r3, #32]
 80137be:	69ba      	ldr	r2, [r7, #24]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	f000 8155 	beq.w	8013a70 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	7d1b      	ldrb	r3, [r3, #20]
 80137ca:	b25b      	sxtb	r3, r3
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	da18      	bge.n	8013802 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	7858      	ldrb	r0, [r3, #1]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	6a1a      	ldr	r2, [r3, #32]
 80137de:	2301      	movs	r3, #1
 80137e0:	f7fd fac8 	bl	8010d74 <disk_write>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d004      	beq.n	80137f4 <f_lseek+0x1c0>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2201      	movs	r2, #1
 80137ee:	755a      	strb	r2, [r3, #21]
 80137f0:	2301      	movs	r3, #1
 80137f2:	e13f      	b.n	8013a74 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	7d1b      	ldrb	r3, [r3, #20]
 80137f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	7858      	ldrb	r0, [r3, #1]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801380c:	2301      	movs	r3, #1
 801380e:	69ba      	ldr	r2, [r7, #24]
 8013810:	f7fd fa90 	bl	8010d34 <disk_read>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d004      	beq.n	8013824 <f_lseek+0x1f0>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2201      	movs	r2, #1
 801381e:	755a      	strb	r2, [r3, #21]
 8013820:	2301      	movs	r3, #1
 8013822:	e127      	b.n	8013a74 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	621a      	str	r2, [r3, #32]
 801382a:	e121      	b.n	8013a70 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	68db      	ldr	r3, [r3, #12]
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	429a      	cmp	r2, r3
 8013834:	d908      	bls.n	8013848 <f_lseek+0x214>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	7d1b      	ldrb	r3, [r3, #20]
 801383a:	f003 0302 	and.w	r3, r3, #2
 801383e:	2b00      	cmp	r3, #0
 8013840:	d102      	bne.n	8013848 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	699b      	ldr	r3, [r3, #24]
 801384c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801384e:	2300      	movs	r3, #0
 8013850:	637b      	str	r3, [r7, #52]	; 0x34
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013856:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	f000 80b5 	beq.w	80139ca <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	895b      	ldrh	r3, [r3, #10]
 8013864:	461a      	mov	r2, r3
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	899b      	ldrh	r3, [r3, #12]
 801386a:	fb03 f302 	mul.w	r3, r3, r2
 801386e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013870:	6a3b      	ldr	r3, [r7, #32]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d01b      	beq.n	80138ae <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	1e5a      	subs	r2, r3, #1
 801387a:	69fb      	ldr	r3, [r7, #28]
 801387c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013880:	6a3b      	ldr	r3, [r7, #32]
 8013882:	1e59      	subs	r1, r3, #1
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801388a:	429a      	cmp	r2, r3
 801388c:	d30f      	bcc.n	80138ae <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	1e5a      	subs	r2, r3, #1
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	425b      	negs	r3, r3
 8013896:	401a      	ands	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	699b      	ldr	r3, [r3, #24]
 80138a0:	683a      	ldr	r2, [r7, #0]
 80138a2:	1ad3      	subs	r3, r2, r3
 80138a4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	69db      	ldr	r3, [r3, #28]
 80138aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80138ac:	e022      	b.n	80138f4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80138b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d119      	bne.n	80138ee <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2100      	movs	r1, #0
 80138be:	4618      	mov	r0, r3
 80138c0:	f7fe f84f 	bl	8011962 <create_chain>
 80138c4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80138c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d104      	bne.n	80138d6 <f_lseek+0x2a2>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2202      	movs	r2, #2
 80138d0:	755a      	strb	r2, [r3, #21]
 80138d2:	2302      	movs	r3, #2
 80138d4:	e0ce      	b.n	8013a74 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138dc:	d104      	bne.n	80138e8 <f_lseek+0x2b4>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2201      	movs	r2, #1
 80138e2:	755a      	strb	r2, [r3, #21]
 80138e4:	2301      	movs	r3, #1
 80138e6:	e0c5      	b.n	8013a74 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138ec:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138f2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80138f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d067      	beq.n	80139ca <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80138fa:	e03a      	b.n	8013972 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	1ad3      	subs	r3, r2, r3
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	699a      	ldr	r2, [r3, #24]
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	441a      	add	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	7d1b      	ldrb	r3, [r3, #20]
 8013914:	f003 0302 	and.w	r3, r3, #2
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00b      	beq.n	8013934 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013920:	4618      	mov	r0, r3
 8013922:	f7fe f81e 	bl	8011962 <create_chain>
 8013926:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392a:	2b00      	cmp	r3, #0
 801392c:	d108      	bne.n	8013940 <f_lseek+0x30c>
							ofs = 0; break;
 801392e:	2300      	movs	r3, #0
 8013930:	603b      	str	r3, [r7, #0]
 8013932:	e022      	b.n	801397a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd fdc6 	bl	80114ca <get_fat>
 801393e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013946:	d104      	bne.n	8013952 <f_lseek+0x31e>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2201      	movs	r2, #1
 801394c:	755a      	strb	r2, [r3, #21]
 801394e:	2301      	movs	r3, #1
 8013950:	e090      	b.n	8013a74 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013954:	2b01      	cmp	r3, #1
 8013956:	d904      	bls.n	8013962 <f_lseek+0x32e>
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	69db      	ldr	r3, [r3, #28]
 801395c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801395e:	429a      	cmp	r2, r3
 8013960:	d304      	bcc.n	801396c <f_lseek+0x338>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2202      	movs	r2, #2
 8013966:	755a      	strb	r2, [r3, #21]
 8013968:	2302      	movs	r3, #2
 801396a:	e083      	b.n	8013a74 <f_lseek+0x440>
					fp->clust = clst;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013970:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013972:	683a      	ldr	r2, [r7, #0]
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	429a      	cmp	r2, r3
 8013978:	d8c0      	bhi.n	80138fc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	699a      	ldr	r2, [r3, #24]
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	441a      	add	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	899b      	ldrh	r3, [r3, #12]
 801398a:	461a      	mov	r2, r3
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013992:	fb02 f201 	mul.w	r2, r2, r1
 8013996:	1a9b      	subs	r3, r3, r2
 8013998:	2b00      	cmp	r3, #0
 801399a:	d016      	beq.n	80139ca <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fd fd73 	bl	801148c <clust2sect>
 80139a6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80139a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d104      	bne.n	80139b8 <f_lseek+0x384>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2202      	movs	r2, #2
 80139b2:	755a      	strb	r2, [r3, #21]
 80139b4:	2302      	movs	r3, #2
 80139b6:	e05d      	b.n	8013a74 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	899b      	ldrh	r3, [r3, #12]
 80139bc:	461a      	mov	r2, r3
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80139c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139c6:	4413      	add	r3, r2
 80139c8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	699a      	ldr	r2, [r3, #24]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68db      	ldr	r3, [r3, #12]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d90a      	bls.n	80139ec <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	699a      	ldr	r2, [r3, #24]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	7d1b      	ldrb	r3, [r3, #20]
 80139e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139e6:	b2da      	uxtb	r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	68ba      	ldr	r2, [r7, #8]
 80139f2:	8992      	ldrh	r2, [r2, #12]
 80139f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80139f8:	fb02 f201 	mul.w	r2, r2, r1
 80139fc:	1a9b      	subs	r3, r3, r2
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d036      	beq.n	8013a70 <f_lseek+0x43c>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d031      	beq.n	8013a70 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	7d1b      	ldrb	r3, [r3, #20]
 8013a10:	b25b      	sxtb	r3, r3
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	da18      	bge.n	8013a48 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	7858      	ldrb	r0, [r3, #1]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6a1a      	ldr	r2, [r3, #32]
 8013a24:	2301      	movs	r3, #1
 8013a26:	f7fd f9a5 	bl	8010d74 <disk_write>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d004      	beq.n	8013a3a <f_lseek+0x406>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2201      	movs	r2, #1
 8013a34:	755a      	strb	r2, [r3, #21]
 8013a36:	2301      	movs	r3, #1
 8013a38:	e01c      	b.n	8013a74 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	7d1b      	ldrb	r3, [r3, #20]
 8013a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a42:	b2da      	uxtb	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	7858      	ldrb	r0, [r3, #1]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a52:	2301      	movs	r3, #1
 8013a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a56:	f7fd f96d 	bl	8010d34 <disk_read>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d004      	beq.n	8013a6a <f_lseek+0x436>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2201      	movs	r2, #1
 8013a64:	755a      	strb	r2, [r3, #21]
 8013a66:	2301      	movs	r3, #1
 8013a68:	e004      	b.n	8013a74 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a6e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3740      	adds	r7, #64	; 0x40
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}

08013a7c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b09e      	sub	sp, #120	; 0x78
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013a84:	2300      	movs	r3, #0
 8013a86:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013a88:	f107 010c 	add.w	r1, r7, #12
 8013a8c:	1d3b      	adds	r3, r7, #4
 8013a8e:	2202      	movs	r2, #2
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fe fd17 	bl	80124c4 <find_volume>
 8013a96:	4603      	mov	r3, r0
 8013a98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f040 80a4 	bne.w	8013bf2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7fe fbd6 	bl	8012264 <follow_path>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013abe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d108      	bne.n	8013ad8 <f_unlink+0x5c>
 8013ac6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013aca:	f003 0320 	and.w	r3, r3, #32
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d002      	beq.n	8013ad8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013ad2:	2306      	movs	r3, #6
 8013ad4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013ad8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d108      	bne.n	8013af2 <f_unlink+0x76>
 8013ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ae4:	2102      	movs	r1, #2
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7fd fa82 	bl	8010ff0 <chk_lock>
 8013aec:	4603      	mov	r3, r0
 8013aee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013af2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d17b      	bne.n	8013bf2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013afe:	b25b      	sxtb	r3, r3
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	da03      	bge.n	8013b0c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013b04:	2306      	movs	r3, #6
 8013b06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013b0a:	e008      	b.n	8013b1e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013b0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013b10:	f003 0301 	and.w	r3, r3, #1
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d002      	beq.n	8013b1e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013b18:	2307      	movs	r3, #7
 8013b1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013b1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d13d      	bne.n	8013ba2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b2a:	4611      	mov	r1, r2
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fe f98e 	bl	8011e4e <ld_clust>
 8013b32:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013b34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013b38:	f003 0310 	and.w	r3, r3, #16
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d030      	beq.n	8013ba2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d103      	bne.n	8013b52 <f_unlink+0xd6>
						res = FR_DENIED;
 8013b4a:	2307      	movs	r3, #7
 8013b4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013b50:	e027      	b.n	8013ba2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b58:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013b5a:	f107 0310 	add.w	r3, r7, #16
 8013b5e:	2100      	movs	r1, #0
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fd ffce 	bl	8011b02 <dir_sdi>
 8013b66:	4603      	mov	r3, r0
 8013b68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013b6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d116      	bne.n	8013ba2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013b74:	f107 0310 	add.w	r3, r7, #16
 8013b78:	2100      	movs	r1, #0
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fe f9a6 	bl	8011ecc <dir_read>
 8013b80:	4603      	mov	r3, r0
 8013b82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013b86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d102      	bne.n	8013b94 <f_unlink+0x118>
 8013b8e:	2307      	movs	r3, #7
 8013b90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013b94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b98:	2b04      	cmp	r3, #4
 8013b9a:	d102      	bne.n	8013ba2 <f_unlink+0x126>
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013ba2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d123      	bne.n	8013bf2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fe fa70 	bl	8012094 <dir_remove>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013bba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d10c      	bne.n	8013bdc <f_unlink+0x160>
 8013bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d009      	beq.n	8013bdc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013bcc:	2200      	movs	r2, #0
 8013bce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fd fe61 	bl	8011898 <remove_chain>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013bdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d106      	bne.n	8013bf2 <f_unlink+0x176>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fd fbe0 	bl	80113ac <sync_fs>
 8013bec:	4603      	mov	r3, r0
 8013bee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013bf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3778      	adds	r7, #120	; 0x78
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
	...

08013c00 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b096      	sub	sp, #88	; 0x58
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c08:	f107 0108 	add.w	r1, r7, #8
 8013c0c:	1d3b      	adds	r3, r7, #4
 8013c0e:	2202      	movs	r2, #2
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fe fc57 	bl	80124c4 <find_volume>
 8013c16:	4603      	mov	r3, r0
 8013c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f040 80fe 	bne.w	8013e26 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	f107 030c 	add.w	r3, r7, #12
 8013c30:	4611      	mov	r1, r2
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fe fb16 	bl	8012264 <follow_path>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d102      	bne.n	8013c4c <f_mkdir+0x4c>
 8013c46:	2308      	movs	r3, #8
 8013c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c50:	2b04      	cmp	r3, #4
 8013c52:	d108      	bne.n	8013c66 <f_mkdir+0x66>
 8013c54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c58:	f003 0320 	and.w	r3, r3, #32
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d002      	beq.n	8013c66 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013c60:	2306      	movs	r3, #6
 8013c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c6a:	2b04      	cmp	r3, #4
 8013c6c:	f040 80db 	bne.w	8013e26 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013c70:	f107 030c 	add.w	r3, r7, #12
 8013c74:	2100      	movs	r1, #0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fd fe73 	bl	8011962 <create_chain>
 8013c7c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	895b      	ldrh	r3, [r3, #10]
 8013c82:	461a      	mov	r2, r3
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	899b      	ldrh	r3, [r3, #12]
 8013c88:	fb03 f302 	mul.w	r3, r3, r2
 8013c8c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d102      	bne.n	8013ca0 <f_mkdir+0xa0>
 8013c9a:	2307      	movs	r3, #7
 8013c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	d102      	bne.n	8013cac <f_mkdir+0xac>
 8013ca6:	2302      	movs	r3, #2
 8013ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb2:	d102      	bne.n	8013cba <f_mkdir+0xba>
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d106      	bne.n	8013cd0 <f_mkdir+0xd0>
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fd faff 	bl	80112c8 <sync_window>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013cd0:	4b58      	ldr	r3, [pc, #352]	; (8013e34 <f_mkdir+0x234>)
 8013cd2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d16c      	bne.n	8013db6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fd fbd3 	bl	801148c <clust2sect>
 8013ce6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	3338      	adds	r3, #56	; 0x38
 8013cec:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	899b      	ldrh	r3, [r3, #12]
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cf8:	f7fd f91d 	bl	8010f36 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013cfc:	220b      	movs	r2, #11
 8013cfe:	2120      	movs	r1, #32
 8013d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d02:	f7fd f918 	bl	8010f36 <mem_set>
					dir[DIR_Name] = '.';
 8013d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d08:	222e      	movs	r2, #46	; 0x2e
 8013d0a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d0e:	330b      	adds	r3, #11
 8013d10:	2210      	movs	r2, #16
 8013d12:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d16:	3316      	adds	r3, #22
 8013d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fd f8be 	bl	8010e9c <st_dword>
					st_clust(fs, dir, dcl);
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe f8b0 	bl	8011e8c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d2e:	3320      	adds	r3, #32
 8013d30:	2220      	movs	r2, #32
 8013d32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fd f8dd 	bl	8010ef4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d3c:	3321      	adds	r3, #33	; 0x21
 8013d3e:	222e      	movs	r2, #46	; 0x2e
 8013d40:	701a      	strb	r2, [r3, #0]
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	2b03      	cmp	r3, #3
 8013d4c:	d106      	bne.n	8013d5c <f_mkdir+0x15c>
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d101      	bne.n	8013d5c <f_mkdir+0x15c>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013d5c:	68b8      	ldr	r0, [r7, #8]
 8013d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d60:	3320      	adds	r3, #32
 8013d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d64:	4619      	mov	r1, r3
 8013d66:	f7fe f891 	bl	8011e8c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	895b      	ldrh	r3, [r3, #10]
 8013d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8013d70:	e01c      	b.n	8013dac <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d74:	1c5a      	adds	r2, r3, #1
 8013d76:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fd fa9f 	bl	80112c8 <sync_window>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10d      	bne.n	8013db4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	899b      	ldrh	r3, [r3, #12]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	2100      	movs	r1, #0
 8013da0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013da2:	f7fd f8c8 	bl	8010f36 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013da8:	3b01      	subs	r3, #1
 8013daa:	653b      	str	r3, [r7, #80]	; 0x50
 8013dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d1df      	bne.n	8013d72 <f_mkdir+0x172>
 8013db2:	e000      	b.n	8013db6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013db4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013db6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d107      	bne.n	8013dce <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013dbe:	f107 030c 	add.w	r3, r7, #12
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fe f934 	bl	8012030 <dir_register>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d120      	bne.n	8013e18 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ddc:	3316      	adds	r3, #22
 8013dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fd f85b 	bl	8010e9c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fe f84d 	bl	8011e8c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013df4:	330b      	adds	r3, #11
 8013df6:	2210      	movs	r2, #16
 8013df8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10e      	bne.n	8013e26 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fd face 	bl	80113ac <sync_fs>
 8013e10:	4603      	mov	r3, r0
 8013e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013e16:	e006      	b.n	8013e26 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013e18:	f107 030c 	add.w	r3, r7, #12
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fd fd39 	bl	8011898 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3758      	adds	r7, #88	; 0x58
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	274a0000 	.word	0x274a0000

08013e38 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b088      	sub	sp, #32
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013e44:	2300      	movs	r3, #0
 8013e46:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013e4c:	e017      	b.n	8013e7e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013e4e:	f107 0310 	add.w	r3, r7, #16
 8013e52:	f107 0114 	add.w	r1, r7, #20
 8013e56:	2201      	movs	r2, #1
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff f803 	bl	8012e64 <f_read>
		if (rc != 1) break;
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d112      	bne.n	8013e8a <f_gets+0x52>
		c = s[0];
 8013e64:	7d3b      	ldrb	r3, [r7, #20]
 8013e66:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	1c5a      	adds	r2, r3, #1
 8013e6c:	61ba      	str	r2, [r7, #24]
 8013e6e:	7dfa      	ldrb	r2, [r7, #23]
 8013e70:	701a      	strb	r2, [r3, #0]
		n++;
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	3301      	adds	r3, #1
 8013e76:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013e78:	7dfb      	ldrb	r3, [r7, #23]
 8013e7a:	2b0a      	cmp	r3, #10
 8013e7c:	d007      	beq.n	8013e8e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	69fa      	ldr	r2, [r7, #28]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	dbe2      	blt.n	8013e4e <f_gets+0x16>
 8013e88:	e002      	b.n	8013e90 <f_gets+0x58>
		if (rc != 1) break;
 8013e8a:	bf00      	nop
 8013e8c:	e000      	b.n	8013e90 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013e8e:	bf00      	nop
	}
	*p = 0;
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	2200      	movs	r2, #0
 8013e94:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013e96:	69fb      	ldr	r3, [r7, #28]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d001      	beq.n	8013ea0 <f_gets+0x68>
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	e000      	b.n	8013ea2 <f_gets+0x6a>
 8013ea0:	2300      	movs	r3, #0
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3720      	adds	r7, #32
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
	...

08013eac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b087      	sub	sp, #28
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013eba:	2301      	movs	r3, #1
 8013ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013ec2:	4b1f      	ldr	r3, [pc, #124]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013ec4:	7a5b      	ldrb	r3, [r3, #9]
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d131      	bne.n	8013f30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013ecc:	4b1c      	ldr	r3, [pc, #112]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013ece:	7a5b      	ldrb	r3, [r3, #9]
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	4b1a      	ldr	r3, [pc, #104]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013eda:	4b19      	ldr	r3, [pc, #100]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013edc:	7a5b      	ldrb	r3, [r3, #9]
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	4a17      	ldr	r2, [pc, #92]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4413      	add	r3, r2
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013eea:	4b15      	ldr	r3, [pc, #84]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013eec:	7a5b      	ldrb	r3, [r3, #9]
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4b13      	ldr	r3, [pc, #76]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013ef4:	4413      	add	r3, r2
 8013ef6:	79fa      	ldrb	r2, [r7, #7]
 8013ef8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013efa:	4b11      	ldr	r3, [pc, #68]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013efc:	7a5b      	ldrb	r3, [r3, #9]
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	1c5a      	adds	r2, r3, #1
 8013f02:	b2d1      	uxtb	r1, r2
 8013f04:	4a0e      	ldr	r2, [pc, #56]	; (8013f40 <FATFS_LinkDriverEx+0x94>)
 8013f06:	7251      	strb	r1, [r2, #9]
 8013f08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f0a:	7dbb      	ldrb	r3, [r7, #22]
 8013f0c:	3330      	adds	r3, #48	; 0x30
 8013f0e:	b2da      	uxtb	r2, r3
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	3301      	adds	r3, #1
 8013f18:	223a      	movs	r2, #58	; 0x3a
 8013f1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	3302      	adds	r3, #2
 8013f20:	222f      	movs	r2, #47	; 0x2f
 8013f22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	3303      	adds	r3, #3
 8013f28:	2200      	movs	r2, #0
 8013f2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	371c      	adds	r7, #28
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	20041320 	.word	0x20041320

08013f44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013f4e:	2200      	movs	r2, #0
 8013f50:	6839      	ldr	r1, [r7, #0]
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7ff ffaa 	bl	8013eac <FATFS_LinkDriverEx>
 8013f58:	4603      	mov	r3, r0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <__cxa_guard_acquire>:
 8013f62:	6803      	ldr	r3, [r0, #0]
 8013f64:	07db      	lsls	r3, r3, #31
 8013f66:	d406      	bmi.n	8013f76 <__cxa_guard_acquire+0x14>
 8013f68:	7843      	ldrb	r3, [r0, #1]
 8013f6a:	b103      	cbz	r3, 8013f6e <__cxa_guard_acquire+0xc>
 8013f6c:	deff      	udf	#255	; 0xff
 8013f6e:	2301      	movs	r3, #1
 8013f70:	7043      	strb	r3, [r0, #1]
 8013f72:	4618      	mov	r0, r3
 8013f74:	4770      	bx	lr
 8013f76:	2000      	movs	r0, #0
 8013f78:	4770      	bx	lr

08013f7a <__cxa_guard_release>:
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	6003      	str	r3, [r0, #0]
 8013f7e:	4770      	bx	lr

08013f80 <cos>:
 8013f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f82:	ec51 0b10 	vmov	r0, r1, d0
 8013f86:	4a1e      	ldr	r2, [pc, #120]	; (8014000 <cos+0x80>)
 8013f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	dc06      	bgt.n	8013f9e <cos+0x1e>
 8013f90:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013ff8 <cos+0x78>
 8013f94:	f000 fa74 	bl	8014480 <__kernel_cos>
 8013f98:	ec51 0b10 	vmov	r0, r1, d0
 8013f9c:	e007      	b.n	8013fae <cos+0x2e>
 8013f9e:	4a19      	ldr	r2, [pc, #100]	; (8014004 <cos+0x84>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	dd09      	ble.n	8013fb8 <cos+0x38>
 8013fa4:	ee10 2a10 	vmov	r2, s0
 8013fa8:	460b      	mov	r3, r1
 8013faa:	f7ec f985 	bl	80002b8 <__aeabi_dsub>
 8013fae:	ec41 0b10 	vmov	d0, r0, r1
 8013fb2:	b005      	add	sp, #20
 8013fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fb8:	4668      	mov	r0, sp
 8013fba:	f000 f86d 	bl	8014098 <__ieee754_rem_pio2>
 8013fbe:	f000 0003 	and.w	r0, r0, #3
 8013fc2:	2801      	cmp	r0, #1
 8013fc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013fc8:	ed9d 0b00 	vldr	d0, [sp]
 8013fcc:	d007      	beq.n	8013fde <cos+0x5e>
 8013fce:	2802      	cmp	r0, #2
 8013fd0:	d00e      	beq.n	8013ff0 <cos+0x70>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d0de      	beq.n	8013f94 <cos+0x14>
 8013fd6:	2001      	movs	r0, #1
 8013fd8:	f000 fe5a 	bl	8014c90 <__kernel_sin>
 8013fdc:	e7dc      	b.n	8013f98 <cos+0x18>
 8013fde:	f000 fe57 	bl	8014c90 <__kernel_sin>
 8013fe2:	ec53 2b10 	vmov	r2, r3, d0
 8013fe6:	ee10 0a10 	vmov	r0, s0
 8013fea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013fee:	e7de      	b.n	8013fae <cos+0x2e>
 8013ff0:	f000 fa46 	bl	8014480 <__kernel_cos>
 8013ff4:	e7f5      	b.n	8013fe2 <cos+0x62>
 8013ff6:	bf00      	nop
	...
 8014000:	3fe921fb 	.word	0x3fe921fb
 8014004:	7fefffff 	.word	0x7fefffff

08014008 <sin>:
 8014008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801400a:	ec51 0b10 	vmov	r0, r1, d0
 801400e:	4a20      	ldr	r2, [pc, #128]	; (8014090 <sin+0x88>)
 8014010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014014:	4293      	cmp	r3, r2
 8014016:	dc07      	bgt.n	8014028 <sin+0x20>
 8014018:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014088 <sin+0x80>
 801401c:	2000      	movs	r0, #0
 801401e:	f000 fe37 	bl	8014c90 <__kernel_sin>
 8014022:	ec51 0b10 	vmov	r0, r1, d0
 8014026:	e007      	b.n	8014038 <sin+0x30>
 8014028:	4a1a      	ldr	r2, [pc, #104]	; (8014094 <sin+0x8c>)
 801402a:	4293      	cmp	r3, r2
 801402c:	dd09      	ble.n	8014042 <sin+0x3a>
 801402e:	ee10 2a10 	vmov	r2, s0
 8014032:	460b      	mov	r3, r1
 8014034:	f7ec f940 	bl	80002b8 <__aeabi_dsub>
 8014038:	ec41 0b10 	vmov	d0, r0, r1
 801403c:	b005      	add	sp, #20
 801403e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014042:	4668      	mov	r0, sp
 8014044:	f000 f828 	bl	8014098 <__ieee754_rem_pio2>
 8014048:	f000 0003 	and.w	r0, r0, #3
 801404c:	2801      	cmp	r0, #1
 801404e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014052:	ed9d 0b00 	vldr	d0, [sp]
 8014056:	d004      	beq.n	8014062 <sin+0x5a>
 8014058:	2802      	cmp	r0, #2
 801405a:	d005      	beq.n	8014068 <sin+0x60>
 801405c:	b970      	cbnz	r0, 801407c <sin+0x74>
 801405e:	2001      	movs	r0, #1
 8014060:	e7dd      	b.n	801401e <sin+0x16>
 8014062:	f000 fa0d 	bl	8014480 <__kernel_cos>
 8014066:	e7dc      	b.n	8014022 <sin+0x1a>
 8014068:	2001      	movs	r0, #1
 801406a:	f000 fe11 	bl	8014c90 <__kernel_sin>
 801406e:	ec53 2b10 	vmov	r2, r3, d0
 8014072:	ee10 0a10 	vmov	r0, s0
 8014076:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801407a:	e7dd      	b.n	8014038 <sin+0x30>
 801407c:	f000 fa00 	bl	8014480 <__kernel_cos>
 8014080:	e7f5      	b.n	801406e <sin+0x66>
 8014082:	bf00      	nop
 8014084:	f3af 8000 	nop.w
	...
 8014090:	3fe921fb 	.word	0x3fe921fb
 8014094:	7fefffff 	.word	0x7fefffff

08014098 <__ieee754_rem_pio2>:
 8014098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801409c:	ec57 6b10 	vmov	r6, r7, d0
 80140a0:	4bc3      	ldr	r3, [pc, #780]	; (80143b0 <__ieee754_rem_pio2+0x318>)
 80140a2:	b08d      	sub	sp, #52	; 0x34
 80140a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80140a8:	4598      	cmp	r8, r3
 80140aa:	4604      	mov	r4, r0
 80140ac:	9704      	str	r7, [sp, #16]
 80140ae:	dc07      	bgt.n	80140c0 <__ieee754_rem_pio2+0x28>
 80140b0:	2200      	movs	r2, #0
 80140b2:	2300      	movs	r3, #0
 80140b4:	ed84 0b00 	vstr	d0, [r4]
 80140b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80140bc:	2500      	movs	r5, #0
 80140be:	e027      	b.n	8014110 <__ieee754_rem_pio2+0x78>
 80140c0:	4bbc      	ldr	r3, [pc, #752]	; (80143b4 <__ieee754_rem_pio2+0x31c>)
 80140c2:	4598      	cmp	r8, r3
 80140c4:	dc75      	bgt.n	80141b2 <__ieee754_rem_pio2+0x11a>
 80140c6:	9b04      	ldr	r3, [sp, #16]
 80140c8:	4dbb      	ldr	r5, [pc, #748]	; (80143b8 <__ieee754_rem_pio2+0x320>)
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	ee10 0a10 	vmov	r0, s0
 80140d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8014378 <__ieee754_rem_pio2+0x2e0>)
 80140d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d6:	4639      	mov	r1, r7
 80140d8:	dd36      	ble.n	8014148 <__ieee754_rem_pio2+0xb0>
 80140da:	f7ec f8ed 	bl	80002b8 <__aeabi_dsub>
 80140de:	45a8      	cmp	r8, r5
 80140e0:	4606      	mov	r6, r0
 80140e2:	460f      	mov	r7, r1
 80140e4:	d018      	beq.n	8014118 <__ieee754_rem_pio2+0x80>
 80140e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014380 <__ieee754_rem_pio2+0x2e8>)
 80140e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ec:	f7ec f8e4 	bl	80002b8 <__aeabi_dsub>
 80140f0:	4602      	mov	r2, r0
 80140f2:	460b      	mov	r3, r1
 80140f4:	e9c4 2300 	strd	r2, r3, [r4]
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f7ec f8dc 	bl	80002b8 <__aeabi_dsub>
 8014100:	a39f      	add	r3, pc, #636	; (adr r3, 8014380 <__ieee754_rem_pio2+0x2e8>)
 8014102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014106:	f7ec f8d7 	bl	80002b8 <__aeabi_dsub>
 801410a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801410e:	2501      	movs	r5, #1
 8014110:	4628      	mov	r0, r5
 8014112:	b00d      	add	sp, #52	; 0x34
 8014114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014118:	a39b      	add	r3, pc, #620	; (adr r3, 8014388 <__ieee754_rem_pio2+0x2f0>)
 801411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411e:	f7ec f8cb 	bl	80002b8 <__aeabi_dsub>
 8014122:	a39b      	add	r3, pc, #620	; (adr r3, 8014390 <__ieee754_rem_pio2+0x2f8>)
 8014124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014128:	4606      	mov	r6, r0
 801412a:	460f      	mov	r7, r1
 801412c:	f7ec f8c4 	bl	80002b8 <__aeabi_dsub>
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	e9c4 2300 	strd	r2, r3, [r4]
 8014138:	4630      	mov	r0, r6
 801413a:	4639      	mov	r1, r7
 801413c:	f7ec f8bc 	bl	80002b8 <__aeabi_dsub>
 8014140:	a393      	add	r3, pc, #588	; (adr r3, 8014390 <__ieee754_rem_pio2+0x2f8>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	e7de      	b.n	8014106 <__ieee754_rem_pio2+0x6e>
 8014148:	f7ec f8b8 	bl	80002bc <__adddf3>
 801414c:	45a8      	cmp	r8, r5
 801414e:	4606      	mov	r6, r0
 8014150:	460f      	mov	r7, r1
 8014152:	d016      	beq.n	8014182 <__ieee754_rem_pio2+0xea>
 8014154:	a38a      	add	r3, pc, #552	; (adr r3, 8014380 <__ieee754_rem_pio2+0x2e8>)
 8014156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415a:	f7ec f8af 	bl	80002bc <__adddf3>
 801415e:	4602      	mov	r2, r0
 8014160:	460b      	mov	r3, r1
 8014162:	e9c4 2300 	strd	r2, r3, [r4]
 8014166:	4630      	mov	r0, r6
 8014168:	4639      	mov	r1, r7
 801416a:	f7ec f8a5 	bl	80002b8 <__aeabi_dsub>
 801416e:	a384      	add	r3, pc, #528	; (adr r3, 8014380 <__ieee754_rem_pio2+0x2e8>)
 8014170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014174:	f7ec f8a2 	bl	80002bc <__adddf3>
 8014178:	f04f 35ff 	mov.w	r5, #4294967295
 801417c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014180:	e7c6      	b.n	8014110 <__ieee754_rem_pio2+0x78>
 8014182:	a381      	add	r3, pc, #516	; (adr r3, 8014388 <__ieee754_rem_pio2+0x2f0>)
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	f7ec f898 	bl	80002bc <__adddf3>
 801418c:	a380      	add	r3, pc, #512	; (adr r3, 8014390 <__ieee754_rem_pio2+0x2f8>)
 801418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014192:	4606      	mov	r6, r0
 8014194:	460f      	mov	r7, r1
 8014196:	f7ec f891 	bl	80002bc <__adddf3>
 801419a:	4602      	mov	r2, r0
 801419c:	460b      	mov	r3, r1
 801419e:	e9c4 2300 	strd	r2, r3, [r4]
 80141a2:	4630      	mov	r0, r6
 80141a4:	4639      	mov	r1, r7
 80141a6:	f7ec f887 	bl	80002b8 <__aeabi_dsub>
 80141aa:	a379      	add	r3, pc, #484	; (adr r3, 8014390 <__ieee754_rem_pio2+0x2f8>)
 80141ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b0:	e7e0      	b.n	8014174 <__ieee754_rem_pio2+0xdc>
 80141b2:	4b82      	ldr	r3, [pc, #520]	; (80143bc <__ieee754_rem_pio2+0x324>)
 80141b4:	4598      	cmp	r8, r3
 80141b6:	f300 80d0 	bgt.w	801435a <__ieee754_rem_pio2+0x2c2>
 80141ba:	f000 fe23 	bl	8014e04 <fabs>
 80141be:	ec57 6b10 	vmov	r6, r7, d0
 80141c2:	ee10 0a10 	vmov	r0, s0
 80141c6:	a374      	add	r3, pc, #464	; (adr r3, 8014398 <__ieee754_rem_pio2+0x300>)
 80141c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141cc:	4639      	mov	r1, r7
 80141ce:	f7ec fa2b 	bl	8000628 <__aeabi_dmul>
 80141d2:	2200      	movs	r2, #0
 80141d4:	4b7a      	ldr	r3, [pc, #488]	; (80143c0 <__ieee754_rem_pio2+0x328>)
 80141d6:	f7ec f871 	bl	80002bc <__adddf3>
 80141da:	f7ec fcd5 	bl	8000b88 <__aeabi_d2iz>
 80141de:	4605      	mov	r5, r0
 80141e0:	f7ec f9b8 	bl	8000554 <__aeabi_i2d>
 80141e4:	a364      	add	r3, pc, #400	; (adr r3, 8014378 <__ieee754_rem_pio2+0x2e0>)
 80141e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141ee:	f7ec fa1b 	bl	8000628 <__aeabi_dmul>
 80141f2:	4602      	mov	r2, r0
 80141f4:	460b      	mov	r3, r1
 80141f6:	4630      	mov	r0, r6
 80141f8:	4639      	mov	r1, r7
 80141fa:	f7ec f85d 	bl	80002b8 <__aeabi_dsub>
 80141fe:	a360      	add	r3, pc, #384	; (adr r3, 8014380 <__ieee754_rem_pio2+0x2e8>)
 8014200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014204:	4682      	mov	sl, r0
 8014206:	468b      	mov	fp, r1
 8014208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801420c:	f7ec fa0c 	bl	8000628 <__aeabi_dmul>
 8014210:	2d1f      	cmp	r5, #31
 8014212:	4606      	mov	r6, r0
 8014214:	460f      	mov	r7, r1
 8014216:	dc0c      	bgt.n	8014232 <__ieee754_rem_pio2+0x19a>
 8014218:	1e6a      	subs	r2, r5, #1
 801421a:	4b6a      	ldr	r3, [pc, #424]	; (80143c4 <__ieee754_rem_pio2+0x32c>)
 801421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014220:	4543      	cmp	r3, r8
 8014222:	d006      	beq.n	8014232 <__ieee754_rem_pio2+0x19a>
 8014224:	4632      	mov	r2, r6
 8014226:	463b      	mov	r3, r7
 8014228:	4650      	mov	r0, sl
 801422a:	4659      	mov	r1, fp
 801422c:	f7ec f844 	bl	80002b8 <__aeabi_dsub>
 8014230:	e00e      	b.n	8014250 <__ieee754_rem_pio2+0x1b8>
 8014232:	4632      	mov	r2, r6
 8014234:	463b      	mov	r3, r7
 8014236:	4650      	mov	r0, sl
 8014238:	4659      	mov	r1, fp
 801423a:	f7ec f83d 	bl	80002b8 <__aeabi_dsub>
 801423e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014242:	9305      	str	r3, [sp, #20]
 8014244:	9a05      	ldr	r2, [sp, #20]
 8014246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	2b10      	cmp	r3, #16
 801424e:	dc02      	bgt.n	8014256 <__ieee754_rem_pio2+0x1be>
 8014250:	e9c4 0100 	strd	r0, r1, [r4]
 8014254:	e039      	b.n	80142ca <__ieee754_rem_pio2+0x232>
 8014256:	a34c      	add	r3, pc, #304	; (adr r3, 8014388 <__ieee754_rem_pio2+0x2f0>)
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014260:	f7ec f9e2 	bl	8000628 <__aeabi_dmul>
 8014264:	4606      	mov	r6, r0
 8014266:	460f      	mov	r7, r1
 8014268:	4602      	mov	r2, r0
 801426a:	460b      	mov	r3, r1
 801426c:	4650      	mov	r0, sl
 801426e:	4659      	mov	r1, fp
 8014270:	f7ec f822 	bl	80002b8 <__aeabi_dsub>
 8014274:	4602      	mov	r2, r0
 8014276:	460b      	mov	r3, r1
 8014278:	4680      	mov	r8, r0
 801427a:	4689      	mov	r9, r1
 801427c:	4650      	mov	r0, sl
 801427e:	4659      	mov	r1, fp
 8014280:	f7ec f81a 	bl	80002b8 <__aeabi_dsub>
 8014284:	4632      	mov	r2, r6
 8014286:	463b      	mov	r3, r7
 8014288:	f7ec f816 	bl	80002b8 <__aeabi_dsub>
 801428c:	a340      	add	r3, pc, #256	; (adr r3, 8014390 <__ieee754_rem_pio2+0x2f8>)
 801428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014292:	4606      	mov	r6, r0
 8014294:	460f      	mov	r7, r1
 8014296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801429a:	f7ec f9c5 	bl	8000628 <__aeabi_dmul>
 801429e:	4632      	mov	r2, r6
 80142a0:	463b      	mov	r3, r7
 80142a2:	f7ec f809 	bl	80002b8 <__aeabi_dsub>
 80142a6:	4602      	mov	r2, r0
 80142a8:	460b      	mov	r3, r1
 80142aa:	4606      	mov	r6, r0
 80142ac:	460f      	mov	r7, r1
 80142ae:	4640      	mov	r0, r8
 80142b0:	4649      	mov	r1, r9
 80142b2:	f7ec f801 	bl	80002b8 <__aeabi_dsub>
 80142b6:	9a05      	ldr	r2, [sp, #20]
 80142b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80142bc:	1ad3      	subs	r3, r2, r3
 80142be:	2b31      	cmp	r3, #49	; 0x31
 80142c0:	dc20      	bgt.n	8014304 <__ieee754_rem_pio2+0x26c>
 80142c2:	e9c4 0100 	strd	r0, r1, [r4]
 80142c6:	46c2      	mov	sl, r8
 80142c8:	46cb      	mov	fp, r9
 80142ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80142ce:	4650      	mov	r0, sl
 80142d0:	4642      	mov	r2, r8
 80142d2:	464b      	mov	r3, r9
 80142d4:	4659      	mov	r1, fp
 80142d6:	f7eb ffef 	bl	80002b8 <__aeabi_dsub>
 80142da:	463b      	mov	r3, r7
 80142dc:	4632      	mov	r2, r6
 80142de:	f7eb ffeb 	bl	80002b8 <__aeabi_dsub>
 80142e2:	9b04      	ldr	r3, [sp, #16]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142ea:	f6bf af11 	bge.w	8014110 <__ieee754_rem_pio2+0x78>
 80142ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80142f2:	6063      	str	r3, [r4, #4]
 80142f4:	f8c4 8000 	str.w	r8, [r4]
 80142f8:	60a0      	str	r0, [r4, #8]
 80142fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142fe:	60e3      	str	r3, [r4, #12]
 8014300:	426d      	negs	r5, r5
 8014302:	e705      	b.n	8014110 <__ieee754_rem_pio2+0x78>
 8014304:	a326      	add	r3, pc, #152	; (adr r3, 80143a0 <__ieee754_rem_pio2+0x308>)
 8014306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801430e:	f7ec f98b 	bl	8000628 <__aeabi_dmul>
 8014312:	4606      	mov	r6, r0
 8014314:	460f      	mov	r7, r1
 8014316:	4602      	mov	r2, r0
 8014318:	460b      	mov	r3, r1
 801431a:	4640      	mov	r0, r8
 801431c:	4649      	mov	r1, r9
 801431e:	f7eb ffcb 	bl	80002b8 <__aeabi_dsub>
 8014322:	4602      	mov	r2, r0
 8014324:	460b      	mov	r3, r1
 8014326:	4682      	mov	sl, r0
 8014328:	468b      	mov	fp, r1
 801432a:	4640      	mov	r0, r8
 801432c:	4649      	mov	r1, r9
 801432e:	f7eb ffc3 	bl	80002b8 <__aeabi_dsub>
 8014332:	4632      	mov	r2, r6
 8014334:	463b      	mov	r3, r7
 8014336:	f7eb ffbf 	bl	80002b8 <__aeabi_dsub>
 801433a:	a31b      	add	r3, pc, #108	; (adr r3, 80143a8 <__ieee754_rem_pio2+0x310>)
 801433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014340:	4606      	mov	r6, r0
 8014342:	460f      	mov	r7, r1
 8014344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014348:	f7ec f96e 	bl	8000628 <__aeabi_dmul>
 801434c:	4632      	mov	r2, r6
 801434e:	463b      	mov	r3, r7
 8014350:	f7eb ffb2 	bl	80002b8 <__aeabi_dsub>
 8014354:	4606      	mov	r6, r0
 8014356:	460f      	mov	r7, r1
 8014358:	e764      	b.n	8014224 <__ieee754_rem_pio2+0x18c>
 801435a:	4b1b      	ldr	r3, [pc, #108]	; (80143c8 <__ieee754_rem_pio2+0x330>)
 801435c:	4598      	cmp	r8, r3
 801435e:	dd35      	ble.n	80143cc <__ieee754_rem_pio2+0x334>
 8014360:	ee10 2a10 	vmov	r2, s0
 8014364:	463b      	mov	r3, r7
 8014366:	4630      	mov	r0, r6
 8014368:	4639      	mov	r1, r7
 801436a:	f7eb ffa5 	bl	80002b8 <__aeabi_dsub>
 801436e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014372:	e9c4 0100 	strd	r0, r1, [r4]
 8014376:	e6a1      	b.n	80140bc <__ieee754_rem_pio2+0x24>
 8014378:	54400000 	.word	0x54400000
 801437c:	3ff921fb 	.word	0x3ff921fb
 8014380:	1a626331 	.word	0x1a626331
 8014384:	3dd0b461 	.word	0x3dd0b461
 8014388:	1a600000 	.word	0x1a600000
 801438c:	3dd0b461 	.word	0x3dd0b461
 8014390:	2e037073 	.word	0x2e037073
 8014394:	3ba3198a 	.word	0x3ba3198a
 8014398:	6dc9c883 	.word	0x6dc9c883
 801439c:	3fe45f30 	.word	0x3fe45f30
 80143a0:	2e000000 	.word	0x2e000000
 80143a4:	3ba3198a 	.word	0x3ba3198a
 80143a8:	252049c1 	.word	0x252049c1
 80143ac:	397b839a 	.word	0x397b839a
 80143b0:	3fe921fb 	.word	0x3fe921fb
 80143b4:	4002d97b 	.word	0x4002d97b
 80143b8:	3ff921fb 	.word	0x3ff921fb
 80143bc:	413921fb 	.word	0x413921fb
 80143c0:	3fe00000 	.word	0x3fe00000
 80143c4:	08019b38 	.word	0x08019b38
 80143c8:	7fefffff 	.word	0x7fefffff
 80143cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80143d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80143d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80143d8:	4630      	mov	r0, r6
 80143da:	460f      	mov	r7, r1
 80143dc:	f7ec fbd4 	bl	8000b88 <__aeabi_d2iz>
 80143e0:	f7ec f8b8 	bl	8000554 <__aeabi_i2d>
 80143e4:	4602      	mov	r2, r0
 80143e6:	460b      	mov	r3, r1
 80143e8:	4630      	mov	r0, r6
 80143ea:	4639      	mov	r1, r7
 80143ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80143f0:	f7eb ff62 	bl	80002b8 <__aeabi_dsub>
 80143f4:	2200      	movs	r2, #0
 80143f6:	4b1f      	ldr	r3, [pc, #124]	; (8014474 <__ieee754_rem_pio2+0x3dc>)
 80143f8:	f7ec f916 	bl	8000628 <__aeabi_dmul>
 80143fc:	460f      	mov	r7, r1
 80143fe:	4606      	mov	r6, r0
 8014400:	f7ec fbc2 	bl	8000b88 <__aeabi_d2iz>
 8014404:	f7ec f8a6 	bl	8000554 <__aeabi_i2d>
 8014408:	4602      	mov	r2, r0
 801440a:	460b      	mov	r3, r1
 801440c:	4630      	mov	r0, r6
 801440e:	4639      	mov	r1, r7
 8014410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014414:	f7eb ff50 	bl	80002b8 <__aeabi_dsub>
 8014418:	2200      	movs	r2, #0
 801441a:	4b16      	ldr	r3, [pc, #88]	; (8014474 <__ieee754_rem_pio2+0x3dc>)
 801441c:	f7ec f904 	bl	8000628 <__aeabi_dmul>
 8014420:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014424:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014428:	f04f 0803 	mov.w	r8, #3
 801442c:	2600      	movs	r6, #0
 801442e:	2700      	movs	r7, #0
 8014430:	4632      	mov	r2, r6
 8014432:	463b      	mov	r3, r7
 8014434:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014438:	f108 3aff 	add.w	sl, r8, #4294967295
 801443c:	f7ec fb5c 	bl	8000af8 <__aeabi_dcmpeq>
 8014440:	b9b0      	cbnz	r0, 8014470 <__ieee754_rem_pio2+0x3d8>
 8014442:	4b0d      	ldr	r3, [pc, #52]	; (8014478 <__ieee754_rem_pio2+0x3e0>)
 8014444:	9301      	str	r3, [sp, #4]
 8014446:	2302      	movs	r3, #2
 8014448:	9300      	str	r3, [sp, #0]
 801444a:	462a      	mov	r2, r5
 801444c:	4643      	mov	r3, r8
 801444e:	4621      	mov	r1, r4
 8014450:	a806      	add	r0, sp, #24
 8014452:	f000 f8dd 	bl	8014610 <__kernel_rem_pio2>
 8014456:	9b04      	ldr	r3, [sp, #16]
 8014458:	2b00      	cmp	r3, #0
 801445a:	4605      	mov	r5, r0
 801445c:	f6bf ae58 	bge.w	8014110 <__ieee754_rem_pio2+0x78>
 8014460:	6863      	ldr	r3, [r4, #4]
 8014462:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014466:	6063      	str	r3, [r4, #4]
 8014468:	68e3      	ldr	r3, [r4, #12]
 801446a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801446e:	e746      	b.n	80142fe <__ieee754_rem_pio2+0x266>
 8014470:	46d0      	mov	r8, sl
 8014472:	e7dd      	b.n	8014430 <__ieee754_rem_pio2+0x398>
 8014474:	41700000 	.word	0x41700000
 8014478:	08019bb8 	.word	0x08019bb8
 801447c:	00000000 	.word	0x00000000

08014480 <__kernel_cos>:
 8014480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014484:	ec59 8b10 	vmov	r8, r9, d0
 8014488:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801448c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014490:	ed2d 8b02 	vpush	{d8}
 8014494:	eeb0 8a41 	vmov.f32	s16, s2
 8014498:	eef0 8a61 	vmov.f32	s17, s3
 801449c:	da07      	bge.n	80144ae <__kernel_cos+0x2e>
 801449e:	ee10 0a10 	vmov	r0, s0
 80144a2:	4649      	mov	r1, r9
 80144a4:	f7ec fb70 	bl	8000b88 <__aeabi_d2iz>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	f000 8089 	beq.w	80145c0 <__kernel_cos+0x140>
 80144ae:	4642      	mov	r2, r8
 80144b0:	464b      	mov	r3, r9
 80144b2:	4640      	mov	r0, r8
 80144b4:	4649      	mov	r1, r9
 80144b6:	f7ec f8b7 	bl	8000628 <__aeabi_dmul>
 80144ba:	2200      	movs	r2, #0
 80144bc:	4b4e      	ldr	r3, [pc, #312]	; (80145f8 <__kernel_cos+0x178>)
 80144be:	4604      	mov	r4, r0
 80144c0:	460d      	mov	r5, r1
 80144c2:	f7ec f8b1 	bl	8000628 <__aeabi_dmul>
 80144c6:	a340      	add	r3, pc, #256	; (adr r3, 80145c8 <__kernel_cos+0x148>)
 80144c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144cc:	4682      	mov	sl, r0
 80144ce:	468b      	mov	fp, r1
 80144d0:	4620      	mov	r0, r4
 80144d2:	4629      	mov	r1, r5
 80144d4:	f7ec f8a8 	bl	8000628 <__aeabi_dmul>
 80144d8:	a33d      	add	r3, pc, #244	; (adr r3, 80145d0 <__kernel_cos+0x150>)
 80144da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144de:	f7eb feed 	bl	80002bc <__adddf3>
 80144e2:	4622      	mov	r2, r4
 80144e4:	462b      	mov	r3, r5
 80144e6:	f7ec f89f 	bl	8000628 <__aeabi_dmul>
 80144ea:	a33b      	add	r3, pc, #236	; (adr r3, 80145d8 <__kernel_cos+0x158>)
 80144ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f0:	f7eb fee2 	bl	80002b8 <__aeabi_dsub>
 80144f4:	4622      	mov	r2, r4
 80144f6:	462b      	mov	r3, r5
 80144f8:	f7ec f896 	bl	8000628 <__aeabi_dmul>
 80144fc:	a338      	add	r3, pc, #224	; (adr r3, 80145e0 <__kernel_cos+0x160>)
 80144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014502:	f7eb fedb 	bl	80002bc <__adddf3>
 8014506:	4622      	mov	r2, r4
 8014508:	462b      	mov	r3, r5
 801450a:	f7ec f88d 	bl	8000628 <__aeabi_dmul>
 801450e:	a336      	add	r3, pc, #216	; (adr r3, 80145e8 <__kernel_cos+0x168>)
 8014510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014514:	f7eb fed0 	bl	80002b8 <__aeabi_dsub>
 8014518:	4622      	mov	r2, r4
 801451a:	462b      	mov	r3, r5
 801451c:	f7ec f884 	bl	8000628 <__aeabi_dmul>
 8014520:	a333      	add	r3, pc, #204	; (adr r3, 80145f0 <__kernel_cos+0x170>)
 8014522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014526:	f7eb fec9 	bl	80002bc <__adddf3>
 801452a:	4622      	mov	r2, r4
 801452c:	462b      	mov	r3, r5
 801452e:	f7ec f87b 	bl	8000628 <__aeabi_dmul>
 8014532:	4622      	mov	r2, r4
 8014534:	462b      	mov	r3, r5
 8014536:	f7ec f877 	bl	8000628 <__aeabi_dmul>
 801453a:	ec53 2b18 	vmov	r2, r3, d8
 801453e:	4604      	mov	r4, r0
 8014540:	460d      	mov	r5, r1
 8014542:	4640      	mov	r0, r8
 8014544:	4649      	mov	r1, r9
 8014546:	f7ec f86f 	bl	8000628 <__aeabi_dmul>
 801454a:	460b      	mov	r3, r1
 801454c:	4602      	mov	r2, r0
 801454e:	4629      	mov	r1, r5
 8014550:	4620      	mov	r0, r4
 8014552:	f7eb feb1 	bl	80002b8 <__aeabi_dsub>
 8014556:	4b29      	ldr	r3, [pc, #164]	; (80145fc <__kernel_cos+0x17c>)
 8014558:	429e      	cmp	r6, r3
 801455a:	4680      	mov	r8, r0
 801455c:	4689      	mov	r9, r1
 801455e:	dc11      	bgt.n	8014584 <__kernel_cos+0x104>
 8014560:	4602      	mov	r2, r0
 8014562:	460b      	mov	r3, r1
 8014564:	4650      	mov	r0, sl
 8014566:	4659      	mov	r1, fp
 8014568:	f7eb fea6 	bl	80002b8 <__aeabi_dsub>
 801456c:	460b      	mov	r3, r1
 801456e:	4924      	ldr	r1, [pc, #144]	; (8014600 <__kernel_cos+0x180>)
 8014570:	4602      	mov	r2, r0
 8014572:	2000      	movs	r0, #0
 8014574:	f7eb fea0 	bl	80002b8 <__aeabi_dsub>
 8014578:	ecbd 8b02 	vpop	{d8}
 801457c:	ec41 0b10 	vmov	d0, r0, r1
 8014580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014584:	4b1f      	ldr	r3, [pc, #124]	; (8014604 <__kernel_cos+0x184>)
 8014586:	491e      	ldr	r1, [pc, #120]	; (8014600 <__kernel_cos+0x180>)
 8014588:	429e      	cmp	r6, r3
 801458a:	bfcc      	ite	gt
 801458c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014608 <__kernel_cos+0x188>)
 801458e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014592:	2400      	movs	r4, #0
 8014594:	4622      	mov	r2, r4
 8014596:	462b      	mov	r3, r5
 8014598:	2000      	movs	r0, #0
 801459a:	f7eb fe8d 	bl	80002b8 <__aeabi_dsub>
 801459e:	4622      	mov	r2, r4
 80145a0:	4606      	mov	r6, r0
 80145a2:	460f      	mov	r7, r1
 80145a4:	462b      	mov	r3, r5
 80145a6:	4650      	mov	r0, sl
 80145a8:	4659      	mov	r1, fp
 80145aa:	f7eb fe85 	bl	80002b8 <__aeabi_dsub>
 80145ae:	4642      	mov	r2, r8
 80145b0:	464b      	mov	r3, r9
 80145b2:	f7eb fe81 	bl	80002b8 <__aeabi_dsub>
 80145b6:	4602      	mov	r2, r0
 80145b8:	460b      	mov	r3, r1
 80145ba:	4630      	mov	r0, r6
 80145bc:	4639      	mov	r1, r7
 80145be:	e7d9      	b.n	8014574 <__kernel_cos+0xf4>
 80145c0:	2000      	movs	r0, #0
 80145c2:	490f      	ldr	r1, [pc, #60]	; (8014600 <__kernel_cos+0x180>)
 80145c4:	e7d8      	b.n	8014578 <__kernel_cos+0xf8>
 80145c6:	bf00      	nop
 80145c8:	be8838d4 	.word	0xbe8838d4
 80145cc:	bda8fae9 	.word	0xbda8fae9
 80145d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80145d4:	3e21ee9e 	.word	0x3e21ee9e
 80145d8:	809c52ad 	.word	0x809c52ad
 80145dc:	3e927e4f 	.word	0x3e927e4f
 80145e0:	19cb1590 	.word	0x19cb1590
 80145e4:	3efa01a0 	.word	0x3efa01a0
 80145e8:	16c15177 	.word	0x16c15177
 80145ec:	3f56c16c 	.word	0x3f56c16c
 80145f0:	5555554c 	.word	0x5555554c
 80145f4:	3fa55555 	.word	0x3fa55555
 80145f8:	3fe00000 	.word	0x3fe00000
 80145fc:	3fd33332 	.word	0x3fd33332
 8014600:	3ff00000 	.word	0x3ff00000
 8014604:	3fe90000 	.word	0x3fe90000
 8014608:	3fd20000 	.word	0x3fd20000
 801460c:	00000000 	.word	0x00000000

08014610 <__kernel_rem_pio2>:
 8014610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014614:	ed2d 8b02 	vpush	{d8}
 8014618:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801461c:	1ed4      	subs	r4, r2, #3
 801461e:	9308      	str	r3, [sp, #32]
 8014620:	9101      	str	r1, [sp, #4]
 8014622:	4bc5      	ldr	r3, [pc, #788]	; (8014938 <__kernel_rem_pio2+0x328>)
 8014624:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014626:	9009      	str	r0, [sp, #36]	; 0x24
 8014628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801462c:	9304      	str	r3, [sp, #16]
 801462e:	9b08      	ldr	r3, [sp, #32]
 8014630:	3b01      	subs	r3, #1
 8014632:	9307      	str	r3, [sp, #28]
 8014634:	2318      	movs	r3, #24
 8014636:	fb94 f4f3 	sdiv	r4, r4, r3
 801463a:	f06f 0317 	mvn.w	r3, #23
 801463e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014642:	fb04 3303 	mla	r3, r4, r3, r3
 8014646:	eb03 0a02 	add.w	sl, r3, r2
 801464a:	9b04      	ldr	r3, [sp, #16]
 801464c:	9a07      	ldr	r2, [sp, #28]
 801464e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014928 <__kernel_rem_pio2+0x318>
 8014652:	eb03 0802 	add.w	r8, r3, r2
 8014656:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014658:	1aa7      	subs	r7, r4, r2
 801465a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801465e:	ae22      	add	r6, sp, #136	; 0x88
 8014660:	2500      	movs	r5, #0
 8014662:	4545      	cmp	r5, r8
 8014664:	dd13      	ble.n	801468e <__kernel_rem_pio2+0x7e>
 8014666:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014928 <__kernel_rem_pio2+0x318>
 801466a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801466e:	2600      	movs	r6, #0
 8014670:	9b04      	ldr	r3, [sp, #16]
 8014672:	429e      	cmp	r6, r3
 8014674:	dc32      	bgt.n	80146dc <__kernel_rem_pio2+0xcc>
 8014676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014678:	9302      	str	r3, [sp, #8]
 801467a:	9b08      	ldr	r3, [sp, #32]
 801467c:	199d      	adds	r5, r3, r6
 801467e:	ab22      	add	r3, sp, #136	; 0x88
 8014680:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014684:	9306      	str	r3, [sp, #24]
 8014686:	ec59 8b18 	vmov	r8, r9, d8
 801468a:	2700      	movs	r7, #0
 801468c:	e01f      	b.n	80146ce <__kernel_rem_pio2+0xbe>
 801468e:	42ef      	cmn	r7, r5
 8014690:	d407      	bmi.n	80146a2 <__kernel_rem_pio2+0x92>
 8014692:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014696:	f7eb ff5d 	bl	8000554 <__aeabi_i2d>
 801469a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801469e:	3501      	adds	r5, #1
 80146a0:	e7df      	b.n	8014662 <__kernel_rem_pio2+0x52>
 80146a2:	ec51 0b18 	vmov	r0, r1, d8
 80146a6:	e7f8      	b.n	801469a <__kernel_rem_pio2+0x8a>
 80146a8:	9906      	ldr	r1, [sp, #24]
 80146aa:	9d02      	ldr	r5, [sp, #8]
 80146ac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80146b0:	9106      	str	r1, [sp, #24]
 80146b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80146b6:	9502      	str	r5, [sp, #8]
 80146b8:	f7eb ffb6 	bl	8000628 <__aeabi_dmul>
 80146bc:	4602      	mov	r2, r0
 80146be:	460b      	mov	r3, r1
 80146c0:	4640      	mov	r0, r8
 80146c2:	4649      	mov	r1, r9
 80146c4:	f7eb fdfa 	bl	80002bc <__adddf3>
 80146c8:	3701      	adds	r7, #1
 80146ca:	4680      	mov	r8, r0
 80146cc:	4689      	mov	r9, r1
 80146ce:	9b07      	ldr	r3, [sp, #28]
 80146d0:	429f      	cmp	r7, r3
 80146d2:	dde9      	ble.n	80146a8 <__kernel_rem_pio2+0x98>
 80146d4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80146d8:	3601      	adds	r6, #1
 80146da:	e7c9      	b.n	8014670 <__kernel_rem_pio2+0x60>
 80146dc:	9b04      	ldr	r3, [sp, #16]
 80146de:	aa0e      	add	r2, sp, #56	; 0x38
 80146e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80146e4:	930c      	str	r3, [sp, #48]	; 0x30
 80146e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80146e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80146ec:	9c04      	ldr	r4, [sp, #16]
 80146ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80146f0:	ab9a      	add	r3, sp, #616	; 0x268
 80146f2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80146f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80146fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146fe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014702:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014706:	ab9a      	add	r3, sp, #616	; 0x268
 8014708:	445b      	add	r3, fp
 801470a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801470e:	2500      	movs	r5, #0
 8014710:	1b63      	subs	r3, r4, r5
 8014712:	2b00      	cmp	r3, #0
 8014714:	dc78      	bgt.n	8014808 <__kernel_rem_pio2+0x1f8>
 8014716:	4650      	mov	r0, sl
 8014718:	ec49 8b10 	vmov	d0, r8, r9
 801471c:	f000 fc00 	bl	8014f20 <scalbn>
 8014720:	ec57 6b10 	vmov	r6, r7, d0
 8014724:	2200      	movs	r2, #0
 8014726:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801472a:	ee10 0a10 	vmov	r0, s0
 801472e:	4639      	mov	r1, r7
 8014730:	f7eb ff7a 	bl	8000628 <__aeabi_dmul>
 8014734:	ec41 0b10 	vmov	d0, r0, r1
 8014738:	f000 fb6e 	bl	8014e18 <floor>
 801473c:	2200      	movs	r2, #0
 801473e:	ec51 0b10 	vmov	r0, r1, d0
 8014742:	4b7e      	ldr	r3, [pc, #504]	; (801493c <__kernel_rem_pio2+0x32c>)
 8014744:	f7eb ff70 	bl	8000628 <__aeabi_dmul>
 8014748:	4602      	mov	r2, r0
 801474a:	460b      	mov	r3, r1
 801474c:	4630      	mov	r0, r6
 801474e:	4639      	mov	r1, r7
 8014750:	f7eb fdb2 	bl	80002b8 <__aeabi_dsub>
 8014754:	460f      	mov	r7, r1
 8014756:	4606      	mov	r6, r0
 8014758:	f7ec fa16 	bl	8000b88 <__aeabi_d2iz>
 801475c:	9006      	str	r0, [sp, #24]
 801475e:	f7eb fef9 	bl	8000554 <__aeabi_i2d>
 8014762:	4602      	mov	r2, r0
 8014764:	460b      	mov	r3, r1
 8014766:	4630      	mov	r0, r6
 8014768:	4639      	mov	r1, r7
 801476a:	f7eb fda5 	bl	80002b8 <__aeabi_dsub>
 801476e:	f1ba 0f00 	cmp.w	sl, #0
 8014772:	4606      	mov	r6, r0
 8014774:	460f      	mov	r7, r1
 8014776:	dd6c      	ble.n	8014852 <__kernel_rem_pio2+0x242>
 8014778:	1e62      	subs	r2, r4, #1
 801477a:	ab0e      	add	r3, sp, #56	; 0x38
 801477c:	f1ca 0118 	rsb	r1, sl, #24
 8014780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014784:	9d06      	ldr	r5, [sp, #24]
 8014786:	fa40 f301 	asr.w	r3, r0, r1
 801478a:	441d      	add	r5, r3
 801478c:	408b      	lsls	r3, r1
 801478e:	1ac0      	subs	r0, r0, r3
 8014790:	ab0e      	add	r3, sp, #56	; 0x38
 8014792:	9506      	str	r5, [sp, #24]
 8014794:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014798:	f1ca 0317 	rsb	r3, sl, #23
 801479c:	fa40 f303 	asr.w	r3, r0, r3
 80147a0:	9302      	str	r3, [sp, #8]
 80147a2:	9b02      	ldr	r3, [sp, #8]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dd62      	ble.n	801486e <__kernel_rem_pio2+0x25e>
 80147a8:	9b06      	ldr	r3, [sp, #24]
 80147aa:	2200      	movs	r2, #0
 80147ac:	3301      	adds	r3, #1
 80147ae:	9306      	str	r3, [sp, #24]
 80147b0:	4615      	mov	r5, r2
 80147b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80147b6:	4294      	cmp	r4, r2
 80147b8:	f300 8095 	bgt.w	80148e6 <__kernel_rem_pio2+0x2d6>
 80147bc:	f1ba 0f00 	cmp.w	sl, #0
 80147c0:	dd07      	ble.n	80147d2 <__kernel_rem_pio2+0x1c2>
 80147c2:	f1ba 0f01 	cmp.w	sl, #1
 80147c6:	f000 80a2 	beq.w	801490e <__kernel_rem_pio2+0x2fe>
 80147ca:	f1ba 0f02 	cmp.w	sl, #2
 80147ce:	f000 80c1 	beq.w	8014954 <__kernel_rem_pio2+0x344>
 80147d2:	9b02      	ldr	r3, [sp, #8]
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	d14a      	bne.n	801486e <__kernel_rem_pio2+0x25e>
 80147d8:	4632      	mov	r2, r6
 80147da:	463b      	mov	r3, r7
 80147dc:	2000      	movs	r0, #0
 80147de:	4958      	ldr	r1, [pc, #352]	; (8014940 <__kernel_rem_pio2+0x330>)
 80147e0:	f7eb fd6a 	bl	80002b8 <__aeabi_dsub>
 80147e4:	4606      	mov	r6, r0
 80147e6:	460f      	mov	r7, r1
 80147e8:	2d00      	cmp	r5, #0
 80147ea:	d040      	beq.n	801486e <__kernel_rem_pio2+0x25e>
 80147ec:	4650      	mov	r0, sl
 80147ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014930 <__kernel_rem_pio2+0x320>
 80147f2:	f000 fb95 	bl	8014f20 <scalbn>
 80147f6:	4630      	mov	r0, r6
 80147f8:	4639      	mov	r1, r7
 80147fa:	ec53 2b10 	vmov	r2, r3, d0
 80147fe:	f7eb fd5b 	bl	80002b8 <__aeabi_dsub>
 8014802:	4606      	mov	r6, r0
 8014804:	460f      	mov	r7, r1
 8014806:	e032      	b.n	801486e <__kernel_rem_pio2+0x25e>
 8014808:	2200      	movs	r2, #0
 801480a:	4b4e      	ldr	r3, [pc, #312]	; (8014944 <__kernel_rem_pio2+0x334>)
 801480c:	4640      	mov	r0, r8
 801480e:	4649      	mov	r1, r9
 8014810:	f7eb ff0a 	bl	8000628 <__aeabi_dmul>
 8014814:	f7ec f9b8 	bl	8000b88 <__aeabi_d2iz>
 8014818:	f7eb fe9c 	bl	8000554 <__aeabi_i2d>
 801481c:	2200      	movs	r2, #0
 801481e:	4b4a      	ldr	r3, [pc, #296]	; (8014948 <__kernel_rem_pio2+0x338>)
 8014820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014824:	f7eb ff00 	bl	8000628 <__aeabi_dmul>
 8014828:	4602      	mov	r2, r0
 801482a:	460b      	mov	r3, r1
 801482c:	4640      	mov	r0, r8
 801482e:	4649      	mov	r1, r9
 8014830:	f7eb fd42 	bl	80002b8 <__aeabi_dsub>
 8014834:	f7ec f9a8 	bl	8000b88 <__aeabi_d2iz>
 8014838:	ab0e      	add	r3, sp, #56	; 0x38
 801483a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801483e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014846:	f7eb fd39 	bl	80002bc <__adddf3>
 801484a:	3501      	adds	r5, #1
 801484c:	4680      	mov	r8, r0
 801484e:	4689      	mov	r9, r1
 8014850:	e75e      	b.n	8014710 <__kernel_rem_pio2+0x100>
 8014852:	d105      	bne.n	8014860 <__kernel_rem_pio2+0x250>
 8014854:	1e63      	subs	r3, r4, #1
 8014856:	aa0e      	add	r2, sp, #56	; 0x38
 8014858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801485c:	15c3      	asrs	r3, r0, #23
 801485e:	e79f      	b.n	80147a0 <__kernel_rem_pio2+0x190>
 8014860:	2200      	movs	r2, #0
 8014862:	4b3a      	ldr	r3, [pc, #232]	; (801494c <__kernel_rem_pio2+0x33c>)
 8014864:	f7ec f966 	bl	8000b34 <__aeabi_dcmpge>
 8014868:	2800      	cmp	r0, #0
 801486a:	d139      	bne.n	80148e0 <__kernel_rem_pio2+0x2d0>
 801486c:	9002      	str	r0, [sp, #8]
 801486e:	2200      	movs	r2, #0
 8014870:	2300      	movs	r3, #0
 8014872:	4630      	mov	r0, r6
 8014874:	4639      	mov	r1, r7
 8014876:	f7ec f93f 	bl	8000af8 <__aeabi_dcmpeq>
 801487a:	2800      	cmp	r0, #0
 801487c:	f000 80c7 	beq.w	8014a0e <__kernel_rem_pio2+0x3fe>
 8014880:	1e65      	subs	r5, r4, #1
 8014882:	462b      	mov	r3, r5
 8014884:	2200      	movs	r2, #0
 8014886:	9904      	ldr	r1, [sp, #16]
 8014888:	428b      	cmp	r3, r1
 801488a:	da6a      	bge.n	8014962 <__kernel_rem_pio2+0x352>
 801488c:	2a00      	cmp	r2, #0
 801488e:	f000 8088 	beq.w	80149a2 <__kernel_rem_pio2+0x392>
 8014892:	ab0e      	add	r3, sp, #56	; 0x38
 8014894:	f1aa 0a18 	sub.w	sl, sl, #24
 8014898:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801489c:	2b00      	cmp	r3, #0
 801489e:	f000 80b4 	beq.w	8014a0a <__kernel_rem_pio2+0x3fa>
 80148a2:	4650      	mov	r0, sl
 80148a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014930 <__kernel_rem_pio2+0x320>
 80148a8:	f000 fb3a 	bl	8014f20 <scalbn>
 80148ac:	00ec      	lsls	r4, r5, #3
 80148ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80148b0:	191e      	adds	r6, r3, r4
 80148b2:	ec59 8b10 	vmov	r8, r9, d0
 80148b6:	f106 0a08 	add.w	sl, r6, #8
 80148ba:	462f      	mov	r7, r5
 80148bc:	2f00      	cmp	r7, #0
 80148be:	f280 80df 	bge.w	8014a80 <__kernel_rem_pio2+0x470>
 80148c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014928 <__kernel_rem_pio2+0x318>
 80148c6:	f04f 0a00 	mov.w	sl, #0
 80148ca:	eba5 030a 	sub.w	r3, r5, sl
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	f2c0 810a 	blt.w	8014ae8 <__kernel_rem_pio2+0x4d8>
 80148d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014950 <__kernel_rem_pio2+0x340>
 80148d8:	ec59 8b18 	vmov	r8, r9, d8
 80148dc:	2700      	movs	r7, #0
 80148de:	e0f5      	b.n	8014acc <__kernel_rem_pio2+0x4bc>
 80148e0:	2302      	movs	r3, #2
 80148e2:	9302      	str	r3, [sp, #8]
 80148e4:	e760      	b.n	80147a8 <__kernel_rem_pio2+0x198>
 80148e6:	ab0e      	add	r3, sp, #56	; 0x38
 80148e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ec:	b94d      	cbnz	r5, 8014902 <__kernel_rem_pio2+0x2f2>
 80148ee:	b12b      	cbz	r3, 80148fc <__kernel_rem_pio2+0x2ec>
 80148f0:	a80e      	add	r0, sp, #56	; 0x38
 80148f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80148f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80148fa:	2301      	movs	r3, #1
 80148fc:	3201      	adds	r2, #1
 80148fe:	461d      	mov	r5, r3
 8014900:	e759      	b.n	80147b6 <__kernel_rem_pio2+0x1a6>
 8014902:	a80e      	add	r0, sp, #56	; 0x38
 8014904:	1acb      	subs	r3, r1, r3
 8014906:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801490a:	462b      	mov	r3, r5
 801490c:	e7f6      	b.n	80148fc <__kernel_rem_pio2+0x2ec>
 801490e:	1e62      	subs	r2, r4, #1
 8014910:	ab0e      	add	r3, sp, #56	; 0x38
 8014912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014916:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801491a:	a90e      	add	r1, sp, #56	; 0x38
 801491c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014920:	e757      	b.n	80147d2 <__kernel_rem_pio2+0x1c2>
 8014922:	bf00      	nop
 8014924:	f3af 8000 	nop.w
	...
 8014934:	3ff00000 	.word	0x3ff00000
 8014938:	08019d00 	.word	0x08019d00
 801493c:	40200000 	.word	0x40200000
 8014940:	3ff00000 	.word	0x3ff00000
 8014944:	3e700000 	.word	0x3e700000
 8014948:	41700000 	.word	0x41700000
 801494c:	3fe00000 	.word	0x3fe00000
 8014950:	08019cc0 	.word	0x08019cc0
 8014954:	1e62      	subs	r2, r4, #1
 8014956:	ab0e      	add	r3, sp, #56	; 0x38
 8014958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801495c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014960:	e7db      	b.n	801491a <__kernel_rem_pio2+0x30a>
 8014962:	a90e      	add	r1, sp, #56	; 0x38
 8014964:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014968:	3b01      	subs	r3, #1
 801496a:	430a      	orrs	r2, r1
 801496c:	e78b      	b.n	8014886 <__kernel_rem_pio2+0x276>
 801496e:	3301      	adds	r3, #1
 8014970:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014974:	2900      	cmp	r1, #0
 8014976:	d0fa      	beq.n	801496e <__kernel_rem_pio2+0x35e>
 8014978:	9a08      	ldr	r2, [sp, #32]
 801497a:	4422      	add	r2, r4
 801497c:	00d2      	lsls	r2, r2, #3
 801497e:	a922      	add	r1, sp, #136	; 0x88
 8014980:	18e3      	adds	r3, r4, r3
 8014982:	9206      	str	r2, [sp, #24]
 8014984:	440a      	add	r2, r1
 8014986:	9302      	str	r3, [sp, #8]
 8014988:	f10b 0108 	add.w	r1, fp, #8
 801498c:	f102 0308 	add.w	r3, r2, #8
 8014990:	1c66      	adds	r6, r4, #1
 8014992:	910a      	str	r1, [sp, #40]	; 0x28
 8014994:	2500      	movs	r5, #0
 8014996:	930d      	str	r3, [sp, #52]	; 0x34
 8014998:	9b02      	ldr	r3, [sp, #8]
 801499a:	42b3      	cmp	r3, r6
 801499c:	da04      	bge.n	80149a8 <__kernel_rem_pio2+0x398>
 801499e:	461c      	mov	r4, r3
 80149a0:	e6a6      	b.n	80146f0 <__kernel_rem_pio2+0xe0>
 80149a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149a4:	2301      	movs	r3, #1
 80149a6:	e7e3      	b.n	8014970 <__kernel_rem_pio2+0x360>
 80149a8:	9b06      	ldr	r3, [sp, #24]
 80149aa:	18ef      	adds	r7, r5, r3
 80149ac:	ab22      	add	r3, sp, #136	; 0x88
 80149ae:	441f      	add	r7, r3
 80149b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80149b6:	f7eb fdcd 	bl	8000554 <__aeabi_i2d>
 80149ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149bc:	461c      	mov	r4, r3
 80149be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149c0:	e9c7 0100 	strd	r0, r1, [r7]
 80149c4:	eb03 0b05 	add.w	fp, r3, r5
 80149c8:	2700      	movs	r7, #0
 80149ca:	f04f 0800 	mov.w	r8, #0
 80149ce:	f04f 0900 	mov.w	r9, #0
 80149d2:	9b07      	ldr	r3, [sp, #28]
 80149d4:	429f      	cmp	r7, r3
 80149d6:	dd08      	ble.n	80149ea <__kernel_rem_pio2+0x3da>
 80149d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149da:	aa72      	add	r2, sp, #456	; 0x1c8
 80149dc:	18eb      	adds	r3, r5, r3
 80149de:	4413      	add	r3, r2
 80149e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80149e4:	3601      	adds	r6, #1
 80149e6:	3508      	adds	r5, #8
 80149e8:	e7d6      	b.n	8014998 <__kernel_rem_pio2+0x388>
 80149ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80149ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80149f2:	f7eb fe19 	bl	8000628 <__aeabi_dmul>
 80149f6:	4602      	mov	r2, r0
 80149f8:	460b      	mov	r3, r1
 80149fa:	4640      	mov	r0, r8
 80149fc:	4649      	mov	r1, r9
 80149fe:	f7eb fc5d 	bl	80002bc <__adddf3>
 8014a02:	3701      	adds	r7, #1
 8014a04:	4680      	mov	r8, r0
 8014a06:	4689      	mov	r9, r1
 8014a08:	e7e3      	b.n	80149d2 <__kernel_rem_pio2+0x3c2>
 8014a0a:	3d01      	subs	r5, #1
 8014a0c:	e741      	b.n	8014892 <__kernel_rem_pio2+0x282>
 8014a0e:	f1ca 0000 	rsb	r0, sl, #0
 8014a12:	ec47 6b10 	vmov	d0, r6, r7
 8014a16:	f000 fa83 	bl	8014f20 <scalbn>
 8014a1a:	ec57 6b10 	vmov	r6, r7, d0
 8014a1e:	2200      	movs	r2, #0
 8014a20:	4b99      	ldr	r3, [pc, #612]	; (8014c88 <__kernel_rem_pio2+0x678>)
 8014a22:	ee10 0a10 	vmov	r0, s0
 8014a26:	4639      	mov	r1, r7
 8014a28:	f7ec f884 	bl	8000b34 <__aeabi_dcmpge>
 8014a2c:	b1f8      	cbz	r0, 8014a6e <__kernel_rem_pio2+0x45e>
 8014a2e:	2200      	movs	r2, #0
 8014a30:	4b96      	ldr	r3, [pc, #600]	; (8014c8c <__kernel_rem_pio2+0x67c>)
 8014a32:	4630      	mov	r0, r6
 8014a34:	4639      	mov	r1, r7
 8014a36:	f7eb fdf7 	bl	8000628 <__aeabi_dmul>
 8014a3a:	f7ec f8a5 	bl	8000b88 <__aeabi_d2iz>
 8014a3e:	4680      	mov	r8, r0
 8014a40:	f7eb fd88 	bl	8000554 <__aeabi_i2d>
 8014a44:	2200      	movs	r2, #0
 8014a46:	4b90      	ldr	r3, [pc, #576]	; (8014c88 <__kernel_rem_pio2+0x678>)
 8014a48:	f7eb fdee 	bl	8000628 <__aeabi_dmul>
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	4602      	mov	r2, r0
 8014a50:	4639      	mov	r1, r7
 8014a52:	4630      	mov	r0, r6
 8014a54:	f7eb fc30 	bl	80002b8 <__aeabi_dsub>
 8014a58:	f7ec f896 	bl	8000b88 <__aeabi_d2iz>
 8014a5c:	1c65      	adds	r5, r4, #1
 8014a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8014a60:	f10a 0a18 	add.w	sl, sl, #24
 8014a64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a68:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014a6c:	e719      	b.n	80148a2 <__kernel_rem_pio2+0x292>
 8014a6e:	4630      	mov	r0, r6
 8014a70:	4639      	mov	r1, r7
 8014a72:	f7ec f889 	bl	8000b88 <__aeabi_d2iz>
 8014a76:	ab0e      	add	r3, sp, #56	; 0x38
 8014a78:	4625      	mov	r5, r4
 8014a7a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a7e:	e710      	b.n	80148a2 <__kernel_rem_pio2+0x292>
 8014a80:	ab0e      	add	r3, sp, #56	; 0x38
 8014a82:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014a86:	f7eb fd65 	bl	8000554 <__aeabi_i2d>
 8014a8a:	4642      	mov	r2, r8
 8014a8c:	464b      	mov	r3, r9
 8014a8e:	f7eb fdcb 	bl	8000628 <__aeabi_dmul>
 8014a92:	2200      	movs	r2, #0
 8014a94:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014a98:	4b7c      	ldr	r3, [pc, #496]	; (8014c8c <__kernel_rem_pio2+0x67c>)
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	4649      	mov	r1, r9
 8014a9e:	f7eb fdc3 	bl	8000628 <__aeabi_dmul>
 8014aa2:	3f01      	subs	r7, #1
 8014aa4:	4680      	mov	r8, r0
 8014aa6:	4689      	mov	r9, r1
 8014aa8:	e708      	b.n	80148bc <__kernel_rem_pio2+0x2ac>
 8014aaa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014ab6:	f7eb fdb7 	bl	8000628 <__aeabi_dmul>
 8014aba:	4602      	mov	r2, r0
 8014abc:	460b      	mov	r3, r1
 8014abe:	4640      	mov	r0, r8
 8014ac0:	4649      	mov	r1, r9
 8014ac2:	f7eb fbfb 	bl	80002bc <__adddf3>
 8014ac6:	3701      	adds	r7, #1
 8014ac8:	4680      	mov	r8, r0
 8014aca:	4689      	mov	r9, r1
 8014acc:	9b04      	ldr	r3, [sp, #16]
 8014ace:	429f      	cmp	r7, r3
 8014ad0:	dc01      	bgt.n	8014ad6 <__kernel_rem_pio2+0x4c6>
 8014ad2:	45ba      	cmp	sl, r7
 8014ad4:	dae9      	bge.n	8014aaa <__kernel_rem_pio2+0x49a>
 8014ad6:	ab4a      	add	r3, sp, #296	; 0x128
 8014ad8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014adc:	e9c3 8900 	strd	r8, r9, [r3]
 8014ae0:	f10a 0a01 	add.w	sl, sl, #1
 8014ae4:	3e08      	subs	r6, #8
 8014ae6:	e6f0      	b.n	80148ca <__kernel_rem_pio2+0x2ba>
 8014ae8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014aea:	2b03      	cmp	r3, #3
 8014aec:	d85b      	bhi.n	8014ba6 <__kernel_rem_pio2+0x596>
 8014aee:	e8df f003 	tbb	[pc, r3]
 8014af2:	264a      	.short	0x264a
 8014af4:	0226      	.short	0x0226
 8014af6:	ab9a      	add	r3, sp, #616	; 0x268
 8014af8:	441c      	add	r4, r3
 8014afa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014afe:	46a2      	mov	sl, r4
 8014b00:	46ab      	mov	fp, r5
 8014b02:	f1bb 0f00 	cmp.w	fp, #0
 8014b06:	dc6c      	bgt.n	8014be2 <__kernel_rem_pio2+0x5d2>
 8014b08:	46a2      	mov	sl, r4
 8014b0a:	46ab      	mov	fp, r5
 8014b0c:	f1bb 0f01 	cmp.w	fp, #1
 8014b10:	f300 8086 	bgt.w	8014c20 <__kernel_rem_pio2+0x610>
 8014b14:	2000      	movs	r0, #0
 8014b16:	2100      	movs	r1, #0
 8014b18:	2d01      	cmp	r5, #1
 8014b1a:	f300 80a0 	bgt.w	8014c5e <__kernel_rem_pio2+0x64e>
 8014b1e:	9b02      	ldr	r3, [sp, #8]
 8014b20:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014b24:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f040 809e 	bne.w	8014c6a <__kernel_rem_pio2+0x65a>
 8014b2e:	9b01      	ldr	r3, [sp, #4]
 8014b30:	e9c3 7800 	strd	r7, r8, [r3]
 8014b34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014b38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014b3c:	e033      	b.n	8014ba6 <__kernel_rem_pio2+0x596>
 8014b3e:	3408      	adds	r4, #8
 8014b40:	ab4a      	add	r3, sp, #296	; 0x128
 8014b42:	441c      	add	r4, r3
 8014b44:	462e      	mov	r6, r5
 8014b46:	2000      	movs	r0, #0
 8014b48:	2100      	movs	r1, #0
 8014b4a:	2e00      	cmp	r6, #0
 8014b4c:	da3a      	bge.n	8014bc4 <__kernel_rem_pio2+0x5b4>
 8014b4e:	9b02      	ldr	r3, [sp, #8]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d03d      	beq.n	8014bd0 <__kernel_rem_pio2+0x5c0>
 8014b54:	4602      	mov	r2, r0
 8014b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b5a:	9c01      	ldr	r4, [sp, #4]
 8014b5c:	e9c4 2300 	strd	r2, r3, [r4]
 8014b60:	4602      	mov	r2, r0
 8014b62:	460b      	mov	r3, r1
 8014b64:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014b68:	f7eb fba6 	bl	80002b8 <__aeabi_dsub>
 8014b6c:	ae4c      	add	r6, sp, #304	; 0x130
 8014b6e:	2401      	movs	r4, #1
 8014b70:	42a5      	cmp	r5, r4
 8014b72:	da30      	bge.n	8014bd6 <__kernel_rem_pio2+0x5c6>
 8014b74:	9b02      	ldr	r3, [sp, #8]
 8014b76:	b113      	cbz	r3, 8014b7e <__kernel_rem_pio2+0x56e>
 8014b78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	9b01      	ldr	r3, [sp, #4]
 8014b80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014b84:	e00f      	b.n	8014ba6 <__kernel_rem_pio2+0x596>
 8014b86:	ab9a      	add	r3, sp, #616	; 0x268
 8014b88:	441c      	add	r4, r3
 8014b8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014b8e:	2000      	movs	r0, #0
 8014b90:	2100      	movs	r1, #0
 8014b92:	2d00      	cmp	r5, #0
 8014b94:	da10      	bge.n	8014bb8 <__kernel_rem_pio2+0x5a8>
 8014b96:	9b02      	ldr	r3, [sp, #8]
 8014b98:	b113      	cbz	r3, 8014ba0 <__kernel_rem_pio2+0x590>
 8014b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	9b01      	ldr	r3, [sp, #4]
 8014ba2:	e9c3 0100 	strd	r0, r1, [r3]
 8014ba6:	9b06      	ldr	r3, [sp, #24]
 8014ba8:	f003 0007 	and.w	r0, r3, #7
 8014bac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014bb0:	ecbd 8b02 	vpop	{d8}
 8014bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014bbc:	f7eb fb7e 	bl	80002bc <__adddf3>
 8014bc0:	3d01      	subs	r5, #1
 8014bc2:	e7e6      	b.n	8014b92 <__kernel_rem_pio2+0x582>
 8014bc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014bc8:	f7eb fb78 	bl	80002bc <__adddf3>
 8014bcc:	3e01      	subs	r6, #1
 8014bce:	e7bc      	b.n	8014b4a <__kernel_rem_pio2+0x53a>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	e7c1      	b.n	8014b5a <__kernel_rem_pio2+0x54a>
 8014bd6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014bda:	f7eb fb6f 	bl	80002bc <__adddf3>
 8014bde:	3401      	adds	r4, #1
 8014be0:	e7c6      	b.n	8014b70 <__kernel_rem_pio2+0x560>
 8014be2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014be6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014bea:	4640      	mov	r0, r8
 8014bec:	ec53 2b17 	vmov	r2, r3, d7
 8014bf0:	4649      	mov	r1, r9
 8014bf2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014bf6:	f7eb fb61 	bl	80002bc <__adddf3>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	4606      	mov	r6, r0
 8014c00:	460f      	mov	r7, r1
 8014c02:	4640      	mov	r0, r8
 8014c04:	4649      	mov	r1, r9
 8014c06:	f7eb fb57 	bl	80002b8 <__aeabi_dsub>
 8014c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c0e:	f7eb fb55 	bl	80002bc <__adddf3>
 8014c12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c16:	e9ca 0100 	strd	r0, r1, [sl]
 8014c1a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014c1e:	e770      	b.n	8014b02 <__kernel_rem_pio2+0x4f2>
 8014c20:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014c24:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014c28:	4630      	mov	r0, r6
 8014c2a:	ec53 2b17 	vmov	r2, r3, d7
 8014c2e:	4639      	mov	r1, r7
 8014c30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014c34:	f7eb fb42 	bl	80002bc <__adddf3>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	460b      	mov	r3, r1
 8014c3c:	4680      	mov	r8, r0
 8014c3e:	4689      	mov	r9, r1
 8014c40:	4630      	mov	r0, r6
 8014c42:	4639      	mov	r1, r7
 8014c44:	f7eb fb38 	bl	80002b8 <__aeabi_dsub>
 8014c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c4c:	f7eb fb36 	bl	80002bc <__adddf3>
 8014c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c54:	e9ca 0100 	strd	r0, r1, [sl]
 8014c58:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014c5c:	e756      	b.n	8014b0c <__kernel_rem_pio2+0x4fc>
 8014c5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014c62:	f7eb fb2b 	bl	80002bc <__adddf3>
 8014c66:	3d01      	subs	r5, #1
 8014c68:	e756      	b.n	8014b18 <__kernel_rem_pio2+0x508>
 8014c6a:	9b01      	ldr	r3, [sp, #4]
 8014c6c:	9a01      	ldr	r2, [sp, #4]
 8014c6e:	601f      	str	r7, [r3, #0]
 8014c70:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014c74:	605c      	str	r4, [r3, #4]
 8014c76:	609d      	str	r5, [r3, #8]
 8014c78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014c7c:	60d3      	str	r3, [r2, #12]
 8014c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c82:	6110      	str	r0, [r2, #16]
 8014c84:	6153      	str	r3, [r2, #20]
 8014c86:	e78e      	b.n	8014ba6 <__kernel_rem_pio2+0x596>
 8014c88:	41700000 	.word	0x41700000
 8014c8c:	3e700000 	.word	0x3e700000

08014c90 <__kernel_sin>:
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	ec55 4b10 	vmov	r4, r5, d0
 8014c98:	b085      	sub	sp, #20
 8014c9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014c9e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014ca2:	ed8d 1b00 	vstr	d1, [sp]
 8014ca6:	9002      	str	r0, [sp, #8]
 8014ca8:	da06      	bge.n	8014cb8 <__kernel_sin+0x28>
 8014caa:	ee10 0a10 	vmov	r0, s0
 8014cae:	4629      	mov	r1, r5
 8014cb0:	f7eb ff6a 	bl	8000b88 <__aeabi_d2iz>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d051      	beq.n	8014d5c <__kernel_sin+0xcc>
 8014cb8:	4622      	mov	r2, r4
 8014cba:	462b      	mov	r3, r5
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	f7eb fcb2 	bl	8000628 <__aeabi_dmul>
 8014cc4:	4682      	mov	sl, r0
 8014cc6:	468b      	mov	fp, r1
 8014cc8:	4602      	mov	r2, r0
 8014cca:	460b      	mov	r3, r1
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4629      	mov	r1, r5
 8014cd0:	f7eb fcaa 	bl	8000628 <__aeabi_dmul>
 8014cd4:	a341      	add	r3, pc, #260	; (adr r3, 8014ddc <__kernel_sin+0x14c>)
 8014cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cda:	4680      	mov	r8, r0
 8014cdc:	4689      	mov	r9, r1
 8014cde:	4650      	mov	r0, sl
 8014ce0:	4659      	mov	r1, fp
 8014ce2:	f7eb fca1 	bl	8000628 <__aeabi_dmul>
 8014ce6:	a33f      	add	r3, pc, #252	; (adr r3, 8014de4 <__kernel_sin+0x154>)
 8014ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cec:	f7eb fae4 	bl	80002b8 <__aeabi_dsub>
 8014cf0:	4652      	mov	r2, sl
 8014cf2:	465b      	mov	r3, fp
 8014cf4:	f7eb fc98 	bl	8000628 <__aeabi_dmul>
 8014cf8:	a33c      	add	r3, pc, #240	; (adr r3, 8014dec <__kernel_sin+0x15c>)
 8014cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfe:	f7eb fadd 	bl	80002bc <__adddf3>
 8014d02:	4652      	mov	r2, sl
 8014d04:	465b      	mov	r3, fp
 8014d06:	f7eb fc8f 	bl	8000628 <__aeabi_dmul>
 8014d0a:	a33a      	add	r3, pc, #232	; (adr r3, 8014df4 <__kernel_sin+0x164>)
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d10:	f7eb fad2 	bl	80002b8 <__aeabi_dsub>
 8014d14:	4652      	mov	r2, sl
 8014d16:	465b      	mov	r3, fp
 8014d18:	f7eb fc86 	bl	8000628 <__aeabi_dmul>
 8014d1c:	a337      	add	r3, pc, #220	; (adr r3, 8014dfc <__kernel_sin+0x16c>)
 8014d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d22:	f7eb facb 	bl	80002bc <__adddf3>
 8014d26:	9b02      	ldr	r3, [sp, #8]
 8014d28:	4606      	mov	r6, r0
 8014d2a:	460f      	mov	r7, r1
 8014d2c:	b9db      	cbnz	r3, 8014d66 <__kernel_sin+0xd6>
 8014d2e:	4602      	mov	r2, r0
 8014d30:	460b      	mov	r3, r1
 8014d32:	4650      	mov	r0, sl
 8014d34:	4659      	mov	r1, fp
 8014d36:	f7eb fc77 	bl	8000628 <__aeabi_dmul>
 8014d3a:	a325      	add	r3, pc, #148	; (adr r3, 8014dd0 <__kernel_sin+0x140>)
 8014d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d40:	f7eb faba 	bl	80002b8 <__aeabi_dsub>
 8014d44:	4642      	mov	r2, r8
 8014d46:	464b      	mov	r3, r9
 8014d48:	f7eb fc6e 	bl	8000628 <__aeabi_dmul>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	4620      	mov	r0, r4
 8014d52:	4629      	mov	r1, r5
 8014d54:	f7eb fab2 	bl	80002bc <__adddf3>
 8014d58:	4604      	mov	r4, r0
 8014d5a:	460d      	mov	r5, r1
 8014d5c:	ec45 4b10 	vmov	d0, r4, r5
 8014d60:	b005      	add	sp, #20
 8014d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d66:	2200      	movs	r2, #0
 8014d68:	4b1b      	ldr	r3, [pc, #108]	; (8014dd8 <__kernel_sin+0x148>)
 8014d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d6e:	f7eb fc5b 	bl	8000628 <__aeabi_dmul>
 8014d72:	4632      	mov	r2, r6
 8014d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d78:	463b      	mov	r3, r7
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	f7eb fc53 	bl	8000628 <__aeabi_dmul>
 8014d82:	4602      	mov	r2, r0
 8014d84:	460b      	mov	r3, r1
 8014d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d8a:	f7eb fa95 	bl	80002b8 <__aeabi_dsub>
 8014d8e:	4652      	mov	r2, sl
 8014d90:	465b      	mov	r3, fp
 8014d92:	f7eb fc49 	bl	8000628 <__aeabi_dmul>
 8014d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d9a:	f7eb fa8d 	bl	80002b8 <__aeabi_dsub>
 8014d9e:	a30c      	add	r3, pc, #48	; (adr r3, 8014dd0 <__kernel_sin+0x140>)
 8014da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da4:	4606      	mov	r6, r0
 8014da6:	460f      	mov	r7, r1
 8014da8:	4640      	mov	r0, r8
 8014daa:	4649      	mov	r1, r9
 8014dac:	f7eb fc3c 	bl	8000628 <__aeabi_dmul>
 8014db0:	4602      	mov	r2, r0
 8014db2:	460b      	mov	r3, r1
 8014db4:	4630      	mov	r0, r6
 8014db6:	4639      	mov	r1, r7
 8014db8:	f7eb fa80 	bl	80002bc <__adddf3>
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	460b      	mov	r3, r1
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	f7eb fa78 	bl	80002b8 <__aeabi_dsub>
 8014dc8:	e7c6      	b.n	8014d58 <__kernel_sin+0xc8>
 8014dca:	bf00      	nop
 8014dcc:	f3af 8000 	nop.w
 8014dd0:	55555549 	.word	0x55555549
 8014dd4:	3fc55555 	.word	0x3fc55555
 8014dd8:	3fe00000 	.word	0x3fe00000
 8014ddc:	5acfd57c 	.word	0x5acfd57c
 8014de0:	3de5d93a 	.word	0x3de5d93a
 8014de4:	8a2b9ceb 	.word	0x8a2b9ceb
 8014de8:	3e5ae5e6 	.word	0x3e5ae5e6
 8014dec:	57b1fe7d 	.word	0x57b1fe7d
 8014df0:	3ec71de3 	.word	0x3ec71de3
 8014df4:	19c161d5 	.word	0x19c161d5
 8014df8:	3f2a01a0 	.word	0x3f2a01a0
 8014dfc:	1110f8a6 	.word	0x1110f8a6
 8014e00:	3f811111 	.word	0x3f811111

08014e04 <fabs>:
 8014e04:	ec51 0b10 	vmov	r0, r1, d0
 8014e08:	ee10 2a10 	vmov	r2, s0
 8014e0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e10:	ec43 2b10 	vmov	d0, r2, r3
 8014e14:	4770      	bx	lr
	...

08014e18 <floor>:
 8014e18:	ec51 0b10 	vmov	r0, r1, d0
 8014e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014e24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014e28:	2e13      	cmp	r6, #19
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	ee10 5a10 	vmov	r5, s0
 8014e30:	4680      	mov	r8, r0
 8014e32:	dc34      	bgt.n	8014e9e <floor+0x86>
 8014e34:	2e00      	cmp	r6, #0
 8014e36:	da16      	bge.n	8014e66 <floor+0x4e>
 8014e38:	a335      	add	r3, pc, #212	; (adr r3, 8014f10 <floor+0xf8>)
 8014e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3e:	f7eb fa3d 	bl	80002bc <__adddf3>
 8014e42:	2200      	movs	r2, #0
 8014e44:	2300      	movs	r3, #0
 8014e46:	f7eb fe7f 	bl	8000b48 <__aeabi_dcmpgt>
 8014e4a:	b148      	cbz	r0, 8014e60 <floor+0x48>
 8014e4c:	2c00      	cmp	r4, #0
 8014e4e:	da59      	bge.n	8014f04 <floor+0xec>
 8014e50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014e54:	4a30      	ldr	r2, [pc, #192]	; (8014f18 <floor+0x100>)
 8014e56:	432b      	orrs	r3, r5
 8014e58:	2500      	movs	r5, #0
 8014e5a:	42ab      	cmp	r3, r5
 8014e5c:	bf18      	it	ne
 8014e5e:	4614      	movne	r4, r2
 8014e60:	4621      	mov	r1, r4
 8014e62:	4628      	mov	r0, r5
 8014e64:	e025      	b.n	8014eb2 <floor+0x9a>
 8014e66:	4f2d      	ldr	r7, [pc, #180]	; (8014f1c <floor+0x104>)
 8014e68:	4137      	asrs	r7, r6
 8014e6a:	ea01 0307 	and.w	r3, r1, r7
 8014e6e:	4303      	orrs	r3, r0
 8014e70:	d01f      	beq.n	8014eb2 <floor+0x9a>
 8014e72:	a327      	add	r3, pc, #156	; (adr r3, 8014f10 <floor+0xf8>)
 8014e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e78:	f7eb fa20 	bl	80002bc <__adddf3>
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	2300      	movs	r3, #0
 8014e80:	f7eb fe62 	bl	8000b48 <__aeabi_dcmpgt>
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d0eb      	beq.n	8014e60 <floor+0x48>
 8014e88:	2c00      	cmp	r4, #0
 8014e8a:	bfbe      	ittt	lt
 8014e8c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014e90:	fa43 f606 	asrlt.w	r6, r3, r6
 8014e94:	19a4      	addlt	r4, r4, r6
 8014e96:	ea24 0407 	bic.w	r4, r4, r7
 8014e9a:	2500      	movs	r5, #0
 8014e9c:	e7e0      	b.n	8014e60 <floor+0x48>
 8014e9e:	2e33      	cmp	r6, #51	; 0x33
 8014ea0:	dd0b      	ble.n	8014eba <floor+0xa2>
 8014ea2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014ea6:	d104      	bne.n	8014eb2 <floor+0x9a>
 8014ea8:	ee10 2a10 	vmov	r2, s0
 8014eac:	460b      	mov	r3, r1
 8014eae:	f7eb fa05 	bl	80002bc <__adddf3>
 8014eb2:	ec41 0b10 	vmov	d0, r0, r1
 8014eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec2:	fa23 f707 	lsr.w	r7, r3, r7
 8014ec6:	4207      	tst	r7, r0
 8014ec8:	d0f3      	beq.n	8014eb2 <floor+0x9a>
 8014eca:	a311      	add	r3, pc, #68	; (adr r3, 8014f10 <floor+0xf8>)
 8014ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed0:	f7eb f9f4 	bl	80002bc <__adddf3>
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	f7eb fe36 	bl	8000b48 <__aeabi_dcmpgt>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d0bf      	beq.n	8014e60 <floor+0x48>
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	da02      	bge.n	8014eea <floor+0xd2>
 8014ee4:	2e14      	cmp	r6, #20
 8014ee6:	d103      	bne.n	8014ef0 <floor+0xd8>
 8014ee8:	3401      	adds	r4, #1
 8014eea:	ea25 0507 	bic.w	r5, r5, r7
 8014eee:	e7b7      	b.n	8014e60 <floor+0x48>
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014ef6:	fa03 f606 	lsl.w	r6, r3, r6
 8014efa:	4435      	add	r5, r6
 8014efc:	4545      	cmp	r5, r8
 8014efe:	bf38      	it	cc
 8014f00:	18e4      	addcc	r4, r4, r3
 8014f02:	e7f2      	b.n	8014eea <floor+0xd2>
 8014f04:	2500      	movs	r5, #0
 8014f06:	462c      	mov	r4, r5
 8014f08:	e7aa      	b.n	8014e60 <floor+0x48>
 8014f0a:	bf00      	nop
 8014f0c:	f3af 8000 	nop.w
 8014f10:	8800759c 	.word	0x8800759c
 8014f14:	7e37e43c 	.word	0x7e37e43c
 8014f18:	bff00000 	.word	0xbff00000
 8014f1c:	000fffff 	.word	0x000fffff

08014f20 <scalbn>:
 8014f20:	b570      	push	{r4, r5, r6, lr}
 8014f22:	ec55 4b10 	vmov	r4, r5, d0
 8014f26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	462b      	mov	r3, r5
 8014f2e:	b9aa      	cbnz	r2, 8014f5c <scalbn+0x3c>
 8014f30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f34:	4323      	orrs	r3, r4
 8014f36:	d03b      	beq.n	8014fb0 <scalbn+0x90>
 8014f38:	4b31      	ldr	r3, [pc, #196]	; (8015000 <scalbn+0xe0>)
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	ee10 0a10 	vmov	r0, s0
 8014f42:	f7eb fb71 	bl	8000628 <__aeabi_dmul>
 8014f46:	4b2f      	ldr	r3, [pc, #188]	; (8015004 <scalbn+0xe4>)
 8014f48:	429e      	cmp	r6, r3
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	460d      	mov	r5, r1
 8014f4e:	da12      	bge.n	8014f76 <scalbn+0x56>
 8014f50:	a327      	add	r3, pc, #156	; (adr r3, 8014ff0 <scalbn+0xd0>)
 8014f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f56:	f7eb fb67 	bl	8000628 <__aeabi_dmul>
 8014f5a:	e009      	b.n	8014f70 <scalbn+0x50>
 8014f5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f60:	428a      	cmp	r2, r1
 8014f62:	d10c      	bne.n	8014f7e <scalbn+0x5e>
 8014f64:	ee10 2a10 	vmov	r2, s0
 8014f68:	4620      	mov	r0, r4
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	f7eb f9a6 	bl	80002bc <__adddf3>
 8014f70:	4604      	mov	r4, r0
 8014f72:	460d      	mov	r5, r1
 8014f74:	e01c      	b.n	8014fb0 <scalbn+0x90>
 8014f76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	3a36      	subs	r2, #54	; 0x36
 8014f7e:	4432      	add	r2, r6
 8014f80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014f84:	428a      	cmp	r2, r1
 8014f86:	dd0b      	ble.n	8014fa0 <scalbn+0x80>
 8014f88:	ec45 4b11 	vmov	d1, r4, r5
 8014f8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014ff8 <scalbn+0xd8>
 8014f90:	f000 f83c 	bl	801500c <copysign>
 8014f94:	a318      	add	r3, pc, #96	; (adr r3, 8014ff8 <scalbn+0xd8>)
 8014f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9a:	ec51 0b10 	vmov	r0, r1, d0
 8014f9e:	e7da      	b.n	8014f56 <scalbn+0x36>
 8014fa0:	2a00      	cmp	r2, #0
 8014fa2:	dd08      	ble.n	8014fb6 <scalbn+0x96>
 8014fa4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fb0:	ec45 4b10 	vmov	d0, r4, r5
 8014fb4:	bd70      	pop	{r4, r5, r6, pc}
 8014fb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014fba:	da0d      	bge.n	8014fd8 <scalbn+0xb8>
 8014fbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014fc0:	429e      	cmp	r6, r3
 8014fc2:	ec45 4b11 	vmov	d1, r4, r5
 8014fc6:	dce1      	bgt.n	8014f8c <scalbn+0x6c>
 8014fc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014ff0 <scalbn+0xd0>
 8014fcc:	f000 f81e 	bl	801500c <copysign>
 8014fd0:	a307      	add	r3, pc, #28	; (adr r3, 8014ff0 <scalbn+0xd0>)
 8014fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd6:	e7e0      	b.n	8014f9a <scalbn+0x7a>
 8014fd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fdc:	3236      	adds	r2, #54	; 0x36
 8014fde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	4629      	mov	r1, r5
 8014fea:	2200      	movs	r2, #0
 8014fec:	4b06      	ldr	r3, [pc, #24]	; (8015008 <scalbn+0xe8>)
 8014fee:	e7b2      	b.n	8014f56 <scalbn+0x36>
 8014ff0:	c2f8f359 	.word	0xc2f8f359
 8014ff4:	01a56e1f 	.word	0x01a56e1f
 8014ff8:	8800759c 	.word	0x8800759c
 8014ffc:	7e37e43c 	.word	0x7e37e43c
 8015000:	43500000 	.word	0x43500000
 8015004:	ffff3cb0 	.word	0xffff3cb0
 8015008:	3c900000 	.word	0x3c900000

0801500c <copysign>:
 801500c:	ec51 0b10 	vmov	r0, r1, d0
 8015010:	ee11 0a90 	vmov	r0, s3
 8015014:	ee10 2a10 	vmov	r2, s0
 8015018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801501c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015020:	ea41 0300 	orr.w	r3, r1, r0
 8015024:	ec43 2b10 	vmov	d0, r2, r3
 8015028:	4770      	bx	lr
	...

0801502c <__errno>:
 801502c:	4b01      	ldr	r3, [pc, #4]	; (8015034 <__errno+0x8>)
 801502e:	6818      	ldr	r0, [r3, #0]
 8015030:	4770      	bx	lr
 8015032:	bf00      	nop
 8015034:	2000000c 	.word	0x2000000c

08015038 <__libc_init_array>:
 8015038:	b570      	push	{r4, r5, r6, lr}
 801503a:	4e0d      	ldr	r6, [pc, #52]	; (8015070 <__libc_init_array+0x38>)
 801503c:	4c0d      	ldr	r4, [pc, #52]	; (8015074 <__libc_init_array+0x3c>)
 801503e:	1ba4      	subs	r4, r4, r6
 8015040:	10a4      	asrs	r4, r4, #2
 8015042:	2500      	movs	r5, #0
 8015044:	42a5      	cmp	r5, r4
 8015046:	d109      	bne.n	801505c <__libc_init_array+0x24>
 8015048:	4e0b      	ldr	r6, [pc, #44]	; (8015078 <__libc_init_array+0x40>)
 801504a:	4c0c      	ldr	r4, [pc, #48]	; (801507c <__libc_init_array+0x44>)
 801504c:	f004 f9e8 	bl	8019420 <_init>
 8015050:	1ba4      	subs	r4, r4, r6
 8015052:	10a4      	asrs	r4, r4, #2
 8015054:	2500      	movs	r5, #0
 8015056:	42a5      	cmp	r5, r4
 8015058:	d105      	bne.n	8015066 <__libc_init_array+0x2e>
 801505a:	bd70      	pop	{r4, r5, r6, pc}
 801505c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015060:	4798      	blx	r3
 8015062:	3501      	adds	r5, #1
 8015064:	e7ee      	b.n	8015044 <__libc_init_array+0xc>
 8015066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801506a:	4798      	blx	r3
 801506c:	3501      	adds	r5, #1
 801506e:	e7f2      	b.n	8015056 <__libc_init_array+0x1e>
 8015070:	0801a04c 	.word	0x0801a04c
 8015074:	0801a04c 	.word	0x0801a04c
 8015078:	0801a04c 	.word	0x0801a04c
 801507c:	0801a054 	.word	0x0801a054

08015080 <memcpy>:
 8015080:	b510      	push	{r4, lr}
 8015082:	1e43      	subs	r3, r0, #1
 8015084:	440a      	add	r2, r1
 8015086:	4291      	cmp	r1, r2
 8015088:	d100      	bne.n	801508c <memcpy+0xc>
 801508a:	bd10      	pop	{r4, pc}
 801508c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015094:	e7f7      	b.n	8015086 <memcpy+0x6>

08015096 <memset>:
 8015096:	4402      	add	r2, r0
 8015098:	4603      	mov	r3, r0
 801509a:	4293      	cmp	r3, r2
 801509c:	d100      	bne.n	80150a0 <memset+0xa>
 801509e:	4770      	bx	lr
 80150a0:	f803 1b01 	strb.w	r1, [r3], #1
 80150a4:	e7f9      	b.n	801509a <memset+0x4>

080150a6 <__cvt>:
 80150a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150aa:	ec55 4b10 	vmov	r4, r5, d0
 80150ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80150b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80150b4:	2d00      	cmp	r5, #0
 80150b6:	460e      	mov	r6, r1
 80150b8:	4691      	mov	r9, r2
 80150ba:	4619      	mov	r1, r3
 80150bc:	bfb8      	it	lt
 80150be:	4622      	movlt	r2, r4
 80150c0:	462b      	mov	r3, r5
 80150c2:	f027 0720 	bic.w	r7, r7, #32
 80150c6:	bfbb      	ittet	lt
 80150c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80150cc:	461d      	movlt	r5, r3
 80150ce:	2300      	movge	r3, #0
 80150d0:	232d      	movlt	r3, #45	; 0x2d
 80150d2:	bfb8      	it	lt
 80150d4:	4614      	movlt	r4, r2
 80150d6:	2f46      	cmp	r7, #70	; 0x46
 80150d8:	700b      	strb	r3, [r1, #0]
 80150da:	d004      	beq.n	80150e6 <__cvt+0x40>
 80150dc:	2f45      	cmp	r7, #69	; 0x45
 80150de:	d100      	bne.n	80150e2 <__cvt+0x3c>
 80150e0:	3601      	adds	r6, #1
 80150e2:	2102      	movs	r1, #2
 80150e4:	e000      	b.n	80150e8 <__cvt+0x42>
 80150e6:	2103      	movs	r1, #3
 80150e8:	ab03      	add	r3, sp, #12
 80150ea:	9301      	str	r3, [sp, #4]
 80150ec:	ab02      	add	r3, sp, #8
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	4632      	mov	r2, r6
 80150f2:	4653      	mov	r3, sl
 80150f4:	ec45 4b10 	vmov	d0, r4, r5
 80150f8:	f001 fdfe 	bl	8016cf8 <_dtoa_r>
 80150fc:	2f47      	cmp	r7, #71	; 0x47
 80150fe:	4680      	mov	r8, r0
 8015100:	d102      	bne.n	8015108 <__cvt+0x62>
 8015102:	f019 0f01 	tst.w	r9, #1
 8015106:	d026      	beq.n	8015156 <__cvt+0xb0>
 8015108:	2f46      	cmp	r7, #70	; 0x46
 801510a:	eb08 0906 	add.w	r9, r8, r6
 801510e:	d111      	bne.n	8015134 <__cvt+0x8e>
 8015110:	f898 3000 	ldrb.w	r3, [r8]
 8015114:	2b30      	cmp	r3, #48	; 0x30
 8015116:	d10a      	bne.n	801512e <__cvt+0x88>
 8015118:	2200      	movs	r2, #0
 801511a:	2300      	movs	r3, #0
 801511c:	4620      	mov	r0, r4
 801511e:	4629      	mov	r1, r5
 8015120:	f7eb fcea 	bl	8000af8 <__aeabi_dcmpeq>
 8015124:	b918      	cbnz	r0, 801512e <__cvt+0x88>
 8015126:	f1c6 0601 	rsb	r6, r6, #1
 801512a:	f8ca 6000 	str.w	r6, [sl]
 801512e:	f8da 3000 	ldr.w	r3, [sl]
 8015132:	4499      	add	r9, r3
 8015134:	2200      	movs	r2, #0
 8015136:	2300      	movs	r3, #0
 8015138:	4620      	mov	r0, r4
 801513a:	4629      	mov	r1, r5
 801513c:	f7eb fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8015140:	b938      	cbnz	r0, 8015152 <__cvt+0xac>
 8015142:	2230      	movs	r2, #48	; 0x30
 8015144:	9b03      	ldr	r3, [sp, #12]
 8015146:	454b      	cmp	r3, r9
 8015148:	d205      	bcs.n	8015156 <__cvt+0xb0>
 801514a:	1c59      	adds	r1, r3, #1
 801514c:	9103      	str	r1, [sp, #12]
 801514e:	701a      	strb	r2, [r3, #0]
 8015150:	e7f8      	b.n	8015144 <__cvt+0x9e>
 8015152:	f8cd 900c 	str.w	r9, [sp, #12]
 8015156:	9b03      	ldr	r3, [sp, #12]
 8015158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801515a:	eba3 0308 	sub.w	r3, r3, r8
 801515e:	4640      	mov	r0, r8
 8015160:	6013      	str	r3, [r2, #0]
 8015162:	b004      	add	sp, #16
 8015164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015168 <__exponent>:
 8015168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801516a:	2900      	cmp	r1, #0
 801516c:	4604      	mov	r4, r0
 801516e:	bfba      	itte	lt
 8015170:	4249      	neglt	r1, r1
 8015172:	232d      	movlt	r3, #45	; 0x2d
 8015174:	232b      	movge	r3, #43	; 0x2b
 8015176:	2909      	cmp	r1, #9
 8015178:	f804 2b02 	strb.w	r2, [r4], #2
 801517c:	7043      	strb	r3, [r0, #1]
 801517e:	dd20      	ble.n	80151c2 <__exponent+0x5a>
 8015180:	f10d 0307 	add.w	r3, sp, #7
 8015184:	461f      	mov	r7, r3
 8015186:	260a      	movs	r6, #10
 8015188:	fb91 f5f6 	sdiv	r5, r1, r6
 801518c:	fb06 1115 	mls	r1, r6, r5, r1
 8015190:	3130      	adds	r1, #48	; 0x30
 8015192:	2d09      	cmp	r5, #9
 8015194:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015198:	f103 32ff 	add.w	r2, r3, #4294967295
 801519c:	4629      	mov	r1, r5
 801519e:	dc09      	bgt.n	80151b4 <__exponent+0x4c>
 80151a0:	3130      	adds	r1, #48	; 0x30
 80151a2:	3b02      	subs	r3, #2
 80151a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80151a8:	42bb      	cmp	r3, r7
 80151aa:	4622      	mov	r2, r4
 80151ac:	d304      	bcc.n	80151b8 <__exponent+0x50>
 80151ae:	1a10      	subs	r0, r2, r0
 80151b0:	b003      	add	sp, #12
 80151b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b4:	4613      	mov	r3, r2
 80151b6:	e7e7      	b.n	8015188 <__exponent+0x20>
 80151b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151bc:	f804 2b01 	strb.w	r2, [r4], #1
 80151c0:	e7f2      	b.n	80151a8 <__exponent+0x40>
 80151c2:	2330      	movs	r3, #48	; 0x30
 80151c4:	4419      	add	r1, r3
 80151c6:	7083      	strb	r3, [r0, #2]
 80151c8:	1d02      	adds	r2, r0, #4
 80151ca:	70c1      	strb	r1, [r0, #3]
 80151cc:	e7ef      	b.n	80151ae <__exponent+0x46>
	...

080151d0 <_printf_float>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	b08d      	sub	sp, #52	; 0x34
 80151d6:	460c      	mov	r4, r1
 80151d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80151dc:	4616      	mov	r6, r2
 80151de:	461f      	mov	r7, r3
 80151e0:	4605      	mov	r5, r0
 80151e2:	f002 fe7b 	bl	8017edc <_localeconv_r>
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	9304      	str	r3, [sp, #16]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7eb f808 	bl	8000200 <strlen>
 80151f0:	2300      	movs	r3, #0
 80151f2:	930a      	str	r3, [sp, #40]	; 0x28
 80151f4:	f8d8 3000 	ldr.w	r3, [r8]
 80151f8:	9005      	str	r0, [sp, #20]
 80151fa:	3307      	adds	r3, #7
 80151fc:	f023 0307 	bic.w	r3, r3, #7
 8015200:	f103 0208 	add.w	r2, r3, #8
 8015204:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015208:	f8d4 b000 	ldr.w	fp, [r4]
 801520c:	f8c8 2000 	str.w	r2, [r8]
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015218:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801521c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015220:	9307      	str	r3, [sp, #28]
 8015222:	f8cd 8018 	str.w	r8, [sp, #24]
 8015226:	f04f 32ff 	mov.w	r2, #4294967295
 801522a:	4ba7      	ldr	r3, [pc, #668]	; (80154c8 <_printf_float+0x2f8>)
 801522c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015230:	f7eb fc94 	bl	8000b5c <__aeabi_dcmpun>
 8015234:	bb70      	cbnz	r0, 8015294 <_printf_float+0xc4>
 8015236:	f04f 32ff 	mov.w	r2, #4294967295
 801523a:	4ba3      	ldr	r3, [pc, #652]	; (80154c8 <_printf_float+0x2f8>)
 801523c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015240:	f7eb fc6e 	bl	8000b20 <__aeabi_dcmple>
 8015244:	bb30      	cbnz	r0, 8015294 <_printf_float+0xc4>
 8015246:	2200      	movs	r2, #0
 8015248:	2300      	movs	r3, #0
 801524a:	4640      	mov	r0, r8
 801524c:	4649      	mov	r1, r9
 801524e:	f7eb fc5d 	bl	8000b0c <__aeabi_dcmplt>
 8015252:	b110      	cbz	r0, 801525a <_printf_float+0x8a>
 8015254:	232d      	movs	r3, #45	; 0x2d
 8015256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801525a:	4a9c      	ldr	r2, [pc, #624]	; (80154cc <_printf_float+0x2fc>)
 801525c:	4b9c      	ldr	r3, [pc, #624]	; (80154d0 <_printf_float+0x300>)
 801525e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015262:	bf8c      	ite	hi
 8015264:	4690      	movhi	r8, r2
 8015266:	4698      	movls	r8, r3
 8015268:	2303      	movs	r3, #3
 801526a:	f02b 0204 	bic.w	r2, fp, #4
 801526e:	6123      	str	r3, [r4, #16]
 8015270:	6022      	str	r2, [r4, #0]
 8015272:	f04f 0900 	mov.w	r9, #0
 8015276:	9700      	str	r7, [sp, #0]
 8015278:	4633      	mov	r3, r6
 801527a:	aa0b      	add	r2, sp, #44	; 0x2c
 801527c:	4621      	mov	r1, r4
 801527e:	4628      	mov	r0, r5
 8015280:	f000 f9e6 	bl	8015650 <_printf_common>
 8015284:	3001      	adds	r0, #1
 8015286:	f040 808d 	bne.w	80153a4 <_printf_float+0x1d4>
 801528a:	f04f 30ff 	mov.w	r0, #4294967295
 801528e:	b00d      	add	sp, #52	; 0x34
 8015290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015294:	4642      	mov	r2, r8
 8015296:	464b      	mov	r3, r9
 8015298:	4640      	mov	r0, r8
 801529a:	4649      	mov	r1, r9
 801529c:	f7eb fc5e 	bl	8000b5c <__aeabi_dcmpun>
 80152a0:	b110      	cbz	r0, 80152a8 <_printf_float+0xd8>
 80152a2:	4a8c      	ldr	r2, [pc, #560]	; (80154d4 <_printf_float+0x304>)
 80152a4:	4b8c      	ldr	r3, [pc, #560]	; (80154d8 <_printf_float+0x308>)
 80152a6:	e7da      	b.n	801525e <_printf_float+0x8e>
 80152a8:	6861      	ldr	r1, [r4, #4]
 80152aa:	1c4b      	adds	r3, r1, #1
 80152ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80152b0:	a80a      	add	r0, sp, #40	; 0x28
 80152b2:	d13e      	bne.n	8015332 <_printf_float+0x162>
 80152b4:	2306      	movs	r3, #6
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	2300      	movs	r3, #0
 80152ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80152be:	ab09      	add	r3, sp, #36	; 0x24
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	ec49 8b10 	vmov	d0, r8, r9
 80152c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80152ca:	6022      	str	r2, [r4, #0]
 80152cc:	f8cd a004 	str.w	sl, [sp, #4]
 80152d0:	6861      	ldr	r1, [r4, #4]
 80152d2:	4628      	mov	r0, r5
 80152d4:	f7ff fee7 	bl	80150a6 <__cvt>
 80152d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80152dc:	2b47      	cmp	r3, #71	; 0x47
 80152de:	4680      	mov	r8, r0
 80152e0:	d109      	bne.n	80152f6 <_printf_float+0x126>
 80152e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e4:	1cd8      	adds	r0, r3, #3
 80152e6:	db02      	blt.n	80152ee <_printf_float+0x11e>
 80152e8:	6862      	ldr	r2, [r4, #4]
 80152ea:	4293      	cmp	r3, r2
 80152ec:	dd47      	ble.n	801537e <_printf_float+0x1ae>
 80152ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80152f2:	fa5f fa8a 	uxtb.w	sl, sl
 80152f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80152fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152fc:	d824      	bhi.n	8015348 <_printf_float+0x178>
 80152fe:	3901      	subs	r1, #1
 8015300:	4652      	mov	r2, sl
 8015302:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015306:	9109      	str	r1, [sp, #36]	; 0x24
 8015308:	f7ff ff2e 	bl	8015168 <__exponent>
 801530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801530e:	1813      	adds	r3, r2, r0
 8015310:	2a01      	cmp	r2, #1
 8015312:	4681      	mov	r9, r0
 8015314:	6123      	str	r3, [r4, #16]
 8015316:	dc02      	bgt.n	801531e <_printf_float+0x14e>
 8015318:	6822      	ldr	r2, [r4, #0]
 801531a:	07d1      	lsls	r1, r2, #31
 801531c:	d501      	bpl.n	8015322 <_printf_float+0x152>
 801531e:	3301      	adds	r3, #1
 8015320:	6123      	str	r3, [r4, #16]
 8015322:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015326:	2b00      	cmp	r3, #0
 8015328:	d0a5      	beq.n	8015276 <_printf_float+0xa6>
 801532a:	232d      	movs	r3, #45	; 0x2d
 801532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015330:	e7a1      	b.n	8015276 <_printf_float+0xa6>
 8015332:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015336:	f000 8177 	beq.w	8015628 <_printf_float+0x458>
 801533a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801533e:	d1bb      	bne.n	80152b8 <_printf_float+0xe8>
 8015340:	2900      	cmp	r1, #0
 8015342:	d1b9      	bne.n	80152b8 <_printf_float+0xe8>
 8015344:	2301      	movs	r3, #1
 8015346:	e7b6      	b.n	80152b6 <_printf_float+0xe6>
 8015348:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801534c:	d119      	bne.n	8015382 <_printf_float+0x1b2>
 801534e:	2900      	cmp	r1, #0
 8015350:	6863      	ldr	r3, [r4, #4]
 8015352:	dd0c      	ble.n	801536e <_printf_float+0x19e>
 8015354:	6121      	str	r1, [r4, #16]
 8015356:	b913      	cbnz	r3, 801535e <_printf_float+0x18e>
 8015358:	6822      	ldr	r2, [r4, #0]
 801535a:	07d2      	lsls	r2, r2, #31
 801535c:	d502      	bpl.n	8015364 <_printf_float+0x194>
 801535e:	3301      	adds	r3, #1
 8015360:	440b      	add	r3, r1
 8015362:	6123      	str	r3, [r4, #16]
 8015364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015366:	65a3      	str	r3, [r4, #88]	; 0x58
 8015368:	f04f 0900 	mov.w	r9, #0
 801536c:	e7d9      	b.n	8015322 <_printf_float+0x152>
 801536e:	b913      	cbnz	r3, 8015376 <_printf_float+0x1a6>
 8015370:	6822      	ldr	r2, [r4, #0]
 8015372:	07d0      	lsls	r0, r2, #31
 8015374:	d501      	bpl.n	801537a <_printf_float+0x1aa>
 8015376:	3302      	adds	r3, #2
 8015378:	e7f3      	b.n	8015362 <_printf_float+0x192>
 801537a:	2301      	movs	r3, #1
 801537c:	e7f1      	b.n	8015362 <_printf_float+0x192>
 801537e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015382:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015386:	4293      	cmp	r3, r2
 8015388:	db05      	blt.n	8015396 <_printf_float+0x1c6>
 801538a:	6822      	ldr	r2, [r4, #0]
 801538c:	6123      	str	r3, [r4, #16]
 801538e:	07d1      	lsls	r1, r2, #31
 8015390:	d5e8      	bpl.n	8015364 <_printf_float+0x194>
 8015392:	3301      	adds	r3, #1
 8015394:	e7e5      	b.n	8015362 <_printf_float+0x192>
 8015396:	2b00      	cmp	r3, #0
 8015398:	bfd4      	ite	le
 801539a:	f1c3 0302 	rsble	r3, r3, #2
 801539e:	2301      	movgt	r3, #1
 80153a0:	4413      	add	r3, r2
 80153a2:	e7de      	b.n	8015362 <_printf_float+0x192>
 80153a4:	6823      	ldr	r3, [r4, #0]
 80153a6:	055a      	lsls	r2, r3, #21
 80153a8:	d407      	bmi.n	80153ba <_printf_float+0x1ea>
 80153aa:	6923      	ldr	r3, [r4, #16]
 80153ac:	4642      	mov	r2, r8
 80153ae:	4631      	mov	r1, r6
 80153b0:	4628      	mov	r0, r5
 80153b2:	47b8      	blx	r7
 80153b4:	3001      	adds	r0, #1
 80153b6:	d12b      	bne.n	8015410 <_printf_float+0x240>
 80153b8:	e767      	b.n	801528a <_printf_float+0xba>
 80153ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80153be:	f240 80dc 	bls.w	801557a <_printf_float+0x3aa>
 80153c2:	2200      	movs	r2, #0
 80153c4:	2300      	movs	r3, #0
 80153c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80153ca:	f7eb fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d033      	beq.n	801543a <_printf_float+0x26a>
 80153d2:	2301      	movs	r3, #1
 80153d4:	4a41      	ldr	r2, [pc, #260]	; (80154dc <_printf_float+0x30c>)
 80153d6:	4631      	mov	r1, r6
 80153d8:	4628      	mov	r0, r5
 80153da:	47b8      	blx	r7
 80153dc:	3001      	adds	r0, #1
 80153de:	f43f af54 	beq.w	801528a <_printf_float+0xba>
 80153e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153e6:	429a      	cmp	r2, r3
 80153e8:	db02      	blt.n	80153f0 <_printf_float+0x220>
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	07d8      	lsls	r0, r3, #31
 80153ee:	d50f      	bpl.n	8015410 <_printf_float+0x240>
 80153f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153f4:	4631      	mov	r1, r6
 80153f6:	4628      	mov	r0, r5
 80153f8:	47b8      	blx	r7
 80153fa:	3001      	adds	r0, #1
 80153fc:	f43f af45 	beq.w	801528a <_printf_float+0xba>
 8015400:	f04f 0800 	mov.w	r8, #0
 8015404:	f104 091a 	add.w	r9, r4, #26
 8015408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801540a:	3b01      	subs	r3, #1
 801540c:	4543      	cmp	r3, r8
 801540e:	dc09      	bgt.n	8015424 <_printf_float+0x254>
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	079b      	lsls	r3, r3, #30
 8015414:	f100 8103 	bmi.w	801561e <_printf_float+0x44e>
 8015418:	68e0      	ldr	r0, [r4, #12]
 801541a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801541c:	4298      	cmp	r0, r3
 801541e:	bfb8      	it	lt
 8015420:	4618      	movlt	r0, r3
 8015422:	e734      	b.n	801528e <_printf_float+0xbe>
 8015424:	2301      	movs	r3, #1
 8015426:	464a      	mov	r2, r9
 8015428:	4631      	mov	r1, r6
 801542a:	4628      	mov	r0, r5
 801542c:	47b8      	blx	r7
 801542e:	3001      	adds	r0, #1
 8015430:	f43f af2b 	beq.w	801528a <_printf_float+0xba>
 8015434:	f108 0801 	add.w	r8, r8, #1
 8015438:	e7e6      	b.n	8015408 <_printf_float+0x238>
 801543a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543c:	2b00      	cmp	r3, #0
 801543e:	dc2b      	bgt.n	8015498 <_printf_float+0x2c8>
 8015440:	2301      	movs	r3, #1
 8015442:	4a26      	ldr	r2, [pc, #152]	; (80154dc <_printf_float+0x30c>)
 8015444:	4631      	mov	r1, r6
 8015446:	4628      	mov	r0, r5
 8015448:	47b8      	blx	r7
 801544a:	3001      	adds	r0, #1
 801544c:	f43f af1d 	beq.w	801528a <_printf_float+0xba>
 8015450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015452:	b923      	cbnz	r3, 801545e <_printf_float+0x28e>
 8015454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015456:	b913      	cbnz	r3, 801545e <_printf_float+0x28e>
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	07d9      	lsls	r1, r3, #31
 801545c:	d5d8      	bpl.n	8015410 <_printf_float+0x240>
 801545e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015462:	4631      	mov	r1, r6
 8015464:	4628      	mov	r0, r5
 8015466:	47b8      	blx	r7
 8015468:	3001      	adds	r0, #1
 801546a:	f43f af0e 	beq.w	801528a <_printf_float+0xba>
 801546e:	f04f 0900 	mov.w	r9, #0
 8015472:	f104 0a1a 	add.w	sl, r4, #26
 8015476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015478:	425b      	negs	r3, r3
 801547a:	454b      	cmp	r3, r9
 801547c:	dc01      	bgt.n	8015482 <_printf_float+0x2b2>
 801547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015480:	e794      	b.n	80153ac <_printf_float+0x1dc>
 8015482:	2301      	movs	r3, #1
 8015484:	4652      	mov	r2, sl
 8015486:	4631      	mov	r1, r6
 8015488:	4628      	mov	r0, r5
 801548a:	47b8      	blx	r7
 801548c:	3001      	adds	r0, #1
 801548e:	f43f aefc 	beq.w	801528a <_printf_float+0xba>
 8015492:	f109 0901 	add.w	r9, r9, #1
 8015496:	e7ee      	b.n	8015476 <_printf_float+0x2a6>
 8015498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801549a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801549c:	429a      	cmp	r2, r3
 801549e:	bfa8      	it	ge
 80154a0:	461a      	movge	r2, r3
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	4691      	mov	r9, r2
 80154a6:	dd07      	ble.n	80154b8 <_printf_float+0x2e8>
 80154a8:	4613      	mov	r3, r2
 80154aa:	4631      	mov	r1, r6
 80154ac:	4642      	mov	r2, r8
 80154ae:	4628      	mov	r0, r5
 80154b0:	47b8      	blx	r7
 80154b2:	3001      	adds	r0, #1
 80154b4:	f43f aee9 	beq.w	801528a <_printf_float+0xba>
 80154b8:	f104 031a 	add.w	r3, r4, #26
 80154bc:	f04f 0b00 	mov.w	fp, #0
 80154c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80154c4:	9306      	str	r3, [sp, #24]
 80154c6:	e015      	b.n	80154f4 <_printf_float+0x324>
 80154c8:	7fefffff 	.word	0x7fefffff
 80154cc:	08019d14 	.word	0x08019d14
 80154d0:	08019d10 	.word	0x08019d10
 80154d4:	08019d1c 	.word	0x08019d1c
 80154d8:	08019d18 	.word	0x08019d18
 80154dc:	08019f3b 	.word	0x08019f3b
 80154e0:	2301      	movs	r3, #1
 80154e2:	9a06      	ldr	r2, [sp, #24]
 80154e4:	4631      	mov	r1, r6
 80154e6:	4628      	mov	r0, r5
 80154e8:	47b8      	blx	r7
 80154ea:	3001      	adds	r0, #1
 80154ec:	f43f aecd 	beq.w	801528a <_printf_float+0xba>
 80154f0:	f10b 0b01 	add.w	fp, fp, #1
 80154f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80154f8:	ebaa 0309 	sub.w	r3, sl, r9
 80154fc:	455b      	cmp	r3, fp
 80154fe:	dcef      	bgt.n	80154e0 <_printf_float+0x310>
 8015500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015504:	429a      	cmp	r2, r3
 8015506:	44d0      	add	r8, sl
 8015508:	db15      	blt.n	8015536 <_printf_float+0x366>
 801550a:	6823      	ldr	r3, [r4, #0]
 801550c:	07da      	lsls	r2, r3, #31
 801550e:	d412      	bmi.n	8015536 <_printf_float+0x366>
 8015510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015514:	eba3 020a 	sub.w	r2, r3, sl
 8015518:	eba3 0a01 	sub.w	sl, r3, r1
 801551c:	4592      	cmp	sl, r2
 801551e:	bfa8      	it	ge
 8015520:	4692      	movge	sl, r2
 8015522:	f1ba 0f00 	cmp.w	sl, #0
 8015526:	dc0e      	bgt.n	8015546 <_printf_float+0x376>
 8015528:	f04f 0800 	mov.w	r8, #0
 801552c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015530:	f104 091a 	add.w	r9, r4, #26
 8015534:	e019      	b.n	801556a <_printf_float+0x39a>
 8015536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801553a:	4631      	mov	r1, r6
 801553c:	4628      	mov	r0, r5
 801553e:	47b8      	blx	r7
 8015540:	3001      	adds	r0, #1
 8015542:	d1e5      	bne.n	8015510 <_printf_float+0x340>
 8015544:	e6a1      	b.n	801528a <_printf_float+0xba>
 8015546:	4653      	mov	r3, sl
 8015548:	4642      	mov	r2, r8
 801554a:	4631      	mov	r1, r6
 801554c:	4628      	mov	r0, r5
 801554e:	47b8      	blx	r7
 8015550:	3001      	adds	r0, #1
 8015552:	d1e9      	bne.n	8015528 <_printf_float+0x358>
 8015554:	e699      	b.n	801528a <_printf_float+0xba>
 8015556:	2301      	movs	r3, #1
 8015558:	464a      	mov	r2, r9
 801555a:	4631      	mov	r1, r6
 801555c:	4628      	mov	r0, r5
 801555e:	47b8      	blx	r7
 8015560:	3001      	adds	r0, #1
 8015562:	f43f ae92 	beq.w	801528a <_printf_float+0xba>
 8015566:	f108 0801 	add.w	r8, r8, #1
 801556a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801556e:	1a9b      	subs	r3, r3, r2
 8015570:	eba3 030a 	sub.w	r3, r3, sl
 8015574:	4543      	cmp	r3, r8
 8015576:	dcee      	bgt.n	8015556 <_printf_float+0x386>
 8015578:	e74a      	b.n	8015410 <_printf_float+0x240>
 801557a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801557c:	2a01      	cmp	r2, #1
 801557e:	dc01      	bgt.n	8015584 <_printf_float+0x3b4>
 8015580:	07db      	lsls	r3, r3, #31
 8015582:	d53a      	bpl.n	80155fa <_printf_float+0x42a>
 8015584:	2301      	movs	r3, #1
 8015586:	4642      	mov	r2, r8
 8015588:	4631      	mov	r1, r6
 801558a:	4628      	mov	r0, r5
 801558c:	47b8      	blx	r7
 801558e:	3001      	adds	r0, #1
 8015590:	f43f ae7b 	beq.w	801528a <_printf_float+0xba>
 8015594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015598:	4631      	mov	r1, r6
 801559a:	4628      	mov	r0, r5
 801559c:	47b8      	blx	r7
 801559e:	3001      	adds	r0, #1
 80155a0:	f108 0801 	add.w	r8, r8, #1
 80155a4:	f43f ae71 	beq.w	801528a <_printf_float+0xba>
 80155a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155aa:	2200      	movs	r2, #0
 80155ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80155b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155b4:	2300      	movs	r3, #0
 80155b6:	f7eb fa9f 	bl	8000af8 <__aeabi_dcmpeq>
 80155ba:	b9c8      	cbnz	r0, 80155f0 <_printf_float+0x420>
 80155bc:	4653      	mov	r3, sl
 80155be:	4642      	mov	r2, r8
 80155c0:	4631      	mov	r1, r6
 80155c2:	4628      	mov	r0, r5
 80155c4:	47b8      	blx	r7
 80155c6:	3001      	adds	r0, #1
 80155c8:	d10e      	bne.n	80155e8 <_printf_float+0x418>
 80155ca:	e65e      	b.n	801528a <_printf_float+0xba>
 80155cc:	2301      	movs	r3, #1
 80155ce:	4652      	mov	r2, sl
 80155d0:	4631      	mov	r1, r6
 80155d2:	4628      	mov	r0, r5
 80155d4:	47b8      	blx	r7
 80155d6:	3001      	adds	r0, #1
 80155d8:	f43f ae57 	beq.w	801528a <_printf_float+0xba>
 80155dc:	f108 0801 	add.w	r8, r8, #1
 80155e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e2:	3b01      	subs	r3, #1
 80155e4:	4543      	cmp	r3, r8
 80155e6:	dcf1      	bgt.n	80155cc <_printf_float+0x3fc>
 80155e8:	464b      	mov	r3, r9
 80155ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80155ee:	e6de      	b.n	80153ae <_printf_float+0x1de>
 80155f0:	f04f 0800 	mov.w	r8, #0
 80155f4:	f104 0a1a 	add.w	sl, r4, #26
 80155f8:	e7f2      	b.n	80155e0 <_printf_float+0x410>
 80155fa:	2301      	movs	r3, #1
 80155fc:	e7df      	b.n	80155be <_printf_float+0x3ee>
 80155fe:	2301      	movs	r3, #1
 8015600:	464a      	mov	r2, r9
 8015602:	4631      	mov	r1, r6
 8015604:	4628      	mov	r0, r5
 8015606:	47b8      	blx	r7
 8015608:	3001      	adds	r0, #1
 801560a:	f43f ae3e 	beq.w	801528a <_printf_float+0xba>
 801560e:	f108 0801 	add.w	r8, r8, #1
 8015612:	68e3      	ldr	r3, [r4, #12]
 8015614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015616:	1a9b      	subs	r3, r3, r2
 8015618:	4543      	cmp	r3, r8
 801561a:	dcf0      	bgt.n	80155fe <_printf_float+0x42e>
 801561c:	e6fc      	b.n	8015418 <_printf_float+0x248>
 801561e:	f04f 0800 	mov.w	r8, #0
 8015622:	f104 0919 	add.w	r9, r4, #25
 8015626:	e7f4      	b.n	8015612 <_printf_float+0x442>
 8015628:	2900      	cmp	r1, #0
 801562a:	f43f ae8b 	beq.w	8015344 <_printf_float+0x174>
 801562e:	2300      	movs	r3, #0
 8015630:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015634:	ab09      	add	r3, sp, #36	; 0x24
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	ec49 8b10 	vmov	d0, r8, r9
 801563c:	6022      	str	r2, [r4, #0]
 801563e:	f8cd a004 	str.w	sl, [sp, #4]
 8015642:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015646:	4628      	mov	r0, r5
 8015648:	f7ff fd2d 	bl	80150a6 <__cvt>
 801564c:	4680      	mov	r8, r0
 801564e:	e648      	b.n	80152e2 <_printf_float+0x112>

08015650 <_printf_common>:
 8015650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015654:	4691      	mov	r9, r2
 8015656:	461f      	mov	r7, r3
 8015658:	688a      	ldr	r2, [r1, #8]
 801565a:	690b      	ldr	r3, [r1, #16]
 801565c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015660:	4293      	cmp	r3, r2
 8015662:	bfb8      	it	lt
 8015664:	4613      	movlt	r3, r2
 8015666:	f8c9 3000 	str.w	r3, [r9]
 801566a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801566e:	4606      	mov	r6, r0
 8015670:	460c      	mov	r4, r1
 8015672:	b112      	cbz	r2, 801567a <_printf_common+0x2a>
 8015674:	3301      	adds	r3, #1
 8015676:	f8c9 3000 	str.w	r3, [r9]
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	0699      	lsls	r1, r3, #26
 801567e:	bf42      	ittt	mi
 8015680:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015684:	3302      	addmi	r3, #2
 8015686:	f8c9 3000 	strmi.w	r3, [r9]
 801568a:	6825      	ldr	r5, [r4, #0]
 801568c:	f015 0506 	ands.w	r5, r5, #6
 8015690:	d107      	bne.n	80156a2 <_printf_common+0x52>
 8015692:	f104 0a19 	add.w	sl, r4, #25
 8015696:	68e3      	ldr	r3, [r4, #12]
 8015698:	f8d9 2000 	ldr.w	r2, [r9]
 801569c:	1a9b      	subs	r3, r3, r2
 801569e:	42ab      	cmp	r3, r5
 80156a0:	dc28      	bgt.n	80156f4 <_printf_common+0xa4>
 80156a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80156a6:	6822      	ldr	r2, [r4, #0]
 80156a8:	3300      	adds	r3, #0
 80156aa:	bf18      	it	ne
 80156ac:	2301      	movne	r3, #1
 80156ae:	0692      	lsls	r2, r2, #26
 80156b0:	d42d      	bmi.n	801570e <_printf_common+0xbe>
 80156b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156b6:	4639      	mov	r1, r7
 80156b8:	4630      	mov	r0, r6
 80156ba:	47c0      	blx	r8
 80156bc:	3001      	adds	r0, #1
 80156be:	d020      	beq.n	8015702 <_printf_common+0xb2>
 80156c0:	6823      	ldr	r3, [r4, #0]
 80156c2:	68e5      	ldr	r5, [r4, #12]
 80156c4:	f8d9 2000 	ldr.w	r2, [r9]
 80156c8:	f003 0306 	and.w	r3, r3, #6
 80156cc:	2b04      	cmp	r3, #4
 80156ce:	bf08      	it	eq
 80156d0:	1aad      	subeq	r5, r5, r2
 80156d2:	68a3      	ldr	r3, [r4, #8]
 80156d4:	6922      	ldr	r2, [r4, #16]
 80156d6:	bf0c      	ite	eq
 80156d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80156dc:	2500      	movne	r5, #0
 80156de:	4293      	cmp	r3, r2
 80156e0:	bfc4      	itt	gt
 80156e2:	1a9b      	subgt	r3, r3, r2
 80156e4:	18ed      	addgt	r5, r5, r3
 80156e6:	f04f 0900 	mov.w	r9, #0
 80156ea:	341a      	adds	r4, #26
 80156ec:	454d      	cmp	r5, r9
 80156ee:	d11a      	bne.n	8015726 <_printf_common+0xd6>
 80156f0:	2000      	movs	r0, #0
 80156f2:	e008      	b.n	8015706 <_printf_common+0xb6>
 80156f4:	2301      	movs	r3, #1
 80156f6:	4652      	mov	r2, sl
 80156f8:	4639      	mov	r1, r7
 80156fa:	4630      	mov	r0, r6
 80156fc:	47c0      	blx	r8
 80156fe:	3001      	adds	r0, #1
 8015700:	d103      	bne.n	801570a <_printf_common+0xba>
 8015702:	f04f 30ff 	mov.w	r0, #4294967295
 8015706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801570a:	3501      	adds	r5, #1
 801570c:	e7c3      	b.n	8015696 <_printf_common+0x46>
 801570e:	18e1      	adds	r1, r4, r3
 8015710:	1c5a      	adds	r2, r3, #1
 8015712:	2030      	movs	r0, #48	; 0x30
 8015714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015718:	4422      	add	r2, r4
 801571a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801571e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015722:	3302      	adds	r3, #2
 8015724:	e7c5      	b.n	80156b2 <_printf_common+0x62>
 8015726:	2301      	movs	r3, #1
 8015728:	4622      	mov	r2, r4
 801572a:	4639      	mov	r1, r7
 801572c:	4630      	mov	r0, r6
 801572e:	47c0      	blx	r8
 8015730:	3001      	adds	r0, #1
 8015732:	d0e6      	beq.n	8015702 <_printf_common+0xb2>
 8015734:	f109 0901 	add.w	r9, r9, #1
 8015738:	e7d8      	b.n	80156ec <_printf_common+0x9c>
	...

0801573c <_printf_i>:
 801573c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015740:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015744:	460c      	mov	r4, r1
 8015746:	7e09      	ldrb	r1, [r1, #24]
 8015748:	b085      	sub	sp, #20
 801574a:	296e      	cmp	r1, #110	; 0x6e
 801574c:	4617      	mov	r7, r2
 801574e:	4606      	mov	r6, r0
 8015750:	4698      	mov	r8, r3
 8015752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015754:	f000 80b3 	beq.w	80158be <_printf_i+0x182>
 8015758:	d822      	bhi.n	80157a0 <_printf_i+0x64>
 801575a:	2963      	cmp	r1, #99	; 0x63
 801575c:	d036      	beq.n	80157cc <_printf_i+0x90>
 801575e:	d80a      	bhi.n	8015776 <_printf_i+0x3a>
 8015760:	2900      	cmp	r1, #0
 8015762:	f000 80b9 	beq.w	80158d8 <_printf_i+0x19c>
 8015766:	2958      	cmp	r1, #88	; 0x58
 8015768:	f000 8083 	beq.w	8015872 <_printf_i+0x136>
 801576c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015770:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015774:	e032      	b.n	80157dc <_printf_i+0xa0>
 8015776:	2964      	cmp	r1, #100	; 0x64
 8015778:	d001      	beq.n	801577e <_printf_i+0x42>
 801577a:	2969      	cmp	r1, #105	; 0x69
 801577c:	d1f6      	bne.n	801576c <_printf_i+0x30>
 801577e:	6820      	ldr	r0, [r4, #0]
 8015780:	6813      	ldr	r3, [r2, #0]
 8015782:	0605      	lsls	r5, r0, #24
 8015784:	f103 0104 	add.w	r1, r3, #4
 8015788:	d52a      	bpl.n	80157e0 <_printf_i+0xa4>
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	6011      	str	r1, [r2, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	da03      	bge.n	801579a <_printf_i+0x5e>
 8015792:	222d      	movs	r2, #45	; 0x2d
 8015794:	425b      	negs	r3, r3
 8015796:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801579a:	486f      	ldr	r0, [pc, #444]	; (8015958 <_printf_i+0x21c>)
 801579c:	220a      	movs	r2, #10
 801579e:	e039      	b.n	8015814 <_printf_i+0xd8>
 80157a0:	2973      	cmp	r1, #115	; 0x73
 80157a2:	f000 809d 	beq.w	80158e0 <_printf_i+0x1a4>
 80157a6:	d808      	bhi.n	80157ba <_printf_i+0x7e>
 80157a8:	296f      	cmp	r1, #111	; 0x6f
 80157aa:	d020      	beq.n	80157ee <_printf_i+0xb2>
 80157ac:	2970      	cmp	r1, #112	; 0x70
 80157ae:	d1dd      	bne.n	801576c <_printf_i+0x30>
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	f043 0320 	orr.w	r3, r3, #32
 80157b6:	6023      	str	r3, [r4, #0]
 80157b8:	e003      	b.n	80157c2 <_printf_i+0x86>
 80157ba:	2975      	cmp	r1, #117	; 0x75
 80157bc:	d017      	beq.n	80157ee <_printf_i+0xb2>
 80157be:	2978      	cmp	r1, #120	; 0x78
 80157c0:	d1d4      	bne.n	801576c <_printf_i+0x30>
 80157c2:	2378      	movs	r3, #120	; 0x78
 80157c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157c8:	4864      	ldr	r0, [pc, #400]	; (801595c <_printf_i+0x220>)
 80157ca:	e055      	b.n	8015878 <_printf_i+0x13c>
 80157cc:	6813      	ldr	r3, [r2, #0]
 80157ce:	1d19      	adds	r1, r3, #4
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	6011      	str	r1, [r2, #0]
 80157d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80157dc:	2301      	movs	r3, #1
 80157de:	e08c      	b.n	80158fa <_printf_i+0x1be>
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	6011      	str	r1, [r2, #0]
 80157e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157e8:	bf18      	it	ne
 80157ea:	b21b      	sxthne	r3, r3
 80157ec:	e7cf      	b.n	801578e <_printf_i+0x52>
 80157ee:	6813      	ldr	r3, [r2, #0]
 80157f0:	6825      	ldr	r5, [r4, #0]
 80157f2:	1d18      	adds	r0, r3, #4
 80157f4:	6010      	str	r0, [r2, #0]
 80157f6:	0628      	lsls	r0, r5, #24
 80157f8:	d501      	bpl.n	80157fe <_printf_i+0xc2>
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	e002      	b.n	8015804 <_printf_i+0xc8>
 80157fe:	0668      	lsls	r0, r5, #25
 8015800:	d5fb      	bpl.n	80157fa <_printf_i+0xbe>
 8015802:	881b      	ldrh	r3, [r3, #0]
 8015804:	4854      	ldr	r0, [pc, #336]	; (8015958 <_printf_i+0x21c>)
 8015806:	296f      	cmp	r1, #111	; 0x6f
 8015808:	bf14      	ite	ne
 801580a:	220a      	movne	r2, #10
 801580c:	2208      	moveq	r2, #8
 801580e:	2100      	movs	r1, #0
 8015810:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015814:	6865      	ldr	r5, [r4, #4]
 8015816:	60a5      	str	r5, [r4, #8]
 8015818:	2d00      	cmp	r5, #0
 801581a:	f2c0 8095 	blt.w	8015948 <_printf_i+0x20c>
 801581e:	6821      	ldr	r1, [r4, #0]
 8015820:	f021 0104 	bic.w	r1, r1, #4
 8015824:	6021      	str	r1, [r4, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d13d      	bne.n	80158a6 <_printf_i+0x16a>
 801582a:	2d00      	cmp	r5, #0
 801582c:	f040 808e 	bne.w	801594c <_printf_i+0x210>
 8015830:	4665      	mov	r5, ip
 8015832:	2a08      	cmp	r2, #8
 8015834:	d10b      	bne.n	801584e <_printf_i+0x112>
 8015836:	6823      	ldr	r3, [r4, #0]
 8015838:	07db      	lsls	r3, r3, #31
 801583a:	d508      	bpl.n	801584e <_printf_i+0x112>
 801583c:	6923      	ldr	r3, [r4, #16]
 801583e:	6862      	ldr	r2, [r4, #4]
 8015840:	429a      	cmp	r2, r3
 8015842:	bfde      	ittt	le
 8015844:	2330      	movle	r3, #48	; 0x30
 8015846:	f805 3c01 	strble.w	r3, [r5, #-1]
 801584a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801584e:	ebac 0305 	sub.w	r3, ip, r5
 8015852:	6123      	str	r3, [r4, #16]
 8015854:	f8cd 8000 	str.w	r8, [sp]
 8015858:	463b      	mov	r3, r7
 801585a:	aa03      	add	r2, sp, #12
 801585c:	4621      	mov	r1, r4
 801585e:	4630      	mov	r0, r6
 8015860:	f7ff fef6 	bl	8015650 <_printf_common>
 8015864:	3001      	adds	r0, #1
 8015866:	d14d      	bne.n	8015904 <_printf_i+0x1c8>
 8015868:	f04f 30ff 	mov.w	r0, #4294967295
 801586c:	b005      	add	sp, #20
 801586e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015872:	4839      	ldr	r0, [pc, #228]	; (8015958 <_printf_i+0x21c>)
 8015874:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015878:	6813      	ldr	r3, [r2, #0]
 801587a:	6821      	ldr	r1, [r4, #0]
 801587c:	1d1d      	adds	r5, r3, #4
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	6015      	str	r5, [r2, #0]
 8015882:	060a      	lsls	r2, r1, #24
 8015884:	d50b      	bpl.n	801589e <_printf_i+0x162>
 8015886:	07ca      	lsls	r2, r1, #31
 8015888:	bf44      	itt	mi
 801588a:	f041 0120 	orrmi.w	r1, r1, #32
 801588e:	6021      	strmi	r1, [r4, #0]
 8015890:	b91b      	cbnz	r3, 801589a <_printf_i+0x15e>
 8015892:	6822      	ldr	r2, [r4, #0]
 8015894:	f022 0220 	bic.w	r2, r2, #32
 8015898:	6022      	str	r2, [r4, #0]
 801589a:	2210      	movs	r2, #16
 801589c:	e7b7      	b.n	801580e <_printf_i+0xd2>
 801589e:	064d      	lsls	r5, r1, #25
 80158a0:	bf48      	it	mi
 80158a2:	b29b      	uxthmi	r3, r3
 80158a4:	e7ef      	b.n	8015886 <_printf_i+0x14a>
 80158a6:	4665      	mov	r5, ip
 80158a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ac:	fb02 3311 	mls	r3, r2, r1, r3
 80158b0:	5cc3      	ldrb	r3, [r0, r3]
 80158b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80158b6:	460b      	mov	r3, r1
 80158b8:	2900      	cmp	r1, #0
 80158ba:	d1f5      	bne.n	80158a8 <_printf_i+0x16c>
 80158bc:	e7b9      	b.n	8015832 <_printf_i+0xf6>
 80158be:	6813      	ldr	r3, [r2, #0]
 80158c0:	6825      	ldr	r5, [r4, #0]
 80158c2:	6961      	ldr	r1, [r4, #20]
 80158c4:	1d18      	adds	r0, r3, #4
 80158c6:	6010      	str	r0, [r2, #0]
 80158c8:	0628      	lsls	r0, r5, #24
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	d501      	bpl.n	80158d2 <_printf_i+0x196>
 80158ce:	6019      	str	r1, [r3, #0]
 80158d0:	e002      	b.n	80158d8 <_printf_i+0x19c>
 80158d2:	066a      	lsls	r2, r5, #25
 80158d4:	d5fb      	bpl.n	80158ce <_printf_i+0x192>
 80158d6:	8019      	strh	r1, [r3, #0]
 80158d8:	2300      	movs	r3, #0
 80158da:	6123      	str	r3, [r4, #16]
 80158dc:	4665      	mov	r5, ip
 80158de:	e7b9      	b.n	8015854 <_printf_i+0x118>
 80158e0:	6813      	ldr	r3, [r2, #0]
 80158e2:	1d19      	adds	r1, r3, #4
 80158e4:	6011      	str	r1, [r2, #0]
 80158e6:	681d      	ldr	r5, [r3, #0]
 80158e8:	6862      	ldr	r2, [r4, #4]
 80158ea:	2100      	movs	r1, #0
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7ea fc8f 	bl	8000210 <memchr>
 80158f2:	b108      	cbz	r0, 80158f8 <_printf_i+0x1bc>
 80158f4:	1b40      	subs	r0, r0, r5
 80158f6:	6060      	str	r0, [r4, #4]
 80158f8:	6863      	ldr	r3, [r4, #4]
 80158fa:	6123      	str	r3, [r4, #16]
 80158fc:	2300      	movs	r3, #0
 80158fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015902:	e7a7      	b.n	8015854 <_printf_i+0x118>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	462a      	mov	r2, r5
 8015908:	4639      	mov	r1, r7
 801590a:	4630      	mov	r0, r6
 801590c:	47c0      	blx	r8
 801590e:	3001      	adds	r0, #1
 8015910:	d0aa      	beq.n	8015868 <_printf_i+0x12c>
 8015912:	6823      	ldr	r3, [r4, #0]
 8015914:	079b      	lsls	r3, r3, #30
 8015916:	d413      	bmi.n	8015940 <_printf_i+0x204>
 8015918:	68e0      	ldr	r0, [r4, #12]
 801591a:	9b03      	ldr	r3, [sp, #12]
 801591c:	4298      	cmp	r0, r3
 801591e:	bfb8      	it	lt
 8015920:	4618      	movlt	r0, r3
 8015922:	e7a3      	b.n	801586c <_printf_i+0x130>
 8015924:	2301      	movs	r3, #1
 8015926:	464a      	mov	r2, r9
 8015928:	4639      	mov	r1, r7
 801592a:	4630      	mov	r0, r6
 801592c:	47c0      	blx	r8
 801592e:	3001      	adds	r0, #1
 8015930:	d09a      	beq.n	8015868 <_printf_i+0x12c>
 8015932:	3501      	adds	r5, #1
 8015934:	68e3      	ldr	r3, [r4, #12]
 8015936:	9a03      	ldr	r2, [sp, #12]
 8015938:	1a9b      	subs	r3, r3, r2
 801593a:	42ab      	cmp	r3, r5
 801593c:	dcf2      	bgt.n	8015924 <_printf_i+0x1e8>
 801593e:	e7eb      	b.n	8015918 <_printf_i+0x1dc>
 8015940:	2500      	movs	r5, #0
 8015942:	f104 0919 	add.w	r9, r4, #25
 8015946:	e7f5      	b.n	8015934 <_printf_i+0x1f8>
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1ac      	bne.n	80158a6 <_printf_i+0x16a>
 801594c:	7803      	ldrb	r3, [r0, #0]
 801594e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015956:	e76c      	b.n	8015832 <_printf_i+0xf6>
 8015958:	08019d20 	.word	0x08019d20
 801595c:	08019d31 	.word	0x08019d31

08015960 <_scanf_float>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	469a      	mov	sl, r3
 8015966:	688b      	ldr	r3, [r1, #8]
 8015968:	4616      	mov	r6, r2
 801596a:	1e5a      	subs	r2, r3, #1
 801596c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015970:	b087      	sub	sp, #28
 8015972:	bf83      	ittte	hi
 8015974:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015978:	189b      	addhi	r3, r3, r2
 801597a:	9301      	strhi	r3, [sp, #4]
 801597c:	2300      	movls	r3, #0
 801597e:	bf86      	itte	hi
 8015980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015984:	608b      	strhi	r3, [r1, #8]
 8015986:	9301      	strls	r3, [sp, #4]
 8015988:	680b      	ldr	r3, [r1, #0]
 801598a:	4688      	mov	r8, r1
 801598c:	f04f 0b00 	mov.w	fp, #0
 8015990:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015994:	f848 3b1c 	str.w	r3, [r8], #28
 8015998:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801599c:	4607      	mov	r7, r0
 801599e:	460c      	mov	r4, r1
 80159a0:	4645      	mov	r5, r8
 80159a2:	465a      	mov	r2, fp
 80159a4:	46d9      	mov	r9, fp
 80159a6:	f8cd b008 	str.w	fp, [sp, #8]
 80159aa:	68a1      	ldr	r1, [r4, #8]
 80159ac:	b181      	cbz	r1, 80159d0 <_scanf_float+0x70>
 80159ae:	6833      	ldr	r3, [r6, #0]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	2b49      	cmp	r3, #73	; 0x49
 80159b4:	d071      	beq.n	8015a9a <_scanf_float+0x13a>
 80159b6:	d84d      	bhi.n	8015a54 <_scanf_float+0xf4>
 80159b8:	2b39      	cmp	r3, #57	; 0x39
 80159ba:	d840      	bhi.n	8015a3e <_scanf_float+0xde>
 80159bc:	2b31      	cmp	r3, #49	; 0x31
 80159be:	f080 8088 	bcs.w	8015ad2 <_scanf_float+0x172>
 80159c2:	2b2d      	cmp	r3, #45	; 0x2d
 80159c4:	f000 8090 	beq.w	8015ae8 <_scanf_float+0x188>
 80159c8:	d815      	bhi.n	80159f6 <_scanf_float+0x96>
 80159ca:	2b2b      	cmp	r3, #43	; 0x2b
 80159cc:	f000 808c 	beq.w	8015ae8 <_scanf_float+0x188>
 80159d0:	f1b9 0f00 	cmp.w	r9, #0
 80159d4:	d003      	beq.n	80159de <_scanf_float+0x7e>
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80159dc:	6023      	str	r3, [r4, #0]
 80159de:	3a01      	subs	r2, #1
 80159e0:	2a01      	cmp	r2, #1
 80159e2:	f200 80ea 	bhi.w	8015bba <_scanf_float+0x25a>
 80159e6:	4545      	cmp	r5, r8
 80159e8:	f200 80dc 	bhi.w	8015ba4 <_scanf_float+0x244>
 80159ec:	2601      	movs	r6, #1
 80159ee:	4630      	mov	r0, r6
 80159f0:	b007      	add	sp, #28
 80159f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f6:	2b2e      	cmp	r3, #46	; 0x2e
 80159f8:	f000 809f 	beq.w	8015b3a <_scanf_float+0x1da>
 80159fc:	2b30      	cmp	r3, #48	; 0x30
 80159fe:	d1e7      	bne.n	80159d0 <_scanf_float+0x70>
 8015a00:	6820      	ldr	r0, [r4, #0]
 8015a02:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015a06:	d064      	beq.n	8015ad2 <_scanf_float+0x172>
 8015a08:	9b01      	ldr	r3, [sp, #4]
 8015a0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015a0e:	6020      	str	r0, [r4, #0]
 8015a10:	f109 0901 	add.w	r9, r9, #1
 8015a14:	b11b      	cbz	r3, 8015a1e <_scanf_float+0xbe>
 8015a16:	3b01      	subs	r3, #1
 8015a18:	3101      	adds	r1, #1
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	60a1      	str	r1, [r4, #8]
 8015a1e:	68a3      	ldr	r3, [r4, #8]
 8015a20:	3b01      	subs	r3, #1
 8015a22:	60a3      	str	r3, [r4, #8]
 8015a24:	6923      	ldr	r3, [r4, #16]
 8015a26:	3301      	adds	r3, #1
 8015a28:	6123      	str	r3, [r4, #16]
 8015a2a:	6873      	ldr	r3, [r6, #4]
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	6073      	str	r3, [r6, #4]
 8015a32:	f340 80ac 	ble.w	8015b8e <_scanf_float+0x22e>
 8015a36:	6833      	ldr	r3, [r6, #0]
 8015a38:	3301      	adds	r3, #1
 8015a3a:	6033      	str	r3, [r6, #0]
 8015a3c:	e7b5      	b.n	80159aa <_scanf_float+0x4a>
 8015a3e:	2b45      	cmp	r3, #69	; 0x45
 8015a40:	f000 8085 	beq.w	8015b4e <_scanf_float+0x1ee>
 8015a44:	2b46      	cmp	r3, #70	; 0x46
 8015a46:	d06a      	beq.n	8015b1e <_scanf_float+0x1be>
 8015a48:	2b41      	cmp	r3, #65	; 0x41
 8015a4a:	d1c1      	bne.n	80159d0 <_scanf_float+0x70>
 8015a4c:	2a01      	cmp	r2, #1
 8015a4e:	d1bf      	bne.n	80159d0 <_scanf_float+0x70>
 8015a50:	2202      	movs	r2, #2
 8015a52:	e046      	b.n	8015ae2 <_scanf_float+0x182>
 8015a54:	2b65      	cmp	r3, #101	; 0x65
 8015a56:	d07a      	beq.n	8015b4e <_scanf_float+0x1ee>
 8015a58:	d818      	bhi.n	8015a8c <_scanf_float+0x12c>
 8015a5a:	2b54      	cmp	r3, #84	; 0x54
 8015a5c:	d066      	beq.n	8015b2c <_scanf_float+0x1cc>
 8015a5e:	d811      	bhi.n	8015a84 <_scanf_float+0x124>
 8015a60:	2b4e      	cmp	r3, #78	; 0x4e
 8015a62:	d1b5      	bne.n	80159d0 <_scanf_float+0x70>
 8015a64:	2a00      	cmp	r2, #0
 8015a66:	d146      	bne.n	8015af6 <_scanf_float+0x196>
 8015a68:	f1b9 0f00 	cmp.w	r9, #0
 8015a6c:	d145      	bne.n	8015afa <_scanf_float+0x19a>
 8015a6e:	6821      	ldr	r1, [r4, #0]
 8015a70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015a74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015a78:	d13f      	bne.n	8015afa <_scanf_float+0x19a>
 8015a7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015a7e:	6021      	str	r1, [r4, #0]
 8015a80:	2201      	movs	r2, #1
 8015a82:	e02e      	b.n	8015ae2 <_scanf_float+0x182>
 8015a84:	2b59      	cmp	r3, #89	; 0x59
 8015a86:	d01e      	beq.n	8015ac6 <_scanf_float+0x166>
 8015a88:	2b61      	cmp	r3, #97	; 0x61
 8015a8a:	e7de      	b.n	8015a4a <_scanf_float+0xea>
 8015a8c:	2b6e      	cmp	r3, #110	; 0x6e
 8015a8e:	d0e9      	beq.n	8015a64 <_scanf_float+0x104>
 8015a90:	d815      	bhi.n	8015abe <_scanf_float+0x15e>
 8015a92:	2b66      	cmp	r3, #102	; 0x66
 8015a94:	d043      	beq.n	8015b1e <_scanf_float+0x1be>
 8015a96:	2b69      	cmp	r3, #105	; 0x69
 8015a98:	d19a      	bne.n	80159d0 <_scanf_float+0x70>
 8015a9a:	f1bb 0f00 	cmp.w	fp, #0
 8015a9e:	d138      	bne.n	8015b12 <_scanf_float+0x1b2>
 8015aa0:	f1b9 0f00 	cmp.w	r9, #0
 8015aa4:	d197      	bne.n	80159d6 <_scanf_float+0x76>
 8015aa6:	6821      	ldr	r1, [r4, #0]
 8015aa8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015aac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ab0:	d195      	bne.n	80159de <_scanf_float+0x7e>
 8015ab2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ab6:	6021      	str	r1, [r4, #0]
 8015ab8:	f04f 0b01 	mov.w	fp, #1
 8015abc:	e011      	b.n	8015ae2 <_scanf_float+0x182>
 8015abe:	2b74      	cmp	r3, #116	; 0x74
 8015ac0:	d034      	beq.n	8015b2c <_scanf_float+0x1cc>
 8015ac2:	2b79      	cmp	r3, #121	; 0x79
 8015ac4:	d184      	bne.n	80159d0 <_scanf_float+0x70>
 8015ac6:	f1bb 0f07 	cmp.w	fp, #7
 8015aca:	d181      	bne.n	80159d0 <_scanf_float+0x70>
 8015acc:	f04f 0b08 	mov.w	fp, #8
 8015ad0:	e007      	b.n	8015ae2 <_scanf_float+0x182>
 8015ad2:	eb12 0f0b 	cmn.w	r2, fp
 8015ad6:	f47f af7b 	bne.w	80159d0 <_scanf_float+0x70>
 8015ada:	6821      	ldr	r1, [r4, #0]
 8015adc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015ae0:	6021      	str	r1, [r4, #0]
 8015ae2:	702b      	strb	r3, [r5, #0]
 8015ae4:	3501      	adds	r5, #1
 8015ae6:	e79a      	b.n	8015a1e <_scanf_float+0xbe>
 8015ae8:	6821      	ldr	r1, [r4, #0]
 8015aea:	0608      	lsls	r0, r1, #24
 8015aec:	f57f af70 	bpl.w	80159d0 <_scanf_float+0x70>
 8015af0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015af4:	e7f4      	b.n	8015ae0 <_scanf_float+0x180>
 8015af6:	2a02      	cmp	r2, #2
 8015af8:	d047      	beq.n	8015b8a <_scanf_float+0x22a>
 8015afa:	f1bb 0f01 	cmp.w	fp, #1
 8015afe:	d003      	beq.n	8015b08 <_scanf_float+0x1a8>
 8015b00:	f1bb 0f04 	cmp.w	fp, #4
 8015b04:	f47f af64 	bne.w	80159d0 <_scanf_float+0x70>
 8015b08:	f10b 0b01 	add.w	fp, fp, #1
 8015b0c:	fa5f fb8b 	uxtb.w	fp, fp
 8015b10:	e7e7      	b.n	8015ae2 <_scanf_float+0x182>
 8015b12:	f1bb 0f03 	cmp.w	fp, #3
 8015b16:	d0f7      	beq.n	8015b08 <_scanf_float+0x1a8>
 8015b18:	f1bb 0f05 	cmp.w	fp, #5
 8015b1c:	e7f2      	b.n	8015b04 <_scanf_float+0x1a4>
 8015b1e:	f1bb 0f02 	cmp.w	fp, #2
 8015b22:	f47f af55 	bne.w	80159d0 <_scanf_float+0x70>
 8015b26:	f04f 0b03 	mov.w	fp, #3
 8015b2a:	e7da      	b.n	8015ae2 <_scanf_float+0x182>
 8015b2c:	f1bb 0f06 	cmp.w	fp, #6
 8015b30:	f47f af4e 	bne.w	80159d0 <_scanf_float+0x70>
 8015b34:	f04f 0b07 	mov.w	fp, #7
 8015b38:	e7d3      	b.n	8015ae2 <_scanf_float+0x182>
 8015b3a:	6821      	ldr	r1, [r4, #0]
 8015b3c:	0588      	lsls	r0, r1, #22
 8015b3e:	f57f af47 	bpl.w	80159d0 <_scanf_float+0x70>
 8015b42:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015b46:	6021      	str	r1, [r4, #0]
 8015b48:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b4c:	e7c9      	b.n	8015ae2 <_scanf_float+0x182>
 8015b4e:	6821      	ldr	r1, [r4, #0]
 8015b50:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015b54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015b58:	d006      	beq.n	8015b68 <_scanf_float+0x208>
 8015b5a:	0548      	lsls	r0, r1, #21
 8015b5c:	f57f af38 	bpl.w	80159d0 <_scanf_float+0x70>
 8015b60:	f1b9 0f00 	cmp.w	r9, #0
 8015b64:	f43f af3b 	beq.w	80159de <_scanf_float+0x7e>
 8015b68:	0588      	lsls	r0, r1, #22
 8015b6a:	bf58      	it	pl
 8015b6c:	9802      	ldrpl	r0, [sp, #8]
 8015b6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015b72:	bf58      	it	pl
 8015b74:	eba9 0000 	subpl.w	r0, r9, r0
 8015b78:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015b7c:	bf58      	it	pl
 8015b7e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015b82:	6021      	str	r1, [r4, #0]
 8015b84:	f04f 0900 	mov.w	r9, #0
 8015b88:	e7ab      	b.n	8015ae2 <_scanf_float+0x182>
 8015b8a:	2203      	movs	r2, #3
 8015b8c:	e7a9      	b.n	8015ae2 <_scanf_float+0x182>
 8015b8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b92:	9205      	str	r2, [sp, #20]
 8015b94:	4631      	mov	r1, r6
 8015b96:	4638      	mov	r0, r7
 8015b98:	4798      	blx	r3
 8015b9a:	9a05      	ldr	r2, [sp, #20]
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f43f af04 	beq.w	80159aa <_scanf_float+0x4a>
 8015ba2:	e715      	b.n	80159d0 <_scanf_float+0x70>
 8015ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ba8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015bac:	4632      	mov	r2, r6
 8015bae:	4638      	mov	r0, r7
 8015bb0:	4798      	blx	r3
 8015bb2:	6923      	ldr	r3, [r4, #16]
 8015bb4:	3b01      	subs	r3, #1
 8015bb6:	6123      	str	r3, [r4, #16]
 8015bb8:	e715      	b.n	80159e6 <_scanf_float+0x86>
 8015bba:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015bbe:	2b06      	cmp	r3, #6
 8015bc0:	d80a      	bhi.n	8015bd8 <_scanf_float+0x278>
 8015bc2:	f1bb 0f02 	cmp.w	fp, #2
 8015bc6:	d968      	bls.n	8015c9a <_scanf_float+0x33a>
 8015bc8:	f1ab 0b03 	sub.w	fp, fp, #3
 8015bcc:	fa5f fb8b 	uxtb.w	fp, fp
 8015bd0:	eba5 0b0b 	sub.w	fp, r5, fp
 8015bd4:	455d      	cmp	r5, fp
 8015bd6:	d14b      	bne.n	8015c70 <_scanf_float+0x310>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	05da      	lsls	r2, r3, #23
 8015bdc:	d51f      	bpl.n	8015c1e <_scanf_float+0x2be>
 8015bde:	055b      	lsls	r3, r3, #21
 8015be0:	d468      	bmi.n	8015cb4 <_scanf_float+0x354>
 8015be2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015be6:	6923      	ldr	r3, [r4, #16]
 8015be8:	2965      	cmp	r1, #101	; 0x65
 8015bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8015bee:	f105 3bff 	add.w	fp, r5, #4294967295
 8015bf2:	6123      	str	r3, [r4, #16]
 8015bf4:	d00d      	beq.n	8015c12 <_scanf_float+0x2b2>
 8015bf6:	2945      	cmp	r1, #69	; 0x45
 8015bf8:	d00b      	beq.n	8015c12 <_scanf_float+0x2b2>
 8015bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bfe:	4632      	mov	r2, r6
 8015c00:	4638      	mov	r0, r7
 8015c02:	4798      	blx	r3
 8015c04:	6923      	ldr	r3, [r4, #16]
 8015c06:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015c10:	6123      	str	r3, [r4, #16]
 8015c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c16:	4632      	mov	r2, r6
 8015c18:	4638      	mov	r0, r7
 8015c1a:	4798      	blx	r3
 8015c1c:	465d      	mov	r5, fp
 8015c1e:	6826      	ldr	r6, [r4, #0]
 8015c20:	f016 0610 	ands.w	r6, r6, #16
 8015c24:	d17a      	bne.n	8015d1c <_scanf_float+0x3bc>
 8015c26:	702e      	strb	r6, [r5, #0]
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c32:	d142      	bne.n	8015cba <_scanf_float+0x35a>
 8015c34:	9b02      	ldr	r3, [sp, #8]
 8015c36:	eba9 0303 	sub.w	r3, r9, r3
 8015c3a:	425a      	negs	r2, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d149      	bne.n	8015cd4 <_scanf_float+0x374>
 8015c40:	2200      	movs	r2, #0
 8015c42:	4641      	mov	r1, r8
 8015c44:	4638      	mov	r0, r7
 8015c46:	f000 ff0b 	bl	8016a60 <_strtod_r>
 8015c4a:	6825      	ldr	r5, [r4, #0]
 8015c4c:	f8da 3000 	ldr.w	r3, [sl]
 8015c50:	f015 0f02 	tst.w	r5, #2
 8015c54:	f103 0204 	add.w	r2, r3, #4
 8015c58:	ec59 8b10 	vmov	r8, r9, d0
 8015c5c:	f8ca 2000 	str.w	r2, [sl]
 8015c60:	d043      	beq.n	8015cea <_scanf_float+0x38a>
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	e9c3 8900 	strd	r8, r9, [r3]
 8015c68:	68e3      	ldr	r3, [r4, #12]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	60e3      	str	r3, [r4, #12]
 8015c6e:	e6be      	b.n	80159ee <_scanf_float+0x8e>
 8015c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c78:	4632      	mov	r2, r6
 8015c7a:	4638      	mov	r0, r7
 8015c7c:	4798      	blx	r3
 8015c7e:	6923      	ldr	r3, [r4, #16]
 8015c80:	3b01      	subs	r3, #1
 8015c82:	6123      	str	r3, [r4, #16]
 8015c84:	e7a6      	b.n	8015bd4 <_scanf_float+0x274>
 8015c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c8a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c8e:	4632      	mov	r2, r6
 8015c90:	4638      	mov	r0, r7
 8015c92:	4798      	blx	r3
 8015c94:	6923      	ldr	r3, [r4, #16]
 8015c96:	3b01      	subs	r3, #1
 8015c98:	6123      	str	r3, [r4, #16]
 8015c9a:	4545      	cmp	r5, r8
 8015c9c:	d8f3      	bhi.n	8015c86 <_scanf_float+0x326>
 8015c9e:	e6a5      	b.n	80159ec <_scanf_float+0x8c>
 8015ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ca4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ca8:	4632      	mov	r2, r6
 8015caa:	4638      	mov	r0, r7
 8015cac:	4798      	blx	r3
 8015cae:	6923      	ldr	r3, [r4, #16]
 8015cb0:	3b01      	subs	r3, #1
 8015cb2:	6123      	str	r3, [r4, #16]
 8015cb4:	4545      	cmp	r5, r8
 8015cb6:	d8f3      	bhi.n	8015ca0 <_scanf_float+0x340>
 8015cb8:	e698      	b.n	80159ec <_scanf_float+0x8c>
 8015cba:	9b03      	ldr	r3, [sp, #12]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d0bf      	beq.n	8015c40 <_scanf_float+0x2e0>
 8015cc0:	9904      	ldr	r1, [sp, #16]
 8015cc2:	230a      	movs	r3, #10
 8015cc4:	4632      	mov	r2, r6
 8015cc6:	3101      	adds	r1, #1
 8015cc8:	4638      	mov	r0, r7
 8015cca:	f000 ff55 	bl	8016b78 <_strtol_r>
 8015cce:	9b03      	ldr	r3, [sp, #12]
 8015cd0:	9d04      	ldr	r5, [sp, #16]
 8015cd2:	1ac2      	subs	r2, r0, r3
 8015cd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015cd8:	429d      	cmp	r5, r3
 8015cda:	bf28      	it	cs
 8015cdc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015ce0:	490f      	ldr	r1, [pc, #60]	; (8015d20 <_scanf_float+0x3c0>)
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f000 f858 	bl	8015d98 <siprintf>
 8015ce8:	e7aa      	b.n	8015c40 <_scanf_float+0x2e0>
 8015cea:	f015 0504 	ands.w	r5, r5, #4
 8015cee:	d1b8      	bne.n	8015c62 <_scanf_float+0x302>
 8015cf0:	681f      	ldr	r7, [r3, #0]
 8015cf2:	ee10 2a10 	vmov	r2, s0
 8015cf6:	464b      	mov	r3, r9
 8015cf8:	ee10 0a10 	vmov	r0, s0
 8015cfc:	4649      	mov	r1, r9
 8015cfe:	f7ea ff2d 	bl	8000b5c <__aeabi_dcmpun>
 8015d02:	b128      	cbz	r0, 8015d10 <_scanf_float+0x3b0>
 8015d04:	4628      	mov	r0, r5
 8015d06:	f000 f80d 	bl	8015d24 <nanf>
 8015d0a:	ed87 0a00 	vstr	s0, [r7]
 8015d0e:	e7ab      	b.n	8015c68 <_scanf_float+0x308>
 8015d10:	4640      	mov	r0, r8
 8015d12:	4649      	mov	r1, r9
 8015d14:	f7ea ff80 	bl	8000c18 <__aeabi_d2f>
 8015d18:	6038      	str	r0, [r7, #0]
 8015d1a:	e7a5      	b.n	8015c68 <_scanf_float+0x308>
 8015d1c:	2600      	movs	r6, #0
 8015d1e:	e666      	b.n	80159ee <_scanf_float+0x8e>
 8015d20:	08019d42 	.word	0x08019d42

08015d24 <nanf>:
 8015d24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d2c <nanf+0x8>
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop
 8015d2c:	7fc00000 	.word	0x7fc00000

08015d30 <sniprintf>:
 8015d30:	b40c      	push	{r2, r3}
 8015d32:	b530      	push	{r4, r5, lr}
 8015d34:	4b17      	ldr	r3, [pc, #92]	; (8015d94 <sniprintf+0x64>)
 8015d36:	1e0c      	subs	r4, r1, #0
 8015d38:	b09d      	sub	sp, #116	; 0x74
 8015d3a:	681d      	ldr	r5, [r3, #0]
 8015d3c:	da08      	bge.n	8015d50 <sniprintf+0x20>
 8015d3e:	238b      	movs	r3, #139	; 0x8b
 8015d40:	602b      	str	r3, [r5, #0]
 8015d42:	f04f 30ff 	mov.w	r0, #4294967295
 8015d46:	b01d      	add	sp, #116	; 0x74
 8015d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d4c:	b002      	add	sp, #8
 8015d4e:	4770      	bx	lr
 8015d50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d58:	bf14      	ite	ne
 8015d5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d5e:	4623      	moveq	r3, r4
 8015d60:	9304      	str	r3, [sp, #16]
 8015d62:	9307      	str	r3, [sp, #28]
 8015d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d68:	9002      	str	r0, [sp, #8]
 8015d6a:	9006      	str	r0, [sp, #24]
 8015d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d72:	ab21      	add	r3, sp, #132	; 0x84
 8015d74:	a902      	add	r1, sp, #8
 8015d76:	4628      	mov	r0, r5
 8015d78:	9301      	str	r3, [sp, #4]
 8015d7a:	f002 fde7 	bl	801894c <_svfiprintf_r>
 8015d7e:	1c43      	adds	r3, r0, #1
 8015d80:	bfbc      	itt	lt
 8015d82:	238b      	movlt	r3, #139	; 0x8b
 8015d84:	602b      	strlt	r3, [r5, #0]
 8015d86:	2c00      	cmp	r4, #0
 8015d88:	d0dd      	beq.n	8015d46 <sniprintf+0x16>
 8015d8a:	9b02      	ldr	r3, [sp, #8]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	701a      	strb	r2, [r3, #0]
 8015d90:	e7d9      	b.n	8015d46 <sniprintf+0x16>
 8015d92:	bf00      	nop
 8015d94:	2000000c 	.word	0x2000000c

08015d98 <siprintf>:
 8015d98:	b40e      	push	{r1, r2, r3}
 8015d9a:	b500      	push	{lr}
 8015d9c:	b09c      	sub	sp, #112	; 0x70
 8015d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8015da0:	9002      	str	r0, [sp, #8]
 8015da2:	9006      	str	r0, [sp, #24]
 8015da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015da8:	4809      	ldr	r0, [pc, #36]	; (8015dd0 <siprintf+0x38>)
 8015daa:	9107      	str	r1, [sp, #28]
 8015dac:	9104      	str	r1, [sp, #16]
 8015dae:	4909      	ldr	r1, [pc, #36]	; (8015dd4 <siprintf+0x3c>)
 8015db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015db4:	9105      	str	r1, [sp, #20]
 8015db6:	6800      	ldr	r0, [r0, #0]
 8015db8:	9301      	str	r3, [sp, #4]
 8015dba:	a902      	add	r1, sp, #8
 8015dbc:	f002 fdc6 	bl	801894c <_svfiprintf_r>
 8015dc0:	9b02      	ldr	r3, [sp, #8]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	701a      	strb	r2, [r3, #0]
 8015dc6:	b01c      	add	sp, #112	; 0x70
 8015dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dcc:	b003      	add	sp, #12
 8015dce:	4770      	bx	lr
 8015dd0:	2000000c 	.word	0x2000000c
 8015dd4:	ffff0208 	.word	0xffff0208

08015dd8 <siscanf>:
 8015dd8:	b40e      	push	{r1, r2, r3}
 8015dda:	b530      	push	{r4, r5, lr}
 8015ddc:	b09c      	sub	sp, #112	; 0x70
 8015dde:	ac1f      	add	r4, sp, #124	; 0x7c
 8015de0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015de4:	f854 5b04 	ldr.w	r5, [r4], #4
 8015de8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015dec:	9002      	str	r0, [sp, #8]
 8015dee:	9006      	str	r0, [sp, #24]
 8015df0:	f7ea fa06 	bl	8000200 <strlen>
 8015df4:	4b0b      	ldr	r3, [pc, #44]	; (8015e24 <siscanf+0x4c>)
 8015df6:	9003      	str	r0, [sp, #12]
 8015df8:	9007      	str	r0, [sp, #28]
 8015dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8015dfc:	480a      	ldr	r0, [pc, #40]	; (8015e28 <siscanf+0x50>)
 8015dfe:	9401      	str	r4, [sp, #4]
 8015e00:	2300      	movs	r3, #0
 8015e02:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e04:	9314      	str	r3, [sp, #80]	; 0x50
 8015e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e0e:	462a      	mov	r2, r5
 8015e10:	4623      	mov	r3, r4
 8015e12:	a902      	add	r1, sp, #8
 8015e14:	6800      	ldr	r0, [r0, #0]
 8015e16:	f002 feeb 	bl	8018bf0 <__ssvfiscanf_r>
 8015e1a:	b01c      	add	sp, #112	; 0x70
 8015e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e20:	b003      	add	sp, #12
 8015e22:	4770      	bx	lr
 8015e24:	08015e2d 	.word	0x08015e2d
 8015e28:	2000000c 	.word	0x2000000c

08015e2c <__seofread>:
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	4770      	bx	lr

08015e30 <strcpy>:
 8015e30:	4603      	mov	r3, r0
 8015e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e36:	f803 2b01 	strb.w	r2, [r3], #1
 8015e3a:	2a00      	cmp	r2, #0
 8015e3c:	d1f9      	bne.n	8015e32 <strcpy+0x2>
 8015e3e:	4770      	bx	lr

08015e40 <sulp>:
 8015e40:	b570      	push	{r4, r5, r6, lr}
 8015e42:	4604      	mov	r4, r0
 8015e44:	460d      	mov	r5, r1
 8015e46:	ec45 4b10 	vmov	d0, r4, r5
 8015e4a:	4616      	mov	r6, r2
 8015e4c:	f002 fb3a 	bl	80184c4 <__ulp>
 8015e50:	ec51 0b10 	vmov	r0, r1, d0
 8015e54:	b17e      	cbz	r6, 8015e76 <sulp+0x36>
 8015e56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	dd09      	ble.n	8015e76 <sulp+0x36>
 8015e62:	051b      	lsls	r3, r3, #20
 8015e64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e68:	2400      	movs	r4, #0
 8015e6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e6e:	4622      	mov	r2, r4
 8015e70:	462b      	mov	r3, r5
 8015e72:	f7ea fbd9 	bl	8000628 <__aeabi_dmul>
 8015e76:	bd70      	pop	{r4, r5, r6, pc}

08015e78 <_strtod_l>:
 8015e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e7c:	461f      	mov	r7, r3
 8015e7e:	b0a1      	sub	sp, #132	; 0x84
 8015e80:	2300      	movs	r3, #0
 8015e82:	4681      	mov	r9, r0
 8015e84:	4638      	mov	r0, r7
 8015e86:	460e      	mov	r6, r1
 8015e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8015e8c:	f002 f824 	bl	8017ed8 <__localeconv_l>
 8015e90:	4680      	mov	r8, r0
 8015e92:	6800      	ldr	r0, [r0, #0]
 8015e94:	f7ea f9b4 	bl	8000200 <strlen>
 8015e98:	f04f 0a00 	mov.w	sl, #0
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	f04f 0b00 	mov.w	fp, #0
 8015ea2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ea6:	781a      	ldrb	r2, [r3, #0]
 8015ea8:	2a0d      	cmp	r2, #13
 8015eaa:	d832      	bhi.n	8015f12 <_strtod_l+0x9a>
 8015eac:	2a09      	cmp	r2, #9
 8015eae:	d236      	bcs.n	8015f1e <_strtod_l+0xa6>
 8015eb0:	2a00      	cmp	r2, #0
 8015eb2:	d03e      	beq.n	8015f32 <_strtod_l+0xba>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8015eb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015eba:	782b      	ldrb	r3, [r5, #0]
 8015ebc:	2b30      	cmp	r3, #48	; 0x30
 8015ebe:	f040 80ac 	bne.w	801601a <_strtod_l+0x1a2>
 8015ec2:	786b      	ldrb	r3, [r5, #1]
 8015ec4:	2b58      	cmp	r3, #88	; 0x58
 8015ec6:	d001      	beq.n	8015ecc <_strtod_l+0x54>
 8015ec8:	2b78      	cmp	r3, #120	; 0x78
 8015eca:	d167      	bne.n	8015f9c <_strtod_l+0x124>
 8015ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ece:	9301      	str	r3, [sp, #4]
 8015ed0:	ab1c      	add	r3, sp, #112	; 0x70
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	9702      	str	r7, [sp, #8]
 8015ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8015ed8:	4a88      	ldr	r2, [pc, #544]	; (80160fc <_strtod_l+0x284>)
 8015eda:	a91b      	add	r1, sp, #108	; 0x6c
 8015edc:	4648      	mov	r0, r9
 8015ede:	f001 fd12 	bl	8017906 <__gethex>
 8015ee2:	f010 0407 	ands.w	r4, r0, #7
 8015ee6:	4606      	mov	r6, r0
 8015ee8:	d005      	beq.n	8015ef6 <_strtod_l+0x7e>
 8015eea:	2c06      	cmp	r4, #6
 8015eec:	d12b      	bne.n	8015f46 <_strtod_l+0xce>
 8015eee:	3501      	adds	r5, #1
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	951b      	str	r5, [sp, #108]	; 0x6c
 8015ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	f040 859a 	bne.w	8016a32 <_strtod_l+0xbba>
 8015efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f00:	b1e3      	cbz	r3, 8015f3c <_strtod_l+0xc4>
 8015f02:	4652      	mov	r2, sl
 8015f04:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015f08:	ec43 2b10 	vmov	d0, r2, r3
 8015f0c:	b021      	add	sp, #132	; 0x84
 8015f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f12:	2a2b      	cmp	r2, #43	; 0x2b
 8015f14:	d015      	beq.n	8015f42 <_strtod_l+0xca>
 8015f16:	2a2d      	cmp	r2, #45	; 0x2d
 8015f18:	d004      	beq.n	8015f24 <_strtod_l+0xac>
 8015f1a:	2a20      	cmp	r2, #32
 8015f1c:	d1ca      	bne.n	8015eb4 <_strtod_l+0x3c>
 8015f1e:	3301      	adds	r3, #1
 8015f20:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f22:	e7bf      	b.n	8015ea4 <_strtod_l+0x2c>
 8015f24:	2201      	movs	r2, #1
 8015f26:	920d      	str	r2, [sp, #52]	; 0x34
 8015f28:	1c5a      	adds	r2, r3, #1
 8015f2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f2c:	785b      	ldrb	r3, [r3, #1]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d1c2      	bne.n	8015eb8 <_strtod_l+0x40>
 8015f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f34:	961b      	str	r6, [sp, #108]	; 0x6c
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f040 8579 	bne.w	8016a2e <_strtod_l+0xbb6>
 8015f3c:	4652      	mov	r2, sl
 8015f3e:	465b      	mov	r3, fp
 8015f40:	e7e2      	b.n	8015f08 <_strtod_l+0x90>
 8015f42:	2200      	movs	r2, #0
 8015f44:	e7ef      	b.n	8015f26 <_strtod_l+0xae>
 8015f46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f48:	b13a      	cbz	r2, 8015f5a <_strtod_l+0xe2>
 8015f4a:	2135      	movs	r1, #53	; 0x35
 8015f4c:	a81e      	add	r0, sp, #120	; 0x78
 8015f4e:	f002 fbb1 	bl	80186b4 <__copybits>
 8015f52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f54:	4648      	mov	r0, r9
 8015f56:	f002 f81d 	bl	8017f94 <_Bfree>
 8015f5a:	3c01      	subs	r4, #1
 8015f5c:	2c04      	cmp	r4, #4
 8015f5e:	d806      	bhi.n	8015f6e <_strtod_l+0xf6>
 8015f60:	e8df f004 	tbb	[pc, r4]
 8015f64:	1714030a 	.word	0x1714030a
 8015f68:	0a          	.byte	0x0a
 8015f69:	00          	.byte	0x00
 8015f6a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015f6e:	0730      	lsls	r0, r6, #28
 8015f70:	d5c1      	bpl.n	8015ef6 <_strtod_l+0x7e>
 8015f72:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f76:	e7be      	b.n	8015ef6 <_strtod_l+0x7e>
 8015f78:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015f7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015f7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f82:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f86:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015f8a:	e7f0      	b.n	8015f6e <_strtod_l+0xf6>
 8015f8c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016100 <_strtod_l+0x288>
 8015f90:	e7ed      	b.n	8015f6e <_strtod_l+0xf6>
 8015f92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015f96:	f04f 3aff 	mov.w	sl, #4294967295
 8015f9a:	e7e8      	b.n	8015f6e <_strtod_l+0xf6>
 8015f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f9e:	1c5a      	adds	r2, r3, #1
 8015fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015fa2:	785b      	ldrb	r3, [r3, #1]
 8015fa4:	2b30      	cmp	r3, #48	; 0x30
 8015fa6:	d0f9      	beq.n	8015f9c <_strtod_l+0x124>
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d0a4      	beq.n	8015ef6 <_strtod_l+0x7e>
 8015fac:	2301      	movs	r3, #1
 8015fae:	2500      	movs	r5, #0
 8015fb0:	9306      	str	r3, [sp, #24]
 8015fb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fb4:	9308      	str	r3, [sp, #32]
 8015fb6:	9507      	str	r5, [sp, #28]
 8015fb8:	9505      	str	r5, [sp, #20]
 8015fba:	220a      	movs	r2, #10
 8015fbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015fbe:	7807      	ldrb	r7, [r0, #0]
 8015fc0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015fc4:	b2d9      	uxtb	r1, r3
 8015fc6:	2909      	cmp	r1, #9
 8015fc8:	d929      	bls.n	801601e <_strtod_l+0x1a6>
 8015fca:	4622      	mov	r2, r4
 8015fcc:	f8d8 1000 	ldr.w	r1, [r8]
 8015fd0:	f003 f8f8 	bl	80191c4 <strncmp>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d031      	beq.n	801603c <_strtod_l+0x1c4>
 8015fd8:	2000      	movs	r0, #0
 8015fda:	9c05      	ldr	r4, [sp, #20]
 8015fdc:	9004      	str	r0, [sp, #16]
 8015fde:	463b      	mov	r3, r7
 8015fe0:	4602      	mov	r2, r0
 8015fe2:	2b65      	cmp	r3, #101	; 0x65
 8015fe4:	d001      	beq.n	8015fea <_strtod_l+0x172>
 8015fe6:	2b45      	cmp	r3, #69	; 0x45
 8015fe8:	d114      	bne.n	8016014 <_strtod_l+0x19c>
 8015fea:	b924      	cbnz	r4, 8015ff6 <_strtod_l+0x17e>
 8015fec:	b910      	cbnz	r0, 8015ff4 <_strtod_l+0x17c>
 8015fee:	9b06      	ldr	r3, [sp, #24]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d09e      	beq.n	8015f32 <_strtod_l+0xba>
 8015ff4:	2400      	movs	r4, #0
 8015ff6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015ff8:	1c73      	adds	r3, r6, #1
 8015ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8015ffc:	7873      	ldrb	r3, [r6, #1]
 8015ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8016000:	d078      	beq.n	80160f4 <_strtod_l+0x27c>
 8016002:	2b2d      	cmp	r3, #45	; 0x2d
 8016004:	d070      	beq.n	80160e8 <_strtod_l+0x270>
 8016006:	f04f 0c00 	mov.w	ip, #0
 801600a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801600e:	2f09      	cmp	r7, #9
 8016010:	d97c      	bls.n	801610c <_strtod_l+0x294>
 8016012:	961b      	str	r6, [sp, #108]	; 0x6c
 8016014:	f04f 0e00 	mov.w	lr, #0
 8016018:	e09a      	b.n	8016150 <_strtod_l+0x2d8>
 801601a:	2300      	movs	r3, #0
 801601c:	e7c7      	b.n	8015fae <_strtod_l+0x136>
 801601e:	9905      	ldr	r1, [sp, #20]
 8016020:	2908      	cmp	r1, #8
 8016022:	bfdd      	ittte	le
 8016024:	9907      	ldrle	r1, [sp, #28]
 8016026:	fb02 3301 	mlale	r3, r2, r1, r3
 801602a:	9307      	strle	r3, [sp, #28]
 801602c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016030:	9b05      	ldr	r3, [sp, #20]
 8016032:	3001      	adds	r0, #1
 8016034:	3301      	adds	r3, #1
 8016036:	9305      	str	r3, [sp, #20]
 8016038:	901b      	str	r0, [sp, #108]	; 0x6c
 801603a:	e7bf      	b.n	8015fbc <_strtod_l+0x144>
 801603c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801603e:	191a      	adds	r2, r3, r4
 8016040:	921b      	str	r2, [sp, #108]	; 0x6c
 8016042:	9a05      	ldr	r2, [sp, #20]
 8016044:	5d1b      	ldrb	r3, [r3, r4]
 8016046:	2a00      	cmp	r2, #0
 8016048:	d037      	beq.n	80160ba <_strtod_l+0x242>
 801604a:	9c05      	ldr	r4, [sp, #20]
 801604c:	4602      	mov	r2, r0
 801604e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016052:	2909      	cmp	r1, #9
 8016054:	d913      	bls.n	801607e <_strtod_l+0x206>
 8016056:	2101      	movs	r1, #1
 8016058:	9104      	str	r1, [sp, #16]
 801605a:	e7c2      	b.n	8015fe2 <_strtod_l+0x16a>
 801605c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801605e:	1c5a      	adds	r2, r3, #1
 8016060:	921b      	str	r2, [sp, #108]	; 0x6c
 8016062:	785b      	ldrb	r3, [r3, #1]
 8016064:	3001      	adds	r0, #1
 8016066:	2b30      	cmp	r3, #48	; 0x30
 8016068:	d0f8      	beq.n	801605c <_strtod_l+0x1e4>
 801606a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801606e:	2a08      	cmp	r2, #8
 8016070:	f200 84e4 	bhi.w	8016a3c <_strtod_l+0xbc4>
 8016074:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016076:	9208      	str	r2, [sp, #32]
 8016078:	4602      	mov	r2, r0
 801607a:	2000      	movs	r0, #0
 801607c:	4604      	mov	r4, r0
 801607e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016082:	f100 0101 	add.w	r1, r0, #1
 8016086:	d012      	beq.n	80160ae <_strtod_l+0x236>
 8016088:	440a      	add	r2, r1
 801608a:	eb00 0c04 	add.w	ip, r0, r4
 801608e:	4621      	mov	r1, r4
 8016090:	270a      	movs	r7, #10
 8016092:	458c      	cmp	ip, r1
 8016094:	d113      	bne.n	80160be <_strtod_l+0x246>
 8016096:	1821      	adds	r1, r4, r0
 8016098:	2908      	cmp	r1, #8
 801609a:	f104 0401 	add.w	r4, r4, #1
 801609e:	4404      	add	r4, r0
 80160a0:	dc19      	bgt.n	80160d6 <_strtod_l+0x25e>
 80160a2:	9b07      	ldr	r3, [sp, #28]
 80160a4:	210a      	movs	r1, #10
 80160a6:	fb01 e303 	mla	r3, r1, r3, lr
 80160aa:	9307      	str	r3, [sp, #28]
 80160ac:	2100      	movs	r1, #0
 80160ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160b0:	1c58      	adds	r0, r3, #1
 80160b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80160b4:	785b      	ldrb	r3, [r3, #1]
 80160b6:	4608      	mov	r0, r1
 80160b8:	e7c9      	b.n	801604e <_strtod_l+0x1d6>
 80160ba:	9805      	ldr	r0, [sp, #20]
 80160bc:	e7d3      	b.n	8016066 <_strtod_l+0x1ee>
 80160be:	2908      	cmp	r1, #8
 80160c0:	f101 0101 	add.w	r1, r1, #1
 80160c4:	dc03      	bgt.n	80160ce <_strtod_l+0x256>
 80160c6:	9b07      	ldr	r3, [sp, #28]
 80160c8:	437b      	muls	r3, r7
 80160ca:	9307      	str	r3, [sp, #28]
 80160cc:	e7e1      	b.n	8016092 <_strtod_l+0x21a>
 80160ce:	2910      	cmp	r1, #16
 80160d0:	bfd8      	it	le
 80160d2:	437d      	mulle	r5, r7
 80160d4:	e7dd      	b.n	8016092 <_strtod_l+0x21a>
 80160d6:	2c10      	cmp	r4, #16
 80160d8:	bfdc      	itt	le
 80160da:	210a      	movle	r1, #10
 80160dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80160e0:	e7e4      	b.n	80160ac <_strtod_l+0x234>
 80160e2:	2301      	movs	r3, #1
 80160e4:	9304      	str	r3, [sp, #16]
 80160e6:	e781      	b.n	8015fec <_strtod_l+0x174>
 80160e8:	f04f 0c01 	mov.w	ip, #1
 80160ec:	1cb3      	adds	r3, r6, #2
 80160ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80160f0:	78b3      	ldrb	r3, [r6, #2]
 80160f2:	e78a      	b.n	801600a <_strtod_l+0x192>
 80160f4:	f04f 0c00 	mov.w	ip, #0
 80160f8:	e7f8      	b.n	80160ec <_strtod_l+0x274>
 80160fa:	bf00      	nop
 80160fc:	08019d48 	.word	0x08019d48
 8016100:	7ff00000 	.word	0x7ff00000
 8016104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016106:	1c5f      	adds	r7, r3, #1
 8016108:	971b      	str	r7, [sp, #108]	; 0x6c
 801610a:	785b      	ldrb	r3, [r3, #1]
 801610c:	2b30      	cmp	r3, #48	; 0x30
 801610e:	d0f9      	beq.n	8016104 <_strtod_l+0x28c>
 8016110:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016114:	2f08      	cmp	r7, #8
 8016116:	f63f af7d 	bhi.w	8016014 <_strtod_l+0x19c>
 801611a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801611e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016120:	930a      	str	r3, [sp, #40]	; 0x28
 8016122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016124:	1c5f      	adds	r7, r3, #1
 8016126:	971b      	str	r7, [sp, #108]	; 0x6c
 8016128:	785b      	ldrb	r3, [r3, #1]
 801612a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801612e:	f1b8 0f09 	cmp.w	r8, #9
 8016132:	d937      	bls.n	80161a4 <_strtod_l+0x32c>
 8016134:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016136:	1a7f      	subs	r7, r7, r1
 8016138:	2f08      	cmp	r7, #8
 801613a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801613e:	dc37      	bgt.n	80161b0 <_strtod_l+0x338>
 8016140:	45be      	cmp	lr, r7
 8016142:	bfa8      	it	ge
 8016144:	46be      	movge	lr, r7
 8016146:	f1bc 0f00 	cmp.w	ip, #0
 801614a:	d001      	beq.n	8016150 <_strtod_l+0x2d8>
 801614c:	f1ce 0e00 	rsb	lr, lr, #0
 8016150:	2c00      	cmp	r4, #0
 8016152:	d151      	bne.n	80161f8 <_strtod_l+0x380>
 8016154:	2800      	cmp	r0, #0
 8016156:	f47f aece 	bne.w	8015ef6 <_strtod_l+0x7e>
 801615a:	9a06      	ldr	r2, [sp, #24]
 801615c:	2a00      	cmp	r2, #0
 801615e:	f47f aeca 	bne.w	8015ef6 <_strtod_l+0x7e>
 8016162:	9a04      	ldr	r2, [sp, #16]
 8016164:	2a00      	cmp	r2, #0
 8016166:	f47f aee4 	bne.w	8015f32 <_strtod_l+0xba>
 801616a:	2b4e      	cmp	r3, #78	; 0x4e
 801616c:	d027      	beq.n	80161be <_strtod_l+0x346>
 801616e:	dc21      	bgt.n	80161b4 <_strtod_l+0x33c>
 8016170:	2b49      	cmp	r3, #73	; 0x49
 8016172:	f47f aede 	bne.w	8015f32 <_strtod_l+0xba>
 8016176:	49a0      	ldr	r1, [pc, #640]	; (80163f8 <_strtod_l+0x580>)
 8016178:	a81b      	add	r0, sp, #108	; 0x6c
 801617a:	f001 fdf7 	bl	8017d6c <__match>
 801617e:	2800      	cmp	r0, #0
 8016180:	f43f aed7 	beq.w	8015f32 <_strtod_l+0xba>
 8016184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016186:	499d      	ldr	r1, [pc, #628]	; (80163fc <_strtod_l+0x584>)
 8016188:	3b01      	subs	r3, #1
 801618a:	a81b      	add	r0, sp, #108	; 0x6c
 801618c:	931b      	str	r3, [sp, #108]	; 0x6c
 801618e:	f001 fded 	bl	8017d6c <__match>
 8016192:	b910      	cbnz	r0, 801619a <_strtod_l+0x322>
 8016194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016196:	3301      	adds	r3, #1
 8016198:	931b      	str	r3, [sp, #108]	; 0x6c
 801619a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016410 <_strtod_l+0x598>
 801619e:	f04f 0a00 	mov.w	sl, #0
 80161a2:	e6a8      	b.n	8015ef6 <_strtod_l+0x7e>
 80161a4:	210a      	movs	r1, #10
 80161a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80161aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80161ae:	e7b8      	b.n	8016122 <_strtod_l+0x2aa>
 80161b0:	46be      	mov	lr, r7
 80161b2:	e7c8      	b.n	8016146 <_strtod_l+0x2ce>
 80161b4:	2b69      	cmp	r3, #105	; 0x69
 80161b6:	d0de      	beq.n	8016176 <_strtod_l+0x2fe>
 80161b8:	2b6e      	cmp	r3, #110	; 0x6e
 80161ba:	f47f aeba 	bne.w	8015f32 <_strtod_l+0xba>
 80161be:	4990      	ldr	r1, [pc, #576]	; (8016400 <_strtod_l+0x588>)
 80161c0:	a81b      	add	r0, sp, #108	; 0x6c
 80161c2:	f001 fdd3 	bl	8017d6c <__match>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	f43f aeb3 	beq.w	8015f32 <_strtod_l+0xba>
 80161cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	2b28      	cmp	r3, #40	; 0x28
 80161d2:	d10e      	bne.n	80161f2 <_strtod_l+0x37a>
 80161d4:	aa1e      	add	r2, sp, #120	; 0x78
 80161d6:	498b      	ldr	r1, [pc, #556]	; (8016404 <_strtod_l+0x58c>)
 80161d8:	a81b      	add	r0, sp, #108	; 0x6c
 80161da:	f001 fddb 	bl	8017d94 <__hexnan>
 80161de:	2805      	cmp	r0, #5
 80161e0:	d107      	bne.n	80161f2 <_strtod_l+0x37a>
 80161e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80161e4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80161e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80161ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80161f0:	e681      	b.n	8015ef6 <_strtod_l+0x7e>
 80161f2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016418 <_strtod_l+0x5a0>
 80161f6:	e7d2      	b.n	801619e <_strtod_l+0x326>
 80161f8:	ebae 0302 	sub.w	r3, lr, r2
 80161fc:	9306      	str	r3, [sp, #24]
 80161fe:	9b05      	ldr	r3, [sp, #20]
 8016200:	9807      	ldr	r0, [sp, #28]
 8016202:	2b00      	cmp	r3, #0
 8016204:	bf08      	it	eq
 8016206:	4623      	moveq	r3, r4
 8016208:	2c10      	cmp	r4, #16
 801620a:	9305      	str	r3, [sp, #20]
 801620c:	46a0      	mov	r8, r4
 801620e:	bfa8      	it	ge
 8016210:	f04f 0810 	movge.w	r8, #16
 8016214:	f7ea f98e 	bl	8000534 <__aeabi_ui2d>
 8016218:	2c09      	cmp	r4, #9
 801621a:	4682      	mov	sl, r0
 801621c:	468b      	mov	fp, r1
 801621e:	dc13      	bgt.n	8016248 <_strtod_l+0x3d0>
 8016220:	9b06      	ldr	r3, [sp, #24]
 8016222:	2b00      	cmp	r3, #0
 8016224:	f43f ae67 	beq.w	8015ef6 <_strtod_l+0x7e>
 8016228:	9b06      	ldr	r3, [sp, #24]
 801622a:	dd7a      	ble.n	8016322 <_strtod_l+0x4aa>
 801622c:	2b16      	cmp	r3, #22
 801622e:	dc61      	bgt.n	80162f4 <_strtod_l+0x47c>
 8016230:	4a75      	ldr	r2, [pc, #468]	; (8016408 <_strtod_l+0x590>)
 8016232:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016236:	e9de 0100 	ldrd	r0, r1, [lr]
 801623a:	4652      	mov	r2, sl
 801623c:	465b      	mov	r3, fp
 801623e:	f7ea f9f3 	bl	8000628 <__aeabi_dmul>
 8016242:	4682      	mov	sl, r0
 8016244:	468b      	mov	fp, r1
 8016246:	e656      	b.n	8015ef6 <_strtod_l+0x7e>
 8016248:	4b6f      	ldr	r3, [pc, #444]	; (8016408 <_strtod_l+0x590>)
 801624a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801624e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016252:	f7ea f9e9 	bl	8000628 <__aeabi_dmul>
 8016256:	4606      	mov	r6, r0
 8016258:	4628      	mov	r0, r5
 801625a:	460f      	mov	r7, r1
 801625c:	f7ea f96a 	bl	8000534 <__aeabi_ui2d>
 8016260:	4602      	mov	r2, r0
 8016262:	460b      	mov	r3, r1
 8016264:	4630      	mov	r0, r6
 8016266:	4639      	mov	r1, r7
 8016268:	f7ea f828 	bl	80002bc <__adddf3>
 801626c:	2c0f      	cmp	r4, #15
 801626e:	4682      	mov	sl, r0
 8016270:	468b      	mov	fp, r1
 8016272:	ddd5      	ble.n	8016220 <_strtod_l+0x3a8>
 8016274:	9b06      	ldr	r3, [sp, #24]
 8016276:	eba4 0808 	sub.w	r8, r4, r8
 801627a:	4498      	add	r8, r3
 801627c:	f1b8 0f00 	cmp.w	r8, #0
 8016280:	f340 8096 	ble.w	80163b0 <_strtod_l+0x538>
 8016284:	f018 030f 	ands.w	r3, r8, #15
 8016288:	d00a      	beq.n	80162a0 <_strtod_l+0x428>
 801628a:	495f      	ldr	r1, [pc, #380]	; (8016408 <_strtod_l+0x590>)
 801628c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016290:	4652      	mov	r2, sl
 8016292:	465b      	mov	r3, fp
 8016294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016298:	f7ea f9c6 	bl	8000628 <__aeabi_dmul>
 801629c:	4682      	mov	sl, r0
 801629e:	468b      	mov	fp, r1
 80162a0:	f038 080f 	bics.w	r8, r8, #15
 80162a4:	d073      	beq.n	801638e <_strtod_l+0x516>
 80162a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80162aa:	dd47      	ble.n	801633c <_strtod_l+0x4c4>
 80162ac:	2400      	movs	r4, #0
 80162ae:	46a0      	mov	r8, r4
 80162b0:	9407      	str	r4, [sp, #28]
 80162b2:	9405      	str	r4, [sp, #20]
 80162b4:	2322      	movs	r3, #34	; 0x22
 80162b6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016410 <_strtod_l+0x598>
 80162ba:	f8c9 3000 	str.w	r3, [r9]
 80162be:	f04f 0a00 	mov.w	sl, #0
 80162c2:	9b07      	ldr	r3, [sp, #28]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f43f ae16 	beq.w	8015ef6 <_strtod_l+0x7e>
 80162ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80162cc:	4648      	mov	r0, r9
 80162ce:	f001 fe61 	bl	8017f94 <_Bfree>
 80162d2:	9905      	ldr	r1, [sp, #20]
 80162d4:	4648      	mov	r0, r9
 80162d6:	f001 fe5d 	bl	8017f94 <_Bfree>
 80162da:	4641      	mov	r1, r8
 80162dc:	4648      	mov	r0, r9
 80162de:	f001 fe59 	bl	8017f94 <_Bfree>
 80162e2:	9907      	ldr	r1, [sp, #28]
 80162e4:	4648      	mov	r0, r9
 80162e6:	f001 fe55 	bl	8017f94 <_Bfree>
 80162ea:	4621      	mov	r1, r4
 80162ec:	4648      	mov	r0, r9
 80162ee:	f001 fe51 	bl	8017f94 <_Bfree>
 80162f2:	e600      	b.n	8015ef6 <_strtod_l+0x7e>
 80162f4:	9a06      	ldr	r2, [sp, #24]
 80162f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80162fa:	4293      	cmp	r3, r2
 80162fc:	dbba      	blt.n	8016274 <_strtod_l+0x3fc>
 80162fe:	4d42      	ldr	r5, [pc, #264]	; (8016408 <_strtod_l+0x590>)
 8016300:	f1c4 040f 	rsb	r4, r4, #15
 8016304:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016308:	4652      	mov	r2, sl
 801630a:	465b      	mov	r3, fp
 801630c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016310:	f7ea f98a 	bl	8000628 <__aeabi_dmul>
 8016314:	9b06      	ldr	r3, [sp, #24]
 8016316:	1b1c      	subs	r4, r3, r4
 8016318:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801631c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016320:	e78d      	b.n	801623e <_strtod_l+0x3c6>
 8016322:	f113 0f16 	cmn.w	r3, #22
 8016326:	dba5      	blt.n	8016274 <_strtod_l+0x3fc>
 8016328:	4a37      	ldr	r2, [pc, #220]	; (8016408 <_strtod_l+0x590>)
 801632a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801632e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016332:	4650      	mov	r0, sl
 8016334:	4659      	mov	r1, fp
 8016336:	f7ea faa1 	bl	800087c <__aeabi_ddiv>
 801633a:	e782      	b.n	8016242 <_strtod_l+0x3ca>
 801633c:	2300      	movs	r3, #0
 801633e:	4e33      	ldr	r6, [pc, #204]	; (801640c <_strtod_l+0x594>)
 8016340:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016344:	4650      	mov	r0, sl
 8016346:	4659      	mov	r1, fp
 8016348:	461d      	mov	r5, r3
 801634a:	f1b8 0f01 	cmp.w	r8, #1
 801634e:	dc21      	bgt.n	8016394 <_strtod_l+0x51c>
 8016350:	b10b      	cbz	r3, 8016356 <_strtod_l+0x4de>
 8016352:	4682      	mov	sl, r0
 8016354:	468b      	mov	fp, r1
 8016356:	4b2d      	ldr	r3, [pc, #180]	; (801640c <_strtod_l+0x594>)
 8016358:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801635c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016360:	4652      	mov	r2, sl
 8016362:	465b      	mov	r3, fp
 8016364:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016368:	f7ea f95e 	bl	8000628 <__aeabi_dmul>
 801636c:	4b28      	ldr	r3, [pc, #160]	; (8016410 <_strtod_l+0x598>)
 801636e:	460a      	mov	r2, r1
 8016370:	400b      	ands	r3, r1
 8016372:	4928      	ldr	r1, [pc, #160]	; (8016414 <_strtod_l+0x59c>)
 8016374:	428b      	cmp	r3, r1
 8016376:	4682      	mov	sl, r0
 8016378:	d898      	bhi.n	80162ac <_strtod_l+0x434>
 801637a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801637e:	428b      	cmp	r3, r1
 8016380:	bf86      	itte	hi
 8016382:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801641c <_strtod_l+0x5a4>
 8016386:	f04f 3aff 	movhi.w	sl, #4294967295
 801638a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801638e:	2300      	movs	r3, #0
 8016390:	9304      	str	r3, [sp, #16]
 8016392:	e077      	b.n	8016484 <_strtod_l+0x60c>
 8016394:	f018 0f01 	tst.w	r8, #1
 8016398:	d006      	beq.n	80163a8 <_strtod_l+0x530>
 801639a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a2:	f7ea f941 	bl	8000628 <__aeabi_dmul>
 80163a6:	2301      	movs	r3, #1
 80163a8:	3501      	adds	r5, #1
 80163aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80163ae:	e7cc      	b.n	801634a <_strtod_l+0x4d2>
 80163b0:	d0ed      	beq.n	801638e <_strtod_l+0x516>
 80163b2:	f1c8 0800 	rsb	r8, r8, #0
 80163b6:	f018 020f 	ands.w	r2, r8, #15
 80163ba:	d00a      	beq.n	80163d2 <_strtod_l+0x55a>
 80163bc:	4b12      	ldr	r3, [pc, #72]	; (8016408 <_strtod_l+0x590>)
 80163be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163c2:	4650      	mov	r0, sl
 80163c4:	4659      	mov	r1, fp
 80163c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ca:	f7ea fa57 	bl	800087c <__aeabi_ddiv>
 80163ce:	4682      	mov	sl, r0
 80163d0:	468b      	mov	fp, r1
 80163d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80163d6:	d0da      	beq.n	801638e <_strtod_l+0x516>
 80163d8:	f1b8 0f1f 	cmp.w	r8, #31
 80163dc:	dd20      	ble.n	8016420 <_strtod_l+0x5a8>
 80163de:	2400      	movs	r4, #0
 80163e0:	46a0      	mov	r8, r4
 80163e2:	9407      	str	r4, [sp, #28]
 80163e4:	9405      	str	r4, [sp, #20]
 80163e6:	2322      	movs	r3, #34	; 0x22
 80163e8:	f04f 0a00 	mov.w	sl, #0
 80163ec:	f04f 0b00 	mov.w	fp, #0
 80163f0:	f8c9 3000 	str.w	r3, [r9]
 80163f4:	e765      	b.n	80162c2 <_strtod_l+0x44a>
 80163f6:	bf00      	nop
 80163f8:	08019d15 	.word	0x08019d15
 80163fc:	08019d9b 	.word	0x08019d9b
 8016400:	08019d1d 	.word	0x08019d1d
 8016404:	08019d5c 	.word	0x08019d5c
 8016408:	08019e40 	.word	0x08019e40
 801640c:	08019e18 	.word	0x08019e18
 8016410:	7ff00000 	.word	0x7ff00000
 8016414:	7ca00000 	.word	0x7ca00000
 8016418:	fff80000 	.word	0xfff80000
 801641c:	7fefffff 	.word	0x7fefffff
 8016420:	f018 0310 	ands.w	r3, r8, #16
 8016424:	bf18      	it	ne
 8016426:	236a      	movne	r3, #106	; 0x6a
 8016428:	4da0      	ldr	r5, [pc, #640]	; (80166ac <_strtod_l+0x834>)
 801642a:	9304      	str	r3, [sp, #16]
 801642c:	4650      	mov	r0, sl
 801642e:	4659      	mov	r1, fp
 8016430:	2300      	movs	r3, #0
 8016432:	f1b8 0f00 	cmp.w	r8, #0
 8016436:	f300 810a 	bgt.w	801664e <_strtod_l+0x7d6>
 801643a:	b10b      	cbz	r3, 8016440 <_strtod_l+0x5c8>
 801643c:	4682      	mov	sl, r0
 801643e:	468b      	mov	fp, r1
 8016440:	9b04      	ldr	r3, [sp, #16]
 8016442:	b1bb      	cbz	r3, 8016474 <_strtod_l+0x5fc>
 8016444:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801644c:	2b00      	cmp	r3, #0
 801644e:	4659      	mov	r1, fp
 8016450:	dd10      	ble.n	8016474 <_strtod_l+0x5fc>
 8016452:	2b1f      	cmp	r3, #31
 8016454:	f340 8107 	ble.w	8016666 <_strtod_l+0x7ee>
 8016458:	2b34      	cmp	r3, #52	; 0x34
 801645a:	bfde      	ittt	le
 801645c:	3b20      	suble	r3, #32
 801645e:	f04f 32ff 	movle.w	r2, #4294967295
 8016462:	fa02 f303 	lslle.w	r3, r2, r3
 8016466:	f04f 0a00 	mov.w	sl, #0
 801646a:	bfcc      	ite	gt
 801646c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016470:	ea03 0b01 	andle.w	fp, r3, r1
 8016474:	2200      	movs	r2, #0
 8016476:	2300      	movs	r3, #0
 8016478:	4650      	mov	r0, sl
 801647a:	4659      	mov	r1, fp
 801647c:	f7ea fb3c 	bl	8000af8 <__aeabi_dcmpeq>
 8016480:	2800      	cmp	r0, #0
 8016482:	d1ac      	bne.n	80163de <_strtod_l+0x566>
 8016484:	9b07      	ldr	r3, [sp, #28]
 8016486:	9300      	str	r3, [sp, #0]
 8016488:	9a05      	ldr	r2, [sp, #20]
 801648a:	9908      	ldr	r1, [sp, #32]
 801648c:	4623      	mov	r3, r4
 801648e:	4648      	mov	r0, r9
 8016490:	f001 fdd2 	bl	8018038 <__s2b>
 8016494:	9007      	str	r0, [sp, #28]
 8016496:	2800      	cmp	r0, #0
 8016498:	f43f af08 	beq.w	80162ac <_strtod_l+0x434>
 801649c:	9a06      	ldr	r2, [sp, #24]
 801649e:	9b06      	ldr	r3, [sp, #24]
 80164a0:	2a00      	cmp	r2, #0
 80164a2:	f1c3 0300 	rsb	r3, r3, #0
 80164a6:	bfa8      	it	ge
 80164a8:	2300      	movge	r3, #0
 80164aa:	930e      	str	r3, [sp, #56]	; 0x38
 80164ac:	2400      	movs	r4, #0
 80164ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80164b2:	9316      	str	r3, [sp, #88]	; 0x58
 80164b4:	46a0      	mov	r8, r4
 80164b6:	9b07      	ldr	r3, [sp, #28]
 80164b8:	4648      	mov	r0, r9
 80164ba:	6859      	ldr	r1, [r3, #4]
 80164bc:	f001 fd36 	bl	8017f2c <_Balloc>
 80164c0:	9005      	str	r0, [sp, #20]
 80164c2:	2800      	cmp	r0, #0
 80164c4:	f43f aef6 	beq.w	80162b4 <_strtod_l+0x43c>
 80164c8:	9b07      	ldr	r3, [sp, #28]
 80164ca:	691a      	ldr	r2, [r3, #16]
 80164cc:	3202      	adds	r2, #2
 80164ce:	f103 010c 	add.w	r1, r3, #12
 80164d2:	0092      	lsls	r2, r2, #2
 80164d4:	300c      	adds	r0, #12
 80164d6:	f7fe fdd3 	bl	8015080 <memcpy>
 80164da:	aa1e      	add	r2, sp, #120	; 0x78
 80164dc:	a91d      	add	r1, sp, #116	; 0x74
 80164de:	ec4b ab10 	vmov	d0, sl, fp
 80164e2:	4648      	mov	r0, r9
 80164e4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80164e8:	f002 f862 	bl	80185b0 <__d2b>
 80164ec:	901c      	str	r0, [sp, #112]	; 0x70
 80164ee:	2800      	cmp	r0, #0
 80164f0:	f43f aee0 	beq.w	80162b4 <_strtod_l+0x43c>
 80164f4:	2101      	movs	r1, #1
 80164f6:	4648      	mov	r0, r9
 80164f8:	f001 fe2a 	bl	8018150 <__i2b>
 80164fc:	4680      	mov	r8, r0
 80164fe:	2800      	cmp	r0, #0
 8016500:	f43f aed8 	beq.w	80162b4 <_strtod_l+0x43c>
 8016504:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016506:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016508:	2e00      	cmp	r6, #0
 801650a:	bfab      	itete	ge
 801650c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801650e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016510:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016512:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016514:	bfac      	ite	ge
 8016516:	18f7      	addge	r7, r6, r3
 8016518:	1b9d      	sublt	r5, r3, r6
 801651a:	9b04      	ldr	r3, [sp, #16]
 801651c:	1af6      	subs	r6, r6, r3
 801651e:	4416      	add	r6, r2
 8016520:	4b63      	ldr	r3, [pc, #396]	; (80166b0 <_strtod_l+0x838>)
 8016522:	3e01      	subs	r6, #1
 8016524:	429e      	cmp	r6, r3
 8016526:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801652a:	f280 80af 	bge.w	801668c <_strtod_l+0x814>
 801652e:	1b9b      	subs	r3, r3, r6
 8016530:	2b1f      	cmp	r3, #31
 8016532:	eba2 0203 	sub.w	r2, r2, r3
 8016536:	f04f 0101 	mov.w	r1, #1
 801653a:	f300 809b 	bgt.w	8016674 <_strtod_l+0x7fc>
 801653e:	fa01 f303 	lsl.w	r3, r1, r3
 8016542:	930f      	str	r3, [sp, #60]	; 0x3c
 8016544:	2300      	movs	r3, #0
 8016546:	930a      	str	r3, [sp, #40]	; 0x28
 8016548:	18be      	adds	r6, r7, r2
 801654a:	9b04      	ldr	r3, [sp, #16]
 801654c:	42b7      	cmp	r7, r6
 801654e:	4415      	add	r5, r2
 8016550:	441d      	add	r5, r3
 8016552:	463b      	mov	r3, r7
 8016554:	bfa8      	it	ge
 8016556:	4633      	movge	r3, r6
 8016558:	42ab      	cmp	r3, r5
 801655a:	bfa8      	it	ge
 801655c:	462b      	movge	r3, r5
 801655e:	2b00      	cmp	r3, #0
 8016560:	bfc2      	ittt	gt
 8016562:	1af6      	subgt	r6, r6, r3
 8016564:	1aed      	subgt	r5, r5, r3
 8016566:	1aff      	subgt	r7, r7, r3
 8016568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801656a:	b1bb      	cbz	r3, 801659c <_strtod_l+0x724>
 801656c:	4641      	mov	r1, r8
 801656e:	461a      	mov	r2, r3
 8016570:	4648      	mov	r0, r9
 8016572:	f001 fe8d 	bl	8018290 <__pow5mult>
 8016576:	4680      	mov	r8, r0
 8016578:	2800      	cmp	r0, #0
 801657a:	f43f ae9b 	beq.w	80162b4 <_strtod_l+0x43c>
 801657e:	4601      	mov	r1, r0
 8016580:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016582:	4648      	mov	r0, r9
 8016584:	f001 fded 	bl	8018162 <__multiply>
 8016588:	900c      	str	r0, [sp, #48]	; 0x30
 801658a:	2800      	cmp	r0, #0
 801658c:	f43f ae92 	beq.w	80162b4 <_strtod_l+0x43c>
 8016590:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016592:	4648      	mov	r0, r9
 8016594:	f001 fcfe 	bl	8017f94 <_Bfree>
 8016598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801659a:	931c      	str	r3, [sp, #112]	; 0x70
 801659c:	2e00      	cmp	r6, #0
 801659e:	dc7a      	bgt.n	8016696 <_strtod_l+0x81e>
 80165a0:	9b06      	ldr	r3, [sp, #24]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	dd08      	ble.n	80165b8 <_strtod_l+0x740>
 80165a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165a8:	9905      	ldr	r1, [sp, #20]
 80165aa:	4648      	mov	r0, r9
 80165ac:	f001 fe70 	bl	8018290 <__pow5mult>
 80165b0:	9005      	str	r0, [sp, #20]
 80165b2:	2800      	cmp	r0, #0
 80165b4:	f43f ae7e 	beq.w	80162b4 <_strtod_l+0x43c>
 80165b8:	2d00      	cmp	r5, #0
 80165ba:	dd08      	ble.n	80165ce <_strtod_l+0x756>
 80165bc:	462a      	mov	r2, r5
 80165be:	9905      	ldr	r1, [sp, #20]
 80165c0:	4648      	mov	r0, r9
 80165c2:	f001 feb3 	bl	801832c <__lshift>
 80165c6:	9005      	str	r0, [sp, #20]
 80165c8:	2800      	cmp	r0, #0
 80165ca:	f43f ae73 	beq.w	80162b4 <_strtod_l+0x43c>
 80165ce:	2f00      	cmp	r7, #0
 80165d0:	dd08      	ble.n	80165e4 <_strtod_l+0x76c>
 80165d2:	4641      	mov	r1, r8
 80165d4:	463a      	mov	r2, r7
 80165d6:	4648      	mov	r0, r9
 80165d8:	f001 fea8 	bl	801832c <__lshift>
 80165dc:	4680      	mov	r8, r0
 80165de:	2800      	cmp	r0, #0
 80165e0:	f43f ae68 	beq.w	80162b4 <_strtod_l+0x43c>
 80165e4:	9a05      	ldr	r2, [sp, #20]
 80165e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165e8:	4648      	mov	r0, r9
 80165ea:	f001 ff0d 	bl	8018408 <__mdiff>
 80165ee:	4604      	mov	r4, r0
 80165f0:	2800      	cmp	r0, #0
 80165f2:	f43f ae5f 	beq.w	80162b4 <_strtod_l+0x43c>
 80165f6:	68c3      	ldr	r3, [r0, #12]
 80165f8:	930c      	str	r3, [sp, #48]	; 0x30
 80165fa:	2300      	movs	r3, #0
 80165fc:	60c3      	str	r3, [r0, #12]
 80165fe:	4641      	mov	r1, r8
 8016600:	f001 fee8 	bl	80183d4 <__mcmp>
 8016604:	2800      	cmp	r0, #0
 8016606:	da55      	bge.n	80166b4 <_strtod_l+0x83c>
 8016608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801660a:	b9e3      	cbnz	r3, 8016646 <_strtod_l+0x7ce>
 801660c:	f1ba 0f00 	cmp.w	sl, #0
 8016610:	d119      	bne.n	8016646 <_strtod_l+0x7ce>
 8016612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016616:	b9b3      	cbnz	r3, 8016646 <_strtod_l+0x7ce>
 8016618:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801661c:	0d1b      	lsrs	r3, r3, #20
 801661e:	051b      	lsls	r3, r3, #20
 8016620:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016624:	d90f      	bls.n	8016646 <_strtod_l+0x7ce>
 8016626:	6963      	ldr	r3, [r4, #20]
 8016628:	b913      	cbnz	r3, 8016630 <_strtod_l+0x7b8>
 801662a:	6923      	ldr	r3, [r4, #16]
 801662c:	2b01      	cmp	r3, #1
 801662e:	dd0a      	ble.n	8016646 <_strtod_l+0x7ce>
 8016630:	4621      	mov	r1, r4
 8016632:	2201      	movs	r2, #1
 8016634:	4648      	mov	r0, r9
 8016636:	f001 fe79 	bl	801832c <__lshift>
 801663a:	4641      	mov	r1, r8
 801663c:	4604      	mov	r4, r0
 801663e:	f001 fec9 	bl	80183d4 <__mcmp>
 8016642:	2800      	cmp	r0, #0
 8016644:	dc67      	bgt.n	8016716 <_strtod_l+0x89e>
 8016646:	9b04      	ldr	r3, [sp, #16]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d171      	bne.n	8016730 <_strtod_l+0x8b8>
 801664c:	e63d      	b.n	80162ca <_strtod_l+0x452>
 801664e:	f018 0f01 	tst.w	r8, #1
 8016652:	d004      	beq.n	801665e <_strtod_l+0x7e6>
 8016654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016658:	f7e9 ffe6 	bl	8000628 <__aeabi_dmul>
 801665c:	2301      	movs	r3, #1
 801665e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016662:	3508      	adds	r5, #8
 8016664:	e6e5      	b.n	8016432 <_strtod_l+0x5ba>
 8016666:	f04f 32ff 	mov.w	r2, #4294967295
 801666a:	fa02 f303 	lsl.w	r3, r2, r3
 801666e:	ea03 0a0a 	and.w	sl, r3, sl
 8016672:	e6ff      	b.n	8016474 <_strtod_l+0x5fc>
 8016674:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016678:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801667c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016680:	36e2      	adds	r6, #226	; 0xe2
 8016682:	fa01 f306 	lsl.w	r3, r1, r6
 8016686:	930a      	str	r3, [sp, #40]	; 0x28
 8016688:	910f      	str	r1, [sp, #60]	; 0x3c
 801668a:	e75d      	b.n	8016548 <_strtod_l+0x6d0>
 801668c:	2300      	movs	r3, #0
 801668e:	930a      	str	r3, [sp, #40]	; 0x28
 8016690:	2301      	movs	r3, #1
 8016692:	930f      	str	r3, [sp, #60]	; 0x3c
 8016694:	e758      	b.n	8016548 <_strtod_l+0x6d0>
 8016696:	4632      	mov	r2, r6
 8016698:	991c      	ldr	r1, [sp, #112]	; 0x70
 801669a:	4648      	mov	r0, r9
 801669c:	f001 fe46 	bl	801832c <__lshift>
 80166a0:	901c      	str	r0, [sp, #112]	; 0x70
 80166a2:	2800      	cmp	r0, #0
 80166a4:	f47f af7c 	bne.w	80165a0 <_strtod_l+0x728>
 80166a8:	e604      	b.n	80162b4 <_strtod_l+0x43c>
 80166aa:	bf00      	nop
 80166ac:	08019d70 	.word	0x08019d70
 80166b0:	fffffc02 	.word	0xfffffc02
 80166b4:	465d      	mov	r5, fp
 80166b6:	f040 8086 	bne.w	80167c6 <_strtod_l+0x94e>
 80166ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80166c0:	b32a      	cbz	r2, 801670e <_strtod_l+0x896>
 80166c2:	4aaf      	ldr	r2, [pc, #700]	; (8016980 <_strtod_l+0xb08>)
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d153      	bne.n	8016770 <_strtod_l+0x8f8>
 80166c8:	9b04      	ldr	r3, [sp, #16]
 80166ca:	4650      	mov	r0, sl
 80166cc:	b1d3      	cbz	r3, 8016704 <_strtod_l+0x88c>
 80166ce:	4aad      	ldr	r2, [pc, #692]	; (8016984 <_strtod_l+0xb0c>)
 80166d0:	402a      	ands	r2, r5
 80166d2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80166d6:	f04f 31ff 	mov.w	r1, #4294967295
 80166da:	d816      	bhi.n	801670a <_strtod_l+0x892>
 80166dc:	0d12      	lsrs	r2, r2, #20
 80166de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80166e2:	fa01 f303 	lsl.w	r3, r1, r3
 80166e6:	4298      	cmp	r0, r3
 80166e8:	d142      	bne.n	8016770 <_strtod_l+0x8f8>
 80166ea:	4ba7      	ldr	r3, [pc, #668]	; (8016988 <_strtod_l+0xb10>)
 80166ec:	429d      	cmp	r5, r3
 80166ee:	d102      	bne.n	80166f6 <_strtod_l+0x87e>
 80166f0:	3001      	adds	r0, #1
 80166f2:	f43f addf 	beq.w	80162b4 <_strtod_l+0x43c>
 80166f6:	4ba3      	ldr	r3, [pc, #652]	; (8016984 <_strtod_l+0xb0c>)
 80166f8:	402b      	ands	r3, r5
 80166fa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80166fe:	f04f 0a00 	mov.w	sl, #0
 8016702:	e7a0      	b.n	8016646 <_strtod_l+0x7ce>
 8016704:	f04f 33ff 	mov.w	r3, #4294967295
 8016708:	e7ed      	b.n	80166e6 <_strtod_l+0x86e>
 801670a:	460b      	mov	r3, r1
 801670c:	e7eb      	b.n	80166e6 <_strtod_l+0x86e>
 801670e:	bb7b      	cbnz	r3, 8016770 <_strtod_l+0x8f8>
 8016710:	f1ba 0f00 	cmp.w	sl, #0
 8016714:	d12c      	bne.n	8016770 <_strtod_l+0x8f8>
 8016716:	9904      	ldr	r1, [sp, #16]
 8016718:	4a9a      	ldr	r2, [pc, #616]	; (8016984 <_strtod_l+0xb0c>)
 801671a:	465b      	mov	r3, fp
 801671c:	b1f1      	cbz	r1, 801675c <_strtod_l+0x8e4>
 801671e:	ea02 010b 	and.w	r1, r2, fp
 8016722:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016726:	dc19      	bgt.n	801675c <_strtod_l+0x8e4>
 8016728:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801672c:	f77f ae5b 	ble.w	80163e6 <_strtod_l+0x56e>
 8016730:	4a96      	ldr	r2, [pc, #600]	; (801698c <_strtod_l+0xb14>)
 8016732:	2300      	movs	r3, #0
 8016734:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016738:	4650      	mov	r0, sl
 801673a:	4659      	mov	r1, fp
 801673c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016740:	f7e9 ff72 	bl	8000628 <__aeabi_dmul>
 8016744:	4682      	mov	sl, r0
 8016746:	468b      	mov	fp, r1
 8016748:	2900      	cmp	r1, #0
 801674a:	f47f adbe 	bne.w	80162ca <_strtod_l+0x452>
 801674e:	2800      	cmp	r0, #0
 8016750:	f47f adbb 	bne.w	80162ca <_strtod_l+0x452>
 8016754:	2322      	movs	r3, #34	; 0x22
 8016756:	f8c9 3000 	str.w	r3, [r9]
 801675a:	e5b6      	b.n	80162ca <_strtod_l+0x452>
 801675c:	4013      	ands	r3, r2
 801675e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016762:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016766:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801676a:	f04f 3aff 	mov.w	sl, #4294967295
 801676e:	e76a      	b.n	8016646 <_strtod_l+0x7ce>
 8016770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016772:	b193      	cbz	r3, 801679a <_strtod_l+0x922>
 8016774:	422b      	tst	r3, r5
 8016776:	f43f af66 	beq.w	8016646 <_strtod_l+0x7ce>
 801677a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801677c:	9a04      	ldr	r2, [sp, #16]
 801677e:	4650      	mov	r0, sl
 8016780:	4659      	mov	r1, fp
 8016782:	b173      	cbz	r3, 80167a2 <_strtod_l+0x92a>
 8016784:	f7ff fb5c 	bl	8015e40 <sulp>
 8016788:	4602      	mov	r2, r0
 801678a:	460b      	mov	r3, r1
 801678c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016790:	f7e9 fd94 	bl	80002bc <__adddf3>
 8016794:	4682      	mov	sl, r0
 8016796:	468b      	mov	fp, r1
 8016798:	e755      	b.n	8016646 <_strtod_l+0x7ce>
 801679a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801679c:	ea13 0f0a 	tst.w	r3, sl
 80167a0:	e7e9      	b.n	8016776 <_strtod_l+0x8fe>
 80167a2:	f7ff fb4d 	bl	8015e40 <sulp>
 80167a6:	4602      	mov	r2, r0
 80167a8:	460b      	mov	r3, r1
 80167aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167ae:	f7e9 fd83 	bl	80002b8 <__aeabi_dsub>
 80167b2:	2200      	movs	r2, #0
 80167b4:	2300      	movs	r3, #0
 80167b6:	4682      	mov	sl, r0
 80167b8:	468b      	mov	fp, r1
 80167ba:	f7ea f99d 	bl	8000af8 <__aeabi_dcmpeq>
 80167be:	2800      	cmp	r0, #0
 80167c0:	f47f ae11 	bne.w	80163e6 <_strtod_l+0x56e>
 80167c4:	e73f      	b.n	8016646 <_strtod_l+0x7ce>
 80167c6:	4641      	mov	r1, r8
 80167c8:	4620      	mov	r0, r4
 80167ca:	f001 ff40 	bl	801864e <__ratio>
 80167ce:	ec57 6b10 	vmov	r6, r7, d0
 80167d2:	2200      	movs	r2, #0
 80167d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167d8:	ee10 0a10 	vmov	r0, s0
 80167dc:	4639      	mov	r1, r7
 80167de:	f7ea f99f 	bl	8000b20 <__aeabi_dcmple>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d077      	beq.n	80168d6 <_strtod_l+0xa5e>
 80167e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d04a      	beq.n	8016882 <_strtod_l+0xa0a>
 80167ec:	4b68      	ldr	r3, [pc, #416]	; (8016990 <_strtod_l+0xb18>)
 80167ee:	2200      	movs	r2, #0
 80167f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167f4:	4f66      	ldr	r7, [pc, #408]	; (8016990 <_strtod_l+0xb18>)
 80167f6:	2600      	movs	r6, #0
 80167f8:	4b62      	ldr	r3, [pc, #392]	; (8016984 <_strtod_l+0xb0c>)
 80167fa:	402b      	ands	r3, r5
 80167fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80167fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016800:	4b64      	ldr	r3, [pc, #400]	; (8016994 <_strtod_l+0xb1c>)
 8016802:	429a      	cmp	r2, r3
 8016804:	f040 80ce 	bne.w	80169a4 <_strtod_l+0xb2c>
 8016808:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801680c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016810:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016814:	ec4b ab10 	vmov	d0, sl, fp
 8016818:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801681c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016820:	f001 fe50 	bl	80184c4 <__ulp>
 8016824:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016828:	ec53 2b10 	vmov	r2, r3, d0
 801682c:	f7e9 fefc 	bl	8000628 <__aeabi_dmul>
 8016830:	4652      	mov	r2, sl
 8016832:	465b      	mov	r3, fp
 8016834:	f7e9 fd42 	bl	80002bc <__adddf3>
 8016838:	460b      	mov	r3, r1
 801683a:	4952      	ldr	r1, [pc, #328]	; (8016984 <_strtod_l+0xb0c>)
 801683c:	4a56      	ldr	r2, [pc, #344]	; (8016998 <_strtod_l+0xb20>)
 801683e:	4019      	ands	r1, r3
 8016840:	4291      	cmp	r1, r2
 8016842:	4682      	mov	sl, r0
 8016844:	d95b      	bls.n	80168fe <_strtod_l+0xa86>
 8016846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016848:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801684c:	4293      	cmp	r3, r2
 801684e:	d103      	bne.n	8016858 <_strtod_l+0x9e0>
 8016850:	9b08      	ldr	r3, [sp, #32]
 8016852:	3301      	adds	r3, #1
 8016854:	f43f ad2e 	beq.w	80162b4 <_strtod_l+0x43c>
 8016858:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016988 <_strtod_l+0xb10>
 801685c:	f04f 3aff 	mov.w	sl, #4294967295
 8016860:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016862:	4648      	mov	r0, r9
 8016864:	f001 fb96 	bl	8017f94 <_Bfree>
 8016868:	9905      	ldr	r1, [sp, #20]
 801686a:	4648      	mov	r0, r9
 801686c:	f001 fb92 	bl	8017f94 <_Bfree>
 8016870:	4641      	mov	r1, r8
 8016872:	4648      	mov	r0, r9
 8016874:	f001 fb8e 	bl	8017f94 <_Bfree>
 8016878:	4621      	mov	r1, r4
 801687a:	4648      	mov	r0, r9
 801687c:	f001 fb8a 	bl	8017f94 <_Bfree>
 8016880:	e619      	b.n	80164b6 <_strtod_l+0x63e>
 8016882:	f1ba 0f00 	cmp.w	sl, #0
 8016886:	d11a      	bne.n	80168be <_strtod_l+0xa46>
 8016888:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801688c:	b9eb      	cbnz	r3, 80168ca <_strtod_l+0xa52>
 801688e:	2200      	movs	r2, #0
 8016890:	4b3f      	ldr	r3, [pc, #252]	; (8016990 <_strtod_l+0xb18>)
 8016892:	4630      	mov	r0, r6
 8016894:	4639      	mov	r1, r7
 8016896:	f7ea f939 	bl	8000b0c <__aeabi_dcmplt>
 801689a:	b9c8      	cbnz	r0, 80168d0 <_strtod_l+0xa58>
 801689c:	4630      	mov	r0, r6
 801689e:	4639      	mov	r1, r7
 80168a0:	2200      	movs	r2, #0
 80168a2:	4b3e      	ldr	r3, [pc, #248]	; (801699c <_strtod_l+0xb24>)
 80168a4:	f7e9 fec0 	bl	8000628 <__aeabi_dmul>
 80168a8:	4606      	mov	r6, r0
 80168aa:	460f      	mov	r7, r1
 80168ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80168b0:	9618      	str	r6, [sp, #96]	; 0x60
 80168b2:	9319      	str	r3, [sp, #100]	; 0x64
 80168b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80168b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80168bc:	e79c      	b.n	80167f8 <_strtod_l+0x980>
 80168be:	f1ba 0f01 	cmp.w	sl, #1
 80168c2:	d102      	bne.n	80168ca <_strtod_l+0xa52>
 80168c4:	2d00      	cmp	r5, #0
 80168c6:	f43f ad8e 	beq.w	80163e6 <_strtod_l+0x56e>
 80168ca:	2200      	movs	r2, #0
 80168cc:	4b34      	ldr	r3, [pc, #208]	; (80169a0 <_strtod_l+0xb28>)
 80168ce:	e78f      	b.n	80167f0 <_strtod_l+0x978>
 80168d0:	2600      	movs	r6, #0
 80168d2:	4f32      	ldr	r7, [pc, #200]	; (801699c <_strtod_l+0xb24>)
 80168d4:	e7ea      	b.n	80168ac <_strtod_l+0xa34>
 80168d6:	4b31      	ldr	r3, [pc, #196]	; (801699c <_strtod_l+0xb24>)
 80168d8:	4630      	mov	r0, r6
 80168da:	4639      	mov	r1, r7
 80168dc:	2200      	movs	r2, #0
 80168de:	f7e9 fea3 	bl	8000628 <__aeabi_dmul>
 80168e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e4:	4606      	mov	r6, r0
 80168e6:	460f      	mov	r7, r1
 80168e8:	b933      	cbnz	r3, 80168f8 <_strtod_l+0xa80>
 80168ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168ee:	9010      	str	r0, [sp, #64]	; 0x40
 80168f0:	9311      	str	r3, [sp, #68]	; 0x44
 80168f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168f6:	e7df      	b.n	80168b8 <_strtod_l+0xa40>
 80168f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80168fc:	e7f9      	b.n	80168f2 <_strtod_l+0xa7a>
 80168fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016902:	9b04      	ldr	r3, [sp, #16]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d1ab      	bne.n	8016860 <_strtod_l+0x9e8>
 8016908:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801690c:	0d1b      	lsrs	r3, r3, #20
 801690e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016910:	051b      	lsls	r3, r3, #20
 8016912:	429a      	cmp	r2, r3
 8016914:	465d      	mov	r5, fp
 8016916:	d1a3      	bne.n	8016860 <_strtod_l+0x9e8>
 8016918:	4639      	mov	r1, r7
 801691a:	4630      	mov	r0, r6
 801691c:	f7ea f934 	bl	8000b88 <__aeabi_d2iz>
 8016920:	f7e9 fe18 	bl	8000554 <__aeabi_i2d>
 8016924:	460b      	mov	r3, r1
 8016926:	4602      	mov	r2, r0
 8016928:	4639      	mov	r1, r7
 801692a:	4630      	mov	r0, r6
 801692c:	f7e9 fcc4 	bl	80002b8 <__aeabi_dsub>
 8016930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016932:	4606      	mov	r6, r0
 8016934:	460f      	mov	r7, r1
 8016936:	b933      	cbnz	r3, 8016946 <_strtod_l+0xace>
 8016938:	f1ba 0f00 	cmp.w	sl, #0
 801693c:	d103      	bne.n	8016946 <_strtod_l+0xace>
 801693e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016942:	2d00      	cmp	r5, #0
 8016944:	d06d      	beq.n	8016a22 <_strtod_l+0xbaa>
 8016946:	a30a      	add	r3, pc, #40	; (adr r3, 8016970 <_strtod_l+0xaf8>)
 8016948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694c:	4630      	mov	r0, r6
 801694e:	4639      	mov	r1, r7
 8016950:	f7ea f8dc 	bl	8000b0c <__aeabi_dcmplt>
 8016954:	2800      	cmp	r0, #0
 8016956:	f47f acb8 	bne.w	80162ca <_strtod_l+0x452>
 801695a:	a307      	add	r3, pc, #28	; (adr r3, 8016978 <_strtod_l+0xb00>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	4630      	mov	r0, r6
 8016962:	4639      	mov	r1, r7
 8016964:	f7ea f8f0 	bl	8000b48 <__aeabi_dcmpgt>
 8016968:	2800      	cmp	r0, #0
 801696a:	f43f af79 	beq.w	8016860 <_strtod_l+0x9e8>
 801696e:	e4ac      	b.n	80162ca <_strtod_l+0x452>
 8016970:	94a03595 	.word	0x94a03595
 8016974:	3fdfffff 	.word	0x3fdfffff
 8016978:	35afe535 	.word	0x35afe535
 801697c:	3fe00000 	.word	0x3fe00000
 8016980:	000fffff 	.word	0x000fffff
 8016984:	7ff00000 	.word	0x7ff00000
 8016988:	7fefffff 	.word	0x7fefffff
 801698c:	39500000 	.word	0x39500000
 8016990:	3ff00000 	.word	0x3ff00000
 8016994:	7fe00000 	.word	0x7fe00000
 8016998:	7c9fffff 	.word	0x7c9fffff
 801699c:	3fe00000 	.word	0x3fe00000
 80169a0:	bff00000 	.word	0xbff00000
 80169a4:	9b04      	ldr	r3, [sp, #16]
 80169a6:	b333      	cbz	r3, 80169f6 <_strtod_l+0xb7e>
 80169a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80169ae:	d822      	bhi.n	80169f6 <_strtod_l+0xb7e>
 80169b0:	a327      	add	r3, pc, #156	; (adr r3, 8016a50 <_strtod_l+0xbd8>)
 80169b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b6:	4630      	mov	r0, r6
 80169b8:	4639      	mov	r1, r7
 80169ba:	f7ea f8b1 	bl	8000b20 <__aeabi_dcmple>
 80169be:	b1a0      	cbz	r0, 80169ea <_strtod_l+0xb72>
 80169c0:	4639      	mov	r1, r7
 80169c2:	4630      	mov	r0, r6
 80169c4:	f7ea f908 	bl	8000bd8 <__aeabi_d2uiz>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	bf08      	it	eq
 80169cc:	2001      	moveq	r0, #1
 80169ce:	f7e9 fdb1 	bl	8000534 <__aeabi_ui2d>
 80169d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169d4:	4606      	mov	r6, r0
 80169d6:	460f      	mov	r7, r1
 80169d8:	bb03      	cbnz	r3, 8016a1c <_strtod_l+0xba4>
 80169da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169de:	9012      	str	r0, [sp, #72]	; 0x48
 80169e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80169e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80169e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169ee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80169f2:	1a9b      	subs	r3, r3, r2
 80169f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80169f6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80169fa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80169fe:	f001 fd61 	bl	80184c4 <__ulp>
 8016a02:	4650      	mov	r0, sl
 8016a04:	ec53 2b10 	vmov	r2, r3, d0
 8016a08:	4659      	mov	r1, fp
 8016a0a:	f7e9 fe0d 	bl	8000628 <__aeabi_dmul>
 8016a0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a12:	f7e9 fc53 	bl	80002bc <__adddf3>
 8016a16:	4682      	mov	sl, r0
 8016a18:	468b      	mov	fp, r1
 8016a1a:	e772      	b.n	8016902 <_strtod_l+0xa8a>
 8016a1c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016a20:	e7df      	b.n	80169e2 <_strtod_l+0xb6a>
 8016a22:	a30d      	add	r3, pc, #52	; (adr r3, 8016a58 <_strtod_l+0xbe0>)
 8016a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a28:	f7ea f870 	bl	8000b0c <__aeabi_dcmplt>
 8016a2c:	e79c      	b.n	8016968 <_strtod_l+0xaf0>
 8016a2e:	2300      	movs	r3, #0
 8016a30:	930d      	str	r3, [sp, #52]	; 0x34
 8016a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a36:	6013      	str	r3, [r2, #0]
 8016a38:	f7ff ba61 	b.w	8015efe <_strtod_l+0x86>
 8016a3c:	2b65      	cmp	r3, #101	; 0x65
 8016a3e:	f04f 0200 	mov.w	r2, #0
 8016a42:	f43f ab4e 	beq.w	80160e2 <_strtod_l+0x26a>
 8016a46:	2101      	movs	r1, #1
 8016a48:	4614      	mov	r4, r2
 8016a4a:	9104      	str	r1, [sp, #16]
 8016a4c:	f7ff bacb 	b.w	8015fe6 <_strtod_l+0x16e>
 8016a50:	ffc00000 	.word	0xffc00000
 8016a54:	41dfffff 	.word	0x41dfffff
 8016a58:	94a03595 	.word	0x94a03595
 8016a5c:	3fcfffff 	.word	0x3fcfffff

08016a60 <_strtod_r>:
 8016a60:	4b05      	ldr	r3, [pc, #20]	; (8016a78 <_strtod_r+0x18>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	b410      	push	{r4}
 8016a66:	6a1b      	ldr	r3, [r3, #32]
 8016a68:	4c04      	ldr	r4, [pc, #16]	; (8016a7c <_strtod_r+0x1c>)
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	bf08      	it	eq
 8016a6e:	4623      	moveq	r3, r4
 8016a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a74:	f7ff ba00 	b.w	8015e78 <_strtod_l>
 8016a78:	2000000c 	.word	0x2000000c
 8016a7c:	20000070 	.word	0x20000070

08016a80 <_strtol_l.isra.0>:
 8016a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a84:	4680      	mov	r8, r0
 8016a86:	4689      	mov	r9, r1
 8016a88:	4692      	mov	sl, r2
 8016a8a:	461e      	mov	r6, r3
 8016a8c:	460f      	mov	r7, r1
 8016a8e:	463d      	mov	r5, r7
 8016a90:	9808      	ldr	r0, [sp, #32]
 8016a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a96:	f001 fa0d 	bl	8017eb4 <__locale_ctype_ptr_l>
 8016a9a:	4420      	add	r0, r4
 8016a9c:	7843      	ldrb	r3, [r0, #1]
 8016a9e:	f013 0308 	ands.w	r3, r3, #8
 8016aa2:	d132      	bne.n	8016b0a <_strtol_l.isra.0+0x8a>
 8016aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8016aa6:	d132      	bne.n	8016b0e <_strtol_l.isra.0+0x8e>
 8016aa8:	787c      	ldrb	r4, [r7, #1]
 8016aaa:	1cbd      	adds	r5, r7, #2
 8016aac:	2201      	movs	r2, #1
 8016aae:	2e00      	cmp	r6, #0
 8016ab0:	d05d      	beq.n	8016b6e <_strtol_l.isra.0+0xee>
 8016ab2:	2e10      	cmp	r6, #16
 8016ab4:	d109      	bne.n	8016aca <_strtol_l.isra.0+0x4a>
 8016ab6:	2c30      	cmp	r4, #48	; 0x30
 8016ab8:	d107      	bne.n	8016aca <_strtol_l.isra.0+0x4a>
 8016aba:	782b      	ldrb	r3, [r5, #0]
 8016abc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ac0:	2b58      	cmp	r3, #88	; 0x58
 8016ac2:	d14f      	bne.n	8016b64 <_strtol_l.isra.0+0xe4>
 8016ac4:	786c      	ldrb	r4, [r5, #1]
 8016ac6:	2610      	movs	r6, #16
 8016ac8:	3502      	adds	r5, #2
 8016aca:	2a00      	cmp	r2, #0
 8016acc:	bf14      	ite	ne
 8016ace:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016ad2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016ad6:	2700      	movs	r7, #0
 8016ad8:	fbb1 fcf6 	udiv	ip, r1, r6
 8016adc:	4638      	mov	r0, r7
 8016ade:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016ae2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016ae6:	2b09      	cmp	r3, #9
 8016ae8:	d817      	bhi.n	8016b1a <_strtol_l.isra.0+0x9a>
 8016aea:	461c      	mov	r4, r3
 8016aec:	42a6      	cmp	r6, r4
 8016aee:	dd23      	ble.n	8016b38 <_strtol_l.isra.0+0xb8>
 8016af0:	1c7b      	adds	r3, r7, #1
 8016af2:	d007      	beq.n	8016b04 <_strtol_l.isra.0+0x84>
 8016af4:	4584      	cmp	ip, r0
 8016af6:	d31c      	bcc.n	8016b32 <_strtol_l.isra.0+0xb2>
 8016af8:	d101      	bne.n	8016afe <_strtol_l.isra.0+0x7e>
 8016afa:	45a6      	cmp	lr, r4
 8016afc:	db19      	blt.n	8016b32 <_strtol_l.isra.0+0xb2>
 8016afe:	fb00 4006 	mla	r0, r0, r6, r4
 8016b02:	2701      	movs	r7, #1
 8016b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b08:	e7eb      	b.n	8016ae2 <_strtol_l.isra.0+0x62>
 8016b0a:	462f      	mov	r7, r5
 8016b0c:	e7bf      	b.n	8016a8e <_strtol_l.isra.0+0xe>
 8016b0e:	2c2b      	cmp	r4, #43	; 0x2b
 8016b10:	bf04      	itt	eq
 8016b12:	1cbd      	addeq	r5, r7, #2
 8016b14:	787c      	ldrbeq	r4, [r7, #1]
 8016b16:	461a      	mov	r2, r3
 8016b18:	e7c9      	b.n	8016aae <_strtol_l.isra.0+0x2e>
 8016b1a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016b1e:	2b19      	cmp	r3, #25
 8016b20:	d801      	bhi.n	8016b26 <_strtol_l.isra.0+0xa6>
 8016b22:	3c37      	subs	r4, #55	; 0x37
 8016b24:	e7e2      	b.n	8016aec <_strtol_l.isra.0+0x6c>
 8016b26:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016b2a:	2b19      	cmp	r3, #25
 8016b2c:	d804      	bhi.n	8016b38 <_strtol_l.isra.0+0xb8>
 8016b2e:	3c57      	subs	r4, #87	; 0x57
 8016b30:	e7dc      	b.n	8016aec <_strtol_l.isra.0+0x6c>
 8016b32:	f04f 37ff 	mov.w	r7, #4294967295
 8016b36:	e7e5      	b.n	8016b04 <_strtol_l.isra.0+0x84>
 8016b38:	1c7b      	adds	r3, r7, #1
 8016b3a:	d108      	bne.n	8016b4e <_strtol_l.isra.0+0xce>
 8016b3c:	2322      	movs	r3, #34	; 0x22
 8016b3e:	f8c8 3000 	str.w	r3, [r8]
 8016b42:	4608      	mov	r0, r1
 8016b44:	f1ba 0f00 	cmp.w	sl, #0
 8016b48:	d107      	bne.n	8016b5a <_strtol_l.isra.0+0xda>
 8016b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b4e:	b102      	cbz	r2, 8016b52 <_strtol_l.isra.0+0xd2>
 8016b50:	4240      	negs	r0, r0
 8016b52:	f1ba 0f00 	cmp.w	sl, #0
 8016b56:	d0f8      	beq.n	8016b4a <_strtol_l.isra.0+0xca>
 8016b58:	b10f      	cbz	r7, 8016b5e <_strtol_l.isra.0+0xde>
 8016b5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b5e:	f8ca 9000 	str.w	r9, [sl]
 8016b62:	e7f2      	b.n	8016b4a <_strtol_l.isra.0+0xca>
 8016b64:	2430      	movs	r4, #48	; 0x30
 8016b66:	2e00      	cmp	r6, #0
 8016b68:	d1af      	bne.n	8016aca <_strtol_l.isra.0+0x4a>
 8016b6a:	2608      	movs	r6, #8
 8016b6c:	e7ad      	b.n	8016aca <_strtol_l.isra.0+0x4a>
 8016b6e:	2c30      	cmp	r4, #48	; 0x30
 8016b70:	d0a3      	beq.n	8016aba <_strtol_l.isra.0+0x3a>
 8016b72:	260a      	movs	r6, #10
 8016b74:	e7a9      	b.n	8016aca <_strtol_l.isra.0+0x4a>
	...

08016b78 <_strtol_r>:
 8016b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b7a:	4c06      	ldr	r4, [pc, #24]	; (8016b94 <_strtol_r+0x1c>)
 8016b7c:	4d06      	ldr	r5, [pc, #24]	; (8016b98 <_strtol_r+0x20>)
 8016b7e:	6824      	ldr	r4, [r4, #0]
 8016b80:	6a24      	ldr	r4, [r4, #32]
 8016b82:	2c00      	cmp	r4, #0
 8016b84:	bf08      	it	eq
 8016b86:	462c      	moveq	r4, r5
 8016b88:	9400      	str	r4, [sp, #0]
 8016b8a:	f7ff ff79 	bl	8016a80 <_strtol_l.isra.0>
 8016b8e:	b003      	add	sp, #12
 8016b90:	bd30      	pop	{r4, r5, pc}
 8016b92:	bf00      	nop
 8016b94:	2000000c 	.word	0x2000000c
 8016b98:	20000070 	.word	0x20000070

08016b9c <_vsiprintf_r>:
 8016b9c:	b500      	push	{lr}
 8016b9e:	b09b      	sub	sp, #108	; 0x6c
 8016ba0:	9100      	str	r1, [sp, #0]
 8016ba2:	9104      	str	r1, [sp, #16]
 8016ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ba8:	9105      	str	r1, [sp, #20]
 8016baa:	9102      	str	r1, [sp, #8]
 8016bac:	4905      	ldr	r1, [pc, #20]	; (8016bc4 <_vsiprintf_r+0x28>)
 8016bae:	9103      	str	r1, [sp, #12]
 8016bb0:	4669      	mov	r1, sp
 8016bb2:	f001 fecb 	bl	801894c <_svfiprintf_r>
 8016bb6:	9b00      	ldr	r3, [sp, #0]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	701a      	strb	r2, [r3, #0]
 8016bbc:	b01b      	add	sp, #108	; 0x6c
 8016bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bc2:	bf00      	nop
 8016bc4:	ffff0208 	.word	0xffff0208

08016bc8 <vsiprintf>:
 8016bc8:	4613      	mov	r3, r2
 8016bca:	460a      	mov	r2, r1
 8016bcc:	4601      	mov	r1, r0
 8016bce:	4802      	ldr	r0, [pc, #8]	; (8016bd8 <vsiprintf+0x10>)
 8016bd0:	6800      	ldr	r0, [r0, #0]
 8016bd2:	f7ff bfe3 	b.w	8016b9c <_vsiprintf_r>
 8016bd6:	bf00      	nop
 8016bd8:	2000000c 	.word	0x2000000c

08016bdc <quorem>:
 8016bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be0:	6903      	ldr	r3, [r0, #16]
 8016be2:	690c      	ldr	r4, [r1, #16]
 8016be4:	42a3      	cmp	r3, r4
 8016be6:	4680      	mov	r8, r0
 8016be8:	f2c0 8082 	blt.w	8016cf0 <quorem+0x114>
 8016bec:	3c01      	subs	r4, #1
 8016bee:	f101 0714 	add.w	r7, r1, #20
 8016bf2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016bf6:	f100 0614 	add.w	r6, r0, #20
 8016bfa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016bfe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016c02:	eb06 030c 	add.w	r3, r6, ip
 8016c06:	3501      	adds	r5, #1
 8016c08:	eb07 090c 	add.w	r9, r7, ip
 8016c0c:	9301      	str	r3, [sp, #4]
 8016c0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016c12:	b395      	cbz	r5, 8016c7a <quorem+0x9e>
 8016c14:	f04f 0a00 	mov.w	sl, #0
 8016c18:	4638      	mov	r0, r7
 8016c1a:	46b6      	mov	lr, r6
 8016c1c:	46d3      	mov	fp, sl
 8016c1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c22:	b293      	uxth	r3, r2
 8016c24:	fb05 a303 	mla	r3, r5, r3, sl
 8016c28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	ebab 0303 	sub.w	r3, fp, r3
 8016c32:	0c12      	lsrs	r2, r2, #16
 8016c34:	f8de b000 	ldr.w	fp, [lr]
 8016c38:	fb05 a202 	mla	r2, r5, r2, sl
 8016c3c:	fa13 f38b 	uxtah	r3, r3, fp
 8016c40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016c44:	fa1f fb82 	uxth.w	fp, r2
 8016c48:	f8de 2000 	ldr.w	r2, [lr]
 8016c4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c5a:	4581      	cmp	r9, r0
 8016c5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016c60:	f84e 3b04 	str.w	r3, [lr], #4
 8016c64:	d2db      	bcs.n	8016c1e <quorem+0x42>
 8016c66:	f856 300c 	ldr.w	r3, [r6, ip]
 8016c6a:	b933      	cbnz	r3, 8016c7a <quorem+0x9e>
 8016c6c:	9b01      	ldr	r3, [sp, #4]
 8016c6e:	3b04      	subs	r3, #4
 8016c70:	429e      	cmp	r6, r3
 8016c72:	461a      	mov	r2, r3
 8016c74:	d330      	bcc.n	8016cd8 <quorem+0xfc>
 8016c76:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c7a:	4640      	mov	r0, r8
 8016c7c:	f001 fbaa 	bl	80183d4 <__mcmp>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	db25      	blt.n	8016cd0 <quorem+0xf4>
 8016c84:	3501      	adds	r5, #1
 8016c86:	4630      	mov	r0, r6
 8016c88:	f04f 0c00 	mov.w	ip, #0
 8016c8c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016c90:	f8d0 e000 	ldr.w	lr, [r0]
 8016c94:	b293      	uxth	r3, r2
 8016c96:	ebac 0303 	sub.w	r3, ip, r3
 8016c9a:	0c12      	lsrs	r2, r2, #16
 8016c9c:	fa13 f38e 	uxtah	r3, r3, lr
 8016ca0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cae:	45b9      	cmp	r9, r7
 8016cb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016cb4:	f840 3b04 	str.w	r3, [r0], #4
 8016cb8:	d2e8      	bcs.n	8016c8c <quorem+0xb0>
 8016cba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016cbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016cc2:	b92a      	cbnz	r2, 8016cd0 <quorem+0xf4>
 8016cc4:	3b04      	subs	r3, #4
 8016cc6:	429e      	cmp	r6, r3
 8016cc8:	461a      	mov	r2, r3
 8016cca:	d30b      	bcc.n	8016ce4 <quorem+0x108>
 8016ccc:	f8c8 4010 	str.w	r4, [r8, #16]
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	b003      	add	sp, #12
 8016cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd8:	6812      	ldr	r2, [r2, #0]
 8016cda:	3b04      	subs	r3, #4
 8016cdc:	2a00      	cmp	r2, #0
 8016cde:	d1ca      	bne.n	8016c76 <quorem+0x9a>
 8016ce0:	3c01      	subs	r4, #1
 8016ce2:	e7c5      	b.n	8016c70 <quorem+0x94>
 8016ce4:	6812      	ldr	r2, [r2, #0]
 8016ce6:	3b04      	subs	r3, #4
 8016ce8:	2a00      	cmp	r2, #0
 8016cea:	d1ef      	bne.n	8016ccc <quorem+0xf0>
 8016cec:	3c01      	subs	r4, #1
 8016cee:	e7ea      	b.n	8016cc6 <quorem+0xea>
 8016cf0:	2000      	movs	r0, #0
 8016cf2:	e7ee      	b.n	8016cd2 <quorem+0xf6>
 8016cf4:	0000      	movs	r0, r0
	...

08016cf8 <_dtoa_r>:
 8016cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfc:	ec57 6b10 	vmov	r6, r7, d0
 8016d00:	b097      	sub	sp, #92	; 0x5c
 8016d02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d04:	9106      	str	r1, [sp, #24]
 8016d06:	4604      	mov	r4, r0
 8016d08:	920b      	str	r2, [sp, #44]	; 0x2c
 8016d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8016d0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d10:	e9cd 6700 	strd	r6, r7, [sp]
 8016d14:	b93d      	cbnz	r5, 8016d26 <_dtoa_r+0x2e>
 8016d16:	2010      	movs	r0, #16
 8016d18:	f001 f8ee 	bl	8017ef8 <malloc>
 8016d1c:	6260      	str	r0, [r4, #36]	; 0x24
 8016d1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d22:	6005      	str	r5, [r0, #0]
 8016d24:	60c5      	str	r5, [r0, #12]
 8016d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d28:	6819      	ldr	r1, [r3, #0]
 8016d2a:	b151      	cbz	r1, 8016d42 <_dtoa_r+0x4a>
 8016d2c:	685a      	ldr	r2, [r3, #4]
 8016d2e:	604a      	str	r2, [r1, #4]
 8016d30:	2301      	movs	r3, #1
 8016d32:	4093      	lsls	r3, r2
 8016d34:	608b      	str	r3, [r1, #8]
 8016d36:	4620      	mov	r0, r4
 8016d38:	f001 f92c 	bl	8017f94 <_Bfree>
 8016d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d3e:	2200      	movs	r2, #0
 8016d40:	601a      	str	r2, [r3, #0]
 8016d42:	1e3b      	subs	r3, r7, #0
 8016d44:	bfbb      	ittet	lt
 8016d46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d4a:	9301      	strlt	r3, [sp, #4]
 8016d4c:	2300      	movge	r3, #0
 8016d4e:	2201      	movlt	r2, #1
 8016d50:	bfac      	ite	ge
 8016d52:	f8c8 3000 	strge.w	r3, [r8]
 8016d56:	f8c8 2000 	strlt.w	r2, [r8]
 8016d5a:	4baf      	ldr	r3, [pc, #700]	; (8017018 <_dtoa_r+0x320>)
 8016d5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d60:	ea33 0308 	bics.w	r3, r3, r8
 8016d64:	d114      	bne.n	8016d90 <_dtoa_r+0x98>
 8016d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d68:	f242 730f 	movw	r3, #9999	; 0x270f
 8016d6c:	6013      	str	r3, [r2, #0]
 8016d6e:	9b00      	ldr	r3, [sp, #0]
 8016d70:	b923      	cbnz	r3, 8016d7c <_dtoa_r+0x84>
 8016d72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016d76:	2800      	cmp	r0, #0
 8016d78:	f000 8542 	beq.w	8017800 <_dtoa_r+0xb08>
 8016d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801702c <_dtoa_r+0x334>
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f000 8544 	beq.w	8017810 <_dtoa_r+0xb18>
 8016d88:	f10b 0303 	add.w	r3, fp, #3
 8016d8c:	f000 bd3e 	b.w	801780c <_dtoa_r+0xb14>
 8016d90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d94:	2200      	movs	r2, #0
 8016d96:	2300      	movs	r3, #0
 8016d98:	4630      	mov	r0, r6
 8016d9a:	4639      	mov	r1, r7
 8016d9c:	f7e9 feac 	bl	8000af8 <__aeabi_dcmpeq>
 8016da0:	4681      	mov	r9, r0
 8016da2:	b168      	cbz	r0, 8016dc0 <_dtoa_r+0xc8>
 8016da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016da6:	2301      	movs	r3, #1
 8016da8:	6013      	str	r3, [r2, #0]
 8016daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f000 8524 	beq.w	80177fa <_dtoa_r+0xb02>
 8016db2:	4b9a      	ldr	r3, [pc, #616]	; (801701c <_dtoa_r+0x324>)
 8016db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016db6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016dba:	6013      	str	r3, [r2, #0]
 8016dbc:	f000 bd28 	b.w	8017810 <_dtoa_r+0xb18>
 8016dc0:	aa14      	add	r2, sp, #80	; 0x50
 8016dc2:	a915      	add	r1, sp, #84	; 0x54
 8016dc4:	ec47 6b10 	vmov	d0, r6, r7
 8016dc8:	4620      	mov	r0, r4
 8016dca:	f001 fbf1 	bl	80185b0 <__d2b>
 8016dce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016dd2:	9004      	str	r0, [sp, #16]
 8016dd4:	2d00      	cmp	r5, #0
 8016dd6:	d07c      	beq.n	8016ed2 <_dtoa_r+0x1da>
 8016dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ddc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016de0:	46b2      	mov	sl, r6
 8016de2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016de6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016dea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016dee:	2200      	movs	r2, #0
 8016df0:	4b8b      	ldr	r3, [pc, #556]	; (8017020 <_dtoa_r+0x328>)
 8016df2:	4650      	mov	r0, sl
 8016df4:	4659      	mov	r1, fp
 8016df6:	f7e9 fa5f 	bl	80002b8 <__aeabi_dsub>
 8016dfa:	a381      	add	r3, pc, #516	; (adr r3, 8017000 <_dtoa_r+0x308>)
 8016dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e00:	f7e9 fc12 	bl	8000628 <__aeabi_dmul>
 8016e04:	a380      	add	r3, pc, #512	; (adr r3, 8017008 <_dtoa_r+0x310>)
 8016e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0a:	f7e9 fa57 	bl	80002bc <__adddf3>
 8016e0e:	4606      	mov	r6, r0
 8016e10:	4628      	mov	r0, r5
 8016e12:	460f      	mov	r7, r1
 8016e14:	f7e9 fb9e 	bl	8000554 <__aeabi_i2d>
 8016e18:	a37d      	add	r3, pc, #500	; (adr r3, 8017010 <_dtoa_r+0x318>)
 8016e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e1e:	f7e9 fc03 	bl	8000628 <__aeabi_dmul>
 8016e22:	4602      	mov	r2, r0
 8016e24:	460b      	mov	r3, r1
 8016e26:	4630      	mov	r0, r6
 8016e28:	4639      	mov	r1, r7
 8016e2a:	f7e9 fa47 	bl	80002bc <__adddf3>
 8016e2e:	4606      	mov	r6, r0
 8016e30:	460f      	mov	r7, r1
 8016e32:	f7e9 fea9 	bl	8000b88 <__aeabi_d2iz>
 8016e36:	2200      	movs	r2, #0
 8016e38:	4682      	mov	sl, r0
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	4630      	mov	r0, r6
 8016e3e:	4639      	mov	r1, r7
 8016e40:	f7e9 fe64 	bl	8000b0c <__aeabi_dcmplt>
 8016e44:	b148      	cbz	r0, 8016e5a <_dtoa_r+0x162>
 8016e46:	4650      	mov	r0, sl
 8016e48:	f7e9 fb84 	bl	8000554 <__aeabi_i2d>
 8016e4c:	4632      	mov	r2, r6
 8016e4e:	463b      	mov	r3, r7
 8016e50:	f7e9 fe52 	bl	8000af8 <__aeabi_dcmpeq>
 8016e54:	b908      	cbnz	r0, 8016e5a <_dtoa_r+0x162>
 8016e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e5a:	f1ba 0f16 	cmp.w	sl, #22
 8016e5e:	d859      	bhi.n	8016f14 <_dtoa_r+0x21c>
 8016e60:	4970      	ldr	r1, [pc, #448]	; (8017024 <_dtoa_r+0x32c>)
 8016e62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e6e:	f7e9 fe6b 	bl	8000b48 <__aeabi_dcmpgt>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d050      	beq.n	8016f18 <_dtoa_r+0x220>
 8016e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e80:	1b5d      	subs	r5, r3, r5
 8016e82:	f1b5 0801 	subs.w	r8, r5, #1
 8016e86:	bf49      	itett	mi
 8016e88:	f1c5 0301 	rsbmi	r3, r5, #1
 8016e8c:	2300      	movpl	r3, #0
 8016e8e:	9305      	strmi	r3, [sp, #20]
 8016e90:	f04f 0800 	movmi.w	r8, #0
 8016e94:	bf58      	it	pl
 8016e96:	9305      	strpl	r3, [sp, #20]
 8016e98:	f1ba 0f00 	cmp.w	sl, #0
 8016e9c:	db3e      	blt.n	8016f1c <_dtoa_r+0x224>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	44d0      	add	r8, sl
 8016ea2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016ea6:	9307      	str	r3, [sp, #28]
 8016ea8:	9b06      	ldr	r3, [sp, #24]
 8016eaa:	2b09      	cmp	r3, #9
 8016eac:	f200 8090 	bhi.w	8016fd0 <_dtoa_r+0x2d8>
 8016eb0:	2b05      	cmp	r3, #5
 8016eb2:	bfc4      	itt	gt
 8016eb4:	3b04      	subgt	r3, #4
 8016eb6:	9306      	strgt	r3, [sp, #24]
 8016eb8:	9b06      	ldr	r3, [sp, #24]
 8016eba:	f1a3 0302 	sub.w	r3, r3, #2
 8016ebe:	bfcc      	ite	gt
 8016ec0:	2500      	movgt	r5, #0
 8016ec2:	2501      	movle	r5, #1
 8016ec4:	2b03      	cmp	r3, #3
 8016ec6:	f200 808f 	bhi.w	8016fe8 <_dtoa_r+0x2f0>
 8016eca:	e8df f003 	tbb	[pc, r3]
 8016ece:	7f7d      	.short	0x7f7d
 8016ed0:	7131      	.short	0x7131
 8016ed2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016ed6:	441d      	add	r5, r3
 8016ed8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016edc:	2820      	cmp	r0, #32
 8016ede:	dd13      	ble.n	8016f08 <_dtoa_r+0x210>
 8016ee0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016ee4:	9b00      	ldr	r3, [sp, #0]
 8016ee6:	fa08 f800 	lsl.w	r8, r8, r0
 8016eea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016eee:	fa23 f000 	lsr.w	r0, r3, r0
 8016ef2:	ea48 0000 	orr.w	r0, r8, r0
 8016ef6:	f7e9 fb1d 	bl	8000534 <__aeabi_ui2d>
 8016efa:	2301      	movs	r3, #1
 8016efc:	4682      	mov	sl, r0
 8016efe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016f02:	3d01      	subs	r5, #1
 8016f04:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f06:	e772      	b.n	8016dee <_dtoa_r+0xf6>
 8016f08:	9b00      	ldr	r3, [sp, #0]
 8016f0a:	f1c0 0020 	rsb	r0, r0, #32
 8016f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8016f12:	e7f0      	b.n	8016ef6 <_dtoa_r+0x1fe>
 8016f14:	2301      	movs	r3, #1
 8016f16:	e7b1      	b.n	8016e7c <_dtoa_r+0x184>
 8016f18:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f1a:	e7b0      	b.n	8016e7e <_dtoa_r+0x186>
 8016f1c:	9b05      	ldr	r3, [sp, #20]
 8016f1e:	eba3 030a 	sub.w	r3, r3, sl
 8016f22:	9305      	str	r3, [sp, #20]
 8016f24:	f1ca 0300 	rsb	r3, sl, #0
 8016f28:	9307      	str	r3, [sp, #28]
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8016f2e:	e7bb      	b.n	8016ea8 <_dtoa_r+0x1b0>
 8016f30:	2301      	movs	r3, #1
 8016f32:	930a      	str	r3, [sp, #40]	; 0x28
 8016f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	dd59      	ble.n	8016fee <_dtoa_r+0x2f6>
 8016f3a:	9302      	str	r3, [sp, #8]
 8016f3c:	4699      	mov	r9, r3
 8016f3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016f40:	2200      	movs	r2, #0
 8016f42:	6072      	str	r2, [r6, #4]
 8016f44:	2204      	movs	r2, #4
 8016f46:	f102 0014 	add.w	r0, r2, #20
 8016f4a:	4298      	cmp	r0, r3
 8016f4c:	6871      	ldr	r1, [r6, #4]
 8016f4e:	d953      	bls.n	8016ff8 <_dtoa_r+0x300>
 8016f50:	4620      	mov	r0, r4
 8016f52:	f000 ffeb 	bl	8017f2c <_Balloc>
 8016f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f58:	6030      	str	r0, [r6, #0]
 8016f5a:	f1b9 0f0e 	cmp.w	r9, #14
 8016f5e:	f8d3 b000 	ldr.w	fp, [r3]
 8016f62:	f200 80e6 	bhi.w	8017132 <_dtoa_r+0x43a>
 8016f66:	2d00      	cmp	r5, #0
 8016f68:	f000 80e3 	beq.w	8017132 <_dtoa_r+0x43a>
 8016f6c:	ed9d 7b00 	vldr	d7, [sp]
 8016f70:	f1ba 0f00 	cmp.w	sl, #0
 8016f74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016f78:	dd74      	ble.n	8017064 <_dtoa_r+0x36c>
 8016f7a:	4a2a      	ldr	r2, [pc, #168]	; (8017024 <_dtoa_r+0x32c>)
 8016f7c:	f00a 030f 	and.w	r3, sl, #15
 8016f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016f84:	ed93 7b00 	vldr	d7, [r3]
 8016f88:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016f8c:	06f0      	lsls	r0, r6, #27
 8016f8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016f92:	d565      	bpl.n	8017060 <_dtoa_r+0x368>
 8016f94:	4b24      	ldr	r3, [pc, #144]	; (8017028 <_dtoa_r+0x330>)
 8016f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016f9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f9e:	f7e9 fc6d 	bl	800087c <__aeabi_ddiv>
 8016fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8016fa6:	f006 060f 	and.w	r6, r6, #15
 8016faa:	2503      	movs	r5, #3
 8016fac:	4f1e      	ldr	r7, [pc, #120]	; (8017028 <_dtoa_r+0x330>)
 8016fae:	e04c      	b.n	801704a <_dtoa_r+0x352>
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8016fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fb6:	4453      	add	r3, sl
 8016fb8:	f103 0901 	add.w	r9, r3, #1
 8016fbc:	9302      	str	r3, [sp, #8]
 8016fbe:	464b      	mov	r3, r9
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	bfb8      	it	lt
 8016fc4:	2301      	movlt	r3, #1
 8016fc6:	e7ba      	b.n	8016f3e <_dtoa_r+0x246>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	e7b2      	b.n	8016f32 <_dtoa_r+0x23a>
 8016fcc:	2300      	movs	r3, #0
 8016fce:	e7f0      	b.n	8016fb2 <_dtoa_r+0x2ba>
 8016fd0:	2501      	movs	r5, #1
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	9306      	str	r3, [sp, #24]
 8016fd6:	950a      	str	r5, [sp, #40]	; 0x28
 8016fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fdc:	9302      	str	r3, [sp, #8]
 8016fde:	4699      	mov	r9, r3
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	2312      	movs	r3, #18
 8016fe4:	920b      	str	r2, [sp, #44]	; 0x2c
 8016fe6:	e7aa      	b.n	8016f3e <_dtoa_r+0x246>
 8016fe8:	2301      	movs	r3, #1
 8016fea:	930a      	str	r3, [sp, #40]	; 0x28
 8016fec:	e7f4      	b.n	8016fd8 <_dtoa_r+0x2e0>
 8016fee:	2301      	movs	r3, #1
 8016ff0:	9302      	str	r3, [sp, #8]
 8016ff2:	4699      	mov	r9, r3
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	e7f5      	b.n	8016fe4 <_dtoa_r+0x2ec>
 8016ff8:	3101      	adds	r1, #1
 8016ffa:	6071      	str	r1, [r6, #4]
 8016ffc:	0052      	lsls	r2, r2, #1
 8016ffe:	e7a2      	b.n	8016f46 <_dtoa_r+0x24e>
 8017000:	636f4361 	.word	0x636f4361
 8017004:	3fd287a7 	.word	0x3fd287a7
 8017008:	8b60c8b3 	.word	0x8b60c8b3
 801700c:	3fc68a28 	.word	0x3fc68a28
 8017010:	509f79fb 	.word	0x509f79fb
 8017014:	3fd34413 	.word	0x3fd34413
 8017018:	7ff00000 	.word	0x7ff00000
 801701c:	08019f3c 	.word	0x08019f3c
 8017020:	3ff80000 	.word	0x3ff80000
 8017024:	08019e40 	.word	0x08019e40
 8017028:	08019e18 	.word	0x08019e18
 801702c:	08019da1 	.word	0x08019da1
 8017030:	07f1      	lsls	r1, r6, #31
 8017032:	d508      	bpl.n	8017046 <_dtoa_r+0x34e>
 8017034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017038:	e9d7 2300 	ldrd	r2, r3, [r7]
 801703c:	f7e9 faf4 	bl	8000628 <__aeabi_dmul>
 8017040:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017044:	3501      	adds	r5, #1
 8017046:	1076      	asrs	r6, r6, #1
 8017048:	3708      	adds	r7, #8
 801704a:	2e00      	cmp	r6, #0
 801704c:	d1f0      	bne.n	8017030 <_dtoa_r+0x338>
 801704e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017056:	f7e9 fc11 	bl	800087c <__aeabi_ddiv>
 801705a:	e9cd 0100 	strd	r0, r1, [sp]
 801705e:	e01a      	b.n	8017096 <_dtoa_r+0x39e>
 8017060:	2502      	movs	r5, #2
 8017062:	e7a3      	b.n	8016fac <_dtoa_r+0x2b4>
 8017064:	f000 80a0 	beq.w	80171a8 <_dtoa_r+0x4b0>
 8017068:	f1ca 0600 	rsb	r6, sl, #0
 801706c:	4b9f      	ldr	r3, [pc, #636]	; (80172ec <_dtoa_r+0x5f4>)
 801706e:	4fa0      	ldr	r7, [pc, #640]	; (80172f0 <_dtoa_r+0x5f8>)
 8017070:	f006 020f 	and.w	r2, r6, #15
 8017074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801707c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017080:	f7e9 fad2 	bl	8000628 <__aeabi_dmul>
 8017084:	e9cd 0100 	strd	r0, r1, [sp]
 8017088:	1136      	asrs	r6, r6, #4
 801708a:	2300      	movs	r3, #0
 801708c:	2502      	movs	r5, #2
 801708e:	2e00      	cmp	r6, #0
 8017090:	d17f      	bne.n	8017192 <_dtoa_r+0x49a>
 8017092:	2b00      	cmp	r3, #0
 8017094:	d1e1      	bne.n	801705a <_dtoa_r+0x362>
 8017096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017098:	2b00      	cmp	r3, #0
 801709a:	f000 8087 	beq.w	80171ac <_dtoa_r+0x4b4>
 801709e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80170a2:	2200      	movs	r2, #0
 80170a4:	4b93      	ldr	r3, [pc, #588]	; (80172f4 <_dtoa_r+0x5fc>)
 80170a6:	4630      	mov	r0, r6
 80170a8:	4639      	mov	r1, r7
 80170aa:	f7e9 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d07c      	beq.n	80171ac <_dtoa_r+0x4b4>
 80170b2:	f1b9 0f00 	cmp.w	r9, #0
 80170b6:	d079      	beq.n	80171ac <_dtoa_r+0x4b4>
 80170b8:	9b02      	ldr	r3, [sp, #8]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	dd35      	ble.n	801712a <_dtoa_r+0x432>
 80170be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80170c2:	9308      	str	r3, [sp, #32]
 80170c4:	4639      	mov	r1, r7
 80170c6:	2200      	movs	r2, #0
 80170c8:	4b8b      	ldr	r3, [pc, #556]	; (80172f8 <_dtoa_r+0x600>)
 80170ca:	4630      	mov	r0, r6
 80170cc:	f7e9 faac 	bl	8000628 <__aeabi_dmul>
 80170d0:	e9cd 0100 	strd	r0, r1, [sp]
 80170d4:	9f02      	ldr	r7, [sp, #8]
 80170d6:	3501      	adds	r5, #1
 80170d8:	4628      	mov	r0, r5
 80170da:	f7e9 fa3b 	bl	8000554 <__aeabi_i2d>
 80170de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170e2:	f7e9 faa1 	bl	8000628 <__aeabi_dmul>
 80170e6:	2200      	movs	r2, #0
 80170e8:	4b84      	ldr	r3, [pc, #528]	; (80172fc <_dtoa_r+0x604>)
 80170ea:	f7e9 f8e7 	bl	80002bc <__adddf3>
 80170ee:	4605      	mov	r5, r0
 80170f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80170f4:	2f00      	cmp	r7, #0
 80170f6:	d15d      	bne.n	80171b4 <_dtoa_r+0x4bc>
 80170f8:	2200      	movs	r2, #0
 80170fa:	4b81      	ldr	r3, [pc, #516]	; (8017300 <_dtoa_r+0x608>)
 80170fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017100:	f7e9 f8da 	bl	80002b8 <__aeabi_dsub>
 8017104:	462a      	mov	r2, r5
 8017106:	4633      	mov	r3, r6
 8017108:	e9cd 0100 	strd	r0, r1, [sp]
 801710c:	f7e9 fd1c 	bl	8000b48 <__aeabi_dcmpgt>
 8017110:	2800      	cmp	r0, #0
 8017112:	f040 8288 	bne.w	8017626 <_dtoa_r+0x92e>
 8017116:	462a      	mov	r2, r5
 8017118:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801711c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017120:	f7e9 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 8017124:	2800      	cmp	r0, #0
 8017126:	f040 827c 	bne.w	8017622 <_dtoa_r+0x92a>
 801712a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801712e:	e9cd 2300 	strd	r2, r3, [sp]
 8017132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017134:	2b00      	cmp	r3, #0
 8017136:	f2c0 8150 	blt.w	80173da <_dtoa_r+0x6e2>
 801713a:	f1ba 0f0e 	cmp.w	sl, #14
 801713e:	f300 814c 	bgt.w	80173da <_dtoa_r+0x6e2>
 8017142:	4b6a      	ldr	r3, [pc, #424]	; (80172ec <_dtoa_r+0x5f4>)
 8017144:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017148:	ed93 7b00 	vldr	d7, [r3]
 801714c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801714e:	2b00      	cmp	r3, #0
 8017150:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017154:	f280 80d8 	bge.w	8017308 <_dtoa_r+0x610>
 8017158:	f1b9 0f00 	cmp.w	r9, #0
 801715c:	f300 80d4 	bgt.w	8017308 <_dtoa_r+0x610>
 8017160:	f040 825e 	bne.w	8017620 <_dtoa_r+0x928>
 8017164:	2200      	movs	r2, #0
 8017166:	4b66      	ldr	r3, [pc, #408]	; (8017300 <_dtoa_r+0x608>)
 8017168:	ec51 0b17 	vmov	r0, r1, d7
 801716c:	f7e9 fa5c 	bl	8000628 <__aeabi_dmul>
 8017170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017174:	f7e9 fcde 	bl	8000b34 <__aeabi_dcmpge>
 8017178:	464f      	mov	r7, r9
 801717a:	464e      	mov	r6, r9
 801717c:	2800      	cmp	r0, #0
 801717e:	f040 8234 	bne.w	80175ea <_dtoa_r+0x8f2>
 8017182:	2331      	movs	r3, #49	; 0x31
 8017184:	f10b 0501 	add.w	r5, fp, #1
 8017188:	f88b 3000 	strb.w	r3, [fp]
 801718c:	f10a 0a01 	add.w	sl, sl, #1
 8017190:	e22f      	b.n	80175f2 <_dtoa_r+0x8fa>
 8017192:	07f2      	lsls	r2, r6, #31
 8017194:	d505      	bpl.n	80171a2 <_dtoa_r+0x4aa>
 8017196:	e9d7 2300 	ldrd	r2, r3, [r7]
 801719a:	f7e9 fa45 	bl	8000628 <__aeabi_dmul>
 801719e:	3501      	adds	r5, #1
 80171a0:	2301      	movs	r3, #1
 80171a2:	1076      	asrs	r6, r6, #1
 80171a4:	3708      	adds	r7, #8
 80171a6:	e772      	b.n	801708e <_dtoa_r+0x396>
 80171a8:	2502      	movs	r5, #2
 80171aa:	e774      	b.n	8017096 <_dtoa_r+0x39e>
 80171ac:	f8cd a020 	str.w	sl, [sp, #32]
 80171b0:	464f      	mov	r7, r9
 80171b2:	e791      	b.n	80170d8 <_dtoa_r+0x3e0>
 80171b4:	4b4d      	ldr	r3, [pc, #308]	; (80172ec <_dtoa_r+0x5f4>)
 80171b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80171be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d047      	beq.n	8017254 <_dtoa_r+0x55c>
 80171c4:	4602      	mov	r2, r0
 80171c6:	460b      	mov	r3, r1
 80171c8:	2000      	movs	r0, #0
 80171ca:	494e      	ldr	r1, [pc, #312]	; (8017304 <_dtoa_r+0x60c>)
 80171cc:	f7e9 fb56 	bl	800087c <__aeabi_ddiv>
 80171d0:	462a      	mov	r2, r5
 80171d2:	4633      	mov	r3, r6
 80171d4:	f7e9 f870 	bl	80002b8 <__aeabi_dsub>
 80171d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80171dc:	465d      	mov	r5, fp
 80171de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171e2:	f7e9 fcd1 	bl	8000b88 <__aeabi_d2iz>
 80171e6:	4606      	mov	r6, r0
 80171e8:	f7e9 f9b4 	bl	8000554 <__aeabi_i2d>
 80171ec:	4602      	mov	r2, r0
 80171ee:	460b      	mov	r3, r1
 80171f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171f4:	f7e9 f860 	bl	80002b8 <__aeabi_dsub>
 80171f8:	3630      	adds	r6, #48	; 0x30
 80171fa:	f805 6b01 	strb.w	r6, [r5], #1
 80171fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017202:	e9cd 0100 	strd	r0, r1, [sp]
 8017206:	f7e9 fc81 	bl	8000b0c <__aeabi_dcmplt>
 801720a:	2800      	cmp	r0, #0
 801720c:	d163      	bne.n	80172d6 <_dtoa_r+0x5de>
 801720e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017212:	2000      	movs	r0, #0
 8017214:	4937      	ldr	r1, [pc, #220]	; (80172f4 <_dtoa_r+0x5fc>)
 8017216:	f7e9 f84f 	bl	80002b8 <__aeabi_dsub>
 801721a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801721e:	f7e9 fc75 	bl	8000b0c <__aeabi_dcmplt>
 8017222:	2800      	cmp	r0, #0
 8017224:	f040 80b7 	bne.w	8017396 <_dtoa_r+0x69e>
 8017228:	eba5 030b 	sub.w	r3, r5, fp
 801722c:	429f      	cmp	r7, r3
 801722e:	f77f af7c 	ble.w	801712a <_dtoa_r+0x432>
 8017232:	2200      	movs	r2, #0
 8017234:	4b30      	ldr	r3, [pc, #192]	; (80172f8 <_dtoa_r+0x600>)
 8017236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801723a:	f7e9 f9f5 	bl	8000628 <__aeabi_dmul>
 801723e:	2200      	movs	r2, #0
 8017240:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017244:	4b2c      	ldr	r3, [pc, #176]	; (80172f8 <_dtoa_r+0x600>)
 8017246:	e9dd 0100 	ldrd	r0, r1, [sp]
 801724a:	f7e9 f9ed 	bl	8000628 <__aeabi_dmul>
 801724e:	e9cd 0100 	strd	r0, r1, [sp]
 8017252:	e7c4      	b.n	80171de <_dtoa_r+0x4e6>
 8017254:	462a      	mov	r2, r5
 8017256:	4633      	mov	r3, r6
 8017258:	f7e9 f9e6 	bl	8000628 <__aeabi_dmul>
 801725c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017260:	eb0b 0507 	add.w	r5, fp, r7
 8017264:	465e      	mov	r6, fp
 8017266:	e9dd 0100 	ldrd	r0, r1, [sp]
 801726a:	f7e9 fc8d 	bl	8000b88 <__aeabi_d2iz>
 801726e:	4607      	mov	r7, r0
 8017270:	f7e9 f970 	bl	8000554 <__aeabi_i2d>
 8017274:	3730      	adds	r7, #48	; 0x30
 8017276:	4602      	mov	r2, r0
 8017278:	460b      	mov	r3, r1
 801727a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801727e:	f7e9 f81b 	bl	80002b8 <__aeabi_dsub>
 8017282:	f806 7b01 	strb.w	r7, [r6], #1
 8017286:	42ae      	cmp	r6, r5
 8017288:	e9cd 0100 	strd	r0, r1, [sp]
 801728c:	f04f 0200 	mov.w	r2, #0
 8017290:	d126      	bne.n	80172e0 <_dtoa_r+0x5e8>
 8017292:	4b1c      	ldr	r3, [pc, #112]	; (8017304 <_dtoa_r+0x60c>)
 8017294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017298:	f7e9 f810 	bl	80002bc <__adddf3>
 801729c:	4602      	mov	r2, r0
 801729e:	460b      	mov	r3, r1
 80172a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172a4:	f7e9 fc50 	bl	8000b48 <__aeabi_dcmpgt>
 80172a8:	2800      	cmp	r0, #0
 80172aa:	d174      	bne.n	8017396 <_dtoa_r+0x69e>
 80172ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172b0:	2000      	movs	r0, #0
 80172b2:	4914      	ldr	r1, [pc, #80]	; (8017304 <_dtoa_r+0x60c>)
 80172b4:	f7e9 f800 	bl	80002b8 <__aeabi_dsub>
 80172b8:	4602      	mov	r2, r0
 80172ba:	460b      	mov	r3, r1
 80172bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172c0:	f7e9 fc24 	bl	8000b0c <__aeabi_dcmplt>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f43f af30 	beq.w	801712a <_dtoa_r+0x432>
 80172ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80172ce:	2b30      	cmp	r3, #48	; 0x30
 80172d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80172d4:	d002      	beq.n	80172dc <_dtoa_r+0x5e4>
 80172d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80172da:	e04a      	b.n	8017372 <_dtoa_r+0x67a>
 80172dc:	4615      	mov	r5, r2
 80172de:	e7f4      	b.n	80172ca <_dtoa_r+0x5d2>
 80172e0:	4b05      	ldr	r3, [pc, #20]	; (80172f8 <_dtoa_r+0x600>)
 80172e2:	f7e9 f9a1 	bl	8000628 <__aeabi_dmul>
 80172e6:	e9cd 0100 	strd	r0, r1, [sp]
 80172ea:	e7bc      	b.n	8017266 <_dtoa_r+0x56e>
 80172ec:	08019e40 	.word	0x08019e40
 80172f0:	08019e18 	.word	0x08019e18
 80172f4:	3ff00000 	.word	0x3ff00000
 80172f8:	40240000 	.word	0x40240000
 80172fc:	401c0000 	.word	0x401c0000
 8017300:	40140000 	.word	0x40140000
 8017304:	3fe00000 	.word	0x3fe00000
 8017308:	e9dd 6700 	ldrd	r6, r7, [sp]
 801730c:	465d      	mov	r5, fp
 801730e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017312:	4630      	mov	r0, r6
 8017314:	4639      	mov	r1, r7
 8017316:	f7e9 fab1 	bl	800087c <__aeabi_ddiv>
 801731a:	f7e9 fc35 	bl	8000b88 <__aeabi_d2iz>
 801731e:	4680      	mov	r8, r0
 8017320:	f7e9 f918 	bl	8000554 <__aeabi_i2d>
 8017324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017328:	f7e9 f97e 	bl	8000628 <__aeabi_dmul>
 801732c:	4602      	mov	r2, r0
 801732e:	460b      	mov	r3, r1
 8017330:	4630      	mov	r0, r6
 8017332:	4639      	mov	r1, r7
 8017334:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017338:	f7e8 ffbe 	bl	80002b8 <__aeabi_dsub>
 801733c:	f805 6b01 	strb.w	r6, [r5], #1
 8017340:	eba5 060b 	sub.w	r6, r5, fp
 8017344:	45b1      	cmp	r9, r6
 8017346:	4602      	mov	r2, r0
 8017348:	460b      	mov	r3, r1
 801734a:	d139      	bne.n	80173c0 <_dtoa_r+0x6c8>
 801734c:	f7e8 ffb6 	bl	80002bc <__adddf3>
 8017350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017354:	4606      	mov	r6, r0
 8017356:	460f      	mov	r7, r1
 8017358:	f7e9 fbf6 	bl	8000b48 <__aeabi_dcmpgt>
 801735c:	b9c8      	cbnz	r0, 8017392 <_dtoa_r+0x69a>
 801735e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017362:	4630      	mov	r0, r6
 8017364:	4639      	mov	r1, r7
 8017366:	f7e9 fbc7 	bl	8000af8 <__aeabi_dcmpeq>
 801736a:	b110      	cbz	r0, 8017372 <_dtoa_r+0x67a>
 801736c:	f018 0f01 	tst.w	r8, #1
 8017370:	d10f      	bne.n	8017392 <_dtoa_r+0x69a>
 8017372:	9904      	ldr	r1, [sp, #16]
 8017374:	4620      	mov	r0, r4
 8017376:	f000 fe0d 	bl	8017f94 <_Bfree>
 801737a:	2300      	movs	r3, #0
 801737c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801737e:	702b      	strb	r3, [r5, #0]
 8017380:	f10a 0301 	add.w	r3, sl, #1
 8017384:	6013      	str	r3, [r2, #0]
 8017386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017388:	2b00      	cmp	r3, #0
 801738a:	f000 8241 	beq.w	8017810 <_dtoa_r+0xb18>
 801738e:	601d      	str	r5, [r3, #0]
 8017390:	e23e      	b.n	8017810 <_dtoa_r+0xb18>
 8017392:	f8cd a020 	str.w	sl, [sp, #32]
 8017396:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801739a:	2a39      	cmp	r2, #57	; 0x39
 801739c:	f105 33ff 	add.w	r3, r5, #4294967295
 80173a0:	d108      	bne.n	80173b4 <_dtoa_r+0x6bc>
 80173a2:	459b      	cmp	fp, r3
 80173a4:	d10a      	bne.n	80173bc <_dtoa_r+0x6c4>
 80173a6:	9b08      	ldr	r3, [sp, #32]
 80173a8:	3301      	adds	r3, #1
 80173aa:	9308      	str	r3, [sp, #32]
 80173ac:	2330      	movs	r3, #48	; 0x30
 80173ae:	f88b 3000 	strb.w	r3, [fp]
 80173b2:	465b      	mov	r3, fp
 80173b4:	781a      	ldrb	r2, [r3, #0]
 80173b6:	3201      	adds	r2, #1
 80173b8:	701a      	strb	r2, [r3, #0]
 80173ba:	e78c      	b.n	80172d6 <_dtoa_r+0x5de>
 80173bc:	461d      	mov	r5, r3
 80173be:	e7ea      	b.n	8017396 <_dtoa_r+0x69e>
 80173c0:	2200      	movs	r2, #0
 80173c2:	4b9b      	ldr	r3, [pc, #620]	; (8017630 <_dtoa_r+0x938>)
 80173c4:	f7e9 f930 	bl	8000628 <__aeabi_dmul>
 80173c8:	2200      	movs	r2, #0
 80173ca:	2300      	movs	r3, #0
 80173cc:	4606      	mov	r6, r0
 80173ce:	460f      	mov	r7, r1
 80173d0:	f7e9 fb92 	bl	8000af8 <__aeabi_dcmpeq>
 80173d4:	2800      	cmp	r0, #0
 80173d6:	d09a      	beq.n	801730e <_dtoa_r+0x616>
 80173d8:	e7cb      	b.n	8017372 <_dtoa_r+0x67a>
 80173da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173dc:	2a00      	cmp	r2, #0
 80173de:	f000 808b 	beq.w	80174f8 <_dtoa_r+0x800>
 80173e2:	9a06      	ldr	r2, [sp, #24]
 80173e4:	2a01      	cmp	r2, #1
 80173e6:	dc6e      	bgt.n	80174c6 <_dtoa_r+0x7ce>
 80173e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80173ea:	2a00      	cmp	r2, #0
 80173ec:	d067      	beq.n	80174be <_dtoa_r+0x7c6>
 80173ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80173f2:	9f07      	ldr	r7, [sp, #28]
 80173f4:	9d05      	ldr	r5, [sp, #20]
 80173f6:	9a05      	ldr	r2, [sp, #20]
 80173f8:	2101      	movs	r1, #1
 80173fa:	441a      	add	r2, r3
 80173fc:	4620      	mov	r0, r4
 80173fe:	9205      	str	r2, [sp, #20]
 8017400:	4498      	add	r8, r3
 8017402:	f000 fea5 	bl	8018150 <__i2b>
 8017406:	4606      	mov	r6, r0
 8017408:	2d00      	cmp	r5, #0
 801740a:	dd0c      	ble.n	8017426 <_dtoa_r+0x72e>
 801740c:	f1b8 0f00 	cmp.w	r8, #0
 8017410:	dd09      	ble.n	8017426 <_dtoa_r+0x72e>
 8017412:	4545      	cmp	r5, r8
 8017414:	9a05      	ldr	r2, [sp, #20]
 8017416:	462b      	mov	r3, r5
 8017418:	bfa8      	it	ge
 801741a:	4643      	movge	r3, r8
 801741c:	1ad2      	subs	r2, r2, r3
 801741e:	9205      	str	r2, [sp, #20]
 8017420:	1aed      	subs	r5, r5, r3
 8017422:	eba8 0803 	sub.w	r8, r8, r3
 8017426:	9b07      	ldr	r3, [sp, #28]
 8017428:	b1eb      	cbz	r3, 8017466 <_dtoa_r+0x76e>
 801742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801742c:	2b00      	cmp	r3, #0
 801742e:	d067      	beq.n	8017500 <_dtoa_r+0x808>
 8017430:	b18f      	cbz	r7, 8017456 <_dtoa_r+0x75e>
 8017432:	4631      	mov	r1, r6
 8017434:	463a      	mov	r2, r7
 8017436:	4620      	mov	r0, r4
 8017438:	f000 ff2a 	bl	8018290 <__pow5mult>
 801743c:	9a04      	ldr	r2, [sp, #16]
 801743e:	4601      	mov	r1, r0
 8017440:	4606      	mov	r6, r0
 8017442:	4620      	mov	r0, r4
 8017444:	f000 fe8d 	bl	8018162 <__multiply>
 8017448:	9904      	ldr	r1, [sp, #16]
 801744a:	9008      	str	r0, [sp, #32]
 801744c:	4620      	mov	r0, r4
 801744e:	f000 fda1 	bl	8017f94 <_Bfree>
 8017452:	9b08      	ldr	r3, [sp, #32]
 8017454:	9304      	str	r3, [sp, #16]
 8017456:	9b07      	ldr	r3, [sp, #28]
 8017458:	1bda      	subs	r2, r3, r7
 801745a:	d004      	beq.n	8017466 <_dtoa_r+0x76e>
 801745c:	9904      	ldr	r1, [sp, #16]
 801745e:	4620      	mov	r0, r4
 8017460:	f000 ff16 	bl	8018290 <__pow5mult>
 8017464:	9004      	str	r0, [sp, #16]
 8017466:	2101      	movs	r1, #1
 8017468:	4620      	mov	r0, r4
 801746a:	f000 fe71 	bl	8018150 <__i2b>
 801746e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017470:	4607      	mov	r7, r0
 8017472:	2b00      	cmp	r3, #0
 8017474:	f000 81d0 	beq.w	8017818 <_dtoa_r+0xb20>
 8017478:	461a      	mov	r2, r3
 801747a:	4601      	mov	r1, r0
 801747c:	4620      	mov	r0, r4
 801747e:	f000 ff07 	bl	8018290 <__pow5mult>
 8017482:	9b06      	ldr	r3, [sp, #24]
 8017484:	2b01      	cmp	r3, #1
 8017486:	4607      	mov	r7, r0
 8017488:	dc40      	bgt.n	801750c <_dtoa_r+0x814>
 801748a:	9b00      	ldr	r3, [sp, #0]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d139      	bne.n	8017504 <_dtoa_r+0x80c>
 8017490:	9b01      	ldr	r3, [sp, #4]
 8017492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017496:	2b00      	cmp	r3, #0
 8017498:	d136      	bne.n	8017508 <_dtoa_r+0x810>
 801749a:	9b01      	ldr	r3, [sp, #4]
 801749c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174a0:	0d1b      	lsrs	r3, r3, #20
 80174a2:	051b      	lsls	r3, r3, #20
 80174a4:	b12b      	cbz	r3, 80174b2 <_dtoa_r+0x7ba>
 80174a6:	9b05      	ldr	r3, [sp, #20]
 80174a8:	3301      	adds	r3, #1
 80174aa:	9305      	str	r3, [sp, #20]
 80174ac:	f108 0801 	add.w	r8, r8, #1
 80174b0:	2301      	movs	r3, #1
 80174b2:	9307      	str	r3, [sp, #28]
 80174b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d12a      	bne.n	8017510 <_dtoa_r+0x818>
 80174ba:	2001      	movs	r0, #1
 80174bc:	e030      	b.n	8017520 <_dtoa_r+0x828>
 80174be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80174c4:	e795      	b.n	80173f2 <_dtoa_r+0x6fa>
 80174c6:	9b07      	ldr	r3, [sp, #28]
 80174c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80174cc:	42bb      	cmp	r3, r7
 80174ce:	bfbf      	itttt	lt
 80174d0:	9b07      	ldrlt	r3, [sp, #28]
 80174d2:	9707      	strlt	r7, [sp, #28]
 80174d4:	1afa      	sublt	r2, r7, r3
 80174d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80174d8:	bfbb      	ittet	lt
 80174da:	189b      	addlt	r3, r3, r2
 80174dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80174de:	1bdf      	subge	r7, r3, r7
 80174e0:	2700      	movlt	r7, #0
 80174e2:	f1b9 0f00 	cmp.w	r9, #0
 80174e6:	bfb5      	itete	lt
 80174e8:	9b05      	ldrlt	r3, [sp, #20]
 80174ea:	9d05      	ldrge	r5, [sp, #20]
 80174ec:	eba3 0509 	sublt.w	r5, r3, r9
 80174f0:	464b      	movge	r3, r9
 80174f2:	bfb8      	it	lt
 80174f4:	2300      	movlt	r3, #0
 80174f6:	e77e      	b.n	80173f6 <_dtoa_r+0x6fe>
 80174f8:	9f07      	ldr	r7, [sp, #28]
 80174fa:	9d05      	ldr	r5, [sp, #20]
 80174fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80174fe:	e783      	b.n	8017408 <_dtoa_r+0x710>
 8017500:	9a07      	ldr	r2, [sp, #28]
 8017502:	e7ab      	b.n	801745c <_dtoa_r+0x764>
 8017504:	2300      	movs	r3, #0
 8017506:	e7d4      	b.n	80174b2 <_dtoa_r+0x7ba>
 8017508:	9b00      	ldr	r3, [sp, #0]
 801750a:	e7d2      	b.n	80174b2 <_dtoa_r+0x7ba>
 801750c:	2300      	movs	r3, #0
 801750e:	9307      	str	r3, [sp, #28]
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017516:	6918      	ldr	r0, [r3, #16]
 8017518:	f000 fdcc 	bl	80180b4 <__hi0bits>
 801751c:	f1c0 0020 	rsb	r0, r0, #32
 8017520:	4440      	add	r0, r8
 8017522:	f010 001f 	ands.w	r0, r0, #31
 8017526:	d047      	beq.n	80175b8 <_dtoa_r+0x8c0>
 8017528:	f1c0 0320 	rsb	r3, r0, #32
 801752c:	2b04      	cmp	r3, #4
 801752e:	dd3b      	ble.n	80175a8 <_dtoa_r+0x8b0>
 8017530:	9b05      	ldr	r3, [sp, #20]
 8017532:	f1c0 001c 	rsb	r0, r0, #28
 8017536:	4403      	add	r3, r0
 8017538:	9305      	str	r3, [sp, #20]
 801753a:	4405      	add	r5, r0
 801753c:	4480      	add	r8, r0
 801753e:	9b05      	ldr	r3, [sp, #20]
 8017540:	2b00      	cmp	r3, #0
 8017542:	dd05      	ble.n	8017550 <_dtoa_r+0x858>
 8017544:	461a      	mov	r2, r3
 8017546:	9904      	ldr	r1, [sp, #16]
 8017548:	4620      	mov	r0, r4
 801754a:	f000 feef 	bl	801832c <__lshift>
 801754e:	9004      	str	r0, [sp, #16]
 8017550:	f1b8 0f00 	cmp.w	r8, #0
 8017554:	dd05      	ble.n	8017562 <_dtoa_r+0x86a>
 8017556:	4639      	mov	r1, r7
 8017558:	4642      	mov	r2, r8
 801755a:	4620      	mov	r0, r4
 801755c:	f000 fee6 	bl	801832c <__lshift>
 8017560:	4607      	mov	r7, r0
 8017562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017564:	b353      	cbz	r3, 80175bc <_dtoa_r+0x8c4>
 8017566:	4639      	mov	r1, r7
 8017568:	9804      	ldr	r0, [sp, #16]
 801756a:	f000 ff33 	bl	80183d4 <__mcmp>
 801756e:	2800      	cmp	r0, #0
 8017570:	da24      	bge.n	80175bc <_dtoa_r+0x8c4>
 8017572:	2300      	movs	r3, #0
 8017574:	220a      	movs	r2, #10
 8017576:	9904      	ldr	r1, [sp, #16]
 8017578:	4620      	mov	r0, r4
 801757a:	f000 fd22 	bl	8017fc2 <__multadd>
 801757e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017580:	9004      	str	r0, [sp, #16]
 8017582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017586:	2b00      	cmp	r3, #0
 8017588:	f000 814d 	beq.w	8017826 <_dtoa_r+0xb2e>
 801758c:	2300      	movs	r3, #0
 801758e:	4631      	mov	r1, r6
 8017590:	220a      	movs	r2, #10
 8017592:	4620      	mov	r0, r4
 8017594:	f000 fd15 	bl	8017fc2 <__multadd>
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	2b00      	cmp	r3, #0
 801759c:	4606      	mov	r6, r0
 801759e:	dc4f      	bgt.n	8017640 <_dtoa_r+0x948>
 80175a0:	9b06      	ldr	r3, [sp, #24]
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	dd4c      	ble.n	8017640 <_dtoa_r+0x948>
 80175a6:	e011      	b.n	80175cc <_dtoa_r+0x8d4>
 80175a8:	d0c9      	beq.n	801753e <_dtoa_r+0x846>
 80175aa:	9a05      	ldr	r2, [sp, #20]
 80175ac:	331c      	adds	r3, #28
 80175ae:	441a      	add	r2, r3
 80175b0:	9205      	str	r2, [sp, #20]
 80175b2:	441d      	add	r5, r3
 80175b4:	4498      	add	r8, r3
 80175b6:	e7c2      	b.n	801753e <_dtoa_r+0x846>
 80175b8:	4603      	mov	r3, r0
 80175ba:	e7f6      	b.n	80175aa <_dtoa_r+0x8b2>
 80175bc:	f1b9 0f00 	cmp.w	r9, #0
 80175c0:	dc38      	bgt.n	8017634 <_dtoa_r+0x93c>
 80175c2:	9b06      	ldr	r3, [sp, #24]
 80175c4:	2b02      	cmp	r3, #2
 80175c6:	dd35      	ble.n	8017634 <_dtoa_r+0x93c>
 80175c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80175cc:	9b02      	ldr	r3, [sp, #8]
 80175ce:	b963      	cbnz	r3, 80175ea <_dtoa_r+0x8f2>
 80175d0:	4639      	mov	r1, r7
 80175d2:	2205      	movs	r2, #5
 80175d4:	4620      	mov	r0, r4
 80175d6:	f000 fcf4 	bl	8017fc2 <__multadd>
 80175da:	4601      	mov	r1, r0
 80175dc:	4607      	mov	r7, r0
 80175de:	9804      	ldr	r0, [sp, #16]
 80175e0:	f000 fef8 	bl	80183d4 <__mcmp>
 80175e4:	2800      	cmp	r0, #0
 80175e6:	f73f adcc 	bgt.w	8017182 <_dtoa_r+0x48a>
 80175ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175ec:	465d      	mov	r5, fp
 80175ee:	ea6f 0a03 	mvn.w	sl, r3
 80175f2:	f04f 0900 	mov.w	r9, #0
 80175f6:	4639      	mov	r1, r7
 80175f8:	4620      	mov	r0, r4
 80175fa:	f000 fccb 	bl	8017f94 <_Bfree>
 80175fe:	2e00      	cmp	r6, #0
 8017600:	f43f aeb7 	beq.w	8017372 <_dtoa_r+0x67a>
 8017604:	f1b9 0f00 	cmp.w	r9, #0
 8017608:	d005      	beq.n	8017616 <_dtoa_r+0x91e>
 801760a:	45b1      	cmp	r9, r6
 801760c:	d003      	beq.n	8017616 <_dtoa_r+0x91e>
 801760e:	4649      	mov	r1, r9
 8017610:	4620      	mov	r0, r4
 8017612:	f000 fcbf 	bl	8017f94 <_Bfree>
 8017616:	4631      	mov	r1, r6
 8017618:	4620      	mov	r0, r4
 801761a:	f000 fcbb 	bl	8017f94 <_Bfree>
 801761e:	e6a8      	b.n	8017372 <_dtoa_r+0x67a>
 8017620:	2700      	movs	r7, #0
 8017622:	463e      	mov	r6, r7
 8017624:	e7e1      	b.n	80175ea <_dtoa_r+0x8f2>
 8017626:	f8dd a020 	ldr.w	sl, [sp, #32]
 801762a:	463e      	mov	r6, r7
 801762c:	e5a9      	b.n	8017182 <_dtoa_r+0x48a>
 801762e:	bf00      	nop
 8017630:	40240000 	.word	0x40240000
 8017634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017636:	f8cd 9008 	str.w	r9, [sp, #8]
 801763a:	2b00      	cmp	r3, #0
 801763c:	f000 80fa 	beq.w	8017834 <_dtoa_r+0xb3c>
 8017640:	2d00      	cmp	r5, #0
 8017642:	dd05      	ble.n	8017650 <_dtoa_r+0x958>
 8017644:	4631      	mov	r1, r6
 8017646:	462a      	mov	r2, r5
 8017648:	4620      	mov	r0, r4
 801764a:	f000 fe6f 	bl	801832c <__lshift>
 801764e:	4606      	mov	r6, r0
 8017650:	9b07      	ldr	r3, [sp, #28]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d04c      	beq.n	80176f0 <_dtoa_r+0x9f8>
 8017656:	6871      	ldr	r1, [r6, #4]
 8017658:	4620      	mov	r0, r4
 801765a:	f000 fc67 	bl	8017f2c <_Balloc>
 801765e:	6932      	ldr	r2, [r6, #16]
 8017660:	3202      	adds	r2, #2
 8017662:	4605      	mov	r5, r0
 8017664:	0092      	lsls	r2, r2, #2
 8017666:	f106 010c 	add.w	r1, r6, #12
 801766a:	300c      	adds	r0, #12
 801766c:	f7fd fd08 	bl	8015080 <memcpy>
 8017670:	2201      	movs	r2, #1
 8017672:	4629      	mov	r1, r5
 8017674:	4620      	mov	r0, r4
 8017676:	f000 fe59 	bl	801832c <__lshift>
 801767a:	9b00      	ldr	r3, [sp, #0]
 801767c:	f8cd b014 	str.w	fp, [sp, #20]
 8017680:	f003 0301 	and.w	r3, r3, #1
 8017684:	46b1      	mov	r9, r6
 8017686:	9307      	str	r3, [sp, #28]
 8017688:	4606      	mov	r6, r0
 801768a:	4639      	mov	r1, r7
 801768c:	9804      	ldr	r0, [sp, #16]
 801768e:	f7ff faa5 	bl	8016bdc <quorem>
 8017692:	4649      	mov	r1, r9
 8017694:	4605      	mov	r5, r0
 8017696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801769a:	9804      	ldr	r0, [sp, #16]
 801769c:	f000 fe9a 	bl	80183d4 <__mcmp>
 80176a0:	4632      	mov	r2, r6
 80176a2:	9000      	str	r0, [sp, #0]
 80176a4:	4639      	mov	r1, r7
 80176a6:	4620      	mov	r0, r4
 80176a8:	f000 feae 	bl	8018408 <__mdiff>
 80176ac:	68c3      	ldr	r3, [r0, #12]
 80176ae:	4602      	mov	r2, r0
 80176b0:	bb03      	cbnz	r3, 80176f4 <_dtoa_r+0x9fc>
 80176b2:	4601      	mov	r1, r0
 80176b4:	9008      	str	r0, [sp, #32]
 80176b6:	9804      	ldr	r0, [sp, #16]
 80176b8:	f000 fe8c 	bl	80183d4 <__mcmp>
 80176bc:	9a08      	ldr	r2, [sp, #32]
 80176be:	4603      	mov	r3, r0
 80176c0:	4611      	mov	r1, r2
 80176c2:	4620      	mov	r0, r4
 80176c4:	9308      	str	r3, [sp, #32]
 80176c6:	f000 fc65 	bl	8017f94 <_Bfree>
 80176ca:	9b08      	ldr	r3, [sp, #32]
 80176cc:	b9a3      	cbnz	r3, 80176f8 <_dtoa_r+0xa00>
 80176ce:	9a06      	ldr	r2, [sp, #24]
 80176d0:	b992      	cbnz	r2, 80176f8 <_dtoa_r+0xa00>
 80176d2:	9a07      	ldr	r2, [sp, #28]
 80176d4:	b982      	cbnz	r2, 80176f8 <_dtoa_r+0xa00>
 80176d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80176da:	d029      	beq.n	8017730 <_dtoa_r+0xa38>
 80176dc:	9b00      	ldr	r3, [sp, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	dd01      	ble.n	80176e6 <_dtoa_r+0x9ee>
 80176e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80176e6:	9b05      	ldr	r3, [sp, #20]
 80176e8:	1c5d      	adds	r5, r3, #1
 80176ea:	f883 8000 	strb.w	r8, [r3]
 80176ee:	e782      	b.n	80175f6 <_dtoa_r+0x8fe>
 80176f0:	4630      	mov	r0, r6
 80176f2:	e7c2      	b.n	801767a <_dtoa_r+0x982>
 80176f4:	2301      	movs	r3, #1
 80176f6:	e7e3      	b.n	80176c0 <_dtoa_r+0x9c8>
 80176f8:	9a00      	ldr	r2, [sp, #0]
 80176fa:	2a00      	cmp	r2, #0
 80176fc:	db04      	blt.n	8017708 <_dtoa_r+0xa10>
 80176fe:	d125      	bne.n	801774c <_dtoa_r+0xa54>
 8017700:	9a06      	ldr	r2, [sp, #24]
 8017702:	bb1a      	cbnz	r2, 801774c <_dtoa_r+0xa54>
 8017704:	9a07      	ldr	r2, [sp, #28]
 8017706:	bb0a      	cbnz	r2, 801774c <_dtoa_r+0xa54>
 8017708:	2b00      	cmp	r3, #0
 801770a:	ddec      	ble.n	80176e6 <_dtoa_r+0x9ee>
 801770c:	2201      	movs	r2, #1
 801770e:	9904      	ldr	r1, [sp, #16]
 8017710:	4620      	mov	r0, r4
 8017712:	f000 fe0b 	bl	801832c <__lshift>
 8017716:	4639      	mov	r1, r7
 8017718:	9004      	str	r0, [sp, #16]
 801771a:	f000 fe5b 	bl	80183d4 <__mcmp>
 801771e:	2800      	cmp	r0, #0
 8017720:	dc03      	bgt.n	801772a <_dtoa_r+0xa32>
 8017722:	d1e0      	bne.n	80176e6 <_dtoa_r+0x9ee>
 8017724:	f018 0f01 	tst.w	r8, #1
 8017728:	d0dd      	beq.n	80176e6 <_dtoa_r+0x9ee>
 801772a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801772e:	d1d8      	bne.n	80176e2 <_dtoa_r+0x9ea>
 8017730:	9b05      	ldr	r3, [sp, #20]
 8017732:	9a05      	ldr	r2, [sp, #20]
 8017734:	1c5d      	adds	r5, r3, #1
 8017736:	2339      	movs	r3, #57	; 0x39
 8017738:	7013      	strb	r3, [r2, #0]
 801773a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801773e:	2b39      	cmp	r3, #57	; 0x39
 8017740:	f105 32ff 	add.w	r2, r5, #4294967295
 8017744:	d04f      	beq.n	80177e6 <_dtoa_r+0xaee>
 8017746:	3301      	adds	r3, #1
 8017748:	7013      	strb	r3, [r2, #0]
 801774a:	e754      	b.n	80175f6 <_dtoa_r+0x8fe>
 801774c:	9a05      	ldr	r2, [sp, #20]
 801774e:	2b00      	cmp	r3, #0
 8017750:	f102 0501 	add.w	r5, r2, #1
 8017754:	dd06      	ble.n	8017764 <_dtoa_r+0xa6c>
 8017756:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801775a:	d0e9      	beq.n	8017730 <_dtoa_r+0xa38>
 801775c:	f108 0801 	add.w	r8, r8, #1
 8017760:	9b05      	ldr	r3, [sp, #20]
 8017762:	e7c2      	b.n	80176ea <_dtoa_r+0x9f2>
 8017764:	9a02      	ldr	r2, [sp, #8]
 8017766:	f805 8c01 	strb.w	r8, [r5, #-1]
 801776a:	eba5 030b 	sub.w	r3, r5, fp
 801776e:	4293      	cmp	r3, r2
 8017770:	d021      	beq.n	80177b6 <_dtoa_r+0xabe>
 8017772:	2300      	movs	r3, #0
 8017774:	220a      	movs	r2, #10
 8017776:	9904      	ldr	r1, [sp, #16]
 8017778:	4620      	mov	r0, r4
 801777a:	f000 fc22 	bl	8017fc2 <__multadd>
 801777e:	45b1      	cmp	r9, r6
 8017780:	9004      	str	r0, [sp, #16]
 8017782:	f04f 0300 	mov.w	r3, #0
 8017786:	f04f 020a 	mov.w	r2, #10
 801778a:	4649      	mov	r1, r9
 801778c:	4620      	mov	r0, r4
 801778e:	d105      	bne.n	801779c <_dtoa_r+0xaa4>
 8017790:	f000 fc17 	bl	8017fc2 <__multadd>
 8017794:	4681      	mov	r9, r0
 8017796:	4606      	mov	r6, r0
 8017798:	9505      	str	r5, [sp, #20]
 801779a:	e776      	b.n	801768a <_dtoa_r+0x992>
 801779c:	f000 fc11 	bl	8017fc2 <__multadd>
 80177a0:	4631      	mov	r1, r6
 80177a2:	4681      	mov	r9, r0
 80177a4:	2300      	movs	r3, #0
 80177a6:	220a      	movs	r2, #10
 80177a8:	4620      	mov	r0, r4
 80177aa:	f000 fc0a 	bl	8017fc2 <__multadd>
 80177ae:	4606      	mov	r6, r0
 80177b0:	e7f2      	b.n	8017798 <_dtoa_r+0xaa0>
 80177b2:	f04f 0900 	mov.w	r9, #0
 80177b6:	2201      	movs	r2, #1
 80177b8:	9904      	ldr	r1, [sp, #16]
 80177ba:	4620      	mov	r0, r4
 80177bc:	f000 fdb6 	bl	801832c <__lshift>
 80177c0:	4639      	mov	r1, r7
 80177c2:	9004      	str	r0, [sp, #16]
 80177c4:	f000 fe06 	bl	80183d4 <__mcmp>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	dcb6      	bgt.n	801773a <_dtoa_r+0xa42>
 80177cc:	d102      	bne.n	80177d4 <_dtoa_r+0xadc>
 80177ce:	f018 0f01 	tst.w	r8, #1
 80177d2:	d1b2      	bne.n	801773a <_dtoa_r+0xa42>
 80177d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177d8:	2b30      	cmp	r3, #48	; 0x30
 80177da:	f105 32ff 	add.w	r2, r5, #4294967295
 80177de:	f47f af0a 	bne.w	80175f6 <_dtoa_r+0x8fe>
 80177e2:	4615      	mov	r5, r2
 80177e4:	e7f6      	b.n	80177d4 <_dtoa_r+0xadc>
 80177e6:	4593      	cmp	fp, r2
 80177e8:	d105      	bne.n	80177f6 <_dtoa_r+0xafe>
 80177ea:	2331      	movs	r3, #49	; 0x31
 80177ec:	f10a 0a01 	add.w	sl, sl, #1
 80177f0:	f88b 3000 	strb.w	r3, [fp]
 80177f4:	e6ff      	b.n	80175f6 <_dtoa_r+0x8fe>
 80177f6:	4615      	mov	r5, r2
 80177f8:	e79f      	b.n	801773a <_dtoa_r+0xa42>
 80177fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017860 <_dtoa_r+0xb68>
 80177fe:	e007      	b.n	8017810 <_dtoa_r+0xb18>
 8017800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017802:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017864 <_dtoa_r+0xb6c>
 8017806:	b11b      	cbz	r3, 8017810 <_dtoa_r+0xb18>
 8017808:	f10b 0308 	add.w	r3, fp, #8
 801780c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801780e:	6013      	str	r3, [r2, #0]
 8017810:	4658      	mov	r0, fp
 8017812:	b017      	add	sp, #92	; 0x5c
 8017814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017818:	9b06      	ldr	r3, [sp, #24]
 801781a:	2b01      	cmp	r3, #1
 801781c:	f77f ae35 	ble.w	801748a <_dtoa_r+0x792>
 8017820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017822:	9307      	str	r3, [sp, #28]
 8017824:	e649      	b.n	80174ba <_dtoa_r+0x7c2>
 8017826:	9b02      	ldr	r3, [sp, #8]
 8017828:	2b00      	cmp	r3, #0
 801782a:	dc03      	bgt.n	8017834 <_dtoa_r+0xb3c>
 801782c:	9b06      	ldr	r3, [sp, #24]
 801782e:	2b02      	cmp	r3, #2
 8017830:	f73f aecc 	bgt.w	80175cc <_dtoa_r+0x8d4>
 8017834:	465d      	mov	r5, fp
 8017836:	4639      	mov	r1, r7
 8017838:	9804      	ldr	r0, [sp, #16]
 801783a:	f7ff f9cf 	bl	8016bdc <quorem>
 801783e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017842:	f805 8b01 	strb.w	r8, [r5], #1
 8017846:	9a02      	ldr	r2, [sp, #8]
 8017848:	eba5 030b 	sub.w	r3, r5, fp
 801784c:	429a      	cmp	r2, r3
 801784e:	ddb0      	ble.n	80177b2 <_dtoa_r+0xaba>
 8017850:	2300      	movs	r3, #0
 8017852:	220a      	movs	r2, #10
 8017854:	9904      	ldr	r1, [sp, #16]
 8017856:	4620      	mov	r0, r4
 8017858:	f000 fbb3 	bl	8017fc2 <__multadd>
 801785c:	9004      	str	r0, [sp, #16]
 801785e:	e7ea      	b.n	8017836 <_dtoa_r+0xb3e>
 8017860:	08019f3b 	.word	0x08019f3b
 8017864:	08019d98 	.word	0x08019d98

08017868 <rshift>:
 8017868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801786a:	6906      	ldr	r6, [r0, #16]
 801786c:	114b      	asrs	r3, r1, #5
 801786e:	429e      	cmp	r6, r3
 8017870:	f100 0414 	add.w	r4, r0, #20
 8017874:	dd30      	ble.n	80178d8 <rshift+0x70>
 8017876:	f011 011f 	ands.w	r1, r1, #31
 801787a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801787e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017882:	d108      	bne.n	8017896 <rshift+0x2e>
 8017884:	4621      	mov	r1, r4
 8017886:	42b2      	cmp	r2, r6
 8017888:	460b      	mov	r3, r1
 801788a:	d211      	bcs.n	80178b0 <rshift+0x48>
 801788c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017890:	f841 3b04 	str.w	r3, [r1], #4
 8017894:	e7f7      	b.n	8017886 <rshift+0x1e>
 8017896:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801789a:	f1c1 0c20 	rsb	ip, r1, #32
 801789e:	40cd      	lsrs	r5, r1
 80178a0:	3204      	adds	r2, #4
 80178a2:	4623      	mov	r3, r4
 80178a4:	42b2      	cmp	r2, r6
 80178a6:	4617      	mov	r7, r2
 80178a8:	d30c      	bcc.n	80178c4 <rshift+0x5c>
 80178aa:	601d      	str	r5, [r3, #0]
 80178ac:	b105      	cbz	r5, 80178b0 <rshift+0x48>
 80178ae:	3304      	adds	r3, #4
 80178b0:	1b1a      	subs	r2, r3, r4
 80178b2:	42a3      	cmp	r3, r4
 80178b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178b8:	bf08      	it	eq
 80178ba:	2300      	moveq	r3, #0
 80178bc:	6102      	str	r2, [r0, #16]
 80178be:	bf08      	it	eq
 80178c0:	6143      	streq	r3, [r0, #20]
 80178c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178c4:	683f      	ldr	r7, [r7, #0]
 80178c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80178ca:	433d      	orrs	r5, r7
 80178cc:	f843 5b04 	str.w	r5, [r3], #4
 80178d0:	f852 5b04 	ldr.w	r5, [r2], #4
 80178d4:	40cd      	lsrs	r5, r1
 80178d6:	e7e5      	b.n	80178a4 <rshift+0x3c>
 80178d8:	4623      	mov	r3, r4
 80178da:	e7e9      	b.n	80178b0 <rshift+0x48>

080178dc <__hexdig_fun>:
 80178dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178e0:	2b09      	cmp	r3, #9
 80178e2:	d802      	bhi.n	80178ea <__hexdig_fun+0xe>
 80178e4:	3820      	subs	r0, #32
 80178e6:	b2c0      	uxtb	r0, r0
 80178e8:	4770      	bx	lr
 80178ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80178ee:	2b05      	cmp	r3, #5
 80178f0:	d801      	bhi.n	80178f6 <__hexdig_fun+0x1a>
 80178f2:	3847      	subs	r0, #71	; 0x47
 80178f4:	e7f7      	b.n	80178e6 <__hexdig_fun+0xa>
 80178f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80178fa:	2b05      	cmp	r3, #5
 80178fc:	d801      	bhi.n	8017902 <__hexdig_fun+0x26>
 80178fe:	3827      	subs	r0, #39	; 0x27
 8017900:	e7f1      	b.n	80178e6 <__hexdig_fun+0xa>
 8017902:	2000      	movs	r0, #0
 8017904:	4770      	bx	lr

08017906 <__gethex>:
 8017906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801790a:	b08b      	sub	sp, #44	; 0x2c
 801790c:	468a      	mov	sl, r1
 801790e:	9002      	str	r0, [sp, #8]
 8017910:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017912:	9306      	str	r3, [sp, #24]
 8017914:	4690      	mov	r8, r2
 8017916:	f000 fadf 	bl	8017ed8 <__localeconv_l>
 801791a:	6803      	ldr	r3, [r0, #0]
 801791c:	9303      	str	r3, [sp, #12]
 801791e:	4618      	mov	r0, r3
 8017920:	f7e8 fc6e 	bl	8000200 <strlen>
 8017924:	9b03      	ldr	r3, [sp, #12]
 8017926:	9001      	str	r0, [sp, #4]
 8017928:	4403      	add	r3, r0
 801792a:	f04f 0b00 	mov.w	fp, #0
 801792e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017932:	9307      	str	r3, [sp, #28]
 8017934:	f8da 3000 	ldr.w	r3, [sl]
 8017938:	3302      	adds	r3, #2
 801793a:	461f      	mov	r7, r3
 801793c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017940:	2830      	cmp	r0, #48	; 0x30
 8017942:	d06c      	beq.n	8017a1e <__gethex+0x118>
 8017944:	f7ff ffca 	bl	80178dc <__hexdig_fun>
 8017948:	4604      	mov	r4, r0
 801794a:	2800      	cmp	r0, #0
 801794c:	d16a      	bne.n	8017a24 <__gethex+0x11e>
 801794e:	9a01      	ldr	r2, [sp, #4]
 8017950:	9903      	ldr	r1, [sp, #12]
 8017952:	4638      	mov	r0, r7
 8017954:	f001 fc36 	bl	80191c4 <strncmp>
 8017958:	2800      	cmp	r0, #0
 801795a:	d166      	bne.n	8017a2a <__gethex+0x124>
 801795c:	9b01      	ldr	r3, [sp, #4]
 801795e:	5cf8      	ldrb	r0, [r7, r3]
 8017960:	18fe      	adds	r6, r7, r3
 8017962:	f7ff ffbb 	bl	80178dc <__hexdig_fun>
 8017966:	2800      	cmp	r0, #0
 8017968:	d062      	beq.n	8017a30 <__gethex+0x12a>
 801796a:	4633      	mov	r3, r6
 801796c:	7818      	ldrb	r0, [r3, #0]
 801796e:	2830      	cmp	r0, #48	; 0x30
 8017970:	461f      	mov	r7, r3
 8017972:	f103 0301 	add.w	r3, r3, #1
 8017976:	d0f9      	beq.n	801796c <__gethex+0x66>
 8017978:	f7ff ffb0 	bl	80178dc <__hexdig_fun>
 801797c:	fab0 f580 	clz	r5, r0
 8017980:	096d      	lsrs	r5, r5, #5
 8017982:	4634      	mov	r4, r6
 8017984:	f04f 0b01 	mov.w	fp, #1
 8017988:	463a      	mov	r2, r7
 801798a:	4616      	mov	r6, r2
 801798c:	3201      	adds	r2, #1
 801798e:	7830      	ldrb	r0, [r6, #0]
 8017990:	f7ff ffa4 	bl	80178dc <__hexdig_fun>
 8017994:	2800      	cmp	r0, #0
 8017996:	d1f8      	bne.n	801798a <__gethex+0x84>
 8017998:	9a01      	ldr	r2, [sp, #4]
 801799a:	9903      	ldr	r1, [sp, #12]
 801799c:	4630      	mov	r0, r6
 801799e:	f001 fc11 	bl	80191c4 <strncmp>
 80179a2:	b950      	cbnz	r0, 80179ba <__gethex+0xb4>
 80179a4:	b954      	cbnz	r4, 80179bc <__gethex+0xb6>
 80179a6:	9b01      	ldr	r3, [sp, #4]
 80179a8:	18f4      	adds	r4, r6, r3
 80179aa:	4622      	mov	r2, r4
 80179ac:	4616      	mov	r6, r2
 80179ae:	3201      	adds	r2, #1
 80179b0:	7830      	ldrb	r0, [r6, #0]
 80179b2:	f7ff ff93 	bl	80178dc <__hexdig_fun>
 80179b6:	2800      	cmp	r0, #0
 80179b8:	d1f8      	bne.n	80179ac <__gethex+0xa6>
 80179ba:	b10c      	cbz	r4, 80179c0 <__gethex+0xba>
 80179bc:	1ba4      	subs	r4, r4, r6
 80179be:	00a4      	lsls	r4, r4, #2
 80179c0:	7833      	ldrb	r3, [r6, #0]
 80179c2:	2b50      	cmp	r3, #80	; 0x50
 80179c4:	d001      	beq.n	80179ca <__gethex+0xc4>
 80179c6:	2b70      	cmp	r3, #112	; 0x70
 80179c8:	d140      	bne.n	8017a4c <__gethex+0x146>
 80179ca:	7873      	ldrb	r3, [r6, #1]
 80179cc:	2b2b      	cmp	r3, #43	; 0x2b
 80179ce:	d031      	beq.n	8017a34 <__gethex+0x12e>
 80179d0:	2b2d      	cmp	r3, #45	; 0x2d
 80179d2:	d033      	beq.n	8017a3c <__gethex+0x136>
 80179d4:	1c71      	adds	r1, r6, #1
 80179d6:	f04f 0900 	mov.w	r9, #0
 80179da:	7808      	ldrb	r0, [r1, #0]
 80179dc:	f7ff ff7e 	bl	80178dc <__hexdig_fun>
 80179e0:	1e43      	subs	r3, r0, #1
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	2b18      	cmp	r3, #24
 80179e6:	d831      	bhi.n	8017a4c <__gethex+0x146>
 80179e8:	f1a0 0210 	sub.w	r2, r0, #16
 80179ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179f0:	f7ff ff74 	bl	80178dc <__hexdig_fun>
 80179f4:	1e43      	subs	r3, r0, #1
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	2b18      	cmp	r3, #24
 80179fa:	d922      	bls.n	8017a42 <__gethex+0x13c>
 80179fc:	f1b9 0f00 	cmp.w	r9, #0
 8017a00:	d000      	beq.n	8017a04 <__gethex+0xfe>
 8017a02:	4252      	negs	r2, r2
 8017a04:	4414      	add	r4, r2
 8017a06:	f8ca 1000 	str.w	r1, [sl]
 8017a0a:	b30d      	cbz	r5, 8017a50 <__gethex+0x14a>
 8017a0c:	f1bb 0f00 	cmp.w	fp, #0
 8017a10:	bf0c      	ite	eq
 8017a12:	2706      	moveq	r7, #6
 8017a14:	2700      	movne	r7, #0
 8017a16:	4638      	mov	r0, r7
 8017a18:	b00b      	add	sp, #44	; 0x2c
 8017a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a1e:	f10b 0b01 	add.w	fp, fp, #1
 8017a22:	e78a      	b.n	801793a <__gethex+0x34>
 8017a24:	2500      	movs	r5, #0
 8017a26:	462c      	mov	r4, r5
 8017a28:	e7ae      	b.n	8017988 <__gethex+0x82>
 8017a2a:	463e      	mov	r6, r7
 8017a2c:	2501      	movs	r5, #1
 8017a2e:	e7c7      	b.n	80179c0 <__gethex+0xba>
 8017a30:	4604      	mov	r4, r0
 8017a32:	e7fb      	b.n	8017a2c <__gethex+0x126>
 8017a34:	f04f 0900 	mov.w	r9, #0
 8017a38:	1cb1      	adds	r1, r6, #2
 8017a3a:	e7ce      	b.n	80179da <__gethex+0xd4>
 8017a3c:	f04f 0901 	mov.w	r9, #1
 8017a40:	e7fa      	b.n	8017a38 <__gethex+0x132>
 8017a42:	230a      	movs	r3, #10
 8017a44:	fb03 0202 	mla	r2, r3, r2, r0
 8017a48:	3a10      	subs	r2, #16
 8017a4a:	e7cf      	b.n	80179ec <__gethex+0xe6>
 8017a4c:	4631      	mov	r1, r6
 8017a4e:	e7da      	b.n	8017a06 <__gethex+0x100>
 8017a50:	1bf3      	subs	r3, r6, r7
 8017a52:	3b01      	subs	r3, #1
 8017a54:	4629      	mov	r1, r5
 8017a56:	2b07      	cmp	r3, #7
 8017a58:	dc49      	bgt.n	8017aee <__gethex+0x1e8>
 8017a5a:	9802      	ldr	r0, [sp, #8]
 8017a5c:	f000 fa66 	bl	8017f2c <_Balloc>
 8017a60:	9b01      	ldr	r3, [sp, #4]
 8017a62:	f100 0914 	add.w	r9, r0, #20
 8017a66:	f04f 0b00 	mov.w	fp, #0
 8017a6a:	f1c3 0301 	rsb	r3, r3, #1
 8017a6e:	4605      	mov	r5, r0
 8017a70:	f8cd 9010 	str.w	r9, [sp, #16]
 8017a74:	46da      	mov	sl, fp
 8017a76:	9308      	str	r3, [sp, #32]
 8017a78:	42b7      	cmp	r7, r6
 8017a7a:	d33b      	bcc.n	8017af4 <__gethex+0x1ee>
 8017a7c:	9804      	ldr	r0, [sp, #16]
 8017a7e:	f840 ab04 	str.w	sl, [r0], #4
 8017a82:	eba0 0009 	sub.w	r0, r0, r9
 8017a86:	1080      	asrs	r0, r0, #2
 8017a88:	6128      	str	r0, [r5, #16]
 8017a8a:	0147      	lsls	r7, r0, #5
 8017a8c:	4650      	mov	r0, sl
 8017a8e:	f000 fb11 	bl	80180b4 <__hi0bits>
 8017a92:	f8d8 6000 	ldr.w	r6, [r8]
 8017a96:	1a3f      	subs	r7, r7, r0
 8017a98:	42b7      	cmp	r7, r6
 8017a9a:	dd64      	ble.n	8017b66 <__gethex+0x260>
 8017a9c:	1bbf      	subs	r7, r7, r6
 8017a9e:	4639      	mov	r1, r7
 8017aa0:	4628      	mov	r0, r5
 8017aa2:	f000 fe21 	bl	80186e8 <__any_on>
 8017aa6:	4682      	mov	sl, r0
 8017aa8:	b178      	cbz	r0, 8017aca <__gethex+0x1c4>
 8017aaa:	1e7b      	subs	r3, r7, #1
 8017aac:	1159      	asrs	r1, r3, #5
 8017aae:	f003 021f 	and.w	r2, r3, #31
 8017ab2:	f04f 0a01 	mov.w	sl, #1
 8017ab6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017aba:	fa0a f202 	lsl.w	r2, sl, r2
 8017abe:	420a      	tst	r2, r1
 8017ac0:	d003      	beq.n	8017aca <__gethex+0x1c4>
 8017ac2:	4553      	cmp	r3, sl
 8017ac4:	dc46      	bgt.n	8017b54 <__gethex+0x24e>
 8017ac6:	f04f 0a02 	mov.w	sl, #2
 8017aca:	4639      	mov	r1, r7
 8017acc:	4628      	mov	r0, r5
 8017ace:	f7ff fecb 	bl	8017868 <rshift>
 8017ad2:	443c      	add	r4, r7
 8017ad4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ad8:	42a3      	cmp	r3, r4
 8017ada:	da52      	bge.n	8017b82 <__gethex+0x27c>
 8017adc:	4629      	mov	r1, r5
 8017ade:	9802      	ldr	r0, [sp, #8]
 8017ae0:	f000 fa58 	bl	8017f94 <_Bfree>
 8017ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	6013      	str	r3, [r2, #0]
 8017aea:	27a3      	movs	r7, #163	; 0xa3
 8017aec:	e793      	b.n	8017a16 <__gethex+0x110>
 8017aee:	3101      	adds	r1, #1
 8017af0:	105b      	asrs	r3, r3, #1
 8017af2:	e7b0      	b.n	8017a56 <__gethex+0x150>
 8017af4:	1e73      	subs	r3, r6, #1
 8017af6:	9305      	str	r3, [sp, #20]
 8017af8:	9a07      	ldr	r2, [sp, #28]
 8017afa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017afe:	4293      	cmp	r3, r2
 8017b00:	d018      	beq.n	8017b34 <__gethex+0x22e>
 8017b02:	f1bb 0f20 	cmp.w	fp, #32
 8017b06:	d107      	bne.n	8017b18 <__gethex+0x212>
 8017b08:	9b04      	ldr	r3, [sp, #16]
 8017b0a:	f8c3 a000 	str.w	sl, [r3]
 8017b0e:	3304      	adds	r3, #4
 8017b10:	f04f 0a00 	mov.w	sl, #0
 8017b14:	9304      	str	r3, [sp, #16]
 8017b16:	46d3      	mov	fp, sl
 8017b18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017b1c:	f7ff fede 	bl	80178dc <__hexdig_fun>
 8017b20:	f000 000f 	and.w	r0, r0, #15
 8017b24:	fa00 f00b 	lsl.w	r0, r0, fp
 8017b28:	ea4a 0a00 	orr.w	sl, sl, r0
 8017b2c:	f10b 0b04 	add.w	fp, fp, #4
 8017b30:	9b05      	ldr	r3, [sp, #20]
 8017b32:	e00d      	b.n	8017b50 <__gethex+0x24a>
 8017b34:	9b05      	ldr	r3, [sp, #20]
 8017b36:	9a08      	ldr	r2, [sp, #32]
 8017b38:	4413      	add	r3, r2
 8017b3a:	42bb      	cmp	r3, r7
 8017b3c:	d3e1      	bcc.n	8017b02 <__gethex+0x1fc>
 8017b3e:	4618      	mov	r0, r3
 8017b40:	9a01      	ldr	r2, [sp, #4]
 8017b42:	9903      	ldr	r1, [sp, #12]
 8017b44:	9309      	str	r3, [sp, #36]	; 0x24
 8017b46:	f001 fb3d 	bl	80191c4 <strncmp>
 8017b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	d1d8      	bne.n	8017b02 <__gethex+0x1fc>
 8017b50:	461e      	mov	r6, r3
 8017b52:	e791      	b.n	8017a78 <__gethex+0x172>
 8017b54:	1eb9      	subs	r1, r7, #2
 8017b56:	4628      	mov	r0, r5
 8017b58:	f000 fdc6 	bl	80186e8 <__any_on>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	d0b2      	beq.n	8017ac6 <__gethex+0x1c0>
 8017b60:	f04f 0a03 	mov.w	sl, #3
 8017b64:	e7b1      	b.n	8017aca <__gethex+0x1c4>
 8017b66:	da09      	bge.n	8017b7c <__gethex+0x276>
 8017b68:	1bf7      	subs	r7, r6, r7
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	463a      	mov	r2, r7
 8017b6e:	9802      	ldr	r0, [sp, #8]
 8017b70:	f000 fbdc 	bl	801832c <__lshift>
 8017b74:	1be4      	subs	r4, r4, r7
 8017b76:	4605      	mov	r5, r0
 8017b78:	f100 0914 	add.w	r9, r0, #20
 8017b7c:	f04f 0a00 	mov.w	sl, #0
 8017b80:	e7a8      	b.n	8017ad4 <__gethex+0x1ce>
 8017b82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017b86:	42a0      	cmp	r0, r4
 8017b88:	dd6a      	ble.n	8017c60 <__gethex+0x35a>
 8017b8a:	1b04      	subs	r4, r0, r4
 8017b8c:	42a6      	cmp	r6, r4
 8017b8e:	dc2e      	bgt.n	8017bee <__gethex+0x2e8>
 8017b90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b94:	2b02      	cmp	r3, #2
 8017b96:	d022      	beq.n	8017bde <__gethex+0x2d8>
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	d024      	beq.n	8017be6 <__gethex+0x2e0>
 8017b9c:	2b01      	cmp	r3, #1
 8017b9e:	d115      	bne.n	8017bcc <__gethex+0x2c6>
 8017ba0:	42a6      	cmp	r6, r4
 8017ba2:	d113      	bne.n	8017bcc <__gethex+0x2c6>
 8017ba4:	2e01      	cmp	r6, #1
 8017ba6:	dc0b      	bgt.n	8017bc0 <__gethex+0x2ba>
 8017ba8:	9a06      	ldr	r2, [sp, #24]
 8017baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017bae:	6013      	str	r3, [r2, #0]
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	612b      	str	r3, [r5, #16]
 8017bb4:	f8c9 3000 	str.w	r3, [r9]
 8017bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017bba:	2762      	movs	r7, #98	; 0x62
 8017bbc:	601d      	str	r5, [r3, #0]
 8017bbe:	e72a      	b.n	8017a16 <__gethex+0x110>
 8017bc0:	1e71      	subs	r1, r6, #1
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	f000 fd90 	bl	80186e8 <__any_on>
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	d1ed      	bne.n	8017ba8 <__gethex+0x2a2>
 8017bcc:	4629      	mov	r1, r5
 8017bce:	9802      	ldr	r0, [sp, #8]
 8017bd0:	f000 f9e0 	bl	8017f94 <_Bfree>
 8017bd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	6013      	str	r3, [r2, #0]
 8017bda:	2750      	movs	r7, #80	; 0x50
 8017bdc:	e71b      	b.n	8017a16 <__gethex+0x110>
 8017bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d0e1      	beq.n	8017ba8 <__gethex+0x2a2>
 8017be4:	e7f2      	b.n	8017bcc <__gethex+0x2c6>
 8017be6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d1dd      	bne.n	8017ba8 <__gethex+0x2a2>
 8017bec:	e7ee      	b.n	8017bcc <__gethex+0x2c6>
 8017bee:	1e67      	subs	r7, r4, #1
 8017bf0:	f1ba 0f00 	cmp.w	sl, #0
 8017bf4:	d131      	bne.n	8017c5a <__gethex+0x354>
 8017bf6:	b127      	cbz	r7, 8017c02 <__gethex+0x2fc>
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	f000 fd74 	bl	80186e8 <__any_on>
 8017c00:	4682      	mov	sl, r0
 8017c02:	117a      	asrs	r2, r7, #5
 8017c04:	2301      	movs	r3, #1
 8017c06:	f007 071f 	and.w	r7, r7, #31
 8017c0a:	fa03 f707 	lsl.w	r7, r3, r7
 8017c0e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017c12:	4621      	mov	r1, r4
 8017c14:	421f      	tst	r7, r3
 8017c16:	4628      	mov	r0, r5
 8017c18:	bf18      	it	ne
 8017c1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8017c1e:	1b36      	subs	r6, r6, r4
 8017c20:	f7ff fe22 	bl	8017868 <rshift>
 8017c24:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017c28:	2702      	movs	r7, #2
 8017c2a:	f1ba 0f00 	cmp.w	sl, #0
 8017c2e:	d048      	beq.n	8017cc2 <__gethex+0x3bc>
 8017c30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c34:	2b02      	cmp	r3, #2
 8017c36:	d015      	beq.n	8017c64 <__gethex+0x35e>
 8017c38:	2b03      	cmp	r3, #3
 8017c3a:	d017      	beq.n	8017c6c <__gethex+0x366>
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d109      	bne.n	8017c54 <__gethex+0x34e>
 8017c40:	f01a 0f02 	tst.w	sl, #2
 8017c44:	d006      	beq.n	8017c54 <__gethex+0x34e>
 8017c46:	f8d9 3000 	ldr.w	r3, [r9]
 8017c4a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017c4e:	f01a 0f01 	tst.w	sl, #1
 8017c52:	d10e      	bne.n	8017c72 <__gethex+0x36c>
 8017c54:	f047 0710 	orr.w	r7, r7, #16
 8017c58:	e033      	b.n	8017cc2 <__gethex+0x3bc>
 8017c5a:	f04f 0a01 	mov.w	sl, #1
 8017c5e:	e7d0      	b.n	8017c02 <__gethex+0x2fc>
 8017c60:	2701      	movs	r7, #1
 8017c62:	e7e2      	b.n	8017c2a <__gethex+0x324>
 8017c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c66:	f1c3 0301 	rsb	r3, r3, #1
 8017c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8017c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d0f0      	beq.n	8017c54 <__gethex+0x34e>
 8017c72:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017c76:	f105 0314 	add.w	r3, r5, #20
 8017c7a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017c7e:	eb03 010a 	add.w	r1, r3, sl
 8017c82:	f04f 0c00 	mov.w	ip, #0
 8017c86:	4618      	mov	r0, r3
 8017c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c90:	d01c      	beq.n	8017ccc <__gethex+0x3c6>
 8017c92:	3201      	adds	r2, #1
 8017c94:	6002      	str	r2, [r0, #0]
 8017c96:	2f02      	cmp	r7, #2
 8017c98:	f105 0314 	add.w	r3, r5, #20
 8017c9c:	d138      	bne.n	8017d10 <__gethex+0x40a>
 8017c9e:	f8d8 2000 	ldr.w	r2, [r8]
 8017ca2:	3a01      	subs	r2, #1
 8017ca4:	42b2      	cmp	r2, r6
 8017ca6:	d10a      	bne.n	8017cbe <__gethex+0x3b8>
 8017ca8:	1171      	asrs	r1, r6, #5
 8017caa:	2201      	movs	r2, #1
 8017cac:	f006 061f 	and.w	r6, r6, #31
 8017cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017cb4:	fa02 f606 	lsl.w	r6, r2, r6
 8017cb8:	421e      	tst	r6, r3
 8017cba:	bf18      	it	ne
 8017cbc:	4617      	movne	r7, r2
 8017cbe:	f047 0720 	orr.w	r7, r7, #32
 8017cc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cc4:	601d      	str	r5, [r3, #0]
 8017cc6:	9b06      	ldr	r3, [sp, #24]
 8017cc8:	601c      	str	r4, [r3, #0]
 8017cca:	e6a4      	b.n	8017a16 <__gethex+0x110>
 8017ccc:	4299      	cmp	r1, r3
 8017cce:	f843 cc04 	str.w	ip, [r3, #-4]
 8017cd2:	d8d8      	bhi.n	8017c86 <__gethex+0x380>
 8017cd4:	68ab      	ldr	r3, [r5, #8]
 8017cd6:	4599      	cmp	r9, r3
 8017cd8:	db12      	blt.n	8017d00 <__gethex+0x3fa>
 8017cda:	6869      	ldr	r1, [r5, #4]
 8017cdc:	9802      	ldr	r0, [sp, #8]
 8017cde:	3101      	adds	r1, #1
 8017ce0:	f000 f924 	bl	8017f2c <_Balloc>
 8017ce4:	692a      	ldr	r2, [r5, #16]
 8017ce6:	3202      	adds	r2, #2
 8017ce8:	f105 010c 	add.w	r1, r5, #12
 8017cec:	4683      	mov	fp, r0
 8017cee:	0092      	lsls	r2, r2, #2
 8017cf0:	300c      	adds	r0, #12
 8017cf2:	f7fd f9c5 	bl	8015080 <memcpy>
 8017cf6:	4629      	mov	r1, r5
 8017cf8:	9802      	ldr	r0, [sp, #8]
 8017cfa:	f000 f94b 	bl	8017f94 <_Bfree>
 8017cfe:	465d      	mov	r5, fp
 8017d00:	692b      	ldr	r3, [r5, #16]
 8017d02:	1c5a      	adds	r2, r3, #1
 8017d04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017d08:	612a      	str	r2, [r5, #16]
 8017d0a:	2201      	movs	r2, #1
 8017d0c:	615a      	str	r2, [r3, #20]
 8017d0e:	e7c2      	b.n	8017c96 <__gethex+0x390>
 8017d10:	692a      	ldr	r2, [r5, #16]
 8017d12:	454a      	cmp	r2, r9
 8017d14:	dd0b      	ble.n	8017d2e <__gethex+0x428>
 8017d16:	2101      	movs	r1, #1
 8017d18:	4628      	mov	r0, r5
 8017d1a:	f7ff fda5 	bl	8017868 <rshift>
 8017d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d22:	3401      	adds	r4, #1
 8017d24:	42a3      	cmp	r3, r4
 8017d26:	f6ff aed9 	blt.w	8017adc <__gethex+0x1d6>
 8017d2a:	2701      	movs	r7, #1
 8017d2c:	e7c7      	b.n	8017cbe <__gethex+0x3b8>
 8017d2e:	f016 061f 	ands.w	r6, r6, #31
 8017d32:	d0fa      	beq.n	8017d2a <__gethex+0x424>
 8017d34:	449a      	add	sl, r3
 8017d36:	f1c6 0620 	rsb	r6, r6, #32
 8017d3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017d3e:	f000 f9b9 	bl	80180b4 <__hi0bits>
 8017d42:	42b0      	cmp	r0, r6
 8017d44:	dbe7      	blt.n	8017d16 <__gethex+0x410>
 8017d46:	e7f0      	b.n	8017d2a <__gethex+0x424>

08017d48 <L_shift>:
 8017d48:	f1c2 0208 	rsb	r2, r2, #8
 8017d4c:	0092      	lsls	r2, r2, #2
 8017d4e:	b570      	push	{r4, r5, r6, lr}
 8017d50:	f1c2 0620 	rsb	r6, r2, #32
 8017d54:	6843      	ldr	r3, [r0, #4]
 8017d56:	6804      	ldr	r4, [r0, #0]
 8017d58:	fa03 f506 	lsl.w	r5, r3, r6
 8017d5c:	432c      	orrs	r4, r5
 8017d5e:	40d3      	lsrs	r3, r2
 8017d60:	6004      	str	r4, [r0, #0]
 8017d62:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d66:	4288      	cmp	r0, r1
 8017d68:	d3f4      	bcc.n	8017d54 <L_shift+0xc>
 8017d6a:	bd70      	pop	{r4, r5, r6, pc}

08017d6c <__match>:
 8017d6c:	b530      	push	{r4, r5, lr}
 8017d6e:	6803      	ldr	r3, [r0, #0]
 8017d70:	3301      	adds	r3, #1
 8017d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d76:	b914      	cbnz	r4, 8017d7e <__match+0x12>
 8017d78:	6003      	str	r3, [r0, #0]
 8017d7a:	2001      	movs	r0, #1
 8017d7c:	bd30      	pop	{r4, r5, pc}
 8017d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d86:	2d19      	cmp	r5, #25
 8017d88:	bf98      	it	ls
 8017d8a:	3220      	addls	r2, #32
 8017d8c:	42a2      	cmp	r2, r4
 8017d8e:	d0f0      	beq.n	8017d72 <__match+0x6>
 8017d90:	2000      	movs	r0, #0
 8017d92:	e7f3      	b.n	8017d7c <__match+0x10>

08017d94 <__hexnan>:
 8017d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d98:	680b      	ldr	r3, [r1, #0]
 8017d9a:	6801      	ldr	r1, [r0, #0]
 8017d9c:	115f      	asrs	r7, r3, #5
 8017d9e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017da2:	f013 031f 	ands.w	r3, r3, #31
 8017da6:	b087      	sub	sp, #28
 8017da8:	bf18      	it	ne
 8017daa:	3704      	addne	r7, #4
 8017dac:	2500      	movs	r5, #0
 8017dae:	1f3e      	subs	r6, r7, #4
 8017db0:	4682      	mov	sl, r0
 8017db2:	4690      	mov	r8, r2
 8017db4:	9301      	str	r3, [sp, #4]
 8017db6:	f847 5c04 	str.w	r5, [r7, #-4]
 8017dba:	46b1      	mov	r9, r6
 8017dbc:	4634      	mov	r4, r6
 8017dbe:	9502      	str	r5, [sp, #8]
 8017dc0:	46ab      	mov	fp, r5
 8017dc2:	784a      	ldrb	r2, [r1, #1]
 8017dc4:	1c4b      	adds	r3, r1, #1
 8017dc6:	9303      	str	r3, [sp, #12]
 8017dc8:	b342      	cbz	r2, 8017e1c <__hexnan+0x88>
 8017dca:	4610      	mov	r0, r2
 8017dcc:	9105      	str	r1, [sp, #20]
 8017dce:	9204      	str	r2, [sp, #16]
 8017dd0:	f7ff fd84 	bl	80178dc <__hexdig_fun>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	d143      	bne.n	8017e60 <__hexnan+0xcc>
 8017dd8:	9a04      	ldr	r2, [sp, #16]
 8017dda:	9905      	ldr	r1, [sp, #20]
 8017ddc:	2a20      	cmp	r2, #32
 8017dde:	d818      	bhi.n	8017e12 <__hexnan+0x7e>
 8017de0:	9b02      	ldr	r3, [sp, #8]
 8017de2:	459b      	cmp	fp, r3
 8017de4:	dd13      	ble.n	8017e0e <__hexnan+0x7a>
 8017de6:	454c      	cmp	r4, r9
 8017de8:	d206      	bcs.n	8017df8 <__hexnan+0x64>
 8017dea:	2d07      	cmp	r5, #7
 8017dec:	dc04      	bgt.n	8017df8 <__hexnan+0x64>
 8017dee:	462a      	mov	r2, r5
 8017df0:	4649      	mov	r1, r9
 8017df2:	4620      	mov	r0, r4
 8017df4:	f7ff ffa8 	bl	8017d48 <L_shift>
 8017df8:	4544      	cmp	r4, r8
 8017dfa:	d944      	bls.n	8017e86 <__hexnan+0xf2>
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	f1a4 0904 	sub.w	r9, r4, #4
 8017e02:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e06:	f8cd b008 	str.w	fp, [sp, #8]
 8017e0a:	464c      	mov	r4, r9
 8017e0c:	461d      	mov	r5, r3
 8017e0e:	9903      	ldr	r1, [sp, #12]
 8017e10:	e7d7      	b.n	8017dc2 <__hexnan+0x2e>
 8017e12:	2a29      	cmp	r2, #41	; 0x29
 8017e14:	d14a      	bne.n	8017eac <__hexnan+0x118>
 8017e16:	3102      	adds	r1, #2
 8017e18:	f8ca 1000 	str.w	r1, [sl]
 8017e1c:	f1bb 0f00 	cmp.w	fp, #0
 8017e20:	d044      	beq.n	8017eac <__hexnan+0x118>
 8017e22:	454c      	cmp	r4, r9
 8017e24:	d206      	bcs.n	8017e34 <__hexnan+0xa0>
 8017e26:	2d07      	cmp	r5, #7
 8017e28:	dc04      	bgt.n	8017e34 <__hexnan+0xa0>
 8017e2a:	462a      	mov	r2, r5
 8017e2c:	4649      	mov	r1, r9
 8017e2e:	4620      	mov	r0, r4
 8017e30:	f7ff ff8a 	bl	8017d48 <L_shift>
 8017e34:	4544      	cmp	r4, r8
 8017e36:	d928      	bls.n	8017e8a <__hexnan+0xf6>
 8017e38:	4643      	mov	r3, r8
 8017e3a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017e3e:	f843 2b04 	str.w	r2, [r3], #4
 8017e42:	42a6      	cmp	r6, r4
 8017e44:	d2f9      	bcs.n	8017e3a <__hexnan+0xa6>
 8017e46:	2200      	movs	r2, #0
 8017e48:	f843 2b04 	str.w	r2, [r3], #4
 8017e4c:	429e      	cmp	r6, r3
 8017e4e:	d2fb      	bcs.n	8017e48 <__hexnan+0xb4>
 8017e50:	6833      	ldr	r3, [r6, #0]
 8017e52:	b91b      	cbnz	r3, 8017e5c <__hexnan+0xc8>
 8017e54:	4546      	cmp	r6, r8
 8017e56:	d127      	bne.n	8017ea8 <__hexnan+0x114>
 8017e58:	2301      	movs	r3, #1
 8017e5a:	6033      	str	r3, [r6, #0]
 8017e5c:	2005      	movs	r0, #5
 8017e5e:	e026      	b.n	8017eae <__hexnan+0x11a>
 8017e60:	3501      	adds	r5, #1
 8017e62:	2d08      	cmp	r5, #8
 8017e64:	f10b 0b01 	add.w	fp, fp, #1
 8017e68:	dd06      	ble.n	8017e78 <__hexnan+0xe4>
 8017e6a:	4544      	cmp	r4, r8
 8017e6c:	d9cf      	bls.n	8017e0e <__hexnan+0x7a>
 8017e6e:	2300      	movs	r3, #0
 8017e70:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e74:	2501      	movs	r5, #1
 8017e76:	3c04      	subs	r4, #4
 8017e78:	6822      	ldr	r2, [r4, #0]
 8017e7a:	f000 000f 	and.w	r0, r0, #15
 8017e7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e82:	6020      	str	r0, [r4, #0]
 8017e84:	e7c3      	b.n	8017e0e <__hexnan+0x7a>
 8017e86:	2508      	movs	r5, #8
 8017e88:	e7c1      	b.n	8017e0e <__hexnan+0x7a>
 8017e8a:	9b01      	ldr	r3, [sp, #4]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d0df      	beq.n	8017e50 <__hexnan+0xbc>
 8017e90:	f04f 32ff 	mov.w	r2, #4294967295
 8017e94:	f1c3 0320 	rsb	r3, r3, #32
 8017e98:	fa22 f303 	lsr.w	r3, r2, r3
 8017e9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017ea0:	401a      	ands	r2, r3
 8017ea2:	f847 2c04 	str.w	r2, [r7, #-4]
 8017ea6:	e7d3      	b.n	8017e50 <__hexnan+0xbc>
 8017ea8:	3e04      	subs	r6, #4
 8017eaa:	e7d1      	b.n	8017e50 <__hexnan+0xbc>
 8017eac:	2004      	movs	r0, #4
 8017eae:	b007      	add	sp, #28
 8017eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017eb4 <__locale_ctype_ptr_l>:
 8017eb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017eb8:	4770      	bx	lr
	...

08017ebc <__locale_ctype_ptr>:
 8017ebc:	4b04      	ldr	r3, [pc, #16]	; (8017ed0 <__locale_ctype_ptr+0x14>)
 8017ebe:	4a05      	ldr	r2, [pc, #20]	; (8017ed4 <__locale_ctype_ptr+0x18>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	6a1b      	ldr	r3, [r3, #32]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	bf08      	it	eq
 8017ec8:	4613      	moveq	r3, r2
 8017eca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017ece:	4770      	bx	lr
 8017ed0:	2000000c 	.word	0x2000000c
 8017ed4:	20000070 	.word	0x20000070

08017ed8 <__localeconv_l>:
 8017ed8:	30f0      	adds	r0, #240	; 0xf0
 8017eda:	4770      	bx	lr

08017edc <_localeconv_r>:
 8017edc:	4b04      	ldr	r3, [pc, #16]	; (8017ef0 <_localeconv_r+0x14>)
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	6a18      	ldr	r0, [r3, #32]
 8017ee2:	4b04      	ldr	r3, [pc, #16]	; (8017ef4 <_localeconv_r+0x18>)
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	bf08      	it	eq
 8017ee8:	4618      	moveq	r0, r3
 8017eea:	30f0      	adds	r0, #240	; 0xf0
 8017eec:	4770      	bx	lr
 8017eee:	bf00      	nop
 8017ef0:	2000000c 	.word	0x2000000c
 8017ef4:	20000070 	.word	0x20000070

08017ef8 <malloc>:
 8017ef8:	4b02      	ldr	r3, [pc, #8]	; (8017f04 <malloc+0xc>)
 8017efa:	4601      	mov	r1, r0
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	f000 bc71 	b.w	80187e4 <_malloc_r>
 8017f02:	bf00      	nop
 8017f04:	2000000c 	.word	0x2000000c

08017f08 <__ascii_mbtowc>:
 8017f08:	b082      	sub	sp, #8
 8017f0a:	b901      	cbnz	r1, 8017f0e <__ascii_mbtowc+0x6>
 8017f0c:	a901      	add	r1, sp, #4
 8017f0e:	b142      	cbz	r2, 8017f22 <__ascii_mbtowc+0x1a>
 8017f10:	b14b      	cbz	r3, 8017f26 <__ascii_mbtowc+0x1e>
 8017f12:	7813      	ldrb	r3, [r2, #0]
 8017f14:	600b      	str	r3, [r1, #0]
 8017f16:	7812      	ldrb	r2, [r2, #0]
 8017f18:	1c10      	adds	r0, r2, #0
 8017f1a:	bf18      	it	ne
 8017f1c:	2001      	movne	r0, #1
 8017f1e:	b002      	add	sp, #8
 8017f20:	4770      	bx	lr
 8017f22:	4610      	mov	r0, r2
 8017f24:	e7fb      	b.n	8017f1e <__ascii_mbtowc+0x16>
 8017f26:	f06f 0001 	mvn.w	r0, #1
 8017f2a:	e7f8      	b.n	8017f1e <__ascii_mbtowc+0x16>

08017f2c <_Balloc>:
 8017f2c:	b570      	push	{r4, r5, r6, lr}
 8017f2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f30:	4604      	mov	r4, r0
 8017f32:	460e      	mov	r6, r1
 8017f34:	b93d      	cbnz	r5, 8017f46 <_Balloc+0x1a>
 8017f36:	2010      	movs	r0, #16
 8017f38:	f7ff ffde 	bl	8017ef8 <malloc>
 8017f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8017f3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f42:	6005      	str	r5, [r0, #0]
 8017f44:	60c5      	str	r5, [r0, #12]
 8017f46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017f48:	68eb      	ldr	r3, [r5, #12]
 8017f4a:	b183      	cbz	r3, 8017f6e <_Balloc+0x42>
 8017f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f4e:	68db      	ldr	r3, [r3, #12]
 8017f50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017f54:	b9b8      	cbnz	r0, 8017f86 <_Balloc+0x5a>
 8017f56:	2101      	movs	r1, #1
 8017f58:	fa01 f506 	lsl.w	r5, r1, r6
 8017f5c:	1d6a      	adds	r2, r5, #5
 8017f5e:	0092      	lsls	r2, r2, #2
 8017f60:	4620      	mov	r0, r4
 8017f62:	f000 fbe2 	bl	801872a <_calloc_r>
 8017f66:	b160      	cbz	r0, 8017f82 <_Balloc+0x56>
 8017f68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017f6c:	e00e      	b.n	8017f8c <_Balloc+0x60>
 8017f6e:	2221      	movs	r2, #33	; 0x21
 8017f70:	2104      	movs	r1, #4
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 fbd9 	bl	801872a <_calloc_r>
 8017f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f7a:	60e8      	str	r0, [r5, #12]
 8017f7c:	68db      	ldr	r3, [r3, #12]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d1e4      	bne.n	8017f4c <_Balloc+0x20>
 8017f82:	2000      	movs	r0, #0
 8017f84:	bd70      	pop	{r4, r5, r6, pc}
 8017f86:	6802      	ldr	r2, [r0, #0]
 8017f88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f92:	e7f7      	b.n	8017f84 <_Balloc+0x58>

08017f94 <_Bfree>:
 8017f94:	b570      	push	{r4, r5, r6, lr}
 8017f96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017f98:	4606      	mov	r6, r0
 8017f9a:	460d      	mov	r5, r1
 8017f9c:	b93c      	cbnz	r4, 8017fae <_Bfree+0x1a>
 8017f9e:	2010      	movs	r0, #16
 8017fa0:	f7ff ffaa 	bl	8017ef8 <malloc>
 8017fa4:	6270      	str	r0, [r6, #36]	; 0x24
 8017fa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017faa:	6004      	str	r4, [r0, #0]
 8017fac:	60c4      	str	r4, [r0, #12]
 8017fae:	b13d      	cbz	r5, 8017fc0 <_Bfree+0x2c>
 8017fb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017fb2:	686a      	ldr	r2, [r5, #4]
 8017fb4:	68db      	ldr	r3, [r3, #12]
 8017fb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fba:	6029      	str	r1, [r5, #0]
 8017fbc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017fc0:	bd70      	pop	{r4, r5, r6, pc}

08017fc2 <__multadd>:
 8017fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc6:	690d      	ldr	r5, [r1, #16]
 8017fc8:	461f      	mov	r7, r3
 8017fca:	4606      	mov	r6, r0
 8017fcc:	460c      	mov	r4, r1
 8017fce:	f101 0c14 	add.w	ip, r1, #20
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	f8dc 0000 	ldr.w	r0, [ip]
 8017fd8:	b281      	uxth	r1, r0
 8017fda:	fb02 7101 	mla	r1, r2, r1, r7
 8017fde:	0c0f      	lsrs	r7, r1, #16
 8017fe0:	0c00      	lsrs	r0, r0, #16
 8017fe2:	fb02 7000 	mla	r0, r2, r0, r7
 8017fe6:	b289      	uxth	r1, r1
 8017fe8:	3301      	adds	r3, #1
 8017fea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017fee:	429d      	cmp	r5, r3
 8017ff0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017ff4:	f84c 1b04 	str.w	r1, [ip], #4
 8017ff8:	dcec      	bgt.n	8017fd4 <__multadd+0x12>
 8017ffa:	b1d7      	cbz	r7, 8018032 <__multadd+0x70>
 8017ffc:	68a3      	ldr	r3, [r4, #8]
 8017ffe:	42ab      	cmp	r3, r5
 8018000:	dc12      	bgt.n	8018028 <__multadd+0x66>
 8018002:	6861      	ldr	r1, [r4, #4]
 8018004:	4630      	mov	r0, r6
 8018006:	3101      	adds	r1, #1
 8018008:	f7ff ff90 	bl	8017f2c <_Balloc>
 801800c:	6922      	ldr	r2, [r4, #16]
 801800e:	3202      	adds	r2, #2
 8018010:	f104 010c 	add.w	r1, r4, #12
 8018014:	4680      	mov	r8, r0
 8018016:	0092      	lsls	r2, r2, #2
 8018018:	300c      	adds	r0, #12
 801801a:	f7fd f831 	bl	8015080 <memcpy>
 801801e:	4621      	mov	r1, r4
 8018020:	4630      	mov	r0, r6
 8018022:	f7ff ffb7 	bl	8017f94 <_Bfree>
 8018026:	4644      	mov	r4, r8
 8018028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801802c:	3501      	adds	r5, #1
 801802e:	615f      	str	r7, [r3, #20]
 8018030:	6125      	str	r5, [r4, #16]
 8018032:	4620      	mov	r0, r4
 8018034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018038 <__s2b>:
 8018038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801803c:	460c      	mov	r4, r1
 801803e:	4615      	mov	r5, r2
 8018040:	461f      	mov	r7, r3
 8018042:	2209      	movs	r2, #9
 8018044:	3308      	adds	r3, #8
 8018046:	4606      	mov	r6, r0
 8018048:	fb93 f3f2 	sdiv	r3, r3, r2
 801804c:	2100      	movs	r1, #0
 801804e:	2201      	movs	r2, #1
 8018050:	429a      	cmp	r2, r3
 8018052:	db20      	blt.n	8018096 <__s2b+0x5e>
 8018054:	4630      	mov	r0, r6
 8018056:	f7ff ff69 	bl	8017f2c <_Balloc>
 801805a:	9b08      	ldr	r3, [sp, #32]
 801805c:	6143      	str	r3, [r0, #20]
 801805e:	2d09      	cmp	r5, #9
 8018060:	f04f 0301 	mov.w	r3, #1
 8018064:	6103      	str	r3, [r0, #16]
 8018066:	dd19      	ble.n	801809c <__s2b+0x64>
 8018068:	f104 0809 	add.w	r8, r4, #9
 801806c:	46c1      	mov	r9, r8
 801806e:	442c      	add	r4, r5
 8018070:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018074:	4601      	mov	r1, r0
 8018076:	3b30      	subs	r3, #48	; 0x30
 8018078:	220a      	movs	r2, #10
 801807a:	4630      	mov	r0, r6
 801807c:	f7ff ffa1 	bl	8017fc2 <__multadd>
 8018080:	45a1      	cmp	r9, r4
 8018082:	d1f5      	bne.n	8018070 <__s2b+0x38>
 8018084:	eb08 0405 	add.w	r4, r8, r5
 8018088:	3c08      	subs	r4, #8
 801808a:	1b2d      	subs	r5, r5, r4
 801808c:	1963      	adds	r3, r4, r5
 801808e:	42bb      	cmp	r3, r7
 8018090:	db07      	blt.n	80180a2 <__s2b+0x6a>
 8018092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018096:	0052      	lsls	r2, r2, #1
 8018098:	3101      	adds	r1, #1
 801809a:	e7d9      	b.n	8018050 <__s2b+0x18>
 801809c:	340a      	adds	r4, #10
 801809e:	2509      	movs	r5, #9
 80180a0:	e7f3      	b.n	801808a <__s2b+0x52>
 80180a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180a6:	4601      	mov	r1, r0
 80180a8:	3b30      	subs	r3, #48	; 0x30
 80180aa:	220a      	movs	r2, #10
 80180ac:	4630      	mov	r0, r6
 80180ae:	f7ff ff88 	bl	8017fc2 <__multadd>
 80180b2:	e7eb      	b.n	801808c <__s2b+0x54>

080180b4 <__hi0bits>:
 80180b4:	0c02      	lsrs	r2, r0, #16
 80180b6:	0412      	lsls	r2, r2, #16
 80180b8:	4603      	mov	r3, r0
 80180ba:	b9b2      	cbnz	r2, 80180ea <__hi0bits+0x36>
 80180bc:	0403      	lsls	r3, r0, #16
 80180be:	2010      	movs	r0, #16
 80180c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80180c4:	bf04      	itt	eq
 80180c6:	021b      	lsleq	r3, r3, #8
 80180c8:	3008      	addeq	r0, #8
 80180ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80180ce:	bf04      	itt	eq
 80180d0:	011b      	lsleq	r3, r3, #4
 80180d2:	3004      	addeq	r0, #4
 80180d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80180d8:	bf04      	itt	eq
 80180da:	009b      	lsleq	r3, r3, #2
 80180dc:	3002      	addeq	r0, #2
 80180de:	2b00      	cmp	r3, #0
 80180e0:	db06      	blt.n	80180f0 <__hi0bits+0x3c>
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	d503      	bpl.n	80180ee <__hi0bits+0x3a>
 80180e6:	3001      	adds	r0, #1
 80180e8:	4770      	bx	lr
 80180ea:	2000      	movs	r0, #0
 80180ec:	e7e8      	b.n	80180c0 <__hi0bits+0xc>
 80180ee:	2020      	movs	r0, #32
 80180f0:	4770      	bx	lr

080180f2 <__lo0bits>:
 80180f2:	6803      	ldr	r3, [r0, #0]
 80180f4:	f013 0207 	ands.w	r2, r3, #7
 80180f8:	4601      	mov	r1, r0
 80180fa:	d00b      	beq.n	8018114 <__lo0bits+0x22>
 80180fc:	07da      	lsls	r2, r3, #31
 80180fe:	d423      	bmi.n	8018148 <__lo0bits+0x56>
 8018100:	0798      	lsls	r0, r3, #30
 8018102:	bf49      	itett	mi
 8018104:	085b      	lsrmi	r3, r3, #1
 8018106:	089b      	lsrpl	r3, r3, #2
 8018108:	2001      	movmi	r0, #1
 801810a:	600b      	strmi	r3, [r1, #0]
 801810c:	bf5c      	itt	pl
 801810e:	600b      	strpl	r3, [r1, #0]
 8018110:	2002      	movpl	r0, #2
 8018112:	4770      	bx	lr
 8018114:	b298      	uxth	r0, r3
 8018116:	b9a8      	cbnz	r0, 8018144 <__lo0bits+0x52>
 8018118:	0c1b      	lsrs	r3, r3, #16
 801811a:	2010      	movs	r0, #16
 801811c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018120:	bf04      	itt	eq
 8018122:	0a1b      	lsreq	r3, r3, #8
 8018124:	3008      	addeq	r0, #8
 8018126:	071a      	lsls	r2, r3, #28
 8018128:	bf04      	itt	eq
 801812a:	091b      	lsreq	r3, r3, #4
 801812c:	3004      	addeq	r0, #4
 801812e:	079a      	lsls	r2, r3, #30
 8018130:	bf04      	itt	eq
 8018132:	089b      	lsreq	r3, r3, #2
 8018134:	3002      	addeq	r0, #2
 8018136:	07da      	lsls	r2, r3, #31
 8018138:	d402      	bmi.n	8018140 <__lo0bits+0x4e>
 801813a:	085b      	lsrs	r3, r3, #1
 801813c:	d006      	beq.n	801814c <__lo0bits+0x5a>
 801813e:	3001      	adds	r0, #1
 8018140:	600b      	str	r3, [r1, #0]
 8018142:	4770      	bx	lr
 8018144:	4610      	mov	r0, r2
 8018146:	e7e9      	b.n	801811c <__lo0bits+0x2a>
 8018148:	2000      	movs	r0, #0
 801814a:	4770      	bx	lr
 801814c:	2020      	movs	r0, #32
 801814e:	4770      	bx	lr

08018150 <__i2b>:
 8018150:	b510      	push	{r4, lr}
 8018152:	460c      	mov	r4, r1
 8018154:	2101      	movs	r1, #1
 8018156:	f7ff fee9 	bl	8017f2c <_Balloc>
 801815a:	2201      	movs	r2, #1
 801815c:	6144      	str	r4, [r0, #20]
 801815e:	6102      	str	r2, [r0, #16]
 8018160:	bd10      	pop	{r4, pc}

08018162 <__multiply>:
 8018162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018166:	4614      	mov	r4, r2
 8018168:	690a      	ldr	r2, [r1, #16]
 801816a:	6923      	ldr	r3, [r4, #16]
 801816c:	429a      	cmp	r2, r3
 801816e:	bfb8      	it	lt
 8018170:	460b      	movlt	r3, r1
 8018172:	4688      	mov	r8, r1
 8018174:	bfbc      	itt	lt
 8018176:	46a0      	movlt	r8, r4
 8018178:	461c      	movlt	r4, r3
 801817a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801817e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018186:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801818a:	eb07 0609 	add.w	r6, r7, r9
 801818e:	42b3      	cmp	r3, r6
 8018190:	bfb8      	it	lt
 8018192:	3101      	addlt	r1, #1
 8018194:	f7ff feca 	bl	8017f2c <_Balloc>
 8018198:	f100 0514 	add.w	r5, r0, #20
 801819c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80181a0:	462b      	mov	r3, r5
 80181a2:	2200      	movs	r2, #0
 80181a4:	4573      	cmp	r3, lr
 80181a6:	d316      	bcc.n	80181d6 <__multiply+0x74>
 80181a8:	f104 0214 	add.w	r2, r4, #20
 80181ac:	f108 0114 	add.w	r1, r8, #20
 80181b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80181b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	9b00      	ldr	r3, [sp, #0]
 80181bc:	9201      	str	r2, [sp, #4]
 80181be:	4293      	cmp	r3, r2
 80181c0:	d80c      	bhi.n	80181dc <__multiply+0x7a>
 80181c2:	2e00      	cmp	r6, #0
 80181c4:	dd03      	ble.n	80181ce <__multiply+0x6c>
 80181c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d05d      	beq.n	801828a <__multiply+0x128>
 80181ce:	6106      	str	r6, [r0, #16]
 80181d0:	b003      	add	sp, #12
 80181d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d6:	f843 2b04 	str.w	r2, [r3], #4
 80181da:	e7e3      	b.n	80181a4 <__multiply+0x42>
 80181dc:	f8b2 b000 	ldrh.w	fp, [r2]
 80181e0:	f1bb 0f00 	cmp.w	fp, #0
 80181e4:	d023      	beq.n	801822e <__multiply+0xcc>
 80181e6:	4689      	mov	r9, r1
 80181e8:	46ac      	mov	ip, r5
 80181ea:	f04f 0800 	mov.w	r8, #0
 80181ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80181f2:	f8dc a000 	ldr.w	sl, [ip]
 80181f6:	b2a3      	uxth	r3, r4
 80181f8:	fa1f fa8a 	uxth.w	sl, sl
 80181fc:	fb0b a303 	mla	r3, fp, r3, sl
 8018200:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018204:	f8dc 4000 	ldr.w	r4, [ip]
 8018208:	4443      	add	r3, r8
 801820a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801820e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018212:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018216:	46e2      	mov	sl, ip
 8018218:	b29b      	uxth	r3, r3
 801821a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801821e:	454f      	cmp	r7, r9
 8018220:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018224:	f84a 3b04 	str.w	r3, [sl], #4
 8018228:	d82b      	bhi.n	8018282 <__multiply+0x120>
 801822a:	f8cc 8004 	str.w	r8, [ip, #4]
 801822e:	9b01      	ldr	r3, [sp, #4]
 8018230:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018234:	3204      	adds	r2, #4
 8018236:	f1ba 0f00 	cmp.w	sl, #0
 801823a:	d020      	beq.n	801827e <__multiply+0x11c>
 801823c:	682b      	ldr	r3, [r5, #0]
 801823e:	4689      	mov	r9, r1
 8018240:	46a8      	mov	r8, r5
 8018242:	f04f 0b00 	mov.w	fp, #0
 8018246:	f8b9 c000 	ldrh.w	ip, [r9]
 801824a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801824e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018252:	445c      	add	r4, fp
 8018254:	46c4      	mov	ip, r8
 8018256:	b29b      	uxth	r3, r3
 8018258:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801825c:	f84c 3b04 	str.w	r3, [ip], #4
 8018260:	f859 3b04 	ldr.w	r3, [r9], #4
 8018264:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018268:	0c1b      	lsrs	r3, r3, #16
 801826a:	fb0a b303 	mla	r3, sl, r3, fp
 801826e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018272:	454f      	cmp	r7, r9
 8018274:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018278:	d805      	bhi.n	8018286 <__multiply+0x124>
 801827a:	f8c8 3004 	str.w	r3, [r8, #4]
 801827e:	3504      	adds	r5, #4
 8018280:	e79b      	b.n	80181ba <__multiply+0x58>
 8018282:	46d4      	mov	ip, sl
 8018284:	e7b3      	b.n	80181ee <__multiply+0x8c>
 8018286:	46e0      	mov	r8, ip
 8018288:	e7dd      	b.n	8018246 <__multiply+0xe4>
 801828a:	3e01      	subs	r6, #1
 801828c:	e799      	b.n	80181c2 <__multiply+0x60>
	...

08018290 <__pow5mult>:
 8018290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018294:	4615      	mov	r5, r2
 8018296:	f012 0203 	ands.w	r2, r2, #3
 801829a:	4606      	mov	r6, r0
 801829c:	460f      	mov	r7, r1
 801829e:	d007      	beq.n	80182b0 <__pow5mult+0x20>
 80182a0:	3a01      	subs	r2, #1
 80182a2:	4c21      	ldr	r4, [pc, #132]	; (8018328 <__pow5mult+0x98>)
 80182a4:	2300      	movs	r3, #0
 80182a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182aa:	f7ff fe8a 	bl	8017fc2 <__multadd>
 80182ae:	4607      	mov	r7, r0
 80182b0:	10ad      	asrs	r5, r5, #2
 80182b2:	d035      	beq.n	8018320 <__pow5mult+0x90>
 80182b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182b6:	b93c      	cbnz	r4, 80182c8 <__pow5mult+0x38>
 80182b8:	2010      	movs	r0, #16
 80182ba:	f7ff fe1d 	bl	8017ef8 <malloc>
 80182be:	6270      	str	r0, [r6, #36]	; 0x24
 80182c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182c4:	6004      	str	r4, [r0, #0]
 80182c6:	60c4      	str	r4, [r0, #12]
 80182c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80182cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182d0:	b94c      	cbnz	r4, 80182e6 <__pow5mult+0x56>
 80182d2:	f240 2171 	movw	r1, #625	; 0x271
 80182d6:	4630      	mov	r0, r6
 80182d8:	f7ff ff3a 	bl	8018150 <__i2b>
 80182dc:	2300      	movs	r3, #0
 80182de:	f8c8 0008 	str.w	r0, [r8, #8]
 80182e2:	4604      	mov	r4, r0
 80182e4:	6003      	str	r3, [r0, #0]
 80182e6:	f04f 0800 	mov.w	r8, #0
 80182ea:	07eb      	lsls	r3, r5, #31
 80182ec:	d50a      	bpl.n	8018304 <__pow5mult+0x74>
 80182ee:	4639      	mov	r1, r7
 80182f0:	4622      	mov	r2, r4
 80182f2:	4630      	mov	r0, r6
 80182f4:	f7ff ff35 	bl	8018162 <__multiply>
 80182f8:	4639      	mov	r1, r7
 80182fa:	4681      	mov	r9, r0
 80182fc:	4630      	mov	r0, r6
 80182fe:	f7ff fe49 	bl	8017f94 <_Bfree>
 8018302:	464f      	mov	r7, r9
 8018304:	106d      	asrs	r5, r5, #1
 8018306:	d00b      	beq.n	8018320 <__pow5mult+0x90>
 8018308:	6820      	ldr	r0, [r4, #0]
 801830a:	b938      	cbnz	r0, 801831c <__pow5mult+0x8c>
 801830c:	4622      	mov	r2, r4
 801830e:	4621      	mov	r1, r4
 8018310:	4630      	mov	r0, r6
 8018312:	f7ff ff26 	bl	8018162 <__multiply>
 8018316:	6020      	str	r0, [r4, #0]
 8018318:	f8c0 8000 	str.w	r8, [r0]
 801831c:	4604      	mov	r4, r0
 801831e:	e7e4      	b.n	80182ea <__pow5mult+0x5a>
 8018320:	4638      	mov	r0, r7
 8018322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018326:	bf00      	nop
 8018328:	08019f08 	.word	0x08019f08

0801832c <__lshift>:
 801832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018330:	460c      	mov	r4, r1
 8018332:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018336:	6923      	ldr	r3, [r4, #16]
 8018338:	6849      	ldr	r1, [r1, #4]
 801833a:	eb0a 0903 	add.w	r9, sl, r3
 801833e:	68a3      	ldr	r3, [r4, #8]
 8018340:	4607      	mov	r7, r0
 8018342:	4616      	mov	r6, r2
 8018344:	f109 0501 	add.w	r5, r9, #1
 8018348:	42ab      	cmp	r3, r5
 801834a:	db32      	blt.n	80183b2 <__lshift+0x86>
 801834c:	4638      	mov	r0, r7
 801834e:	f7ff fded 	bl	8017f2c <_Balloc>
 8018352:	2300      	movs	r3, #0
 8018354:	4680      	mov	r8, r0
 8018356:	f100 0114 	add.w	r1, r0, #20
 801835a:	461a      	mov	r2, r3
 801835c:	4553      	cmp	r3, sl
 801835e:	db2b      	blt.n	80183b8 <__lshift+0x8c>
 8018360:	6920      	ldr	r0, [r4, #16]
 8018362:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018366:	f104 0314 	add.w	r3, r4, #20
 801836a:	f016 021f 	ands.w	r2, r6, #31
 801836e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018372:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018376:	d025      	beq.n	80183c4 <__lshift+0x98>
 8018378:	f1c2 0e20 	rsb	lr, r2, #32
 801837c:	2000      	movs	r0, #0
 801837e:	681e      	ldr	r6, [r3, #0]
 8018380:	468a      	mov	sl, r1
 8018382:	4096      	lsls	r6, r2
 8018384:	4330      	orrs	r0, r6
 8018386:	f84a 0b04 	str.w	r0, [sl], #4
 801838a:	f853 0b04 	ldr.w	r0, [r3], #4
 801838e:	459c      	cmp	ip, r3
 8018390:	fa20 f00e 	lsr.w	r0, r0, lr
 8018394:	d814      	bhi.n	80183c0 <__lshift+0x94>
 8018396:	6048      	str	r0, [r1, #4]
 8018398:	b108      	cbz	r0, 801839e <__lshift+0x72>
 801839a:	f109 0502 	add.w	r5, r9, #2
 801839e:	3d01      	subs	r5, #1
 80183a0:	4638      	mov	r0, r7
 80183a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80183a6:	4621      	mov	r1, r4
 80183a8:	f7ff fdf4 	bl	8017f94 <_Bfree>
 80183ac:	4640      	mov	r0, r8
 80183ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183b2:	3101      	adds	r1, #1
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	e7c7      	b.n	8018348 <__lshift+0x1c>
 80183b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80183bc:	3301      	adds	r3, #1
 80183be:	e7cd      	b.n	801835c <__lshift+0x30>
 80183c0:	4651      	mov	r1, sl
 80183c2:	e7dc      	b.n	801837e <__lshift+0x52>
 80183c4:	3904      	subs	r1, #4
 80183c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80183ce:	459c      	cmp	ip, r3
 80183d0:	d8f9      	bhi.n	80183c6 <__lshift+0x9a>
 80183d2:	e7e4      	b.n	801839e <__lshift+0x72>

080183d4 <__mcmp>:
 80183d4:	6903      	ldr	r3, [r0, #16]
 80183d6:	690a      	ldr	r2, [r1, #16]
 80183d8:	1a9b      	subs	r3, r3, r2
 80183da:	b530      	push	{r4, r5, lr}
 80183dc:	d10c      	bne.n	80183f8 <__mcmp+0x24>
 80183de:	0092      	lsls	r2, r2, #2
 80183e0:	3014      	adds	r0, #20
 80183e2:	3114      	adds	r1, #20
 80183e4:	1884      	adds	r4, r0, r2
 80183e6:	4411      	add	r1, r2
 80183e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80183ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80183f0:	4295      	cmp	r5, r2
 80183f2:	d003      	beq.n	80183fc <__mcmp+0x28>
 80183f4:	d305      	bcc.n	8018402 <__mcmp+0x2e>
 80183f6:	2301      	movs	r3, #1
 80183f8:	4618      	mov	r0, r3
 80183fa:	bd30      	pop	{r4, r5, pc}
 80183fc:	42a0      	cmp	r0, r4
 80183fe:	d3f3      	bcc.n	80183e8 <__mcmp+0x14>
 8018400:	e7fa      	b.n	80183f8 <__mcmp+0x24>
 8018402:	f04f 33ff 	mov.w	r3, #4294967295
 8018406:	e7f7      	b.n	80183f8 <__mcmp+0x24>

08018408 <__mdiff>:
 8018408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801840c:	460d      	mov	r5, r1
 801840e:	4607      	mov	r7, r0
 8018410:	4611      	mov	r1, r2
 8018412:	4628      	mov	r0, r5
 8018414:	4614      	mov	r4, r2
 8018416:	f7ff ffdd 	bl	80183d4 <__mcmp>
 801841a:	1e06      	subs	r6, r0, #0
 801841c:	d108      	bne.n	8018430 <__mdiff+0x28>
 801841e:	4631      	mov	r1, r6
 8018420:	4638      	mov	r0, r7
 8018422:	f7ff fd83 	bl	8017f2c <_Balloc>
 8018426:	2301      	movs	r3, #1
 8018428:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018430:	bfa4      	itt	ge
 8018432:	4623      	movge	r3, r4
 8018434:	462c      	movge	r4, r5
 8018436:	4638      	mov	r0, r7
 8018438:	6861      	ldr	r1, [r4, #4]
 801843a:	bfa6      	itte	ge
 801843c:	461d      	movge	r5, r3
 801843e:	2600      	movge	r6, #0
 8018440:	2601      	movlt	r6, #1
 8018442:	f7ff fd73 	bl	8017f2c <_Balloc>
 8018446:	692b      	ldr	r3, [r5, #16]
 8018448:	60c6      	str	r6, [r0, #12]
 801844a:	6926      	ldr	r6, [r4, #16]
 801844c:	f105 0914 	add.w	r9, r5, #20
 8018450:	f104 0214 	add.w	r2, r4, #20
 8018454:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018458:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801845c:	f100 0514 	add.w	r5, r0, #20
 8018460:	f04f 0e00 	mov.w	lr, #0
 8018464:	f852 ab04 	ldr.w	sl, [r2], #4
 8018468:	f859 4b04 	ldr.w	r4, [r9], #4
 801846c:	fa1e f18a 	uxtah	r1, lr, sl
 8018470:	b2a3      	uxth	r3, r4
 8018472:	1ac9      	subs	r1, r1, r3
 8018474:	0c23      	lsrs	r3, r4, #16
 8018476:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801847a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801847e:	b289      	uxth	r1, r1
 8018480:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018484:	45c8      	cmp	r8, r9
 8018486:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801848a:	4694      	mov	ip, r2
 801848c:	f845 3b04 	str.w	r3, [r5], #4
 8018490:	d8e8      	bhi.n	8018464 <__mdiff+0x5c>
 8018492:	45bc      	cmp	ip, r7
 8018494:	d304      	bcc.n	80184a0 <__mdiff+0x98>
 8018496:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801849a:	b183      	cbz	r3, 80184be <__mdiff+0xb6>
 801849c:	6106      	str	r6, [r0, #16]
 801849e:	e7c5      	b.n	801842c <__mdiff+0x24>
 80184a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80184a4:	fa1e f381 	uxtah	r3, lr, r1
 80184a8:	141a      	asrs	r2, r3, #16
 80184aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80184b8:	f845 3b04 	str.w	r3, [r5], #4
 80184bc:	e7e9      	b.n	8018492 <__mdiff+0x8a>
 80184be:	3e01      	subs	r6, #1
 80184c0:	e7e9      	b.n	8018496 <__mdiff+0x8e>
	...

080184c4 <__ulp>:
 80184c4:	4b12      	ldr	r3, [pc, #72]	; (8018510 <__ulp+0x4c>)
 80184c6:	ee10 2a90 	vmov	r2, s1
 80184ca:	401a      	ands	r2, r3
 80184cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	dd04      	ble.n	80184de <__ulp+0x1a>
 80184d4:	2000      	movs	r0, #0
 80184d6:	4619      	mov	r1, r3
 80184d8:	ec41 0b10 	vmov	d0, r0, r1
 80184dc:	4770      	bx	lr
 80184de:	425b      	negs	r3, r3
 80184e0:	151b      	asrs	r3, r3, #20
 80184e2:	2b13      	cmp	r3, #19
 80184e4:	f04f 0000 	mov.w	r0, #0
 80184e8:	f04f 0100 	mov.w	r1, #0
 80184ec:	dc04      	bgt.n	80184f8 <__ulp+0x34>
 80184ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80184f2:	fa42 f103 	asr.w	r1, r2, r3
 80184f6:	e7ef      	b.n	80184d8 <__ulp+0x14>
 80184f8:	3b14      	subs	r3, #20
 80184fa:	2b1e      	cmp	r3, #30
 80184fc:	f04f 0201 	mov.w	r2, #1
 8018500:	bfda      	itte	le
 8018502:	f1c3 031f 	rsble	r3, r3, #31
 8018506:	fa02 f303 	lslle.w	r3, r2, r3
 801850a:	4613      	movgt	r3, r2
 801850c:	4618      	mov	r0, r3
 801850e:	e7e3      	b.n	80184d8 <__ulp+0x14>
 8018510:	7ff00000 	.word	0x7ff00000

08018514 <__b2d>:
 8018514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018516:	6905      	ldr	r5, [r0, #16]
 8018518:	f100 0714 	add.w	r7, r0, #20
 801851c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018520:	1f2e      	subs	r6, r5, #4
 8018522:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018526:	4620      	mov	r0, r4
 8018528:	f7ff fdc4 	bl	80180b4 <__hi0bits>
 801852c:	f1c0 0320 	rsb	r3, r0, #32
 8018530:	280a      	cmp	r0, #10
 8018532:	600b      	str	r3, [r1, #0]
 8018534:	f8df c074 	ldr.w	ip, [pc, #116]	; 80185ac <__b2d+0x98>
 8018538:	dc14      	bgt.n	8018564 <__b2d+0x50>
 801853a:	f1c0 0e0b 	rsb	lr, r0, #11
 801853e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018542:	42b7      	cmp	r7, r6
 8018544:	ea41 030c 	orr.w	r3, r1, ip
 8018548:	bf34      	ite	cc
 801854a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801854e:	2100      	movcs	r1, #0
 8018550:	3015      	adds	r0, #21
 8018552:	fa04 f000 	lsl.w	r0, r4, r0
 8018556:	fa21 f10e 	lsr.w	r1, r1, lr
 801855a:	ea40 0201 	orr.w	r2, r0, r1
 801855e:	ec43 2b10 	vmov	d0, r2, r3
 8018562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018564:	42b7      	cmp	r7, r6
 8018566:	bf3a      	itte	cc
 8018568:	f1a5 0608 	subcc.w	r6, r5, #8
 801856c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018570:	2100      	movcs	r1, #0
 8018572:	380b      	subs	r0, #11
 8018574:	d015      	beq.n	80185a2 <__b2d+0x8e>
 8018576:	4084      	lsls	r4, r0
 8018578:	f1c0 0520 	rsb	r5, r0, #32
 801857c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018580:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018584:	42be      	cmp	r6, r7
 8018586:	fa21 fc05 	lsr.w	ip, r1, r5
 801858a:	ea44 030c 	orr.w	r3, r4, ip
 801858e:	bf8c      	ite	hi
 8018590:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018594:	2400      	movls	r4, #0
 8018596:	fa01 f000 	lsl.w	r0, r1, r0
 801859a:	40ec      	lsrs	r4, r5
 801859c:	ea40 0204 	orr.w	r2, r0, r4
 80185a0:	e7dd      	b.n	801855e <__b2d+0x4a>
 80185a2:	ea44 030c 	orr.w	r3, r4, ip
 80185a6:	460a      	mov	r2, r1
 80185a8:	e7d9      	b.n	801855e <__b2d+0x4a>
 80185aa:	bf00      	nop
 80185ac:	3ff00000 	.word	0x3ff00000

080185b0 <__d2b>:
 80185b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80185b4:	460e      	mov	r6, r1
 80185b6:	2101      	movs	r1, #1
 80185b8:	ec59 8b10 	vmov	r8, r9, d0
 80185bc:	4615      	mov	r5, r2
 80185be:	f7ff fcb5 	bl	8017f2c <_Balloc>
 80185c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80185c6:	4607      	mov	r7, r0
 80185c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80185cc:	bb34      	cbnz	r4, 801861c <__d2b+0x6c>
 80185ce:	9301      	str	r3, [sp, #4]
 80185d0:	f1b8 0300 	subs.w	r3, r8, #0
 80185d4:	d027      	beq.n	8018626 <__d2b+0x76>
 80185d6:	a802      	add	r0, sp, #8
 80185d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80185dc:	f7ff fd89 	bl	80180f2 <__lo0bits>
 80185e0:	9900      	ldr	r1, [sp, #0]
 80185e2:	b1f0      	cbz	r0, 8018622 <__d2b+0x72>
 80185e4:	9a01      	ldr	r2, [sp, #4]
 80185e6:	f1c0 0320 	rsb	r3, r0, #32
 80185ea:	fa02 f303 	lsl.w	r3, r2, r3
 80185ee:	430b      	orrs	r3, r1
 80185f0:	40c2      	lsrs	r2, r0
 80185f2:	617b      	str	r3, [r7, #20]
 80185f4:	9201      	str	r2, [sp, #4]
 80185f6:	9b01      	ldr	r3, [sp, #4]
 80185f8:	61bb      	str	r3, [r7, #24]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	bf14      	ite	ne
 80185fe:	2102      	movne	r1, #2
 8018600:	2101      	moveq	r1, #1
 8018602:	6139      	str	r1, [r7, #16]
 8018604:	b1c4      	cbz	r4, 8018638 <__d2b+0x88>
 8018606:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801860a:	4404      	add	r4, r0
 801860c:	6034      	str	r4, [r6, #0]
 801860e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018612:	6028      	str	r0, [r5, #0]
 8018614:	4638      	mov	r0, r7
 8018616:	b003      	add	sp, #12
 8018618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801861c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018620:	e7d5      	b.n	80185ce <__d2b+0x1e>
 8018622:	6179      	str	r1, [r7, #20]
 8018624:	e7e7      	b.n	80185f6 <__d2b+0x46>
 8018626:	a801      	add	r0, sp, #4
 8018628:	f7ff fd63 	bl	80180f2 <__lo0bits>
 801862c:	9b01      	ldr	r3, [sp, #4]
 801862e:	617b      	str	r3, [r7, #20]
 8018630:	2101      	movs	r1, #1
 8018632:	6139      	str	r1, [r7, #16]
 8018634:	3020      	adds	r0, #32
 8018636:	e7e5      	b.n	8018604 <__d2b+0x54>
 8018638:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801863c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018640:	6030      	str	r0, [r6, #0]
 8018642:	6918      	ldr	r0, [r3, #16]
 8018644:	f7ff fd36 	bl	80180b4 <__hi0bits>
 8018648:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801864c:	e7e1      	b.n	8018612 <__d2b+0x62>

0801864e <__ratio>:
 801864e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018652:	4688      	mov	r8, r1
 8018654:	4669      	mov	r1, sp
 8018656:	4681      	mov	r9, r0
 8018658:	f7ff ff5c 	bl	8018514 <__b2d>
 801865c:	a901      	add	r1, sp, #4
 801865e:	4640      	mov	r0, r8
 8018660:	ec57 6b10 	vmov	r6, r7, d0
 8018664:	f7ff ff56 	bl	8018514 <__b2d>
 8018668:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801866c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018670:	eba3 0c02 	sub.w	ip, r3, r2
 8018674:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018678:	1a9b      	subs	r3, r3, r2
 801867a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801867e:	ec5b ab10 	vmov	sl, fp, d0
 8018682:	2b00      	cmp	r3, #0
 8018684:	bfce      	itee	gt
 8018686:	463a      	movgt	r2, r7
 8018688:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801868c:	465a      	movle	r2, fp
 801868e:	4659      	mov	r1, fp
 8018690:	463d      	mov	r5, r7
 8018692:	bfd4      	ite	le
 8018694:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018698:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801869c:	4630      	mov	r0, r6
 801869e:	ee10 2a10 	vmov	r2, s0
 80186a2:	460b      	mov	r3, r1
 80186a4:	4629      	mov	r1, r5
 80186a6:	f7e8 f8e9 	bl	800087c <__aeabi_ddiv>
 80186aa:	ec41 0b10 	vmov	d0, r0, r1
 80186ae:	b003      	add	sp, #12
 80186b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186b4 <__copybits>:
 80186b4:	3901      	subs	r1, #1
 80186b6:	b510      	push	{r4, lr}
 80186b8:	1149      	asrs	r1, r1, #5
 80186ba:	6914      	ldr	r4, [r2, #16]
 80186bc:	3101      	adds	r1, #1
 80186be:	f102 0314 	add.w	r3, r2, #20
 80186c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80186c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80186ca:	42a3      	cmp	r3, r4
 80186cc:	4602      	mov	r2, r0
 80186ce:	d303      	bcc.n	80186d8 <__copybits+0x24>
 80186d0:	2300      	movs	r3, #0
 80186d2:	428a      	cmp	r2, r1
 80186d4:	d305      	bcc.n	80186e2 <__copybits+0x2e>
 80186d6:	bd10      	pop	{r4, pc}
 80186d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80186dc:	f840 2b04 	str.w	r2, [r0], #4
 80186e0:	e7f3      	b.n	80186ca <__copybits+0x16>
 80186e2:	f842 3b04 	str.w	r3, [r2], #4
 80186e6:	e7f4      	b.n	80186d2 <__copybits+0x1e>

080186e8 <__any_on>:
 80186e8:	f100 0214 	add.w	r2, r0, #20
 80186ec:	6900      	ldr	r0, [r0, #16]
 80186ee:	114b      	asrs	r3, r1, #5
 80186f0:	4298      	cmp	r0, r3
 80186f2:	b510      	push	{r4, lr}
 80186f4:	db11      	blt.n	801871a <__any_on+0x32>
 80186f6:	dd0a      	ble.n	801870e <__any_on+0x26>
 80186f8:	f011 011f 	ands.w	r1, r1, #31
 80186fc:	d007      	beq.n	801870e <__any_on+0x26>
 80186fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018702:	fa24 f001 	lsr.w	r0, r4, r1
 8018706:	fa00 f101 	lsl.w	r1, r0, r1
 801870a:	428c      	cmp	r4, r1
 801870c:	d10b      	bne.n	8018726 <__any_on+0x3e>
 801870e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018712:	4293      	cmp	r3, r2
 8018714:	d803      	bhi.n	801871e <__any_on+0x36>
 8018716:	2000      	movs	r0, #0
 8018718:	bd10      	pop	{r4, pc}
 801871a:	4603      	mov	r3, r0
 801871c:	e7f7      	b.n	801870e <__any_on+0x26>
 801871e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018722:	2900      	cmp	r1, #0
 8018724:	d0f5      	beq.n	8018712 <__any_on+0x2a>
 8018726:	2001      	movs	r0, #1
 8018728:	e7f6      	b.n	8018718 <__any_on+0x30>

0801872a <_calloc_r>:
 801872a:	b538      	push	{r3, r4, r5, lr}
 801872c:	fb02 f401 	mul.w	r4, r2, r1
 8018730:	4621      	mov	r1, r4
 8018732:	f000 f857 	bl	80187e4 <_malloc_r>
 8018736:	4605      	mov	r5, r0
 8018738:	b118      	cbz	r0, 8018742 <_calloc_r+0x18>
 801873a:	4622      	mov	r2, r4
 801873c:	2100      	movs	r1, #0
 801873e:	f7fc fcaa 	bl	8015096 <memset>
 8018742:	4628      	mov	r0, r5
 8018744:	bd38      	pop	{r3, r4, r5, pc}
	...

08018748 <_free_r>:
 8018748:	b538      	push	{r3, r4, r5, lr}
 801874a:	4605      	mov	r5, r0
 801874c:	2900      	cmp	r1, #0
 801874e:	d045      	beq.n	80187dc <_free_r+0x94>
 8018750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018754:	1f0c      	subs	r4, r1, #4
 8018756:	2b00      	cmp	r3, #0
 8018758:	bfb8      	it	lt
 801875a:	18e4      	addlt	r4, r4, r3
 801875c:	f000 fe30 	bl	80193c0 <__malloc_lock>
 8018760:	4a1f      	ldr	r2, [pc, #124]	; (80187e0 <_free_r+0x98>)
 8018762:	6813      	ldr	r3, [r2, #0]
 8018764:	4610      	mov	r0, r2
 8018766:	b933      	cbnz	r3, 8018776 <_free_r+0x2e>
 8018768:	6063      	str	r3, [r4, #4]
 801876a:	6014      	str	r4, [r2, #0]
 801876c:	4628      	mov	r0, r5
 801876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018772:	f000 be26 	b.w	80193c2 <__malloc_unlock>
 8018776:	42a3      	cmp	r3, r4
 8018778:	d90c      	bls.n	8018794 <_free_r+0x4c>
 801877a:	6821      	ldr	r1, [r4, #0]
 801877c:	1862      	adds	r2, r4, r1
 801877e:	4293      	cmp	r3, r2
 8018780:	bf04      	itt	eq
 8018782:	681a      	ldreq	r2, [r3, #0]
 8018784:	685b      	ldreq	r3, [r3, #4]
 8018786:	6063      	str	r3, [r4, #4]
 8018788:	bf04      	itt	eq
 801878a:	1852      	addeq	r2, r2, r1
 801878c:	6022      	streq	r2, [r4, #0]
 801878e:	6004      	str	r4, [r0, #0]
 8018790:	e7ec      	b.n	801876c <_free_r+0x24>
 8018792:	4613      	mov	r3, r2
 8018794:	685a      	ldr	r2, [r3, #4]
 8018796:	b10a      	cbz	r2, 801879c <_free_r+0x54>
 8018798:	42a2      	cmp	r2, r4
 801879a:	d9fa      	bls.n	8018792 <_free_r+0x4a>
 801879c:	6819      	ldr	r1, [r3, #0]
 801879e:	1858      	adds	r0, r3, r1
 80187a0:	42a0      	cmp	r0, r4
 80187a2:	d10b      	bne.n	80187bc <_free_r+0x74>
 80187a4:	6820      	ldr	r0, [r4, #0]
 80187a6:	4401      	add	r1, r0
 80187a8:	1858      	adds	r0, r3, r1
 80187aa:	4282      	cmp	r2, r0
 80187ac:	6019      	str	r1, [r3, #0]
 80187ae:	d1dd      	bne.n	801876c <_free_r+0x24>
 80187b0:	6810      	ldr	r0, [r2, #0]
 80187b2:	6852      	ldr	r2, [r2, #4]
 80187b4:	605a      	str	r2, [r3, #4]
 80187b6:	4401      	add	r1, r0
 80187b8:	6019      	str	r1, [r3, #0]
 80187ba:	e7d7      	b.n	801876c <_free_r+0x24>
 80187bc:	d902      	bls.n	80187c4 <_free_r+0x7c>
 80187be:	230c      	movs	r3, #12
 80187c0:	602b      	str	r3, [r5, #0]
 80187c2:	e7d3      	b.n	801876c <_free_r+0x24>
 80187c4:	6820      	ldr	r0, [r4, #0]
 80187c6:	1821      	adds	r1, r4, r0
 80187c8:	428a      	cmp	r2, r1
 80187ca:	bf04      	itt	eq
 80187cc:	6811      	ldreq	r1, [r2, #0]
 80187ce:	6852      	ldreq	r2, [r2, #4]
 80187d0:	6062      	str	r2, [r4, #4]
 80187d2:	bf04      	itt	eq
 80187d4:	1809      	addeq	r1, r1, r0
 80187d6:	6021      	streq	r1, [r4, #0]
 80187d8:	605c      	str	r4, [r3, #4]
 80187da:	e7c7      	b.n	801876c <_free_r+0x24>
 80187dc:	bd38      	pop	{r3, r4, r5, pc}
 80187de:	bf00      	nop
 80187e0:	2004132c 	.word	0x2004132c

080187e4 <_malloc_r>:
 80187e4:	b570      	push	{r4, r5, r6, lr}
 80187e6:	1ccd      	adds	r5, r1, #3
 80187e8:	f025 0503 	bic.w	r5, r5, #3
 80187ec:	3508      	adds	r5, #8
 80187ee:	2d0c      	cmp	r5, #12
 80187f0:	bf38      	it	cc
 80187f2:	250c      	movcc	r5, #12
 80187f4:	2d00      	cmp	r5, #0
 80187f6:	4606      	mov	r6, r0
 80187f8:	db01      	blt.n	80187fe <_malloc_r+0x1a>
 80187fa:	42a9      	cmp	r1, r5
 80187fc:	d903      	bls.n	8018806 <_malloc_r+0x22>
 80187fe:	230c      	movs	r3, #12
 8018800:	6033      	str	r3, [r6, #0]
 8018802:	2000      	movs	r0, #0
 8018804:	bd70      	pop	{r4, r5, r6, pc}
 8018806:	f000 fddb 	bl	80193c0 <__malloc_lock>
 801880a:	4a21      	ldr	r2, [pc, #132]	; (8018890 <_malloc_r+0xac>)
 801880c:	6814      	ldr	r4, [r2, #0]
 801880e:	4621      	mov	r1, r4
 8018810:	b991      	cbnz	r1, 8018838 <_malloc_r+0x54>
 8018812:	4c20      	ldr	r4, [pc, #128]	; (8018894 <_malloc_r+0xb0>)
 8018814:	6823      	ldr	r3, [r4, #0]
 8018816:	b91b      	cbnz	r3, 8018820 <_malloc_r+0x3c>
 8018818:	4630      	mov	r0, r6
 801881a:	f000 fc91 	bl	8019140 <_sbrk_r>
 801881e:	6020      	str	r0, [r4, #0]
 8018820:	4629      	mov	r1, r5
 8018822:	4630      	mov	r0, r6
 8018824:	f000 fc8c 	bl	8019140 <_sbrk_r>
 8018828:	1c43      	adds	r3, r0, #1
 801882a:	d124      	bne.n	8018876 <_malloc_r+0x92>
 801882c:	230c      	movs	r3, #12
 801882e:	6033      	str	r3, [r6, #0]
 8018830:	4630      	mov	r0, r6
 8018832:	f000 fdc6 	bl	80193c2 <__malloc_unlock>
 8018836:	e7e4      	b.n	8018802 <_malloc_r+0x1e>
 8018838:	680b      	ldr	r3, [r1, #0]
 801883a:	1b5b      	subs	r3, r3, r5
 801883c:	d418      	bmi.n	8018870 <_malloc_r+0x8c>
 801883e:	2b0b      	cmp	r3, #11
 8018840:	d90f      	bls.n	8018862 <_malloc_r+0x7e>
 8018842:	600b      	str	r3, [r1, #0]
 8018844:	50cd      	str	r5, [r1, r3]
 8018846:	18cc      	adds	r4, r1, r3
 8018848:	4630      	mov	r0, r6
 801884a:	f000 fdba 	bl	80193c2 <__malloc_unlock>
 801884e:	f104 000b 	add.w	r0, r4, #11
 8018852:	1d23      	adds	r3, r4, #4
 8018854:	f020 0007 	bic.w	r0, r0, #7
 8018858:	1ac3      	subs	r3, r0, r3
 801885a:	d0d3      	beq.n	8018804 <_malloc_r+0x20>
 801885c:	425a      	negs	r2, r3
 801885e:	50e2      	str	r2, [r4, r3]
 8018860:	e7d0      	b.n	8018804 <_malloc_r+0x20>
 8018862:	428c      	cmp	r4, r1
 8018864:	684b      	ldr	r3, [r1, #4]
 8018866:	bf16      	itet	ne
 8018868:	6063      	strne	r3, [r4, #4]
 801886a:	6013      	streq	r3, [r2, #0]
 801886c:	460c      	movne	r4, r1
 801886e:	e7eb      	b.n	8018848 <_malloc_r+0x64>
 8018870:	460c      	mov	r4, r1
 8018872:	6849      	ldr	r1, [r1, #4]
 8018874:	e7cc      	b.n	8018810 <_malloc_r+0x2c>
 8018876:	1cc4      	adds	r4, r0, #3
 8018878:	f024 0403 	bic.w	r4, r4, #3
 801887c:	42a0      	cmp	r0, r4
 801887e:	d005      	beq.n	801888c <_malloc_r+0xa8>
 8018880:	1a21      	subs	r1, r4, r0
 8018882:	4630      	mov	r0, r6
 8018884:	f000 fc5c 	bl	8019140 <_sbrk_r>
 8018888:	3001      	adds	r0, #1
 801888a:	d0cf      	beq.n	801882c <_malloc_r+0x48>
 801888c:	6025      	str	r5, [r4, #0]
 801888e:	e7db      	b.n	8018848 <_malloc_r+0x64>
 8018890:	2004132c 	.word	0x2004132c
 8018894:	20041330 	.word	0x20041330

08018898 <__ssputs_r>:
 8018898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801889c:	688e      	ldr	r6, [r1, #8]
 801889e:	429e      	cmp	r6, r3
 80188a0:	4682      	mov	sl, r0
 80188a2:	460c      	mov	r4, r1
 80188a4:	4690      	mov	r8, r2
 80188a6:	4699      	mov	r9, r3
 80188a8:	d837      	bhi.n	801891a <__ssputs_r+0x82>
 80188aa:	898a      	ldrh	r2, [r1, #12]
 80188ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80188b0:	d031      	beq.n	8018916 <__ssputs_r+0x7e>
 80188b2:	6825      	ldr	r5, [r4, #0]
 80188b4:	6909      	ldr	r1, [r1, #16]
 80188b6:	1a6f      	subs	r7, r5, r1
 80188b8:	6965      	ldr	r5, [r4, #20]
 80188ba:	2302      	movs	r3, #2
 80188bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80188c4:	f109 0301 	add.w	r3, r9, #1
 80188c8:	443b      	add	r3, r7
 80188ca:	429d      	cmp	r5, r3
 80188cc:	bf38      	it	cc
 80188ce:	461d      	movcc	r5, r3
 80188d0:	0553      	lsls	r3, r2, #21
 80188d2:	d530      	bpl.n	8018936 <__ssputs_r+0x9e>
 80188d4:	4629      	mov	r1, r5
 80188d6:	f7ff ff85 	bl	80187e4 <_malloc_r>
 80188da:	4606      	mov	r6, r0
 80188dc:	b950      	cbnz	r0, 80188f4 <__ssputs_r+0x5c>
 80188de:	230c      	movs	r3, #12
 80188e0:	f8ca 3000 	str.w	r3, [sl]
 80188e4:	89a3      	ldrh	r3, [r4, #12]
 80188e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188ea:	81a3      	strh	r3, [r4, #12]
 80188ec:	f04f 30ff 	mov.w	r0, #4294967295
 80188f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188f4:	463a      	mov	r2, r7
 80188f6:	6921      	ldr	r1, [r4, #16]
 80188f8:	f7fc fbc2 	bl	8015080 <memcpy>
 80188fc:	89a3      	ldrh	r3, [r4, #12]
 80188fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018906:	81a3      	strh	r3, [r4, #12]
 8018908:	6126      	str	r6, [r4, #16]
 801890a:	6165      	str	r5, [r4, #20]
 801890c:	443e      	add	r6, r7
 801890e:	1bed      	subs	r5, r5, r7
 8018910:	6026      	str	r6, [r4, #0]
 8018912:	60a5      	str	r5, [r4, #8]
 8018914:	464e      	mov	r6, r9
 8018916:	454e      	cmp	r6, r9
 8018918:	d900      	bls.n	801891c <__ssputs_r+0x84>
 801891a:	464e      	mov	r6, r9
 801891c:	4632      	mov	r2, r6
 801891e:	4641      	mov	r1, r8
 8018920:	6820      	ldr	r0, [r4, #0]
 8018922:	f000 fd34 	bl	801938e <memmove>
 8018926:	68a3      	ldr	r3, [r4, #8]
 8018928:	1b9b      	subs	r3, r3, r6
 801892a:	60a3      	str	r3, [r4, #8]
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	441e      	add	r6, r3
 8018930:	6026      	str	r6, [r4, #0]
 8018932:	2000      	movs	r0, #0
 8018934:	e7dc      	b.n	80188f0 <__ssputs_r+0x58>
 8018936:	462a      	mov	r2, r5
 8018938:	f000 fd44 	bl	80193c4 <_realloc_r>
 801893c:	4606      	mov	r6, r0
 801893e:	2800      	cmp	r0, #0
 8018940:	d1e2      	bne.n	8018908 <__ssputs_r+0x70>
 8018942:	6921      	ldr	r1, [r4, #16]
 8018944:	4650      	mov	r0, sl
 8018946:	f7ff feff 	bl	8018748 <_free_r>
 801894a:	e7c8      	b.n	80188de <__ssputs_r+0x46>

0801894c <_svfiprintf_r>:
 801894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018950:	461d      	mov	r5, r3
 8018952:	898b      	ldrh	r3, [r1, #12]
 8018954:	061f      	lsls	r7, r3, #24
 8018956:	b09d      	sub	sp, #116	; 0x74
 8018958:	4680      	mov	r8, r0
 801895a:	460c      	mov	r4, r1
 801895c:	4616      	mov	r6, r2
 801895e:	d50f      	bpl.n	8018980 <_svfiprintf_r+0x34>
 8018960:	690b      	ldr	r3, [r1, #16]
 8018962:	b96b      	cbnz	r3, 8018980 <_svfiprintf_r+0x34>
 8018964:	2140      	movs	r1, #64	; 0x40
 8018966:	f7ff ff3d 	bl	80187e4 <_malloc_r>
 801896a:	6020      	str	r0, [r4, #0]
 801896c:	6120      	str	r0, [r4, #16]
 801896e:	b928      	cbnz	r0, 801897c <_svfiprintf_r+0x30>
 8018970:	230c      	movs	r3, #12
 8018972:	f8c8 3000 	str.w	r3, [r8]
 8018976:	f04f 30ff 	mov.w	r0, #4294967295
 801897a:	e0c8      	b.n	8018b0e <_svfiprintf_r+0x1c2>
 801897c:	2340      	movs	r3, #64	; 0x40
 801897e:	6163      	str	r3, [r4, #20]
 8018980:	2300      	movs	r3, #0
 8018982:	9309      	str	r3, [sp, #36]	; 0x24
 8018984:	2320      	movs	r3, #32
 8018986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801898a:	2330      	movs	r3, #48	; 0x30
 801898c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018990:	9503      	str	r5, [sp, #12]
 8018992:	f04f 0b01 	mov.w	fp, #1
 8018996:	4637      	mov	r7, r6
 8018998:	463d      	mov	r5, r7
 801899a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801899e:	b10b      	cbz	r3, 80189a4 <_svfiprintf_r+0x58>
 80189a0:	2b25      	cmp	r3, #37	; 0x25
 80189a2:	d13e      	bne.n	8018a22 <_svfiprintf_r+0xd6>
 80189a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80189a8:	d00b      	beq.n	80189c2 <_svfiprintf_r+0x76>
 80189aa:	4653      	mov	r3, sl
 80189ac:	4632      	mov	r2, r6
 80189ae:	4621      	mov	r1, r4
 80189b0:	4640      	mov	r0, r8
 80189b2:	f7ff ff71 	bl	8018898 <__ssputs_r>
 80189b6:	3001      	adds	r0, #1
 80189b8:	f000 80a4 	beq.w	8018b04 <_svfiprintf_r+0x1b8>
 80189bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189be:	4453      	add	r3, sl
 80189c0:	9309      	str	r3, [sp, #36]	; 0x24
 80189c2:	783b      	ldrb	r3, [r7, #0]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	f000 809d 	beq.w	8018b04 <_svfiprintf_r+0x1b8>
 80189ca:	2300      	movs	r3, #0
 80189cc:	f04f 32ff 	mov.w	r2, #4294967295
 80189d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189d4:	9304      	str	r3, [sp, #16]
 80189d6:	9307      	str	r3, [sp, #28]
 80189d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189dc:	931a      	str	r3, [sp, #104]	; 0x68
 80189de:	462f      	mov	r7, r5
 80189e0:	2205      	movs	r2, #5
 80189e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80189e6:	4850      	ldr	r0, [pc, #320]	; (8018b28 <_svfiprintf_r+0x1dc>)
 80189e8:	f7e7 fc12 	bl	8000210 <memchr>
 80189ec:	9b04      	ldr	r3, [sp, #16]
 80189ee:	b9d0      	cbnz	r0, 8018a26 <_svfiprintf_r+0xda>
 80189f0:	06d9      	lsls	r1, r3, #27
 80189f2:	bf44      	itt	mi
 80189f4:	2220      	movmi	r2, #32
 80189f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80189fa:	071a      	lsls	r2, r3, #28
 80189fc:	bf44      	itt	mi
 80189fe:	222b      	movmi	r2, #43	; 0x2b
 8018a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018a04:	782a      	ldrb	r2, [r5, #0]
 8018a06:	2a2a      	cmp	r2, #42	; 0x2a
 8018a08:	d015      	beq.n	8018a36 <_svfiprintf_r+0xea>
 8018a0a:	9a07      	ldr	r2, [sp, #28]
 8018a0c:	462f      	mov	r7, r5
 8018a0e:	2000      	movs	r0, #0
 8018a10:	250a      	movs	r5, #10
 8018a12:	4639      	mov	r1, r7
 8018a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a18:	3b30      	subs	r3, #48	; 0x30
 8018a1a:	2b09      	cmp	r3, #9
 8018a1c:	d94d      	bls.n	8018aba <_svfiprintf_r+0x16e>
 8018a1e:	b1b8      	cbz	r0, 8018a50 <_svfiprintf_r+0x104>
 8018a20:	e00f      	b.n	8018a42 <_svfiprintf_r+0xf6>
 8018a22:	462f      	mov	r7, r5
 8018a24:	e7b8      	b.n	8018998 <_svfiprintf_r+0x4c>
 8018a26:	4a40      	ldr	r2, [pc, #256]	; (8018b28 <_svfiprintf_r+0x1dc>)
 8018a28:	1a80      	subs	r0, r0, r2
 8018a2a:	fa0b f000 	lsl.w	r0, fp, r0
 8018a2e:	4318      	orrs	r0, r3
 8018a30:	9004      	str	r0, [sp, #16]
 8018a32:	463d      	mov	r5, r7
 8018a34:	e7d3      	b.n	80189de <_svfiprintf_r+0x92>
 8018a36:	9a03      	ldr	r2, [sp, #12]
 8018a38:	1d11      	adds	r1, r2, #4
 8018a3a:	6812      	ldr	r2, [r2, #0]
 8018a3c:	9103      	str	r1, [sp, #12]
 8018a3e:	2a00      	cmp	r2, #0
 8018a40:	db01      	blt.n	8018a46 <_svfiprintf_r+0xfa>
 8018a42:	9207      	str	r2, [sp, #28]
 8018a44:	e004      	b.n	8018a50 <_svfiprintf_r+0x104>
 8018a46:	4252      	negs	r2, r2
 8018a48:	f043 0302 	orr.w	r3, r3, #2
 8018a4c:	9207      	str	r2, [sp, #28]
 8018a4e:	9304      	str	r3, [sp, #16]
 8018a50:	783b      	ldrb	r3, [r7, #0]
 8018a52:	2b2e      	cmp	r3, #46	; 0x2e
 8018a54:	d10c      	bne.n	8018a70 <_svfiprintf_r+0x124>
 8018a56:	787b      	ldrb	r3, [r7, #1]
 8018a58:	2b2a      	cmp	r3, #42	; 0x2a
 8018a5a:	d133      	bne.n	8018ac4 <_svfiprintf_r+0x178>
 8018a5c:	9b03      	ldr	r3, [sp, #12]
 8018a5e:	1d1a      	adds	r2, r3, #4
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	9203      	str	r2, [sp, #12]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	bfb8      	it	lt
 8018a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a6c:	3702      	adds	r7, #2
 8018a6e:	9305      	str	r3, [sp, #20]
 8018a70:	4d2e      	ldr	r5, [pc, #184]	; (8018b2c <_svfiprintf_r+0x1e0>)
 8018a72:	7839      	ldrb	r1, [r7, #0]
 8018a74:	2203      	movs	r2, #3
 8018a76:	4628      	mov	r0, r5
 8018a78:	f7e7 fbca 	bl	8000210 <memchr>
 8018a7c:	b138      	cbz	r0, 8018a8e <_svfiprintf_r+0x142>
 8018a7e:	2340      	movs	r3, #64	; 0x40
 8018a80:	1b40      	subs	r0, r0, r5
 8018a82:	fa03 f000 	lsl.w	r0, r3, r0
 8018a86:	9b04      	ldr	r3, [sp, #16]
 8018a88:	4303      	orrs	r3, r0
 8018a8a:	3701      	adds	r7, #1
 8018a8c:	9304      	str	r3, [sp, #16]
 8018a8e:	7839      	ldrb	r1, [r7, #0]
 8018a90:	4827      	ldr	r0, [pc, #156]	; (8018b30 <_svfiprintf_r+0x1e4>)
 8018a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a96:	2206      	movs	r2, #6
 8018a98:	1c7e      	adds	r6, r7, #1
 8018a9a:	f7e7 fbb9 	bl	8000210 <memchr>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	d038      	beq.n	8018b14 <_svfiprintf_r+0x1c8>
 8018aa2:	4b24      	ldr	r3, [pc, #144]	; (8018b34 <_svfiprintf_r+0x1e8>)
 8018aa4:	bb13      	cbnz	r3, 8018aec <_svfiprintf_r+0x1a0>
 8018aa6:	9b03      	ldr	r3, [sp, #12]
 8018aa8:	3307      	adds	r3, #7
 8018aaa:	f023 0307 	bic.w	r3, r3, #7
 8018aae:	3308      	adds	r3, #8
 8018ab0:	9303      	str	r3, [sp, #12]
 8018ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ab4:	444b      	add	r3, r9
 8018ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ab8:	e76d      	b.n	8018996 <_svfiprintf_r+0x4a>
 8018aba:	fb05 3202 	mla	r2, r5, r2, r3
 8018abe:	2001      	movs	r0, #1
 8018ac0:	460f      	mov	r7, r1
 8018ac2:	e7a6      	b.n	8018a12 <_svfiprintf_r+0xc6>
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	3701      	adds	r7, #1
 8018ac8:	9305      	str	r3, [sp, #20]
 8018aca:	4619      	mov	r1, r3
 8018acc:	250a      	movs	r5, #10
 8018ace:	4638      	mov	r0, r7
 8018ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ad4:	3a30      	subs	r2, #48	; 0x30
 8018ad6:	2a09      	cmp	r2, #9
 8018ad8:	d903      	bls.n	8018ae2 <_svfiprintf_r+0x196>
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d0c8      	beq.n	8018a70 <_svfiprintf_r+0x124>
 8018ade:	9105      	str	r1, [sp, #20]
 8018ae0:	e7c6      	b.n	8018a70 <_svfiprintf_r+0x124>
 8018ae2:	fb05 2101 	mla	r1, r5, r1, r2
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	4607      	mov	r7, r0
 8018aea:	e7f0      	b.n	8018ace <_svfiprintf_r+0x182>
 8018aec:	ab03      	add	r3, sp, #12
 8018aee:	9300      	str	r3, [sp, #0]
 8018af0:	4622      	mov	r2, r4
 8018af2:	4b11      	ldr	r3, [pc, #68]	; (8018b38 <_svfiprintf_r+0x1ec>)
 8018af4:	a904      	add	r1, sp, #16
 8018af6:	4640      	mov	r0, r8
 8018af8:	f7fc fb6a 	bl	80151d0 <_printf_float>
 8018afc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018b00:	4681      	mov	r9, r0
 8018b02:	d1d6      	bne.n	8018ab2 <_svfiprintf_r+0x166>
 8018b04:	89a3      	ldrh	r3, [r4, #12]
 8018b06:	065b      	lsls	r3, r3, #25
 8018b08:	f53f af35 	bmi.w	8018976 <_svfiprintf_r+0x2a>
 8018b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b0e:	b01d      	add	sp, #116	; 0x74
 8018b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b14:	ab03      	add	r3, sp, #12
 8018b16:	9300      	str	r3, [sp, #0]
 8018b18:	4622      	mov	r2, r4
 8018b1a:	4b07      	ldr	r3, [pc, #28]	; (8018b38 <_svfiprintf_r+0x1ec>)
 8018b1c:	a904      	add	r1, sp, #16
 8018b1e:	4640      	mov	r0, r8
 8018b20:	f7fc fe0c 	bl	801573c <_printf_i>
 8018b24:	e7ea      	b.n	8018afc <_svfiprintf_r+0x1b0>
 8018b26:	bf00      	nop
 8018b28:	08019f14 	.word	0x08019f14
 8018b2c:	08019f1a 	.word	0x08019f1a
 8018b30:	08019f1e 	.word	0x08019f1e
 8018b34:	080151d1 	.word	0x080151d1
 8018b38:	08018899 	.word	0x08018899

08018b3c <_sungetc_r>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	1c4b      	adds	r3, r1, #1
 8018b40:	4614      	mov	r4, r2
 8018b42:	d103      	bne.n	8018b4c <_sungetc_r+0x10>
 8018b44:	f04f 35ff 	mov.w	r5, #4294967295
 8018b48:	4628      	mov	r0, r5
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	8993      	ldrh	r3, [r2, #12]
 8018b4e:	f023 0320 	bic.w	r3, r3, #32
 8018b52:	8193      	strh	r3, [r2, #12]
 8018b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b56:	6852      	ldr	r2, [r2, #4]
 8018b58:	b2cd      	uxtb	r5, r1
 8018b5a:	b18b      	cbz	r3, 8018b80 <_sungetc_r+0x44>
 8018b5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	dd08      	ble.n	8018b74 <_sungetc_r+0x38>
 8018b62:	6823      	ldr	r3, [r4, #0]
 8018b64:	1e5a      	subs	r2, r3, #1
 8018b66:	6022      	str	r2, [r4, #0]
 8018b68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018b6c:	6863      	ldr	r3, [r4, #4]
 8018b6e:	3301      	adds	r3, #1
 8018b70:	6063      	str	r3, [r4, #4]
 8018b72:	e7e9      	b.n	8018b48 <_sungetc_r+0xc>
 8018b74:	4621      	mov	r1, r4
 8018b76:	f000 fbc3 	bl	8019300 <__submore>
 8018b7a:	2800      	cmp	r0, #0
 8018b7c:	d0f1      	beq.n	8018b62 <_sungetc_r+0x26>
 8018b7e:	e7e1      	b.n	8018b44 <_sungetc_r+0x8>
 8018b80:	6921      	ldr	r1, [r4, #16]
 8018b82:	6823      	ldr	r3, [r4, #0]
 8018b84:	b151      	cbz	r1, 8018b9c <_sungetc_r+0x60>
 8018b86:	4299      	cmp	r1, r3
 8018b88:	d208      	bcs.n	8018b9c <_sungetc_r+0x60>
 8018b8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018b8e:	42a9      	cmp	r1, r5
 8018b90:	d104      	bne.n	8018b9c <_sungetc_r+0x60>
 8018b92:	3b01      	subs	r3, #1
 8018b94:	3201      	adds	r2, #1
 8018b96:	6023      	str	r3, [r4, #0]
 8018b98:	6062      	str	r2, [r4, #4]
 8018b9a:	e7d5      	b.n	8018b48 <_sungetc_r+0xc>
 8018b9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8018ba6:	2303      	movs	r3, #3
 8018ba8:	63a3      	str	r3, [r4, #56]	; 0x38
 8018baa:	4623      	mov	r3, r4
 8018bac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018bb0:	6023      	str	r3, [r4, #0]
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e7dc      	b.n	8018b70 <_sungetc_r+0x34>

08018bb6 <__ssrefill_r>:
 8018bb6:	b510      	push	{r4, lr}
 8018bb8:	460c      	mov	r4, r1
 8018bba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018bbc:	b169      	cbz	r1, 8018bda <__ssrefill_r+0x24>
 8018bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc2:	4299      	cmp	r1, r3
 8018bc4:	d001      	beq.n	8018bca <__ssrefill_r+0x14>
 8018bc6:	f7ff fdbf 	bl	8018748 <_free_r>
 8018bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018bcc:	6063      	str	r3, [r4, #4]
 8018bce:	2000      	movs	r0, #0
 8018bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8018bd2:	b113      	cbz	r3, 8018bda <__ssrefill_r+0x24>
 8018bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018bd6:	6023      	str	r3, [r4, #0]
 8018bd8:	bd10      	pop	{r4, pc}
 8018bda:	6923      	ldr	r3, [r4, #16]
 8018bdc:	6023      	str	r3, [r4, #0]
 8018bde:	2300      	movs	r3, #0
 8018be0:	6063      	str	r3, [r4, #4]
 8018be2:	89a3      	ldrh	r3, [r4, #12]
 8018be4:	f043 0320 	orr.w	r3, r3, #32
 8018be8:	81a3      	strh	r3, [r4, #12]
 8018bea:	f04f 30ff 	mov.w	r0, #4294967295
 8018bee:	e7f3      	b.n	8018bd8 <__ssrefill_r+0x22>

08018bf0 <__ssvfiscanf_r>:
 8018bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018bf8:	460c      	mov	r4, r1
 8018bfa:	2100      	movs	r1, #0
 8018bfc:	9144      	str	r1, [sp, #272]	; 0x110
 8018bfe:	9145      	str	r1, [sp, #276]	; 0x114
 8018c00:	499f      	ldr	r1, [pc, #636]	; (8018e80 <__ssvfiscanf_r+0x290>)
 8018c02:	91a0      	str	r1, [sp, #640]	; 0x280
 8018c04:	f10d 0804 	add.w	r8, sp, #4
 8018c08:	499e      	ldr	r1, [pc, #632]	; (8018e84 <__ssvfiscanf_r+0x294>)
 8018c0a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018e88 <__ssvfiscanf_r+0x298>
 8018c0e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018c12:	4606      	mov	r6, r0
 8018c14:	4692      	mov	sl, r2
 8018c16:	91a1      	str	r1, [sp, #644]	; 0x284
 8018c18:	9300      	str	r3, [sp, #0]
 8018c1a:	270a      	movs	r7, #10
 8018c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	f000 812a 	beq.w	8018e7a <__ssvfiscanf_r+0x28a>
 8018c26:	4655      	mov	r5, sl
 8018c28:	f7ff f948 	bl	8017ebc <__locale_ctype_ptr>
 8018c2c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018c30:	4458      	add	r0, fp
 8018c32:	7843      	ldrb	r3, [r0, #1]
 8018c34:	f013 0308 	ands.w	r3, r3, #8
 8018c38:	d01c      	beq.n	8018c74 <__ssvfiscanf_r+0x84>
 8018c3a:	6863      	ldr	r3, [r4, #4]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	dd12      	ble.n	8018c66 <__ssvfiscanf_r+0x76>
 8018c40:	f7ff f93c 	bl	8017ebc <__locale_ctype_ptr>
 8018c44:	6823      	ldr	r3, [r4, #0]
 8018c46:	781a      	ldrb	r2, [r3, #0]
 8018c48:	4410      	add	r0, r2
 8018c4a:	7842      	ldrb	r2, [r0, #1]
 8018c4c:	0712      	lsls	r2, r2, #28
 8018c4e:	d401      	bmi.n	8018c54 <__ssvfiscanf_r+0x64>
 8018c50:	46aa      	mov	sl, r5
 8018c52:	e7e3      	b.n	8018c1c <__ssvfiscanf_r+0x2c>
 8018c54:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018c56:	3201      	adds	r2, #1
 8018c58:	9245      	str	r2, [sp, #276]	; 0x114
 8018c5a:	6862      	ldr	r2, [r4, #4]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	3a01      	subs	r2, #1
 8018c60:	6062      	str	r2, [r4, #4]
 8018c62:	6023      	str	r3, [r4, #0]
 8018c64:	e7e9      	b.n	8018c3a <__ssvfiscanf_r+0x4a>
 8018c66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018c68:	4621      	mov	r1, r4
 8018c6a:	4630      	mov	r0, r6
 8018c6c:	4798      	blx	r3
 8018c6e:	2800      	cmp	r0, #0
 8018c70:	d0e6      	beq.n	8018c40 <__ssvfiscanf_r+0x50>
 8018c72:	e7ed      	b.n	8018c50 <__ssvfiscanf_r+0x60>
 8018c74:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018c78:	f040 8082 	bne.w	8018d80 <__ssvfiscanf_r+0x190>
 8018c7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8018c7e:	9341      	str	r3, [sp, #260]	; 0x104
 8018c80:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018c84:	2b2a      	cmp	r3, #42	; 0x2a
 8018c86:	d103      	bne.n	8018c90 <__ssvfiscanf_r+0xa0>
 8018c88:	2310      	movs	r3, #16
 8018c8a:	9341      	str	r3, [sp, #260]	; 0x104
 8018c8c:	f10a 0502 	add.w	r5, sl, #2
 8018c90:	46aa      	mov	sl, r5
 8018c92:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018c96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018c9a:	2a09      	cmp	r2, #9
 8018c9c:	d922      	bls.n	8018ce4 <__ssvfiscanf_r+0xf4>
 8018c9e:	2203      	movs	r2, #3
 8018ca0:	4879      	ldr	r0, [pc, #484]	; (8018e88 <__ssvfiscanf_r+0x298>)
 8018ca2:	f7e7 fab5 	bl	8000210 <memchr>
 8018ca6:	b138      	cbz	r0, 8018cb8 <__ssvfiscanf_r+0xc8>
 8018ca8:	eba0 0309 	sub.w	r3, r0, r9
 8018cac:	2001      	movs	r0, #1
 8018cae:	4098      	lsls	r0, r3
 8018cb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018cb2:	4318      	orrs	r0, r3
 8018cb4:	9041      	str	r0, [sp, #260]	; 0x104
 8018cb6:	46aa      	mov	sl, r5
 8018cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8018cbc:	2b67      	cmp	r3, #103	; 0x67
 8018cbe:	f10a 0501 	add.w	r5, sl, #1
 8018cc2:	d82b      	bhi.n	8018d1c <__ssvfiscanf_r+0x12c>
 8018cc4:	2b65      	cmp	r3, #101	; 0x65
 8018cc6:	f080 809f 	bcs.w	8018e08 <__ssvfiscanf_r+0x218>
 8018cca:	2b47      	cmp	r3, #71	; 0x47
 8018ccc:	d810      	bhi.n	8018cf0 <__ssvfiscanf_r+0x100>
 8018cce:	2b45      	cmp	r3, #69	; 0x45
 8018cd0:	f080 809a 	bcs.w	8018e08 <__ssvfiscanf_r+0x218>
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d06c      	beq.n	8018db2 <__ssvfiscanf_r+0x1c2>
 8018cd8:	2b25      	cmp	r3, #37	; 0x25
 8018cda:	d051      	beq.n	8018d80 <__ssvfiscanf_r+0x190>
 8018cdc:	2303      	movs	r3, #3
 8018cde:	9347      	str	r3, [sp, #284]	; 0x11c
 8018ce0:	9742      	str	r7, [sp, #264]	; 0x108
 8018ce2:	e027      	b.n	8018d34 <__ssvfiscanf_r+0x144>
 8018ce4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018ce6:	fb07 1303 	mla	r3, r7, r3, r1
 8018cea:	3b30      	subs	r3, #48	; 0x30
 8018cec:	9343      	str	r3, [sp, #268]	; 0x10c
 8018cee:	e7cf      	b.n	8018c90 <__ssvfiscanf_r+0xa0>
 8018cf0:	2b5b      	cmp	r3, #91	; 0x5b
 8018cf2:	d06a      	beq.n	8018dca <__ssvfiscanf_r+0x1da>
 8018cf4:	d80c      	bhi.n	8018d10 <__ssvfiscanf_r+0x120>
 8018cf6:	2b58      	cmp	r3, #88	; 0x58
 8018cf8:	d1f0      	bne.n	8018cdc <__ssvfiscanf_r+0xec>
 8018cfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d00:	9241      	str	r2, [sp, #260]	; 0x104
 8018d02:	2210      	movs	r2, #16
 8018d04:	9242      	str	r2, [sp, #264]	; 0x108
 8018d06:	2b6e      	cmp	r3, #110	; 0x6e
 8018d08:	bf8c      	ite	hi
 8018d0a:	2304      	movhi	r3, #4
 8018d0c:	2303      	movls	r3, #3
 8018d0e:	e010      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018d10:	2b63      	cmp	r3, #99	; 0x63
 8018d12:	d065      	beq.n	8018de0 <__ssvfiscanf_r+0x1f0>
 8018d14:	2b64      	cmp	r3, #100	; 0x64
 8018d16:	d1e1      	bne.n	8018cdc <__ssvfiscanf_r+0xec>
 8018d18:	9742      	str	r7, [sp, #264]	; 0x108
 8018d1a:	e7f4      	b.n	8018d06 <__ssvfiscanf_r+0x116>
 8018d1c:	2b70      	cmp	r3, #112	; 0x70
 8018d1e:	d04b      	beq.n	8018db8 <__ssvfiscanf_r+0x1c8>
 8018d20:	d826      	bhi.n	8018d70 <__ssvfiscanf_r+0x180>
 8018d22:	2b6e      	cmp	r3, #110	; 0x6e
 8018d24:	d062      	beq.n	8018dec <__ssvfiscanf_r+0x1fc>
 8018d26:	d84c      	bhi.n	8018dc2 <__ssvfiscanf_r+0x1d2>
 8018d28:	2b69      	cmp	r3, #105	; 0x69
 8018d2a:	d1d7      	bne.n	8018cdc <__ssvfiscanf_r+0xec>
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	9342      	str	r3, [sp, #264]	; 0x108
 8018d30:	2303      	movs	r3, #3
 8018d32:	9347      	str	r3, [sp, #284]	; 0x11c
 8018d34:	6863      	ldr	r3, [r4, #4]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	dd68      	ble.n	8018e0c <__ssvfiscanf_r+0x21c>
 8018d3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d3c:	0659      	lsls	r1, r3, #25
 8018d3e:	d407      	bmi.n	8018d50 <__ssvfiscanf_r+0x160>
 8018d40:	f7ff f8bc 	bl	8017ebc <__locale_ctype_ptr>
 8018d44:	6823      	ldr	r3, [r4, #0]
 8018d46:	781a      	ldrb	r2, [r3, #0]
 8018d48:	4410      	add	r0, r2
 8018d4a:	7842      	ldrb	r2, [r0, #1]
 8018d4c:	0712      	lsls	r2, r2, #28
 8018d4e:	d464      	bmi.n	8018e1a <__ssvfiscanf_r+0x22a>
 8018d50:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018d52:	2b02      	cmp	r3, #2
 8018d54:	dc73      	bgt.n	8018e3e <__ssvfiscanf_r+0x24e>
 8018d56:	466b      	mov	r3, sp
 8018d58:	4622      	mov	r2, r4
 8018d5a:	a941      	add	r1, sp, #260	; 0x104
 8018d5c:	4630      	mov	r0, r6
 8018d5e:	f000 f897 	bl	8018e90 <_scanf_chars>
 8018d62:	2801      	cmp	r0, #1
 8018d64:	f000 8089 	beq.w	8018e7a <__ssvfiscanf_r+0x28a>
 8018d68:	2802      	cmp	r0, #2
 8018d6a:	f47f af71 	bne.w	8018c50 <__ssvfiscanf_r+0x60>
 8018d6e:	e01d      	b.n	8018dac <__ssvfiscanf_r+0x1bc>
 8018d70:	2b75      	cmp	r3, #117	; 0x75
 8018d72:	d0d1      	beq.n	8018d18 <__ssvfiscanf_r+0x128>
 8018d74:	2b78      	cmp	r3, #120	; 0x78
 8018d76:	d0c0      	beq.n	8018cfa <__ssvfiscanf_r+0x10a>
 8018d78:	2b73      	cmp	r3, #115	; 0x73
 8018d7a:	d1af      	bne.n	8018cdc <__ssvfiscanf_r+0xec>
 8018d7c:	2302      	movs	r3, #2
 8018d7e:	e7d8      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018d80:	6863      	ldr	r3, [r4, #4]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	dd0c      	ble.n	8018da0 <__ssvfiscanf_r+0x1b0>
 8018d86:	6823      	ldr	r3, [r4, #0]
 8018d88:	781a      	ldrb	r2, [r3, #0]
 8018d8a:	455a      	cmp	r2, fp
 8018d8c:	d175      	bne.n	8018e7a <__ssvfiscanf_r+0x28a>
 8018d8e:	3301      	adds	r3, #1
 8018d90:	6862      	ldr	r2, [r4, #4]
 8018d92:	6023      	str	r3, [r4, #0]
 8018d94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018d96:	3a01      	subs	r2, #1
 8018d98:	3301      	adds	r3, #1
 8018d9a:	6062      	str	r2, [r4, #4]
 8018d9c:	9345      	str	r3, [sp, #276]	; 0x114
 8018d9e:	e757      	b.n	8018c50 <__ssvfiscanf_r+0x60>
 8018da0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018da2:	4621      	mov	r1, r4
 8018da4:	4630      	mov	r0, r6
 8018da6:	4798      	blx	r3
 8018da8:	2800      	cmp	r0, #0
 8018daa:	d0ec      	beq.n	8018d86 <__ssvfiscanf_r+0x196>
 8018dac:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018dae:	2800      	cmp	r0, #0
 8018db0:	d159      	bne.n	8018e66 <__ssvfiscanf_r+0x276>
 8018db2:	f04f 30ff 	mov.w	r0, #4294967295
 8018db6:	e05c      	b.n	8018e72 <__ssvfiscanf_r+0x282>
 8018db8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018dba:	f042 0220 	orr.w	r2, r2, #32
 8018dbe:	9241      	str	r2, [sp, #260]	; 0x104
 8018dc0:	e79b      	b.n	8018cfa <__ssvfiscanf_r+0x10a>
 8018dc2:	2308      	movs	r3, #8
 8018dc4:	9342      	str	r3, [sp, #264]	; 0x108
 8018dc6:	2304      	movs	r3, #4
 8018dc8:	e7b3      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018dca:	4629      	mov	r1, r5
 8018dcc:	4640      	mov	r0, r8
 8018dce:	f000 f9c7 	bl	8019160 <__sccl>
 8018dd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018dd8:	9341      	str	r3, [sp, #260]	; 0x104
 8018dda:	4605      	mov	r5, r0
 8018ddc:	2301      	movs	r3, #1
 8018dde:	e7a8      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018de0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018de6:	9341      	str	r3, [sp, #260]	; 0x104
 8018de8:	2300      	movs	r3, #0
 8018dea:	e7a2      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018dec:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018dee:	06c3      	lsls	r3, r0, #27
 8018df0:	f53f af2e 	bmi.w	8018c50 <__ssvfiscanf_r+0x60>
 8018df4:	9b00      	ldr	r3, [sp, #0]
 8018df6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018df8:	1d19      	adds	r1, r3, #4
 8018dfa:	9100      	str	r1, [sp, #0]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	07c0      	lsls	r0, r0, #31
 8018e00:	bf4c      	ite	mi
 8018e02:	801a      	strhmi	r2, [r3, #0]
 8018e04:	601a      	strpl	r2, [r3, #0]
 8018e06:	e723      	b.n	8018c50 <__ssvfiscanf_r+0x60>
 8018e08:	2305      	movs	r3, #5
 8018e0a:	e792      	b.n	8018d32 <__ssvfiscanf_r+0x142>
 8018e0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e0e:	4621      	mov	r1, r4
 8018e10:	4630      	mov	r0, r6
 8018e12:	4798      	blx	r3
 8018e14:	2800      	cmp	r0, #0
 8018e16:	d090      	beq.n	8018d3a <__ssvfiscanf_r+0x14a>
 8018e18:	e7c8      	b.n	8018dac <__ssvfiscanf_r+0x1bc>
 8018e1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e1c:	3201      	adds	r2, #1
 8018e1e:	9245      	str	r2, [sp, #276]	; 0x114
 8018e20:	6862      	ldr	r2, [r4, #4]
 8018e22:	3a01      	subs	r2, #1
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	6062      	str	r2, [r4, #4]
 8018e28:	dd02      	ble.n	8018e30 <__ssvfiscanf_r+0x240>
 8018e2a:	3301      	adds	r3, #1
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	e787      	b.n	8018d40 <__ssvfiscanf_r+0x150>
 8018e30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e32:	4621      	mov	r1, r4
 8018e34:	4630      	mov	r0, r6
 8018e36:	4798      	blx	r3
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d081      	beq.n	8018d40 <__ssvfiscanf_r+0x150>
 8018e3c:	e7b6      	b.n	8018dac <__ssvfiscanf_r+0x1bc>
 8018e3e:	2b04      	cmp	r3, #4
 8018e40:	dc06      	bgt.n	8018e50 <__ssvfiscanf_r+0x260>
 8018e42:	466b      	mov	r3, sp
 8018e44:	4622      	mov	r2, r4
 8018e46:	a941      	add	r1, sp, #260	; 0x104
 8018e48:	4630      	mov	r0, r6
 8018e4a:	f000 f885 	bl	8018f58 <_scanf_i>
 8018e4e:	e788      	b.n	8018d62 <__ssvfiscanf_r+0x172>
 8018e50:	4b0e      	ldr	r3, [pc, #56]	; (8018e8c <__ssvfiscanf_r+0x29c>)
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	f43f aefc 	beq.w	8018c50 <__ssvfiscanf_r+0x60>
 8018e58:	466b      	mov	r3, sp
 8018e5a:	4622      	mov	r2, r4
 8018e5c:	a941      	add	r1, sp, #260	; 0x104
 8018e5e:	4630      	mov	r0, r6
 8018e60:	f7fc fd7e 	bl	8015960 <_scanf_float>
 8018e64:	e77d      	b.n	8018d62 <__ssvfiscanf_r+0x172>
 8018e66:	89a3      	ldrh	r3, [r4, #12]
 8018e68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018e6c:	bf18      	it	ne
 8018e6e:	f04f 30ff 	movne.w	r0, #4294967295
 8018e72:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018e7c:	e7f9      	b.n	8018e72 <__ssvfiscanf_r+0x282>
 8018e7e:	bf00      	nop
 8018e80:	08018b3d 	.word	0x08018b3d
 8018e84:	08018bb7 	.word	0x08018bb7
 8018e88:	08019f1a 	.word	0x08019f1a
 8018e8c:	08015961 	.word	0x08015961

08018e90 <_scanf_chars>:
 8018e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e94:	4615      	mov	r5, r2
 8018e96:	688a      	ldr	r2, [r1, #8]
 8018e98:	4680      	mov	r8, r0
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	b932      	cbnz	r2, 8018eac <_scanf_chars+0x1c>
 8018e9e:	698a      	ldr	r2, [r1, #24]
 8018ea0:	2a00      	cmp	r2, #0
 8018ea2:	bf14      	ite	ne
 8018ea4:	f04f 32ff 	movne.w	r2, #4294967295
 8018ea8:	2201      	moveq	r2, #1
 8018eaa:	608a      	str	r2, [r1, #8]
 8018eac:	6822      	ldr	r2, [r4, #0]
 8018eae:	06d1      	lsls	r1, r2, #27
 8018eb0:	bf5f      	itttt	pl
 8018eb2:	681a      	ldrpl	r2, [r3, #0]
 8018eb4:	1d11      	addpl	r1, r2, #4
 8018eb6:	6019      	strpl	r1, [r3, #0]
 8018eb8:	6817      	ldrpl	r7, [r2, #0]
 8018eba:	2600      	movs	r6, #0
 8018ebc:	69a3      	ldr	r3, [r4, #24]
 8018ebe:	b1db      	cbz	r3, 8018ef8 <_scanf_chars+0x68>
 8018ec0:	2b01      	cmp	r3, #1
 8018ec2:	d107      	bne.n	8018ed4 <_scanf_chars+0x44>
 8018ec4:	682b      	ldr	r3, [r5, #0]
 8018ec6:	6962      	ldr	r2, [r4, #20]
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	5cd3      	ldrb	r3, [r2, r3]
 8018ecc:	b9a3      	cbnz	r3, 8018ef8 <_scanf_chars+0x68>
 8018ece:	2e00      	cmp	r6, #0
 8018ed0:	d132      	bne.n	8018f38 <_scanf_chars+0xa8>
 8018ed2:	e006      	b.n	8018ee2 <_scanf_chars+0x52>
 8018ed4:	2b02      	cmp	r3, #2
 8018ed6:	d007      	beq.n	8018ee8 <_scanf_chars+0x58>
 8018ed8:	2e00      	cmp	r6, #0
 8018eda:	d12d      	bne.n	8018f38 <_scanf_chars+0xa8>
 8018edc:	69a3      	ldr	r3, [r4, #24]
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	d12a      	bne.n	8018f38 <_scanf_chars+0xa8>
 8018ee2:	2001      	movs	r0, #1
 8018ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee8:	f7fe ffe8 	bl	8017ebc <__locale_ctype_ptr>
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	4418      	add	r0, r3
 8018ef2:	7843      	ldrb	r3, [r0, #1]
 8018ef4:	071b      	lsls	r3, r3, #28
 8018ef6:	d4ef      	bmi.n	8018ed8 <_scanf_chars+0x48>
 8018ef8:	6823      	ldr	r3, [r4, #0]
 8018efa:	06da      	lsls	r2, r3, #27
 8018efc:	bf5e      	ittt	pl
 8018efe:	682b      	ldrpl	r3, [r5, #0]
 8018f00:	781b      	ldrbpl	r3, [r3, #0]
 8018f02:	703b      	strbpl	r3, [r7, #0]
 8018f04:	682a      	ldr	r2, [r5, #0]
 8018f06:	686b      	ldr	r3, [r5, #4]
 8018f08:	f102 0201 	add.w	r2, r2, #1
 8018f0c:	602a      	str	r2, [r5, #0]
 8018f0e:	68a2      	ldr	r2, [r4, #8]
 8018f10:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f14:	f102 32ff 	add.w	r2, r2, #4294967295
 8018f18:	606b      	str	r3, [r5, #4]
 8018f1a:	f106 0601 	add.w	r6, r6, #1
 8018f1e:	bf58      	it	pl
 8018f20:	3701      	addpl	r7, #1
 8018f22:	60a2      	str	r2, [r4, #8]
 8018f24:	b142      	cbz	r2, 8018f38 <_scanf_chars+0xa8>
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	dcc8      	bgt.n	8018ebc <_scanf_chars+0x2c>
 8018f2a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018f2e:	4629      	mov	r1, r5
 8018f30:	4640      	mov	r0, r8
 8018f32:	4798      	blx	r3
 8018f34:	2800      	cmp	r0, #0
 8018f36:	d0c1      	beq.n	8018ebc <_scanf_chars+0x2c>
 8018f38:	6823      	ldr	r3, [r4, #0]
 8018f3a:	f013 0310 	ands.w	r3, r3, #16
 8018f3e:	d105      	bne.n	8018f4c <_scanf_chars+0xbc>
 8018f40:	68e2      	ldr	r2, [r4, #12]
 8018f42:	3201      	adds	r2, #1
 8018f44:	60e2      	str	r2, [r4, #12]
 8018f46:	69a2      	ldr	r2, [r4, #24]
 8018f48:	b102      	cbz	r2, 8018f4c <_scanf_chars+0xbc>
 8018f4a:	703b      	strb	r3, [r7, #0]
 8018f4c:	6923      	ldr	r3, [r4, #16]
 8018f4e:	441e      	add	r6, r3
 8018f50:	6126      	str	r6, [r4, #16]
 8018f52:	2000      	movs	r0, #0
 8018f54:	e7c6      	b.n	8018ee4 <_scanf_chars+0x54>
	...

08018f58 <_scanf_i>:
 8018f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5c:	469a      	mov	sl, r3
 8018f5e:	4b74      	ldr	r3, [pc, #464]	; (8019130 <_scanf_i+0x1d8>)
 8018f60:	460c      	mov	r4, r1
 8018f62:	4683      	mov	fp, r0
 8018f64:	4616      	mov	r6, r2
 8018f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018f6a:	b087      	sub	sp, #28
 8018f6c:	ab03      	add	r3, sp, #12
 8018f6e:	68a7      	ldr	r7, [r4, #8]
 8018f70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018f74:	4b6f      	ldr	r3, [pc, #444]	; (8019134 <_scanf_i+0x1dc>)
 8018f76:	69a1      	ldr	r1, [r4, #24]
 8018f78:	4a6f      	ldr	r2, [pc, #444]	; (8019138 <_scanf_i+0x1e0>)
 8018f7a:	2903      	cmp	r1, #3
 8018f7c:	bf08      	it	eq
 8018f7e:	461a      	moveq	r2, r3
 8018f80:	1e7b      	subs	r3, r7, #1
 8018f82:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018f86:	bf84      	itt	hi
 8018f88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018f8c:	60a3      	strhi	r3, [r4, #8]
 8018f8e:	6823      	ldr	r3, [r4, #0]
 8018f90:	9200      	str	r2, [sp, #0]
 8018f92:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018f96:	bf88      	it	hi
 8018f98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018f9c:	f104 091c 	add.w	r9, r4, #28
 8018fa0:	6023      	str	r3, [r4, #0]
 8018fa2:	bf8c      	ite	hi
 8018fa4:	197f      	addhi	r7, r7, r5
 8018fa6:	2700      	movls	r7, #0
 8018fa8:	464b      	mov	r3, r9
 8018faa:	f04f 0800 	mov.w	r8, #0
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	6831      	ldr	r1, [r6, #0]
 8018fb2:	ab03      	add	r3, sp, #12
 8018fb4:	2202      	movs	r2, #2
 8018fb6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018fba:	7809      	ldrb	r1, [r1, #0]
 8018fbc:	f7e7 f928 	bl	8000210 <memchr>
 8018fc0:	9b01      	ldr	r3, [sp, #4]
 8018fc2:	b330      	cbz	r0, 8019012 <_scanf_i+0xba>
 8018fc4:	f1b8 0f01 	cmp.w	r8, #1
 8018fc8:	d15a      	bne.n	8019080 <_scanf_i+0x128>
 8018fca:	6862      	ldr	r2, [r4, #4]
 8018fcc:	b92a      	cbnz	r2, 8018fda <_scanf_i+0x82>
 8018fce:	6822      	ldr	r2, [r4, #0]
 8018fd0:	2108      	movs	r1, #8
 8018fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018fd6:	6061      	str	r1, [r4, #4]
 8018fd8:	6022      	str	r2, [r4, #0]
 8018fda:	6822      	ldr	r2, [r4, #0]
 8018fdc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018fe0:	6022      	str	r2, [r4, #0]
 8018fe2:	68a2      	ldr	r2, [r4, #8]
 8018fe4:	1e51      	subs	r1, r2, #1
 8018fe6:	60a1      	str	r1, [r4, #8]
 8018fe8:	b19a      	cbz	r2, 8019012 <_scanf_i+0xba>
 8018fea:	6832      	ldr	r2, [r6, #0]
 8018fec:	1c51      	adds	r1, r2, #1
 8018fee:	6031      	str	r1, [r6, #0]
 8018ff0:	7812      	ldrb	r2, [r2, #0]
 8018ff2:	701a      	strb	r2, [r3, #0]
 8018ff4:	1c5d      	adds	r5, r3, #1
 8018ff6:	6873      	ldr	r3, [r6, #4]
 8018ff8:	3b01      	subs	r3, #1
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	6073      	str	r3, [r6, #4]
 8018ffe:	dc07      	bgt.n	8019010 <_scanf_i+0xb8>
 8019000:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019004:	4631      	mov	r1, r6
 8019006:	4658      	mov	r0, fp
 8019008:	4798      	blx	r3
 801900a:	2800      	cmp	r0, #0
 801900c:	f040 8086 	bne.w	801911c <_scanf_i+0x1c4>
 8019010:	462b      	mov	r3, r5
 8019012:	f108 0801 	add.w	r8, r8, #1
 8019016:	f1b8 0f03 	cmp.w	r8, #3
 801901a:	d1c8      	bne.n	8018fae <_scanf_i+0x56>
 801901c:	6862      	ldr	r2, [r4, #4]
 801901e:	b90a      	cbnz	r2, 8019024 <_scanf_i+0xcc>
 8019020:	220a      	movs	r2, #10
 8019022:	6062      	str	r2, [r4, #4]
 8019024:	6862      	ldr	r2, [r4, #4]
 8019026:	4945      	ldr	r1, [pc, #276]	; (801913c <_scanf_i+0x1e4>)
 8019028:	6960      	ldr	r0, [r4, #20]
 801902a:	9301      	str	r3, [sp, #4]
 801902c:	1a89      	subs	r1, r1, r2
 801902e:	f000 f897 	bl	8019160 <__sccl>
 8019032:	9b01      	ldr	r3, [sp, #4]
 8019034:	f04f 0800 	mov.w	r8, #0
 8019038:	461d      	mov	r5, r3
 801903a:	68a3      	ldr	r3, [r4, #8]
 801903c:	6822      	ldr	r2, [r4, #0]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d03a      	beq.n	80190b8 <_scanf_i+0x160>
 8019042:	6831      	ldr	r1, [r6, #0]
 8019044:	6960      	ldr	r0, [r4, #20]
 8019046:	f891 c000 	ldrb.w	ip, [r1]
 801904a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801904e:	2800      	cmp	r0, #0
 8019050:	d032      	beq.n	80190b8 <_scanf_i+0x160>
 8019052:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019056:	d121      	bne.n	801909c <_scanf_i+0x144>
 8019058:	0510      	lsls	r0, r2, #20
 801905a:	d51f      	bpl.n	801909c <_scanf_i+0x144>
 801905c:	f108 0801 	add.w	r8, r8, #1
 8019060:	b117      	cbz	r7, 8019068 <_scanf_i+0x110>
 8019062:	3301      	adds	r3, #1
 8019064:	3f01      	subs	r7, #1
 8019066:	60a3      	str	r3, [r4, #8]
 8019068:	6873      	ldr	r3, [r6, #4]
 801906a:	3b01      	subs	r3, #1
 801906c:	2b00      	cmp	r3, #0
 801906e:	6073      	str	r3, [r6, #4]
 8019070:	dd1b      	ble.n	80190aa <_scanf_i+0x152>
 8019072:	6833      	ldr	r3, [r6, #0]
 8019074:	3301      	adds	r3, #1
 8019076:	6033      	str	r3, [r6, #0]
 8019078:	68a3      	ldr	r3, [r4, #8]
 801907a:	3b01      	subs	r3, #1
 801907c:	60a3      	str	r3, [r4, #8]
 801907e:	e7dc      	b.n	801903a <_scanf_i+0xe2>
 8019080:	f1b8 0f02 	cmp.w	r8, #2
 8019084:	d1ad      	bne.n	8018fe2 <_scanf_i+0x8a>
 8019086:	6822      	ldr	r2, [r4, #0]
 8019088:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801908c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019090:	d1bf      	bne.n	8019012 <_scanf_i+0xba>
 8019092:	2110      	movs	r1, #16
 8019094:	6061      	str	r1, [r4, #4]
 8019096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801909a:	e7a1      	b.n	8018fe0 <_scanf_i+0x88>
 801909c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80190a0:	6022      	str	r2, [r4, #0]
 80190a2:	780b      	ldrb	r3, [r1, #0]
 80190a4:	702b      	strb	r3, [r5, #0]
 80190a6:	3501      	adds	r5, #1
 80190a8:	e7de      	b.n	8019068 <_scanf_i+0x110>
 80190aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80190ae:	4631      	mov	r1, r6
 80190b0:	4658      	mov	r0, fp
 80190b2:	4798      	blx	r3
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d0df      	beq.n	8019078 <_scanf_i+0x120>
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	05d9      	lsls	r1, r3, #23
 80190bc:	d50c      	bpl.n	80190d8 <_scanf_i+0x180>
 80190be:	454d      	cmp	r5, r9
 80190c0:	d908      	bls.n	80190d4 <_scanf_i+0x17c>
 80190c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80190c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80190ca:	4632      	mov	r2, r6
 80190cc:	4658      	mov	r0, fp
 80190ce:	4798      	blx	r3
 80190d0:	1e6f      	subs	r7, r5, #1
 80190d2:	463d      	mov	r5, r7
 80190d4:	454d      	cmp	r5, r9
 80190d6:	d029      	beq.n	801912c <_scanf_i+0x1d4>
 80190d8:	6822      	ldr	r2, [r4, #0]
 80190da:	f012 0210 	ands.w	r2, r2, #16
 80190de:	d113      	bne.n	8019108 <_scanf_i+0x1b0>
 80190e0:	702a      	strb	r2, [r5, #0]
 80190e2:	6863      	ldr	r3, [r4, #4]
 80190e4:	9e00      	ldr	r6, [sp, #0]
 80190e6:	4649      	mov	r1, r9
 80190e8:	4658      	mov	r0, fp
 80190ea:	47b0      	blx	r6
 80190ec:	f8da 3000 	ldr.w	r3, [sl]
 80190f0:	6821      	ldr	r1, [r4, #0]
 80190f2:	1d1a      	adds	r2, r3, #4
 80190f4:	f8ca 2000 	str.w	r2, [sl]
 80190f8:	f011 0f20 	tst.w	r1, #32
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	d010      	beq.n	8019122 <_scanf_i+0x1ca>
 8019100:	6018      	str	r0, [r3, #0]
 8019102:	68e3      	ldr	r3, [r4, #12]
 8019104:	3301      	adds	r3, #1
 8019106:	60e3      	str	r3, [r4, #12]
 8019108:	eba5 0509 	sub.w	r5, r5, r9
 801910c:	44a8      	add	r8, r5
 801910e:	6925      	ldr	r5, [r4, #16]
 8019110:	4445      	add	r5, r8
 8019112:	6125      	str	r5, [r4, #16]
 8019114:	2000      	movs	r0, #0
 8019116:	b007      	add	sp, #28
 8019118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911c:	f04f 0800 	mov.w	r8, #0
 8019120:	e7ca      	b.n	80190b8 <_scanf_i+0x160>
 8019122:	07ca      	lsls	r2, r1, #31
 8019124:	bf4c      	ite	mi
 8019126:	8018      	strhmi	r0, [r3, #0]
 8019128:	6018      	strpl	r0, [r3, #0]
 801912a:	e7ea      	b.n	8019102 <_scanf_i+0x1aa>
 801912c:	2001      	movs	r0, #1
 801912e:	e7f2      	b.n	8019116 <_scanf_i+0x1be>
 8019130:	08019a78 	.word	0x08019a78
 8019134:	08016b79 	.word	0x08016b79
 8019138:	080192dd 	.word	0x080192dd
 801913c:	08019f35 	.word	0x08019f35

08019140 <_sbrk_r>:
 8019140:	b538      	push	{r3, r4, r5, lr}
 8019142:	4c06      	ldr	r4, [pc, #24]	; (801915c <_sbrk_r+0x1c>)
 8019144:	2300      	movs	r3, #0
 8019146:	4605      	mov	r5, r0
 8019148:	4608      	mov	r0, r1
 801914a:	6023      	str	r3, [r4, #0]
 801914c:	f7ee fa04 	bl	8007558 <_sbrk>
 8019150:	1c43      	adds	r3, r0, #1
 8019152:	d102      	bne.n	801915a <_sbrk_r+0x1a>
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	b103      	cbz	r3, 801915a <_sbrk_r+0x1a>
 8019158:	602b      	str	r3, [r5, #0]
 801915a:	bd38      	pop	{r3, r4, r5, pc}
 801915c:	20045ccc 	.word	0x20045ccc

08019160 <__sccl>:
 8019160:	b570      	push	{r4, r5, r6, lr}
 8019162:	780b      	ldrb	r3, [r1, #0]
 8019164:	2b5e      	cmp	r3, #94	; 0x5e
 8019166:	bf13      	iteet	ne
 8019168:	1c4a      	addne	r2, r1, #1
 801916a:	1c8a      	addeq	r2, r1, #2
 801916c:	784b      	ldrbeq	r3, [r1, #1]
 801916e:	2100      	movne	r1, #0
 8019170:	bf08      	it	eq
 8019172:	2101      	moveq	r1, #1
 8019174:	1e44      	subs	r4, r0, #1
 8019176:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801917a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801917e:	42ac      	cmp	r4, r5
 8019180:	d1fb      	bne.n	801917a <__sccl+0x1a>
 8019182:	b913      	cbnz	r3, 801918a <__sccl+0x2a>
 8019184:	3a01      	subs	r2, #1
 8019186:	4610      	mov	r0, r2
 8019188:	bd70      	pop	{r4, r5, r6, pc}
 801918a:	f081 0401 	eor.w	r4, r1, #1
 801918e:	54c4      	strb	r4, [r0, r3]
 8019190:	1c51      	adds	r1, r2, #1
 8019192:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019196:	2d2d      	cmp	r5, #45	; 0x2d
 8019198:	f101 36ff 	add.w	r6, r1, #4294967295
 801919c:	460a      	mov	r2, r1
 801919e:	d006      	beq.n	80191ae <__sccl+0x4e>
 80191a0:	2d5d      	cmp	r5, #93	; 0x5d
 80191a2:	d0f0      	beq.n	8019186 <__sccl+0x26>
 80191a4:	b90d      	cbnz	r5, 80191aa <__sccl+0x4a>
 80191a6:	4632      	mov	r2, r6
 80191a8:	e7ed      	b.n	8019186 <__sccl+0x26>
 80191aa:	462b      	mov	r3, r5
 80191ac:	e7ef      	b.n	801918e <__sccl+0x2e>
 80191ae:	780e      	ldrb	r6, [r1, #0]
 80191b0:	2e5d      	cmp	r6, #93	; 0x5d
 80191b2:	d0fa      	beq.n	80191aa <__sccl+0x4a>
 80191b4:	42b3      	cmp	r3, r6
 80191b6:	dcf8      	bgt.n	80191aa <__sccl+0x4a>
 80191b8:	3301      	adds	r3, #1
 80191ba:	429e      	cmp	r6, r3
 80191bc:	54c4      	strb	r4, [r0, r3]
 80191be:	dcfb      	bgt.n	80191b8 <__sccl+0x58>
 80191c0:	3102      	adds	r1, #2
 80191c2:	e7e6      	b.n	8019192 <__sccl+0x32>

080191c4 <strncmp>:
 80191c4:	b510      	push	{r4, lr}
 80191c6:	b16a      	cbz	r2, 80191e4 <strncmp+0x20>
 80191c8:	3901      	subs	r1, #1
 80191ca:	1884      	adds	r4, r0, r2
 80191cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80191d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80191d4:	4293      	cmp	r3, r2
 80191d6:	d103      	bne.n	80191e0 <strncmp+0x1c>
 80191d8:	42a0      	cmp	r0, r4
 80191da:	d001      	beq.n	80191e0 <strncmp+0x1c>
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d1f5      	bne.n	80191cc <strncmp+0x8>
 80191e0:	1a98      	subs	r0, r3, r2
 80191e2:	bd10      	pop	{r4, pc}
 80191e4:	4610      	mov	r0, r2
 80191e6:	e7fc      	b.n	80191e2 <strncmp+0x1e>

080191e8 <_strtoul_l.isra.0>:
 80191e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191ec:	4680      	mov	r8, r0
 80191ee:	4689      	mov	r9, r1
 80191f0:	4692      	mov	sl, r2
 80191f2:	461e      	mov	r6, r3
 80191f4:	460f      	mov	r7, r1
 80191f6:	463d      	mov	r5, r7
 80191f8:	9808      	ldr	r0, [sp, #32]
 80191fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191fe:	f7fe fe59 	bl	8017eb4 <__locale_ctype_ptr_l>
 8019202:	4420      	add	r0, r4
 8019204:	7843      	ldrb	r3, [r0, #1]
 8019206:	f013 0308 	ands.w	r3, r3, #8
 801920a:	d130      	bne.n	801926e <_strtoul_l.isra.0+0x86>
 801920c:	2c2d      	cmp	r4, #45	; 0x2d
 801920e:	d130      	bne.n	8019272 <_strtoul_l.isra.0+0x8a>
 8019210:	787c      	ldrb	r4, [r7, #1]
 8019212:	1cbd      	adds	r5, r7, #2
 8019214:	2101      	movs	r1, #1
 8019216:	2e00      	cmp	r6, #0
 8019218:	d05c      	beq.n	80192d4 <_strtoul_l.isra.0+0xec>
 801921a:	2e10      	cmp	r6, #16
 801921c:	d109      	bne.n	8019232 <_strtoul_l.isra.0+0x4a>
 801921e:	2c30      	cmp	r4, #48	; 0x30
 8019220:	d107      	bne.n	8019232 <_strtoul_l.isra.0+0x4a>
 8019222:	782b      	ldrb	r3, [r5, #0]
 8019224:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019228:	2b58      	cmp	r3, #88	; 0x58
 801922a:	d14e      	bne.n	80192ca <_strtoul_l.isra.0+0xe2>
 801922c:	786c      	ldrb	r4, [r5, #1]
 801922e:	2610      	movs	r6, #16
 8019230:	3502      	adds	r5, #2
 8019232:	f04f 32ff 	mov.w	r2, #4294967295
 8019236:	2300      	movs	r3, #0
 8019238:	fbb2 f2f6 	udiv	r2, r2, r6
 801923c:	fb06 fc02 	mul.w	ip, r6, r2
 8019240:	ea6f 0c0c 	mvn.w	ip, ip
 8019244:	4618      	mov	r0, r3
 8019246:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801924a:	2f09      	cmp	r7, #9
 801924c:	d817      	bhi.n	801927e <_strtoul_l.isra.0+0x96>
 801924e:	463c      	mov	r4, r7
 8019250:	42a6      	cmp	r6, r4
 8019252:	dd23      	ble.n	801929c <_strtoul_l.isra.0+0xb4>
 8019254:	2b00      	cmp	r3, #0
 8019256:	db1e      	blt.n	8019296 <_strtoul_l.isra.0+0xae>
 8019258:	4282      	cmp	r2, r0
 801925a:	d31c      	bcc.n	8019296 <_strtoul_l.isra.0+0xae>
 801925c:	d101      	bne.n	8019262 <_strtoul_l.isra.0+0x7a>
 801925e:	45a4      	cmp	ip, r4
 8019260:	db19      	blt.n	8019296 <_strtoul_l.isra.0+0xae>
 8019262:	fb00 4006 	mla	r0, r0, r6, r4
 8019266:	2301      	movs	r3, #1
 8019268:	f815 4b01 	ldrb.w	r4, [r5], #1
 801926c:	e7eb      	b.n	8019246 <_strtoul_l.isra.0+0x5e>
 801926e:	462f      	mov	r7, r5
 8019270:	e7c1      	b.n	80191f6 <_strtoul_l.isra.0+0xe>
 8019272:	2c2b      	cmp	r4, #43	; 0x2b
 8019274:	bf04      	itt	eq
 8019276:	1cbd      	addeq	r5, r7, #2
 8019278:	787c      	ldrbeq	r4, [r7, #1]
 801927a:	4619      	mov	r1, r3
 801927c:	e7cb      	b.n	8019216 <_strtoul_l.isra.0+0x2e>
 801927e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019282:	2f19      	cmp	r7, #25
 8019284:	d801      	bhi.n	801928a <_strtoul_l.isra.0+0xa2>
 8019286:	3c37      	subs	r4, #55	; 0x37
 8019288:	e7e2      	b.n	8019250 <_strtoul_l.isra.0+0x68>
 801928a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801928e:	2f19      	cmp	r7, #25
 8019290:	d804      	bhi.n	801929c <_strtoul_l.isra.0+0xb4>
 8019292:	3c57      	subs	r4, #87	; 0x57
 8019294:	e7dc      	b.n	8019250 <_strtoul_l.isra.0+0x68>
 8019296:	f04f 33ff 	mov.w	r3, #4294967295
 801929a:	e7e5      	b.n	8019268 <_strtoul_l.isra.0+0x80>
 801929c:	2b00      	cmp	r3, #0
 801929e:	da09      	bge.n	80192b4 <_strtoul_l.isra.0+0xcc>
 80192a0:	2322      	movs	r3, #34	; 0x22
 80192a2:	f8c8 3000 	str.w	r3, [r8]
 80192a6:	f04f 30ff 	mov.w	r0, #4294967295
 80192aa:	f1ba 0f00 	cmp.w	sl, #0
 80192ae:	d107      	bne.n	80192c0 <_strtoul_l.isra.0+0xd8>
 80192b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192b4:	b101      	cbz	r1, 80192b8 <_strtoul_l.isra.0+0xd0>
 80192b6:	4240      	negs	r0, r0
 80192b8:	f1ba 0f00 	cmp.w	sl, #0
 80192bc:	d0f8      	beq.n	80192b0 <_strtoul_l.isra.0+0xc8>
 80192be:	b10b      	cbz	r3, 80192c4 <_strtoul_l.isra.0+0xdc>
 80192c0:	f105 39ff 	add.w	r9, r5, #4294967295
 80192c4:	f8ca 9000 	str.w	r9, [sl]
 80192c8:	e7f2      	b.n	80192b0 <_strtoul_l.isra.0+0xc8>
 80192ca:	2430      	movs	r4, #48	; 0x30
 80192cc:	2e00      	cmp	r6, #0
 80192ce:	d1b0      	bne.n	8019232 <_strtoul_l.isra.0+0x4a>
 80192d0:	2608      	movs	r6, #8
 80192d2:	e7ae      	b.n	8019232 <_strtoul_l.isra.0+0x4a>
 80192d4:	2c30      	cmp	r4, #48	; 0x30
 80192d6:	d0a4      	beq.n	8019222 <_strtoul_l.isra.0+0x3a>
 80192d8:	260a      	movs	r6, #10
 80192da:	e7aa      	b.n	8019232 <_strtoul_l.isra.0+0x4a>

080192dc <_strtoul_r>:
 80192dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192de:	4c06      	ldr	r4, [pc, #24]	; (80192f8 <_strtoul_r+0x1c>)
 80192e0:	4d06      	ldr	r5, [pc, #24]	; (80192fc <_strtoul_r+0x20>)
 80192e2:	6824      	ldr	r4, [r4, #0]
 80192e4:	6a24      	ldr	r4, [r4, #32]
 80192e6:	2c00      	cmp	r4, #0
 80192e8:	bf08      	it	eq
 80192ea:	462c      	moveq	r4, r5
 80192ec:	9400      	str	r4, [sp, #0]
 80192ee:	f7ff ff7b 	bl	80191e8 <_strtoul_l.isra.0>
 80192f2:	b003      	add	sp, #12
 80192f4:	bd30      	pop	{r4, r5, pc}
 80192f6:	bf00      	nop
 80192f8:	2000000c 	.word	0x2000000c
 80192fc:	20000070 	.word	0x20000070

08019300 <__submore>:
 8019300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019304:	460c      	mov	r4, r1
 8019306:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801930c:	4299      	cmp	r1, r3
 801930e:	d11d      	bne.n	801934c <__submore+0x4c>
 8019310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019314:	f7ff fa66 	bl	80187e4 <_malloc_r>
 8019318:	b918      	cbnz	r0, 8019322 <__submore+0x22>
 801931a:	f04f 30ff 	mov.w	r0, #4294967295
 801931e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019326:	63a3      	str	r3, [r4, #56]	; 0x38
 8019328:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801932c:	6360      	str	r0, [r4, #52]	; 0x34
 801932e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019332:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019336:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801933a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801933e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019342:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019346:	6020      	str	r0, [r4, #0]
 8019348:	2000      	movs	r0, #0
 801934a:	e7e8      	b.n	801931e <__submore+0x1e>
 801934c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801934e:	0077      	lsls	r7, r6, #1
 8019350:	463a      	mov	r2, r7
 8019352:	f000 f837 	bl	80193c4 <_realloc_r>
 8019356:	4605      	mov	r5, r0
 8019358:	2800      	cmp	r0, #0
 801935a:	d0de      	beq.n	801931a <__submore+0x1a>
 801935c:	eb00 0806 	add.w	r8, r0, r6
 8019360:	4601      	mov	r1, r0
 8019362:	4632      	mov	r2, r6
 8019364:	4640      	mov	r0, r8
 8019366:	f7fb fe8b 	bl	8015080 <memcpy>
 801936a:	f8c4 8000 	str.w	r8, [r4]
 801936e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019372:	e7e9      	b.n	8019348 <__submore+0x48>

08019374 <__ascii_wctomb>:
 8019374:	b149      	cbz	r1, 801938a <__ascii_wctomb+0x16>
 8019376:	2aff      	cmp	r2, #255	; 0xff
 8019378:	bf85      	ittet	hi
 801937a:	238a      	movhi	r3, #138	; 0x8a
 801937c:	6003      	strhi	r3, [r0, #0]
 801937e:	700a      	strbls	r2, [r1, #0]
 8019380:	f04f 30ff 	movhi.w	r0, #4294967295
 8019384:	bf98      	it	ls
 8019386:	2001      	movls	r0, #1
 8019388:	4770      	bx	lr
 801938a:	4608      	mov	r0, r1
 801938c:	4770      	bx	lr

0801938e <memmove>:
 801938e:	4288      	cmp	r0, r1
 8019390:	b510      	push	{r4, lr}
 8019392:	eb01 0302 	add.w	r3, r1, r2
 8019396:	d807      	bhi.n	80193a8 <memmove+0x1a>
 8019398:	1e42      	subs	r2, r0, #1
 801939a:	4299      	cmp	r1, r3
 801939c:	d00a      	beq.n	80193b4 <memmove+0x26>
 801939e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80193a6:	e7f8      	b.n	801939a <memmove+0xc>
 80193a8:	4283      	cmp	r3, r0
 80193aa:	d9f5      	bls.n	8019398 <memmove+0xa>
 80193ac:	1881      	adds	r1, r0, r2
 80193ae:	1ad2      	subs	r2, r2, r3
 80193b0:	42d3      	cmn	r3, r2
 80193b2:	d100      	bne.n	80193b6 <memmove+0x28>
 80193b4:	bd10      	pop	{r4, pc}
 80193b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80193ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80193be:	e7f7      	b.n	80193b0 <memmove+0x22>

080193c0 <__malloc_lock>:
 80193c0:	4770      	bx	lr

080193c2 <__malloc_unlock>:
 80193c2:	4770      	bx	lr

080193c4 <_realloc_r>:
 80193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193c6:	4607      	mov	r7, r0
 80193c8:	4614      	mov	r4, r2
 80193ca:	460e      	mov	r6, r1
 80193cc:	b921      	cbnz	r1, 80193d8 <_realloc_r+0x14>
 80193ce:	4611      	mov	r1, r2
 80193d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80193d4:	f7ff ba06 	b.w	80187e4 <_malloc_r>
 80193d8:	b922      	cbnz	r2, 80193e4 <_realloc_r+0x20>
 80193da:	f7ff f9b5 	bl	8018748 <_free_r>
 80193de:	4625      	mov	r5, r4
 80193e0:	4628      	mov	r0, r5
 80193e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193e4:	f000 f814 	bl	8019410 <_malloc_usable_size_r>
 80193e8:	42a0      	cmp	r0, r4
 80193ea:	d20f      	bcs.n	801940c <_realloc_r+0x48>
 80193ec:	4621      	mov	r1, r4
 80193ee:	4638      	mov	r0, r7
 80193f0:	f7ff f9f8 	bl	80187e4 <_malloc_r>
 80193f4:	4605      	mov	r5, r0
 80193f6:	2800      	cmp	r0, #0
 80193f8:	d0f2      	beq.n	80193e0 <_realloc_r+0x1c>
 80193fa:	4631      	mov	r1, r6
 80193fc:	4622      	mov	r2, r4
 80193fe:	f7fb fe3f 	bl	8015080 <memcpy>
 8019402:	4631      	mov	r1, r6
 8019404:	4638      	mov	r0, r7
 8019406:	f7ff f99f 	bl	8018748 <_free_r>
 801940a:	e7e9      	b.n	80193e0 <_realloc_r+0x1c>
 801940c:	4635      	mov	r5, r6
 801940e:	e7e7      	b.n	80193e0 <_realloc_r+0x1c>

08019410 <_malloc_usable_size_r>:
 8019410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019414:	1f18      	subs	r0, r3, #4
 8019416:	2b00      	cmp	r3, #0
 8019418:	bfbc      	itt	lt
 801941a:	580b      	ldrlt	r3, [r1, r0]
 801941c:	18c0      	addlt	r0, r0, r3
 801941e:	4770      	bx	lr

08019420 <_init>:
 8019420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019422:	bf00      	nop
 8019424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019426:	bc08      	pop	{r3}
 8019428:	469e      	mov	lr, r3
 801942a:	4770      	bx	lr

0801942c <_fini>:
 801942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801942e:	bf00      	nop
 8019430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019432:	bc08      	pop	{r3}
 8019434:	469e      	mov	lr, r3
 8019436:	4770      	bx	lr
