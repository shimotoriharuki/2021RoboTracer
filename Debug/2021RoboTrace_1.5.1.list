
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018be8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  08018da8  08018da8  00028da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019934  08019934  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019934  08019934  00029934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801993c  0801993c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801993c  0801993c  0002993c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019944  08019944  00029944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041c30  200001e0  08019b24  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20041e10  08019b24  00031e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003921d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007933  00000000  00000000  00069429  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b8  00000000  00000000  00070d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff8  00000000  00000000  00073018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035247  00000000  00000000  00075010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025c49  00000000  00000000  000aa257  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110cee  00000000  00000000  000cfea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0b8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a530  00000000  00000000  001e0c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018d90 	.word	0x08018d90

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018d90 	.word	0x08018d90

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fb7e 	bl	800a6d8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003f908 	.word	0x2003f908

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fb66 	bl	800a6d8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003f908 	.word	0x2003f908

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fa07 	bl	800a434 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 ff6e 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 ff68 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 ff62 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 ff5c 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 ff56 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 ff50 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 ff4a 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 ff44 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 ff3e 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 ff38 	bl	8008f08 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 ff2c 	bl	8008f08 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 ff26 	bl	8008f08 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fa05 	bl	8016538 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f926 	bl	800e408 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f922 	bl	800e408 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003fb5c 	.word	0x2003fb5c
 80011e0:	2003f840 	.word	0x2003f840
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fcb6 	bl	8012ebc <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003e74c 	.word	0x2003e74c

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f014 f881 	bl	80156a0 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fcfa 	bl	8012fa4 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fcf5 	bl	8012fa4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 fa63 	bl	8012a92 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018da8 	.word	0x08018da8
 80015f8:	2003e6bc 	.word	0x2003e6bc
 80015fc:	2003e74c 	.word	0x2003e74c
 8001600:	2003e73c 	.word	0x2003e73c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fc71 	bl	8012f10 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fedc 	bl	80133ec <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fc6b 	bl	8012f10 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f014 f81c 	bl	80156a0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fc98 	bl	8012fa4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 fa06 	bl	8012a92 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fc0a 	bl	8012ebc <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003e5bc 	.word	0x2003e5bc
 80016b8:	2003d47c 	.word	0x2003d47c
 80016bc:	08018dc4 	.word	0x08018dc4
 80016c0:	08018da8 	.word	0x08018da8
 80016c4:	2003e6bc 	.word	0x2003e6bc
 80016c8:	2003e74c 	.word	0x2003e74c
 80016cc:	2003e73c 	.word	0x2003e73c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f014 f81f 	bl	8015748 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f012 f83a 	bl	80137a8 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 fbbc 	bl	8012ebc <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018db4 	.word	0x08018db4
 8001754:	2003e6bc 	.word	0x2003e6bc
 8001758:	2003e74c 	.word	0x2003e74c

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 ffd9 	bl	8015748 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 fff4 	bl	80137a8 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 fb76 	bl	8012ebc <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018dc0 	.word	0x08018dc0
 80017e0:	2003e6bc 	.word	0x2003e6bc
 80017e4:	2003e74c 	.word	0x2003e74c

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fdd8 	bl	80123ac <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018dd0 	.word	0x08018dd0
 800181c:	2003d57c 	.word	0x2003d57c

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 ffb7 	bl	80157a0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 ffb3 	bl	80157a0 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003e5bc 	.word	0x2003e5bc
 8001848:	2003d47c 	.word	0x2003d47c

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fe8d 	bl	8013570 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fb5a 	bl	8012f10 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fde9 	bl	8012438 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 fb52 	bl	8012f10 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003e5bc 	.word	0x2003e5bc
 8001874:	2003d47c 	.word	0x2003d47c
 8001878:	2003e74c 	.word	0x2003e74c
 800187c:	08018dc4 	.word	0x08018dc4

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003e6bc 	.word	0x2003e6bc

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fdb0 	bl	800a434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b ff59 	bl	800d794 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00c f886 	bl	800d9fc <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fd9c 	bl	800a434 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003f7e8 	.word	0x2003f7e8

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fd7f 	bl	800a434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b ff28 	bl	800d794 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b ff22 	bl	800d794 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fd6c 	bl	800a434 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003f7e8 	.word	0x2003f7e8

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003f784 	.word	0x2003f784
 8001a2c:	2003f782 	.word	0x2003f782
 8001a30:	2003f77c 	.word	0x2003f77c

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 fa2a 	bl	8008f08 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08018dd4 	.word	0x08018dd4
 8001ac0:	08018de0 	.word	0x08018de0
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003f784 	.word	0x2003f784
 8001b6c:	2003f782 	.word	0x2003f782
 8001b70:	2003f77c 	.word	0x2003f77c
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f974 	bl	8008f08 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f91e 	bl	8008f08 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08018de4 	.word	0x08018de4
 8001d34:	08018df0 	.word	0x08018df0

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fcbf 	bl	800a6d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fdb3 	bl	800a8d4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003f99c 	.word	0x2003f99c

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fc87 	bl	800a6d8 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003f99c 	.word	0x2003f99c

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 fadd 	bl	800a404 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 facd 	bl	800a404 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 fabc 	bl	800a404 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 faac 	bl	800a404 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 fa9c 	bl	800a404 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 fa8d 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 fa87 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 fa81 	bl	800a434 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 fa77 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 fa71 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 fa6b 	bl	800a434 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 fa61 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 fa5b 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 fa55 	bl	800a434 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 fa4b 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 fa45 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 fa3f 	bl	800a434 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 fa35 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 fa2f 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 fa29 	bl	800a434 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 fa1f 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 fa19 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 fa13 	bl	800a434 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 fa09 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 fa03 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f9fd 	bl	800a434 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f9f3 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f9ed 	bl	800a434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f9e7 	bl	800a434 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f9ce 	bl	800a434 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f9c3 	bl	800a434 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f9b9 	bl	800a434 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f9ae 	bl	800a434 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 ff06 	bl	8008fd4 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003f8c0 	.word	0x2003f8c0

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fd63 	bl	8008f08 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fd02 	bl	8004f94 <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018dfc 	.word	0x08018dfc
 800266c:	08018e08 	.word	0x08018e08
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002804:	33ec      	adds	r3, #236	; 0xec
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002810:	33ee      	adds	r3, #238	; 0xee
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800281c:	33f0      	adds	r3, #240	; 0xf0
 800281e:	2200      	movs	r2, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002828:	33f2      	adds	r3, #242	; 0xf2
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002834:	33f3      	adds	r3, #243	; 0xf3
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002840:	33f4      	adds	r3, #244	; 0xf4
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800284c:	33f8      	adds	r3, #248	; 0xf8
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800285a:	33fc      	adds	r3, #252	; 0xfc
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002868:	2200      	movs	r2, #0
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002872:	3302      	adds	r3, #2
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800289a:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a0:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	82fb      	strh	r3, [r7, #22]
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	f241 726f 	movw	r2, #5999	; 0x176f
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d80e      	bhi.n	80028d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x194>
		velocity_table_[i] = 0;
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028be:	3314      	adds	r3, #20
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82fb      	strh	r3, [r7, #22]
 80028d2:	e7eb      	b.n	80028ac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x16c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028d4:	2300      	movs	r3, #0
 80028d6:	82bb      	strh	r3, [r7, #20]
 80028d8:	8abb      	ldrh	r3, [r7, #20]
 80028da:	2b63      	cmp	r3, #99	; 0x63
 80028dc:	d80e      	bhi.n	80028fc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1bc>
		crossline_distance_[i] = 0;
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028e6:	3306      	adds	r3, #6
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028f4:	8abb      	ldrh	r3, [r7, #20]
 80028f6:	3301      	adds	r3, #1
 80028f8:	82bb      	strh	r3, [r7, #20]
 80028fa:	e7ed      	b.n	80028d8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x198>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028fc:	2300      	movs	r3, #0
 80028fe:	827b      	strh	r3, [r7, #18]
 8002900:	8a7b      	ldrh	r3, [r7, #18]
 8002902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002906:	d20e      	bcs.n	8002926 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1e6>
		sideline_distance_[i] = 0;
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002910:	332a      	adds	r3, #42	; 0x2a
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800291e:	8a7b      	ldrh	r3, [r7, #18]
 8002920:	3301      	adds	r3, #1
 8002922:	827b      	strh	r3, [r7, #18]
 8002924:	e7ec      	b.n	8002900 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1c0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002926:	2300      	movs	r3, #0
 8002928:	823b      	strh	r3, [r7, #16]
 800292a:	8a3b      	ldrh	r3, [r7, #16]
 800292c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002930:	d20e      	bcs.n	8002950 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x210>
		all_sideline_distance_[i] = 0;
 8002932:	8a3b      	ldrh	r3, [r7, #16]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 800293a:	3312      	adds	r3, #18
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002948:	8a3b      	ldrh	r3, [r7, #16]
 800294a:	3301      	adds	r3, #1
 800294c:	823b      	strh	r3, [r7, #16]
 800294e:	e7ec      	b.n	800292a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ea>
	}
}
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80029a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80029b4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80029c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80029d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a08:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002a0c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002a14:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fdad 	bl	8000578 <__aeabi_f2d>
 8002a1e:	a318      	add	r3, pc, #96	; (adr r3, 8002a80 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fe00 	bl	8000628 <__aeabi_dmul>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	4625      	mov	r5, r4
 8002a2e:	461c      	mov	r4, r3
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd9f 	bl	8000578 <__aeabi_f2d>
 8002a3a:	a313      	add	r3, pc, #76	; (adr r3, 8002a88 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fdf2 	bl	8000628 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd fc36 	bl	80002bc <__adddf3>
 8002a50:	4603      	mov	r3, r0
 8002a52:	460c      	mov	r4, r1
 8002a54:	4618      	mov	r0, r3
 8002a56:	4621      	mov	r1, r4
 8002a58:	f7fe f8de 	bl	8000c18 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a64:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a6a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	ee07 3a90 	vmov	s15, r3

}
 8002a72:	eeb0 0a67 	vmov.f32	s0, s15
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7c:	f3af 8000 	nop.w
 8002a80:	47ae147b 	.word	0x47ae147b
 8002a84:	3fb47ae1 	.word	0x3fb47ae1
 8002a88:	d70a3d71 	.word	0xd70a3d71
 8002a8c:	3fed70a3 	.word	0x3fed70a3
 8002a90:	2000025c 	.word	0x2000025c
 8002a94:	20000280 	.word	0x20000280
 8002a98:	20000260 	.word	0x20000260
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff59 	bl	8002960 <_ZN9LineTrace9calcErrorEv>
 8002aae:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002abc:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ad2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ae4:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd3d 	bl	8000578 <__aeabi_f2d>
 8002afe:	a32a      	add	r3, pc, #168	; (adr r3, 8002ba8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd feba 	bl	800087c <__aeabi_ddiv>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	4621      	mov	r1, r4
 8002b10:	f7fe f882 	bl	8000c18 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd2b 	bl	8000578 <__aeabi_f2d>
 8002b22:	4604      	mov	r4, r0
 8002b24:	460d      	mov	r5, r1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b34:	ee17 0a90 	vmov	r0, s15
 8002b38:	f7fd fd1e 	bl	8000578 <__aeabi_f2d>
 8002b3c:	a31a      	add	r3, pc, #104	; (adr r3, 8002ba8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd71 	bl	8000628 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbb5 	bl	80002bc <__adddf3>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	4618      	mov	r0, r3
 8002b58:	4621      	mov	r1, r4
 8002b5a:	f7fe f85d 	bl	8000c18 <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b62:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b64:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b68:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b88:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b90:	4610      	mov	r0, r2
 8002b92:	f002 fde1 	bl	8005758 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6013      	str	r3, [r2, #0]

}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bac:	3f50624d 	.word	0x3f50624d
 8002bb0:	20000288 	.word	0x20000288
 8002bb4:	20000284 	.word	0x20000284

08002bb8 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fc6f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 f8a2 	bl	8004d18 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fdcf 	bl	800477c <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fe34 	bl	8004868 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c40:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c64:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c70:	4a3f      	ldr	r2, [pc, #252]	; (8002d70 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c76:	4a3f      	ldr	r2, [pc, #252]	; (8002d74 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c7c:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d043      	beq.n	8002d12 <_ZN9LineTrace11isCrossLineEv+0x102>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c8e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002d7c <_ZN9LineTrace11isCrossLineEv+0x16c>
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50f      	bpl.n	8002cbc <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d7c <_ZN9LineTrace11isCrossLineEv+0x16c>
 8002ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d506      	bpl.n	8002cbc <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	e002      	b.n	8002cc2 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d94c      	bls.n	8002d64 <_ZN9LineTrace11isCrossLineEv+0x154>
			flag = true;
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002ce2:	33f4      	adds	r3, #244	; 0xf4
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cee:	3318      	adds	r3, #24
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d103      	bne.n	8002d00 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f001 f9e7 	bl	80040cc <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cfe:	e031      	b.n	8002d64 <_ZN9LineTrace11isCrossLineEv+0x154>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f001 fa8c 	bl	800421e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	e028      	b.n	8002d64 <_ZN9LineTrace11isCrossLineEv+0x154>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d16:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d88 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	dd0f      	ble.n	8002d44 <_ZN9LineTrace11isCrossLineEv+0x134>
 8002d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d28:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d88 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	dd06      	ble.n	8002d44 <_ZN9LineTrace11isCrossLineEv+0x134>
			cnt++;
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	e002      	b.n	8002d4a <_ZN9LineTrace11isCrossLineEv+0x13a>
		}
		else{
			cnt = 0;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	d908      	bls.n	8002d64 <_ZN9LineTrace11isCrossLineEv+0x154>
			flag = false;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000268 	.word	0x20000268
 8002d74:	2000026c 	.word	0x2000026c
 8002d78:	2000028f 	.word	0x2000028f
 8002d7c:	44160000 	.word	0x44160000
 8002d80:	2000028c 	.word	0x2000028c
 8002d84:	2000028e 	.word	0x2000028e
 8002d88:	43fa0000 	.word	0x43fa0000

08002d8c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d9e:	3318      	adds	r3, #24
 8002da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d136      	bne.n	8002e16 <_ZN9LineTrace15radius2VelocityEf+0x8a>
		if(radius < 300) velocity = min_velocity_;
 8002da8:	edd7 7a00 	vldr	s15, [r7]
 8002dac:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002f10 <_ZN9LineTrace15radius2VelocityEf+0x184>
 8002db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db8:	d504      	bpl.n	8002dc4 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e09b      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 800) velocity = 1.7;
 8002dc4:	edd7 7a00 	vldr	s15, [r7]
 8002dc8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002f14 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	d502      	bpl.n	8002ddc <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002dd6:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <_ZN9LineTrace15radius2VelocityEf+0x18c>)
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e08f      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 1500) velocity = 2.0;
 8002ddc:	edd7 7a00 	vldr	s15, [r7]
 8002de0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d503      	bpl.n	8002df6 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e082      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 2000) velocity = 2.5;
 8002df6:	edd7 7a00 	vldr	s15, [r7]
 8002dfa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002f20 <_ZN9LineTrace15radius2VelocityEf+0x194>
 8002dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	d502      	bpl.n	8002e0e <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <_ZN9LineTrace15radius2VelocityEf+0x198>)
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e076      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else velocity = max_velocity_;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e072      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d168      	bne.n	8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x16c>
		if(radius < 100) velocity = min_velocity2_;
 8002e26:	edd7 7a00 	vldr	s15, [r7]
 8002e2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002f28 <_ZN9LineTrace15radius2VelocityEf+0x19c>
 8002e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	d504      	bpl.n	8002e42 <_ZN9LineTrace15radius2VelocityEf+0xb6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e05c      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 150) velocity = 1.4;
 8002e42:	edd7 7a00 	vldr	s15, [r7]
 8002e46:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002f2c <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8002e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	d502      	bpl.n	8002e5a <_ZN9LineTrace15radius2VelocityEf+0xce>
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <_ZN9LineTrace15radius2VelocityEf+0x1a4>)
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e050      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 300) velocity = 1.5;
 8002e5a:	edd7 7a00 	vldr	s15, [r7]
 8002e5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f10 <_ZN9LineTrace15radius2VelocityEf+0x184>
 8002e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	d503      	bpl.n	8002e74 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002e6c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e043      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 500) velocity = 1.7;
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002f34 <_ZN9LineTrace15radius2VelocityEf+0x1a8>
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d502      	bpl.n	8002e8c <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <_ZN9LineTrace15radius2VelocityEf+0x18c>)
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e037      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 800) velocity = 1.8;
 8002e8c:	edd7 7a00 	vldr	s15, [r7]
 8002e90:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002f14 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	d502      	bpl.n	8002ea4 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <_ZN9LineTrace15radius2VelocityEf+0x1ac>)
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e02b      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 1000) velocity = 2.0;
 8002ea4:	edd7 7a00 	vldr	s15, [r7]
 8002ea8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002f3c <_ZN9LineTrace15radius2VelocityEf+0x1b0>
 8002eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	d503      	bpl.n	8002ebe <_ZN9LineTrace15radius2VelocityEf+0x132>
 8002eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e01e      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 1500) velocity = 2.2;
 8002ebe:	edd7 7a00 	vldr	s15, [r7]
 8002ec2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	d502      	bpl.n	8002ed6 <_ZN9LineTrace15radius2VelocityEf+0x14a>
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <_ZN9LineTrace15radius2VelocityEf+0x1b4>)
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e012      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else if(radius < 2000) velocity = 2.4;
 8002ed6:	edd7 7a00 	vldr	s15, [r7]
 8002eda:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002f20 <_ZN9LineTrace15radius2VelocityEf+0x194>
 8002ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d502      	bpl.n	8002eee <_ZN9LineTrace15radius2VelocityEf+0x162>
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <_ZN9LineTrace15radius2VelocityEf+0x1b8>)
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e006      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
		else velocity = max_velocity2_;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e001      	b.n	8002efc <_ZN9LineTrace15radius2VelocityEf+0x170>
	}
	else velocity = 1.3;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <_ZN9LineTrace15radius2VelocityEf+0x1bc>)
 8002efa:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	ee07 3a90 	vmov	s15, r3
}
 8002f02:	eeb0 0a67 	vmov.f32	s0, s15
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	43960000 	.word	0x43960000
 8002f14:	44480000 	.word	0x44480000
 8002f18:	3fd9999a 	.word	0x3fd9999a
 8002f1c:	44bb8000 	.word	0x44bb8000
 8002f20:	44fa0000 	.word	0x44fa0000
 8002f24:	40200000 	.word	0x40200000
 8002f28:	42c80000 	.word	0x42c80000
 8002f2c:	43160000 	.word	0x43160000
 8002f30:	3fb33333 	.word	0x3fb33333
 8002f34:	43fa0000 	.word	0x43fa0000
 8002f38:	3fe66666 	.word	0x3fe66666
 8002f3c:	447a0000 	.word	0x447a0000
 8002f40:	400ccccd 	.word	0x400ccccd
 8002f44:	4019999a 	.word	0x4019999a
 8002f48:	3fa66666 	.word	0x3fa66666

08002f4c <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 fb6a 	bl	8004632 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f5e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fb70 	bl	800464a <_ZN6Logger20getThetaArrayPointerEv>
 8002f6a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	837b      	strh	r3, [r7, #26]
 8002f70:	8b7b      	ldrh	r3, [r7, #26]
 8002f72:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d84b      	bhi.n	8003012 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f86:	8b7b      	ldrh	r3, [r7, #26]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	d101      	bne.n	8002fa4 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 8002fa2:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002fa4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fb0:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb4:	f7ff fbb4 	bl	8002720 <_ZSt3absf>
 8002fb8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003078 <_ZN9LineTrace20createVelocityTabeleEv+0x12c>
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	db01      	blt.n	8002fd2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <_ZN9LineTrace20createVelocityTabeleEv+0x130>)
 8002fd0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002fd2:	8b7c      	ldrh	r4, [r7, #26]
 8002fd4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fed7 	bl	8002d8c <_ZN9LineTrace15radius2VelocityEf>
 8002fde:	eef0 7a40 	vmov.f32	s15, s0
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fe8:	3314      	adds	r3, #20
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ff4:	8b7b      	ldrh	r3, [r7, #26]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800300a:	8b7b      	ldrh	r3, [r7, #26]
 800300c:	3301      	adds	r3, #1
 800300e:	837b      	strh	r3, [r7, #26]
 8003010:	e7ae      	b.n	8002f70 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	velocity_table_[0] = min_velocity_;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800301e:	3354      	adds	r3, #84	; 0x54
 8003020:	601a      	str	r2, [r3, #0]

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003028:	33fc      	adds	r3, #252	; 0xfc
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	6939      	ldr	r1, [r7, #16]
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8f3 	bl	8003220 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003040:	33f8      	adds	r3, #248	; 0xf8
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	6939      	ldr	r1, [r7, #16]
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f98f 	bl	8003370 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003058:	3354      	adds	r3, #84	; 0x54
 800305a:	2200      	movs	r2, #0
 800305c:	9200      	str	r2, [sp, #0]
 800305e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003062:	4907      	ldr	r1, [pc, #28]	; (8003080 <_ZN9LineTrace20createVelocityTabeleEv+0x134>)
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <_ZN9LineTrace20createVelocityTabeleEv+0x138>)
 8003066:	f7fe facd 	bl	8001604 <sd_write_array_float>

}
 800306a:	bf00      	nop
 800306c:	3724      	adds	r7, #36	; 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	3727c5ac 	.word	0x3727c5ac
 8003078:	459c4000 	.word	0x459c4000
 800307c:	459c4000 	.word	0x459c4000
 8003080:	08018e4c 	.word	0x08018e4c
 8003084:	08018e5c 	.word	0x08018e5c

08003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08d      	sub	sp, #52	; 0x34
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69d8      	ldr	r0, [r3, #28]
 8003094:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x170>)
 8003096:	4a59      	ldr	r2, [pc, #356]	; (80031fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x174>)
 8003098:	4959      	ldr	r1, [pc, #356]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x178>)
 800309a:	f001 fb52 	bl	8004742 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030a4:	331c      	adds	r3, #28
 80030a6:	2264      	movs	r2, #100	; 0x64
 80030a8:	4956      	ldr	r1, [pc, #344]	; (8003204 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x17c>)
 80030aa:	4855      	ldr	r0, [pc, #340]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x178>)
 80030ac:	f7fe fb10 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80030b6:	33ac      	adds	r3, #172	; 0xac
 80030b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030bc:	4952      	ldr	r1, [pc, #328]	; (8003208 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x180>)
 80030be:	4850      	ldr	r0, [pc, #320]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x178>)
 80030c0:	f7fe fb06 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 fab2 	bl	8004632 <_ZN6Logger23getDistanceArrayPointerEv>
 80030ce:	6178      	str	r0, [r7, #20]
	p_theta= logger_->getThetaArrayPointer();
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fab8 	bl	800464a <_ZN6Logger20getThetaArrayPointerEv>
 80030da:	6138      	str	r0, [r7, #16]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030dc:	2300      	movs	r3, #0
 80030de:	847b      	strh	r3, [r7, #34]	; 0x22
 80030e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030e2:	f241 726f 	movw	r2, #5999	; 0x176f
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d84b      	bhi.n	8003182 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80030ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4413      	add	r3, r2
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
		temp_theta = p_theta[i];
 80030f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 8003102:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003106:	eef5 7a40 	vcmp.f32	s15, #0.0
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	d101      	bne.n	8003114 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003110:	4b3e      	ldr	r3, [pc, #248]	; (800320c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x184>)
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
		float radius_origin = abs(temp_distance / temp_theta);
 8003114:	ed97 7a03 	vldr	s14, [r7, #12]
 8003118:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800311c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003120:	eeb0 0a66 	vmov.f32	s0, s13
 8003124:	f7ff fafc 	bl	8002720 <_ZSt3absf>
 8003128:	ed87 0a07 	vstr	s0, [r7, #28]
		if(radius_origin >= 5000) radius_origin = 5000;
 800312c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003130:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003210 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x188>
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	db01      	blt.n	8003142 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x18c>)
 8003140:	61fb      	str	r3, [r7, #28]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003142:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003144:	ed97 0a07 	vldr	s0, [r7, #28]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe1f 	bl	8002d8c <_ZN9LineTrace15radius2VelocityEf>
 800314e:	eef0 7a40 	vmov.f32	s15, s0
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003158:	3314      	adds	r3, #20
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	441a      	add	r2, r3
 800316c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	3324      	adds	r3, #36	; 0x24
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800317a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800317c:	3301      	adds	r3, #1
 800317e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003180:	e7ae      	b.n	80030e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}
	for(uint16_t i = 1; i < LOG_DATA_SIZE_DIS; i++){
 8003182:	2301      	movs	r3, #1
 8003184:	837b      	strh	r3, [r7, #26]
 8003186:	8b7b      	ldrh	r3, [r7, #26]
 8003188:	f241 726f 	movw	r2, #5999	; 0x176f
 800318c:	4293      	cmp	r3, r2
 800318e:	d803      	bhi.n	8003198 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x110>
 8003190:	8b7b      	ldrh	r3, [r7, #26]
 8003192:	3301      	adds	r3, #1
 8003194:	837b      	strh	r3, [r7, #26]
 8003196:	e7f6      	b.n	8003186 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfe>
	}

	velocity_table_[0] = min_velocity_;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031a4:	3354      	adds	r3, #84	; 0x54
 80031a6:	601a      	str	r2, [r3, #0]

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80031ae:	33fc      	adds	r3, #252	; 0xfc
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	6979      	ldr	r1, [r7, #20]
 80031b6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f830 	bl	8003220 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80031c6:	33f8      	adds	r3, #248	; 0xf8
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	eeb0 0a67 	vmov.f32	s0, s15
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8cc 	bl	8003370 <_ZN9LineTrace20accelerateProcessingEfPKf>


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031de:	3354      	adds	r3, #84	; 0x54
 80031e0:	2200      	movs	r2, #0
 80031e2:	9200      	str	r2, [sp, #0]
 80031e4:	f241 7270 	movw	r2, #6000	; 0x1770
 80031e8:	490b      	ldr	r1, [pc, #44]	; (8003218 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x190>)
 80031ea:	4805      	ldr	r0, [pc, #20]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x178>)
 80031ec:	f7fe fa0a 	bl	8001604 <sd_write_array_float>

}
 80031f0:	bf00      	nop
 80031f2:	372c      	adds	r7, #44	; 0x2c
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	08018e68 	.word	0x08018e68
 80031fc:	08018e74 	.word	0x08018e74
 8003200:	08018e5c 	.word	0x08018e5c
 8003204:	08018e84 	.word	0x08018e84
 8003208:	08018e94 	.word	0x08018e94
 800320c:	3727c5ac 	.word	0x3727c5ac
 8003210:	459c4000 	.word	0x459c4000
 8003214:	459c4000 	.word	0x459c4000
 8003218:	08018e4c 	.word	0x08018e4c
 800321c:	00000000 	.word	0x00000000

08003220 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	ed87 0a02 	vstr	s0, [r7, #8]
 800322c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800322e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003232:	83fb      	strh	r3, [r7, #30]
 8003234:	8bfb      	ldrh	r3, [r7, #30]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8091 	beq.w	800335e <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800323c:	8bfb      	ldrh	r3, [r7, #30]
 800323e:	3b01      	subs	r3, #1
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003246:	3314      	adds	r3, #20
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	8bfb      	ldrh	r3, [r7, #30]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800325a:	3314      	adds	r3, #20
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800326e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	dd6c      	ble.n	8003356 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800327c:	8bfb      	ldrh	r3, [r7, #30]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f976 	bl	8000578 <__aeabi_f2d>
 800328c:	a336      	add	r3, pc, #216	; (adr r3, 8003368 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd f9c9 	bl	8000628 <__aeabi_dmul>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	4625      	mov	r5, r4
 800329c:	461c      	mov	r4, r3
 800329e:	69b8      	ldr	r0, [r7, #24]
 80032a0:	f7fd f96a 	bl	8000578 <__aeabi_f2d>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4620      	mov	r0, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	f7fd fae6 	bl	800087c <__aeabi_ddiv>
 80032b0:	4603      	mov	r3, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	4618      	mov	r0, r3
 80032b6:	4621      	mov	r1, r4
 80032b8:	f7fd fcae 	bl	8000c18 <__aeabi_d2f>
 80032bc:	4603      	mov	r3, r0
 80032be:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80032c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80032c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80032d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80032d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	dd39      	ble.n	8003356 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032e2:	8bfb      	ldrh	r3, [r7, #30]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032ea:	3314      	adds	r3, #20
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f93f 	bl	8000578 <__aeabi_f2d>
 80032fa:	4604      	mov	r4, r0
 80032fc:	460d      	mov	r5, r1
 80032fe:	8bfb      	ldrh	r3, [r7, #30]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	ed93 7a00 	vldr	s14, [r3]
 800330a:	edd7 7a02 	vldr	s15, [r7, #8]
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	ee17 0a90 	vmov	r0, s15
 8003316:	f7fd f92f 	bl	8000578 <__aeabi_f2d>
 800331a:	a313      	add	r3, pc, #76	; (adr r3, 8003368 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fd f982 	bl	8000628 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fc ffc6 	bl	80002bc <__adddf3>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	4619      	mov	r1, r3
 8003336:	4622      	mov	r2, r4
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	1e5c      	subs	r4, r3, #1
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	f7fd fc6a 	bl	8000c18 <__aeabi_d2f>
 8003344:	4601      	mov	r1, r0
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800334c:	3314      	adds	r3, #20
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003356:	8bfb      	ldrh	r3, [r7, #30]
 8003358:	3b01      	subs	r3, #1
 800335a:	83fb      	strh	r3, [r7, #30]
 800335c:	e76a      	b.n	8003234 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	d2f1a9fc 	.word	0xd2f1a9fc
 800336c:	3f50624d 	.word	0x3f50624d

08003370 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	ed87 0a02 	vstr	s0, [r7, #8]
 800337c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800337e:	2300      	movs	r3, #0
 8003380:	83fb      	strh	r3, [r7, #30]
 8003382:	8bfb      	ldrh	r3, [r7, #30]
 8003384:	f241 726f 	movw	r2, #5999	; 0x176f
 8003388:	4293      	cmp	r3, r2
 800338a:	f200 8091 	bhi.w	80034b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800338e:	8bfb      	ldrh	r3, [r7, #30]
 8003390:	3301      	adds	r3, #1
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003398:	3314      	adds	r3, #20
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	ed93 7a00 	vldr	s14, [r3]
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033ac:	3314      	adds	r3, #20
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80033c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033cc:	dd6c      	ble.n	80034a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 80033ce:	8bfb      	ldrh	r3, [r7, #30]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f8cd 	bl	8000578 <__aeabi_f2d>
 80033de:	a336      	add	r3, pc, #216	; (adr r3, 80034b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f920 	bl	8000628 <__aeabi_dmul>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	4625      	mov	r5, r4
 80033ee:	461c      	mov	r4, r3
 80033f0:	69b8      	ldr	r0, [r7, #24]
 80033f2:	f7fd f8c1 	bl	8000578 <__aeabi_f2d>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fd fa3d 	bl	800087c <__aeabi_ddiv>
 8003402:	4603      	mov	r3, r0
 8003404:	460c      	mov	r4, r1
 8003406:	4618      	mov	r0, r3
 8003408:	4621      	mov	r1, r4
 800340a:	f7fd fc05 	bl	8000c18 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003412:	edd7 6a06 	vldr	s13, [r7, #24]
 8003416:	ed97 7a05 	vldr	s14, [r7, #20]
 800341a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341e:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003422:	ed97 7a04 	vldr	s14, [r7, #16]
 8003426:	edd7 7a02 	vldr	s15, [r7, #8]
 800342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd39      	ble.n	80034a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800343c:	3314      	adds	r3, #20
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f896 	bl	8000578 <__aeabi_f2d>
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	8bfb      	ldrh	r3, [r7, #30]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	ed93 7a00 	vldr	s14, [r3]
 800345c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003464:	ee17 0a90 	vmov	r0, s15
 8003468:	f7fd f886 	bl	8000578 <__aeabi_f2d>
 800346c:	a312      	add	r3, pc, #72	; (adr r3, 80034b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f8d9 	bl	8000628 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fc ff1d 	bl	80002bc <__adddf3>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	4619      	mov	r1, r3
 8003488:	4622      	mov	r2, r4
 800348a:	8bfb      	ldrh	r3, [r7, #30]
 800348c:	1c5c      	adds	r4, r3, #1
 800348e:	4608      	mov	r0, r1
 8003490:	4611      	mov	r1, r2
 8003492:	f7fd fbc1 	bl	8000c18 <__aeabi_d2f>
 8003496:	4601      	mov	r1, r0
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800349e:	3314      	adds	r3, #20
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	3301      	adds	r3, #1
 80034ac:	83fb      	strh	r3, [r7, #30]
 80034ae:	e768      	b.n	8003382 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdb0      	pop	{r4, r5, r7, pc}
 80034b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034bc:	3f50624d 	.word	0x3f50624d

080034c0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ce:	3314      	adds	r3, #20
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8087 	beq.w	80035e6 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd ffc5 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80034e2:	eeb0 7a40 	vmov.f32	s14, s0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034ec:	3350      	adds	r3, #80	; 0x50
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	bfac      	ite	ge
 80034fc:	2301      	movge	r3, #1
 80034fe:	2300      	movlt	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d025      	beq.n	8003552 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800350c:	3350      	adds	r3, #80	; 0x50
 800350e:	ed93 7a00 	vldr	s14, [r3]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003518:	3316      	adds	r3, #22
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	3324      	adds	r3, #36	; 0x24
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003532:	3350      	adds	r3, #80	; 0x50
 8003534:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800353e:	3316      	adds	r3, #22
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800354c:	3316      	adds	r3, #22
 800354e:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003550:	e7c2      	b.n	80034d8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003558:	3316      	adds	r3, #22
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003560:	4293      	cmp	r3, r2
 8003562:	d906      	bls.n	8003572 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800356a:	3316      	adds	r3, #22
 800356c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003570:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800357e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd ff71 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800358a:	eef0 7a40 	vmov.f32	s15, s0
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003590:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800359a:	3316      	adds	r3, #22
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80035a0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a8:	3316      	adds	r3, #22
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80035b2:	3314      	adds	r3, #20
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f985 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ce:	3316      	adds	r3, #22
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80035d8:	3314      	adds	r3, #20
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a06      	ldr	r2, [pc, #24]	; (80035fc <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 80035e4:	6013      	str	r3, [r2, #0]

	}
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000270 	.word	0x20000270
 80035f4:	20000274 	.word	0x20000274
 80035f8:	20000278 	.word	0x20000278
 80035fc:	2000027c 	.word	0x2000027c

08003600 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd ff1c 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003616:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fb69 	bl	8004cf6 <_ZN8Odometry8getThetaEv>
 8003624:	ec54 3b10 	vmov	r3, r4, d0
 8003628:	4618      	mov	r0, r3
 800362a:	4621      	mov	r1, r4
 800362c:	f7fd faf4 	bl	8000c18 <__aeabi_d2f>
 8003630:	4603      	mov	r3, r0
 8003632:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003634:	edd7 7a04 	vldr	s15, [r7, #16]
 8003638:	eef5 7a40 	vcmp.f32	s15, #0.0
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d101      	bne.n	8003646 <_ZN9LineTrace8isStableEv+0x46>
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <_ZN9LineTrace8isStableEv+0xd0>)
 8003644:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003646:	ed97 7a02 	vldr	s14, [r7, #8]
 800364a:	edd7 7a04 	vldr	s15, [r7, #16]
 800364e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003652:	eeb0 0a66 	vmov.f32	s0, s13
 8003656:	f7ff f863 	bl	8002720 <_ZSt3absf>
 800365a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800365e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003662:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036d4 <_ZN9LineTrace8isStableEv+0xd4>
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	db01      	blt.n	8003674 <_ZN9LineTrace8isStableEv+0x74>
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <_ZN9LineTrace8isStableEv+0xd8>)
 8003672:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800367a:	33f4      	adds	r3, #244	; 0xf4
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003682:	4b16      	ldr	r3, [pc, #88]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 8003684:	2200      	movs	r2, #0
 8003686:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800368e:	33f4      	adds	r3, #244	; 0xf4
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003694:	edd7 7a03 	vldr	s15, [r7, #12]
 8003698:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80036e0 <_ZN9LineTrace8isStableEv+0xe0>
 800369c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	db06      	blt.n	80036b4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036b0:	801a      	strh	r2, [r3, #0]
 80036b2:	e002      	b.n	80036ba <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <_ZN9LineTrace8isStableEv+0xdc>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	2b16      	cmp	r3, #22
 80036c0:	d901      	bls.n	80036c6 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	3727c5ac 	.word	0x3727c5ac
 80036d4:	459c4000 	.word	0x459c4000
 80036d8:	459c4000 	.word	0x459c4000
 80036dc:	20000290 	.word	0x20000290
 80036e0:	44fa0000 	.word	0x44fa0000

080036e4 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80036ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f0:	2201      	movs	r2, #1
 80036f2:	4942      	ldr	r1, [pc, #264]	; (80037fc <_ZN9LineTrace4initEv+0x118>)
 80036f4:	4842      	ldr	r0, [pc, #264]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80036f6:	f7fd ffeb 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80036fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036fe:	2201      	movs	r2, #1
 8003700:	4940      	ldr	r1, [pc, #256]	; (8003804 <_ZN9LineTrace4initEv+0x120>)
 8003702:	483f      	ldr	r0, [pc, #252]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003704:	f7fd ffe4 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	2201      	movs	r2, #1
 800370e:	493e      	ldr	r1, [pc, #248]	; (8003808 <_ZN9LineTrace4initEv+0x124>)
 8003710:	483b      	ldr	r0, [pc, #236]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003712:	f7fd ffdd 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003716:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800371a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800371e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003722:	eeb0 1a66 	vmov.f32	s2, s13
 8003726:	eef0 0a47 	vmov.f32	s1, s14
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f87a 	bl	8003828 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	2201      	movs	r2, #1
 800373a:	4934      	ldr	r1, [pc, #208]	; (800380c <_ZN9LineTrace4initEv+0x128>)
 800373c:	4830      	ldr	r0, [pc, #192]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800373e:	f7fd ffc7 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	2201      	movs	r2, #1
 8003748:	4931      	ldr	r1, [pc, #196]	; (8003810 <_ZN9LineTrace4initEv+0x12c>)
 800374a:	482d      	ldr	r0, [pc, #180]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800374c:	f7fd ffc0 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003750:	f107 0318 	add.w	r3, r7, #24
 8003754:	2201      	movs	r2, #1
 8003756:	492f      	ldr	r1, [pc, #188]	; (8003814 <_ZN9LineTrace4initEv+0x130>)
 8003758:	4829      	ldr	r0, [pc, #164]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 800375a:	f7fd ffb9 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	2201      	movs	r2, #1
 8003764:	492c      	ldr	r1, [pc, #176]	; (8003818 <_ZN9LineTrace4initEv+0x134>)
 8003766:	4826      	ldr	r0, [pc, #152]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003768:	f7fd ffb2 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	2201      	movs	r2, #1
 8003772:	492a      	ldr	r1, [pc, #168]	; (800381c <_ZN9LineTrace4initEv+0x138>)
 8003774:	4822      	ldr	r0, [pc, #136]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 8003776:	f7fd ffab 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800377a:	edd7 7a08 	vldr	s15, [r7, #32]
 800377e:	eeb0 0a67 	vmov.f32	s0, s15
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8a5 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003788:	edd7 7a07 	vldr	s15, [r7, #28]
 800378c:	eeb0 0a67 	vmov.f32	s0, s15
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8ad 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003796:	edd7 7a06 	vldr	s15, [r7, #24]
 800379a:	eeb0 0a67 	vmov.f32	s0, s15
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f8b5 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80037a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8be 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80037b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c7 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	2201      	movs	r2, #1
 80037c6:	4916      	ldr	r1, [pc, #88]	; (8003820 <_ZN9LineTrace4initEv+0x13c>)
 80037c8:	480d      	ldr	r0, [pc, #52]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80037ca:	f7fd ff81 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2201      	movs	r2, #1
 80037d4:	4913      	ldr	r1, [pc, #76]	; (8003824 <_ZN9LineTrace4initEv+0x140>)
 80037d6:	480a      	ldr	r0, [pc, #40]	; (8003800 <_ZN9LineTrace4initEv+0x11c>)
 80037d8:	f7fd ff7a 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80037dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80037e4:	eef0 0a47 	vmov.f32	s1, s14
 80037e8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f90c 	bl	8003a0a <_ZN9LineTrace12setMaxAccDecEff>
}
 80037f2:	bf00      	nop
 80037f4:	3730      	adds	r7, #48	; 0x30
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08018ea0 	.word	0x08018ea0
 8003800:	08018ea8 	.word	0x08018ea8
 8003804:	08018eb0 	.word	0x08018eb0
 8003808:	08018eb8 	.word	0x08018eb8
 800380c:	08018ec0 	.word	0x08018ec0
 8003810:	08018ecc 	.word	0x08018ecc
 8003814:	08018ed8 	.word	0x08018ed8
 8003818:	08018ee4 	.word	0x08018ee4
 800381c:	08018ef0 	.word	0x08018ef0
 8003820:	08018efc 	.word	0x08018efc
 8003824:	08018f04 	.word	0x08018f04

08003828 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	ed87 0a02 	vstr	s0, [r7, #8]
 8003834:	edc7 0a01 	vstr	s1, [r7, #4]
 8003838:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
	return kp_;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	ee07 3a90 	vmov	s15, r3
}
 800386a:	eeb0 0a67 	vmov.f32	s0, s15
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	ee07 3a90 	vmov	s15, r3
}
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
	return kd_;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	ee07 3a90 	vmov	s15, r3
}
 80038a6:	eeb0 0a67 	vmov.f32	s0, s15
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	ee07 3a90 	vmov	s15, r3
}
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003998:	ee07 3a90 	vmov	s15, r3
}
 800399c:	eeb0 0a67 	vmov.f32	s0, s15
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b8:	ee07 3a90 	vmov	s15, r3
}
 80039bc:	eeb0 0a67 	vmov.f32	s0, s15
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	ee07 3a90 	vmov	s15, r3
}
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	ee07 3a90 	vmov	s15, r3
}
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a16:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003a20:	33f8      	adds	r3, #248	; 0xf8
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003a2c:	33fc      	adds	r3, #252	; 0xfc
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003a4c:	33f8      	adds	r3, #248	; 0xf8
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	ee07 3a90 	vmov	s15, r3
}
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003a70:	33fc      	adds	r3, #252	; 0xfc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	ee07 3a90 	vmov	s15, r3
}
 8003a78:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 813b 	beq.w	8003d12 <_ZN9LineTrace4flipEv+0x28a>
		// ---- line following processing -----//
		pidTrace();
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fe ffff 	bl	8002aa0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003aa2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 faee 	bl	8004088 <_ZN9LineTrace16isTargetDistanceEf>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d027      	beq.n	8003b02 <_ZN9LineTrace4flipEv+0x7a>
			// ---- Store Logs ------//
			storeLogs();
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa4c 	bl	8003f50 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fda1 	bl	8003600 <_ZN9LineTrace8isStableEv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <_ZN9LineTrace4flipEv+0x54>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fbb3 	bl	8005234 <_ZN10SideSensor9getStatusEv>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <_ZN9LineTrace4flipEv+0x54>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <_ZN9LineTrace4flipEv+0x56>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <_ZN9LineTrace4flipEv+0x66>
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
#endif
				stable_flag_ = true;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003ae8:	33f3      	adds	r3, #243	; 0xf3
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fcd8 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 f90b 	bl	8004d18 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fcdc 	bl	80034c0 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff f881 	bl	8002c10 <_ZN9LineTrace11isCrossLineEv>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <_ZN9LineTrace4flipEv+0xa0>
			side_sensor_->enableIgnore();
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fbb3 	bl	8005284 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fceb 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fbc3 	bl	80052b8 <_ZN10SideSensor13getIgnoreFlagEv>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00f      	beq.n	8003b58 <_ZN9LineTrace4flipEv+0xd0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd fccf 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003b42:	eeb0 7a40 	vmov.f32	s14, s0
 8003b46:	eddf 7a75 	vldr	s15, [pc, #468]	; 8003d1c <_ZN9LineTrace4flipEv+0x294>
 8003b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b52:	db01      	blt.n	8003b58 <_ZN9LineTrace4flipEv+0xd0>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <_ZN9LineTrace4flipEv+0xd2>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <_ZN9LineTrace4flipEv+0xe0>
			side_sensor_->disableIgnore();
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 fb9b 	bl	800529e <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003b6e:	33f3      	adds	r3, #243	; 0xf3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <_ZN9LineTrace4flipEv+0x106>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 fb5a 	bl	8005234 <_ZN10SideSensor9getStatusEv>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <_ZN9LineTrace4flipEv+0x106>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <_ZN9LineTrace4flipEv+0x108>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01f      	beq.n	8003bd4 <_ZN9LineTrace4flipEv+0x14c>
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <_ZN9LineTrace4flipEv+0x124>
				storeSideLineDistance();
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fac8 	bl	800413a <_ZN9LineTrace21storeSideLineDistanceEv>
 8003baa:	e007      	b.n	8003bbc <_ZN9LineTrace4flipEv+0x134>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb6d 	bl	800428c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003bc2:	33f3      	adds	r3, #243	; 0xf3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003bce:	33f4      	adds	r3, #244	; 0xf4
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003bda:	33f3      	adds	r3, #243	; 0xf3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <_ZN9LineTrace4flipEv+0x16c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	330c      	adds	r3, #12
 8003be6:	2201      	movs	r2, #1
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fa41 	bl	8002074 <_ZN3LED2LREaa>
 8003bf2:	e007      	b.n	8003c04 <_ZN9LineTrace4flipEv+0x17c>
		else led_.LR(-1, 0);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fa38 	bl	8002074 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	f083 0301 	eor.w	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <_ZN9LineTrace4flipEv+0x1a8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fb09 	bl	8005234 <_ZN10SideSensor9getStatusEv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <_ZN9LineTrace4flipEv+0x1a8>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <_ZN9LineTrace4flipEv+0x1aa>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <_ZN9LineTrace4flipEv+0x1d2>
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
#endif
			all_sideline_flag_ = true;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c48:	3318      	adds	r3, #24
 8003c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <_ZN9LineTrace4flipEv+0x20a>
				storeAllSideLineDistance();
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 faaa 	bl	80041ac <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003c58:	e01b      	b.n	8003c92 <_ZN9LineTrace4flipEv+0x20a>
				//correctionTotalDistanceFromAllSideMarker();
				//correction_check_cnt_ = 0;
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c60:	3302      	adds	r3, #2
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <_ZN9LineTrace4flipEv+0x1f8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fae1 	bl	8005234 <_ZN10SideSensor9getStatusEv>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <_ZN9LineTrace4flipEv+0x1f8>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <_ZN9LineTrace4flipEv+0x1fa>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <_ZN9LineTrace4flipEv+0x20a>
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
#endif
			all_sideline_flag_ = false;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fcec 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <_ZN9LineTrace4flipEv+0x22c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003d20 <_ZN9LineTrace4flipEv+0x298>
 8003caa:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003d20 <_ZN9LineTrace4flipEv+0x298>
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fd52 	bl	8005758 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cc6:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d905      	bls.n	8003ce4 <_ZN9LineTrace4flipEv+0x25c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cde:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ce2:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	2b50      	cmp	r3, #80	; 0x50
 8003cee:	d808      	bhi.n	8003d02 <_ZN9LineTrace4flipEv+0x27a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f9ba 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003d00:	e007      	b.n	8003d12 <_ZN9LineTrace4flipEv+0x28a>
		else led_.LR(-1, 0);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	330c      	adds	r3, #12
 8003d06:	2200      	movs	r2, #0
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe f9b1 	bl	8002074 <_ZN3LED2LREaa>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	43480000 	.word	0x43480000
 8003d20:	00000000 	.word	0x00000000

08003d24 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fd62 	bl	800580a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fa8a 	bl	8005264 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d56:	33ec      	adds	r3, #236	; 0xec
 8003d58:	2200      	movs	r2, #0
 8003d5a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d62:	33ee      	adds	r3, #238	; 0xee
 8003d64:	2200      	movs	r2, #0
 8003d66:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d6e:	33f0      	adds	r3, #240	; 0xf0
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fd4d 	bl	8005830 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe f967 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003dac:	3318      	adds	r3, #24
 8003dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d107      	bne.n	8003dc6 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69d8      	ldr	r0, [r3, #28]
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <_ZN9LineTrace4stopEv+0xcc>)
 8003dbc:	4a23      	ldr	r2, [pc, #140]	; (8003e4c <_ZN9LineTrace4stopEv+0xd0>)
 8003dbe:	4924      	ldr	r1, [pc, #144]	; (8003e50 <_ZN9LineTrace4stopEv+0xd4>)
 8003dc0:	f000 fc78 	bl	80046b4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003dc4:	e006      	b.n	8003dd4 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69d8      	ldr	r0, [r3, #28]
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <_ZN9LineTrace4stopEv+0xd8>)
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <_ZN9LineTrace4stopEv+0xdc>)
 8003dce:	4920      	ldr	r1, [pc, #128]	; (8003e50 <_ZN9LineTrace4stopEv+0xd4>)
 8003dd0:	f000 fc93 	bl	80046fa <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003dda:	331c      	adds	r3, #28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	9200      	str	r2, [sp, #0]
 8003de0:	2264      	movs	r2, #100	; 0x64
 8003de2:	491e      	ldr	r1, [pc, #120]	; (8003e5c <_ZN9LineTrace4stopEv+0xe0>)
 8003de4:	481a      	ldr	r0, [pc, #104]	; (8003e50 <_ZN9LineTrace4stopEv+0xd4>)
 8003de6:	f7fd fc0d 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003df0:	33ac      	adds	r3, #172	; 0xac
 8003df2:	2200      	movs	r2, #0
 8003df4:	9200      	str	r2, [sp, #0]
 8003df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dfa:	4919      	ldr	r1, [pc, #100]	; (8003e60 <_ZN9LineTrace4stopEv+0xe4>)
 8003dfc:	4814      	ldr	r0, [pc, #80]	; (8003e50 <_ZN9LineTrace4stopEv+0xd4>)
 8003dfe:	f7fd fc01 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e08:	334c      	adds	r3, #76	; 0x4c
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e12:	4914      	ldr	r1, [pc, #80]	; (8003e64 <_ZN9LineTrace4stopEv+0xe8>)
 8003e14:	480e      	ldr	r0, [pc, #56]	; (8003e50 <_ZN9LineTrace4stopEv+0xd4>)
 8003e16:	f7fd fbf5 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe f925 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fcf1 	bl	8004816 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fc9f 	bl	800477c <_ZN6Logger10resetLogs2Ev>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08018e68 	.word	0x08018e68
 8003e4c:	08018e74 	.word	0x08018e74
 8003e50:	08018e5c 	.word	0x08018e5c
 8003e54:	08018f0c 	.word	0x08018f0c
 8003e58:	08018f18 	.word	0x08018f18
 8003e5c:	08018e84 	.word	0x08018e84
 8003e60:	08018e94 	.word	0x08018e94
 8003e64:	08018f28 	.word	0x08018f28

08003e68 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003e74:	2300      	movs	r3, #0
 8003e76:	737b      	strb	r3, [r7, #13]
	start();
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff53 	bl	8003d24 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003e7e:	7b7b      	ldrb	r3, [r7, #13]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d15b      	bne.n	8003f3c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <_ZN9LineTrace7runningEv+0x28>
 8003e8a:	2b0a      	cmp	r3, #10
 8003e8c:	d030      	beq.n	8003ef0 <_ZN9LineTrace7runningEv+0x88>
 8003e8e:	e054      	b.n	8003f3a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f9d9 	bl	800524c <_ZN10SideSensor16getWhiteLineCntLEv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d044      	beq.n	8003f34 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fe fe84 	bl	8002bb8 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003eb6:	3318      	adds	r3, #24
 8003eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f89f 	bl	8004004 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd fb17 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd faf5 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	330c      	adds	r3, #12
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f8c5 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003eea:	230a      	movs	r3, #10
 8003eec:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003eee:	e021      	b.n	8003f34 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f9a9 	bl	800524c <_ZN10SideSensor16getWhiteLineCntLEv>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <_ZN9LineTrace7runningEv+0xd0>
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
#endif
				loggerStop();
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe fe6f 	bl	8002bee <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f88a 	bl	800402a <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003f16:	2064      	movs	r0, #100	; 0x64
 8003f18:	f004 fff6 	bl	8008f08 <HAL_Delay>

				setTargetVelocity(0);
 8003f1c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003f4c <_ZN9LineTrace7runningEv+0xe4>
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fcd6 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f2a:	f004 ffed 	bl	8008f08 <HAL_Delay>

				goal_flag = true;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003f32:	e001      	b.n	8003f38 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003f34:	bf00      	nop
 8003f36:	e7a2      	b.n	8003e7e <_ZN9LineTrace7runningEv+0x16>
			break;
 8003f38:	bf00      	nop
	while(goal_flag == false){
 8003f3a:	e7a0      	b.n	8003e7e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff1d 	bl	8003d7c <_ZN9LineTrace4stopEv>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	00000000 	.word	0x00000000

08003f50 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	ed2d 8b02 	vpush	{d8}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d046      	beq.n	8003ff4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11c      	bne.n	8003fb0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69dc      	ldr	r4, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fa65 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003f84:	eeb0 8a40 	vmov.f32	s16, s0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 feb2 	bl	8004cf6 <_ZN8Odometry8getThetaEv>
 8003f92:	ec53 2b10 	vmov	r2, r3, d0
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7fc fe3d 	bl	8000c18 <__aeabi_d2f>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	ee00 3a90 	vmov	s1, r3
 8003fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fab2 	bl	8004512 <_ZN6Logger21storeDistanceAndThetaEff>
 8003fae:	e01b      	b.n	8003fe8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69dc      	ldr	r4, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fc55 	bl	8005868 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003fbe:	eeb0 8a40 	vmov.f32	s16, s0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fe95 	bl	8004cf6 <_ZN8Odometry8getThetaEv>
 8003fcc:	ec53 2b10 	vmov	r2, r3, d0
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fe20 	bl	8000c18 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	ee00 3a90 	vmov	s1, r3
 8003fde:	eeb0 0a48 	vmov.f32	s0, s16
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f000 fadc 	bl	80045a0 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003ff2:	801a      	strh	r2, [r3, #0]
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	ecbd 8b02 	vpop	{d8}
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	20000264 	.word	0x20000264

08004004 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd fa57 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800401c:	3314      	adds	r3, #20
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004038:	3314      	adds	r3, #20
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004044:	3316      	adds	r3, #22
 8004046:	2200      	movs	r2, #0
 8004048:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8004050:	3350      	adds	r3, #80	; 0x50
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004076:	3318      	adds	r3, #24
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	801a      	strh	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd f9d6 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80040a2:	eeb0 7a40 	vmov.f32	s14, s0
 80040a6:	edd7 7a00 	vldr	s15, [r7]
 80040aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80040de:	33ec      	adds	r3, #236	; 0xec
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	461c      	mov	r4, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fd f9c1 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80040ea:	eef0 7a40 	vmov.f32	s15, s0
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80040f4:	3306      	adds	r3, #6
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004106:	33ec      	adds	r3, #236	; 0xec
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004114:	33ec      	adds	r3, #236	; 0xec
 8004116:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800411e:	33ec      	adds	r3, #236	; 0xec
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b63      	cmp	r3, #99	; 0x63
 8004124:	d905      	bls.n	8004132 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800412c:	33ec      	adds	r3, #236	; 0xec
 800412e:	2263      	movs	r2, #99	; 0x63
 8004130:	801a      	strh	r2, [r3, #0]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bd90      	pop	{r4, r7, pc}

0800413a <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800413a:	b590      	push	{r4, r7, lr}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800414c:	33ee      	adds	r3, #238	; 0xee
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	461c      	mov	r4, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f7fd f98a 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004158:	eef0 7a40 	vmov.f32	s15, s0
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004162:	332a      	adds	r3, #42	; 0x2a
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004174:	33ee      	adds	r3, #238	; 0xee
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004182:	33ee      	adds	r3, #238	; 0xee
 8004184:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800418c:	33ee      	adds	r3, #238	; 0xee
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004194:	d306      	bcc.n	80041a4 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800419c:	33ee      	adds	r3, #238	; 0xee
 800419e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041a2:	801a      	strh	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd90      	pop	{r4, r7, pc}

080041ac <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80041be:	33f0      	adds	r3, #240	; 0xf0
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461c      	mov	r4, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fd f951 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80041ca:	eef0 7a40 	vmov.f32	s15, s0
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80041d4:	3312      	adds	r3, #18
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80041e6:	33f0      	adds	r3, #240	; 0xf0
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80041f4:	33f0      	adds	r3, #240	; 0xf0
 80041f6:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80041fe:	33f0      	adds	r3, #240	; 0xf0
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004206:	d306      	bcc.n	8004216 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x6a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800420e:	33f0      	adds	r3, #240	; 0xf0
 8004210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004214:	801a      	strh	r2, [r3, #0]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6959      	ldr	r1, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004230:	33ec      	adds	r3, #236	; 0xec
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800423a:	3306      	adds	r3, #6
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	edd3 7a00 	vldr	s15, [r3]
 8004246:	eeb0 0a67 	vmov.f32	s0, s15
 800424a:	4608      	mov	r0, r1
 800424c:	f7fd f91d 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004256:	33ec      	adds	r3, #236	; 0xec
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004264:	33ec      	adds	r3, #236	; 0xec
 8004266:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800426e:	33ec      	adds	r3, #236	; 0xec
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	2b63      	cmp	r3, #99	; 0x63
 8004274:	d905      	bls.n	8004282 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800427c:	33ec      	adds	r3, #236	; 0xec
 800427e:	2263      	movs	r2, #99	; 0x63
 8004280:	801a      	strh	r2, [r3, #0]

}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004294:	2300      	movs	r3, #0
 8004296:	82fb      	strh	r3, [r7, #22]
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800429e:	d239      	bcs.n	8004314 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 80042a0:	8afb      	ldrh	r3, [r7, #22]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80042a8:	332a      	adds	r3, #42	; 0x2a
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd f8d7 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80042be:	eeb0 7a40 	vmov.f32	s14, s0
 80042c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042ca:	eeb0 0a67 	vmov.f32	s0, s15
 80042ce:	f7fe fa27 	bl	8002720 <_ZSt3absf>
 80042d2:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80042d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042da:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800433c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 80042de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	d811      	bhi.n	800430c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6959      	ldr	r1, [r3, #20]
 80042ec:	8afb      	ldrh	r3, [r7, #22]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80042f4:	332a      	adds	r3, #42	; 0x2a
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	4608      	mov	r0, r1
 8004306:	f7fd f8c0 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 800430a:	e003      	b.n	8004314 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800430c:	8afb      	ldrh	r3, [r7, #22]
 800430e:	3301      	adds	r3, #1
 8004310:	82fb      	strh	r3, [r7, #22]
 8004312:	e7c1      	b.n	8004298 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800431a:	33ee      	adds	r3, #238	; 0xee
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004322:	d306      	bcc.n	8004332 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800432a:	33ee      	adds	r3, #238	; 0xee
 800432c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004330:	801a      	strh	r2, [r3, #0]

}
 8004332:	bf00      	nop
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	42a00000 	.word	0x42a00000

08004340 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800434e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800435c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004360:	2200      	movs	r2, #0
 8004362:	801a      	strh	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800436a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800436e:	2200      	movs	r2, #0
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004378:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800437c:	2200      	movs	r2, #0
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800439c:	f7fd fa24 	bl	80017e8 <sd_mount>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d016      	beq.n	80043de <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80043b0:	f7fc fe76 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80043b4:	2100      	movs	r1, #0
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fe82 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80043bc:	4815      	ldr	r0, [pc, #84]	; (8004414 <_ZN6Logger10sdCardInitEv+0x84>)
 80043be:	f7fc fea9 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80043c2:	2101      	movs	r1, #1
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7fc fe7b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80043ca:	4813      	ldr	r0, [pc, #76]	; (8004418 <_ZN6Logger10sdCardInitEv+0x88>)
 80043cc:	f7fc fea2 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80043d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043d4:	f004 fd98 	bl	8008f08 <HAL_Delay>

	  ret = true;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e015      	b.n	800440a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80043de:	f7fc fe5f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80043e2:	2100      	movs	r1, #0
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fc fe6b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80043ea:	480a      	ldr	r0, [pc, #40]	; (8004414 <_ZN6Logger10sdCardInitEv+0x84>)
 80043ec:	f7fc fe92 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80043f0:	2101      	movs	r1, #1
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fc fe64 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80043f8:	4808      	ldr	r0, [pc, #32]	; (800441c <_ZN6Logger10sdCardInitEv+0x8c>)
 80043fa:	f7fc fe8b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80043fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004402:	f004 fd81 	bl	8008f08 <HAL_Delay>

	  ret = false;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	08018f38 	.word	0x08018f38
 8004418:	08018f44 	.word	0x08018f44
 800441c:	08018f4c 	.word	0x08018f4c

08004420 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004432:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d027      	beq.n	800448c <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004442:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004458:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004468:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800446c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004474:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <_ZN6Logger8storeLogEf+0x6c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004484:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004488:	2200      	movs	r2, #0
 800448a:	801a      	strh	r2, [r3, #0]
	}
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d028      	beq.n	8004506 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044ba:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	3304      	adds	r3, #4
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044d2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044e6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <_ZN6Logger9storeLog2Ef+0x6e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004502:	2200      	movs	r2, #0
 8004504:	801a      	strh	r2, [r3, #0]
	}
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	ed87 0a02 	vstr	s0, [r7, #8]
 800451e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004528:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	3302      	adds	r3, #2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004540:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800454c:	3312      	adds	r3, #18
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800455c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800456c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004570:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004578:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004582:	4293      	cmp	r3, r2
 8004584:	d906      	bls.n	8004594 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800458c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004590:	2200      	movs	r2, #0
 8004592:	801a      	strh	r2, [r3, #0]
	//}
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80045ac:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045b6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80045c2:	3322      	adds	r3, #34	; 0x22
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045d2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80045de:	3352      	adds	r3, #82	; 0x52
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045fe:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004602:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800460a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	f241 726f 	movw	r2, #5999	; 0x176f
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800461e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004622:	2200      	movs	r2, #0
 8004624:	801a      	strh	r2, [r3, #0]
	//}
}
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3308      	adds	r3, #8
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004658:	3348      	adds	r3, #72	; 0x48
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	2201      	movs	r2, #1
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	68b8      	ldr	r0, [r7, #8]
 8004680:	f7fc ffc0 	bl	8001604 <sd_write_array_float>
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	2201      	movs	r2, #1
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	68b8      	ldr	r0, [r7, #8]
 80046a8:	f7fc ffac 	bl	8001604 <sd_write_array_float>
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f103 0208 	add.w	r2, r3, #8
 80046c8:	2300      	movs	r3, #0
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	68b8      	ldr	r0, [r7, #8]
 80046d6:	f7fc ff95 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80046e0:	3348      	adds	r3, #72	; 0x48
 80046e2:	2200      	movs	r2, #0
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	f241 7270 	movw	r2, #6000	; 0x1770
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f7fc ff89 	bl	8001604 <sd_write_array_float>
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800470e:	3388      	adds	r3, #136	; 0x88
 8004710:	2200      	movs	r2, #0
 8004712:	9200      	str	r2, [sp, #0]
 8004714:	f241 7270 	movw	r2, #6000	; 0x1770
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f7fc ff72 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004726:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800472a:	2200      	movs	r2, #0
 800472c:	9200      	str	r2, [sp, #0]
 800472e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f7fc ff65 	bl	8001604 <sd_write_array_float>
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3308      	adds	r3, #8
 8004754:	f241 7270 	movw	r2, #6000	; 0x1770
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	68b8      	ldr	r0, [r7, #8]
 800475c:	f7fc ffb8 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004766:	3348      	adds	r3, #72	; 0x48
 8004768:	f241 7270 	movw	r2, #6000	; 0x1770
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f7fc ffae 	bl	80016d0 <sd_read_array_float>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 800477c:	b480      	push	{r7}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800478a:	3388      	adds	r3, #136	; 0x88
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004798:	3340      	adds	r3, #64	; 0x40
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d009      	beq.n	80047b8 <_ZN6Logger10resetLogs2Ev+0x3c>
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	617b      	str	r3, [r7, #20]
		log = 0;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	3304      	adds	r3, #4
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	e7f1      	b.n	800479c <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80047be:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80047ce:	3340      	adds	r3, #64	; 0x40
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d009      	beq.n	80047ee <_ZN6Logger10resetLogs2Ev+0x72>
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	60bb      	str	r3, [r7, #8]
		log = 0;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	3304      	adds	r3, #4
 80047ea:	623b      	str	r3, [r7, #32]
 80047ec:	e7f1      	b.n	80047d2 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047f4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80047f8:	2200      	movs	r2, #0
 80047fa:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004802:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004806:	2200      	movs	r2, #0
 8004808:	801a      	strh	r2, [r3, #0]
}
 800480a:	bf00      	nop
 800480c:	372c      	adds	r7, #44	; 0x2c
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004824:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004828:	2200      	movs	r2, #0
 800482a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004832:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004836:	2200      	movs	r2, #0
 8004838:	801a      	strh	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004854:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004858:	2201      	movs	r2, #1
 800485a:	701a      	strb	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004876:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	805a      	strh	r2, [r3, #2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZN5Motor4initEv>:

void Motor::init()
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80048b4:	2108      	movs	r1, #8
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <_ZN5Motor4initEv+0x20>)
 80048b8:	f009 fcd6 	bl	800e268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80048bc:	210c      	movs	r1, #12
 80048be:	4803      	ldr	r0, [pc, #12]	; (80048cc <_ZN5Motor4initEv+0x20>)
 80048c0:	f009 fcd2 	bl	800e268 <HAL_TIM_PWM_Start>

}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	2003f880 	.word	0x2003f880

080048d0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da0d      	bge.n	80048fe <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80048e2:	2200      	movs	r2, #0
 80048e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048e8:	481f      	ldr	r0, [pc, #124]	; (8004968 <_ZN5Motor9motorCtrlEv+0x98>)
 80048ea:	f005 fda3 	bl	800a434 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	425b      	negs	r3, r3
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	81fb      	strh	r3, [r7, #14]
 80048fc:	e00a      	b.n	8004914 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80048fe:	2201      	movs	r2, #1
 8004900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004904:	4818      	ldr	r0, [pc, #96]	; (8004968 <_ZN5Motor9motorCtrlEv+0x98>)
 8004906:	f005 fd95 	bl	800a434 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004910:	b29b      	uxth	r3, r3
 8004912:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800491a:	2b00      	cmp	r3, #0
 800491c:	da0d      	bge.n	800493a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800491e:	2201      	movs	r2, #1
 8004920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004924:	4810      	ldr	r0, [pc, #64]	; (8004968 <_ZN5Motor9motorCtrlEv+0x98>)
 8004926:	f005 fd85 	bl	800a434 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004930:	b29b      	uxth	r3, r3
 8004932:	425b      	negs	r3, r3
 8004934:	b29b      	uxth	r3, r3
 8004936:	81bb      	strh	r3, [r7, #12]
 8004938:	e00a      	b.n	8004950 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800493a:	2200      	movs	r2, #0
 800493c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004940:	4809      	ldr	r0, [pc, #36]	; (8004968 <_ZN5Motor9motorCtrlEv+0x98>)
 8004942:	f005 fd77 	bl	800a434 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800494c:	b29b      	uxth	r3, r3
 800494e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004950:	89fa      	ldrh	r2, [r7, #14]
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004958:	89ba      	ldrh	r2, [r7, #12]
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <_ZN5Motor9motorCtrlEv+0x9c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40020c00 	.word	0x40020c00
 800496c:	2003f880 	.word	0x2003f880

08004970 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6178      	str	r0, [r7, #20]
 8004978:	ed87 0b02 	vstr	d0, [r7, #8]
 800497c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <_ZN5Motor8setRatioEdd+0xd8>)
 8004986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800498a:	f7fc f8dd 	bl	8000b48 <__aeabi_dcmpgt>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <_ZN5Motor8setRatioEdd+0x30>
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	4c2b      	ldr	r4, [pc, #172]	; (8004a48 <_ZN5Motor8setRatioEdd+0xd8>)
 800499a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800499e:	e00e      	b.n	80049be <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <_ZN5Motor8setRatioEdd+0xdc>)
 80049a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049aa:	f7fc f8af 	bl	8000b0c <__aeabi_dcmplt>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <_ZN5Motor8setRatioEdd+0x4e>
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	4c24      	ldr	r4, [pc, #144]	; (8004a4c <_ZN5Motor8setRatioEdd+0xdc>)
 80049ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <_ZN5Motor8setRatioEdd+0xd8>)
 80049c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c8:	f7fc f8be 	bl	8000b48 <__aeabi_dcmpgt>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <_ZN5Motor8setRatioEdd+0x6e>
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	4c1c      	ldr	r4, [pc, #112]	; (8004a48 <_ZN5Motor8setRatioEdd+0xd8>)
 80049d8:	e9c7 3400 	strd	r3, r4, [r7]
 80049dc:	e00e      	b.n	80049fc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <_ZN5Motor8setRatioEdd+0xdc>)
 80049e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e8:	f7fc f890 	bl	8000b0c <__aeabi_dcmplt>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <_ZN5Motor8setRatioEdd+0x8c>
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	4c15      	ldr	r4, [pc, #84]	; (8004a4c <_ZN5Motor8setRatioEdd+0xdc>)
 80049f8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <_ZN5Motor8setRatioEdd+0xe0>)
 8004a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a06:	f7fb fe0f 	bl	8000628 <__aeabi_dmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	4621      	mov	r1, r4
 8004a12:	f7fc f8b9 	bl	8000b88 <__aeabi_d2iz>
 8004a16:	4603      	mov	r3, r0
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <_ZN5Motor8setRatioEdd+0xe0>)
 8004a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a28:	f7fb fdfe 	bl	8000628 <__aeabi_dmul>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	4618      	mov	r0, r3
 8004a32:	4621      	mov	r1, r4
 8004a34:	f7fc f8a8 	bl	8000b88 <__aeabi_d2iz>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	805a      	strh	r2, [r3, #2]

}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd90      	pop	{r4, r7, pc}
 8004a48:	3ff00000 	.word	0x3ff00000
 8004a4c:	bff00000 	.word	0xbff00000
 8004a50:	409c2000 	.word	0x409c2000

08004a54 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004a54:	b490      	push	{r4, r7}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f04f 0400 	mov.w	r4, #0
 8004a6c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	f04f 0400 	mov.w	r4, #0
 8004a7a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	f04f 0400 	mov.w	r4, #0
 8004a88:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	f04f 0400 	mov.w	r4, #0
 8004aa4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	609a      	str	r2, [r3, #8]
}
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc90      	pop	{r4, r7}
 8004ac4:	4770      	bx	lr
	...

08004ac8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd f84e 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004adc:	ee10 3a10 	vmov	r3, s0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fb fd49 	bl	8000578 <__aeabi_f2d>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fc fc9c 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004af8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004afc:	a376      	add	r3, pc, #472	; (adr r3, 8004cd8 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b06:	f7fb fd8f 	bl	8000628 <__aeabi_dmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fb fd2c 	bl	8000578 <__aeabi_f2d>
 8004b20:	4682      	mov	sl, r0
 8004b22:	468b      	mov	fp, r1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b38:	f7fb fea0 	bl	800087c <__aeabi_ddiv>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	f7fb fbba 	bl	80002bc <__adddf3>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	ec43 2b17 	vmov	d7, r2, r3
 8004b50:	eeb0 0a47 	vmov.f32	s0, s14
 8004b54:	eef0 0a67 	vmov.f32	s1, s15
 8004b58:	f00e feca 	bl	80138f0 <cos>
 8004b5c:	ec53 2b10 	vmov	r2, r3, d0
 8004b60:	4650      	mov	r0, sl
 8004b62:	4659      	mov	r1, fp
 8004b64:	f7fb fd60 	bl	8000628 <__aeabi_dmul>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7fb fba4 	bl	80002bc <__adddf3>
 8004b74:	4603      	mov	r3, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7fb fcf7 	bl	8000578 <__aeabi_f2d>
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ba2:	f7fb fe6b 	bl	800087c <__aeabi_ddiv>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb fb85 	bl	80002bc <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	ec43 2b17 	vmov	d7, r2, r3
 8004bba:	eeb0 0a47 	vmov.f32	s0, s14
 8004bbe:	eef0 0a67 	vmov.f32	s1, s15
 8004bc2:	f00e fed9 	bl	8013978 <sin>
 8004bc6:	ec53 2b10 	vmov	r2, r3, d0
 8004bca:	4650      	mov	r0, sl
 8004bcc:	4659      	mov	r1, fp
 8004bce:	f7fb fd2b 	bl	8000628 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fb6f 	bl	80002bc <__adddf3>
 8004bde:	4603      	mov	r3, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f7fb fb60 	bl	80002bc <__adddf3>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004c12:	eeb0 0a47 	vmov.f32	s0, s14
 8004c16:	eef0 0a67 	vmov.f32	s1, s15
 8004c1a:	f00e fe69 	bl	80138f0 <cos>
 8004c1e:	ec51 0b10 	vmov	r0, r1, d0
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004c28:	f7fb fcfe 	bl	8000628 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb fb42 	bl	80002bc <__adddf3>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	ed93 7b08 	vldr	d7, [r3, #32]
 8004c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c52:	eef0 0a67 	vmov.f32	s1, s15
 8004c56:	f00e fe8f 	bl	8013978 <sin>
 8004c5a:	ec51 0b10 	vmov	r0, r1, d0
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004c64:	f7fb fce0 	bl	8000628 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fb24 	bl	80002bc <__adddf3>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004c84:	4618      	mov	r0, r3
 8004c86:	4621      	mov	r1, r4
 8004c88:	f7fb ffc6 	bl	8000c18 <__aeabi_d2f>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <_ZN8Odometry12calcPotitionEv+0x204>)
 8004c90:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004c98:	4618      	mov	r0, r3
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	f7fb ffbc 	bl	8000c18 <__aeabi_d2f>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004ca4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004cac:	4618      	mov	r0, r3
 8004cae:	4621      	mov	r1, r4
 8004cb0:	f7fb ffb2 	bl	8000c18 <__aeabi_d2f>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc4:	f3af 8000 	nop.w
 8004cc8:	405b8000 	.word	0x405b8000
 8004ccc:	20000294 	.word	0x20000294
 8004cd0:	20000298 	.word	0x20000298
 8004cd4:	2000029c 	.word	0x2000029c
 8004cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004cdc:	3f50624d 	.word	0x3f50624d

08004ce0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff feed 	bl	8004ac8 <_ZN8Odometry12calcPotitionEv>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004cf6:	b490      	push	{r4, r7}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
	return theta_;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004d04:	ec44 3b17 	vmov	d7, r3, r4
}
 8004d08:	eeb0 0a47 	vmov.f32	s0, s14
 8004d0c:	eef0 0a67 	vmov.f32	s1, s15
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc90      	pop	{r4, r7}
 8004d16:	4770      	bx	lr

08004d18 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004d18:	b490      	push	{r4, r7}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	f04f 0400 	mov.w	r4, #0
 8004d2a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	f04f 0400 	mov.w	r4, #0
 8004d46:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc90      	pop	{r4, r7}
 8004d52:	4770      	bx	lr

08004d54 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004d54:	b490      	push	{r4, r7}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f04f 0400 	mov.w	r4, #0
 8004d7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d92:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004d96:	2200      	movs	r2, #0
 8004d98:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <_ZN13PathFollowingC1Ev+0xec>)
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	f04f 0400 	mov.w	r4, #0
 8004da4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <_ZN13PathFollowingC1Ev+0xec>)
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	f04f 0400 	mov.w	r4, #0
 8004db2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004db6:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <_ZN13PathFollowingC1Ev+0xec>)
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f04f 0400 	mov.w	r4, #0
 8004dc0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f04f 0400 	mov.w	r4, #0
 8004dce:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	f04f 0400 	mov.w	r4, #0
 8004ddc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004de0:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	f04f 0400 	mov.w	r4, #0
 8004df8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f04f 0400 	mov.w	r4, #0
 8004e06:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <_ZN13PathFollowingC1Ev+0xf0>)
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	f04f 0400 	mov.w	r4, #0
 8004e14:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004e18:	4a0b      	ldr	r2, [pc, #44]	; (8004e48 <_ZN13PathFollowingC1Ev+0xf4>)
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	f04f 0400 	mov.w	r4, #0
 8004e22:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004e26:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <_ZN13PathFollowingC1Ev+0xf4>)
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc90      	pop	{r4, r7}
 8004e3e:	4770      	bx	lr
 8004e40:	2003fd80 	.word	0x2003fd80
 8004e44:	2003fd10 	.word	0x2003fd10
 8004e48:	2003fd70 	.word	0x2003fd70

08004e4c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004e54:	f001 fc92 	bl	800677c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004e58:	f107 0318 	add.w	r3, r7, #24
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4915      	ldr	r1, [pc, #84]	; (8004eb4 <_ZN13PathFollowing4initEv+0x68>)
 8004e60:	4815      	ldr	r0, [pc, #84]	; (8004eb8 <_ZN13PathFollowing4initEv+0x6c>)
 8004e62:	f7fc fc7b 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004e66:	f107 0310 	add.w	r3, r7, #16
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4913      	ldr	r1, [pc, #76]	; (8004ebc <_ZN13PathFollowing4initEv+0x70>)
 8004e6e:	4812      	ldr	r0, [pc, #72]	; (8004eb8 <_ZN13PathFollowing4initEv+0x6c>)
 8004e70:	f7fc fc74 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4911      	ldr	r1, [pc, #68]	; (8004ec0 <_ZN13PathFollowing4initEv+0x74>)
 8004e7c:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <_ZN13PathFollowing4initEv+0x6c>)
 8004e7e:	f7fc fc6d 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004e82:	ed97 7b06 	vldr	d7, [r7, #24]
 8004e86:	ed97 6b04 	vldr	d6, [r7, #16]
 8004e8a:	ed97 5b02 	vldr	d5, [r7, #8]
 8004e8e:	eeb0 2a45 	vmov.f32	s4, s10
 8004e92:	eef0 2a65 	vmov.f32	s5, s11
 8004e96:	eeb0 1a46 	vmov.f32	s2, s12
 8004e9a:	eef0 1a66 	vmov.f32	s3, s13
 8004e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8004ea2:	eef0 0a67 	vmov.f32	s1, s15
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f80c 	bl	8004ec4 <_ZN13PathFollowing7setGainEddd>
}
 8004eac:	bf00      	nop
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	08018f54 	.word	0x08018f54
 8004eb8:	08018f5c 	.word	0x08018f5c
 8004ebc:	08018f64 	.word	0x08018f64
 8004ec0:	08018f6c 	.word	0x08018f6c

08004ec4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004ec4:	b490      	push	{r4, r7}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	61f8      	str	r0, [r7, #28]
 8004ecc:	ed87 0b04 	vstr	d0, [r7, #16]
 8004ed0:	ed87 1b02 	vstr	d1, [r7, #8]
 8004ed4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004eda:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004ede:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004ee2:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004ee4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004ee8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ef2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004ef6:	bf00      	nop
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc90      	pop	{r4, r7}
 8004efe:	4770      	bx	lr
 8004f00:	2003fd80 	.word	0x2003fd80

08004f04 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004f0c:	2088      	movs	r0, #136	; 0x88
 8004f0e:	f7fc ff76 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004f12:	2080      	movs	r0, #128	; 0x80
 8004f14:	f7fc ff73 	bl	8001dfe <INA260_init>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004f28:	2188      	movs	r1, #136	; 0x88
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	f7fc ff04 	bl	8001d38 <INA260_read>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb fb0e 	bl	8000554 <__aeabi_i2d>
 8004f38:	a30c      	add	r3, pc, #48	; (adr r3, 8004f6c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f7fb fb73 	bl	8000628 <__aeabi_dmul>
 8004f42:	4603      	mov	r3, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	4618      	mov	r0, r3
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f7fb fe65 	bl	8000c18 <__aeabi_d2f>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a03      	ldr	r2, [pc, #12]	; (8004f68 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004f5a:	6013      	str	r3, [r2, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	f3af 8000 	nop.w
 8004f68:	200002a0 	.word	0x200002a0
 8004f6c:	47ae147b 	.word	0x47ae147b
 8004f70:	3f547ae1 	.word	0x3f547ae1

08004f74 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	ee07 3a90 	vmov	s15, r3

}
 8004f84:	eeb0 0a67 	vmov.f32	s0, s15
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4822      	ldr	r0, [pc, #136]	; (800502c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004fa4:	f005 fa2e 	bl	800a404 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004fc0:	2108      	movs	r1, #8
 8004fc2:	481a      	ldr	r0, [pc, #104]	; (800502c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004fc4:	f005 fa1e 	bl	800a404 <HAL_GPIO_ReadPin>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	4812      	ldr	r0, [pc, #72]	; (800502c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004fe4:	f005 fa0e 	bl	800a404 <HAL_GPIO_ReadPin>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	480a      	ldr	r0, [pc, #40]	; (800502c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005004:	f005 f9fe 	bl	800a404 <HAL_GPIO_ReadPin>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	f043 0308 	orr.w	r3, r3, #8
 800501e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005020:	89fb      	ldrh	r3, [r7, #14]

}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40020c00 	.word	0x40020c00

08005030 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	805a      	strh	r2, [r3, #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	809a      	strh	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	719a      	strb	r2, [r3, #6]
{

}
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	799b      	ldrb	r3, [r3, #6]
 800506c:	f083 0301 	eor.w	r3, r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80c7 	beq.w	8005206 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005078:	4b65      	ldr	r3, [pc, #404]	; (8005210 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f083 0301 	eor.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d027      	beq.n	80050d6 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005086:	2104      	movs	r1, #4
 8005088:	4862      	ldr	r0, [pc, #392]	; (8005214 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800508a:	f005 f9bb 	bl	800a404 <HAL_GPIO_ReadPin>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800509e:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80050ac:	4b5a      	ldr	r3, [pc, #360]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80050b2:	4b59      	ldr	r3, [pc, #356]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d93f      	bls.n	800513a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80050c8:	4b51      	ldr	r3, [pc, #324]	; (8005210 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80050ce:	4b52      	ldr	r3, [pc, #328]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e031      	b.n	800513a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 80050d6:	4b4e      	ldr	r3, [pc, #312]	; (8005210 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02d      	beq.n	800513a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80050de:	2104      	movs	r1, #4
 80050e0:	484c      	ldr	r0, [pc, #304]	; (8005214 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80050e2:	f005 f98f 	bl	800a404 <HAL_GPIO_ReadPin>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80050f6:	4b48      	ldr	r3, [pc, #288]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	4b46      	ldr	r3, [pc, #280]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e002      	b.n	800510a <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8005104:	4b44      	ldr	r3, [pc, #272]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005106:	2200      	movs	r2, #0
 8005108:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800510a:	4b43      	ldr	r3, [pc, #268]	; (8005218 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d913      	bls.n	800513a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8005120:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	889b      	ldrh	r3, [r3, #4]
 800512a:	3301      	adds	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	889a      	ldrh	r2, [r3, #4]
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005138:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800513a:	4b39      	ldr	r3, [pc, #228]	; (8005220 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f083 0301 	eor.w	r3, r3, #1
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d027      	beq.n	8005198 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800514c:	4835      	ldr	r0, [pc, #212]	; (8005224 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800514e:	f005 f959 	bl	800a404 <HAL_GPIO_ReadPin>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8005162:	4b31      	ldr	r3, [pc, #196]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	e002      	b.n	8005176 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005170:	4b2d      	ldr	r3, [pc, #180]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005172:	2200      	movs	r2, #0
 8005174:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d90c      	bls.n	8005198 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800518c:	4b24      	ldr	r3, [pc, #144]	; (8005220 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005194:	2200      	movs	r2, #0
 8005196:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02e      	beq.n	80051fe <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80051a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051a4:	481f      	ldr	r0, [pc, #124]	; (8005224 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80051a6:	f005 f92d 	bl	800a404 <HAL_GPIO_ReadPin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d006      	beq.n	80051c8 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	4b19      	ldr	r3, [pc, #100]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e002      	b.n	80051ce <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80051c8:	4b17      	ldr	r3, [pc, #92]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80051ce:	4b16      	ldr	r3, [pc, #88]	; (8005228 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d913      	bls.n	80051fe <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	f083 0302 	eor.w	r3, r3, #2
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80051e4:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	885b      	ldrh	r3, [r3, #2]
 80051ee:	3301      	adds	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	885a      	ldrh	r2, [r3, #2]
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80051fc:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	881a      	ldrh	r2, [r3, #0]
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8005204:	801a      	strh	r2, [r3, #0]
	}

}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200002aa 	.word	0x200002aa
 8005214:	40021000 	.word	0x40021000
 8005218:	200002ae 	.word	0x200002ae
 800521c:	200002a8 	.word	0x200002a8
 8005220:	200002ab 	.word	0x200002ab
 8005224:	40020c00 	.word	0x40020c00
 8005228:	200002ac 	.word	0x200002ac
 800522c:	200002a6 	.word	0x200002a6
 8005230:	200002a4 	.word	0x200002a4

08005234 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	return status_;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	881b      	ldrh	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <_ZN10SideSensor16getWhiteLineCntLEv>:

uint16_t SideSensor::getWhiteLineCntL()
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	return white_line_cnt_l_;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	885b      	ldrh	r3, [r3, #2]
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	809a      	strh	r2, [r3, #4]
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	719a      	strb	r2, [r3, #6]
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	719a      	strb	r2, [r3, #6]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	799b      	ldrb	r3, [r3, #6]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a10      	ldr	r2, [pc, #64]	; (8005320 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80052e0:	3308      	adds	r3, #8
 80052e2:	4611      	mov	r1, r2
 80052e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052e8:	4618      	mov	r0, r3
 80052ea:	f00f fb81 	bl	80149f0 <memcpy>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08018f90 	.word	0x08018f90

08005324 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	ed97 0a00 	vldr	s0, [r7]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff f86c 	bl	8004420 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005352:	eeb0 0a67 	vmov.f32	s0, s15
 8005356:	4610      	mov	r0, r2
 8005358:	f7ff f89e 	bl	8004498 <_ZN6Logger9storeLog2Ef>
	}

}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a07      	ldr	r2, [pc, #28]	; (8005390 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8005372:	4908      	ldr	r1, [pc, #32]	; (8005394 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f976 	bl	8004666 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a06      	ldr	r2, [pc, #24]	; (8005398 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff f982 	bl	800468c <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	08019184 	.word	0x08019184
 8005394:	08019190 	.word	0x08019190
 8005398:	0801919c 	.word	0x0801919c

0800539c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d046      	beq.n	800543c <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3204      	adds	r2, #4
 80053c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80053dc:	3301      	adds	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80053ee:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80053f6:	2bf9      	cmp	r3, #249	; 0xf9
 80053f8:	d903      	bls.n	8005402 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	22fa      	movs	r2, #250	; 0xfa
 80053fe:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685c      	ldr	r4, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb f8b3 	bl	8000578 <__aeabi_f2d>
 8005412:	4605      	mov	r5, r0
 8005414:	460e      	mov	r6, r1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800541c:	eef1 7a67 	vneg.f32	s15, s15
 8005420:	ee17 3a90 	vmov	r3, s15
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb f8a7 	bl	8000578 <__aeabi_f2d>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	ec43 2b11 	vmov	d1, r2, r3
 8005432:	ec46 5b10 	vmov	d0, r5, r6
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fa9a 	bl	8004970 <_ZN5Motor8setRatioEdd>

	}

}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005444:	200002b0 	.word	0x200002b0

08005448 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f9e6 	bl	8004846 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	0000      	movs	r0, r0
 800548c:	0000      	movs	r0, r0
	...

08005490 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff f9e3 	bl	8004868 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80054d0 <_ZN20SystemIdentification4stopEv+0x40>
 80054ba:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80054d0 <_ZN20SystemIdentification4stopEv+0x40>
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fa56 	bl	8004970 <_ZN5Motor8setRatioEdd>
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	f3af 8000 	nop.w
	...

080054d8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	615a      	str	r2, [r3, #20]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	619a      	str	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	61da      	str	r2, [r3, #28]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	621a      	str	r2, [r3, #32]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	f107 020c 	add.w	r2, r7, #12
 8005580:	f107 0110 	add.w	r1, r7, #16
 8005584:	4618      	mov	r0, r3
 8005586:	f7fb ff3f 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800558a:	ed97 7a04 	vldr	s14, [r7, #16]
 800558e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005596:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800559a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800559e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80055a2:	6978      	ldr	r0, [r7, #20]
 80055a4:	f7fa ffe8 	bl	8000578 <__aeabi_f2d>
 80055a8:	a30b      	add	r3, pc, #44	; (adr r3, 80055d8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fb f83b 	bl	8000628 <__aeabi_dmul>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	4618      	mov	r0, r3
 80055b8:	4621      	mov	r1, r4
 80055ba:	f7fb fb2d 	bl	8000c18 <__aeabi_d2f>
 80055be:	4602      	mov	r2, r0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	ee07 3a90 	vmov	s15, r3
}
 80055cc:	eeb0 0a67 	vmov.f32	s0, s15
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	1ab1d998 	.word	0x1ab1d998
 80055dc:	3f7830b5 	.word	0x3f7830b5

080055e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	ed93 7a00 	vldr	s14, [r3]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80055f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005606:	4b48      	ldr	r3, [pc, #288]	; (8005728 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	edd3 7a04 	vldr	s15, [r3, #16]
 800561c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005624:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005628:	4b3f      	ldr	r3, [pc, #252]	; (8005728 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa ffa3 	bl	8000578 <__aeabi_f2d>
 8005632:	4604      	mov	r4, r0
 8005634:	460d      	mov	r5, r1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	ed93 7a06 	vldr	s14, [r3, #24]
 800563c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005644:	ee17 0a90 	vmov	r0, s15
 8005648:	f7fa ff96 	bl	8000578 <__aeabi_f2d>
 800564c:	a334      	add	r3, pc, #208	; (adr r3, 8005720 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fa ffe9 	bl	8000628 <__aeabi_dmul>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4620      	mov	r0, r4
 800565c:	4629      	mov	r1, r5
 800565e:	f7fa fe2d 	bl	80002bc <__adddf3>
 8005662:	4603      	mov	r3, r0
 8005664:	460c      	mov	r4, r1
 8005666:	4618      	mov	r0, r3
 8005668:	4621      	mov	r1, r4
 800566a:	f7fb fad5 	bl	8000c18 <__aeabi_d2f>
 800566e:	4602      	mov	r2, r0
 8005670:	4b2d      	ldr	r3, [pc, #180]	; (8005728 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005672:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	ed93 7a05 	vldr	s14, [r3, #20]
 800567a:	4b2c      	ldr	r3, [pc, #176]	; (800572c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800567c:	edd3 7a00 	vldr	s15, [r3]
 8005680:	edd7 6a05 	vldr	s13, [r7, #20]
 8005684:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568c:	ee17 0a90 	vmov	r0, s15
 8005690:	f7fa ff72 	bl	8000578 <__aeabi_f2d>
 8005694:	a322      	add	r3, pc, #136	; (adr r3, 8005720 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fb f8ef 	bl	800087c <__aeabi_ddiv>
 800569e:	4603      	mov	r3, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	4618      	mov	r0, r3
 80056a4:	4621      	mov	r1, r4
 80056a6:	f7fb fab7 	bl	8000c18 <__aeabi_d2f>
 80056aa:	4603      	mov	r3, r0
 80056ac:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80056ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80056b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80056b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80056d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80056d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056da:	ee17 0a90 	vmov	r0, s15
 80056de:	f7fa ff4b 	bl	8000578 <__aeabi_f2d>
 80056e2:	4605      	mov	r5, r0
 80056e4:	460e      	mov	r6, r1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80056ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80056f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f4:	ee17 0a90 	vmov	r0, s15
 80056f8:	f7fa ff3e 	bl	8000578 <__aeabi_f2d>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	ec43 2b11 	vmov	d1, r2, r3
 8005704:	ec46 5b10 	vmov	d0, r5, r6
 8005708:	4620      	mov	r0, r4
 800570a:	f7ff f931 	bl	8004970 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800570e:	4a07      	ldr	r2, [pc, #28]	; (800572c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571c:	f3af 8000 	nop.w
 8005720:	d2f1a9fc 	.word	0xd2f1a9fc
 8005724:	3f50624d 	.word	0x3f50624d
 8005728:	200002b8 	.word	0x200002b8
 800572c:	200002b4 	.word	0x200002b4

08005730 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	ed87 0a02 	vstr	s0, [r7, #8]
 800573c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	605a      	str	r2, [r3, #4]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	ed87 0a02 	vstr	s0, [r7, #8]
 8005764:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	ed87 0a02 	vstr	s0, [r7, #8]
 800578c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005790:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	615a      	str	r2, [r3, #20]
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80057be:	edc7 0a01 	vstr	s1, [r7, #4]
 80057c2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff febf 	bl	8005570 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff feef 	bl	80055e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005860 <_ZN12VelocityCtrl4stopEv+0x30>
 8005848:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005860 <_ZN12VelocityCtrl4stopEv+0x30>
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff f88f 	bl	8004970 <_ZN5Motor8setRatioEdd>

}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
	...

08005868 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	ee07 3a90 	vmov	s15, r3
}
 8005878:	eeb0 0a67 	vmov.f32	s0, s15
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 800589a:	f001 fe27 	bl	80074ec <cppFlip100ns>

		tim7_timer++;
 800589e:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80058a6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80058a8:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d902      	bls.n	80058b8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80058c2:	f001 fdc9 	bl	8007458 <cppFlip1ms>

		tim6_timer++;
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a14      	ldr	r2, [pc, #80]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058ce:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a10      	ldr	r2, [pc, #64]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d902      	bls.n	80058e0 <HAL_TIM_PeriodElapsedCallback+0x58>
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10e      	bne.n	8005908 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80058ea:	f001 fe09 	bl	8007500 <cppFlip10ms>

		tim13_timer++;
 80058ee:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a0c      	ldr	r2, [pc, #48]	; (8005928 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058f6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a06      	ldr	r2, [pc, #24]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d902      	bls.n	8005908 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
	}

}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40001400 	.word	0x40001400
 8005914:	2003fa34 	.word	0x2003fa34
 8005918:	0001869f 	.word	0x0001869f
 800591c:	40001000 	.word	0x40001000
 8005920:	2003f9f0 	.word	0x2003f9f0
 8005924:	40001c00 	.word	0x40001c00
 8005928:	2003fa38 	.word	0x2003fa38

0800592c <init>:

void init()
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005930:	2201      	movs	r2, #1
 8005932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005936:	4808      	ldr	r0, [pc, #32]	; (8005958 <init+0x2c>)
 8005938:	f004 fd7c 	bl	800a434 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800593c:	4807      	ldr	r0, [pc, #28]	; (800595c <init+0x30>)
 800593e:	f008 fc44 	bl	800e1ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005942:	4807      	ldr	r0, [pc, #28]	; (8005960 <init+0x34>)
 8005944:	f008 fc41 	bl	800e1ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005948:	4806      	ldr	r0, [pc, #24]	; (8005964 <init+0x38>)
 800594a:	f008 fc3e 	bl	800e1ca <HAL_TIM_Base_Start_IT>

	cppInit();
 800594e:	f001 fce3 	bl	8007318 <cppInit>

	//path_following_initialize();

}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000
 800595c:	2003fb1c 	.word	0x2003fb1c
 8005960:	2003fcc0 	.word	0x2003fcc0
 8005964:	2003fa3c 	.word	0x2003fa3c

08005968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800596c:	f003 fa5a 	bl	8008e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005970:	f000 f82a 	bl	80059c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005974:	f000 fdbc 	bl	80064f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005978:	f000 fd8a 	bl	8006490 <MX_DMA_Init>
  MX_I2C2_Init();
 800597c:	f000 f9e8 	bl	8005d50 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005980:	f000 fa14 	bl	8005dac <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005984:	f000 fa32 	bl	8005dec <MX_SPI2_Init>
  MX_TIM1_Init();
 8005988:	f000 fa66 	bl	8005e58 <MX_TIM1_Init>
  MX_TIM4_Init();
 800598c:	f000 fb70 	bl	8006070 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005990:	f000 fc3c 	bl	800620c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005994:	f000 fd52 	bl	800643c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005998:	f00a fbea 	bl	8010170 <MX_FATFS_Init>
  MX_TIM6_Init();
 800599c:	f000 fbcc 	bl	8006138 <MX_TIM6_Init>
  MX_I2C1_Init();
 80059a0:	f000 f9a8 	bl	8005cf4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80059a4:	f000 fb00 	bl	8005fa8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80059a8:	f000 fc88 	bl	80062bc <MX_TIM10_Init>
  MX_TIM11_Init();
 80059ac:	f000 fcd4 	bl	8006358 <MX_TIM11_Init>
  MX_ADC2_Init();
 80059b0:	f000 f898 	bl	8005ae4 <MX_ADC2_Init>
  MX_TIM7_Init();
 80059b4:	f000 fbf6 	bl	80061a4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80059b8:	f000 fd1c 	bl	80063f4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80059bc:	f7ff ffb6 	bl	800592c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80059c0:	f001 fdb6 	bl	8007530 <cppLoop>
 80059c4:	e7fc      	b.n	80059c0 <main+0x58>
	...

080059c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b0a4      	sub	sp, #144	; 0x90
 80059cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80059d2:	2234      	movs	r2, #52	; 0x34
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f00f f815 	bl	8014a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	223c      	movs	r2, #60	; 0x3c
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f00f f806 	bl	8014a06 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <SystemClock_Config+0x114>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a36      	ldr	r2, [pc, #216]	; (8005adc <SystemClock_Config+0x114>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0a:	4b34      	ldr	r3, [pc, #208]	; (8005adc <SystemClock_Config+0x114>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <SystemClock_Config+0x118>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a30      	ldr	r2, [pc, #192]	; (8005ae0 <SystemClock_Config+0x118>)
 8005a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <SystemClock_Config+0x118>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a44:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a46:	2308      	movs	r3, #8
 8005a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005a4a:	23b4      	movs	r3, #180	; 0xb4
 8005a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a50:	2302      	movs	r3, #2
 8005a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005a56:	2308      	movs	r3, #8
 8005a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a66:	4618      	mov	r0, r3
 8005a68:	f006 f906 	bl	800bc78 <HAL_RCC_OscConfig>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005a72:	f000 fe7f 	bl	8006774 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a76:	f005 fc81 	bl	800b37c <HAL_PWREx_EnableOverDrive>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005a80:	f000 fe78 	bl	8006774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a84:	230f      	movs	r3, #15
 8005a86:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005aa0:	2105      	movs	r1, #5
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f005 fcba 	bl	800b41c <HAL_RCC_ClockConfig>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005aae:	f000 fe61 	bl	8006774 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005ab2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005ab6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005abc:	2300      	movs	r3, #0
 8005abe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f005 fe99 	bl	800b7fc <HAL_RCCEx_PeriphCLKConfig>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005ad0:	f000 fe50 	bl	8006774 <Error_Handler>
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3790      	adds	r7, #144	; 0x90
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40007000 	.word	0x40007000

08005ae4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005aea:	463b      	mov	r3, r7
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005af6:	4b7c      	ldr	r3, [pc, #496]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005af8:	4a7c      	ldr	r2, [pc, #496]	; (8005cec <MX_ADC2_Init+0x208>)
 8005afa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005afc:	4b7a      	ldr	r3, [pc, #488]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b02:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005b04:	4b78      	ldr	r3, [pc, #480]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005b0a:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005b10:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005b16:	4b74      	ldr	r3, [pc, #464]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b1e:	4b72      	ldr	r3, [pc, #456]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b24:	4b70      	ldr	r3, [pc, #448]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b26:	4a72      	ldr	r2, [pc, #456]	; (8005cf0 <MX_ADC2_Init+0x20c>)
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b2a:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005b30:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b32:	220e      	movs	r2, #14
 8005b34:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005b36:	4b6c      	ldr	r3, [pc, #432]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b3e:	4b6a      	ldr	r3, [pc, #424]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b44:	4868      	ldr	r0, [pc, #416]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b46:	f003 fa01 	bl	8008f4c <HAL_ADC_Init>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005b50:	f000 fe10 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b54:	230a      	movs	r3, #10
 8005b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005b5c:	2306      	movs	r3, #6
 8005b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b60:	463b      	mov	r3, r7
 8005b62:	4619      	mov	r1, r3
 8005b64:	4860      	ldr	r0, [pc, #384]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b66:	f003 fb45 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005b70:	f000 fe00 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005b74:	230b      	movs	r3, #11
 8005b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4859      	ldr	r0, [pc, #356]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b82:	f003 fb37 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005b8c:	f000 fdf2 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005b90:	230c      	movs	r3, #12
 8005b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005b94:	2303      	movs	r3, #3
 8005b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b98:	463b      	mov	r3, r7
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4852      	ldr	r0, [pc, #328]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005b9e:	f003 fb29 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005ba8:	f000 fde4 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005bac:	230d      	movs	r3, #13
 8005bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	484b      	ldr	r0, [pc, #300]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005bba:	f003 fb1b 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005bc4:	f000 fdd6 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005bcc:	2305      	movs	r3, #5
 8005bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4844      	ldr	r0, [pc, #272]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005bd6:	f003 fb0d 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005be0:	f000 fdc8 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005be4:	2301      	movs	r3, #1
 8005be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005be8:	2306      	movs	r3, #6
 8005bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bec:	463b      	mov	r3, r7
 8005bee:	4619      	mov	r1, r3
 8005bf0:	483d      	ldr	r0, [pc, #244]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005bf2:	f003 faff 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005bfc:	f000 fdba 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005c00:	2302      	movs	r3, #2
 8005c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005c04:	2307      	movs	r3, #7
 8005c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c08:	463b      	mov	r3, r7
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4836      	ldr	r0, [pc, #216]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c0e:	f003 faf1 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005c18:	f000 fdac 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005c20:	2308      	movs	r3, #8
 8005c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c24:	463b      	mov	r3, r7
 8005c26:	4619      	mov	r1, r3
 8005c28:	482f      	ldr	r0, [pc, #188]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c2a:	f003 fae3 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005c34:	f000 fd9e 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005c38:	2304      	movs	r3, #4
 8005c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005c3c:	2309      	movs	r3, #9
 8005c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c40:	463b      	mov	r3, r7
 8005c42:	4619      	mov	r1, r3
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c46:	f003 fad5 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005c50:	f000 fd90 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005c54:	2305      	movs	r3, #5
 8005c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005c58:	230a      	movs	r3, #10
 8005c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4821      	ldr	r0, [pc, #132]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c62:	f003 fac7 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005c6c:	f000 fd82 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005c70:	2306      	movs	r3, #6
 8005c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005c74:	230b      	movs	r3, #11
 8005c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c78:	463b      	mov	r3, r7
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	481a      	ldr	r0, [pc, #104]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c7e:	f003 fab9 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005c88:	f000 fd74 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005c8c:	2307      	movs	r3, #7
 8005c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005c90:	230c      	movs	r3, #12
 8005c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c94:	463b      	mov	r3, r7
 8005c96:	4619      	mov	r1, r3
 8005c98:	4813      	ldr	r0, [pc, #76]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005c9a:	f003 faab 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005ca4:	f000 fd66 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005ca8:	2308      	movs	r3, #8
 8005caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005cac:	230d      	movs	r3, #13
 8005cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005cb6:	f003 fa9d 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005cc0:	f000 fd58 	bl	8006774 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005cc4:	2309      	movs	r3, #9
 8005cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005cc8:	230e      	movs	r3, #14
 8005cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ccc:	463b      	mov	r3, r7
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <MX_ADC2_Init+0x204>)
 8005cd2:	f003 fa8f 	bl	80091f4 <HAL_ADC_ConfigChannel>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005cdc:	f000 fd4a 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2003f8c0 	.word	0x2003f8c0
 8005cec:	40012100 	.word	0x40012100
 8005cf0:	0f000001 	.word	0x0f000001

08005cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cf8:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <MX_I2C1_Init+0x54>)
 8005cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d00:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <MX_I2C1_Init+0x58>)
 8005d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d24:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d2c:	2280      	movs	r2, #128	; 0x80
 8005d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d30:	4804      	ldr	r0, [pc, #16]	; (8005d44 <MX_I2C1_Init+0x50>)
 8005d32:	f004 fb99 	bl	800a468 <HAL_I2C_Init>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d3c:	f000 fd1a 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d40:	bf00      	nop
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	2003f908 	.word	0x2003f908
 8005d48:	40005400 	.word	0x40005400
 8005d4c:	000186a0 	.word	0x000186a0

08005d50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d56:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <MX_I2C2_Init+0x54>)
 8005d58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d5c:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <MX_I2C2_Init+0x58>)
 8005d5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005d66:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005d86:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d8c:	4804      	ldr	r0, [pc, #16]	; (8005da0 <MX_I2C2_Init+0x50>)
 8005d8e:	f004 fb6b 	bl	800a468 <HAL_I2C_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005d98:	f000 fcec 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	2003f99c 	.word	0x2003f99c
 8005da4:	40005800 	.word	0x40005800
 8005da8:	000186a0 	.word	0x000186a0

08005dac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005db2:	4a0d      	ldr	r2, [pc, #52]	; (8005de8 <MX_SDIO_SD_Init+0x3c>)
 8005db4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005dc2:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005dc8:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <MX_SDIO_SD_Init+0x38>)
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	2003fb9c 	.word	0x2003fb9c
 8005de8:	40012c00 	.word	0x40012c00

08005dec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005df0:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <MX_SPI2_Init+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005dfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005e10:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005e16:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e20:	2228      	movs	r2, #40	; 0x28
 8005e22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e38:	220a      	movs	r2, #10
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e3c:	4804      	ldr	r0, [pc, #16]	; (8005e50 <MX_SPI2_Init+0x64>)
 8005e3e:	f007 fc45 	bl	800d6cc <HAL_SPI_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005e48:	f000 fc94 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e4c:	bf00      	nop
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	2003f7e8 	.word	0x2003f7e8
 8005e54:	40003800 	.word	0x40003800

08005e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b09a      	sub	sp, #104	; 0x68
 8005e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e62:	2224      	movs	r2, #36	; 0x24
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00e fdcd 	bl	8014a06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e76:	f107 0320 	add.w	r3, r7, #32
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	615a      	str	r2, [r3, #20]
 8005e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00e fdb8 	bl	8014a06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005e96:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005e98:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <MX_TIM1_Init+0x14c>)
 8005e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005e9c:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb0:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005eb6:	4b3a      	ldr	r3, [pc, #232]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ebc:	4b38      	ldr	r3, [pc, #224]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ec2:	4837      	ldr	r0, [pc, #220]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005ec4:	f008 f9a5 	bl	800e212 <HAL_TIM_PWM_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005ece:	f000 fc51 	bl	8006774 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005eda:	2301      	movs	r3, #1
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005eea:	2301      	movs	r3, #1
 8005eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005ef6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005efa:	4619      	mov	r1, r3
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005efe:	f008 f9f1 	bl	800e2e4 <HAL_TIM_Encoder_Init>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005f08:	f000 fc34 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005f14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4821      	ldr	r0, [pc, #132]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005f1c:	f008 ff18 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005f26:	f000 fc25 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f2a:	2360      	movs	r3, #96	; 0x60
 8005f2c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f36:	2300      	movs	r3, #0
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f46:	f107 0320 	add.w	r3, r7, #32
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4814      	ldr	r0, [pc, #80]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005f50:	f008 fb9a 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005f5a:	f000 fc0b 	bl	8006774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4807      	ldr	r0, [pc, #28]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005f82:	f008 ff61 	bl	800ee48 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005f8c:	f000 fbf2 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005f90:	4803      	ldr	r0, [pc, #12]	; (8005fa0 <MX_TIM1_Init+0x148>)
 8005f92:	f000 ffdf 	bl	8006f54 <HAL_TIM_MspPostInit>

}
 8005f96:	bf00      	nop
 8005f98:	3768      	adds	r7, #104	; 0x68
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	2003fb5c 	.word	0x2003fb5c
 8005fa4:	40010000 	.word	0x40010000

08005fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fae:	f107 0320 	add.w	r3, r7, #32
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	605a      	str	r2, [r3, #4]
 8005fc0:	609a      	str	r2, [r3, #8]
 8005fc2:	60da      	str	r2, [r3, #12]
 8005fc4:	611a      	str	r2, [r3, #16]
 8005fc6:	615a      	str	r2, [r3, #20]
 8005fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005fca:	4b27      	ldr	r3, [pc, #156]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fcc:	4a27      	ldr	r2, [pc, #156]	; (800606c <MX_TIM3_Init+0xc4>)
 8005fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005fdc:	4b22      	ldr	r3, [pc, #136]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fe4:	4b20      	ldr	r3, [pc, #128]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fea:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ff0:	481d      	ldr	r0, [pc, #116]	; (8006068 <MX_TIM3_Init+0xc0>)
 8005ff2:	f008 f90e 	bl	800e212 <HAL_TIM_PWM_Init>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005ffc:	f000 fbba 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006000:	2300      	movs	r3, #0
 8006002:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006004:	2300      	movs	r3, #0
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006008:	f107 0320 	add.w	r3, r7, #32
 800600c:	4619      	mov	r1, r3
 800600e:	4816      	ldr	r0, [pc, #88]	; (8006068 <MX_TIM3_Init+0xc0>)
 8006010:	f008 fe9e 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800601a:	f000 fbab 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800601e:	2360      	movs	r3, #96	; 0x60
 8006020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800602e:	1d3b      	adds	r3, r7, #4
 8006030:	2200      	movs	r2, #0
 8006032:	4619      	mov	r1, r3
 8006034:	480c      	ldr	r0, [pc, #48]	; (8006068 <MX_TIM3_Init+0xc0>)
 8006036:	f008 fb27 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006040:	f000 fb98 	bl	8006774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	2204      	movs	r2, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4807      	ldr	r0, [pc, #28]	; (8006068 <MX_TIM3_Init+0xc0>)
 800604c:	f008 fb1c 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006056:	f000 fb8d 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800605a:	4803      	ldr	r0, [pc, #12]	; (8006068 <MX_TIM3_Init+0xc0>)
 800605c:	f000 ff7a 	bl	8006f54 <HAL_TIM_MspPostInit>

}
 8006060:	bf00      	nop
 8006062:	3728      	adds	r7, #40	; 0x28
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	2003f9f4 	.word	0x2003f9f4
 800606c:	40000400 	.word	0x40000400

08006070 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006076:	f107 0320 	add.w	r3, r7, #32
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	611a      	str	r2, [r3, #16]
 800608e:	615a      	str	r2, [r3, #20]
 8006090:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <MX_TIM4_Init+0xc0>)
 8006094:	4a27      	ldr	r2, [pc, #156]	; (8006134 <MX_TIM4_Init+0xc4>)
 8006096:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <MX_TIM4_Init+0xc0>)
 800609a:	2200      	movs	r2, #0
 800609c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060a6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80060aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ac:	4b20      	ldr	r3, [pc, #128]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80060b8:	481d      	ldr	r0, [pc, #116]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060ba:	f008 f8aa 	bl	800e212 <HAL_TIM_PWM_Init>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80060c4:	f000 fb56 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060c8:	2300      	movs	r3, #0
 80060ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80060d0:	f107 0320 	add.w	r3, r7, #32
 80060d4:	4619      	mov	r1, r3
 80060d6:	4816      	ldr	r0, [pc, #88]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060d8:	f008 fe3a 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80060e2:	f000 fb47 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060e6:	2360      	movs	r3, #96	; 0x60
 80060e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	2208      	movs	r2, #8
 80060fa:	4619      	mov	r1, r3
 80060fc:	480c      	ldr	r0, [pc, #48]	; (8006130 <MX_TIM4_Init+0xc0>)
 80060fe:	f008 fac3 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006108:	f000 fb34 	bl	8006774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	220c      	movs	r2, #12
 8006110:	4619      	mov	r1, r3
 8006112:	4807      	ldr	r0, [pc, #28]	; (8006130 <MX_TIM4_Init+0xc0>)
 8006114:	f008 fab8 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800611e:	f000 fb29 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006122:	4803      	ldr	r0, [pc, #12]	; (8006130 <MX_TIM4_Init+0xc0>)
 8006124:	f000 ff16 	bl	8006f54 <HAL_TIM_MspPostInit>

}
 8006128:	bf00      	nop
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2003f880 	.word	0x2003f880
 8006134:	40000800 	.word	0x40000800

08006138 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800613e:	463b      	mov	r3, r7
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006146:	4b15      	ldr	r3, [pc, #84]	; (800619c <MX_TIM6_Init+0x64>)
 8006148:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <MX_TIM6_Init+0x68>)
 800614a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <MX_TIM6_Init+0x64>)
 800614e:	2259      	movs	r2, #89	; 0x59
 8006150:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <MX_TIM6_Init+0x64>)
 8006154:	2200      	movs	r2, #0
 8006156:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006158:	4b10      	ldr	r3, [pc, #64]	; (800619c <MX_TIM6_Init+0x64>)
 800615a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800615e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006160:	4b0e      	ldr	r3, [pc, #56]	; (800619c <MX_TIM6_Init+0x64>)
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006166:	480d      	ldr	r0, [pc, #52]	; (800619c <MX_TIM6_Init+0x64>)
 8006168:	f008 f804 	bl	800e174 <HAL_TIM_Base_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006172:	f000 faff 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006176:	2300      	movs	r3, #0
 8006178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800617e:	463b      	mov	r3, r7
 8006180:	4619      	mov	r1, r3
 8006182:	4806      	ldr	r0, [pc, #24]	; (800619c <MX_TIM6_Init+0x64>)
 8006184:	f008 fde4 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800618e:	f000 faf1 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	2003fb1c 	.word	0x2003fb1c
 80061a0:	40001000 	.word	0x40001000

080061a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061aa:	463b      	mov	r3, r7
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <MX_TIM7_Init+0x60>)
 80061b4:	4a14      	ldr	r2, [pc, #80]	; (8006208 <MX_TIM7_Init+0x64>)
 80061b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80061b8:	4b12      	ldr	r3, [pc, #72]	; (8006204 <MX_TIM7_Init+0x60>)
 80061ba:	22b3      	movs	r2, #179	; 0xb3
 80061bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <MX_TIM7_Init+0x60>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <MX_TIM7_Init+0x60>)
 80061c6:	2231      	movs	r2, #49	; 0x31
 80061c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <MX_TIM7_Init+0x60>)
 80061cc:	2280      	movs	r2, #128	; 0x80
 80061ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80061d0:	480c      	ldr	r0, [pc, #48]	; (8006204 <MX_TIM7_Init+0x60>)
 80061d2:	f007 ffcf 	bl	800e174 <HAL_TIM_Base_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80061dc:	f000 faca 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061e0:	2300      	movs	r3, #0
 80061e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80061e8:	463b      	mov	r3, r7
 80061ea:	4619      	mov	r1, r3
 80061ec:	4805      	ldr	r0, [pc, #20]	; (8006204 <MX_TIM7_Init+0x60>)
 80061ee:	f008 fdaf 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80061f8:	f000 fabc 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	2003fcc0 	.word	0x2003fcc0
 8006208:	40001400 	.word	0x40001400

0800620c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	2224      	movs	r2, #36	; 0x24
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f00e fbf3 	bl	8014a06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006220:	1d3b      	adds	r3, r7, #4
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <MX_TIM8_Init+0xa8>)
 800622a:	4a23      	ldr	r2, [pc, #140]	; (80062b8 <MX_TIM8_Init+0xac>)
 800622c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800622e:	4b21      	ldr	r3, [pc, #132]	; (80062b4 <MX_TIM8_Init+0xa8>)
 8006230:	2200      	movs	r2, #0
 8006232:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006234:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <MX_TIM8_Init+0xa8>)
 8006236:	2210      	movs	r2, #16
 8006238:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <MX_TIM8_Init+0xa8>)
 800623c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006240:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <MX_TIM8_Init+0xa8>)
 8006244:	2200      	movs	r2, #0
 8006246:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <MX_TIM8_Init+0xa8>)
 800624a:	2200      	movs	r2, #0
 800624c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800624e:	4b19      	ldr	r3, [pc, #100]	; (80062b4 <MX_TIM8_Init+0xa8>)
 8006250:	2200      	movs	r2, #0
 8006252:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006254:	2303      	movs	r3, #3
 8006256:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800625c:	2301      	movs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800626c:	2301      	movs	r3, #1
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006270:	2300      	movs	r3, #0
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	4619      	mov	r1, r3
 800627e:	480d      	ldr	r0, [pc, #52]	; (80062b4 <MX_TIM8_Init+0xa8>)
 8006280:	f008 f830 	bl	800e2e4 <HAL_TIM_Encoder_Init>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800628a:	f000 fa73 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4806      	ldr	r0, [pc, #24]	; (80062b4 <MX_TIM8_Init+0xa8>)
 800629c:	f008 fd58 	bl	800ed50 <HAL_TIMEx_MasterConfigSynchronization>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80062a6:	f000 fa65 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80062aa:	bf00      	nop
 80062ac:	3730      	adds	r7, #48	; 0x30
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2003f840 	.word	0x2003f840
 80062b8:	40010400 	.word	0x40010400

080062bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
 80062d0:	615a      	str	r2, [r3, #20]
 80062d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <MX_TIM10_Init+0x94>)
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <MX_TIM10_Init+0x98>)
 80062d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80062da:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <MX_TIM10_Init+0x94>)
 80062dc:	2200      	movs	r2, #0
 80062de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <MX_TIM10_Init+0x94>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <MX_TIM10_Init+0x94>)
 80062e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <MX_TIM10_Init+0x94>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <MX_TIM10_Init+0x94>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80062fa:	4815      	ldr	r0, [pc, #84]	; (8006350 <MX_TIM10_Init+0x94>)
 80062fc:	f007 ff3a 	bl	800e174 <HAL_TIM_Base_Init>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006306:	f000 fa35 	bl	8006774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800630a:	4811      	ldr	r0, [pc, #68]	; (8006350 <MX_TIM10_Init+0x94>)
 800630c:	f007 ff81 	bl	800e212 <HAL_TIM_PWM_Init>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006316:	f000 fa2d 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800631a:	2360      	movs	r3, #96	; 0x60
 800631c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	2200      	movs	r2, #0
 800632e:	4619      	mov	r1, r3
 8006330:	4807      	ldr	r0, [pc, #28]	; (8006350 <MX_TIM10_Init+0x94>)
 8006332:	f008 f9a9 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800633c:	f000 fa1a 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006340:	4803      	ldr	r0, [pc, #12]	; (8006350 <MX_TIM10_Init+0x94>)
 8006342:	f000 fe07 	bl	8006f54 <HAL_TIM_MspPostInit>

}
 8006346:	bf00      	nop
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	2003f95c 	.word	0x2003f95c
 8006354:	40014400 	.word	0x40014400

08006358 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	611a      	str	r2, [r3, #16]
 800636c:	615a      	str	r2, [r3, #20]
 800636e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <MX_TIM11_Init+0x94>)
 8006372:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <MX_TIM11_Init+0x98>)
 8006374:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <MX_TIM11_Init+0x94>)
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <MX_TIM11_Init+0x94>)
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8006382:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <MX_TIM11_Init+0x94>)
 8006384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006388:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <MX_TIM11_Init+0x94>)
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006390:	4b16      	ldr	r3, [pc, #88]	; (80063ec <MX_TIM11_Init+0x94>)
 8006392:	2200      	movs	r2, #0
 8006394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006396:	4815      	ldr	r0, [pc, #84]	; (80063ec <MX_TIM11_Init+0x94>)
 8006398:	f007 feec 	bl	800e174 <HAL_TIM_Base_Init>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80063a2:	f000 f9e7 	bl	8006774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80063a6:	4811      	ldr	r0, [pc, #68]	; (80063ec <MX_TIM11_Init+0x94>)
 80063a8:	f007 ff33 	bl	800e212 <HAL_TIM_PWM_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80063b2:	f000 f9df 	bl	8006774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063b6:	2360      	movs	r3, #96	; 0x60
 80063b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	2200      	movs	r2, #0
 80063ca:	4619      	mov	r1, r3
 80063cc:	4807      	ldr	r0, [pc, #28]	; (80063ec <MX_TIM11_Init+0x94>)
 80063ce:	f008 f95b 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80063d8:	f000 f9cc 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <MX_TIM11_Init+0x94>)
 80063de:	f000 fdb9 	bl	8006f54 <HAL_TIM_MspPostInit>

}
 80063e2:	bf00      	nop
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2003fa7c 	.word	0x2003fa7c
 80063f0:	40014800 	.word	0x40014800

080063f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <MX_TIM13_Init+0x40>)
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <MX_TIM13_Init+0x44>)
 80063fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <MX_TIM13_Init+0x40>)
 8006400:	2259      	movs	r2, #89	; 0x59
 8006402:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <MX_TIM13_Init+0x40>)
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <MX_TIM13_Init+0x40>)
 800640c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006410:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <MX_TIM13_Init+0x40>)
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <MX_TIM13_Init+0x40>)
 800641a:	2280      	movs	r2, #128	; 0x80
 800641c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <MX_TIM13_Init+0x40>)
 8006420:	f007 fea8 	bl	800e174 <HAL_TIM_Base_Init>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800642a:	f000 f9a3 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800642e:	bf00      	nop
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	2003fa3c 	.word	0x2003fa3c
 8006438:	40001c00 	.word	0x40001c00

0800643c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <MX_USART2_UART_Init+0x50>)
 8006444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800644c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800644e:	4b0e      	ldr	r3, [pc, #56]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006456:	2200      	movs	r2, #0
 8006458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 800645c:	2200      	movs	r2, #0
 800645e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006462:	220c      	movs	r2, #12
 8006464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 800646e:	2200      	movs	r2, #0
 8006470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006472:	4805      	ldr	r0, [pc, #20]	; (8006488 <MX_USART2_UART_Init+0x4c>)
 8006474:	f008 fd4e 	bl	800ef14 <HAL_UART_Init>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800647e:	f000 f979 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2003fc20 	.word	0x2003fc20
 800648c:	40004400 	.word	0x40004400

08006490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <MX_DMA_Init+0x5c>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	4a13      	ldr	r2, [pc, #76]	; (80064ec <MX_DMA_Init+0x5c>)
 80064a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064a4:	6313      	str	r3, [r2, #48]	; 0x30
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <MX_DMA_Init+0x5c>)
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80064b2:	2200      	movs	r2, #0
 80064b4:	2100      	movs	r1, #0
 80064b6:	203a      	movs	r0, #58	; 0x3a
 80064b8:	f003 fa27 	bl	800990a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80064bc:	203a      	movs	r0, #58	; 0x3a
 80064be:	f003 fa40 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	203b      	movs	r0, #59	; 0x3b
 80064c8:	f003 fa1f 	bl	800990a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80064cc:	203b      	movs	r0, #59	; 0x3b
 80064ce:	f003 fa38 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80064d2:	2200      	movs	r2, #0
 80064d4:	2100      	movs	r1, #0
 80064d6:	2045      	movs	r0, #69	; 0x45
 80064d8:	f003 fa17 	bl	800990a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80064dc:	2045      	movs	r0, #69	; 0x45
 80064de:	f003 fa30 	bl	8009942 <HAL_NVIC_EnableIRQ>

}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800

080064f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08c      	sub	sp, #48	; 0x30
 80064f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f6:	f107 031c 	add.w	r3, r7, #28
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	4b94      	ldr	r3, [pc, #592]	; (800675c <MX_GPIO_Init+0x26c>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	4a93      	ldr	r2, [pc, #588]	; (800675c <MX_GPIO_Init+0x26c>)
 8006510:	f043 0310 	orr.w	r3, r3, #16
 8006514:	6313      	str	r3, [r2, #48]	; 0x30
 8006516:	4b91      	ldr	r3, [pc, #580]	; (800675c <MX_GPIO_Init+0x26c>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	4b8d      	ldr	r3, [pc, #564]	; (800675c <MX_GPIO_Init+0x26c>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a8c      	ldr	r2, [pc, #560]	; (800675c <MX_GPIO_Init+0x26c>)
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b8a      	ldr	r3, [pc, #552]	; (800675c <MX_GPIO_Init+0x26c>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	4b86      	ldr	r3, [pc, #536]	; (800675c <MX_GPIO_Init+0x26c>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	4a85      	ldr	r2, [pc, #532]	; (800675c <MX_GPIO_Init+0x26c>)
 8006548:	f043 0304 	orr.w	r3, r3, #4
 800654c:	6313      	str	r3, [r2, #48]	; 0x30
 800654e:	4b83      	ldr	r3, [pc, #524]	; (800675c <MX_GPIO_Init+0x26c>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	4b7f      	ldr	r3, [pc, #508]	; (800675c <MX_GPIO_Init+0x26c>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	4a7e      	ldr	r2, [pc, #504]	; (800675c <MX_GPIO_Init+0x26c>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	6313      	str	r3, [r2, #48]	; 0x30
 800656a:	4b7c      	ldr	r3, [pc, #496]	; (800675c <MX_GPIO_Init+0x26c>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	4b78      	ldr	r3, [pc, #480]	; (800675c <MX_GPIO_Init+0x26c>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	4a77      	ldr	r2, [pc, #476]	; (800675c <MX_GPIO_Init+0x26c>)
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	6313      	str	r3, [r2, #48]	; 0x30
 8006586:	4b75      	ldr	r3, [pc, #468]	; (800675c <MX_GPIO_Init+0x26c>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	4b71      	ldr	r3, [pc, #452]	; (800675c <MX_GPIO_Init+0x26c>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	4a70      	ldr	r2, [pc, #448]	; (800675c <MX_GPIO_Init+0x26c>)
 800659c:	f043 0308 	orr.w	r3, r3, #8
 80065a0:	6313      	str	r3, [r2, #48]	; 0x30
 80065a2:	4b6e      	ldr	r3, [pc, #440]	; (800675c <MX_GPIO_Init+0x26c>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065b4:	486a      	ldr	r0, [pc, #424]	; (8006760 <MX_GPIO_Init+0x270>)
 80065b6:	f003 ff3d 	bl	800a434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80065ba:	2200      	movs	r2, #0
 80065bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065c0:	4868      	ldr	r0, [pc, #416]	; (8006764 <MX_GPIO_Init+0x274>)
 80065c2:	f003 ff37 	bl	800a434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80065c6:	2200      	movs	r2, #0
 80065c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065cc:	4866      	ldr	r0, [pc, #408]	; (8006768 <MX_GPIO_Init+0x278>)
 80065ce:	f003 ff31 	bl	800a434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80065d2:	2200      	movs	r2, #0
 80065d4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80065d8:	4864      	ldr	r0, [pc, #400]	; (800676c <MX_GPIO_Init+0x27c>)
 80065da:	f003 ff2b 	bl	800a434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065de:	2304      	movs	r3, #4
 80065e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065e2:	2300      	movs	r3, #0
 80065e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065ea:	f107 031c 	add.w	r3, r7, #28
 80065ee:	4619      	mov	r1, r3
 80065f0:	485b      	ldr	r0, [pc, #364]	; (8006760 <MX_GPIO_Init+0x270>)
 80065f2:	f003 fd5d 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80065f6:	230f      	movs	r3, #15
 80065f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065fa:	2303      	movs	r3, #3
 80065fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006602:	f107 031c 	add.w	r3, r7, #28
 8006606:	4619      	mov	r1, r3
 8006608:	4859      	ldr	r0, [pc, #356]	; (8006770 <MX_GPIO_Init+0x280>)
 800660a:	f003 fd51 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800660e:	23e1      	movs	r3, #225	; 0xe1
 8006610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006612:	2303      	movs	r3, #3
 8006614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800661a:	f107 031c 	add.w	r3, r7, #28
 800661e:	4619      	mov	r1, r3
 8006620:	4852      	ldr	r0, [pc, #328]	; (800676c <MX_GPIO_Init+0x27c>)
 8006622:	f003 fd45 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006626:	2303      	movs	r3, #3
 8006628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800662a:	2303      	movs	r3, #3
 800662c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662e:	2300      	movs	r3, #0
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006632:	f107 031c 	add.w	r3, r7, #28
 8006636:	4619      	mov	r1, r3
 8006638:	484a      	ldr	r0, [pc, #296]	; (8006764 <MX_GPIO_Init+0x274>)
 800663a:	f003 fd39 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800663e:	2304      	movs	r3, #4
 8006640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006642:	2300      	movs	r3, #0
 8006644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006646:	2301      	movs	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664a:	f107 031c 	add.w	r3, r7, #28
 800664e:	4619      	mov	r1, r3
 8006650:	4844      	ldr	r0, [pc, #272]	; (8006764 <MX_GPIO_Init+0x274>)
 8006652:	f003 fd2d 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006656:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800665a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800665c:	2300      	movs	r3, #0
 800665e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006660:	2301      	movs	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006664:	f107 031c 	add.w	r3, r7, #28
 8006668:	4619      	mov	r1, r3
 800666a:	483d      	ldr	r0, [pc, #244]	; (8006760 <MX_GPIO_Init+0x270>)
 800666c:	f003 fd20 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006676:	2301      	movs	r3, #1
 8006678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667a:	2300      	movs	r3, #0
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667e:	2300      	movs	r3, #0
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4835      	ldr	r0, [pc, #212]	; (8006760 <MX_GPIO_Init+0x270>)
 800668a:	f003 fd11 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800668e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006694:	2301      	movs	r3, #1
 8006696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	4619      	mov	r1, r3
 80066a6:	482f      	ldr	r0, [pc, #188]	; (8006764 <MX_GPIO_Init+0x274>)
 80066a8:	f003 fd02 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b2:	2300      	movs	r3, #0
 80066b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066ba:	f107 031c 	add.w	r3, r7, #28
 80066be:	4619      	mov	r1, r3
 80066c0:	4829      	ldr	r0, [pc, #164]	; (8006768 <MX_GPIO_Init+0x278>)
 80066c2:	f003 fcf5 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066cc:	2301      	movs	r3, #1
 80066ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066d8:	f107 031c 	add.w	r3, r7, #28
 80066dc:	4619      	mov	r1, r3
 80066de:	4822      	ldr	r0, [pc, #136]	; (8006768 <MX_GPIO_Init+0x278>)
 80066e0:	f003 fce6 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ea:	2301      	movs	r3, #1
 80066ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066ee:	2301      	movs	r3, #1
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f2:	2300      	movs	r3, #0
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066f6:	f107 031c 	add.w	r3, r7, #28
 80066fa:	4619      	mov	r1, r3
 80066fc:	481a      	ldr	r0, [pc, #104]	; (8006768 <MX_GPIO_Init+0x278>)
 80066fe:	f003 fcd7 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006702:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006706:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006708:	2301      	movs	r3, #1
 800670a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670c:	2300      	movs	r3, #0
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006710:	2300      	movs	r3, #0
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006714:	f107 031c 	add.w	r3, r7, #28
 8006718:	4619      	mov	r1, r3
 800671a:	4814      	ldr	r0, [pc, #80]	; (800676c <MX_GPIO_Init+0x27c>)
 800671c:	f003 fcc8 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006726:	2300      	movs	r3, #0
 8006728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800672e:	f107 031c 	add.w	r3, r7, #28
 8006732:	4619      	mov	r1, r3
 8006734:	480d      	ldr	r0, [pc, #52]	; (800676c <MX_GPIO_Init+0x27c>)
 8006736:	f003 fcbb 	bl	800a0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800673a:	239b      	movs	r3, #155	; 0x9b
 800673c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800673e:	2300      	movs	r3, #0
 8006740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006742:	2301      	movs	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006746:	f107 031c 	add.w	r3, r7, #28
 800674a:	4619      	mov	r1, r3
 800674c:	4806      	ldr	r0, [pc, #24]	; (8006768 <MX_GPIO_Init+0x278>)
 800674e:	f003 fcaf 	bl	800a0b0 <HAL_GPIO_Init>

}
 8006752:	bf00      	nop
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40021000 	.word	0x40021000
 8006764:	40020400 	.word	0x40020400
 8006768:	40020c00 	.word	0x40020c00
 800676c:	40020000 	.word	0x40020000
 8006770:	40020800 	.word	0x40020800

08006774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006778:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800677a:	e7fe      	b.n	800677a <Error_Handler+0x6>

0800677c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <HAL_MspInit+0x4c>)
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	4a0f      	ldr	r2, [pc, #60]	; (80067d8 <HAL_MspInit+0x4c>)
 800679c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067a0:	6453      	str	r3, [r2, #68]	; 0x44
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <HAL_MspInit+0x4c>)
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <HAL_MspInit+0x4c>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	4a08      	ldr	r2, [pc, #32]	; (80067d8 <HAL_MspInit+0x4c>)
 80067b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067bc:	6413      	str	r3, [r2, #64]	; 0x40
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_MspInit+0x4c>)
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40023800 	.word	0x40023800

080067dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	; 0x30
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e4:	f107 031c 	add.w	r3, r7, #28
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a4a      	ldr	r2, [pc, #296]	; (8006924 <HAL_ADC_MspInit+0x148>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f040 808e 	bne.w	800691c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	4b48      	ldr	r3, [pc, #288]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	4a47      	ldr	r2, [pc, #284]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800680a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800680e:	6453      	str	r3, [r2, #68]	; 0x44
 8006810:	4b45      	ldr	r3, [pc, #276]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	4b41      	ldr	r3, [pc, #260]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	4a40      	ldr	r2, [pc, #256]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006826:	f043 0304 	orr.w	r3, r3, #4
 800682a:	6313      	str	r3, [r2, #48]	; 0x30
 800682c:	4b3e      	ldr	r3, [pc, #248]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	4b3a      	ldr	r3, [pc, #232]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	4a39      	ldr	r2, [pc, #228]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6313      	str	r3, [r2, #48]	; 0x30
 8006848:	4b37      	ldr	r3, [pc, #220]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4a32      	ldr	r2, [pc, #200]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	6313      	str	r3, [r2, #48]	; 0x30
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_ADC_MspInit+0x14c>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006870:	230f      	movs	r3, #15
 8006872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006874:	2303      	movs	r3, #3
 8006876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006878:	2300      	movs	r3, #0
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800687c:	f107 031c 	add.w	r3, r7, #28
 8006880:	4619      	mov	r1, r3
 8006882:	482a      	ldr	r0, [pc, #168]	; (800692c <HAL_ADC_MspInit+0x150>)
 8006884:	f003 fc14 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006888:	23ff      	movs	r3, #255	; 0xff
 800688a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800688c:	2303      	movs	r3, #3
 800688e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006890:	2300      	movs	r3, #0
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006894:	f107 031c 	add.w	r3, r7, #28
 8006898:	4619      	mov	r1, r3
 800689a:	4825      	ldr	r0, [pc, #148]	; (8006930 <HAL_ADC_MspInit+0x154>)
 800689c:	f003 fc08 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068a0:	2303      	movs	r3, #3
 80068a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068a4:	2303      	movs	r3, #3
 80068a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ac:	f107 031c 	add.w	r3, r7, #28
 80068b0:	4619      	mov	r1, r3
 80068b2:	4820      	ldr	r0, [pc, #128]	; (8006934 <HAL_ADC_MspInit+0x158>)
 80068b4:	f003 fbfc 	bl	800a0b0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80068b8:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068ba:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_ADC_MspInit+0x160>)
 80068bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80068be:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068c6:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80068d2:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068da:	4b17      	ldr	r3, [pc, #92]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068f0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068f8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006900:	480d      	ldr	r0, [pc, #52]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 8006902:	f003 f839 	bl	8009978 <HAL_DMA_Init>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800690c:	f7ff ff32 	bl	8006774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <HAL_ADC_MspInit+0x15c>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800691c:	bf00      	nop
 800691e:	3730      	adds	r7, #48	; 0x30
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40012100 	.word	0x40012100
 8006928:	40023800 	.word	0x40023800
 800692c:	40020800 	.word	0x40020800
 8006930:	40020000 	.word	0x40020000
 8006934:	40020400 	.word	0x40020400
 8006938:	2003fc60 	.word	0x2003fc60
 800693c:	40026440 	.word	0x40026440

08006940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	; 0x30
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006948:	f107 031c 	add.w	r3, r7, #28
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a32      	ldr	r2, [pc, #200]	; (8006a28 <HAL_I2C_MspInit+0xe8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d12c      	bne.n	80069bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 800696c:	f043 0302 	orr.w	r3, r3, #2
 8006970:	6313      	str	r3, [r2, #48]	; 0x30
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800697e:	23c0      	movs	r3, #192	; 0xc0
 8006980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006982:	2312      	movs	r3, #18
 8006984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006986:	2301      	movs	r3, #1
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800698a:	2303      	movs	r3, #3
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800698e:	2304      	movs	r3, #4
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	4619      	mov	r1, r3
 8006998:	4825      	ldr	r0, [pc, #148]	; (8006a30 <HAL_I2C_MspInit+0xf0>)
 800699a:	f003 fb89 	bl	800a0b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	4b22      	ldr	r3, [pc, #136]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ac:	6413      	str	r3, [r2, #64]	; 0x40
 80069ae:	4b1f      	ldr	r3, [pc, #124]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80069ba:	e031      	b.n	8006a20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <HAL_I2C_MspInit+0xf4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d12c      	bne.n	8006a20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	6313      	str	r3, [r2, #48]	; 0x30
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80069e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069e8:	2312      	movs	r3, #18
 80069ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069ec:	2301      	movs	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f0:	2303      	movs	r3, #3
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80069f4:	2304      	movs	r3, #4
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069f8:	f107 031c 	add.w	r3, r7, #28
 80069fc:	4619      	mov	r1, r3
 80069fe:	480c      	ldr	r0, [pc, #48]	; (8006a30 <HAL_I2C_MspInit+0xf0>)
 8006a00:	f003 fb56 	bl	800a0b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	4a07      	ldr	r2, [pc, #28]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 8006a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a12:	6413      	str	r3, [r2, #64]	; 0x40
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <HAL_I2C_MspInit+0xec>)
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	bf00      	nop
 8006a22:	3730      	adds	r7, #48	; 0x30
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40005400 	.word	0x40005400
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	40020400 	.word	0x40020400
 8006a34:	40005800 	.word	0x40005800

08006a38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a69      	ldr	r2, [pc, #420]	; (8006bfc <HAL_SD_MspInit+0x1c4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	f040 80cb 	bne.w	8006bf2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	4b67      	ldr	r3, [pc, #412]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a64:	4a66      	ldr	r2, [pc, #408]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006a6c:	4b64      	ldr	r3, [pc, #400]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	4b60      	ldr	r3, [pc, #384]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	4a5f      	ldr	r2, [pc, #380]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a82:	f043 0304 	orr.w	r3, r3, #4
 8006a86:	6313      	str	r3, [r2, #48]	; 0x30
 8006a88:	4b5d      	ldr	r3, [pc, #372]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	4b59      	ldr	r3, [pc, #356]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	4a58      	ldr	r2, [pc, #352]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006a9e:	f043 0308 	orr.w	r3, r3, #8
 8006aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa4:	4b56      	ldr	r3, [pc, #344]	; (8006c00 <HAL_SD_MspInit+0x1c8>)
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ab0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006ab4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ac6:	f107 0314 	add.w	r3, r7, #20
 8006aca:	4619      	mov	r1, r3
 8006acc:	484d      	ldr	r0, [pc, #308]	; (8006c04 <HAL_SD_MspInit+0x1cc>)
 8006ace:	f003 faef 	bl	800a0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ae2:	230c      	movs	r3, #12
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	4619      	mov	r1, r3
 8006aec:	4846      	ldr	r0, [pc, #280]	; (8006c08 <HAL_SD_MspInit+0x1d0>)
 8006aee:	f003 fadf 	bl	800a0b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006af2:	4b46      	ldr	r3, [pc, #280]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006af4:	4a46      	ldr	r2, [pc, #280]	; (8006c10 <HAL_SD_MspInit+0x1d8>)
 8006af6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006af8:	4b44      	ldr	r3, [pc, #272]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006afe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b00:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b0c:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b12:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b14:	4b3d      	ldr	r3, [pc, #244]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b1a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b22:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006b24:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b26:	2220      	movs	r2, #32
 8006b28:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b2a:	4b38      	ldr	r3, [pc, #224]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b30:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b34:	2204      	movs	r2, #4
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b38:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006b3e:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b46:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006b4e:	482f      	ldr	r0, [pc, #188]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b50:	f002 ff12 	bl	8009978 <HAL_DMA_Init>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006b5a:	f7ff fe0b 	bl	8006774 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <HAL_SD_MspInit+0x1d4>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006b6a:	4b2a      	ldr	r3, [pc, #168]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b6c:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <HAL_SD_MspInit+0x1e0>)
 8006b6e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006b70:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b76:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b78:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b7a:	2240      	movs	r2, #64	; 0x40
 8006b7c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b7e:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b84:	4b23      	ldr	r3, [pc, #140]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b8a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b8c:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b92:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b9a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006ba4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ba8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006baa:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bac:	2204      	movs	r2, #4
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006bbe:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006bc6:	4813      	ldr	r0, [pc, #76]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bc8:	f002 fed6 	bl	8009978 <HAL_DMA_Init>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006bd2:	f7ff fdcf 	bl	8006774 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a0e      	ldr	r2, [pc, #56]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <HAL_SD_MspInit+0x1dc>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	2031      	movs	r0, #49	; 0x31
 8006be8:	f002 fe8f 	bl	800990a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006bec:	2031      	movs	r0, #49	; 0x31
 8006bee:	f002 fea8 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006bf2:	bf00      	nop
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40020800 	.word	0x40020800
 8006c08:	40020c00 	.word	0x40020c00
 8006c0c:	2003f788 	.word	0x2003f788
 8006c10:	40026458 	.word	0x40026458
 8006c14:	2003fabc 	.word	0x2003fabc
 8006c18:	400264a0 	.word	0x400264a0

08006c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	; 0x28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	60da      	str	r2, [r3, #12]
 8006c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <HAL_SPI_MspInit+0x84>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d12c      	bne.n	8006c98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_SPI_MspInit+0x88>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006c76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c84:	2303      	movs	r3, #3
 8006c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c88:	2305      	movs	r3, #5
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4619      	mov	r1, r3
 8006c92:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <HAL_SPI_MspInit+0x8c>)
 8006c94:	f003 fa0c 	bl	800a0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c98:	bf00      	nop
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40003800 	.word	0x40003800
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40020400 	.word	0x40020400

08006cac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb4:	f107 031c 	add.w	r3, r7, #28
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_TIM_PWM_MspInit+0xd4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12d      	bne.n	8006d2a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006cf4:	f043 0310 	orr.w	r3, r3, #16
 8006cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfa:	4b22      	ldr	r3, [pc, #136]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006d06:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d14:	2300      	movs	r3, #0
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d1c:	f107 031c 	add.w	r3, r7, #28
 8006d20:	4619      	mov	r1, r3
 8006d22:	4819      	ldr	r0, [pc, #100]	; (8006d88 <HAL_TIM_PWM_MspInit+0xdc>)
 8006d24:	f003 f9c4 	bl	800a0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006d28:	e026      	b.n	8006d78 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <HAL_TIM_PWM_MspInit+0xe0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	4a11      	ldr	r2, [pc, #68]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d3e:	f043 0302 	orr.w	r3, r3, #2
 8006d42:	6413      	str	r3, [r2, #64]	; 0x40
 8006d44:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]
}
 8006d50:	e012      	b.n	8006d78 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <HAL_TIM_PWM_MspInit+0xe4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d10d      	bne.n	8006d78 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	4a07      	ldr	r2, [pc, #28]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d66:	f043 0304 	orr.w	r3, r3, #4
 8006d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <HAL_TIM_PWM_MspInit+0xd8>)
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
}
 8006d78:	bf00      	nop
 8006d7a:	3730      	adds	r7, #48	; 0x30
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40023800 	.word	0x40023800
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800

08006d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a3e      	ldr	r2, [pc, #248]	; (8006e9c <HAL_TIM_Base_MspInit+0x108>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d116      	bne.n	8006dd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	4b3d      	ldr	r3, [pc, #244]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	4a3c      	ldr	r2, [pc, #240]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	6413      	str	r3, [r2, #64]	; 0x40
 8006db6:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	2036      	movs	r0, #54	; 0x36
 8006dc8:	f002 fd9f 	bl	800990a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006dcc:	2036      	movs	r0, #54	; 0x36
 8006dce:	f002 fdb8 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006dd2:	e05e      	b.n	8006e92 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a32      	ldr	r2, [pc, #200]	; (8006ea4 <HAL_TIM_Base_MspInit+0x110>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d116      	bne.n	8006e0c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	4a2e      	ldr	r2, [pc, #184]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006de8:	f043 0320 	orr.w	r3, r3, #32
 8006dec:	6413      	str	r3, [r2, #64]	; 0x40
 8006dee:	4b2c      	ldr	r3, [pc, #176]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	2037      	movs	r0, #55	; 0x37
 8006e00:	f002 fd83 	bl	800990a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006e04:	2037      	movs	r0, #55	; 0x37
 8006e06:	f002 fd9c 	bl	8009942 <HAL_NVIC_EnableIRQ>
}
 8006e0a:	e042      	b.n	8006e92 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a25      	ldr	r2, [pc, #148]	; (8006ea8 <HAL_TIM_Base_MspInit+0x114>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d10e      	bne.n	8006e34 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e24:	6453      	str	r3, [r2, #68]	; 0x44
 8006e26:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	e02e      	b.n	8006e92 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_TIM_Base_MspInit+0x118>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d10e      	bne.n	8006e5c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	693b      	ldr	r3, [r7, #16]
}
 8006e5a:	e01a      	b.n	8006e92 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <HAL_TIM_Base_MspInit+0x11c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d115      	bne.n	8006e92 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	6413      	str	r3, [r2, #64]	; 0x40
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <HAL_TIM_Base_MspInit+0x10c>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006e82:	2200      	movs	r2, #0
 8006e84:	2100      	movs	r1, #0
 8006e86:	202c      	movs	r0, #44	; 0x2c
 8006e88:	f002 fd3f 	bl	800990a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006e8c:	202c      	movs	r0, #44	; 0x2c
 8006e8e:	f002 fd58 	bl	8009942 <HAL_NVIC_EnableIRQ>
}
 8006e92:	bf00      	nop
 8006e94:	3720      	adds	r7, #32
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40001000 	.word	0x40001000
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40001400 	.word	0x40001400
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800
 8006eb0:	40001c00 	.word	0x40001c00

08006eb4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ebc:	f107 0314 	add.w	r3, r7, #20
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_TIM_Encoder_MspInit+0x94>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d133      	bne.n	8006f3e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
 8006ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee6:	4b19      	ldr	r3, [pc, #100]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006efc:	f043 0304 	orr.w	r3, r3, #4
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <HAL_TIM_Encoder_MspInit+0x98>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f0e:	23c0      	movs	r3, #192	; 0xc0
 8006f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f12:	2302      	movs	r3, #2
 8006f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	4619      	mov	r1, r3
 8006f28:	4809      	ldr	r0, [pc, #36]	; (8006f50 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006f2a:	f003 f8c1 	bl	800a0b0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2100      	movs	r1, #0
 8006f32:	202c      	movs	r0, #44	; 0x2c
 8006f34:	f002 fce9 	bl	800990a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006f38:	202c      	movs	r0, #44	; 0x2c
 8006f3a:	f002 fd02 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006f3e:	bf00      	nop
 8006f40:	3728      	adds	r7, #40	; 0x28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40010400 	.word	0x40010400
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40020800 	.word	0x40020800

08006f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08c      	sub	sp, #48	; 0x30
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5c:	f107 031c 	add.w	r3, r7, #28
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a5c      	ldr	r2, [pc, #368]	; (80070e4 <HAL_TIM_MspPostInit+0x190>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d11f      	bne.n	8006fb6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f76:	2300      	movs	r3, #0
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	4b5b      	ldr	r3, [pc, #364]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	4a5a      	ldr	r2, [pc, #360]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006f80:	f043 0310 	orr.w	r3, r3, #16
 8006f84:	6313      	str	r3, [r2, #48]	; 0x30
 8006f86:	4b58      	ldr	r3, [pc, #352]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fa8:	f107 031c 	add.w	r3, r7, #28
 8006fac:	4619      	mov	r1, r3
 8006fae:	484f      	ldr	r0, [pc, #316]	; (80070ec <HAL_TIM_MspPostInit+0x198>)
 8006fb0:	f003 f87e 	bl	800a0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006fb4:	e091      	b.n	80070da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4d      	ldr	r2, [pc, #308]	; (80070f0 <HAL_TIM_MspPostInit+0x19c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d11e      	bne.n	8006ffe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	4a47      	ldr	r2, [pc, #284]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006fca:	f043 0302 	orr.w	r3, r3, #2
 8006fce:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fdc:	2330      	movs	r3, #48	; 0x30
 8006fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006fec:	2302      	movs	r3, #2
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ff0:	f107 031c 	add.w	r3, r7, #28
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	483f      	ldr	r0, [pc, #252]	; (80070f4 <HAL_TIM_MspPostInit+0x1a0>)
 8006ff8:	f003 f85a 	bl	800a0b0 <HAL_GPIO_Init>
}
 8006ffc:	e06d      	b.n	80070da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3d      	ldr	r2, [pc, #244]	; (80070f8 <HAL_TIM_MspPostInit+0x1a4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d11f      	bne.n	8007048 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	4a35      	ldr	r2, [pc, #212]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8007012:	f043 0308 	orr.w	r3, r3, #8
 8007016:	6313      	str	r3, [r2, #48]	; 0x30
 8007018:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007024:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702a:	2302      	movs	r3, #2
 800702c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007032:	2300      	movs	r3, #0
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007036:	2302      	movs	r3, #2
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800703a:	f107 031c 	add.w	r3, r7, #28
 800703e:	4619      	mov	r1, r3
 8007040:	482e      	ldr	r0, [pc, #184]	; (80070fc <HAL_TIM_MspPostInit+0x1a8>)
 8007042:	f003 f835 	bl	800a0b0 <HAL_GPIO_Init>
}
 8007046:	e048      	b.n	80070da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2c      	ldr	r2, [pc, #176]	; (8007100 <HAL_TIM_MspPostInit+0x1ac>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d11f      	bne.n	8007092 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 800705c:	f043 0302 	orr.w	r3, r3, #2
 8007060:	6313      	str	r3, [r2, #48]	; 0x30
 8007062:	4b21      	ldr	r3, [pc, #132]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800706e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007074:	2302      	movs	r3, #2
 8007076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007078:	2300      	movs	r3, #0
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800707c:	2300      	movs	r3, #0
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007080:	2303      	movs	r3, #3
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007084:	f107 031c 	add.w	r3, r7, #28
 8007088:	4619      	mov	r1, r3
 800708a:	481a      	ldr	r0, [pc, #104]	; (80070f4 <HAL_TIM_MspPostInit+0x1a0>)
 800708c:	f003 f810 	bl	800a0b0 <HAL_GPIO_Init>
}
 8007090:	e023      	b.n	80070da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <HAL_TIM_MspPostInit+0x1b0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d11e      	bne.n	80070da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	6313      	str	r3, [r2, #48]	; 0x30
 80070ac:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <HAL_TIM_MspPostInit+0x194>)
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80070b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070be:	2302      	movs	r3, #2
 80070c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80070ca:	2303      	movs	r3, #3
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070ce:	f107 031c 	add.w	r3, r7, #28
 80070d2:	4619      	mov	r1, r3
 80070d4:	4807      	ldr	r0, [pc, #28]	; (80070f4 <HAL_TIM_MspPostInit+0x1a0>)
 80070d6:	f002 ffeb 	bl	800a0b0 <HAL_GPIO_Init>
}
 80070da:	bf00      	nop
 80070dc:	3730      	adds	r7, #48	; 0x30
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40023800 	.word	0x40023800
 80070ec:	40021000 	.word	0x40021000
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40020400 	.word	0x40020400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40020c00 	.word	0x40020c00
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800

08007108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <HAL_UART_MspInit+0x84>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d12b      	bne.n	8007182 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	4b18      	ldr	r3, [pc, #96]	; (8007190 <HAL_UART_MspInit+0x88>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <HAL_UART_MspInit+0x88>)
 8007134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007138:	6413      	str	r3, [r2, #64]	; 0x40
 800713a:	4b15      	ldr	r3, [pc, #84]	; (8007190 <HAL_UART_MspInit+0x88>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_UART_MspInit+0x88>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <HAL_UART_MspInit+0x88>)
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	6313      	str	r3, [r2, #48]	; 0x30
 8007156:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <HAL_UART_MspInit+0x88>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007162:	2360      	movs	r3, #96	; 0x60
 8007164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007166:	2302      	movs	r3, #2
 8007168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716e:	2303      	movs	r3, #3
 8007170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007172:	2307      	movs	r3, #7
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	4619      	mov	r1, r3
 800717c:	4805      	ldr	r0, [pc, #20]	; (8007194 <HAL_UART_MspInit+0x8c>)
 800717e:	f002 ff97 	bl	800a0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007182:	bf00      	nop
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40004400 	.word	0x40004400
 8007190:	40023800 	.word	0x40023800
 8007194:	40020c00 	.word	0x40020c00

08007198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800719c:	e7fe      	b.n	800719c <NMI_Handler+0x4>

0800719e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800719e:	b480      	push	{r7}
 80071a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071a2:	e7fe      	b.n	80071a2 <HardFault_Handler+0x4>

080071a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071a8:	e7fe      	b.n	80071a8 <MemManage_Handler+0x4>

080071aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071aa:	b480      	push	{r7}
 80071ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071ae:	e7fe      	b.n	80071ae <BusFault_Handler+0x4>

080071b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071b4:	e7fe      	b.n	80071b4 <UsageFault_Handler+0x4>

080071b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071b6:	b480      	push	{r7}
 80071b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071c8:	bf00      	nop
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071d2:	b480      	push	{r7}
 80071d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071d6:	bf00      	nop
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071e4:	f001 fe70 	bl	8008ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}

080071ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80071f0:	4803      	ldr	r0, [pc, #12]	; (8007200 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80071f2:	f007 f940 	bl	800e476 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80071f8:	f007 f93d 	bl	800e476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80071fc:	bf00      	nop
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2003f840 	.word	0x2003f840
 8007204:	2003fa3c 	.word	0x2003fa3c

08007208 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <SDIO_IRQHandler+0x10>)
 800720e:	f005 f9d9 	bl	800c5c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	2003fb9c 	.word	0x2003fb9c

0800721c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007220:	4802      	ldr	r0, [pc, #8]	; (800722c <TIM6_DAC_IRQHandler+0x10>)
 8007222:	f007 f928 	bl	800e476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	2003fb1c 	.word	0x2003fb1c

08007230 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007234:	4802      	ldr	r0, [pc, #8]	; (8007240 <TIM7_IRQHandler+0x10>)
 8007236:	f007 f91e 	bl	800e476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	2003fcc0 	.word	0x2003fcc0

08007244 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007248:	4802      	ldr	r0, [pc, #8]	; (8007254 <DMA2_Stream2_IRQHandler+0x10>)
 800724a:	f002 fcbd 	bl	8009bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	2003fc60 	.word	0x2003fc60

08007258 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800725c:	4802      	ldr	r0, [pc, #8]	; (8007268 <DMA2_Stream3_IRQHandler+0x10>)
 800725e:	f002 fcb3 	bl	8009bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2003f788 	.word	0x2003f788

0800726c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007270:	4802      	ldr	r0, [pc, #8]	; (800727c <DMA2_Stream6_IRQHandler+0x10>)
 8007272:	f002 fca9 	bl	8009bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007276:	bf00      	nop
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	2003fabc 	.word	0x2003fabc

08007280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <_sbrk+0x5c>)
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <_sbrk+0x60>)
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007294:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <_sbrk+0x64>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800729c:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <_sbrk+0x64>)
 800729e:	4a12      	ldr	r2, [pc, #72]	; (80072e8 <_sbrk+0x68>)
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072a2:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <_sbrk+0x64>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d207      	bcs.n	80072c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80072b0:	f00d fb74 	bl	801499c <__errno>
 80072b4:	4602      	mov	r2, r0
 80072b6:	230c      	movs	r3, #12
 80072b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	e009      	b.n	80072d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <_sbrk+0x64>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <_sbrk+0x64>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	4a05      	ldr	r2, [pc, #20]	; (80072e4 <_sbrk+0x64>)
 80072d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20050000 	.word	0x20050000
 80072e0:	00000800 	.word	0x00000800
 80072e4:	200002bc 	.word	0x200002bc
 80072e8:	20041e10 	.word	0x20041e10

080072ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <SystemInit+0x28>)
 80072f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f6:	4a07      	ldr	r2, [pc, #28]	; (8007314 <SystemInit+0x28>)
 80072f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007300:	4b04      	ldr	r3, [pc, #16]	; (8007314 <SystemInit+0x28>)
 8007302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007306:	609a      	str	r2, [r3, #8]
#endif
}
 8007308:	bf00      	nop
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007318:	b598      	push	{r3, r4, r7, lr}
 800731a:	af00      	add	r7, sp, #0
	lcd_init();
 800731c:	f7f9 fe7c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007320:	483a      	ldr	r0, [pc, #232]	; (800740c <cppInit+0xf4>)
 8007322:	f7fd fdef 	bl	8004f04 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007326:	2064      	movs	r0, #100	; 0x64
 8007328:	f001 fdee 	bl	8008f08 <HAL_Delay>
	power_sensor.updateValues();
 800732c:	4837      	ldr	r0, [pc, #220]	; (800740c <cppInit+0xf4>)
 800732e:	f7fd fdf7 	bl	8004f20 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007332:	f7f9 feb5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007336:	2100      	movs	r1, #0
 8007338:	2000      	movs	r0, #0
 800733a:	f7f9 fec1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800733e:	4834      	ldr	r0, [pc, #208]	; (8007410 <cppInit+0xf8>)
 8007340:	f7f9 fee8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007344:	2101      	movs	r1, #1
 8007346:	2000      	movs	r0, #0
 8007348:	f7f9 feba 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800734c:	482f      	ldr	r0, [pc, #188]	; (800740c <cppInit+0xf4>)
 800734e:	f7fd fe11 	bl	8004f74 <_ZN11PowerSensor17getButteryVoltageEv>
 8007352:	ee10 3a10 	vmov	r3, s0
 8007356:	4618      	mov	r0, r3
 8007358:	f7f9 f90e 	bl	8000578 <__aeabi_f2d>
 800735c:	4603      	mov	r3, r0
 800735e:	460c      	mov	r4, r1
 8007360:	461a      	mov	r2, r3
 8007362:	4623      	mov	r3, r4
 8007364:	482b      	ldr	r0, [pc, #172]	; (8007414 <cppInit+0xfc>)
 8007366:	f7f9 fed5 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800736a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800736e:	f001 fdcb 	bl	8008f08 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007372:	4829      	ldr	r0, [pc, #164]	; (8007418 <cppInit+0x100>)
 8007374:	f7fd f80c 	bl	8004390 <_ZN6Logger10sdCardInitEv>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <cppInit+0x76>
		led.fullColor('G');
 800737e:	2147      	movs	r1, #71	; 0x47
 8007380:	4826      	ldr	r0, [pc, #152]	; (800741c <cppInit+0x104>)
 8007382:	f7fa fdbb 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007386:	2064      	movs	r0, #100	; 0x64
 8007388:	f001 fdbe 	bl	8008f08 <HAL_Delay>
 800738c:	e006      	b.n	800739c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800738e:	2152      	movs	r1, #82	; 0x52
 8007390:	4822      	ldr	r0, [pc, #136]	; (800741c <cppInit+0x104>)
 8007392:	f7fa fdb3 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007396:	2064      	movs	r0, #100	; 0x64
 8007398:	f001 fdb6 	bl	8008f08 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800739c:	4820      	ldr	r0, [pc, #128]	; (8007420 <cppInit+0x108>)
 800739e:	f7fa ff09 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80073a2:	4820      	ldr	r0, [pc, #128]	; (8007424 <cppInit+0x10c>)
 80073a4:	f7fd fa82 	bl	80048ac <_ZN5Motor4initEv>
	encoder.init();
 80073a8:	481f      	ldr	r0, [pc, #124]	; (8007428 <cppInit+0x110>)
 80073aa:	f7f9 feff 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 80073ae:	481f      	ldr	r0, [pc, #124]	; (800742c <cppInit+0x114>)
 80073b0:	f7fa fb62 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 80073b4:	481e      	ldr	r0, [pc, #120]	; (8007430 <cppInit+0x118>)
 80073b6:	f7fc f995 	bl	80036e4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80073ba:	4819      	ldr	r0, [pc, #100]	; (8007420 <cppInit+0x108>)
 80073bc:	f7fb f83a 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80073c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073c4:	f001 fda0 	bl	8008f08 <HAL_Delay>

	led.fullColor('M');
 80073c8:	214d      	movs	r1, #77	; 0x4d
 80073ca:	4814      	ldr	r0, [pc, #80]	; (800741c <cppInit+0x104>)
 80073cc:	f7fa fd96 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 80073d0:	4816      	ldr	r0, [pc, #88]	; (800742c <cppInit+0x114>)
 80073d2:	f7fa fc1b 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80073d6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007434 <cppInit+0x11c>
 80073da:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007438 <cppInit+0x120>
 80073de:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800743c <cppInit+0x124>
 80073e2:	4817      	ldr	r0, [pc, #92]	; (8007440 <cppInit+0x128>)
 80073e4:	f7fe f9cc 	bl	8005780 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80073e8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8007444 <cppInit+0x12c>
 80073ec:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007448 <cppInit+0x130>
 80073f0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800744c <cppInit+0x134>
 80073f4:	4812      	ldr	r0, [pc, #72]	; (8007440 <cppInit+0x128>)
 80073f6:	f7fe f9dc 	bl	80057b2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80073fa:	4815      	ldr	r0, [pc, #84]	; (8007450 <cppInit+0x138>)
 80073fc:	f7fd fc8c 	bl	8004d18 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007400:	4814      	ldr	r0, [pc, #80]	; (8007454 <cppInit+0x13c>)
 8007402:	f7fd fd23 	bl	8004e4c <_ZN13PathFollowing4initEv>

}
 8007406:	bf00      	nop
 8007408:	bd98      	pop	{r3, r4, r7, pc}
 800740a:	bf00      	nop
 800740c:	200005d0 	.word	0x200005d0
 8007410:	080191b4 	.word	0x080191b4
 8007414:	080191bc 	.word	0x080191bc
 8007418:	200005f0 	.word	0x200005f0
 800741c:	200005cc 	.word	0x200005cc
 8007420:	200002c0 	.word	0x200002c0
 8007424:	200005c8 	.word	0x200005c8
 8007428:	20017d00 	.word	0x20017d00
 800742c:	200005dc 	.word	0x200005dc
 8007430:	20017da0 	.word	0x20017da0
 8007434:	3cceca68 	.word	0x3cceca68
 8007438:	4180f06f 	.word	0x4180f06f
 800743c:	3fea2d0e 	.word	0x3fea2d0e
 8007440:	20017d20 	.word	0x20017d20
 8007444:	3ab7dacd 	.word	0x3ab7dacd
 8007448:	3f5e3fbc 	.word	0x3f5e3fbc
 800744c:	3d8eefa2 	.word	0x3d8eefa2
 8007450:	20017d60 	.word	0x20017d60
 8007454:	20025cb0 	.word	0x20025cb0

08007458 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800745c:	4819      	ldr	r0, [pc, #100]	; (80074c4 <cppFlip1ms+0x6c>)
 800745e:	f7fa ff07 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007462:	4819      	ldr	r0, [pc, #100]	; (80074c8 <cppFlip1ms+0x70>)
 8007464:	f7fa fb30 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007468:	4818      	ldr	r0, [pc, #96]	; (80074cc <cppFlip1ms+0x74>)
 800746a:	f7f9 fec1 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800746e:	4818      	ldr	r0, [pc, #96]	; (80074d0 <cppFlip1ms+0x78>)
 8007470:	f7fc fb0a 	bl	8003a88 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007474:	4817      	ldr	r0, [pc, #92]	; (80074d4 <cppFlip1ms+0x7c>)
 8007476:	f7fe f9b5 	bl	80057e4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800747a:	4817      	ldr	r0, [pc, #92]	; (80074d8 <cppFlip1ms+0x80>)
 800747c:	f7fd fc30 	bl	8004ce0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007480:	4816      	ldr	r0, [pc, #88]	; (80074dc <cppFlip1ms+0x84>)
 8007482:	f7fd fded 	bl	8005060 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007486:	4816      	ldr	r0, [pc, #88]	; (80074e0 <cppFlip1ms+0x88>)
 8007488:	f7fd fa22 	bl	80048d0 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800748c:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <cppFlip1ms+0x8c>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <cppFlip1ms+0x8c>)
 8007496:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007498:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <cppFlip1ms+0x8c>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d90c      	bls.n	80074ba <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80074a0:	4809      	ldr	r0, [pc, #36]	; (80074c8 <cppFlip1ms+0x70>)
 80074a2:	f7fa fb69 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 80074a6:	eef0 7a40 	vmov.f32	s15, s0
 80074aa:	eeb0 0a67 	vmov.f32	s0, s15
 80074ae:	480e      	ldr	r0, [pc, #56]	; (80074e8 <cppFlip1ms+0x90>)
 80074b0:	f7fd ff38 	bl	8005324 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <cppFlip1ms+0x8c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80074ba:	4804      	ldr	r0, [pc, #16]	; (80074cc <cppFlip1ms+0x74>)
 80074bc:	f7f9 ff82 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200002c0 	.word	0x200002c0
 80074c8:	200005dc 	.word	0x200005dc
 80074cc:	20017d00 	.word	0x20017d00
 80074d0:	20017da0 	.word	0x20017da0
 80074d4:	20017d20 	.word	0x20017d20
 80074d8:	20017d60 	.word	0x20017d60
 80074dc:	200005b8 	.word	0x200005b8
 80074e0:	200005c8 	.word	0x200005c8
 80074e4:	2003d3d8 	.word	0x2003d3d8
 80074e8:	20025aa4 	.word	0x20025aa4

080074ec <cppFlip100ns>:

void cppFlip100ns(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <cppFlip100ns+0x10>)
 80074f2:	f7fa fe6f 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200002c0 	.word	0x200002c0

08007500 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007504:	4b08      	ldr	r3, [pc, #32]	; (8007528 <cppFlip10ms+0x28>)
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <cppFlip10ms+0x28>)
 800750e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <cppFlip10ms+0x28>)
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	2b06      	cmp	r3, #6
 8007516:	d905      	bls.n	8007524 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007518:	4804      	ldr	r0, [pc, #16]	; (800752c <cppFlip10ms+0x2c>)
 800751a:	f7fd ff3f 	bl	800539c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800751e:	4b02      	ldr	r3, [pc, #8]	; (8007528 <cppFlip10ms+0x28>)
 8007520:	2200      	movs	r2, #0
 8007522:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007524:	bf00      	nop
 8007526:	bd80      	pop	{r7, pc}
 8007528:	2003d3da 	.word	0x2003d3da
 800752c:	20025aa4 	.word	0x20025aa4

08007530 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007532:	b085      	sub	sp, #20
 8007534:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007536:	4baf      	ldr	r3, [pc, #700]	; (80077f4 <cppLoop+0x2c4>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f3bf 8f5b 	dmb	ish
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d015      	beq.n	800757e <cppLoop+0x4e>
 8007552:	48a8      	ldr	r0, [pc, #672]	; (80077f4 <cppLoop+0x2c4>)
 8007554:	f00c f9bd 	bl	80138d2 <__cxa_guard_acquire>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <cppLoop+0x4e>
 8007568:	48a3      	ldr	r0, [pc, #652]	; (80077f8 <cppLoop+0x2c8>)
 800756a:	f7fc f976 	bl	800385a <_ZN9LineTrace5getKpEv>
 800756e:	eef0 7a40 	vmov.f32	s15, s0
 8007572:	4ba2      	ldr	r3, [pc, #648]	; (80077fc <cppLoop+0x2cc>)
 8007574:	edc3 7a00 	vstr	s15, [r3]
 8007578:	489e      	ldr	r0, [pc, #632]	; (80077f4 <cppLoop+0x2c4>)
 800757a:	f00c f9b6 	bl	80138ea <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800757e:	4ba0      	ldr	r3, [pc, #640]	; (8007800 <cppLoop+0x2d0>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	f3bf 8f5b 	dmb	ish
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d015      	beq.n	80075c6 <cppLoop+0x96>
 800759a:	4899      	ldr	r0, [pc, #612]	; (8007800 <cppLoop+0x2d0>)
 800759c:	f00c f999 	bl	80138d2 <__cxa_guard_acquire>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf14      	ite	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2300      	moveq	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <cppLoop+0x96>
 80075b0:	4891      	ldr	r0, [pc, #580]	; (80077f8 <cppLoop+0x2c8>)
 80075b2:	f7fc f961 	bl	8003878 <_ZN9LineTrace5getKiEv>
 80075b6:	eef0 7a40 	vmov.f32	s15, s0
 80075ba:	4b92      	ldr	r3, [pc, #584]	; (8007804 <cppLoop+0x2d4>)
 80075bc:	edc3 7a00 	vstr	s15, [r3]
 80075c0:	488f      	ldr	r0, [pc, #572]	; (8007800 <cppLoop+0x2d0>)
 80075c2:	f00c f992 	bl	80138ea <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80075c6:	4b90      	ldr	r3, [pc, #576]	; (8007808 <cppLoop+0x2d8>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f3bf 8f5b 	dmb	ish
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d015      	beq.n	800760e <cppLoop+0xde>
 80075e2:	4889      	ldr	r0, [pc, #548]	; (8007808 <cppLoop+0x2d8>)
 80075e4:	f00c f975 	bl	80138d2 <__cxa_guard_acquire>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bf14      	ite	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	2300      	moveq	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <cppLoop+0xde>
 80075f8:	487f      	ldr	r0, [pc, #508]	; (80077f8 <cppLoop+0x2c8>)
 80075fa:	f7fc f94c 	bl	8003896 <_ZN9LineTrace5getKdEv>
 80075fe:	eef0 7a40 	vmov.f32	s15, s0
 8007602:	4b82      	ldr	r3, [pc, #520]	; (800780c <cppLoop+0x2dc>)
 8007604:	edc3 7a00 	vstr	s15, [r3]
 8007608:	487f      	ldr	r0, [pc, #508]	; (8007808 <cppLoop+0x2d8>)
 800760a:	f00c f96e 	bl	80138ea <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 800760e:	4b80      	ldr	r3, [pc, #512]	; (8007810 <cppLoop+0x2e0>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f3bf 8f5b 	dmb	ish
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d015      	beq.n	8007656 <cppLoop+0x126>
 800762a:	4879      	ldr	r0, [pc, #484]	; (8007810 <cppLoop+0x2e0>)
 800762c:	f00c f951 	bl	80138d2 <__cxa_guard_acquire>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <cppLoop+0x126>
 8007640:	486d      	ldr	r0, [pc, #436]	; (80077f8 <cppLoop+0x2c8>)
 8007642:	f7fc f994 	bl	800396e <_ZN9LineTrace17getTargetVelocityEv>
 8007646:	eef0 7a40 	vmov.f32	s15, s0
 800764a:	4b72      	ldr	r3, [pc, #456]	; (8007814 <cppLoop+0x2e4>)
 800764c:	edc3 7a00 	vstr	s15, [r3]
 8007650:	486f      	ldr	r0, [pc, #444]	; (8007810 <cppLoop+0x2e0>)
 8007652:	f00c f94a 	bl	80138ea <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007656:	4b70      	ldr	r3, [pc, #448]	; (8007818 <cppLoop+0x2e8>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f3bf 8f5b 	dmb	ish
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d015      	beq.n	800769e <cppLoop+0x16e>
 8007672:	4869      	ldr	r0, [pc, #420]	; (8007818 <cppLoop+0x2e8>)
 8007674:	f00c f92d 	bl	80138d2 <__cxa_guard_acquire>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	bf14      	ite	ne
 800767e:	2301      	movne	r3, #1
 8007680:	2300      	moveq	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <cppLoop+0x16e>
 8007688:	485b      	ldr	r0, [pc, #364]	; (80077f8 <cppLoop+0x2c8>)
 800768a:	f7fc f97f 	bl	800398c <_ZN9LineTrace14getMaxVelocityEv>
 800768e:	eef0 7a40 	vmov.f32	s15, s0
 8007692:	4b62      	ldr	r3, [pc, #392]	; (800781c <cppLoop+0x2ec>)
 8007694:	edc3 7a00 	vstr	s15, [r3]
 8007698:	485f      	ldr	r0, [pc, #380]	; (8007818 <cppLoop+0x2e8>)
 800769a:	f00c f926 	bl	80138ea <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800769e:	4b60      	ldr	r3, [pc, #384]	; (8007820 <cppLoop+0x2f0>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	f3bf 8f5b 	dmb	ish
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d015      	beq.n	80076e6 <cppLoop+0x1b6>
 80076ba:	4859      	ldr	r0, [pc, #356]	; (8007820 <cppLoop+0x2f0>)
 80076bc:	f00c f909 	bl	80138d2 <__cxa_guard_acquire>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf14      	ite	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	2300      	moveq	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <cppLoop+0x1b6>
 80076d0:	4849      	ldr	r0, [pc, #292]	; (80077f8 <cppLoop+0x2c8>)
 80076d2:	f7fc f96a 	bl	80039aa <_ZN9LineTrace15getMaxVelocity2Ev>
 80076d6:	eef0 7a40 	vmov.f32	s15, s0
 80076da:	4b52      	ldr	r3, [pc, #328]	; (8007824 <cppLoop+0x2f4>)
 80076dc:	edc3 7a00 	vstr	s15, [r3]
 80076e0:	484f      	ldr	r0, [pc, #316]	; (8007820 <cppLoop+0x2f0>)
 80076e2:	f00c f902 	bl	80138ea <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80076e6:	4b50      	ldr	r3, [pc, #320]	; (8007828 <cppLoop+0x2f8>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f3bf 8f5b 	dmb	ish
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d015      	beq.n	800772e <cppLoop+0x1fe>
 8007702:	4849      	ldr	r0, [pc, #292]	; (8007828 <cppLoop+0x2f8>)
 8007704:	f00c f8e5 	bl	80138d2 <__cxa_guard_acquire>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <cppLoop+0x1fe>
 8007718:	4837      	ldr	r0, [pc, #220]	; (80077f8 <cppLoop+0x2c8>)
 800771a:	f7fc f956 	bl	80039ca <_ZN9LineTrace14getMinVelocityEv>
 800771e:	eef0 7a40 	vmov.f32	s15, s0
 8007722:	4b42      	ldr	r3, [pc, #264]	; (800782c <cppLoop+0x2fc>)
 8007724:	edc3 7a00 	vstr	s15, [r3]
 8007728:	483f      	ldr	r0, [pc, #252]	; (8007828 <cppLoop+0x2f8>)
 800772a:	f00c f8de 	bl	80138ea <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800772e:	4b40      	ldr	r3, [pc, #256]	; (8007830 <cppLoop+0x300>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f3bf 8f5b 	dmb	ish
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	bf0c      	ite	eq
 8007740:	2301      	moveq	r3, #1
 8007742:	2300      	movne	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d015      	beq.n	8007776 <cppLoop+0x246>
 800774a:	4839      	ldr	r0, [pc, #228]	; (8007830 <cppLoop+0x300>)
 800774c:	f00c f8c1 	bl	80138d2 <__cxa_guard_acquire>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	bf14      	ite	ne
 8007756:	2301      	movne	r3, #1
 8007758:	2300      	moveq	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <cppLoop+0x246>
 8007760:	4825      	ldr	r0, [pc, #148]	; (80077f8 <cppLoop+0x2c8>)
 8007762:	f7fc f942 	bl	80039ea <_ZN9LineTrace15getMinVelocity2Ev>
 8007766:	eef0 7a40 	vmov.f32	s15, s0
 800776a:	4b32      	ldr	r3, [pc, #200]	; (8007834 <cppLoop+0x304>)
 800776c:	edc3 7a00 	vstr	s15, [r3]
 8007770:	482f      	ldr	r0, [pc, #188]	; (8007830 <cppLoop+0x300>)
 8007772:	f00c f8ba 	bl	80138ea <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <cppLoop+0x308>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f3bf 8f5b 	dmb	ish
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d015      	beq.n	80077be <cppLoop+0x28e>
 8007792:	4829      	ldr	r0, [pc, #164]	; (8007838 <cppLoop+0x308>)
 8007794:	f00c f89d 	bl	80138d2 <__cxa_guard_acquire>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <cppLoop+0x28e>
 80077a8:	4813      	ldr	r0, [pc, #76]	; (80077f8 <cppLoop+0x2c8>)
 80077aa:	f7fc f948 	bl	8003a3e <_ZN9LineTrace9getMaxAccEv>
 80077ae:	eef0 7a40 	vmov.f32	s15, s0
 80077b2:	4b22      	ldr	r3, [pc, #136]	; (800783c <cppLoop+0x30c>)
 80077b4:	edc3 7a00 	vstr	s15, [r3]
 80077b8:	481f      	ldr	r0, [pc, #124]	; (8007838 <cppLoop+0x308>)
 80077ba:	f00c f896 	bl	80138ea <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80077be:	4b20      	ldr	r3, [pc, #128]	; (8007840 <cppLoop+0x310>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f3bf 8f5b 	dmb	ish
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bf0c      	ite	eq
 80077d0:	2301      	moveq	r3, #1
 80077d2:	2300      	movne	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d03f      	beq.n	800785a <cppLoop+0x32a>
 80077da:	4819      	ldr	r0, [pc, #100]	; (8007840 <cppLoop+0x310>)
 80077dc:	f00c f879 	bl	80138d2 <__cxa_guard_acquire>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bf14      	ite	ne
 80077e6:	2301      	movne	r3, #1
 80077e8:	2300      	moveq	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d034      	beq.n	800785a <cppLoop+0x32a>
 80077f0:	e028      	b.n	8007844 <cppLoop+0x314>
 80077f2:	bf00      	nop
 80077f4:	2003d3e8 	.word	0x2003d3e8
 80077f8:	20017da0 	.word	0x20017da0
 80077fc:	2003d3e4 	.word	0x2003d3e4
 8007800:	2003d3f0 	.word	0x2003d3f0
 8007804:	2003d3ec 	.word	0x2003d3ec
 8007808:	2003d3f8 	.word	0x2003d3f8
 800780c:	2003d3f4 	.word	0x2003d3f4
 8007810:	2003d400 	.word	0x2003d400
 8007814:	2003d3fc 	.word	0x2003d3fc
 8007818:	2003d408 	.word	0x2003d408
 800781c:	2003d404 	.word	0x2003d404
 8007820:	2003d410 	.word	0x2003d410
 8007824:	2003d40c 	.word	0x2003d40c
 8007828:	2003d418 	.word	0x2003d418
 800782c:	2003d414 	.word	0x2003d414
 8007830:	2003d420 	.word	0x2003d420
 8007834:	2003d41c 	.word	0x2003d41c
 8007838:	2003d428 	.word	0x2003d428
 800783c:	2003d424 	.word	0x2003d424
 8007840:	2003d430 	.word	0x2003d430
 8007844:	48c0      	ldr	r0, [pc, #768]	; (8007b48 <cppLoop+0x618>)
 8007846:	f7fc f90c 	bl	8003a62 <_ZN9LineTrace9getMaxDecEv>
 800784a:	eef0 7a40 	vmov.f32	s15, s0
 800784e:	4bbf      	ldr	r3, [pc, #764]	; (8007b4c <cppLoop+0x61c>)
 8007850:	edc3 7a00 	vstr	s15, [r3]
 8007854:	48be      	ldr	r0, [pc, #760]	; (8007b50 <cppLoop+0x620>)
 8007856:	f00c f848 	bl	80138ea <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800785a:	48be      	ldr	r0, [pc, #760]	; (8007b54 <cppLoop+0x624>)
 800785c:	f7fd fb9a 	bl	8004f94 <_ZN12RotarySwitch8getValueEv>
 8007860:	4603      	mov	r3, r0
 8007862:	2b0f      	cmp	r3, #15
 8007864:	f201 8213 	bhi.w	8008c8e <cppLoop+0x175e>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <cppLoop+0x340>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	080078b1 	.word	0x080078b1
 8007874:	08007c4f 	.word	0x08007c4f
 8007878:	08007ce3 	.word	0x08007ce3
 800787c:	08007e7d 	.word	0x08007e7d
 8007880:	08007f49 	.word	0x08007f49
 8007884:	080081c9 	.word	0x080081c9
 8007888:	08008295 	.word	0x08008295
 800788c:	08008527 	.word	0x08008527
 8007890:	080087ad 	.word	0x080087ad
 8007894:	080087d7 	.word	0x080087d7
 8007898:	08008893 	.word	0x08008893
 800789c:	08008903 	.word	0x08008903
 80078a0:	0800899f 	.word	0x0800899f
 80078a4:	08008a39 	.word	0x08008a39
 80078a8:	08008b41 	.word	0x08008b41
 80078ac:	08008be9 	.word	0x08008be9
	case 0:
		led.fullColor('W');
 80078b0:	2157      	movs	r1, #87	; 0x57
 80078b2:	48a9      	ldr	r0, [pc, #676]	; (8007b58 <cppLoop+0x628>)
 80078b4:	f7fa fb22 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80078b8:	f7f9 fbf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80078bc:	2100      	movs	r1, #0
 80078be:	2000      	movs	r0, #0
 80078c0:	f7f9 fbfe 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80078c4:	48a0      	ldr	r0, [pc, #640]	; (8007b48 <cppLoop+0x618>)
 80078c6:	f7fb ffc8 	bl	800385a <_ZN9LineTrace5getKpEv>
 80078ca:	eeb0 7a40 	vmov.f32	s14, s0
 80078ce:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8007b5c <cppLoop+0x62c>
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	ee17 0a90 	vmov	r0, s15
 80078da:	f7f8 fe4d 	bl	8000578 <__aeabi_f2d>
 80078de:	4603      	mov	r3, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	461a      	mov	r2, r3
 80078e4:	4623      	mov	r3, r4
 80078e6:	489e      	ldr	r0, [pc, #632]	; (8007b60 <cppLoop+0x630>)
 80078e8:	f7f9 fc14 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80078ec:	2101      	movs	r1, #1
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f9 fbe6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80078f4:	4894      	ldr	r0, [pc, #592]	; (8007b48 <cppLoop+0x618>)
 80078f6:	f7fb ffbf 	bl	8003878 <_ZN9LineTrace5getKiEv>
 80078fa:	eeb0 7a40 	vmov.f32	s14, s0
 80078fe:	eddf 7a99 	vldr	s15, [pc, #612]	; 8007b64 <cppLoop+0x634>
 8007902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007906:	ee17 0a90 	vmov	r0, s15
 800790a:	f7f8 fe35 	bl	8000578 <__aeabi_f2d>
 800790e:	4605      	mov	r5, r0
 8007910:	460e      	mov	r6, r1
 8007912:	488d      	ldr	r0, [pc, #564]	; (8007b48 <cppLoop+0x618>)
 8007914:	f7fb ffbf 	bl	8003896 <_ZN9LineTrace5getKdEv>
 8007918:	eeb0 7a40 	vmov.f32	s14, s0
 800791c:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007b68 <cppLoop+0x638>
 8007920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007924:	ee17 0a90 	vmov	r0, s15
 8007928:	f7f8 fe26 	bl	8000578 <__aeabi_f2d>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	e9cd 3400 	strd	r3, r4, [sp]
 8007934:	462a      	mov	r2, r5
 8007936:	4633      	mov	r3, r6
 8007938:	488c      	ldr	r0, [pc, #560]	; (8007b6c <cppLoop+0x63c>)
 800793a:	f7f9 fbeb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800793e:	488c      	ldr	r0, [pc, #560]	; (8007b70 <cppLoop+0x640>)
 8007940:	f7fa fa78 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007944:	4603      	mov	r3, r0
 8007946:	2b08      	cmp	r3, #8
 8007948:	bf0c      	ite	eq
 800794a:	2301      	moveq	r3, #1
 800794c:	2300      	movne	r3, #0
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d022      	beq.n	800799a <cppLoop+0x46a>
			led.LR(-1, 1);
 8007954:	2201      	movs	r2, #1
 8007956:	f04f 31ff 	mov.w	r1, #4294967295
 800795a:	487f      	ldr	r0, [pc, #508]	; (8007b58 <cppLoop+0x628>)
 800795c:	f7fa fb8a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007960:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007964:	f001 fad0 	bl	8008f08 <HAL_Delay>

			selector++;
 8007968:	4b82      	ldr	r3, [pc, #520]	; (8007b74 <cppLoop+0x644>)
 800796a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800796e:	b29b      	uxth	r3, r3
 8007970:	3301      	adds	r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	b21a      	sxth	r2, r3
 8007976:	4b7f      	ldr	r3, [pc, #508]	; (8007b74 <cppLoop+0x644>)
 8007978:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800797a:	4b7e      	ldr	r3, [pc, #504]	; (8007b74 <cppLoop+0x644>)
 800797c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007980:	2b02      	cmp	r3, #2
 8007982:	dd02      	ble.n	800798a <cppLoop+0x45a>
 8007984:	4b7b      	ldr	r3, [pc, #492]	; (8007b74 <cppLoop+0x644>)
 8007986:	2200      	movs	r2, #0
 8007988:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800798a:	2200      	movs	r2, #0
 800798c:	f04f 31ff 	mov.w	r1, #4294967295
 8007990:	4871      	ldr	r0, [pc, #452]	; (8007b58 <cppLoop+0x628>)
 8007992:	f7fa fb6f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007996:	f001 b97c 	b.w	8008c92 <cppLoop+0x1762>
		else if(joy_stick.getValue() == JOY_R){
 800799a:	4875      	ldr	r0, [pc, #468]	; (8007b70 <cppLoop+0x640>)
 800799c:	f7fa fa4a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b10      	cmp	r3, #16
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d059      	beq.n	8007a64 <cppLoop+0x534>
			led.LR(-1, 1);
 80079b0:	2201      	movs	r2, #1
 80079b2:	f04f 31ff 	mov.w	r1, #4294967295
 80079b6:	4868      	ldr	r0, [pc, #416]	; (8007b58 <cppLoop+0x628>)
 80079b8:	f7fa fb5c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80079bc:	2064      	movs	r0, #100	; 0x64
 80079be:	f001 faa3 	bl	8008f08 <HAL_Delay>
			if(selector == 0){
 80079c2:	4b6c      	ldr	r3, [pc, #432]	; (8007b74 <cppLoop+0x644>)
 80079c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d113      	bne.n	80079f4 <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 80079cc:	4b6a      	ldr	r3, [pc, #424]	; (8007b78 <cppLoop+0x648>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f8 fdd1 	bl	8000578 <__aeabi_f2d>
 80079d6:	a356      	add	r3, pc, #344	; (adr r3, 8007b30 <cppLoop+0x600>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc6e 	bl	80002bc <__adddf3>
 80079e0:	4603      	mov	r3, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	4618      	mov	r0, r3
 80079e6:	4621      	mov	r1, r4
 80079e8:	f7f9 f916 	bl	8000c18 <__aeabi_d2f>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b62      	ldr	r3, [pc, #392]	; (8007b78 <cppLoop+0x648>)
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e02b      	b.n	8007a4c <cppLoop+0x51c>
			else if(selector == 1){
 80079f4:	4b5f      	ldr	r3, [pc, #380]	; (8007b74 <cppLoop+0x644>)
 80079f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d113      	bne.n	8007a26 <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 80079fe:	4b5f      	ldr	r3, [pc, #380]	; (8007b7c <cppLoop+0x64c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fdb8 	bl	8000578 <__aeabi_f2d>
 8007a08:	a34b      	add	r3, pc, #300	; (adr r3, 8007b38 <cppLoop+0x608>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fc55 	bl	80002bc <__adddf3>
 8007a12:	4603      	mov	r3, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	4618      	mov	r0, r3
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7f9 f8fd 	bl	8000c18 <__aeabi_d2f>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b56      	ldr	r3, [pc, #344]	; (8007b7c <cppLoop+0x64c>)
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e012      	b.n	8007a4c <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 8007a26:	4b56      	ldr	r3, [pc, #344]	; (8007b80 <cppLoop+0x650>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7f8 fda4 	bl	8000578 <__aeabi_f2d>
 8007a30:	a343      	add	r3, pc, #268	; (adr r3, 8007b40 <cppLoop+0x610>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fc41 	bl	80002bc <__adddf3>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	4621      	mov	r1, r4
 8007a42:	f7f9 f8e9 	bl	8000c18 <__aeabi_d2f>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b4d      	ldr	r3, [pc, #308]	; (8007b80 <cppLoop+0x650>)
 8007a4a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007a4c:	2152      	movs	r1, #82	; 0x52
 8007a4e:	4842      	ldr	r0, [pc, #264]	; (8007b58 <cppLoop+0x628>)
 8007a50:	f7fa fa54 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007a54:	2200      	movs	r2, #0
 8007a56:	f04f 31ff 	mov.w	r1, #4294967295
 8007a5a:	483f      	ldr	r0, [pc, #252]	; (8007b58 <cppLoop+0x628>)
 8007a5c:	f7fa fb0a 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a60:	f001 b917 	b.w	8008c92 <cppLoop+0x1762>
		else if(joy_stick.getValue() == JOY_L){
 8007a64:	4842      	ldr	r0, [pc, #264]	; (8007b70 <cppLoop+0x640>)
 8007a66:	f7fa f9e5 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8084 	beq.w	8007b84 <cppLoop+0x654>
			led.LR(-1, 1);
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007a82:	4835      	ldr	r0, [pc, #212]	; (8007b58 <cppLoop+0x628>)
 8007a84:	f7fa faf6 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007a88:	2064      	movs	r0, #100	; 0x64
 8007a8a:	f001 fa3d 	bl	8008f08 <HAL_Delay>
			if(selector == 0){
 8007a8e:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <cppLoop+0x644>)
 8007a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d113      	bne.n	8007ac0 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 8007a98:	4b37      	ldr	r3, [pc, #220]	; (8007b78 <cppLoop+0x648>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7f8 fd6b 	bl	8000578 <__aeabi_f2d>
 8007aa2:	a323      	add	r3, pc, #140	; (adr r3, 8007b30 <cppLoop+0x600>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fc06 	bl	80002b8 <__aeabi_dsub>
 8007aac:	4603      	mov	r3, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	f7f9 f8b0 	bl	8000c18 <__aeabi_d2f>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <cppLoop+0x648>)
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e02b      	b.n	8007b18 <cppLoop+0x5e8>
			else if(selector == 1){
 8007ac0:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <cppLoop+0x644>)
 8007ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d113      	bne.n	8007af2 <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <cppLoop+0x64c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fd52 	bl	8000578 <__aeabi_f2d>
 8007ad4:	a318      	add	r3, pc, #96	; (adr r3, 8007b38 <cppLoop+0x608>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f7f8 fbed 	bl	80002b8 <__aeabi_dsub>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f7f9 f897 	bl	8000c18 <__aeabi_d2f>
 8007aea:	4602      	mov	r2, r0
 8007aec:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <cppLoop+0x64c>)
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e012      	b.n	8007b18 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 8007af2:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <cppLoop+0x650>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fd3e 	bl	8000578 <__aeabi_f2d>
 8007afc:	a310      	add	r3, pc, #64	; (adr r3, 8007b40 <cppLoop+0x610>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fbd9 	bl	80002b8 <__aeabi_dsub>
 8007b06:	4603      	mov	r3, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f7f9 f883 	bl	8000c18 <__aeabi_d2f>
 8007b12:	4602      	mov	r2, r0
 8007b14:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <cppLoop+0x650>)
 8007b16:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007b18:	2152      	movs	r1, #82	; 0x52
 8007b1a:	480f      	ldr	r0, [pc, #60]	; (8007b58 <cppLoop+0x628>)
 8007b1c:	f7fa f9ee 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007b20:	2200      	movs	r2, #0
 8007b22:	f04f 31ff 	mov.w	r1, #4294967295
 8007b26:	480c      	ldr	r0, [pc, #48]	; (8007b58 <cppLoop+0x628>)
 8007b28:	f7fa faa4 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b2c:	f001 b8b1 	b.w	8008c92 <cppLoop+0x1762>
 8007b30:	88e368f1 	.word	0x88e368f1
 8007b34:	3ee4f8b5 	.word	0x3ee4f8b5
 8007b38:	eb1c432d 	.word	0xeb1c432d
 8007b3c:	3f1a36e2 	.word	0x3f1a36e2
 8007b40:	a0b5ed8d 	.word	0xa0b5ed8d
 8007b44:	3eb0c6f7 	.word	0x3eb0c6f7
 8007b48:	20017da0 	.word	0x20017da0
 8007b4c:	2003d42c 	.word	0x2003d42c
 8007b50:	2003d430 	.word	0x2003d430
 8007b54:	200005c4 	.word	0x200005c4
 8007b58:	200005cc 	.word	0x200005cc
 8007b5c:	447a0000 	.word	0x447a0000
 8007b60:	080191c0 	.word	0x080191c0
 8007b64:	42c80000 	.word	0x42c80000
 8007b68:	461c4000 	.word	0x461c4000
 8007b6c:	080191cc 	.word	0x080191cc
 8007b70:	200005c0 	.word	0x200005c0
 8007b74:	2003d3dc 	.word	0x2003d3dc
 8007b78:	2003d3e4 	.word	0x2003d3e4
 8007b7c:	2003d3ec 	.word	0x2003d3ec
 8007b80:	2003d3f4 	.word	0x2003d3f4
		else if(joy_stick.getValue() == JOY_D){
 8007b84:	48ae      	ldr	r0, [pc, #696]	; (8007e40 <cppLoop+0x910>)
 8007b86:	f7fa f955 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d011      	beq.n	8007bbe <cppLoop+0x68e>
			led.LR(-1, 1);
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007ba0:	48a8      	ldr	r0, [pc, #672]	; (8007e44 <cppLoop+0x914>)
 8007ba2:	f7fa fa67 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ba6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007baa:	f001 f9ad 	bl	8008f08 <HAL_Delay>
			led.LR(-1, 0);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb4:	48a3      	ldr	r0, [pc, #652]	; (8007e44 <cppLoop+0x914>)
 8007bb6:	f7fa fa5d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007bba:	f001 b86a 	b.w	8008c92 <cppLoop+0x1762>
		else if(joy_stick.getValue() == JOY_C){
 8007bbe:	48a0      	ldr	r0, [pc, #640]	; (8007e40 <cppLoop+0x910>)
 8007bc0:	f7fa f938 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	bf0c      	ite	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	2300      	movne	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f001 805e 	beq.w	8008c92 <cppLoop+0x1762>
			led.LR(-1, 1);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007bdc:	4899      	ldr	r0, [pc, #612]	; (8007e44 <cppLoop+0x914>)
 8007bde:	f7fa fa49 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007be2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007be6:	f001 f98f 	bl	8008f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4b96      	ldr	r3, [pc, #600]	; (8007e48 <cppLoop+0x918>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4996      	ldr	r1, [pc, #600]	; (8007e4c <cppLoop+0x91c>)
 8007bf4:	4896      	ldr	r0, [pc, #600]	; (8007e50 <cppLoop+0x920>)
 8007bf6:	f7f9 fd05 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	4b95      	ldr	r3, [pc, #596]	; (8007e54 <cppLoop+0x924>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	4995      	ldr	r1, [pc, #596]	; (8007e58 <cppLoop+0x928>)
 8007c04:	4892      	ldr	r0, [pc, #584]	; (8007e50 <cppLoop+0x920>)
 8007c06:	f7f9 fcfd 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4b93      	ldr	r3, [pc, #588]	; (8007e5c <cppLoop+0x92c>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	4993      	ldr	r1, [pc, #588]	; (8007e60 <cppLoop+0x930>)
 8007c14:	488e      	ldr	r0, [pc, #568]	; (8007e50 <cppLoop+0x920>)
 8007c16:	f7f9 fcf5 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007c1a:	4b8b      	ldr	r3, [pc, #556]	; (8007e48 <cppLoop+0x918>)
 8007c1c:	edd3 7a00 	vldr	s15, [r3]
 8007c20:	4b8c      	ldr	r3, [pc, #560]	; (8007e54 <cppLoop+0x924>)
 8007c22:	ed93 7a00 	vldr	s14, [r3]
 8007c26:	4b8d      	ldr	r3, [pc, #564]	; (8007e5c <cppLoop+0x92c>)
 8007c28:	edd3 6a00 	vldr	s13, [r3]
 8007c2c:	eeb0 1a66 	vmov.f32	s2, s13
 8007c30:	eef0 0a47 	vmov.f32	s1, s14
 8007c34:	eeb0 0a67 	vmov.f32	s0, s15
 8007c38:	488a      	ldr	r0, [pc, #552]	; (8007e64 <cppLoop+0x934>)
 8007c3a:	f7fb fdf5 	bl	8003828 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f04f 31ff 	mov.w	r1, #4294967295
 8007c44:	487f      	ldr	r0, [pc, #508]	; (8007e44 <cppLoop+0x914>)
 8007c46:	f7fa fa15 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007c4a:	f001 b822 	b.w	8008c92 <cppLoop+0x1762>

	case 1:
		led.fullColor('C');
 8007c4e:	2143      	movs	r1, #67	; 0x43
 8007c50:	487c      	ldr	r0, [pc, #496]	; (8007e44 <cppLoop+0x914>)
 8007c52:	f7fa f953 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c56:	f7f9 fa23 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f7f9 fa2f 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007c62:	4881      	ldr	r0, [pc, #516]	; (8007e68 <cppLoop+0x938>)
 8007c64:	f7f9 fa56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c68:	2101      	movs	r1, #1
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f9 fa28 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007c70:	4b7e      	ldr	r3, [pc, #504]	; (8007e6c <cppLoop+0x93c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f8 fc7f 	bl	8000578 <__aeabi_f2d>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4623      	mov	r3, r4
 8007c82:	487b      	ldr	r0, [pc, #492]	; (8007e70 <cppLoop+0x940>)
 8007c84:	f7f9 fa46 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007c88:	486d      	ldr	r0, [pc, #436]	; (8007e40 <cppLoop+0x910>)
 8007c8a:	f7fa f8d3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 87fb 	beq.w	8008c96 <cppLoop+0x1766>
			HAL_Delay(500);
 8007ca0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ca4:	f001 f930 	bl	8008f08 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007ca8:	4b70      	ldr	r3, [pc, #448]	; (8007e6c <cppLoop+0x93c>)
 8007caa:	edd3 7a00 	vldr	s15, [r3]
 8007cae:	eeb0 0a67 	vmov.f32	s0, s15
 8007cb2:	486c      	ldr	r0, [pc, #432]	; (8007e64 <cppLoop+0x934>)
 8007cb4:	f7fb fe0d 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	4861      	ldr	r0, [pc, #388]	; (8007e44 <cppLoop+0x914>)
 8007cc0:	f7fa f9d8 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4867      	ldr	r0, [pc, #412]	; (8007e64 <cppLoop+0x934>)
 8007cc8:	f7fc f9cc 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007ccc:	4865      	ldr	r0, [pc, #404]	; (8007e64 <cppLoop+0x934>)
 8007cce:	f7fc f8cb 	bl	8003e68 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	485a      	ldr	r0, [pc, #360]	; (8007e44 <cppLoop+0x914>)
 8007cda:	f7fa f9cb 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007cde:	f000 bfda 	b.w	8008c96 <cppLoop+0x1766>

	case 2:
		led.fullColor('B');
 8007ce2:	2142      	movs	r1, #66	; 0x42
 8007ce4:	4857      	ldr	r0, [pc, #348]	; (8007e44 <cppLoop+0x914>)
 8007ce6:	f7fa f909 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007cea:	f7f9 f9d9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007cee:	2100      	movs	r1, #0
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7f9 f9e5 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007cf6:	485c      	ldr	r0, [pc, #368]	; (8007e68 <cppLoop+0x938>)
 8007cf8:	f7f9 fa0c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	2000      	movs	r0, #0
 8007d00:	f7f9 f9de 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007d04:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <cppLoop+0x93c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7f8 fc35 	bl	8000578 <__aeabi_f2d>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	461a      	mov	r2, r3
 8007d14:	4623      	mov	r3, r4
 8007d16:	4857      	ldr	r0, [pc, #348]	; (8007e74 <cppLoop+0x944>)
 8007d18:	f7f9 f9fc 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007d1c:	4848      	ldr	r0, [pc, #288]	; (8007e40 <cppLoop+0x910>)
 8007d1e:	f7fa f889 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d023      	beq.n	8007d7a <cppLoop+0x84a>
			led.LR(-1, 1);
 8007d32:	2201      	movs	r2, #1
 8007d34:	f04f 31ff 	mov.w	r1, #4294967295
 8007d38:	4842      	ldr	r0, [pc, #264]	; (8007e44 <cppLoop+0x914>)
 8007d3a:	f7fa f99b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d3e:	2064      	movs	r0, #100	; 0x64
 8007d40:	f001 f8e2 	bl	8008f08 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007d44:	4b49      	ldr	r3, [pc, #292]	; (8007e6c <cppLoop+0x93c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7f8 fc15 	bl	8000578 <__aeabi_f2d>
 8007d4e:	a33a      	add	r3, pc, #232	; (adr r3, 8007e38 <cppLoop+0x908>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f7f8 fab2 	bl	80002bc <__adddf3>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	4621      	mov	r1, r4
 8007d60:	f7f8 ff5a 	bl	8000c18 <__aeabi_d2f>
 8007d64:	4602      	mov	r2, r0
 8007d66:	4b41      	ldr	r3, [pc, #260]	; (8007e6c <cppLoop+0x93c>)
 8007d68:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d70:	4834      	ldr	r0, [pc, #208]	; (8007e44 <cppLoop+0x914>)
 8007d72:	f7fa f97f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007d76:	f000 bf90 	b.w	8008c9a <cppLoop+0x176a>
		else if(joy_stick.getValue() == JOY_L){
 8007d7a:	4831      	ldr	r0, [pc, #196]	; (8007e40 <cppLoop+0x910>)
 8007d7c:	f7fa f85a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d023      	beq.n	8007dd8 <cppLoop+0x8a8>
			led.LR(-1, 1);
 8007d90:	2201      	movs	r2, #1
 8007d92:	f04f 31ff 	mov.w	r1, #4294967295
 8007d96:	482b      	ldr	r0, [pc, #172]	; (8007e44 <cppLoop+0x914>)
 8007d98:	f7fa f96c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d9c:	2064      	movs	r0, #100	; 0x64
 8007d9e:	f001 f8b3 	bl	8008f08 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007da2:	4b32      	ldr	r3, [pc, #200]	; (8007e6c <cppLoop+0x93c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7f8 fbe6 	bl	8000578 <__aeabi_f2d>
 8007dac:	a322      	add	r3, pc, #136	; (adr r3, 8007e38 <cppLoop+0x908>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fa81 	bl	80002b8 <__aeabi_dsub>
 8007db6:	4603      	mov	r3, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f7f8 ff2b 	bl	8000c18 <__aeabi_d2f>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <cppLoop+0x93c>)
 8007dc6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f04f 31ff 	mov.w	r1, #4294967295
 8007dce:	481d      	ldr	r0, [pc, #116]	; (8007e44 <cppLoop+0x914>)
 8007dd0:	f7fa f950 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007dd4:	f000 bf61 	b.w	8008c9a <cppLoop+0x176a>
		else if(joy_stick.getValue() == JOY_C){
 8007dd8:	4819      	ldr	r0, [pc, #100]	; (8007e40 <cppLoop+0x910>)
 8007dda:	f7fa f82b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8755 	beq.w	8008c9a <cppLoop+0x176a>
			led.LR(-1, 1);
 8007df0:	2201      	movs	r2, #1
 8007df2:	f04f 31ff 	mov.w	r1, #4294967295
 8007df6:	4813      	ldr	r0, [pc, #76]	; (8007e44 <cppLoop+0x914>)
 8007df8:	f7fa f93c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007dfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e00:	f001 f882 	bl	8008f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007e04:	2300      	movs	r3, #0
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4b18      	ldr	r3, [pc, #96]	; (8007e6c <cppLoop+0x93c>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	491a      	ldr	r1, [pc, #104]	; (8007e78 <cppLoop+0x948>)
 8007e0e:	4810      	ldr	r0, [pc, #64]	; (8007e50 <cppLoop+0x920>)
 8007e10:	f7f9 fbf8 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <cppLoop+0x93c>)
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e1e:	4811      	ldr	r0, [pc, #68]	; (8007e64 <cppLoop+0x934>)
 8007e20:	f7fb fd57 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007e24:	2200      	movs	r2, #0
 8007e26:	f04f 31ff 	mov.w	r1, #4294967295
 8007e2a:	4806      	ldr	r0, [pc, #24]	; (8007e44 <cppLoop+0x914>)
 8007e2c:	f7fa f922 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007e30:	f000 bf33 	b.w	8008c9a <cppLoop+0x176a>
 8007e34:	f3af 8000 	nop.w
 8007e38:	9999999a 	.word	0x9999999a
 8007e3c:	3fb99999 	.word	0x3fb99999
 8007e40:	200005c0 	.word	0x200005c0
 8007e44:	200005cc 	.word	0x200005cc
 8007e48:	2003d3e4 	.word	0x2003d3e4
 8007e4c:	080191dc 	.word	0x080191dc
 8007e50:	080191e4 	.word	0x080191e4
 8007e54:	2003d3ec 	.word	0x2003d3ec
 8007e58:	080191ec 	.word	0x080191ec
 8007e5c:	2003d3f4 	.word	0x2003d3f4
 8007e60:	080191f4 	.word	0x080191f4
 8007e64:	20017da0 	.word	0x20017da0
 8007e68:	080191fc 	.word	0x080191fc
 8007e6c:	2003d3fc 	.word	0x2003d3fc
 8007e70:	08019208 	.word	0x08019208
 8007e74:	08019214 	.word	0x08019214
 8007e78:	08019220 	.word	0x08019220

	case 3:
		led.fullColor('Y');
 8007e7c:	2159      	movs	r1, #89	; 0x59
 8007e7e:	48aa      	ldr	r0, [pc, #680]	; (8008128 <cppLoop+0xbf8>)
 8007e80:	f7fa f83c 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e84:	f7f9 f90c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e88:	2100      	movs	r1, #0
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7f9 f918 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007e90:	4ba6      	ldr	r3, [pc, #664]	; (800812c <cppLoop+0xbfc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7f8 fb6f 	bl	8000578 <__aeabi_f2d>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	48a3      	ldr	r0, [pc, #652]	; (8008130 <cppLoop+0xc00>)
 8007ea4:	f7f9 f936 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f7f9 f908 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007eb0:	4ba0      	ldr	r3, [pc, #640]	; (8008134 <cppLoop+0xc04>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7f8 fb5f 	bl	8000578 <__aeabi_f2d>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	489d      	ldr	r0, [pc, #628]	; (8008138 <cppLoop+0xc08>)
 8007ec4:	f7f9 f926 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007ec8:	489c      	ldr	r0, [pc, #624]	; (800813c <cppLoop+0xc0c>)
 8007eca:	f7f9 ffb3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 86df 	beq.w	8008c9e <cppLoop+0x176e>
			HAL_Delay(500);
 8007ee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ee4:	f001 f810 	bl	8008f08 <HAL_Delay>

			led.LR(1, -1);
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	2101      	movs	r1, #1
 8007eee:	488e      	ldr	r0, [pc, #568]	; (8008128 <cppLoop+0xbf8>)
 8007ef0:	f7fa f8c0 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4892      	ldr	r0, [pc, #584]	; (8008140 <cppLoop+0xc10>)
 8007ef8:	f7fc f8b4 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007efc:	4b8d      	ldr	r3, [pc, #564]	; (8008134 <cppLoop+0xc04>)
 8007efe:	edd3 7a00 	vldr	s15, [r3]
 8007f02:	eeb0 0a67 	vmov.f32	s0, s15
 8007f06:	488e      	ldr	r0, [pc, #568]	; (8008140 <cppLoop+0xc10>)
 8007f08:	f7fb fce3 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007f0c:	4b87      	ldr	r3, [pc, #540]	; (800812c <cppLoop+0xbfc>)
 8007f0e:	edd3 7a00 	vldr	s15, [r3]
 8007f12:	eeb0 0a67 	vmov.f32	s0, s15
 8007f16:	488a      	ldr	r0, [pc, #552]	; (8008140 <cppLoop+0xc10>)
 8007f18:	f7fb fcea 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007f1c:	4b85      	ldr	r3, [pc, #532]	; (8008134 <cppLoop+0xc04>)
 8007f1e:	edd3 7a00 	vldr	s15, [r3]
 8007f22:	eeb0 0a67 	vmov.f32	s0, s15
 8007f26:	4886      	ldr	r0, [pc, #536]	; (8008140 <cppLoop+0xc10>)
 8007f28:	f7fb fd01 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007f2c:	4884      	ldr	r0, [pc, #528]	; (8008140 <cppLoop+0xc10>)
 8007f2e:	f7fb f80d 	bl	8002f4c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007f32:	4883      	ldr	r0, [pc, #524]	; (8008140 <cppLoop+0xc10>)
 8007f34:	f7fb ff98 	bl	8003e68 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	487a      	ldr	r0, [pc, #488]	; (8008128 <cppLoop+0xbf8>)
 8007f40:	f7fa f898 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007f44:	f000 beab 	b.w	8008c9e <cppLoop+0x176e>

	case 4:
		led.fullColor('G');
 8007f48:	2147      	movs	r1, #71	; 0x47
 8007f4a:	4877      	ldr	r0, [pc, #476]	; (8008128 <cppLoop+0xbf8>)
 8007f4c:	f7f9 ffd6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f50:	f7f9 f8a6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f54:	2100      	movs	r1, #0
 8007f56:	2000      	movs	r0, #0
 8007f58:	f7f9 f8b2 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007f5c:	4878      	ldr	r0, [pc, #480]	; (8008140 <cppLoop+0xc10>)
 8007f5e:	f7fb fd15 	bl	800398c <_ZN9LineTrace14getMaxVelocityEv>
 8007f62:	ee10 3a10 	vmov	r3, s0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 fb06 	bl	8000578 <__aeabi_f2d>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	486e      	ldr	r0, [pc, #440]	; (8008130 <cppLoop+0xc00>)
 8007f76:	f7f9 f8cd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f7f9 f89f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007f82:	486f      	ldr	r0, [pc, #444]	; (8008140 <cppLoop+0xc10>)
 8007f84:	f7fb fd21 	bl	80039ca <_ZN9LineTrace14getMinVelocityEv>
 8007f88:	ee10 3a10 	vmov	r3, s0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 faf3 	bl	8000578 <__aeabi_f2d>
 8007f92:	4603      	mov	r3, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	461a      	mov	r2, r3
 8007f98:	4623      	mov	r3, r4
 8007f9a:	486a      	ldr	r0, [pc, #424]	; (8008144 <cppLoop+0xc14>)
 8007f9c:	f7f9 f8ba 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007fa0:	4866      	ldr	r0, [pc, #408]	; (800813c <cppLoop+0xc0c>)
 8007fa2:	f7f9 ff47 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d022      	beq.n	8007ffc <cppLoop+0xacc>
			led.LR(-1, 1);
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8007fbc:	485a      	ldr	r0, [pc, #360]	; (8008128 <cppLoop+0xbf8>)
 8007fbe:	f7fa f859 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007fc2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007fc6:	f000 ff9f 	bl	8008f08 <HAL_Delay>

			selector_vel++;
 8007fca:	4b5f      	ldr	r3, [pc, #380]	; (8008148 <cppLoop+0xc18>)
 8007fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	b21a      	sxth	r2, r3
 8007fd8:	4b5b      	ldr	r3, [pc, #364]	; (8008148 <cppLoop+0xc18>)
 8007fda:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007fdc:	4b5a      	ldr	r3, [pc, #360]	; (8008148 <cppLoop+0xc18>)
 8007fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	dd02      	ble.n	8007fec <cppLoop+0xabc>
 8007fe6:	4b58      	ldr	r3, [pc, #352]	; (8008148 <cppLoop+0xc18>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007fec:	2200      	movs	r2, #0
 8007fee:	f04f 31ff 	mov.w	r1, #4294967295
 8007ff2:	484d      	ldr	r0, [pc, #308]	; (8008128 <cppLoop+0xbf8>)
 8007ff4:	f7fa f83e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007ff8:	f000 be53 	b.w	8008ca2 <cppLoop+0x1772>
		else if(joy_stick.getValue() == JOY_R){
 8007ffc:	484f      	ldr	r0, [pc, #316]	; (800813c <cppLoop+0xc0c>)
 8007ffe:	f7f9 ff19 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008002:	4603      	mov	r3, r0
 8008004:	2b10      	cmp	r3, #16
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d03c      	beq.n	800808c <cppLoop+0xb5c>
			led.LR(-1, 1);
 8008012:	2201      	movs	r2, #1
 8008014:	f04f 31ff 	mov.w	r1, #4294967295
 8008018:	4843      	ldr	r0, [pc, #268]	; (8008128 <cppLoop+0xbf8>)
 800801a:	f7fa f82b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800801e:	2064      	movs	r0, #100	; 0x64
 8008020:	f000 ff72 	bl	8008f08 <HAL_Delay>
			if(selector_vel == 0)
 8008024:	4b48      	ldr	r3, [pc, #288]	; (8008148 <cppLoop+0xc18>)
 8008026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d113      	bne.n	8008056 <cppLoop+0xb26>
				adj_max_velocity = adj_max_velocity + 0.1;
 800802e:	4b3f      	ldr	r3, [pc, #252]	; (800812c <cppLoop+0xbfc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f7f8 faa0 	bl	8000578 <__aeabi_f2d>
 8008038:	a339      	add	r3, pc, #228	; (adr r3, 8008120 <cppLoop+0xbf0>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 f93d 	bl	80002bc <__adddf3>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	4618      	mov	r0, r3
 8008048:	4621      	mov	r1, r4
 800804a:	f7f8 fde5 	bl	8000c18 <__aeabi_d2f>
 800804e:	4602      	mov	r2, r0
 8008050:	4b36      	ldr	r3, [pc, #216]	; (800812c <cppLoop+0xbfc>)
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e012      	b.n	800807c <cppLoop+0xb4c>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008056:	4b37      	ldr	r3, [pc, #220]	; (8008134 <cppLoop+0xc04>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f7f8 fa8c 	bl	8000578 <__aeabi_f2d>
 8008060:	a32f      	add	r3, pc, #188	; (adr r3, 8008120 <cppLoop+0xbf0>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 f929 	bl	80002bc <__adddf3>
 800806a:	4603      	mov	r3, r0
 800806c:	460c      	mov	r4, r1
 800806e:	4618      	mov	r0, r3
 8008070:	4621      	mov	r1, r4
 8008072:	f7f8 fdd1 	bl	8000c18 <__aeabi_d2f>
 8008076:	4602      	mov	r2, r0
 8008078:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <cppLoop+0xc04>)
 800807a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800807c:	2200      	movs	r2, #0
 800807e:	f04f 31ff 	mov.w	r1, #4294967295
 8008082:	4829      	ldr	r0, [pc, #164]	; (8008128 <cppLoop+0xbf8>)
 8008084:	f7f9 fff6 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008088:	f000 be0b 	b.w	8008ca2 <cppLoop+0x1772>
		else if(joy_stick.getValue() == JOY_L){
 800808c:	482b      	ldr	r0, [pc, #172]	; (800813c <cppLoop+0xc0c>)
 800808e:	f7f9 fed1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008092:	4603      	mov	r3, r0
 8008094:	2b01      	cmp	r3, #1
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d054      	beq.n	800814c <cppLoop+0xc1c>
			led.LR(-1, 1);
 80080a2:	2201      	movs	r2, #1
 80080a4:	f04f 31ff 	mov.w	r1, #4294967295
 80080a8:	481f      	ldr	r0, [pc, #124]	; (8008128 <cppLoop+0xbf8>)
 80080aa:	f7f9 ffe3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080ae:	2064      	movs	r0, #100	; 0x64
 80080b0:	f000 ff2a 	bl	8008f08 <HAL_Delay>
			if(selector_vel == 0)
 80080b4:	4b24      	ldr	r3, [pc, #144]	; (8008148 <cppLoop+0xc18>)
 80080b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d113      	bne.n	80080e6 <cppLoop+0xbb6>
				adj_max_velocity = adj_max_velocity - 0.1;
 80080be:	4b1b      	ldr	r3, [pc, #108]	; (800812c <cppLoop+0xbfc>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fa58 	bl	8000578 <__aeabi_f2d>
 80080c8:	a315      	add	r3, pc, #84	; (adr r3, 8008120 <cppLoop+0xbf0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 f8f3 	bl	80002b8 <__aeabi_dsub>
 80080d2:	4603      	mov	r3, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	4618      	mov	r0, r3
 80080d8:	4621      	mov	r1, r4
 80080da:	f7f8 fd9d 	bl	8000c18 <__aeabi_d2f>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b12      	ldr	r3, [pc, #72]	; (800812c <cppLoop+0xbfc>)
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e012      	b.n	800810c <cppLoop+0xbdc>
				adj_min_velocity = adj_min_velocity - 0.1;
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <cppLoop+0xc04>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f8 fa44 	bl	8000578 <__aeabi_f2d>
 80080f0:	a30b      	add	r3, pc, #44	; (adr r3, 8008120 <cppLoop+0xbf0>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 f8df 	bl	80002b8 <__aeabi_dsub>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	4618      	mov	r0, r3
 8008100:	4621      	mov	r1, r4
 8008102:	f7f8 fd89 	bl	8000c18 <__aeabi_d2f>
 8008106:	4602      	mov	r2, r0
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <cppLoop+0xc04>)
 800810a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	f04f 31ff 	mov.w	r1, #4294967295
 8008112:	4805      	ldr	r0, [pc, #20]	; (8008128 <cppLoop+0xbf8>)
 8008114:	f7f9 ffae 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008118:	f000 bdc3 	b.w	8008ca2 <cppLoop+0x1772>
 800811c:	f3af 8000 	nop.w
 8008120:	9999999a 	.word	0x9999999a
 8008124:	3fb99999 	.word	0x3fb99999
 8008128:	200005cc 	.word	0x200005cc
 800812c:	2003d404 	.word	0x2003d404
 8008130:	0801922c 	.word	0x0801922c
 8008134:	2003d414 	.word	0x2003d414
 8008138:	08019208 	.word	0x08019208
 800813c:	200005c0 	.word	0x200005c0
 8008140:	20017da0 	.word	0x20017da0
 8008144:	08019214 	.word	0x08019214
 8008148:	2003d3e0 	.word	0x2003d3e0
		else if(joy_stick.getValue() == JOY_C){
 800814c:	48bc      	ldr	r0, [pc, #752]	; (8008440 <cppLoop+0xf10>)
 800814e:	f7f9 fe71 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008152:	4603      	mov	r3, r0
 8008154:	2b02      	cmp	r3, #2
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 859f 	beq.w	8008ca2 <cppLoop+0x1772>
			led.LR(-1, 1);
 8008164:	2201      	movs	r2, #1
 8008166:	f04f 31ff 	mov.w	r1, #4294967295
 800816a:	48b6      	ldr	r0, [pc, #728]	; (8008444 <cppLoop+0xf14>)
 800816c:	f7f9 ff82 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008170:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008174:	f000 fec8 	bl	8008f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008178:	2300      	movs	r3, #0
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	4bb2      	ldr	r3, [pc, #712]	; (8008448 <cppLoop+0xf18>)
 800817e:	2201      	movs	r2, #1
 8008180:	49b2      	ldr	r1, [pc, #712]	; (800844c <cppLoop+0xf1c>)
 8008182:	48b3      	ldr	r0, [pc, #716]	; (8008450 <cppLoop+0xf20>)
 8008184:	f7f9 fa3e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008188:	2300      	movs	r3, #0
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4bb1      	ldr	r3, [pc, #708]	; (8008454 <cppLoop+0xf24>)
 800818e:	2201      	movs	r2, #1
 8008190:	49b1      	ldr	r1, [pc, #708]	; (8008458 <cppLoop+0xf28>)
 8008192:	48af      	ldr	r0, [pc, #700]	; (8008450 <cppLoop+0xf20>)
 8008194:	f7f9 fa36 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008198:	4bab      	ldr	r3, [pc, #684]	; (8008448 <cppLoop+0xf18>)
 800819a:	edd3 7a00 	vldr	s15, [r3]
 800819e:	eeb0 0a67 	vmov.f32	s0, s15
 80081a2:	48ae      	ldr	r0, [pc, #696]	; (800845c <cppLoop+0xf2c>)
 80081a4:	f7fb fba4 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80081a8:	4baa      	ldr	r3, [pc, #680]	; (8008454 <cppLoop+0xf24>)
 80081aa:	edd3 7a00 	vldr	s15, [r3]
 80081ae:	eeb0 0a67 	vmov.f32	s0, s15
 80081b2:	48aa      	ldr	r0, [pc, #680]	; (800845c <cppLoop+0xf2c>)
 80081b4:	f7fb fbbb 	bl	800392e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80081b8:	2200      	movs	r2, #0
 80081ba:	f04f 31ff 	mov.w	r1, #4294967295
 80081be:	48a1      	ldr	r0, [pc, #644]	; (8008444 <cppLoop+0xf14>)
 80081c0:	f7f9 ff58 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80081c4:	f000 bd6d 	b.w	8008ca2 <cppLoop+0x1772>

	case 5:
		led.fullColor('M');
 80081c8:	214d      	movs	r1, #77	; 0x4d
 80081ca:	489e      	ldr	r0, [pc, #632]	; (8008444 <cppLoop+0xf14>)
 80081cc:	f7f9 fe96 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80081d0:	f7f8 ff66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081d4:	2100      	movs	r1, #0
 80081d6:	2000      	movs	r0, #0
 80081d8:	f7f8 ff72 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80081dc:	4ba0      	ldr	r3, [pc, #640]	; (8008460 <cppLoop+0xf30>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7f8 f9c9 	bl	8000578 <__aeabi_f2d>
 80081e6:	4603      	mov	r3, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	461a      	mov	r2, r3
 80081ec:	4623      	mov	r3, r4
 80081ee:	489d      	ldr	r0, [pc, #628]	; (8008464 <cppLoop+0xf34>)
 80081f0:	f7f8 ff90 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081f4:	2101      	movs	r1, #1
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 ff62 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80081fc:	4b9a      	ldr	r3, [pc, #616]	; (8008468 <cppLoop+0xf38>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f7f8 f9b9 	bl	8000578 <__aeabi_f2d>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	461a      	mov	r2, r3
 800820c:	4623      	mov	r3, r4
 800820e:	4897      	ldr	r0, [pc, #604]	; (800846c <cppLoop+0xf3c>)
 8008210:	f7f8 ff80 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008214:	488a      	ldr	r0, [pc, #552]	; (8008440 <cppLoop+0xf10>)
 8008216:	f7f9 fe0d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800821a:	4603      	mov	r3, r0
 800821c:	2b02      	cmp	r3, #2
 800821e:	bf0c      	ite	eq
 8008220:	2301      	moveq	r3, #1
 8008222:	2300      	movne	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 853d 	beq.w	8008ca6 <cppLoop+0x1776>
			HAL_Delay(500);
 800822c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008230:	f000 fe6a 	bl	8008f08 <HAL_Delay>

			led.LR(1, -1);
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	2101      	movs	r1, #1
 800823a:	4882      	ldr	r0, [pc, #520]	; (8008444 <cppLoop+0xf14>)
 800823c:	f7f9 ff1a 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008240:	2102      	movs	r1, #2
 8008242:	4886      	ldr	r0, [pc, #536]	; (800845c <cppLoop+0xf2c>)
 8008244:	f7fb ff0e 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008248:	4b87      	ldr	r3, [pc, #540]	; (8008468 <cppLoop+0xf38>)
 800824a:	edd3 7a00 	vldr	s15, [r3]
 800824e:	eeb0 0a67 	vmov.f32	s0, s15
 8008252:	4882      	ldr	r0, [pc, #520]	; (800845c <cppLoop+0xf2c>)
 8008254:	f7fb fb3d 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008258:	4b81      	ldr	r3, [pc, #516]	; (8008460 <cppLoop+0xf30>)
 800825a:	edd3 7a00 	vldr	s15, [r3]
 800825e:	eeb0 0a67 	vmov.f32	s0, s15
 8008262:	487e      	ldr	r0, [pc, #504]	; (800845c <cppLoop+0xf2c>)
 8008264:	f7fb fb53 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008268:	4b7f      	ldr	r3, [pc, #508]	; (8008468 <cppLoop+0xf38>)
 800826a:	edd3 7a00 	vldr	s15, [r3]
 800826e:	eeb0 0a67 	vmov.f32	s0, s15
 8008272:	487a      	ldr	r0, [pc, #488]	; (800845c <cppLoop+0xf2c>)
 8008274:	f7fb fb6b 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008278:	4878      	ldr	r0, [pc, #480]	; (800845c <cppLoop+0xf2c>)
 800827a:	f7fa fe67 	bl	8002f4c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800827e:	4877      	ldr	r0, [pc, #476]	; (800845c <cppLoop+0xf2c>)
 8008280:	f7fb fdf2 	bl	8003e68 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	2100      	movs	r1, #0
 800828a:	486e      	ldr	r0, [pc, #440]	; (8008444 <cppLoop+0xf14>)
 800828c:	f7f9 fef2 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008290:	f000 bd09 	b.w	8008ca6 <cppLoop+0x1776>

	case 6:
		led.fullColor('R');
 8008294:	2152      	movs	r1, #82	; 0x52
 8008296:	486b      	ldr	r0, [pc, #428]	; (8008444 <cppLoop+0xf14>)
 8008298:	f7f9 fe30 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800829c:	f7f8 ff00 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082a0:	2100      	movs	r1, #0
 80082a2:	2000      	movs	r0, #0
 80082a4:	f7f8 ff0c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80082a8:	486c      	ldr	r0, [pc, #432]	; (800845c <cppLoop+0xf2c>)
 80082aa:	f7fb fb7e 	bl	80039aa <_ZN9LineTrace15getMaxVelocity2Ev>
 80082ae:	ee10 3a10 	vmov	r3, s0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f8 f960 	bl	8000578 <__aeabi_f2d>
 80082b8:	4603      	mov	r3, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	461a      	mov	r2, r3
 80082be:	4623      	mov	r3, r4
 80082c0:	4868      	ldr	r0, [pc, #416]	; (8008464 <cppLoop+0xf34>)
 80082c2:	f7f8 ff27 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082c6:	2101      	movs	r1, #1
 80082c8:	2000      	movs	r0, #0
 80082ca:	f7f8 fef9 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80082ce:	4863      	ldr	r0, [pc, #396]	; (800845c <cppLoop+0xf2c>)
 80082d0:	f7fb fb8b 	bl	80039ea <_ZN9LineTrace15getMinVelocity2Ev>
 80082d4:	ee10 3a10 	vmov	r3, s0
 80082d8:	4618      	mov	r0, r3
 80082da:	f7f8 f94d 	bl	8000578 <__aeabi_f2d>
 80082de:	4603      	mov	r3, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	461a      	mov	r2, r3
 80082e4:	4623      	mov	r3, r4
 80082e6:	4862      	ldr	r0, [pc, #392]	; (8008470 <cppLoop+0xf40>)
 80082e8:	f7f8 ff14 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80082ec:	4854      	ldr	r0, [pc, #336]	; (8008440 <cppLoop+0xf10>)
 80082ee:	f7f9 fda1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d022      	beq.n	8008348 <cppLoop+0xe18>
			led.LR(-1, 1);
 8008302:	2201      	movs	r2, #1
 8008304:	f04f 31ff 	mov.w	r1, #4294967295
 8008308:	484e      	ldr	r0, [pc, #312]	; (8008444 <cppLoop+0xf14>)
 800830a:	f7f9 feb3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800830e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008312:	f000 fdf9 	bl	8008f08 <HAL_Delay>

			selector_vel2++;
 8008316:	4b57      	ldr	r3, [pc, #348]	; (8008474 <cppLoop+0xf44>)
 8008318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800831c:	b29b      	uxth	r3, r3
 800831e:	3301      	adds	r3, #1
 8008320:	b29b      	uxth	r3, r3
 8008322:	b21a      	sxth	r2, r3
 8008324:	4b53      	ldr	r3, [pc, #332]	; (8008474 <cppLoop+0xf44>)
 8008326:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008328:	4b52      	ldr	r3, [pc, #328]	; (8008474 <cppLoop+0xf44>)
 800832a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800832e:	2b01      	cmp	r3, #1
 8008330:	dd02      	ble.n	8008338 <cppLoop+0xe08>
 8008332:	4b50      	ldr	r3, [pc, #320]	; (8008474 <cppLoop+0xf44>)
 8008334:	2200      	movs	r2, #0
 8008336:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008338:	2200      	movs	r2, #0
 800833a:	f04f 31ff 	mov.w	r1, #4294967295
 800833e:	4841      	ldr	r0, [pc, #260]	; (8008444 <cppLoop+0xf14>)
 8008340:	f7f9 fe98 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008344:	f000 bcb1 	b.w	8008caa <cppLoop+0x177a>
		else if(joy_stick.getValue() == JOY_R){
 8008348:	483d      	ldr	r0, [pc, #244]	; (8008440 <cppLoop+0xf10>)
 800834a:	f7f9 fd73 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800834e:	4603      	mov	r3, r0
 8008350:	2b10      	cmp	r3, #16
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d03c      	beq.n	80083d8 <cppLoop+0xea8>
			led.LR(-1, 1);
 800835e:	2201      	movs	r2, #1
 8008360:	f04f 31ff 	mov.w	r1, #4294967295
 8008364:	4837      	ldr	r0, [pc, #220]	; (8008444 <cppLoop+0xf14>)
 8008366:	f7f9 fe85 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800836a:	2064      	movs	r0, #100	; 0x64
 800836c:	f000 fdcc 	bl	8008f08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008370:	4b40      	ldr	r3, [pc, #256]	; (8008474 <cppLoop+0xf44>)
 8008372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d113      	bne.n	80083a2 <cppLoop+0xe72>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800837a:	4b39      	ldr	r3, [pc, #228]	; (8008460 <cppLoop+0xf30>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f7f8 f8fa 	bl	8000578 <__aeabi_f2d>
 8008384:	a32c      	add	r3, pc, #176	; (adr r3, 8008438 <cppLoop+0xf08>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7f7 ff97 	bl	80002bc <__adddf3>
 800838e:	4603      	mov	r3, r0
 8008390:	460c      	mov	r4, r1
 8008392:	4618      	mov	r0, r3
 8008394:	4621      	mov	r1, r4
 8008396:	f7f8 fc3f 	bl	8000c18 <__aeabi_d2f>
 800839a:	4602      	mov	r2, r0
 800839c:	4b30      	ldr	r3, [pc, #192]	; (8008460 <cppLoop+0xf30>)
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e012      	b.n	80083c8 <cppLoop+0xe98>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80083a2:	4b31      	ldr	r3, [pc, #196]	; (8008468 <cppLoop+0xf38>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7f8 f8e6 	bl	8000578 <__aeabi_f2d>
 80083ac:	a322      	add	r3, pc, #136	; (adr r3, 8008438 <cppLoop+0xf08>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	f7f7 ff83 	bl	80002bc <__adddf3>
 80083b6:	4603      	mov	r3, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	4618      	mov	r0, r3
 80083bc:	4621      	mov	r1, r4
 80083be:	f7f8 fc2b 	bl	8000c18 <__aeabi_d2f>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <cppLoop+0xf38>)
 80083c6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083c8:	2200      	movs	r2, #0
 80083ca:	f04f 31ff 	mov.w	r1, #4294967295
 80083ce:	481d      	ldr	r0, [pc, #116]	; (8008444 <cppLoop+0xf14>)
 80083d0:	f7f9 fe50 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80083d4:	f000 bc69 	b.w	8008caa <cppLoop+0x177a>
		else if(joy_stick.getValue() == JOY_L){
 80083d8:	4819      	ldr	r0, [pc, #100]	; (8008440 <cppLoop+0xf10>)
 80083da:	f7f9 fd2b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d05e      	beq.n	80084ac <cppLoop+0xf7c>
			led.LR(-1, 1);
 80083ee:	2201      	movs	r2, #1
 80083f0:	f04f 31ff 	mov.w	r1, #4294967295
 80083f4:	4813      	ldr	r0, [pc, #76]	; (8008444 <cppLoop+0xf14>)
 80083f6:	f7f9 fe3d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083fa:	2064      	movs	r0, #100	; 0x64
 80083fc:	f000 fd84 	bl	8008f08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <cppLoop+0xf44>)
 8008402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d136      	bne.n	8008478 <cppLoop+0xf48>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <cppLoop+0xf30>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f7f8 f8b2 	bl	8000578 <__aeabi_f2d>
 8008414:	a308      	add	r3, pc, #32	; (adr r3, 8008438 <cppLoop+0xf08>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff4d 	bl	80002b8 <__aeabi_dsub>
 800841e:	4603      	mov	r3, r0
 8008420:	460c      	mov	r4, r1
 8008422:	4618      	mov	r0, r3
 8008424:	4621      	mov	r1, r4
 8008426:	f7f8 fbf7 	bl	8000c18 <__aeabi_d2f>
 800842a:	4602      	mov	r2, r0
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <cppLoop+0xf30>)
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	e035      	b.n	800849e <cppLoop+0xf6e>
 8008432:	bf00      	nop
 8008434:	f3af 8000 	nop.w
 8008438:	9999999a 	.word	0x9999999a
 800843c:	3fb99999 	.word	0x3fb99999
 8008440:	200005c0 	.word	0x200005c0
 8008444:	200005cc 	.word	0x200005cc
 8008448:	2003d404 	.word	0x2003d404
 800844c:	08019238 	.word	0x08019238
 8008450:	080191e4 	.word	0x080191e4
 8008454:	2003d414 	.word	0x2003d414
 8008458:	08019244 	.word	0x08019244
 800845c:	20017da0 	.word	0x20017da0
 8008460:	2003d40c 	.word	0x2003d40c
 8008464:	08019250 	.word	0x08019250
 8008468:	2003d41c 	.word	0x2003d41c
 800846c:	08019208 	.word	0x08019208
 8008470:	08019214 	.word	0x08019214
 8008474:	2003d3e2 	.word	0x2003d3e2
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008478:	4bbd      	ldr	r3, [pc, #756]	; (8008770 <cppLoop+0x1240>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f7f8 f87b 	bl	8000578 <__aeabi_f2d>
 8008482:	a3b9      	add	r3, pc, #740	; (adr r3, 8008768 <cppLoop+0x1238>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f7 ff16 	bl	80002b8 <__aeabi_dsub>
 800848c:	4603      	mov	r3, r0
 800848e:	460c      	mov	r4, r1
 8008490:	4618      	mov	r0, r3
 8008492:	4621      	mov	r1, r4
 8008494:	f7f8 fbc0 	bl	8000c18 <__aeabi_d2f>
 8008498:	4602      	mov	r2, r0
 800849a:	4bb5      	ldr	r3, [pc, #724]	; (8008770 <cppLoop+0x1240>)
 800849c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800849e:	2200      	movs	r2, #0
 80084a0:	f04f 31ff 	mov.w	r1, #4294967295
 80084a4:	48b3      	ldr	r0, [pc, #716]	; (8008774 <cppLoop+0x1244>)
 80084a6:	f7f9 fde5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80084aa:	e3fe      	b.n	8008caa <cppLoop+0x177a>
		else if(joy_stick.getValue() == JOY_C){
 80084ac:	48b2      	ldr	r0, [pc, #712]	; (8008778 <cppLoop+0x1248>)
 80084ae:	f7f9 fcc1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 83f3 	beq.w	8008caa <cppLoop+0x177a>
			led.LR(-1, 1);
 80084c4:	2201      	movs	r2, #1
 80084c6:	f04f 31ff 	mov.w	r1, #4294967295
 80084ca:	48aa      	ldr	r0, [pc, #680]	; (8008774 <cppLoop+0x1244>)
 80084cc:	f7f9 fdd2 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084d4:	f000 fd18 	bl	8008f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80084d8:	2300      	movs	r3, #0
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4ba7      	ldr	r3, [pc, #668]	; (800877c <cppLoop+0x124c>)
 80084de:	2201      	movs	r2, #1
 80084e0:	49a7      	ldr	r1, [pc, #668]	; (8008780 <cppLoop+0x1250>)
 80084e2:	48a8      	ldr	r0, [pc, #672]	; (8008784 <cppLoop+0x1254>)
 80084e4:	f7f9 f88e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <cppLoop+0x1240>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	49a5      	ldr	r1, [pc, #660]	; (8008788 <cppLoop+0x1258>)
 80084f2:	48a4      	ldr	r0, [pc, #656]	; (8008784 <cppLoop+0x1254>)
 80084f4:	f7f9 f886 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80084f8:	4ba0      	ldr	r3, [pc, #640]	; (800877c <cppLoop+0x124c>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008502:	48a2      	ldr	r0, [pc, #648]	; (800878c <cppLoop+0x125c>)
 8008504:	f7fb fa03 	bl	800390e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008508:	4b99      	ldr	r3, [pc, #612]	; (8008770 <cppLoop+0x1240>)
 800850a:	edd3 7a00 	vldr	s15, [r3]
 800850e:	eeb0 0a67 	vmov.f32	s0, s15
 8008512:	489e      	ldr	r0, [pc, #632]	; (800878c <cppLoop+0x125c>)
 8008514:	f7fb fa1b 	bl	800394e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008518:	2200      	movs	r2, #0
 800851a:	f04f 31ff 	mov.w	r1, #4294967295
 800851e:	4895      	ldr	r0, [pc, #596]	; (8008774 <cppLoop+0x1244>)
 8008520:	f7f9 fda8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008524:	e3c1      	b.n	8008caa <cppLoop+0x177a>

	case 7:
		led.fullColor('W');
 8008526:	2157      	movs	r1, #87	; 0x57
 8008528:	4892      	ldr	r0, [pc, #584]	; (8008774 <cppLoop+0x1244>)
 800852a:	f7f9 fce7 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800852e:	f7f8 fdb7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008532:	2100      	movs	r1, #0
 8008534:	2000      	movs	r0, #0
 8008536:	f7f8 fdc3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800853a:	4894      	ldr	r0, [pc, #592]	; (800878c <cppLoop+0x125c>)
 800853c:	f7fb fa7f 	bl	8003a3e <_ZN9LineTrace9getMaxAccEv>
 8008540:	ee10 3a10 	vmov	r3, s0
 8008544:	4618      	mov	r0, r3
 8008546:	f7f8 f817 	bl	8000578 <__aeabi_f2d>
 800854a:	4603      	mov	r3, r0
 800854c:	460c      	mov	r4, r1
 800854e:	461a      	mov	r2, r3
 8008550:	4623      	mov	r3, r4
 8008552:	488f      	ldr	r0, [pc, #572]	; (8008790 <cppLoop+0x1260>)
 8008554:	f7f8 fdde 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008558:	2101      	movs	r1, #1
 800855a:	2000      	movs	r0, #0
 800855c:	f7f8 fdb0 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008560:	488a      	ldr	r0, [pc, #552]	; (800878c <cppLoop+0x125c>)
 8008562:	f7fb fa7e 	bl	8003a62 <_ZN9LineTrace9getMaxDecEv>
 8008566:	ee10 3a10 	vmov	r3, s0
 800856a:	4618      	mov	r0, r3
 800856c:	f7f8 f804 	bl	8000578 <__aeabi_f2d>
 8008570:	4603      	mov	r3, r0
 8008572:	460c      	mov	r4, r1
 8008574:	461a      	mov	r2, r3
 8008576:	4623      	mov	r3, r4
 8008578:	4886      	ldr	r0, [pc, #536]	; (8008794 <cppLoop+0x1264>)
 800857a:	f7f8 fdcb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800857e:	487e      	ldr	r0, [pc, #504]	; (8008778 <cppLoop+0x1248>)
 8008580:	f7f9 fc58 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008584:	4603      	mov	r3, r0
 8008586:	2b08      	cmp	r3, #8
 8008588:	bf0c      	ite	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	2300      	movne	r3, #0
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d021      	beq.n	80085d8 <cppLoop+0x10a8>
			led.LR(-1, 1);
 8008594:	2201      	movs	r2, #1
 8008596:	f04f 31ff 	mov.w	r1, #4294967295
 800859a:	4876      	ldr	r0, [pc, #472]	; (8008774 <cppLoop+0x1244>)
 800859c:	f7f9 fd6a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085a4:	f000 fcb0 	bl	8008f08 <HAL_Delay>

			selector_acc++;
 80085a8:	4b7b      	ldr	r3, [pc, #492]	; (8008798 <cppLoop+0x1268>)
 80085aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3301      	adds	r3, #1
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	b21a      	sxth	r2, r3
 80085b6:	4b78      	ldr	r3, [pc, #480]	; (8008798 <cppLoop+0x1268>)
 80085b8:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80085ba:	4b77      	ldr	r3, [pc, #476]	; (8008798 <cppLoop+0x1268>)
 80085bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	dd02      	ble.n	80085ca <cppLoop+0x109a>
 80085c4:	4b74      	ldr	r3, [pc, #464]	; (8008798 <cppLoop+0x1268>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80085ca:	2200      	movs	r2, #0
 80085cc:	f04f 31ff 	mov.w	r1, #4294967295
 80085d0:	4868      	ldr	r0, [pc, #416]	; (8008774 <cppLoop+0x1244>)
 80085d2:	f7f9 fd4f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80085d6:	e36a      	b.n	8008cae <cppLoop+0x177e>
		else if(joy_stick.getValue() == JOY_R){
 80085d8:	4867      	ldr	r0, [pc, #412]	; (8008778 <cppLoop+0x1248>)
 80085da:	f7f9 fc2b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	bf0c      	ite	eq
 80085e4:	2301      	moveq	r3, #1
 80085e6:	2300      	movne	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d03b      	beq.n	8008666 <cppLoop+0x1136>
			led.LR(-1, 1);
 80085ee:	2201      	movs	r2, #1
 80085f0:	f04f 31ff 	mov.w	r1, #4294967295
 80085f4:	485f      	ldr	r0, [pc, #380]	; (8008774 <cppLoop+0x1244>)
 80085f6:	f7f9 fd3d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085fa:	2064      	movs	r0, #100	; 0x64
 80085fc:	f000 fc84 	bl	8008f08 <HAL_Delay>
			if(selector_acc == 0){
 8008600:	4b65      	ldr	r3, [pc, #404]	; (8008798 <cppLoop+0x1268>)
 8008602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d113      	bne.n	8008632 <cppLoop+0x1102>
				adj_acc = adj_acc + 0.1;
 800860a:	4b64      	ldr	r3, [pc, #400]	; (800879c <cppLoop+0x126c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f7f7 ffb2 	bl	8000578 <__aeabi_f2d>
 8008614:	a354      	add	r3, pc, #336	; (adr r3, 8008768 <cppLoop+0x1238>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f7 fe4f 	bl	80002bc <__adddf3>
 800861e:	4603      	mov	r3, r0
 8008620:	460c      	mov	r4, r1
 8008622:	4618      	mov	r0, r3
 8008624:	4621      	mov	r1, r4
 8008626:	f7f8 faf7 	bl	8000c18 <__aeabi_d2f>
 800862a:	4602      	mov	r2, r0
 800862c:	4b5b      	ldr	r3, [pc, #364]	; (800879c <cppLoop+0x126c>)
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e012      	b.n	8008658 <cppLoop+0x1128>
				adj_dec = adj_dec + 0.1;
 8008632:	4b5b      	ldr	r3, [pc, #364]	; (80087a0 <cppLoop+0x1270>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f7f7 ff9e 	bl	8000578 <__aeabi_f2d>
 800863c:	a34a      	add	r3, pc, #296	; (adr r3, 8008768 <cppLoop+0x1238>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fe3b 	bl	80002bc <__adddf3>
 8008646:	4603      	mov	r3, r0
 8008648:	460c      	mov	r4, r1
 800864a:	4618      	mov	r0, r3
 800864c:	4621      	mov	r1, r4
 800864e:	f7f8 fae3 	bl	8000c18 <__aeabi_d2f>
 8008652:	4602      	mov	r2, r0
 8008654:	4b52      	ldr	r3, [pc, #328]	; (80087a0 <cppLoop+0x1270>)
 8008656:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008658:	2200      	movs	r2, #0
 800865a:	f04f 31ff 	mov.w	r1, #4294967295
 800865e:	4845      	ldr	r0, [pc, #276]	; (8008774 <cppLoop+0x1244>)
 8008660:	f7f9 fd08 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008664:	e323      	b.n	8008cae <cppLoop+0x177e>
		else if(joy_stick.getValue() == JOY_L){
 8008666:	4844      	ldr	r0, [pc, #272]	; (8008778 <cppLoop+0x1248>)
 8008668:	f7f9 fbe4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800866c:	4603      	mov	r3, r0
 800866e:	2b01      	cmp	r3, #1
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d03b      	beq.n	80086f4 <cppLoop+0x11c4>
			led.LR(-1, 1);
 800867c:	2201      	movs	r2, #1
 800867e:	f04f 31ff 	mov.w	r1, #4294967295
 8008682:	483c      	ldr	r0, [pc, #240]	; (8008774 <cppLoop+0x1244>)
 8008684:	f7f9 fcf6 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008688:	2064      	movs	r0, #100	; 0x64
 800868a:	f000 fc3d 	bl	8008f08 <HAL_Delay>
			if(selector_acc == 0){
 800868e:	4b42      	ldr	r3, [pc, #264]	; (8008798 <cppLoop+0x1268>)
 8008690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d113      	bne.n	80086c0 <cppLoop+0x1190>
				adj_acc = adj_acc - 0.1;
 8008698:	4b40      	ldr	r3, [pc, #256]	; (800879c <cppLoop+0x126c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 ff6b 	bl	8000578 <__aeabi_f2d>
 80086a2:	a331      	add	r3, pc, #196	; (adr r3, 8008768 <cppLoop+0x1238>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f7f7 fe06 	bl	80002b8 <__aeabi_dsub>
 80086ac:	4603      	mov	r3, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4618      	mov	r0, r3
 80086b2:	4621      	mov	r1, r4
 80086b4:	f7f8 fab0 	bl	8000c18 <__aeabi_d2f>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b38      	ldr	r3, [pc, #224]	; (800879c <cppLoop+0x126c>)
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e012      	b.n	80086e6 <cppLoop+0x11b6>
				adj_dec = adj_dec - 0.1;
 80086c0:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <cppLoop+0x1270>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7f7 ff57 	bl	8000578 <__aeabi_f2d>
 80086ca:	a327      	add	r3, pc, #156	; (adr r3, 8008768 <cppLoop+0x1238>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f7f7 fdf2 	bl	80002b8 <__aeabi_dsub>
 80086d4:	4603      	mov	r3, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4618      	mov	r0, r3
 80086da:	4621      	mov	r1, r4
 80086dc:	f7f8 fa9c 	bl	8000c18 <__aeabi_d2f>
 80086e0:	4602      	mov	r2, r0
 80086e2:	4b2f      	ldr	r3, [pc, #188]	; (80087a0 <cppLoop+0x1270>)
 80086e4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086e6:	2200      	movs	r2, #0
 80086e8:	f04f 31ff 	mov.w	r1, #4294967295
 80086ec:	4821      	ldr	r0, [pc, #132]	; (8008774 <cppLoop+0x1244>)
 80086ee:	f7f9 fcc1 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80086f2:	e2dc      	b.n	8008cae <cppLoop+0x177e>
		else if(joy_stick.getValue() == JOY_C){
 80086f4:	4820      	ldr	r0, [pc, #128]	; (8008778 <cppLoop+0x1248>)
 80086f6:	f7f9 fb9d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 82d1 	beq.w	8008cae <cppLoop+0x177e>
			led.LR(-1, 1);
 800870c:	2201      	movs	r2, #1
 800870e:	f04f 31ff 	mov.w	r1, #4294967295
 8008712:	4818      	ldr	r0, [pc, #96]	; (8008774 <cppLoop+0x1244>)
 8008714:	f7f9 fcae 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008718:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800871c:	f000 fbf4 	bl	8008f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008720:	2300      	movs	r3, #0
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4b1d      	ldr	r3, [pc, #116]	; (800879c <cppLoop+0x126c>)
 8008726:	2201      	movs	r2, #1
 8008728:	491e      	ldr	r1, [pc, #120]	; (80087a4 <cppLoop+0x1274>)
 800872a:	4816      	ldr	r0, [pc, #88]	; (8008784 <cppLoop+0x1254>)
 800872c:	f7f8 ff6a 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008730:	2300      	movs	r3, #0
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <cppLoop+0x1270>)
 8008736:	2201      	movs	r2, #1
 8008738:	491b      	ldr	r1, [pc, #108]	; (80087a8 <cppLoop+0x1278>)
 800873a:	4812      	ldr	r0, [pc, #72]	; (8008784 <cppLoop+0x1254>)
 800873c:	f7f8 ff62 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008740:	4b16      	ldr	r3, [pc, #88]	; (800879c <cppLoop+0x126c>)
 8008742:	edd3 7a00 	vldr	s15, [r3]
 8008746:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <cppLoop+0x1270>)
 8008748:	ed93 7a00 	vldr	s14, [r3]
 800874c:	eef0 0a47 	vmov.f32	s1, s14
 8008750:	eeb0 0a67 	vmov.f32	s0, s15
 8008754:	480d      	ldr	r0, [pc, #52]	; (800878c <cppLoop+0x125c>)
 8008756:	f7fb f958 	bl	8003a0a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800875a:	2200      	movs	r2, #0
 800875c:	f04f 31ff 	mov.w	r1, #4294967295
 8008760:	4804      	ldr	r0, [pc, #16]	; (8008774 <cppLoop+0x1244>)
 8008762:	f7f9 fc87 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008766:	e2a2      	b.n	8008cae <cppLoop+0x177e>
 8008768:	9999999a 	.word	0x9999999a
 800876c:	3fb99999 	.word	0x3fb99999
 8008770:	2003d41c 	.word	0x2003d41c
 8008774:	200005cc 	.word	0x200005cc
 8008778:	200005c0 	.word	0x200005c0
 800877c:	2003d40c 	.word	0x2003d40c
 8008780:	0801925c 	.word	0x0801925c
 8008784:	080191e4 	.word	0x080191e4
 8008788:	08019268 	.word	0x08019268
 800878c:	20017da0 	.word	0x20017da0
 8008790:	08019274 	.word	0x08019274
 8008794:	08019280 	.word	0x08019280
 8008798:	2003d3de 	.word	0x2003d3de
 800879c:	2003d424 	.word	0x2003d424
 80087a0:	2003d42c 	.word	0x2003d42c
 80087a4:	0801928c 	.word	0x0801928c
 80087a8:	08019294 	.word	0x08019294

	case 8:
		led.fullColor('~');
 80087ac:	217e      	movs	r1, #126	; 0x7e
 80087ae:	48ca      	ldr	r0, [pc, #808]	; (8008ad8 <cppLoop+0x15a8>)
 80087b0:	f7f9 fba4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80087b4:	f7f8 fc74 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087b8:	2100      	movs	r1, #0
 80087ba:	2000      	movs	r0, #0
 80087bc:	f7f8 fc80 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 80087c0:	48c6      	ldr	r0, [pc, #792]	; (8008adc <cppLoop+0x15ac>)
 80087c2:	f7f8 fca7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087c6:	2101      	movs	r1, #1
 80087c8:	2000      	movs	r0, #0
 80087ca:	f7f8 fc79 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80087ce:	48c4      	ldr	r0, [pc, #784]	; (8008ae0 <cppLoop+0x15b0>)
 80087d0:	f7f8 fca0 	bl	8001114 <lcd_printf>

		break;
 80087d4:	e27a      	b.n	8008ccc <cppLoop+0x179c>

	case 9:
		led.fullColor('~');
 80087d6:	217e      	movs	r1, #126	; 0x7e
 80087d8:	48bf      	ldr	r0, [pc, #764]	; (8008ad8 <cppLoop+0x15a8>)
 80087da:	f7f9 fb8f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80087de:	f7f8 fc5f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087e2:	2100      	movs	r1, #0
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7f8 fc6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80087ea:	48be      	ldr	r0, [pc, #760]	; (8008ae4 <cppLoop+0x15b4>)
 80087ec:	f7f8 fc92 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087f0:	2101      	movs	r1, #1
 80087f2:	2000      	movs	r0, #0
 80087f4:	f7f8 fc64 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80087f8:	48bb      	ldr	r0, [pc, #748]	; (8008ae8 <cppLoop+0x15b8>)
 80087fa:	f7f8 fc8b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087fe:	48bb      	ldr	r0, [pc, #748]	; (8008aec <cppLoop+0x15bc>)
 8008800:	f7f9 fb18 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008804:	4603      	mov	r3, r0
 8008806:	2b02      	cmp	r3, #2
 8008808:	bf0c      	ite	eq
 800880a:	2301      	moveq	r3, #1
 800880c:	2300      	movne	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 824e 	beq.w	8008cb2 <cppLoop+0x1782>
			led.LR(-1, 1);
 8008816:	2201      	movs	r2, #1
 8008818:	f04f 31ff 	mov.w	r1, #4294967295
 800881c:	48ae      	ldr	r0, [pc, #696]	; (8008ad8 <cppLoop+0x15a8>)
 800881e:	f7f9 fc29 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008826:	f000 fb6f 	bl	8008f08 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800882a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8008af0 <cppLoop+0x15c0>
 800882e:	48b1      	ldr	r0, [pc, #708]	; (8008af4 <cppLoop+0x15c4>)
 8008830:	f7fb f840 	bl	80038b4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008834:	48af      	ldr	r0, [pc, #700]	; (8008af4 <cppLoop+0x15c4>)
 8008836:	f7fb fa75 	bl	8003d24 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800883a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800883e:	f000 fb63 	bl	8008f08 <HAL_Delay>

			led.fullColor('R');
 8008842:	2152      	movs	r1, #82	; 0x52
 8008844:	48a4      	ldr	r0, [pc, #656]	; (8008ad8 <cppLoop+0x15a8>)
 8008846:	f7f9 fb59 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800884a:	48ab      	ldr	r0, [pc, #684]	; (8008af8 <cppLoop+0x15c8>)
 800884c:	f7f8 fe2c 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008850:	f242 7010 	movw	r0, #10000	; 0x2710
 8008854:	f000 fb58 	bl	8008f08 <HAL_Delay>

			line_trace.stop();
 8008858:	48a6      	ldr	r0, [pc, #664]	; (8008af4 <cppLoop+0x15c4>)
 800885a:	f7fb fa8f 	bl	8003d7c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800885e:	49a7      	ldr	r1, [pc, #668]	; (8008afc <cppLoop+0x15cc>)
 8008860:	48a7      	ldr	r0, [pc, #668]	; (8008b00 <cppLoop+0x15d0>)
 8008862:	f7f8 fe5a 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8008866:	48a4      	ldr	r0, [pc, #656]	; (8008af8 <cppLoop+0x15c8>)
 8008868:	f7f8 fde2 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 800886c:	eef0 7a40 	vmov.f32	s15, s0
 8008870:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	2201      	movs	r2, #1
 8008878:	4619      	mov	r1, r3
 800887a:	2001      	movs	r0, #1
 800887c:	f7f8 fe70 	bl	8001560 <sd_write_float>
			user_fclose();
 8008880:	f7f8 fe5e 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	f04f 31ff 	mov.w	r1, #4294967295
 800888a:	4893      	ldr	r0, [pc, #588]	; (8008ad8 <cppLoop+0x15a8>)
 800888c:	f7f9 fbf2 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008890:	e20f      	b.n	8008cb2 <cppLoop+0x1782>

	case 10:
		led.fullColor('~');
 8008892:	217e      	movs	r1, #126	; 0x7e
 8008894:	4890      	ldr	r0, [pc, #576]	; (8008ad8 <cppLoop+0x15a8>)
 8008896:	f7f9 fb31 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800889a:	f7f8 fc01 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800889e:	2100      	movs	r1, #0
 80088a0:	2000      	movs	r0, #0
 80088a2:	f7f8 fc0d 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80088a6:	4897      	ldr	r0, [pc, #604]	; (8008b04 <cppLoop+0x15d4>)
 80088a8:	f7f8 fc34 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088ac:	2101      	movs	r1, #1
 80088ae:	2000      	movs	r0, #0
 80088b0:	f7f8 fc06 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80088b4:	4894      	ldr	r0, [pc, #592]	; (8008b08 <cppLoop+0x15d8>)
 80088b6:	f7f8 fc2d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80088ba:	488c      	ldr	r0, [pc, #560]	; (8008aec <cppLoop+0x15bc>)
 80088bc:	f7f9 faba 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 81f2 	beq.w	8008cb6 <cppLoop+0x1786>
			HAL_Delay(500);
 80088d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088d6:	f000 fb17 	bl	8008f08 <HAL_Delay>
			led.LR(-1, 1);
 80088da:	2201      	movs	r2, #1
 80088dc:	f04f 31ff 	mov.w	r1, #4294967295
 80088e0:	487d      	ldr	r0, [pc, #500]	; (8008ad8 <cppLoop+0x15a8>)
 80088e2:	f7f9 fbc7 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80088e6:	2101      	movs	r1, #1
 80088e8:	4882      	ldr	r0, [pc, #520]	; (8008af4 <cppLoop+0x15c4>)
 80088ea:	f7fb fbbb 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80088ee:	4881      	ldr	r0, [pc, #516]	; (8008af4 <cppLoop+0x15c4>)
 80088f0:	f7fa fbca 	bl	8003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80088f4:	2200      	movs	r2, #0
 80088f6:	f04f 31ff 	mov.w	r1, #4294967295
 80088fa:	4877      	ldr	r0, [pc, #476]	; (8008ad8 <cppLoop+0x15a8>)
 80088fc:	f7f9 fbba 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008900:	e1d9      	b.n	8008cb6 <cppLoop+0x1786>

	case 11:
		led.fullColor('~');
 8008902:	217e      	movs	r1, #126	; 0x7e
 8008904:	4874      	ldr	r0, [pc, #464]	; (8008ad8 <cppLoop+0x15a8>)
 8008906:	f7f9 faf9 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800890a:	f7f8 fbc9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800890e:	2100      	movs	r1, #0
 8008910:	2000      	movs	r0, #0
 8008912:	f7f8 fbd5 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8008916:	487d      	ldr	r0, [pc, #500]	; (8008b0c <cppLoop+0x15dc>)
 8008918:	f7f8 fbfc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800891c:	2101      	movs	r1, #1
 800891e:	2000      	movs	r0, #0
 8008920:	f7f8 fbce 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008924:	487a      	ldr	r0, [pc, #488]	; (8008b10 <cppLoop+0x15e0>)
 8008926:	f7f8 fbf5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800892a:	4870      	ldr	r0, [pc, #448]	; (8008aec <cppLoop+0x15bc>)
 800892c:	f7f9 fa82 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008930:	4603      	mov	r3, r0
 8008932:	2b02      	cmp	r3, #2
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 81bc 	beq.w	8008cba <cppLoop+0x178a>
			HAL_Delay(1500);
 8008942:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008946:	f000 fadf 	bl	8008f08 <HAL_Delay>
			led.LR(-1, 1);
 800894a:	2201      	movs	r2, #1
 800894c:	f04f 31ff 	mov.w	r1, #4294967295
 8008950:	4861      	ldr	r0, [pc, #388]	; (8008ad8 <cppLoop+0x15a8>)
 8008952:	f7f9 fb8f 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008956:	486f      	ldr	r0, [pc, #444]	; (8008b14 <cppLoop+0x15e4>)
 8008958:	f7fb ff75 	bl	8004846 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800895c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8008ac0 <cppLoop+0x1590>
 8008960:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8008ac8 <cppLoop+0x1598>
 8008964:	486c      	ldr	r0, [pc, #432]	; (8008b18 <cppLoop+0x15e8>)
 8008966:	f7fc f803 	bl	8004970 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800896a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800896e:	f000 facb 	bl	8008f08 <HAL_Delay>

			logger.stop();
 8008972:	4868      	ldr	r0, [pc, #416]	; (8008b14 <cppLoop+0x15e4>)
 8008974:	f7fb ff78 	bl	8004868 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8008978:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8008ad0 <cppLoop+0x15a0>
 800897c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8008ad0 <cppLoop+0x15a0>
 8008980:	4865      	ldr	r0, [pc, #404]	; (8008b18 <cppLoop+0x15e8>)
 8008982:	f7fb fff5 	bl	8004970 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008986:	4a65      	ldr	r2, [pc, #404]	; (8008b1c <cppLoop+0x15ec>)
 8008988:	4965      	ldr	r1, [pc, #404]	; (8008b20 <cppLoop+0x15f0>)
 800898a:	4862      	ldr	r0, [pc, #392]	; (8008b14 <cppLoop+0x15e4>)
 800898c:	f7fb fe6b 	bl	8004666 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008990:	2200      	movs	r2, #0
 8008992:	f04f 31ff 	mov.w	r1, #4294967295
 8008996:	4850      	ldr	r0, [pc, #320]	; (8008ad8 <cppLoop+0x15a8>)
 8008998:	f7f9 fb6c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800899c:	e18d      	b.n	8008cba <cppLoop+0x178a>

	case 12:
		led.fullColor('~');
 800899e:	217e      	movs	r1, #126	; 0x7e
 80089a0:	484d      	ldr	r0, [pc, #308]	; (8008ad8 <cppLoop+0x15a8>)
 80089a2:	f7f9 faab 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80089a6:	f7f8 fb7b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089aa:	2100      	movs	r1, #0
 80089ac:	2000      	movs	r0, #0
 80089ae:	f7f8 fb87 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80089b2:	485c      	ldr	r0, [pc, #368]	; (8008b24 <cppLoop+0x15f4>)
 80089b4:	f7f8 fbae 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089b8:	2101      	movs	r1, #1
 80089ba:	2000      	movs	r0, #0
 80089bc:	f7f8 fb80 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80089c0:	4859      	ldr	r0, [pc, #356]	; (8008b28 <cppLoop+0x15f8>)
 80089c2:	f7f8 fba7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80089c6:	4849      	ldr	r0, [pc, #292]	; (8008aec <cppLoop+0x15bc>)
 80089c8:	f7f9 fa34 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	bf0c      	ite	eq
 80089d2:	2301      	moveq	r3, #1
 80089d4:	2300      	movne	r3, #0
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8170 	beq.w	8008cbe <cppLoop+0x178e>
			HAL_Delay(1500);
 80089de:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80089e2:	f000 fa91 	bl	8008f08 <HAL_Delay>
			led.LR(-1, 1);
 80089e6:	2201      	movs	r2, #1
 80089e8:	f04f 31ff 	mov.w	r1, #4294967295
 80089ec:	483a      	ldr	r0, [pc, #232]	; (8008ad8 <cppLoop+0x15a8>)
 80089ee:	f7f9 fb41 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80089f2:	4848      	ldr	r0, [pc, #288]	; (8008b14 <cppLoop+0x15e4>)
 80089f4:	f7fb ff27 	bl	8004846 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80089f8:	484c      	ldr	r0, [pc, #304]	; (8008b2c <cppLoop+0x15fc>)
 80089fa:	f7fc ff06 	bl	800580a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80089fe:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8008af0 <cppLoop+0x15c0>
 8008a02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a06:	4849      	ldr	r0, [pc, #292]	; (8008b2c <cppLoop+0x15fc>)
 8008a08:	f7fc fe92 	bl	8005730 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8008a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a10:	f000 fa7a 	bl	8008f08 <HAL_Delay>

			logger.stop();
 8008a14:	483f      	ldr	r0, [pc, #252]	; (8008b14 <cppLoop+0x15e4>)
 8008a16:	f7fb ff27 	bl	8004868 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8008a1a:	4844      	ldr	r0, [pc, #272]	; (8008b2c <cppLoop+0x15fc>)
 8008a1c:	f7fc ff08 	bl	8005830 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008a20:	4a43      	ldr	r2, [pc, #268]	; (8008b30 <cppLoop+0x1600>)
 8008a22:	493f      	ldr	r1, [pc, #252]	; (8008b20 <cppLoop+0x15f0>)
 8008a24:	483b      	ldr	r0, [pc, #236]	; (8008b14 <cppLoop+0x15e4>)
 8008a26:	f7fb fe1e 	bl	8004666 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a30:	4829      	ldr	r0, [pc, #164]	; (8008ad8 <cppLoop+0x15a8>)
 8008a32:	f7f9 fb1f 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008a36:	e142      	b.n	8008cbe <cppLoop+0x178e>

	case 13:
		led.fullColor('~');
 8008a38:	217e      	movs	r1, #126	; 0x7e
 8008a3a:	4827      	ldr	r0, [pc, #156]	; (8008ad8 <cppLoop+0x15a8>)
 8008a3c:	f7f9 fa5e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a40:	f7f8 fb2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a44:	2100      	movs	r1, #0
 8008a46:	2000      	movs	r0, #0
 8008a48:	f7f8 fb3a 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8008a4c:	4839      	ldr	r0, [pc, #228]	; (8008b34 <cppLoop+0x1604>)
 8008a4e:	f7f8 fb61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a52:	2101      	movs	r1, #1
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f8 fb33 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008a5a:	482d      	ldr	r0, [pc, #180]	; (8008b10 <cppLoop+0x15e0>)
 8008a5c:	f7f8 fb5a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a60:	4822      	ldr	r0, [pc, #136]	; (8008aec <cppLoop+0x15bc>)
 8008a62:	f7f9 f9e7 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 8125 	beq.w	8008cc2 <cppLoop+0x1792>
			led.LR(-1, 1);
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7e:	4816      	ldr	r0, [pc, #88]	; (8008ad8 <cppLoop+0x15a8>)
 8008a80:	f7f9 faf8 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008a84:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008a88:	f000 fa3e 	bl	8008f08 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8008a8c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008b38 <cppLoop+0x1608>
 8008a90:	482a      	ldr	r0, [pc, #168]	; (8008b3c <cppLoop+0x160c>)
 8008a92:	f7fc fcd9 	bl	8005448 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008a96:	4829      	ldr	r0, [pc, #164]	; (8008b3c <cppLoop+0x160c>)
 8008a98:	f7fc fce6 	bl	8005468 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8008a9c:	f244 405c 	movw	r0, #17500	; 0x445c
 8008aa0:	f000 fa32 	bl	8008f08 <HAL_Delay>
			sys_ident.stop();
 8008aa4:	4825      	ldr	r0, [pc, #148]	; (8008b3c <cppLoop+0x160c>)
 8008aa6:	f7fc fcf3 	bl	8005490 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8008aaa:	4824      	ldr	r0, [pc, #144]	; (8008b3c <cppLoop+0x160c>)
 8008aac:	f7fc fc5a 	bl	8005364 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab6:	4808      	ldr	r0, [pc, #32]	; (8008ad8 <cppLoop+0x15a8>)
 8008ab8:	f7f9 fadc 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008abc:	e101      	b.n	8008cc2 <cppLoop+0x1792>
 8008abe:	bf00      	nop
 8008ac0:	33333333 	.word	0x33333333
 8008ac4:	bfd33333 	.word	0xbfd33333
 8008ac8:	33333333 	.word	0x33333333
 8008acc:	3fd33333 	.word	0x3fd33333
	...
 8008ad8:	200005cc 	.word	0x200005cc
 8008adc:	0801929c 	.word	0x0801929c
 8008ae0:	080192a8 	.word	0x080192a8
 8008ae4:	080192b4 	.word	0x080192b4
 8008ae8:	080192bc 	.word	0x080192bc
 8008aec:	200005c0 	.word	0x200005c0
 8008af0:	00000000 	.word	0x00000000
 8008af4:	20017da0 	.word	0x20017da0
 8008af8:	20017d00 	.word	0x20017d00
 8008afc:	080192c8 	.word	0x080192c8
 8008b00:	080192d0 	.word	0x080192d0
 8008b04:	080192dc 	.word	0x080192dc
 8008b08:	080192e8 	.word	0x080192e8
 8008b0c:	080192f4 	.word	0x080192f4
 8008b10:	080192fc 	.word	0x080192fc
 8008b14:	200005f0 	.word	0x200005f0
 8008b18:	200005c8 	.word	0x200005c8
 8008b1c:	08019304 	.word	0x08019304
 8008b20:	08019310 	.word	0x08019310
 8008b24:	0801931c 	.word	0x0801931c
 8008b28:	08019320 	.word	0x08019320
 8008b2c:	20017d20 	.word	0x20017d20
 8008b30:	0801932c 	.word	0x0801932c
 8008b34:	08019338 	.word	0x08019338
 8008b38:	3e99999a 	.word	0x3e99999a
 8008b3c:	20025aa4 	.word	0x20025aa4

	case 14:
		led.fullColor('W');
 8008b40:	2157      	movs	r1, #87	; 0x57
 8008b42:	4866      	ldr	r0, [pc, #408]	; (8008cdc <cppLoop+0x17ac>)
 8008b44:	f7f9 f9da 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b48:	f7f8 faaa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f7f8 fab6 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008b54:	4862      	ldr	r0, [pc, #392]	; (8008ce0 <cppLoop+0x17b0>)
 8008b56:	f7f8 fadd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f7f8 faaf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008b62:	4b60      	ldr	r3, [pc, #384]	; (8008ce4 <cppLoop+0x17b4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7f7 fd06 	bl	8000578 <__aeabi_f2d>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	461a      	mov	r2, r3
 8008b72:	4623      	mov	r3, r4
 8008b74:	485c      	ldr	r0, [pc, #368]	; (8008ce8 <cppLoop+0x17b8>)
 8008b76:	f7f8 facd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008b7a:	485c      	ldr	r0, [pc, #368]	; (8008cec <cppLoop+0x17bc>)
 8008b7c:	f7f9 f95a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	bf0c      	ite	eq
 8008b86:	2301      	moveq	r3, #1
 8008b88:	2300      	movne	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 809a 	beq.w	8008cc6 <cppLoop+0x1796>
			HAL_Delay(500);
 8008b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b96:	f000 f9b7 	bl	8008f08 <HAL_Delay>

			led.LR(1, -1);
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	484e      	ldr	r0, [pc, #312]	; (8008cdc <cppLoop+0x17ac>)
 8008ba2:	f7f9 fa67 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008ba6:	2102      	movs	r1, #2
 8008ba8:	4851      	ldr	r0, [pc, #324]	; (8008cf0 <cppLoop+0x17c0>)
 8008baa:	f7fb fa5b 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008bae:	4b4d      	ldr	r3, [pc, #308]	; (8008ce4 <cppLoop+0x17b4>)
 8008bb0:	edd3 7a00 	vldr	s15, [r3]
 8008bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb8:	484d      	ldr	r0, [pc, #308]	; (8008cf0 <cppLoop+0x17c0>)
 8008bba:	f7fa fe8a 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008bbe:	4b49      	ldr	r3, [pc, #292]	; (8008ce4 <cppLoop+0x17b4>)
 8008bc0:	edd3 7a00 	vldr	s15, [r3]
 8008bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc8:	4849      	ldr	r0, [pc, #292]	; (8008cf0 <cppLoop+0x17c0>)
 8008bca:	f7fa fe91 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008bce:	4848      	ldr	r0, [pc, #288]	; (8008cf0 <cppLoop+0x17c0>)
 8008bd0:	f7fa fa5a 	bl	8003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008bd4:	4846      	ldr	r0, [pc, #280]	; (8008cf0 <cppLoop+0x17c0>)
 8008bd6:	f7fb f947 	bl	8003e68 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	2100      	movs	r1, #0
 8008be0:	483e      	ldr	r0, [pc, #248]	; (8008cdc <cppLoop+0x17ac>)
 8008be2:	f7f9 fa47 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008be6:	e06e      	b.n	8008cc6 <cppLoop+0x1796>

	case 15:
		led.fullColor('W');
 8008be8:	2157      	movs	r1, #87	; 0x57
 8008bea:	483c      	ldr	r0, [pc, #240]	; (8008cdc <cppLoop+0x17ac>)
 8008bec:	f7f9 f986 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bf0:	f7f8 fa56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f7f8 fa62 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008bfc:	483d      	ldr	r0, [pc, #244]	; (8008cf4 <cppLoop+0x17c4>)
 8008bfe:	f7f8 fa89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c02:	2101      	movs	r1, #1
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f8 fa5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008c0a:	4b3b      	ldr	r3, [pc, #236]	; (8008cf8 <cppLoop+0x17c8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7f7 fcb2 	bl	8000578 <__aeabi_f2d>
 8008c14:	4603      	mov	r3, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4623      	mov	r3, r4
 8008c1c:	4832      	ldr	r0, [pc, #200]	; (8008ce8 <cppLoop+0x17b8>)
 8008c1e:	f7f8 fa79 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008c22:	4832      	ldr	r0, [pc, #200]	; (8008cec <cppLoop+0x17bc>)
 8008c24:	f7f9 f906 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d048      	beq.n	8008cca <cppLoop+0x179a>
			HAL_Delay(500);
 8008c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c3c:	f000 f964 	bl	8008f08 <HAL_Delay>

			led.LR(1, -1);
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	2101      	movs	r1, #1
 8008c46:	4825      	ldr	r0, [pc, #148]	; (8008cdc <cppLoop+0x17ac>)
 8008c48:	f7f9 fa14 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4828      	ldr	r0, [pc, #160]	; (8008cf0 <cppLoop+0x17c0>)
 8008c50:	f7fb fa08 	bl	8004064 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008c54:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <cppLoop+0x17c8>)
 8008c56:	edd3 7a00 	vldr	s15, [r3]
 8008c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c5e:	4824      	ldr	r0, [pc, #144]	; (8008cf0 <cppLoop+0x17c0>)
 8008c60:	f7fa fe37 	bl	80038d2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008c64:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <cppLoop+0x17c8>)
 8008c66:	edd3 7a00 	vldr	s15, [r3]
 8008c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c6e:	4820      	ldr	r0, [pc, #128]	; (8008cf0 <cppLoop+0x17c0>)
 8008c70:	f7fa fe3e 	bl	80038f0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008c74:	481e      	ldr	r0, [pc, #120]	; (8008cf0 <cppLoop+0x17c0>)
 8008c76:	f7fa fa07 	bl	8003088 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008c7a:	481d      	ldr	r0, [pc, #116]	; (8008cf0 <cppLoop+0x17c0>)
 8008c7c:	f7fb f8f4 	bl	8003e68 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	2100      	movs	r1, #0
 8008c86:	4815      	ldr	r0, [pc, #84]	; (8008cdc <cppLoop+0x17ac>)
 8008c88:	f7f9 f9f4 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008c8c:	e01d      	b.n	8008cca <cppLoop+0x179a>

	default:
		break;
 8008c8e:	bf00      	nop
 8008c90:	e01c      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008c92:	bf00      	nop
 8008c94:	e01a      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008c96:	bf00      	nop
 8008c98:	e018      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008c9a:	bf00      	nop
 8008c9c:	e016      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008c9e:	bf00      	nop
 8008ca0:	e014      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008ca2:	bf00      	nop
 8008ca4:	e012      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008ca6:	bf00      	nop
 8008ca8:	e010      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008caa:	bf00      	nop
 8008cac:	e00e      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cae:	bf00      	nop
 8008cb0:	e00c      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cb2:	bf00      	nop
 8008cb4:	e00a      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cb6:	bf00      	nop
 8008cb8:	e008      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cba:	bf00      	nop
 8008cbc:	e006      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cbe:	bf00      	nop
 8008cc0:	e004      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cc2:	bf00      	nop
 8008cc4:	e002      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cc6:	bf00      	nop
 8008cc8:	e000      	b.n	8008ccc <cppLoop+0x179c>
		break;
 8008cca:	bf00      	nop

	}

	HAL_Delay(30);
 8008ccc:	201e      	movs	r0, #30
 8008cce:	f000 f91b 	bl	8008f08 <HAL_Delay>

}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200005cc 	.word	0x200005cc
 8008ce0:	08019340 	.word	0x08019340
 8008ce4:	2003d40c 	.word	0x2003d40c
 8008ce8:	08019208 	.word	0x08019208
 8008cec:	200005c0 	.word	0x200005c0
 8008cf0:	20017da0 	.word	0x20017da0
 8008cf4:	0801934c 	.word	0x0801934c
 8008cf8:	2003d404 	.word	0x2003d404

08008cfc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af06      	add	r7, sp, #24
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d13d      	bne.n	8008d88 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d138      	bne.n	8008d88 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008d16:	481e      	ldr	r0, [pc, #120]	; (8008d90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008d18:	f7f9 f9e4 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008d1c:	481d      	ldr	r0, [pc, #116]	; (8008d94 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008d1e:	f7fc f987 	bl	8005030 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008d22:	481d      	ldr	r0, [pc, #116]	; (8008d98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008d24:	f7f9 f87a 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008d28:	481c      	ldr	r0, [pc, #112]	; (8008d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008d2a:	f7fb fdae 	bl	800488a <_ZN5MotorC1Ev>
IMU imu;
 8008d2e:	481c      	ldr	r0, [pc, #112]	; (8008da0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008d30:	f7f8 fe80 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008d34:	481b      	ldr	r0, [pc, #108]	; (8008da4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008d36:	f7fb fb03 	bl	8004340 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008d3a:	481b      	ldr	r0, [pc, #108]	; (8008da8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008d3c:	f7f8 fa0a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008d40:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008d42:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008d44:	4915      	ldr	r1, [pc, #84]	; (8008d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008d46:	4819      	ldr	r0, [pc, #100]	; (8008dac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008d48:	f7fc fbc6 	bl	80054d8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008d4e:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008d50:	4915      	ldr	r1, [pc, #84]	; (8008da8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008d52:	4817      	ldr	r0, [pc, #92]	; (8008db0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008d54:	f7fb fe7e 	bl	8004a54 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008d58:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	4b10      	ldr	r3, [pc, #64]	; (8008da8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008d6e:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008d70:	490a      	ldr	r1, [pc, #40]	; (8008d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008d72:	4810      	ldr	r0, [pc, #64]	; (8008db4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008d74:	f7f9 fce4 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008d78:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008d7a:	490a      	ldr	r1, [pc, #40]	; (8008da4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008d7c:	480e      	ldr	r0, [pc, #56]	; (8008db8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008d7e:	f7fc faa7 	bl	80052d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008d82:	480e      	ldr	r0, [pc, #56]	; (8008dbc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008d84:	f7fb ffe6 	bl	8004d54 <_ZN13PathFollowingC1Ev>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200002c0 	.word	0x200002c0
 8008d94:	200005b8 	.word	0x200005b8
 8008d98:	200005c0 	.word	0x200005c0
 8008d9c:	200005c8 	.word	0x200005c8
 8008da0:	200005dc 	.word	0x200005dc
 8008da4:	200005f0 	.word	0x200005f0
 8008da8:	20017d00 	.word	0x20017d00
 8008dac:	20017d20 	.word	0x20017d20
 8008db0:	20017d60 	.word	0x20017d60
 8008db4:	20017da0 	.word	0x20017da0
 8008db8:	20025aa4 	.word	0x20025aa4
 8008dbc:	20025cb0 	.word	0x20025cb0

08008dc0 <_GLOBAL__sub_I_line_sensor>:
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7ff ff97 	bl	8008cfc <_Z41__static_initialization_and_destruction_0ii>
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008dd6:	e003      	b.n	8008de0 <LoopCopyDataInit>

08008dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008dde:	3104      	adds	r1, #4

08008de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008de0:	480b      	ldr	r0, [pc, #44]	; (8008e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008de2:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008de8:	d3f6      	bcc.n	8008dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8008dea:	4a0b      	ldr	r2, [pc, #44]	; (8008e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008dec:	e002      	b.n	8008df4 <LoopFillZerobss>

08008dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008df0:	f842 3b04 	str.w	r3, [r2], #4

08008df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008df4:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008df8:	d3f9      	bcc.n	8008dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008dfa:	f7fe fa77 	bl	80072ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008dfe:	f00b fdd3 	bl	80149a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e02:	f7fc fdb1 	bl	8005968 <main>
  bx  lr    
 8008e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008e0c:	08019948 	.word	0x08019948
  ldr  r0, =_sdata
 8008e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e14:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008e18:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008e1c:	20041e10 	.word	0x20041e10

08008e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e20:	e7fe      	b.n	8008e20 <ADC_IRQHandler>
	...

08008e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <HAL_Init+0x40>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a0d      	ldr	r2, [pc, #52]	; (8008e64 <HAL_Init+0x40>)
 8008e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <HAL_Init+0x40>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <HAL_Init+0x40>)
 8008e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e40:	4b08      	ldr	r3, [pc, #32]	; (8008e64 <HAL_Init+0x40>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a07      	ldr	r2, [pc, #28]	; (8008e64 <HAL_Init+0x40>)
 8008e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e4c:	2003      	movs	r0, #3
 8008e4e:	f000 fd51 	bl	80098f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e52:	2000      	movs	r0, #0
 8008e54:	f000 f808 	bl	8008e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e58:	f7fd fc98 	bl	800678c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	40023c00 	.word	0x40023c00

08008e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e70:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <HAL_InitTick+0x54>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <HAL_InitTick+0x58>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fd69 	bl	800995e <HAL_SYSTICK_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e00e      	b.n	8008eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b0f      	cmp	r3, #15
 8008e9a:	d80a      	bhi.n	8008eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	f000 fd31 	bl	800990a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ea8:	4a06      	ldr	r2, [pc, #24]	; (8008ec4 <HAL_InitTick+0x5c>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000000 	.word	0x20000000
 8008ec0:	20000008 	.word	0x20000008
 8008ec4:	20000004 	.word	0x20000004

08008ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <HAL_IncTick+0x20>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <HAL_IncTick+0x24>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	4a04      	ldr	r2, [pc, #16]	; (8008eec <HAL_IncTick+0x24>)
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000008 	.word	0x20000008
 8008eec:	2003fd98 	.word	0x2003fd98

08008ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ef4:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <HAL_GetTick+0x14>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	2003fd98 	.word	0x2003fd98

08008f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f10:	f7ff ffee 	bl	8008ef0 <HAL_GetTick>
 8008f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d005      	beq.n	8008f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <HAL_Delay+0x40>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f2e:	bf00      	nop
 8008f30:	f7ff ffde 	bl	8008ef0 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d8f7      	bhi.n	8008f30 <HAL_Delay+0x28>
  {
  }
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000008 	.word	0x20000008

08008f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e033      	b.n	8008fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fd fc36 	bl	80067dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d118      	bne.n	8008fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f92:	f023 0302 	bic.w	r3, r3, #2
 8008f96:	f043 0202 	orr.w	r2, r3, #2
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa5a 	bl	8009458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	f043 0201 	orr.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8008fba:	e001      	b.n	8008fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_ADC_Start_DMA+0x1e>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e0cc      	b.n	800918c <HAL_ADC_Start_DMA+0x1b8>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	d018      	beq.n	800903a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009018:	4b5e      	ldr	r3, [pc, #376]	; (8009194 <HAL_ADC_Start_DMA+0x1c0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a5e      	ldr	r2, [pc, #376]	; (8009198 <HAL_ADC_Start_DMA+0x1c4>)
 800901e:	fba2 2303 	umull	r2, r3, r2, r3
 8009022:	0c9a      	lsrs	r2, r3, #18
 8009024:	4613      	mov	r3, r2
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	4413      	add	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800902c:	e002      	b.n	8009034 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3b01      	subs	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f9      	bne.n	800902e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	f040 80a0 	bne.w	800918a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009052:	f023 0301 	bic.w	r3, r3, #1
 8009056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009088:	d106      	bne.n	8009098 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908e:	f023 0206 	bic.w	r2, r3, #6
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	645a      	str	r2, [r3, #68]	; 0x44
 8009096:	e002      	b.n	800909e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80090a6:	4b3d      	ldr	r3, [pc, #244]	; (800919c <HAL_ADC_Start_DMA+0x1c8>)
 80090a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	4a3c      	ldr	r2, [pc, #240]	; (80091a0 <HAL_ADC_Start_DMA+0x1cc>)
 80090b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	4a3b      	ldr	r2, [pc, #236]	; (80091a4 <HAL_ADC_Start_DMA+0x1d0>)
 80090b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090be:	4a3a      	ldr	r2, [pc, #232]	; (80091a8 <HAL_ADC_Start_DMA+0x1d4>)
 80090c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80090ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80090da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	334c      	adds	r3, #76	; 0x4c
 80090f6:	4619      	mov	r1, r3
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f000 fcea 	bl	8009ad4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2b00      	cmp	r3, #0
 800910a:	d12a      	bne.n	8009162 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a26      	ldr	r2, [pc, #152]	; (80091ac <HAL_ADC_Start_DMA+0x1d8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d015      	beq.n	8009142 <HAL_ADC_Start_DMA+0x16e>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a25      	ldr	r2, [pc, #148]	; (80091b0 <HAL_ADC_Start_DMA+0x1dc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d105      	bne.n	800912c <HAL_ADC_Start_DMA+0x158>
 8009120:	4b1e      	ldr	r3, [pc, #120]	; (800919c <HAL_ADC_Start_DMA+0x1c8>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00a      	beq.n	8009142 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a20      	ldr	r2, [pc, #128]	; (80091b4 <HAL_ADC_Start_DMA+0x1e0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d129      	bne.n	800918a <HAL_ADC_Start_DMA+0x1b6>
 8009136:	4b19      	ldr	r3, [pc, #100]	; (800919c <HAL_ADC_Start_DMA+0x1c8>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	2b0f      	cmp	r3, #15
 8009140:	d823      	bhi.n	800918a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11c      	bne.n	800918a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	e013      	b.n	800918a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a11      	ldr	r2, [pc, #68]	; (80091ac <HAL_ADC_Start_DMA+0x1d8>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d10e      	bne.n	800918a <HAL_ADC_Start_DMA+0x1b6>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d107      	bne.n	800918a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009188:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000000 	.word	0x20000000
 8009198:	431bde83 	.word	0x431bde83
 800919c:	40012300 	.word	0x40012300
 80091a0:	08009651 	.word	0x08009651
 80091a4:	0800970b 	.word	0x0800970b
 80091a8:	08009727 	.word	0x08009727
 80091ac:	40012000 	.word	0x40012000
 80091b0:	40012100 	.word	0x40012100
 80091b4:	40012200 	.word	0x40012200

080091b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_ADC_ConfigChannel+0x1c>
 800920c:	2302      	movs	r3, #2
 800920e:	e113      	b.n	8009438 <HAL_ADC_ConfigChannel+0x244>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b09      	cmp	r3, #9
 800921e:	d925      	bls.n	800926c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68d9      	ldr	r1, [r3, #12]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	461a      	mov	r2, r3
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	3b1e      	subs	r3, #30
 8009236:	2207      	movs	r2, #7
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	43da      	mvns	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	400a      	ands	r2, r1
 8009244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68d9      	ldr	r1, [r3, #12]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	4618      	mov	r0, r3
 8009258:	4603      	mov	r3, r0
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	4403      	add	r3, r0
 800925e:	3b1e      	subs	r3, #30
 8009260:	409a      	lsls	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	60da      	str	r2, [r3, #12]
 800926a:	e022      	b.n	80092b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6919      	ldr	r1, [r3, #16]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	b29b      	uxth	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	4613      	mov	r3, r2
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	4413      	add	r3, r2
 8009280:	2207      	movs	r2, #7
 8009282:	fa02 f303 	lsl.w	r3, r2, r3
 8009286:	43da      	mvns	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	400a      	ands	r2, r1
 800928e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6919      	ldr	r1, [r3, #16]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4618      	mov	r0, r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4403      	add	r3, r0
 80092a8:	409a      	lsls	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b06      	cmp	r3, #6
 80092b8:	d824      	bhi.n	8009304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	3b05      	subs	r3, #5
 80092cc:	221f      	movs	r2, #31
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	43da      	mvns	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	400a      	ands	r2, r1
 80092da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4618      	mov	r0, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	3b05      	subs	r3, #5
 80092f6:	fa00 f203 	lsl.w	r2, r0, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	635a      	str	r2, [r3, #52]	; 0x34
 8009302:	e04c      	b.n	800939e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	2b0c      	cmp	r3, #12
 800930a:	d824      	bhi.n	8009356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	3b23      	subs	r3, #35	; 0x23
 800931e:	221f      	movs	r2, #31
 8009320:	fa02 f303 	lsl.w	r3, r2, r3
 8009324:	43da      	mvns	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	400a      	ands	r2, r1
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	4618      	mov	r0, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	3b23      	subs	r3, #35	; 0x23
 8009348:	fa00 f203 	lsl.w	r2, r0, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
 8009354:	e023      	b.n	800939e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	3b41      	subs	r3, #65	; 0x41
 8009368:	221f      	movs	r2, #31
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	43da      	mvns	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	400a      	ands	r2, r1
 8009376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	4618      	mov	r0, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	3b41      	subs	r3, #65	; 0x41
 8009392:	fa00 f203 	lsl.w	r2, r0, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800939e:	4b29      	ldr	r3, [pc, #164]	; (8009444 <HAL_ADC_ConfigChannel+0x250>)
 80093a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a28      	ldr	r2, [pc, #160]	; (8009448 <HAL_ADC_ConfigChannel+0x254>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d10f      	bne.n	80093cc <HAL_ADC_ConfigChannel+0x1d8>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b12      	cmp	r3, #18
 80093b2:	d10b      	bne.n	80093cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_ADC_ConfigChannel+0x254>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d12b      	bne.n	800942e <HAL_ADC_ConfigChannel+0x23a>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1c      	ldr	r2, [pc, #112]	; (800944c <HAL_ADC_ConfigChannel+0x258>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <HAL_ADC_ConfigChannel+0x1f4>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b11      	cmp	r3, #17
 80093e6:	d122      	bne.n	800942e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a11      	ldr	r2, [pc, #68]	; (800944c <HAL_ADC_ConfigChannel+0x258>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d111      	bne.n	800942e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800940a:	4b11      	ldr	r3, [pc, #68]	; (8009450 <HAL_ADC_ConfigChannel+0x25c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a11      	ldr	r2, [pc, #68]	; (8009454 <HAL_ADC_ConfigChannel+0x260>)
 8009410:	fba2 2303 	umull	r2, r3, r2, r3
 8009414:	0c9a      	lsrs	r2, r3, #18
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009420:	e002      	b.n	8009428 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3b01      	subs	r3, #1
 8009426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f9      	bne.n	8009422 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	40012300 	.word	0x40012300
 8009448:	40012000 	.word	0x40012000
 800944c:	10000012 	.word	0x10000012
 8009450:	20000000 	.word	0x20000000
 8009454:	431bde83 	.word	0x431bde83

08009458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009460:	4b79      	ldr	r3, [pc, #484]	; (8009648 <ADC_Init+0x1f0>)
 8009462:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	431a      	orrs	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800948c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6859      	ldr	r1, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	021a      	lsls	r2, r3, #8
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80094b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6859      	ldr	r1, [r3, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6899      	ldr	r1, [r3, #8]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	4a58      	ldr	r2, [pc, #352]	; (800964c <ADC_Init+0x1f4>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d022      	beq.n	8009536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6899      	ldr	r1, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6899      	ldr	r1, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	609a      	str	r2, [r3, #8]
 8009534:	e00f      	b.n	8009556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009554:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0202 	bic.w	r2, r2, #2
 8009564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6899      	ldr	r1, [r3, #8]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7e1b      	ldrb	r3, [r3, #24]
 8009570:	005a      	lsls	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01b      	beq.n	80095bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009592:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80095a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6859      	ldr	r1, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	3b01      	subs	r3, #1
 80095b0:	035a      	lsls	r2, r3, #13
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	e007      	b.n	80095cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80095da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	051a      	lsls	r2, r3, #20
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6899      	ldr	r1, [r3, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800960e:	025a      	lsls	r2, r3, #9
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6899      	ldr	r1, [r3, #8]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	029a      	lsls	r2, r3, #10
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	40012300 	.word	0x40012300
 800964c:	0f000001 	.word	0x0f000001

08009650 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009666:	2b00      	cmp	r3, #0
 8009668:	d13c      	bne.n	80096e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d12b      	bne.n	80096dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	d127      	bne.n	80096dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d119      	bne.n	80096dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0220 	bic.w	r2, r2, #32
 80096b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d105      	bne.n	80096dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	f043 0201 	orr.w	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff fd6b 	bl	80091b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80096e2:	e00e      	b.n	8009702 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f003 0310 	and.w	r3, r3, #16
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fd75 	bl	80091e0 <HAL_ADC_ErrorCallback>
}
 80096f6:	e004      	b.n	8009702 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff fd57 	bl	80091cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2240      	movs	r2, #64	; 0x40
 8009738:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973e:	f043 0204 	orr.w	r2, r3, #4
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fd4a 	bl	80091e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <__NVIC_SetPriorityGrouping+0x44>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009770:	4013      	ands	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800977c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009786:	4a04      	ldr	r2, [pc, #16]	; (8009798 <__NVIC_SetPriorityGrouping+0x44>)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	60d3      	str	r3, [r2, #12]
}
 800978c:	bf00      	nop
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	e000ed00 	.word	0xe000ed00

0800979c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <__NVIC_GetPriorityGrouping+0x18>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	f003 0307 	and.w	r3, r3, #7
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	e000ed00 	.word	0xe000ed00

080097b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	db0b      	blt.n	80097e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	f003 021f 	and.w	r2, r3, #31
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <__NVIC_EnableIRQ+0x38>)
 80097d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d6:	095b      	lsrs	r3, r3, #5
 80097d8:	2001      	movs	r0, #1
 80097da:	fa00 f202 	lsl.w	r2, r0, r2
 80097de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	e000e100 	.word	0xe000e100

080097f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009804:	2b00      	cmp	r3, #0
 8009806:	db0a      	blt.n	800981e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	490c      	ldr	r1, [pc, #48]	; (8009840 <__NVIC_SetPriority+0x4c>)
 800980e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009812:	0112      	lsls	r2, r2, #4
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	440b      	add	r3, r1
 8009818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800981c:	e00a      	b.n	8009834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	4908      	ldr	r1, [pc, #32]	; (8009844 <__NVIC_SetPriority+0x50>)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	3b04      	subs	r3, #4
 800982c:	0112      	lsls	r2, r2, #4
 800982e:	b2d2      	uxtb	r2, r2
 8009830:	440b      	add	r3, r1
 8009832:	761a      	strb	r2, [r3, #24]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	e000e100 	.word	0xe000e100
 8009844:	e000ed00 	.word	0xe000ed00

08009848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	; 0x24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f1c3 0307 	rsb	r3, r3, #7
 8009862:	2b04      	cmp	r3, #4
 8009864:	bf28      	it	cs
 8009866:	2304      	movcs	r3, #4
 8009868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3304      	adds	r3, #4
 800986e:	2b06      	cmp	r3, #6
 8009870:	d902      	bls.n	8009878 <NVIC_EncodePriority+0x30>
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3b03      	subs	r3, #3
 8009876:	e000      	b.n	800987a <NVIC_EncodePriority+0x32>
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	fa02 f303 	lsl.w	r3, r2, r3
 8009886:	43da      	mvns	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	401a      	ands	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009890:	f04f 31ff 	mov.w	r1, #4294967295
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	fa01 f303 	lsl.w	r3, r1, r3
 800989a:	43d9      	mvns	r1, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098a0:	4313      	orrs	r3, r2
         );
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3724      	adds	r7, #36	; 0x24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
	...

080098b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098c0:	d301      	bcc.n	80098c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098c2:	2301      	movs	r3, #1
 80098c4:	e00f      	b.n	80098e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098c6:	4a0a      	ldr	r2, [pc, #40]	; (80098f0 <SysTick_Config+0x40>)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098ce:	210f      	movs	r1, #15
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	f7ff ff8e 	bl	80097f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <SysTick_Config+0x40>)
 80098da:	2200      	movs	r2, #0
 80098dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <SysTick_Config+0x40>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	e000e010 	.word	0xe000e010

080098f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff ff29 	bl	8009754 <__NVIC_SetPriorityGrouping>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	4603      	mov	r3, r0
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800991c:	f7ff ff3e 	bl	800979c <__NVIC_GetPriorityGrouping>
 8009920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	6978      	ldr	r0, [r7, #20]
 8009928:	f7ff ff8e 	bl	8009848 <NVIC_EncodePriority>
 800992c:	4602      	mov	r2, r0
 800992e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff ff5d 	bl	80097f4 <__NVIC_SetPriority>
}
 800993a:	bf00      	nop
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	4603      	mov	r3, r0
 800994a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800994c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff ff31 	bl	80097b8 <__NVIC_EnableIRQ>
}
 8009956:	bf00      	nop
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff ffa2 	bl	80098b0 <SysTick_Config>
 800996c:	4603      	mov	r3, r0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009984:	f7ff fab4 	bl	8008ef0 <HAL_GetTick>
 8009988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e099      	b.n	8009ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 0201 	bic.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099b4:	e00f      	b.n	80099d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80099b6:	f7ff fa9b 	bl	8008ef0 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	d908      	bls.n	80099d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2220      	movs	r2, #32
 80099c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2203      	movs	r2, #3
 80099ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e078      	b.n	8009ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e8      	bne.n	80099b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4b38      	ldr	r3, [pc, #224]	; (8009ad0 <HAL_DMA_Init+0x158>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d107      	bne.n	8009a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f023 0307 	bic.w	r3, r3, #7
 8009a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d117      	bne.n	8009a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00e      	beq.n	8009a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fa9d 	bl	8009fbc <DMA_CheckFifoParam>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2240      	movs	r2, #64	; 0x40
 8009a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a96:	2301      	movs	r3, #1
 8009a98:	e016      	b.n	8009ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa54 	bl	8009f50 <DMA_CalcBaseAndBitshift>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab0:	223f      	movs	r2, #63	; 0x3f
 8009ab2:	409a      	lsls	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	f010803f 	.word	0xf010803f

08009ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d101      	bne.n	8009afa <HAL_DMA_Start_IT+0x26>
 8009af6:	2302      	movs	r3, #2
 8009af8:	e040      	b.n	8009b7c <HAL_DMA_Start_IT+0xa8>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d12f      	bne.n	8009b6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2202      	movs	r2, #2
 8009b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f9e6 	bl	8009ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2c:	223f      	movs	r2, #63	; 0x3f
 8009b2e:	409a      	lsls	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0216 	orr.w	r2, r2, #22
 8009b42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0208 	orr.w	r2, r2, #8
 8009b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	e005      	b.n	8009b7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009b76:	2302      	movs	r3, #2
 8009b78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d004      	beq.n	8009ba2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2280      	movs	r2, #128	; 0x80
 8009b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e00c      	b.n	8009bbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0201 	bic.w	r2, r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009bd4:	4b92      	ldr	r3, [pc, #584]	; (8009e20 <HAL_DMA_IRQHandler+0x258>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a92      	ldr	r2, [pc, #584]	; (8009e24 <HAL_DMA_IRQHandler+0x25c>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	0a9b      	lsrs	r3, r3, #10
 8009be0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bf2:	2208      	movs	r2, #8
 8009bf4:	409a      	lsls	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01a      	beq.n	8009c34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d013      	beq.n	8009c34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0204 	bic.w	r2, r2, #4
 8009c1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c20:	2208      	movs	r2, #8
 8009c22:	409a      	lsls	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2c:	f043 0201 	orr.w	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c38:	2201      	movs	r2, #1
 8009c3a:	409a      	lsls	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d012      	beq.n	8009c6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00b      	beq.n	8009c6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c56:	2201      	movs	r2, #1
 8009c58:	409a      	lsls	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c62:	f043 0202 	orr.w	r2, r3, #2
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6e:	2204      	movs	r2, #4
 8009c70:	409a      	lsls	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d012      	beq.n	8009ca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00b      	beq.n	8009ca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	409a      	lsls	r2, r3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c98:	f043 0204 	orr.w	r2, r3, #4
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca4:	2210      	movs	r2, #16
 8009ca6:	409a      	lsls	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d043      	beq.n	8009d38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d03c      	beq.n	8009d38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	409a      	lsls	r2, r3
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d018      	beq.n	8009d0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d108      	bne.n	8009cf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d024      	beq.n	8009d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	e01f      	b.n	8009d38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01b      	beq.n	8009d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
 8009d08:	e016      	b.n	8009d38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d107      	bne.n	8009d28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0208 	bic.w	r2, r2, #8
 8009d26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	409a      	lsls	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4013      	ands	r3, r2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 808e 	beq.w	8009e66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8086 	beq.w	8009e66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d5e:	2220      	movs	r2, #32
 8009d60:	409a      	lsls	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d136      	bne.n	8009de0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0216 	bic.w	r2, r2, #22
 8009d80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <HAL_DMA_IRQHandler+0x1da>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0208 	bic.w	r2, r2, #8
 8009db0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db6:	223f      	movs	r2, #63	; 0x3f
 8009db8:	409a      	lsls	r2, r3
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d07d      	beq.n	8009ed2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
        }
        return;
 8009dde:	e078      	b.n	8009ed2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01c      	beq.n	8009e28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d108      	bne.n	8009e0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d030      	beq.n	8009e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
 8009e0c:	e02b      	b.n	8009e66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d027      	beq.n	8009e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
 8009e1e:	e022      	b.n	8009e66 <HAL_DMA_IRQHandler+0x29e>
 8009e20:	20000000 	.word	0x20000000
 8009e24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10f      	bne.n	8009e56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0210 	bic.w	r2, r2, #16
 8009e44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d032      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d022      	beq.n	8009ec0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3301      	adds	r3, #1
 8009e96:	60bb      	str	r3, [r7, #8]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d307      	bcc.n	8009eae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f2      	bne.n	8009e92 <HAL_DMA_IRQHandler+0x2ca>
 8009eac:	e000      	b.n	8009eb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009eae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
 8009ed0:	e000      	b.n	8009ed4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009ed2:	bf00      	nop
    }
  }
}
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop

08009edc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b40      	cmp	r3, #64	; 0x40
 8009f20:	d108      	bne.n	8009f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009f32:	e007      	b.n	8009f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	60da      	str	r2, [r3, #12]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	3b10      	subs	r3, #16
 8009f60:	4a14      	ldr	r2, [pc, #80]	; (8009fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d909      	bls.n	8009f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8009f90:	e007      	b.n	8009fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	aaaaaaab 	.word	0xaaaaaaab
 8009fb8:	0801938c 	.word	0x0801938c

08009fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d11f      	bne.n	800a016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d855      	bhi.n	800a088 <DMA_CheckFifoParam+0xcc>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <DMA_CheckFifoParam+0x28>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	0800a007 	.word	0x0800a007
 8009fec:	08009ff5 	.word	0x08009ff5
 8009ff0:	0800a089 	.word	0x0800a089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d045      	beq.n	800a08c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a004:	e042      	b.n	800a08c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a00e:	d13f      	bne.n	800a090 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a014:	e03c      	b.n	800a090 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01e:	d121      	bne.n	800a064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b03      	cmp	r3, #3
 800a024:	d836      	bhi.n	800a094 <DMA_CheckFifoParam+0xd8>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <DMA_CheckFifoParam+0x70>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a043 	.word	0x0800a043
 800a034:	0800a03d 	.word	0x0800a03d
 800a038:	0800a055 	.word	0x0800a055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e02f      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d024      	beq.n	800a098 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a052:	e021      	b.n	800a098 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a05c:	d11e      	bne.n	800a09c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a062:	e01b      	b.n	800a09c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d902      	bls.n	800a070 <DMA_CheckFifoParam+0xb4>
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d003      	beq.n	800a076 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a06e:	e018      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
      break;
 800a074:	e015      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00e      	beq.n	800a0a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	73fb      	strb	r3, [r7, #15]
      break;
 800a086:	e00b      	b.n	800a0a0 <DMA_CheckFifoParam+0xe4>
      break;
 800a088:	bf00      	nop
 800a08a:	e00a      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a08c:	bf00      	nop
 800a08e:	e008      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a090:	bf00      	nop
 800a092:	e006      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a094:	bf00      	nop
 800a096:	e004      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a098:	bf00      	nop
 800a09a:	e002      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a0a0:	bf00      	nop
    }
  } 
  
  return status; 
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e177      	b.n	800a3bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4013      	ands	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	f040 8166 	bne.w	800a3b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d00b      	beq.n	800a10a <HAL_GPIO_Init+0x5a>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d007      	beq.n	800a10a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a0fe:	2b11      	cmp	r3, #17
 800a100:	d003      	beq.n	800a10a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b12      	cmp	r3, #18
 800a108:	d130      	bne.n	800a16c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	2203      	movs	r2, #3
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43db      	mvns	r3, r3
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	4013      	ands	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	4313      	orrs	r3, r2
 800a132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a140:	2201      	movs	r2, #1
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	fa02 f303 	lsl.w	r3, r2, r3
 800a148:	43db      	mvns	r3, r3
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	4013      	ands	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	091b      	lsrs	r3, r3, #4
 800a156:	f003 0201 	and.w	r2, r3, #1
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	fa02 f303 	lsl.w	r3, r2, r3
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	4313      	orrs	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	2203      	movs	r2, #3
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4013      	ands	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	fa02 f303 	lsl.w	r3, r2, r3
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	4313      	orrs	r3, r2
 800a194:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d003      	beq.n	800a1ac <HAL_GPIO_Init+0xfc>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	2b12      	cmp	r3, #18
 800a1aa:	d123      	bne.n	800a1f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	08da      	lsrs	r2, r3, #3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3208      	adds	r2, #8
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	220f      	movs	r2, #15
 800a1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	691a      	ldr	r2, [r3, #16]
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	08da      	lsrs	r2, r3, #3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3208      	adds	r2, #8
 800a1ee:	69b9      	ldr	r1, [r7, #24]
 800a1f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	2203      	movs	r2, #3
 800a200:	fa02 f303 	lsl.w	r3, r2, r3
 800a204:	43db      	mvns	r3, r3
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	4013      	ands	r3, r2
 800a20a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f003 0203 	and.w	r2, r3, #3
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	4313      	orrs	r3, r2
 800a220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80c0 	beq.w	800a3b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	4b65      	ldr	r3, [pc, #404]	; (800a3d0 <HAL_GPIO_Init+0x320>)
 800a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23e:	4a64      	ldr	r2, [pc, #400]	; (800a3d0 <HAL_GPIO_Init+0x320>)
 800a240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a244:	6453      	str	r3, [r2, #68]	; 0x44
 800a246:	4b62      	ldr	r3, [pc, #392]	; (800a3d0 <HAL_GPIO_Init+0x320>)
 800a248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a252:	4a60      	ldr	r2, [pc, #384]	; (800a3d4 <HAL_GPIO_Init+0x324>)
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	089b      	lsrs	r3, r3, #2
 800a258:	3302      	adds	r3, #2
 800a25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	220f      	movs	r2, #15
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43db      	mvns	r3, r3
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	4013      	ands	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a57      	ldr	r2, [pc, #348]	; (800a3d8 <HAL_GPIO_Init+0x328>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d037      	beq.n	800a2ee <HAL_GPIO_Init+0x23e>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a56      	ldr	r2, [pc, #344]	; (800a3dc <HAL_GPIO_Init+0x32c>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d031      	beq.n	800a2ea <HAL_GPIO_Init+0x23a>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a55      	ldr	r2, [pc, #340]	; (800a3e0 <HAL_GPIO_Init+0x330>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d02b      	beq.n	800a2e6 <HAL_GPIO_Init+0x236>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a54      	ldr	r2, [pc, #336]	; (800a3e4 <HAL_GPIO_Init+0x334>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d025      	beq.n	800a2e2 <HAL_GPIO_Init+0x232>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a53      	ldr	r2, [pc, #332]	; (800a3e8 <HAL_GPIO_Init+0x338>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d01f      	beq.n	800a2de <HAL_GPIO_Init+0x22e>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a52      	ldr	r2, [pc, #328]	; (800a3ec <HAL_GPIO_Init+0x33c>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d019      	beq.n	800a2da <HAL_GPIO_Init+0x22a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a51      	ldr	r2, [pc, #324]	; (800a3f0 <HAL_GPIO_Init+0x340>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d013      	beq.n	800a2d6 <HAL_GPIO_Init+0x226>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a50      	ldr	r2, [pc, #320]	; (800a3f4 <HAL_GPIO_Init+0x344>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00d      	beq.n	800a2d2 <HAL_GPIO_Init+0x222>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a4f      	ldr	r2, [pc, #316]	; (800a3f8 <HAL_GPIO_Init+0x348>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d007      	beq.n	800a2ce <HAL_GPIO_Init+0x21e>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a4e      	ldr	r2, [pc, #312]	; (800a3fc <HAL_GPIO_Init+0x34c>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d101      	bne.n	800a2ca <HAL_GPIO_Init+0x21a>
 800a2c6:	2309      	movs	r3, #9
 800a2c8:	e012      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2ca:	230a      	movs	r3, #10
 800a2cc:	e010      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	e00e      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2d2:	2307      	movs	r3, #7
 800a2d4:	e00c      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2d6:	2306      	movs	r3, #6
 800a2d8:	e00a      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2da:	2305      	movs	r3, #5
 800a2dc:	e008      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2de:	2304      	movs	r3, #4
 800a2e0:	e006      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e004      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e002      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <HAL_GPIO_Init+0x240>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	69fa      	ldr	r2, [r7, #28]
 800a2f2:	f002 0203 	and.w	r2, r2, #3
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	4093      	lsls	r3, r2
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a300:	4934      	ldr	r1, [pc, #208]	; (800a3d4 <HAL_GPIO_Init+0x324>)
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	089b      	lsrs	r3, r3, #2
 800a306:	3302      	adds	r3, #2
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a30e:	4b3c      	ldr	r3, [pc, #240]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	43db      	mvns	r3, r3
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	4013      	ands	r3, r2
 800a31c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a332:	4a33      	ldr	r2, [pc, #204]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a338:	4b31      	ldr	r3, [pc, #196]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	43db      	mvns	r3, r3
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	4013      	ands	r3, r2
 800a346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a35c:	4a28      	ldr	r2, [pc, #160]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a362:	4b27      	ldr	r3, [pc, #156]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	43db      	mvns	r3, r3
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	4013      	ands	r3, r2
 800a370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a386:	4a1e      	ldr	r2, [pc, #120]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	43db      	mvns	r3, r3
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	4013      	ands	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a3b0:	4a13      	ldr	r2, [pc, #76]	; (800a400 <HAL_GPIO_Init+0x350>)
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	2b0f      	cmp	r3, #15
 800a3c0:	f67f ae84 	bls.w	800a0cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a3c4:	bf00      	nop
 800a3c6:	3724      	adds	r7, #36	; 0x24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	40013800 	.word	0x40013800
 800a3d8:	40020000 	.word	0x40020000
 800a3dc:	40020400 	.word	0x40020400
 800a3e0:	40020800 	.word	0x40020800
 800a3e4:	40020c00 	.word	0x40020c00
 800a3e8:	40021000 	.word	0x40021000
 800a3ec:	40021400 	.word	0x40021400
 800a3f0:	40021800 	.word	0x40021800
 800a3f4:	40021c00 	.word	0x40021c00
 800a3f8:	40022000 	.word	0x40022000
 800a3fc:	40022400 	.word	0x40022400
 800a400:	40013c00 	.word	0x40013c00

0800a404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	887b      	ldrh	r3, [r7, #2]
 800a416:	4013      	ands	r3, r2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a41c:	2301      	movs	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
 800a420:	e001      	b.n	800a426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a426:	7bfb      	ldrb	r3, [r7, #15]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	807b      	strh	r3, [r7, #2]
 800a440:	4613      	mov	r3, r2
 800a442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a444:	787b      	ldrb	r3, [r7, #1]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a450:	e003      	b.n	800a45a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a452:	887b      	ldrh	r3, [r7, #2]
 800a454:	041a      	lsls	r2, r3, #16
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	619a      	str	r2, [r3, #24]
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e11f      	b.n	800a6ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7fc fa56 	bl	8006940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2224      	movs	r2, #36	; 0x24
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0201 	bic.w	r2, r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a4cc:	f001 f96e 	bl	800b7ac <HAL_RCC_GetPCLK1Freq>
 800a4d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4a7b      	ldr	r2, [pc, #492]	; (800a6c4 <HAL_I2C_Init+0x25c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d807      	bhi.n	800a4ec <HAL_I2C_Init+0x84>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4a7a      	ldr	r2, [pc, #488]	; (800a6c8 <HAL_I2C_Init+0x260>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	bf94      	ite	ls
 800a4e4:	2301      	movls	r3, #1
 800a4e6:	2300      	movhi	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	e006      	b.n	800a4fa <HAL_I2C_Init+0x92>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a77      	ldr	r2, [pc, #476]	; (800a6cc <HAL_I2C_Init+0x264>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	bf94      	ite	ls
 800a4f4:	2301      	movls	r3, #1
 800a4f6:	2300      	movhi	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e0db      	b.n	800a6ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4a72      	ldr	r2, [pc, #456]	; (800a6d0 <HAL_I2C_Init+0x268>)
 800a506:	fba2 2303 	umull	r2, r3, r2, r3
 800a50a:	0c9b      	lsrs	r3, r3, #18
 800a50c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4a64      	ldr	r2, [pc, #400]	; (800a6c4 <HAL_I2C_Init+0x25c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d802      	bhi.n	800a53c <HAL_I2C_Init+0xd4>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	3301      	adds	r3, #1
 800a53a:	e009      	b.n	800a550 <HAL_I2C_Init+0xe8>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a542:	fb02 f303 	mul.w	r3, r2, r3
 800a546:	4a63      	ldr	r2, [pc, #396]	; (800a6d4 <HAL_I2C_Init+0x26c>)
 800a548:	fba2 2303 	umull	r2, r3, r2, r3
 800a54c:	099b      	lsrs	r3, r3, #6
 800a54e:	3301      	adds	r3, #1
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	430b      	orrs	r3, r1
 800a556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	4956      	ldr	r1, [pc, #344]	; (800a6c4 <HAL_I2C_Init+0x25c>)
 800a56c:	428b      	cmp	r3, r1
 800a56e:	d80d      	bhi.n	800a58c <HAL_I2C_Init+0x124>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1e59      	subs	r1, r3, #1
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a57e:	3301      	adds	r3, #1
 800a580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a584:	2b04      	cmp	r3, #4
 800a586:	bf38      	it	cc
 800a588:	2304      	movcc	r3, #4
 800a58a:	e04f      	b.n	800a62c <HAL_I2C_Init+0x1c4>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d111      	bne.n	800a5b8 <HAL_I2C_Init+0x150>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	1e58      	subs	r0, r3, #1
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6859      	ldr	r1, [r3, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	440b      	add	r3, r1
 800a5a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bf0c      	ite	eq
 800a5b0:	2301      	moveq	r3, #1
 800a5b2:	2300      	movne	r3, #0
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	e012      	b.n	800a5de <HAL_I2C_Init+0x176>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	1e58      	subs	r0, r3, #1
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6859      	ldr	r1, [r3, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	440b      	add	r3, r1
 800a5c6:	0099      	lsls	r1, r3, #2
 800a5c8:	440b      	add	r3, r1
 800a5ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <HAL_I2C_Init+0x17e>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e022      	b.n	800a62c <HAL_I2C_Init+0x1c4>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10e      	bne.n	800a60c <HAL_I2C_Init+0x1a4>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1e58      	subs	r0, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6859      	ldr	r1, [r3, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	440b      	add	r3, r1
 800a5fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a600:	3301      	adds	r3, #1
 800a602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a60a:	e00f      	b.n	800a62c <HAL_I2C_Init+0x1c4>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	1e58      	subs	r0, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6859      	ldr	r1, [r3, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	0099      	lsls	r1, r3, #2
 800a61c:	440b      	add	r3, r1
 800a61e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a622:	3301      	adds	r3, #1
 800a624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	6809      	ldr	r1, [r1, #0]
 800a630:	4313      	orrs	r3, r2
 800a632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	69da      	ldr	r2, [r3, #28]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a65a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6911      	ldr	r1, [r2, #16]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	68d2      	ldr	r2, [r2, #12]
 800a666:	4311      	orrs	r1, r2
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	000186a0 	.word	0x000186a0
 800a6c8:	001e847f 	.word	0x001e847f
 800a6cc:	003d08ff 	.word	0x003d08ff
 800a6d0:	431bde83 	.word	0x431bde83
 800a6d4:	10624dd3 	.word	0x10624dd3

0800a6d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	607a      	str	r2, [r7, #4]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	817b      	strh	r3, [r7, #10]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6ec:	f7fe fc00 	bl	8008ef0 <HAL_GetTick>
 800a6f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b20      	cmp	r3, #32
 800a6fc:	f040 80e0 	bne.w	800a8c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2319      	movs	r3, #25
 800a706:	2201      	movs	r2, #1
 800a708:	4970      	ldr	r1, [pc, #448]	; (800a8cc <HAL_I2C_Master_Transmit+0x1f4>)
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 fc58 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a716:	2302      	movs	r3, #2
 800a718:	e0d3      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_I2C_Master_Transmit+0x50>
 800a724:	2302      	movs	r3, #2
 800a726:	e0cc      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d007      	beq.n	800a74e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f042 0201 	orr.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a75c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2221      	movs	r2, #33	; 0x21
 800a762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2210      	movs	r2, #16
 800a76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	893a      	ldrh	r2, [r7, #8]
 800a77e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a784:	b29a      	uxth	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4a50      	ldr	r2, [pc, #320]	; (800a8d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a78e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a790:	8979      	ldrh	r1, [r7, #10]
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	6a3a      	ldr	r2, [r7, #32]
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 fac2 	bl	800ad20 <I2C_MasterRequestWrite>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e08d      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	613b      	str	r3, [r7, #16]
 800a7ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a7bc:	e066      	b.n	800a88c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	6a39      	ldr	r1, [r7, #32]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fcd2 	bl	800b16c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00d      	beq.n	800a7ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d107      	bne.n	800a7e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e06b      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	781a      	ldrb	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a804:	b29b      	uxth	r3, r3
 800a806:	3b01      	subs	r3, #1
 800a808:	b29a      	uxth	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a812:	3b01      	subs	r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	f003 0304 	and.w	r3, r3, #4
 800a824:	2b04      	cmp	r3, #4
 800a826:	d11b      	bne.n	800a860 <HAL_I2C_Master_Transmit+0x188>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d017      	beq.n	800a860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	3b01      	subs	r3, #1
 800a84e:	b29a      	uxth	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	6a39      	ldr	r1, [r7, #32]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 fcc2 	bl	800b1ee <I2C_WaitOnBTFFlagUntilTimeout>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00d      	beq.n	800a88c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a874:	2b04      	cmp	r3, #4
 800a876:	d107      	bne.n	800a888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e01a      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a890:	2b00      	cmp	r3, #0
 800a892:	d194      	bne.n	800a7be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e000      	b.n	800a8c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a8c0:	2302      	movs	r3, #2
  }
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	00100002 	.word	0x00100002
 800a8d0:	ffff0000 	.word	0xffff0000

0800a8d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08c      	sub	sp, #48	; 0x30
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	607a      	str	r2, [r7, #4]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	817b      	strh	r3, [r7, #10]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8e8:	f7fe fb02 	bl	8008ef0 <HAL_GetTick>
 800a8ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	f040 820b 	bne.w	800ad12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	2319      	movs	r3, #25
 800a902:	2201      	movs	r2, #1
 800a904:	497c      	ldr	r1, [pc, #496]	; (800aaf8 <HAL_I2C_Master_Receive+0x224>)
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 fb5a 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a912:	2302      	movs	r3, #2
 800a914:	e1fe      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_I2C_Master_Receive+0x50>
 800a920:	2302      	movs	r3, #2
 800a922:	e1f7      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b01      	cmp	r3, #1
 800a938:	d007      	beq.n	800a94a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0201 	orr.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2222      	movs	r2, #34	; 0x22
 800a95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2210      	movs	r2, #16
 800a966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	893a      	ldrh	r2, [r7, #8]
 800a97a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a980:	b29a      	uxth	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a5c      	ldr	r2, [pc, #368]	; (800aafc <HAL_I2C_Master_Receive+0x228>)
 800a98a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a98c:	8979      	ldrh	r1, [r7, #10]
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 fa46 	bl	800ae24 <I2C_MasterRequestRead>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e1b8      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d113      	bne.n	800a9d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	623b      	str	r3, [r7, #32]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	623b      	str	r3, [r7, #32]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	623b      	str	r3, [r7, #32]
 800a9be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	e18c      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d11b      	bne.n	800aa12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61fb      	str	r3, [r7, #28]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	61fb      	str	r3, [r7, #28]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e16c      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d11b      	bne.n	800aa52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61bb      	str	r3, [r7, #24]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	e14c      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	617b      	str	r3, [r7, #20]
 800aa76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800aa78:	e138      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	f200 80f1 	bhi.w	800ac66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d123      	bne.n	800aad4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 fbed 	bl	800b270 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e139      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	691a      	ldr	r2, [r3, #16]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaaa:	b2d2      	uxtb	r2, r2
 800aaac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aabc:	3b01      	subs	r3, #1
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	3b01      	subs	r3, #1
 800aacc:	b29a      	uxth	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aad2:	e10b      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d14e      	bne.n	800ab7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	2200      	movs	r2, #0
 800aae4:	4906      	ldr	r1, [pc, #24]	; (800ab00 <HAL_I2C_Master_Receive+0x22c>)
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f000 fa6a 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d008      	beq.n	800ab04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e10e      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
 800aaf6:	bf00      	nop
 800aaf8:	00100002 	.word	0x00100002
 800aafc:	ffff0000 	.word	0xffff0000
 800ab00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	691a      	ldr	r2, [r3, #16]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	b2d2      	uxtb	r2, r2
 800ab52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab78:	e0b8      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2200      	movs	r2, #0
 800ab82:	4966      	ldr	r1, [pc, #408]	; (800ad1c <HAL_I2C_Master_Receive+0x448>)
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 fa1b 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e0bf      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691a      	ldr	r2, [r3, #16]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abcc:	b29b      	uxth	r3, r3
 800abce:	3b01      	subs	r3, #1
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	2200      	movs	r2, #0
 800abde:	494f      	ldr	r1, [pc, #316]	; (800ad1c <HAL_I2C_Master_Receive+0x448>)
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f9ed 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e091      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac64:	e042      	b.n	800acec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fb00 	bl	800b270 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e04c      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	691a      	ldr	r2, [r3, #16]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	b2d2      	uxtb	r2, r2
 800ac86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d118      	bne.n	800acec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd6:	3b01      	subs	r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f47f aec2 	bne.w	800aa7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e000      	b.n	800ad14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ad12:	2302      	movs	r3, #2
  }
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3728      	adds	r7, #40	; 0x28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	00010004 	.word	0x00010004

0800ad20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	607a      	str	r2, [r7, #4]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	d006      	beq.n	800ad4a <I2C_MasterRequestWrite+0x2a>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d003      	beq.n	800ad4a <I2C_MasterRequestWrite+0x2a>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad48:	d108      	bne.n	800ad5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	e00b      	b.n	800ad74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad60:	2b12      	cmp	r3, #18
 800ad62:	d107      	bne.n	800ad74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f91d 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9a:	d103      	bne.n	800ada4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e035      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb0:	d108      	bne.n	800adc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adb2:	897b      	ldrh	r3, [r7, #10]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	461a      	mov	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adc0:	611a      	str	r2, [r3, #16]
 800adc2:	e01b      	b.n	800adfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	11db      	asrs	r3, r3, #7
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f003 0306 	and.w	r3, r3, #6
 800adce:	b2db      	uxtb	r3, r3
 800add0:	f063 030f 	orn	r3, r3, #15
 800add4:	b2da      	uxtb	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	490e      	ldr	r1, [pc, #56]	; (800ae1c <I2C_MasterRequestWrite+0xfc>)
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 f943 	bl	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e010      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800adf2:	897b      	ldrh	r3, [r7, #10]
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	4907      	ldr	r1, [pc, #28]	; (800ae20 <I2C_MasterRequestWrite+0x100>)
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 f933 	bl	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	00010008 	.word	0x00010008
 800ae20:	00010002 	.word	0x00010002

0800ae24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	607a      	str	r2, [r7, #4]
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	460b      	mov	r3, r1
 800ae32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b08      	cmp	r3, #8
 800ae4e:	d006      	beq.n	800ae5e <I2C_MasterRequestRead+0x3a>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d003      	beq.n	800ae5e <I2C_MasterRequestRead+0x3a>
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ae5c:	d108      	bne.n	800ae70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	e00b      	b.n	800ae88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	2b11      	cmp	r3, #17
 800ae76:	d107      	bne.n	800ae88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f893 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeae:	d103      	bne.n	800aeb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e079      	b.n	800afb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec4:	d108      	bne.n	800aed8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aec6:	897b      	ldrh	r3, [r7, #10]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	f043 0301 	orr.w	r3, r3, #1
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	611a      	str	r2, [r3, #16]
 800aed6:	e05f      	b.n	800af98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aed8:	897b      	ldrh	r3, [r7, #10]
 800aeda:	11db      	asrs	r3, r3, #7
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0306 	and.w	r3, r3, #6
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	f063 030f 	orn	r3, r3, #15
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4930      	ldr	r1, [pc, #192]	; (800afb8 <I2C_MasterRequestRead+0x194>)
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f8b9 	bl	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e054      	b.n	800afb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800af06:	897b      	ldrh	r3, [r7, #10]
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	4929      	ldr	r1, [pc, #164]	; (800afbc <I2C_MasterRequestRead+0x198>)
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 f8a9 	bl	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e044      	b.n	800afb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af26:	2300      	movs	r3, #0
 800af28:	613b      	str	r3, [r7, #16]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 f831 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00d      	beq.n	800af80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af72:	d103      	bne.n	800af7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e017      	b.n	800afb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800af80:	897b      	ldrh	r3, [r7, #10]
 800af82:	11db      	asrs	r3, r3, #7
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 0306 	and.w	r3, r3, #6
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f063 030e 	orn	r3, r3, #14
 800af90:	b2da      	uxtb	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	4907      	ldr	r1, [pc, #28]	; (800afbc <I2C_MasterRequestRead+0x198>)
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f865 	bl	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	00010008 	.word	0x00010008
 800afbc:	00010002 	.word	0x00010002

0800afc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afd0:	e025      	b.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d021      	beq.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afda:	f7fd ff89 	bl	8008ef0 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d116      	bne.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2220      	movs	r2, #32
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	f043 0220 	orr.w	r2, r3, #32
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e023      	b.n	800b066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	0c1b      	lsrs	r3, r3, #16
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b01      	cmp	r3, #1
 800b026:	d10d      	bne.n	800b044 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	43da      	mvns	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4013      	ands	r3, r2
 800b034:	b29b      	uxth	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	bf0c      	ite	eq
 800b03a:	2301      	moveq	r3, #1
 800b03c:	2300      	movne	r3, #0
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	461a      	mov	r2, r3
 800b042:	e00c      	b.n	800b05e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	43da      	mvns	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4013      	ands	r3, r2
 800b050:	b29b      	uxth	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	bf0c      	ite	eq
 800b056:	2301      	moveq	r3, #1
 800b058:	2300      	movne	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	461a      	mov	r2, r3
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	429a      	cmp	r2, r3
 800b062:	d0b6      	beq.n	800afd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b07c:	e051      	b.n	800b122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b08c:	d123      	bne.n	800b0d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b09c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f043 0204 	orr.w	r2, r3, #4
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e046      	b.n	800b164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d021      	beq.n	800b122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0de:	f7fd ff07 	bl	8008ef0 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d302      	bcc.n	800b0f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d116      	bne.n	800b122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	f043 0220 	orr.w	r2, r3, #32
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e020      	b.n	800b164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	b2db      	uxtb	r3, r3
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d10c      	bne.n	800b146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	43da      	mvns	r2, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4013      	ands	r3, r2
 800b138:	b29b      	uxth	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bf14      	ite	ne
 800b13e:	2301      	movne	r3, #1
 800b140:	2300      	moveq	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	e00b      	b.n	800b15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	43da      	mvns	r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	4013      	ands	r3, r2
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	bf14      	ite	ne
 800b158:	2301      	movne	r3, #1
 800b15a:	2300      	moveq	r3, #0
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d18d      	bne.n	800b07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b178:	e02d      	b.n	800b1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 f8ce 	bl	800b31c <I2C_IsAcknowledgeFailed>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e02d      	b.n	800b1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b190:	d021      	beq.n	800b1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b192:	f7fd fead 	bl	8008ef0 <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d302      	bcc.n	800b1a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d116      	bne.n	800b1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	f043 0220 	orr.w	r2, r3, #32
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e007      	b.n	800b1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e0:	2b80      	cmp	r3, #128	; 0x80
 800b1e2:	d1ca      	bne.n	800b17a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1fa:	e02d      	b.n	800b258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f88d 	bl	800b31c <I2C_IsAcknowledgeFailed>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e02d      	b.n	800b268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b212:	d021      	beq.n	800b258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b214:	f7fd fe6c 	bl	8008ef0 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	429a      	cmp	r2, r3
 800b222:	d302      	bcc.n	800b22a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d116      	bne.n	800b258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2220      	movs	r2, #32
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	f043 0220 	orr.w	r2, r3, #32
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e007      	b.n	800b268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b04      	cmp	r3, #4
 800b264:	d1ca      	bne.n	800b1fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b27c:	e042      	b.n	800b304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	f003 0310 	and.w	r3, r3, #16
 800b288:	2b10      	cmp	r3, #16
 800b28a:	d119      	bne.n	800b2c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f06f 0210 	mvn.w	r2, #16
 800b294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e029      	b.n	800b314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2c0:	f7fd fe16 	bl	8008ef0 <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d302      	bcc.n	800b2d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d116      	bne.n	800b304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	f043 0220 	orr.w	r2, r3, #32
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e007      	b.n	800b314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d1b5      	bne.n	800b27e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b32e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b332:	d11b      	bne.n	800b36c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b33c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2220      	movs	r2, #32
 800b348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b358:	f043 0204 	orr.w	r2, r3, #4
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e000      	b.n	800b36e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b386:	2300      	movs	r3, #0
 800b388:	603b      	str	r3, [r7, #0]
 800b38a:	4b20      	ldr	r3, [pc, #128]	; (800b40c <HAL_PWREx_EnableOverDrive+0x90>)
 800b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38e:	4a1f      	ldr	r2, [pc, #124]	; (800b40c <HAL_PWREx_EnableOverDrive+0x90>)
 800b390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b394:	6413      	str	r3, [r2, #64]	; 0x40
 800b396:	4b1d      	ldr	r3, [pc, #116]	; (800b40c <HAL_PWREx_EnableOverDrive+0x90>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	; (800b410 <HAL_PWREx_EnableOverDrive+0x94>)
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3a8:	f7fd fda2 	bl	8008ef0 <HAL_GetTick>
 800b3ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b3ae:	e009      	b.n	800b3c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b3b0:	f7fd fd9e 	bl	8008ef0 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3be:	d901      	bls.n	800b3c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e01f      	b.n	800b404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b3c4:	4b13      	ldr	r3, [pc, #76]	; (800b414 <HAL_PWREx_EnableOverDrive+0x98>)
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d0:	d1ee      	bne.n	800b3b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b3d2:	4b11      	ldr	r3, [pc, #68]	; (800b418 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3d8:	f7fd fd8a 	bl	8008ef0 <HAL_GetTick>
 800b3dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b3de:	e009      	b.n	800b3f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b3e0:	f7fd fd86 	bl	8008ef0 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3ee:	d901      	bls.n	800b3f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e007      	b.n	800b404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b3f4:	4b07      	ldr	r3, [pc, #28]	; (800b414 <HAL_PWREx_EnableOverDrive+0x98>)
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b400:	d1ee      	bne.n	800b3e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	40023800 	.word	0x40023800
 800b410:	420e0040 	.word	0x420e0040
 800b414:	40007000 	.word	0x40007000
 800b418:	420e0044 	.word	0x420e0044

0800b41c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e0cc      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b430:	4b68      	ldr	r3, [pc, #416]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 030f 	and.w	r3, r3, #15
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d90c      	bls.n	800b458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b43e:	4b65      	ldr	r3, [pc, #404]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b446:	4b63      	ldr	r3, [pc, #396]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 030f 	and.w	r3, r3, #15
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d001      	beq.n	800b458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	e0b8      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d020      	beq.n	800b4a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b470:	4b59      	ldr	r3, [pc, #356]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	4a58      	ldr	r2, [pc, #352]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b47a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0308 	and.w	r3, r3, #8
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b488:	4b53      	ldr	r3, [pc, #332]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	4a52      	ldr	r2, [pc, #328]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b48e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b494:	4b50      	ldr	r3, [pc, #320]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	494d      	ldr	r1, [pc, #308]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d044      	beq.n	800b53c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d107      	bne.n	800b4ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ba:	4b47      	ldr	r3, [pc, #284]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d119      	bne.n	800b4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e07f      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d003      	beq.n	800b4da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d107      	bne.n	800b4ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4da:	4b3f      	ldr	r3, [pc, #252]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e06f      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4ea:	4b3b      	ldr	r3, [pc, #236]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e067      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4fa:	4b37      	ldr	r3, [pc, #220]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f023 0203 	bic.w	r2, r3, #3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4934      	ldr	r1, [pc, #208]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b50c:	f7fd fcf0 	bl	8008ef0 <HAL_GetTick>
 800b510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b512:	e00a      	b.n	800b52a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b514:	f7fd fcec 	bl	8008ef0 <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b522:	4293      	cmp	r3, r2
 800b524:	d901      	bls.n	800b52a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e04f      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b52a:	4b2b      	ldr	r3, [pc, #172]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f003 020c 	and.w	r2, r3, #12
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	429a      	cmp	r2, r3
 800b53a:	d1eb      	bne.n	800b514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b53c:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 030f 	and.w	r3, r3, #15
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d20c      	bcs.n	800b564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b54a:	4b22      	ldr	r3, [pc, #136]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b552:	4b20      	ldr	r3, [pc, #128]	; (800b5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 030f 	and.w	r3, r3, #15
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d001      	beq.n	800b564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e032      	b.n	800b5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d008      	beq.n	800b582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b570:	4b19      	ldr	r3, [pc, #100]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	4916      	ldr	r1, [pc, #88]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d009      	beq.n	800b5a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b58e:	4b12      	ldr	r3, [pc, #72]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	490e      	ldr	r1, [pc, #56]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5a2:	f000 f821 	bl	800b5e8 <HAL_RCC_GetSysClockFreq>
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	4b0b      	ldr	r3, [pc, #44]	; (800b5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	091b      	lsrs	r3, r3, #4
 800b5ae:	f003 030f 	and.w	r3, r3, #15
 800b5b2:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <HAL_RCC_ClockConfig+0x1c0>)
 800b5b4:	5cd3      	ldrb	r3, [r2, r3]
 800b5b6:	fa21 f303 	lsr.w	r3, r1, r3
 800b5ba:	4a09      	ldr	r2, [pc, #36]	; (800b5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800b5bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b5be:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fd fc50 	bl	8008e68 <HAL_InitTick>

  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	40023c00 	.word	0x40023c00
 800b5d8:	40023800 	.word	0x40023800
 800b5dc:	08019374 	.word	0x08019374
 800b5e0:	20000000 	.word	0x20000000
 800b5e4:	20000004 	.word	0x20000004

0800b5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	607b      	str	r3, [r7, #4]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5fe:	4b63      	ldr	r3, [pc, #396]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f003 030c 	and.w	r3, r3, #12
 800b606:	2b04      	cmp	r3, #4
 800b608:	d007      	beq.n	800b61a <HAL_RCC_GetSysClockFreq+0x32>
 800b60a:	2b08      	cmp	r3, #8
 800b60c:	d008      	beq.n	800b620 <HAL_RCC_GetSysClockFreq+0x38>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f040 80b4 	bne.w	800b77c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b614:	4b5e      	ldr	r3, [pc, #376]	; (800b790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b616:	60bb      	str	r3, [r7, #8]
       break;
 800b618:	e0b3      	b.n	800b782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b61a:	4b5d      	ldr	r3, [pc, #372]	; (800b790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b61c:	60bb      	str	r3, [r7, #8]
      break;
 800b61e:	e0b0      	b.n	800b782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b620:	4b5a      	ldr	r3, [pc, #360]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b62a:	4b58      	ldr	r3, [pc, #352]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d04a      	beq.n	800b6cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b636:	4b55      	ldr	r3, [pc, #340]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	099b      	lsrs	r3, r3, #6
 800b63c:	f04f 0400 	mov.w	r4, #0
 800b640:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b644:	f04f 0200 	mov.w	r2, #0
 800b648:	ea03 0501 	and.w	r5, r3, r1
 800b64c:	ea04 0602 	and.w	r6, r4, r2
 800b650:	4629      	mov	r1, r5
 800b652:	4632      	mov	r2, r6
 800b654:	f04f 0300 	mov.w	r3, #0
 800b658:	f04f 0400 	mov.w	r4, #0
 800b65c:	0154      	lsls	r4, r2, #5
 800b65e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b662:	014b      	lsls	r3, r1, #5
 800b664:	4619      	mov	r1, r3
 800b666:	4622      	mov	r2, r4
 800b668:	1b49      	subs	r1, r1, r5
 800b66a:	eb62 0206 	sbc.w	r2, r2, r6
 800b66e:	f04f 0300 	mov.w	r3, #0
 800b672:	f04f 0400 	mov.w	r4, #0
 800b676:	0194      	lsls	r4, r2, #6
 800b678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b67c:	018b      	lsls	r3, r1, #6
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	eb64 0402 	sbc.w	r4, r4, r2
 800b684:	f04f 0100 	mov.w	r1, #0
 800b688:	f04f 0200 	mov.w	r2, #0
 800b68c:	00e2      	lsls	r2, r4, #3
 800b68e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b692:	00d9      	lsls	r1, r3, #3
 800b694:	460b      	mov	r3, r1
 800b696:	4614      	mov	r4, r2
 800b698:	195b      	adds	r3, r3, r5
 800b69a:	eb44 0406 	adc.w	r4, r4, r6
 800b69e:	f04f 0100 	mov.w	r1, #0
 800b6a2:	f04f 0200 	mov.w	r2, #0
 800b6a6:	02a2      	lsls	r2, r4, #10
 800b6a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b6ac:	0299      	lsls	r1, r3, #10
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4614      	mov	r4, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f04f 0400 	mov.w	r4, #0
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4623      	mov	r3, r4
 800b6c0:	f7f5 fafa 	bl	8000cb8 <__aeabi_uldivmod>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e049      	b.n	800b760 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6cc:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	099b      	lsrs	r3, r3, #6
 800b6d2:	f04f 0400 	mov.w	r4, #0
 800b6d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	ea03 0501 	and.w	r5, r3, r1
 800b6e2:	ea04 0602 	and.w	r6, r4, r2
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	f04f 0400 	mov.w	r4, #0
 800b6f2:	0154      	lsls	r4, r2, #5
 800b6f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b6f8:	014b      	lsls	r3, r1, #5
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	1b49      	subs	r1, r1, r5
 800b700:	eb62 0206 	sbc.w	r2, r2, r6
 800b704:	f04f 0300 	mov.w	r3, #0
 800b708:	f04f 0400 	mov.w	r4, #0
 800b70c:	0194      	lsls	r4, r2, #6
 800b70e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b712:	018b      	lsls	r3, r1, #6
 800b714:	1a5b      	subs	r3, r3, r1
 800b716:	eb64 0402 	sbc.w	r4, r4, r2
 800b71a:	f04f 0100 	mov.w	r1, #0
 800b71e:	f04f 0200 	mov.w	r2, #0
 800b722:	00e2      	lsls	r2, r4, #3
 800b724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b728:	00d9      	lsls	r1, r3, #3
 800b72a:	460b      	mov	r3, r1
 800b72c:	4614      	mov	r4, r2
 800b72e:	195b      	adds	r3, r3, r5
 800b730:	eb44 0406 	adc.w	r4, r4, r6
 800b734:	f04f 0100 	mov.w	r1, #0
 800b738:	f04f 0200 	mov.w	r2, #0
 800b73c:	02a2      	lsls	r2, r4, #10
 800b73e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b742:	0299      	lsls	r1, r3, #10
 800b744:	460b      	mov	r3, r1
 800b746:	4614      	mov	r4, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	4621      	mov	r1, r4
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f04f 0400 	mov.w	r4, #0
 800b752:	461a      	mov	r2, r3
 800b754:	4623      	mov	r3, r4
 800b756:	f7f5 faaf 	bl	8000cb8 <__aeabi_uldivmod>
 800b75a:	4603      	mov	r3, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	0c1b      	lsrs	r3, r3, #16
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	3301      	adds	r3, #1
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	fbb2 f3f3 	udiv	r3, r2, r3
 800b778:	60bb      	str	r3, [r7, #8]
      break;
 800b77a:	e002      	b.n	800b782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b77e:	60bb      	str	r3, [r7, #8]
      break;
 800b780:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b782:	68bb      	ldr	r3, [r7, #8]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b78c:	40023800 	.word	0x40023800
 800b790:	00f42400 	.word	0x00f42400

0800b794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b798:	4b03      	ldr	r3, [pc, #12]	; (800b7a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b79a:	681b      	ldr	r3, [r3, #0]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000000 	.word	0x20000000

0800b7ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b7b0:	f7ff fff0 	bl	800b794 <HAL_RCC_GetHCLKFreq>
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	0a9b      	lsrs	r3, r3, #10
 800b7bc:	f003 0307 	and.w	r3, r3, #7
 800b7c0:	4a03      	ldr	r2, [pc, #12]	; (800b7d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7c2:	5cd3      	ldrb	r3, [r2, r3]
 800b7c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	40023800 	.word	0x40023800
 800b7d0:	08019384 	.word	0x08019384

0800b7d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b7d8:	f7ff ffdc 	bl	800b794 <HAL_RCC_GetHCLKFreq>
 800b7dc:	4601      	mov	r1, r0
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	0b5b      	lsrs	r3, r3, #13
 800b7e4:	f003 0307 	and.w	r3, r3, #7
 800b7e8:	4a03      	ldr	r2, [pc, #12]	; (800b7f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7ea:	5cd3      	ldrb	r3, [r2, r3]
 800b7ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	08019384 	.word	0x08019384

0800b7fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b808:	2300      	movs	r3, #0
 800b80a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b810:	2300      	movs	r3, #0
 800b812:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b824:	4b66      	ldr	r3, [pc, #408]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b82a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	4963      	ldr	r1, [pc, #396]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b834:	4313      	orrs	r3, r2
 800b836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b846:	4b5e      	ldr	r3, [pc, #376]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b84c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	495a      	ldr	r1, [pc, #360]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b856:	4313      	orrs	r3, r2
 800b858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10b      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d075      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b880:	4b50      	ldr	r3, [pc, #320]	; (800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b886:	f7fd fb33 	bl	8008ef0 <HAL_GetTick>
 800b88a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b88c:	e008      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b88e:	f7fd fb2f 	bl	8008ef0 <HAL_GetTick>
 800b892:	4602      	mov	r2, r0
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d901      	bls.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e1dc      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8a0:	4b47      	ldr	r3, [pc, #284]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1f0      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d009      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	019a      	lsls	r2, r3, #6
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	071b      	lsls	r3, r3, #28
 800b8c4:	493e      	ldr	r1, [pc, #248]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0302 	and.w	r3, r3, #2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01f      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b8d8:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8de:	0f1b      	lsrs	r3, r3, #28
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	019a      	lsls	r2, r3, #6
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	061b      	lsls	r3, r3, #24
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	071b      	lsls	r3, r3, #28
 800b8f8:	4931      	ldr	r1, [pc, #196]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b900:	4b2f      	ldr	r3, [pc, #188]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b906:	f023 021f 	bic.w	r2, r3, #31
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	3b01      	subs	r3, #1
 800b910:	492b      	ldr	r1, [pc, #172]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b912:	4313      	orrs	r3, r2
 800b914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00d      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	019a      	lsls	r2, r3, #6
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	061b      	lsls	r3, r3, #24
 800b930:	431a      	orrs	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	071b      	lsls	r3, r3, #28
 800b938:	4921      	ldr	r1, [pc, #132]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b940:	4b20      	ldr	r3, [pc, #128]	; (800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b942:	2201      	movs	r2, #1
 800b944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b946:	f7fd fad3 	bl	8008ef0 <HAL_GetTick>
 800b94a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b94c:	e008      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b94e:	f7fd facf 	bl	8008ef0 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d901      	bls.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e17c      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b960:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0f0      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d112      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10c      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 80ce 	beq.w	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b99a:	f040 80c8 	bne.w	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b99e:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9a4:	f7fd faa4 	bl	8008ef0 <HAL_GetTick>
 800b9a8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9aa:	e00f      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b9ac:	f7fd faa0 	bl	8008ef0 <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d908      	bls.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e14d      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b9be:	bf00      	nop
 800b9c0:	40023800 	.word	0x40023800
 800b9c4:	42470068 	.word	0x42470068
 800b9c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9cc:	4ba5      	ldr	r3, [pc, #660]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9d8:	d0e8      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0304 	and.w	r3, r3, #4
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d02e      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b9e6:	4b9f      	ldr	r3, [pc, #636]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ec:	0c1b      	lsrs	r3, r3, #16
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b9f8:	4b9a      	ldr	r3, [pc, #616]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fe:	0f1b      	lsrs	r3, r3, #28
 800ba00:	f003 0307 	and.w	r3, r3, #7
 800ba04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	019a      	lsls	r2, r3, #6
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	085b      	lsrs	r3, r3, #1
 800ba10:	3b01      	subs	r3, #1
 800ba12:	041b      	lsls	r3, r3, #16
 800ba14:	431a      	orrs	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	061b      	lsls	r3, r3, #24
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	071b      	lsls	r3, r3, #28
 800ba22:	4990      	ldr	r1, [pc, #576]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba24:	4313      	orrs	r3, r2
 800ba26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ba2a:	4b8e      	ldr	r3, [pc, #568]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	021b      	lsls	r3, r3, #8
 800ba3c:	4989      	ldr	r1, [pc, #548]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0308 	and.w	r3, r3, #8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d02c      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ba50:	4b84      	ldr	r3, [pc, #528]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba56:	0c1b      	lsrs	r3, r3, #16
 800ba58:	f003 0303 	and.w	r3, r3, #3
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba62:	4b80      	ldr	r3, [pc, #512]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba68:	0e1b      	lsrs	r3, r3, #24
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	019a      	lsls	r2, r3, #6
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	041b      	lsls	r3, r3, #16
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	061b      	lsls	r3, r3, #24
 800ba84:	431a      	orrs	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	071b      	lsls	r3, r3, #28
 800ba8c:	4975      	ldr	r1, [pc, #468]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ba94:	4b73      	ldr	r3, [pc, #460]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa2:	4970      	ldr	r1, [pc, #448]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d024      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800baba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800babe:	d11f      	bne.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bac0:	4b68      	ldr	r3, [pc, #416]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac6:	0e1b      	lsrs	r3, r3, #24
 800bac8:	f003 030f 	and.w	r3, r3, #15
 800bacc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bace:	4b65      	ldr	r3, [pc, #404]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad4:	0f1b      	lsrs	r3, r3, #28
 800bad6:	f003 0307 	and.w	r3, r3, #7
 800bada:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	019a      	lsls	r2, r3, #6
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	3b01      	subs	r3, #1
 800baea:	041b      	lsls	r3, r3, #16
 800baec:	431a      	orrs	r2, r3
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	061b      	lsls	r3, r3, #24
 800baf2:	431a      	orrs	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	071b      	lsls	r3, r3, #28
 800baf8:	495a      	ldr	r1, [pc, #360]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bb00:	4b59      	ldr	r3, [pc, #356]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800bb02:	2201      	movs	r2, #1
 800bb04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb06:	f7fd f9f3 	bl	8008ef0 <HAL_GetTick>
 800bb0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb0c:	e008      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bb0e:	f7fd f9ef 	bl	8008ef0 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d901      	bls.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e09c      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb20:	4b50      	ldr	r3, [pc, #320]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb2c:	d1ef      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8083 	beq.w	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60bb      	str	r3, [r7, #8]
 800bb40:	4b48      	ldr	r3, [pc, #288]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb44:	4a47      	ldr	r2, [pc, #284]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb4a:	6413      	str	r3, [r2, #64]	; 0x40
 800bb4c:	4b45      	ldr	r3, [pc, #276]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb54:	60bb      	str	r3, [r7, #8]
 800bb56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bb58:	4b44      	ldr	r3, [pc, #272]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a43      	ldr	r2, [pc, #268]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800bb5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb64:	f7fd f9c4 	bl	8008ef0 <HAL_GetTick>
 800bb68:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bb6a:	e008      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bb6c:	f7fd f9c0 	bl	8008ef0 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d901      	bls.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e06d      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bb7e:	4b3b      	ldr	r3, [pc, #236]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0f0      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bb8a:	4b36      	ldr	r3, [pc, #216]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb92:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d02f      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba2:	69ba      	ldr	r2, [r7, #24]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d028      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bba8:	4b2e      	ldr	r3, [pc, #184]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbb0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bbb2:	4b2f      	ldr	r3, [pc, #188]	; (800bc70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	; (800bc70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bbbe:	4a29      	ldr	r2, [pc, #164]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bbc4:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d114      	bne.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bbd0:	f7fd f98e 	bl	8008ef0 <HAL_GetTick>
 800bbd4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbd6:	e00a      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbd8:	f7fd f98a 	bl	8008ef0 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d901      	bls.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e035      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbee:	4b1d      	ldr	r3, [pc, #116]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0ee      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc06:	d10d      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800bc08:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc1c:	4911      	ldr	r1, [pc, #68]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	608b      	str	r3, [r1, #8]
 800bc22:	e005      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800bc24:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	4a0e      	ldr	r2, [pc, #56]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bc2e:	6093      	str	r3, [r2, #8]
 800bc30:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc3c:	4909      	ldr	r1, [pc, #36]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 0310 	and.w	r3, r3, #16
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800bc56:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3720      	adds	r7, #32
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	40023800 	.word	0x40023800
 800bc68:	42470070 	.word	0x42470070
 800bc6c:	40007000 	.word	0x40007000
 800bc70:	42470e40 	.word	0x42470e40
 800bc74:	424711e0 	.word	0x424711e0

0800bc78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d075      	beq.n	800bd7c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bc90:	4ba2      	ldr	r3, [pc, #648]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f003 030c 	and.w	r3, r3, #12
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d00c      	beq.n	800bcb6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc9c:	4b9f      	ldr	r3, [pc, #636]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d112      	bne.n	800bcce <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bca8:	4b9c      	ldr	r3, [pc, #624]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcb4:	d10b      	bne.n	800bcce <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcb6:	4b99      	ldr	r3, [pc, #612]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d05b      	beq.n	800bd7a <HAL_RCC_OscConfig+0x102>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d157      	bne.n	800bd7a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e20b      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd6:	d106      	bne.n	800bce6 <HAL_RCC_OscConfig+0x6e>
 800bcd8:	4b90      	ldr	r3, [pc, #576]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a8f      	ldr	r2, [pc, #572]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	e01d      	b.n	800bd22 <HAL_RCC_OscConfig+0xaa>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcee:	d10c      	bne.n	800bd0a <HAL_RCC_OscConfig+0x92>
 800bcf0:	4b8a      	ldr	r3, [pc, #552]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a89      	ldr	r2, [pc, #548]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcfa:	6013      	str	r3, [r2, #0]
 800bcfc:	4b87      	ldr	r3, [pc, #540]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a86      	ldr	r2, [pc, #536]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	e00b      	b.n	800bd22 <HAL_RCC_OscConfig+0xaa>
 800bd0a:	4b84      	ldr	r3, [pc, #528]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a83      	ldr	r2, [pc, #524]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	4b81      	ldr	r3, [pc, #516]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a80      	ldr	r2, [pc, #512]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d013      	beq.n	800bd52 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd2a:	f7fd f8e1 	bl	8008ef0 <HAL_GetTick>
 800bd2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd30:	e008      	b.n	800bd44 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd32:	f7fd f8dd 	bl	8008ef0 <HAL_GetTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	2b64      	cmp	r3, #100	; 0x64
 800bd3e:	d901      	bls.n	800bd44 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e1d0      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd44:	4b75      	ldr	r3, [pc, #468]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0f0      	beq.n	800bd32 <HAL_RCC_OscConfig+0xba>
 800bd50:	e014      	b.n	800bd7c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd52:	f7fd f8cd 	bl	8008ef0 <HAL_GetTick>
 800bd56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd58:	e008      	b.n	800bd6c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd5a:	f7fd f8c9 	bl	8008ef0 <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	2b64      	cmp	r3, #100	; 0x64
 800bd66:	d901      	bls.n	800bd6c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e1bc      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd6c:	4b6b      	ldr	r3, [pc, #428]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1f0      	bne.n	800bd5a <HAL_RCC_OscConfig+0xe2>
 800bd78:	e000      	b.n	800bd7c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0302 	and.w	r3, r3, #2
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d063      	beq.n	800be50 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bd88:	4b64      	ldr	r3, [pc, #400]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f003 030c 	and.w	r3, r3, #12
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd94:	4b61      	ldr	r3, [pc, #388]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d11c      	bne.n	800bdda <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bda0:	4b5e      	ldr	r3, [pc, #376]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d116      	bne.n	800bdda <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bdac:	4b5b      	ldr	r3, [pc, #364]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <HAL_RCC_OscConfig+0x14c>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d001      	beq.n	800bdc4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e190      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdc4:	4b55      	ldr	r3, [pc, #340]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	00db      	lsls	r3, r3, #3
 800bdd2:	4952      	ldr	r1, [pc, #328]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bdd8:	e03a      	b.n	800be50 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d020      	beq.n	800be24 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bde2:	4b4f      	ldr	r3, [pc, #316]	; (800bf20 <HAL_RCC_OscConfig+0x2a8>)
 800bde4:	2201      	movs	r2, #1
 800bde6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde8:	f7fd f882 	bl	8008ef0 <HAL_GetTick>
 800bdec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdee:	e008      	b.n	800be02 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bdf0:	f7fd f87e 	bl	8008ef0 <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d901      	bls.n	800be02 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e171      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be02:	4b46      	ldr	r3, [pc, #280]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0302 	and.w	r3, r3, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0f0      	beq.n	800bdf0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be0e:	4b43      	ldr	r3, [pc, #268]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	493f      	ldr	r1, [pc, #252]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	600b      	str	r3, [r1, #0]
 800be22:	e015      	b.n	800be50 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be24:	4b3e      	ldr	r3, [pc, #248]	; (800bf20 <HAL_RCC_OscConfig+0x2a8>)
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be2a:	f7fd f861 	bl	8008ef0 <HAL_GetTick>
 800be2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be30:	e008      	b.n	800be44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be32:	f7fd f85d 	bl	8008ef0 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d901      	bls.n	800be44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e150      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be44:	4b35      	ldr	r3, [pc, #212]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f0      	bne.n	800be32 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0308 	and.w	r3, r3, #8
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d030      	beq.n	800bebe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d016      	beq.n	800be92 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be64:	4b2f      	ldr	r3, [pc, #188]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be6a:	f7fd f841 	bl	8008ef0 <HAL_GetTick>
 800be6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be70:	e008      	b.n	800be84 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be72:	f7fd f83d 	bl	8008ef0 <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d901      	bls.n	800be84 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e130      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be84:	4b25      	ldr	r3, [pc, #148]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800be86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0f0      	beq.n	800be72 <HAL_RCC_OscConfig+0x1fa>
 800be90:	e015      	b.n	800bebe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be92:	4b24      	ldr	r3, [pc, #144]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be98:	f7fd f82a 	bl	8008ef0 <HAL_GetTick>
 800be9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be9e:	e008      	b.n	800beb2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bea0:	f7fd f826 	bl	8008ef0 <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d901      	bls.n	800beb2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e119      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800beb2:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800beb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1f0      	bne.n	800bea0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 0304 	and.w	r3, r3, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 809f 	beq.w	800c00a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800becc:	2300      	movs	r3, #0
 800bece:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bed0:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10f      	bne.n	800befc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	4b0e      	ldr	r3, [pc, #56]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	4a0d      	ldr	r2, [pc, #52]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800bee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beea:	6413      	str	r3, [r2, #64]	; 0x40
 800beec:	4b0b      	ldr	r3, [pc, #44]	; (800bf1c <HAL_RCC_OscConfig+0x2a4>)
 800beee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bef8:	2301      	movs	r3, #1
 800befa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <HAL_RCC_OscConfig+0x2b0>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d120      	bne.n	800bf4a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bf08:	4b07      	ldr	r3, [pc, #28]	; (800bf28 <HAL_RCC_OscConfig+0x2b0>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a06      	ldr	r2, [pc, #24]	; (800bf28 <HAL_RCC_OscConfig+0x2b0>)
 800bf0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf14:	f7fc ffec 	bl	8008ef0 <HAL_GetTick>
 800bf18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf1a:	e010      	b.n	800bf3e <HAL_RCC_OscConfig+0x2c6>
 800bf1c:	40023800 	.word	0x40023800
 800bf20:	42470000 	.word	0x42470000
 800bf24:	42470e80 	.word	0x42470e80
 800bf28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf2c:	f7fc ffe0 	bl	8008ef0 <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e0d3      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf3e:	4b6c      	ldr	r3, [pc, #432]	; (800c0f0 <HAL_RCC_OscConfig+0x478>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0f0      	beq.n	800bf2c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d106      	bne.n	800bf60 <HAL_RCC_OscConfig+0x2e8>
 800bf52:	4b68      	ldr	r3, [pc, #416]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf56:	4a67      	ldr	r2, [pc, #412]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf58:	f043 0301 	orr.w	r3, r3, #1
 800bf5c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf5e:	e01c      	b.n	800bf9a <HAL_RCC_OscConfig+0x322>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2b05      	cmp	r3, #5
 800bf66:	d10c      	bne.n	800bf82 <HAL_RCC_OscConfig+0x30a>
 800bf68:	4b62      	ldr	r3, [pc, #392]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6c:	4a61      	ldr	r2, [pc, #388]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf6e:	f043 0304 	orr.w	r3, r3, #4
 800bf72:	6713      	str	r3, [r2, #112]	; 0x70
 800bf74:	4b5f      	ldr	r3, [pc, #380]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf78:	4a5e      	ldr	r2, [pc, #376]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf7a:	f043 0301 	orr.w	r3, r3, #1
 800bf7e:	6713      	str	r3, [r2, #112]	; 0x70
 800bf80:	e00b      	b.n	800bf9a <HAL_RCC_OscConfig+0x322>
 800bf82:	4b5c      	ldr	r3, [pc, #368]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf86:	4a5b      	ldr	r2, [pc, #364]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf88:	f023 0301 	bic.w	r3, r3, #1
 800bf8c:	6713      	str	r3, [r2, #112]	; 0x70
 800bf8e:	4b59      	ldr	r3, [pc, #356]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	4a58      	ldr	r2, [pc, #352]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bf94:	f023 0304 	bic.w	r3, r3, #4
 800bf98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d015      	beq.n	800bfce <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfa2:	f7fc ffa5 	bl	8008ef0 <HAL_GetTick>
 800bfa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfa8:	e00a      	b.n	800bfc0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bfaa:	f7fc ffa1 	bl	8008ef0 <HAL_GetTick>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d901      	bls.n	800bfc0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	e092      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfc0:	4b4c      	ldr	r3, [pc, #304]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc4:	f003 0302 	and.w	r3, r3, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d0ee      	beq.n	800bfaa <HAL_RCC_OscConfig+0x332>
 800bfcc:	e014      	b.n	800bff8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfce:	f7fc ff8f 	bl	8008ef0 <HAL_GetTick>
 800bfd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfd4:	e00a      	b.n	800bfec <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bfd6:	f7fc ff8b 	bl	8008ef0 <HAL_GetTick>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d901      	bls.n	800bfec <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e07c      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfec:	4b41      	ldr	r3, [pc, #260]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800bfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bff0:	f003 0302 	and.w	r3, r3, #2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1ee      	bne.n	800bfd6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d105      	bne.n	800c00a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bffe:	4b3d      	ldr	r3, [pc, #244]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	4a3c      	ldr	r2, [pc, #240]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d068      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c012:	4b38      	ldr	r3, [pc, #224]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f003 030c 	and.w	r3, r3, #12
 800c01a:	2b08      	cmp	r3, #8
 800c01c:	d060      	beq.n	800c0e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	2b02      	cmp	r3, #2
 800c024:	d145      	bne.n	800c0b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c026:	4b34      	ldr	r3, [pc, #208]	; (800c0f8 <HAL_RCC_OscConfig+0x480>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c02c:	f7fc ff60 	bl	8008ef0 <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c032:	e008      	b.n	800c046 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c034:	f7fc ff5c 	bl	8008ef0 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d901      	bls.n	800c046 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e04f      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c046:	4b2b      	ldr	r3, [pc, #172]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1f0      	bne.n	800c034 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	69da      	ldr	r2, [r3, #28]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	431a      	orrs	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	019b      	lsls	r3, r3, #6
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c068:	085b      	lsrs	r3, r3, #1
 800c06a:	3b01      	subs	r3, #1
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	431a      	orrs	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	061b      	lsls	r3, r3, #24
 800c076:	431a      	orrs	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07c:	071b      	lsls	r3, r3, #28
 800c07e:	491d      	ldr	r1, [pc, #116]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c080:	4313      	orrs	r3, r2
 800c082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c084:	4b1c      	ldr	r3, [pc, #112]	; (800c0f8 <HAL_RCC_OscConfig+0x480>)
 800c086:	2201      	movs	r2, #1
 800c088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08a:	f7fc ff31 	bl	8008ef0 <HAL_GetTick>
 800c08e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c090:	e008      	b.n	800c0a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c092:	f7fc ff2d 	bl	8008ef0 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d901      	bls.n	800c0a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e020      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0a4:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0f0      	beq.n	800c092 <HAL_RCC_OscConfig+0x41a>
 800c0b0:	e018      	b.n	800c0e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0b2:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <HAL_RCC_OscConfig+0x480>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b8:	f7fc ff1a 	bl	8008ef0 <HAL_GetTick>
 800c0bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0be:	e008      	b.n	800c0d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0c0:	f7fc ff16 	bl	8008ef0 <HAL_GetTick>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d901      	bls.n	800c0d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e009      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0d2:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <HAL_RCC_OscConfig+0x47c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1f0      	bne.n	800c0c0 <HAL_RCC_OscConfig+0x448>
 800c0de:	e001      	b.n	800c0e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	40007000 	.word	0x40007000
 800c0f4:	40023800 	.word	0x40023800
 800c0f8:	42470060 	.word	0x42470060

0800c0fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e022      	b.n	800c154 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d105      	bne.n	800c126 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7fa fc89 	bl	8006a38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2203      	movs	r2, #3
 800c12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f814 	bl	800c15c <HAL_SD_InitCard>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e00a      	b.n	800c154 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c15c:	b5b0      	push	{r4, r5, r7, lr}
 800c15e:	b08e      	sub	sp, #56	; 0x38
 800c160:	af04      	add	r7, sp, #16
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c164:	2300      	movs	r3, #0
 800c166:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c170:	2300      	movs	r3, #0
 800c172:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c178:	2376      	movs	r3, #118	; 0x76
 800c17a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681d      	ldr	r5, [r3, #0]
 800c180:	466c      	mov	r4, sp
 800c182:	f107 0314 	add.w	r3, r7, #20
 800c186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c194:	4628      	mov	r0, r5
 800c196:	f003 fa87 	bl	800f6a8 <SDIO_Init>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e031      	b.n	800c210 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c1ac:	4b1a      	ldr	r3, [pc, #104]	; (800c218 <HAL_SD_InitCard+0xbc>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f003 fabf 	bl	800f73a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c1bc:	4b16      	ldr	r3, [pc, #88]	; (800c218 <HAL_SD_InitCard+0xbc>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 ffc6 	bl	800d154 <SD_PowerON>
 800c1c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00b      	beq.n	800c1e8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	431a      	orrs	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e013      	b.n	800c210 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fee5 	bl	800cfb8 <SD_InitCard>
 800c1ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00b      	beq.n	800c20e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c202:	6a3b      	ldr	r3, [r7, #32]
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e000      	b.n	800c210 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3728      	adds	r7, #40	; 0x28
 800c214:	46bd      	mov	sp, r7
 800c216:	bdb0      	pop	{r4, r5, r7, pc}
 800c218:	422580a0 	.word	0x422580a0

0800c21c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08c      	sub	sp, #48	; 0x30
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e0c7      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	f040 80c0 	bne.w	800c3d2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	441a      	add	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c262:	429a      	cmp	r2, r3
 800c264:	d907      	bls.n	800c276 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e0ae      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2203      	movs	r2, #3
 800c27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c294:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	4a50      	ldr	r2, [pc, #320]	; (800c3dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c29c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	4a4f      	ldr	r2, [pc, #316]	; (800c3e0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c2a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3380      	adds	r3, #128	; 0x80
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	025b      	lsls	r3, r3, #9
 800c2c0:	089b      	lsrs	r3, r3, #2
 800c2c2:	f7fd fc07 	bl	8009ad4 <HAL_DMA_Start_IT>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d017      	beq.n	800c2fc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c2da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a40      	ldr	r2, [pc, #256]	; (800c3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e06b      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c2fc:	4b3a      	ldr	r3, [pc, #232]	; (800c3e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c306:	2b01      	cmp	r3, #1
 800c308:	d002      	beq.n	800c310 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	025b      	lsls	r3, r3, #9
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c318:	4618      	mov	r0, r3
 800c31a:	f003 faa1 	bl	800f860 <SDMMC_CmdBlockLength>
 800c31e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00f      	beq.n	800c346 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a2e      	ldr	r2, [pc, #184]	; (800c3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c32c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	431a      	orrs	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e046      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c346:	f04f 33ff 	mov.w	r3, #4294967295
 800c34a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	025b      	lsls	r3, r3, #9
 800c350:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c352:	2390      	movs	r3, #144	; 0x90
 800c354:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c356:	2302      	movs	r3, #2
 800c358:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c35e:	2301      	movs	r3, #1
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f107 0210 	add.w	r2, r7, #16
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f003 fa4b 	bl	800f808 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d90a      	bls.n	800c38e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2282      	movs	r2, #130	; 0x82
 800c37c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c384:	4618      	mov	r0, r3
 800c386:	f003 faaf 	bl	800f8e8 <SDMMC_CmdReadMultiBlock>
 800c38a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c38c:	e009      	b.n	800c3a2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2281      	movs	r2, #129	; 0x81
 800c392:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c39a:	4618      	mov	r0, r3
 800c39c:	f003 fa82 	bl	800f8a4 <SDMMC_CmdReadSingleBlock>
 800c3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d012      	beq.n	800c3ce <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a0d      	ldr	r2, [pc, #52]	; (800c3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e002      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e000      	b.n	800c3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c3d2:	2302      	movs	r3, #2
  }
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3730      	adds	r7, #48	; 0x30
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	0800cdc7 	.word	0x0800cdc7
 800c3e0:	0800ce39 	.word	0x0800ce39
 800c3e4:	004005ff 	.word	0x004005ff
 800c3e8:	4225858c 	.word	0x4225858c

0800c3ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08c      	sub	sp, #48	; 0x30
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d107      	bne.n	800c414 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e0ca      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	f040 80c3 	bne.w	800c5a8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	441a      	add	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c432:	429a      	cmp	r2, r3
 800c434:	d907      	bls.n	800c446 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e0b1      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2203      	movs	r2, #3
 800c44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2200      	movs	r2, #0
 800c454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f042 021a 	orr.w	r2, r2, #26
 800c464:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46a:	4a52      	ldr	r2, [pc, #328]	; (800c5b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c46c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c472:	4a51      	ldr	r2, [pc, #324]	; (800c5b8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c474:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47a:	2200      	movs	r2, #0
 800c47c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c482:	2b01      	cmp	r3, #1
 800c484:	d002      	beq.n	800c48c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	025b      	lsls	r3, r3, #9
 800c48a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c494:	4618      	mov	r0, r3
 800c496:	f003 f9e3 	bl	800f860 <SDMMC_CmdBlockLength>
 800c49a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00f      	beq.n	800c4c2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a45      	ldr	r2, [pc, #276]	; (800c5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e073      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d90a      	bls.n	800c4de <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	22a0      	movs	r2, #160	; 0xa0
 800c4cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f003 fa4b 	bl	800f970 <SDMMC_CmdWriteMultiBlock>
 800c4da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c4dc:	e009      	b.n	800c4f2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2290      	movs	r2, #144	; 0x90
 800c4e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f003 fa1e 	bl	800f92c <SDMMC_CmdWriteSingleBlock>
 800c4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d012      	beq.n	800c51e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a2f      	ldr	r2, [pc, #188]	; (800c5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c4fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	431a      	orrs	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e045      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c51e:	4b28      	ldr	r3, [pc, #160]	; (800c5c0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c520:	2201      	movs	r2, #1
 800c522:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c528:	68b9      	ldr	r1, [r7, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3380      	adds	r3, #128	; 0x80
 800c530:	461a      	mov	r2, r3
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	025b      	lsls	r3, r3, #9
 800c536:	089b      	lsrs	r3, r3, #2
 800c538:	f7fd facc 	bl	8009ad4 <HAL_DMA_Start_IT>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d01a      	beq.n	800c578 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 021a 	bic.w	r2, r2, #26
 800c550:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a19      	ldr	r2, [pc, #100]	; (800c5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e018      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c578:	f04f 33ff 	mov.w	r3, #4294967295
 800c57c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	025b      	lsls	r3, r3, #9
 800c582:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c584:	2390      	movs	r3, #144	; 0x90
 800c586:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c588:	2300      	movs	r3, #0
 800c58a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c590:	2301      	movs	r3, #1
 800c592:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f107 0210 	add.w	r2, r7, #16
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f003 f932 	bl	800f808 <SDIO_ConfigData>

      return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e000      	b.n	800c5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c5a8:	2302      	movs	r3, #2
  }
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3730      	adds	r7, #48	; 0x30
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	0800cd9d 	.word	0x0800cd9d
 800c5b8:	0800ce39 	.word	0x0800ce39
 800c5bc:	004005ff 	.word	0x004005ff
 800c5c0:	4225858c 	.word	0x4225858c

0800c5c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d008      	beq.n	800c5f2 <HAL_SD_IRQHandler+0x2e>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f003 0308 	and.w	r3, r3, #8
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 ffc8 	bl	800d580 <SD_Read_IT>
 800c5f0:	e155      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 808f 	beq.w	800c720 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c60a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6812      	ldr	r2, [r2, #0]
 800c616:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c61a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c61e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0201 	bic.w	r2, r2, #1
 800c62e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f003 0308 	and.w	r3, r3, #8
 800c636:	2b00      	cmp	r3, #0
 800c638:	d039      	beq.n	800c6ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <HAL_SD_IRQHandler+0x8a>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f003 0320 	and.w	r3, r3, #32
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d011      	beq.n	800c672 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f003 f9ae 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800c658:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d008      	beq.n	800c672 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f91f 	bl	800c8b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f240 523a 	movw	r2, #1338	; 0x53a
 800c67a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d104      	bne.n	800c69e <HAL_SD_IRQHandler+0xda>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f003 fe04 	bl	80102ac <HAL_SD_RxCpltCallback>
 800c6a4:	e0fb      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f003 fdf6 	bl	8010298 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c6ac:	e0f7      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 80f2 	beq.w	800c89e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f003 0320 	and.w	r3, r3, #32
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d011      	beq.n	800c6e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f003 f973 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800c6ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d008      	beq.n	800c6e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f8e4 	bl	800c8b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f040 80d5 	bne.w	800c89e <HAL_SD_IRQHandler+0x2da>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f040 80cf 	bne.w	800c89e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f022 0208 	bic.w	r2, r2, #8
 800c70e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f003 fdbd 	bl	8010298 <HAL_SD_TxCpltCallback>
}
 800c71e:	e0be      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d008      	beq.n	800c740 <HAL_SD_IRQHandler+0x17c>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f003 0308 	and.w	r3, r3, #8
 800c734:	2b00      	cmp	r3, #0
 800c736:	d003      	beq.n	800c740 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 ff72 	bl	800d622 <SD_Write_IT>
 800c73e:	e0ae      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c746:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80a7 	beq.w	800c89e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d005      	beq.n	800c76a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	f043 0202 	orr.w	r2, r3, #2
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c770:	f003 0308 	and.w	r3, r3, #8
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77c:	f043 0208 	orr.w	r2, r3, #8
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c796:	f043 0220 	orr.w	r2, r3, #32
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a4:	f003 0310 	and.w	r3, r3, #16
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d005      	beq.n	800c7b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b0:	f043 0210 	orr.w	r2, r3, #16
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800c7c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c7d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f003 f8ec 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f003 0308 	and.w	r3, r3, #8
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00a      	beq.n	800c808 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f855 	bl	800c8b0 <HAL_SD_ErrorCallback>
}
 800c806:	e04a      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d045      	beq.n	800c89e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d104      	bne.n	800c826 <HAL_SD_IRQHandler+0x262>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b00      	cmp	r3, #0
 800c824:	d011      	beq.n	800c84a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82a:	4a1f      	ldr	r2, [pc, #124]	; (800c8a8 <HAL_SD_IRQHandler+0x2e4>)
 800c82c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c832:	4618      	mov	r0, r3
 800c834:	f7fd f9a6 	bl	8009b84 <HAL_DMA_Abort_IT>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02f      	beq.n	800c89e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fb4a 	bl	800cedc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c848:	e029      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	2b00      	cmp	r3, #0
 800c852:	d104      	bne.n	800c85e <HAL_SD_IRQHandler+0x29a>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d011      	beq.n	800c882 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	4a12      	ldr	r2, [pc, #72]	; (800c8ac <HAL_SD_IRQHandler+0x2e8>)
 800c864:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fd f98a 	bl	8009b84 <HAL_DMA_Abort_IT>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d013      	beq.n	800c89e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fb65 	bl	800cf4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c880:	e00d      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f003 fcf4 	bl	8010284 <HAL_SD_AbortCallback>
}
 800c89c:	e7ff      	b.n	800c89e <HAL_SD_IRQHandler+0x2da>
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	0800cedd 	.word	0x0800cedd
 800c8ac:	0800cf4b 	.word	0x0800cf4b

0800c8b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8d2:	0f9b      	lsrs	r3, r3, #30
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8de:	0e9b      	lsrs	r3, r3, #26
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 030f 	and.w	r3, r3, #15
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f0:	0e1b      	lsrs	r3, r3, #24
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c902:	0c1b      	lsrs	r3, r3, #16
 800c904:	b2da      	uxtb	r2, r3
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c90e:	0a1b      	lsrs	r3, r3, #8
 800c910:	b2da      	uxtb	r2, r3
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c924:	0d1b      	lsrs	r3, r3, #20
 800c926:	b29a      	uxth	r2, r3
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c930:	0c1b      	lsrs	r3, r3, #16
 800c932:	b2db      	uxtb	r3, r3
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c942:	0bdb      	lsrs	r3, r3, #15
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c954:	0b9b      	lsrs	r3, r3, #14
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c966:	0b5b      	lsrs	r3, r3, #13
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c978:	0b1b      	lsrs	r3, r3, #12
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	b2da      	uxtb	r2, r3
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2200      	movs	r2, #0
 800c98a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c990:	2b00      	cmp	r3, #0
 800c992:	d163      	bne.n	800ca5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c998:	009a      	lsls	r2, r3, #2
 800c99a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c99e:	4013      	ands	r3, r2
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c9a4:	0f92      	lsrs	r2, r2, #30
 800c9a6:	431a      	orrs	r2, r3
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b0:	0edb      	lsrs	r3, r3, #27
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	f003 0307 	and.w	r3, r3, #7
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c2:	0e1b      	lsrs	r3, r3, #24
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9d4:	0d5b      	lsrs	r3, r3, #21
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	f003 0307 	and.w	r3, r3, #7
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9e6:	0c9b      	lsrs	r3, r3, #18
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 0307 	and.w	r3, r3, #7
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9f8:	0bdb      	lsrs	r3, r3, #15
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0307 	and.w	r3, r3, #7
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	1c5a      	adds	r2, r3, #1
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	7e1b      	ldrb	r3, [r3, #24]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	3302      	adds	r3, #2
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ca26:	fb02 f203 	mul.w	r2, r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	7a1b      	ldrb	r3, [r3, #8]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 030f 	and.w	r3, r3, #15
 800ca38:	2201      	movs	r2, #1
 800ca3a:	409a      	lsls	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ca48:	0a52      	lsrs	r2, r2, #9
 800ca4a:	fb02 f203 	mul.w	r2, r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca58:	661a      	str	r2, [r3, #96]	; 0x60
 800ca5a:	e031      	b.n	800cac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d11d      	bne.n	800caa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca68:	041b      	lsls	r3, r3, #16
 800ca6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	431a      	orrs	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	029a      	lsls	r2, r3, #10
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	661a      	str	r2, [r3, #96]	; 0x60
 800ca9e:	e00f      	b.n	800cac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a58      	ldr	r2, [pc, #352]	; (800cc08 <HAL_SD_GetCardCSD+0x344>)
 800caa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e09d      	b.n	800cbfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cac4:	0b9b      	lsrs	r3, r3, #14
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad6:	09db      	lsrs	r3, r3, #7
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	0fdb      	lsrs	r3, r3, #31
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb04:	0f5b      	lsrs	r3, r3, #29
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 0303 	and.w	r3, r3, #3
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb16:	0e9b      	lsrs	r3, r3, #26
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0307 	and.w	r3, r3, #7
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb28:	0d9b      	lsrs	r3, r3, #22
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	f003 030f 	and.w	r3, r3, #15
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3a:	0d5b      	lsrs	r3, r3, #21
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	f003 0301 	and.w	r3, r3, #1
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb56:	0c1b      	lsrs	r3, r3, #16
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6a:	0bdb      	lsrs	r3, r3, #15
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7e:	0b9b      	lsrs	r3, r3, #14
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb92:	0b5b      	lsrs	r3, r3, #13
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba6:	0b1b      	lsrs	r3, r3, #12
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbba:	0a9b      	lsrs	r3, r3, #10
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	f003 0303 	and.w	r3, r3, #3
 800cbc2:	b2da      	uxtb	r2, r3
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	0a1b      	lsrs	r3, r3, #8
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	f003 0303 	and.w	r3, r3, #3
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe2:	085b      	lsrs	r3, r3, #1
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	004005ff 	.word	0x004005ff

0800cc0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cc64:	b5b0      	push	{r4, r5, r7, lr}
 800cc66:	b08e      	sub	sp, #56	; 0x38
 800cc68:	af04      	add	r7, sp, #16
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2203      	movs	r2, #3
 800cc72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d02e      	beq.n	800ccdc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc84:	d106      	bne.n	800cc94 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	639a      	str	r2, [r3, #56]	; 0x38
 800cc92:	e029      	b.n	800cce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc9a:	d10a      	bne.n	800ccb2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fb0f 	bl	800d2c0 <SD_WideBus_Enable>
 800cca2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	639a      	str	r2, [r3, #56]	; 0x38
 800ccb0:	e01a      	b.n	800cce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10a      	bne.n	800ccce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fb4c 	bl	800d356 <SD_WideBus_Disable>
 800ccbe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38
 800cccc:	e00c      	b.n	800cce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	639a      	str	r2, [r3, #56]	; 0x38
 800ccda:	e005      	b.n	800cce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d009      	beq.n	800cd04 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a18      	ldr	r2, [pc, #96]	; (800cd58 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e024      	b.n	800cd4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	466c      	mov	r4, sp
 800cd2c:	f107 0318 	add.w	r3, r7, #24
 800cd30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd38:	f107 030c 	add.w	r3, r7, #12
 800cd3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f002 fcb2 	bl	800f6a8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bdb0      	pop	{r4, r5, r7, pc}
 800cd56:	bf00      	nop
 800cd58:	004005ff 	.word	0x004005ff

0800cd5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fa7e 	bl	800d270 <SD_SendStatus>
 800cd74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	0a5b      	lsrs	r3, r3, #9
 800cd8c:	f003 030f 	and.w	r3, r3, #15
 800cd90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cd92:	693b      	ldr	r3, [r7, #16]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cdba:	bf00      	nop
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd8:	2b82      	cmp	r3, #130	; 0x82
 800cdda:	d111      	bne.n	800ce00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f002 fde7 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800cde6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d008      	beq.n	800ce00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7ff fd58 	bl	800c8b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f022 0208 	bic.w	r2, r2, #8
 800ce0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f003 fa3f 	bl	80102ac <HAL_SD_RxCpltCallback>
#endif
}
 800ce2e:	bf00      	nop
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7fd f848 	bl	8009edc <HAL_DMA_GetError>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d03e      	beq.n	800ced0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d002      	beq.n	800ce6e <SD_DMAError+0x36>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d12d      	bne.n	800ceca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a19      	ldr	r2, [pc, #100]	; (800ced8 <SD_DMAError+0xa0>)
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ce84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ce92:	6978      	ldr	r0, [r7, #20]
 800ce94:	f7ff ff62 	bl	800cd5c <HAL_SD_GetCardState>
 800ce98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b06      	cmp	r3, #6
 800ce9e:	d002      	beq.n	800cea6 <SD_DMAError+0x6e>
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b05      	cmp	r3, #5
 800cea4:	d10a      	bne.n	800cebc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f002 fd82 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2200      	movs	r2, #0
 800cec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ceca:	6978      	ldr	r0, [r7, #20]
 800cecc:	f7ff fcf0 	bl	800c8b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ced0:	bf00      	nop
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	004005ff 	.word	0x004005ff

0800cedc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f240 523a 	movw	r2, #1338	; 0x53a
 800cef2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7ff ff31 	bl	800cd5c <HAL_SD_GetCardState>
 800cefa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b06      	cmp	r3, #6
 800cf0e:	d002      	beq.n	800cf16 <SD_DMATxAbort+0x3a>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	d10a      	bne.n	800cf2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f002 fd4a 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800cf20:	4602      	mov	r2, r0
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	431a      	orrs	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d103      	bne.n	800cf3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f003 f9a5 	bl	8010284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cf3a:	e002      	b.n	800cf42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7ff fcb7 	bl	800c8b0 <HAL_SD_ErrorCallback>
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff fefa 	bl	800cd5c <HAL_SD_GetCardState>
 800cf68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b06      	cmp	r3, #6
 800cf7c:	d002      	beq.n	800cf84 <SD_DMARxAbort+0x3a>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b05      	cmp	r3, #5
 800cf82:	d10a      	bne.n	800cf9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f002 fd13 	bl	800f9b4 <SDMMC_CmdStopTransfer>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf94:	431a      	orrs	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d103      	bne.n	800cfaa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f003 f96e 	bl	8010284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cfa8:	e002      	b.n	800cfb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7ff fc80 	bl	800c8b0 <HAL_SD_ErrorCallback>
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfb8:	b5b0      	push	{r4, r5, r7, lr}
 800cfba:	b094      	sub	sp, #80	; 0x50
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f002 fbc5 	bl	800f758 <SDIO_GetPowerState>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d102      	bne.n	800cfda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cfd8:	e0b7      	b.n	800d14a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d02f      	beq.n	800d042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f002 fdee 	bl	800fbc8 <SDMMC_CmdSendCID>
 800cfec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d001      	beq.n	800cff8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff6:	e0a8      	b.n	800d14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2100      	movs	r1, #0
 800cffe:	4618      	mov	r0, r3
 800d000:	f002 fbef 	bl	800f7e2 <SDIO_GetResponse>
 800d004:	4602      	mov	r2, r0
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2104      	movs	r1, #4
 800d010:	4618      	mov	r0, r3
 800d012:	f002 fbe6 	bl	800f7e2 <SDIO_GetResponse>
 800d016:	4602      	mov	r2, r0
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2108      	movs	r1, #8
 800d022:	4618      	mov	r0, r3
 800d024:	f002 fbdd 	bl	800f7e2 <SDIO_GetResponse>
 800d028:	4602      	mov	r2, r0
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	210c      	movs	r1, #12
 800d034:	4618      	mov	r0, r3
 800d036:	f002 fbd4 	bl	800f7e2 <SDIO_GetResponse>
 800d03a:	4602      	mov	r2, r0
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d046:	2b03      	cmp	r3, #3
 800d048:	d00d      	beq.n	800d066 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f107 020e 	add.w	r2, r7, #14
 800d052:	4611      	mov	r1, r2
 800d054:	4618      	mov	r0, r3
 800d056:	f002 fdf4 	bl	800fc42 <SDMMC_CmdSetRelAdd>
 800d05a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <SD_InitCard+0xae>
    {
      return errorstate;
 800d062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d064:	e071      	b.n	800d14a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d036      	beq.n	800d0dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d06e:	89fb      	ldrh	r3, [r7, #14]
 800d070:	461a      	mov	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d07e:	041b      	lsls	r3, r3, #16
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f002 fdbe 	bl	800fc04 <SDMMC_CmdSendCSD>
 800d088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d092:	e05a      	b.n	800d14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2100      	movs	r1, #0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f002 fba1 	bl	800f7e2 <SDIO_GetResponse>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2104      	movs	r1, #4
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f002 fb98 	bl	800f7e2 <SDIO_GetResponse>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2108      	movs	r1, #8
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f002 fb8f 	bl	800f7e2 <SDIO_GetResponse>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	210c      	movs	r1, #12
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f002 fb86 	bl	800f7e2 <SDIO_GetResponse>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f002 fb7d 	bl	800f7e2 <SDIO_GetResponse>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	0d1a      	lsrs	r2, r3, #20
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0f0:	f107 0310 	add.w	r3, r7, #16
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fbe4 	bl	800c8c4 <HAL_SD_GetCardCSD>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d106:	e020      	b.n	800d14a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6819      	ldr	r1, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d110:	041b      	lsls	r3, r3, #16
 800d112:	f04f 0400 	mov.w	r4, #0
 800d116:	461a      	mov	r2, r3
 800d118:	4623      	mov	r3, r4
 800d11a:	4608      	mov	r0, r1
 800d11c:	f002 fc6c 	bl	800f9f8 <SDMMC_CmdSelDesel>
 800d120:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <SD_InitCard+0x174>
  {
    return errorstate;
 800d128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12a:	e00e      	b.n	800d14a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681d      	ldr	r5, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	466c      	mov	r4, sp
 800d134:	f103 0210 	add.w	r2, r3, #16
 800d138:	ca07      	ldmia	r2, {r0, r1, r2}
 800d13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d13e:	3304      	adds	r3, #4
 800d140:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d142:	4628      	mov	r0, r5
 800d144:	f002 fab0 	bl	800f6a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3740      	adds	r7, #64	; 0x40
 800d14e:	46bd      	mov	sp, r7
 800d150:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d154 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d160:	2300      	movs	r3, #0
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	2300      	movs	r3, #0
 800d166:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f002 fc66 	bl	800fa3e <SDMMC_CmdGoIdleState>
 800d172:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	e072      	b.n	800d264 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f002 fc79 	bl	800fa7a <SDMMC_CmdOperCond>
 800d188:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00d      	beq.n	800d1ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f002 fc4f 	bl	800fa3e <SDMMC_CmdGoIdleState>
 800d1a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d004      	beq.n	800d1b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	e05b      	b.n	800d264 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d137      	bne.n	800d22a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f002 fc79 	bl	800fab8 <SDMMC_CmdAppCommand>
 800d1c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d02d      	beq.n	800d22a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1d2:	e047      	b.n	800d264 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2100      	movs	r1, #0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f002 fc6c 	bl	800fab8 <SDMMC_CmdAppCommand>
 800d1e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <SD_PowerON+0x98>
    {
      return errorstate;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	e03b      	b.n	800d264 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	491e      	ldr	r1, [pc, #120]	; (800d26c <SD_PowerON+0x118>)
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f002 fc82 	bl	800fafc <SDMMC_CmdAppOperCommand>
 800d1f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d204:	e02e      	b.n	800d264 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2100      	movs	r1, #0
 800d20c:	4618      	mov	r0, r3
 800d20e:	f002 fae8 	bl	800f7e2 <SDIO_GetResponse>
 800d212:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	0fdb      	lsrs	r3, r3, #31
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d101      	bne.n	800d220 <SD_PowerON+0xcc>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e000      	b.n	800d222 <SD_PowerON+0xce>
 800d220:	2300      	movs	r3, #0
 800d222:	613b      	str	r3, [r7, #16]

    count++;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3301      	adds	r3, #1
 800d228:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d230:	4293      	cmp	r3, r2
 800d232:	d802      	bhi.n	800d23a <SD_PowerON+0xe6>
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0cc      	beq.n	800d1d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d240:	4293      	cmp	r3, r2
 800d242:	d902      	bls.n	800d24a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d248:	e00c      	b.n	800d264 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d003      	beq.n	800d25c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	645a      	str	r2, [r3, #68]	; 0x44
 800d25a:	e002      	b.n	800d262 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	c1100000 	.word	0xc1100000

0800d270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d284:	e018      	b.n	800d2b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d28e:	041b      	lsls	r3, r3, #16
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f002 fcf6 	bl	800fc84 <SDMMC_CmdSendStatus>
 800d298:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	e009      	b.n	800d2b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f002 fa99 	bl	800f7e2 <SDIO_GetResponse>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d2b6:	2300      	movs	r3, #0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f002 fa83 	bl	800f7e2 <SDIO_GetResponse>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2e6:	d102      	bne.n	800d2ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2ec:	e02f      	b.n	800d34e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d2ee:	f107 030c 	add.w	r3, r7, #12
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f879 	bl	800d3ec <SD_FindSCR>
 800d2fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	e023      	b.n	800d34e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01c      	beq.n	800d34a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d318:	041b      	lsls	r3, r3, #16
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	f002 fbcb 	bl	800fab8 <SDMMC_CmdAppCommand>
 800d322:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	e00f      	b.n	800d34e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2102      	movs	r1, #2
 800d334:	4618      	mov	r0, r3
 800d336:	f002 fc04 	bl	800fb42 <SDMMC_CmdBusWidth>
 800d33a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	e003      	b.n	800d34e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d346:	2300      	movs	r3, #0
 800d348:	e001      	b.n	800d34e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d34a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d35e:	2300      	movs	r3, #0
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	2300      	movs	r3, #0
 800d364:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2100      	movs	r1, #0
 800d36c:	4618      	mov	r0, r3
 800d36e:	f002 fa38 	bl	800f7e2 <SDIO_GetResponse>
 800d372:	4603      	mov	r3, r0
 800d374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d37c:	d102      	bne.n	800d384 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d382:	e02f      	b.n	800d3e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d384:	f107 030c 	add.w	r3, r7, #12
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f82e 	bl	800d3ec <SD_FindSCR>
 800d390:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	e023      	b.n	800d3e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d01c      	beq.n	800d3e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ae:	041b      	lsls	r3, r3, #16
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	f002 fb80 	bl	800fab8 <SDMMC_CmdAppCommand>
 800d3b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	e00f      	b.n	800d3e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f002 fbb9 	bl	800fb42 <SDMMC_CmdBusWidth>
 800d3d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	e003      	b.n	800d3e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e001      	b.n	800d3e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d3ec:	b590      	push	{r4, r7, lr}
 800d3ee:	b08f      	sub	sp, #60	; 0x3c
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3f6:	f7fb fd7b 	bl	8008ef0 <HAL_GetTick>
 800d3fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d400:	2300      	movs	r3, #0
 800d402:	60bb      	str	r3, [r7, #8]
 800d404:	2300      	movs	r3, #0
 800d406:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2108      	movs	r1, #8
 800d412:	4618      	mov	r0, r3
 800d414:	f002 fa24 	bl	800f860 <SDMMC_CmdBlockLength>
 800d418:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	e0a9      	b.n	800d578 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d42c:	041b      	lsls	r3, r3, #16
 800d42e:	4619      	mov	r1, r3
 800d430:	4610      	mov	r0, r2
 800d432:	f002 fb41 	bl	800fab8 <SDMMC_CmdAppCommand>
 800d436:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	e09a      	b.n	800d578 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d442:	f04f 33ff 	mov.w	r3, #4294967295
 800d446:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d448:	2308      	movs	r3, #8
 800d44a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d44c:	2330      	movs	r3, #48	; 0x30
 800d44e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d450:	2302      	movs	r3, #2
 800d452:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d454:	2300      	movs	r3, #0
 800d456:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d458:	2301      	movs	r3, #1
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f107 0210 	add.w	r2, r7, #16
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f002 f9ce 	bl	800f808 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f002 fb88 	bl	800fb86 <SDMMC_CmdSendSCR>
 800d476:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d022      	beq.n	800d4c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	e07a      	b.n	800d578 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00e      	beq.n	800d4ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	f107 0208 	add.w	r2, r7, #8
 800d49c:	18d4      	adds	r4, r2, r3
 800d49e:	4608      	mov	r0, r1
 800d4a0:	f002 f92d 	bl	800f6fe <SDIO_ReadFIFO>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	6023      	str	r3, [r4, #0]
      index++;
 800d4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4ae:	f7fb fd1f 	bl	8008ef0 <HAL_GetTick>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d102      	bne.n	800d4c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4c2:	e059      	b.n	800d578 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4ca:	f240 432a 	movw	r3, #1066	; 0x42a
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d0d6      	beq.n	800d482 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4da:	f003 0308 	and.w	r3, r3, #8
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2208      	movs	r2, #8
 800d4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d4ea:	2308      	movs	r3, #8
 800d4ec:	e044      	b.n	800d578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f4:	f003 0302 	and.w	r3, r3, #2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2202      	movs	r2, #2
 800d502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d504:	2302      	movs	r3, #2
 800d506:	e037      	b.n	800d578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50e:	f003 0320 	and.w	r3, r3, #32
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2220      	movs	r2, #32
 800d51c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d51e:	2320      	movs	r3, #32
 800d520:	e02a      	b.n	800d578 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f240 523a 	movw	r2, #1338	; 0x53a
 800d52a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	061a      	lsls	r2, r3, #24
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	021b      	lsls	r3, r3, #8
 800d534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	0a1b      	lsrs	r3, r3, #8
 800d53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d542:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	0e1b      	lsrs	r3, r3, #24
 800d548:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54c:	601a      	str	r2, [r3, #0]
    scr++;
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	3304      	adds	r3, #4
 800d552:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	061a      	lsls	r2, r3, #24
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	021b      	lsls	r3, r3, #8
 800d55c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	0a1b      	lsrs	r3, r3, #8
 800d566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d56a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	0e1b      	lsrs	r3, r3, #24
 800d570:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	373c      	adds	r7, #60	; 0x3c
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd90      	pop	{r4, r7, pc}

0800d580 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d592:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d03f      	beq.n	800d61a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d59a:	2300      	movs	r3, #0
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	e033      	b.n	800d608 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f002 f8aa 	bl	800f6fe <SDIO_ReadFIFO>
 800d5aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	0a1b      	lsrs	r3, r3, #8
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	0c1b      	lsrs	r3, r3, #16
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	0e1b      	lsrs	r3, r3, #24
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	3b01      	subs	r3, #1
 800d600:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	3301      	adds	r3, #1
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b07      	cmp	r3, #7
 800d60c:	d9c8      	bls.n	800d5a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d61a:	bf00      	nop
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d043      	beq.n	800d6c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e037      	b.n	800d6b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	3301      	adds	r3, #1
 800d64c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3b01      	subs	r3, #1
 800d652:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	021a      	lsls	r2, r3, #8
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	3301      	adds	r3, #1
 800d664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3b01      	subs	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	041a      	lsls	r2, r3, #16
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	4313      	orrs	r3, r2
 800d676:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3b01      	subs	r3, #1
 800d682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	061a      	lsls	r2, r3, #24
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	4313      	orrs	r3, r2
 800d68e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	3301      	adds	r3, #1
 800d694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	3b01      	subs	r3, #1
 800d69a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f107 0208 	add.w	r2, r7, #8
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f002 f836 	bl	800f718 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b07      	cmp	r3, #7
 800d6b6:	d9c4      	bls.n	800d642 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e056      	b.n	800d78c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d106      	bne.n	800d6fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7f9 fa8f 	bl	8006c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2202      	movs	r2, #2
 800d702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d714:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	431a      	orrs	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	431a      	orrs	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	431a      	orrs	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	431a      	orrs	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	431a      	orrs	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	ea42 0103 	orr.w	r1, r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	430a      	orrs	r2, r1
 800d754:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	0c1b      	lsrs	r3, r3, #16
 800d75c:	f003 0104 	and.w	r1, r3, #4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	69da      	ldr	r2, [r3, #28]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d77a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	603b      	str	r3, [r7, #0]
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d101      	bne.n	800d7b6 <HAL_SPI_Transmit+0x22>
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	e11e      	b.n	800d9f4 <HAL_SPI_Transmit+0x260>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7be:	f7fb fb97 	bl	8008ef0 <HAL_GetTick>
 800d7c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d7c4:	88fb      	ldrh	r3, [r7, #6]
 800d7c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d002      	beq.n	800d7da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d7d8:	e103      	b.n	800d9e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <HAL_SPI_Transmit+0x52>
 800d7e0:	88fb      	ldrh	r3, [r7, #6]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d7ea:	e0fa      	b.n	800d9e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2203      	movs	r2, #3
 800d7f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	88fa      	ldrh	r2, [r7, #6]
 800d804:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d832:	d107      	bne.n	800d844 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d842:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84e:	2b40      	cmp	r3, #64	; 0x40
 800d850:	d007      	beq.n	800d862 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d86a:	d14b      	bne.n	800d904 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <HAL_SPI_Transmit+0xe6>
 800d874:	8afb      	ldrh	r3, [r7, #22]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d13e      	bne.n	800d8f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87e:	881a      	ldrh	r2, [r3, #0]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	1c9a      	adds	r2, r3, #2
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d894:	b29b      	uxth	r3, r3
 800d896:	3b01      	subs	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d89e:	e02b      	b.n	800d8f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f003 0302 	and.w	r3, r3, #2
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	d112      	bne.n	800d8d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b2:	881a      	ldrh	r2, [r3, #0]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8be:	1c9a      	adds	r2, r3, #2
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8d2:	e011      	b.n	800d8f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8d4:	f7fb fb0c 	bl	8008ef0 <HAL_GetTick>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	683a      	ldr	r2, [r7, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d803      	bhi.n	800d8ec <HAL_SPI_Transmit+0x158>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d102      	bne.n	800d8f2 <HAL_SPI_Transmit+0x15e>
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d102      	bne.n	800d8f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8f6:	e074      	b.n	800d9e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1ce      	bne.n	800d8a0 <HAL_SPI_Transmit+0x10c>
 800d902:	e04c      	b.n	800d99e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <HAL_SPI_Transmit+0x17e>
 800d90c:	8afb      	ldrh	r3, [r7, #22]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d140      	bne.n	800d994 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	330c      	adds	r3, #12
 800d91c:	7812      	ldrb	r2, [r2, #0]
 800d91e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d92e:	b29b      	uxth	r3, r3
 800d930:	3b01      	subs	r3, #1
 800d932:	b29a      	uxth	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d938:	e02c      	b.n	800d994 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	f003 0302 	and.w	r3, r3, #2
 800d944:	2b02      	cmp	r3, #2
 800d946:	d113      	bne.n	800d970 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	330c      	adds	r3, #12
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d964:	b29b      	uxth	r3, r3
 800d966:	3b01      	subs	r3, #1
 800d968:	b29a      	uxth	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	86da      	strh	r2, [r3, #54]	; 0x36
 800d96e:	e011      	b.n	800d994 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d970:	f7fb fabe 	bl	8008ef0 <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d803      	bhi.n	800d988 <HAL_SPI_Transmit+0x1f4>
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d986:	d102      	bne.n	800d98e <HAL_SPI_Transmit+0x1fa>
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d102      	bne.n	800d994 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d98e:	2303      	movs	r3, #3
 800d990:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d992:	e026      	b.n	800d9e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d998:	b29b      	uxth	r3, r3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1cd      	bne.n	800d93a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f000 fba4 	bl	800e0f0 <SPI_EndRxTxTransaction>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d002      	beq.n	800d9b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9bc:	2300      	movs	r3, #0
 800d9be:	613b      	str	r3, [r7, #16]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	613b      	str	r3, [r7, #16]
 800d9d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	77fb      	strb	r3, [r7, #31]
 800d9de:	e000      	b.n	800d9e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d9e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d9f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3720      	adds	r7, #32
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af02      	add	r7, sp, #8
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	603b      	str	r3, [r7, #0]
 800da08:	4613      	mov	r3, r2
 800da0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da18:	d112      	bne.n	800da40 <HAL_SPI_Receive+0x44>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10e      	bne.n	800da40 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2204      	movs	r2, #4
 800da26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800da2a:	88fa      	ldrh	r2, [r7, #6]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	4613      	mov	r3, r2
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 f8e9 	bl	800dc0e <HAL_SPI_TransmitReceive>
 800da3c:	4603      	mov	r3, r0
 800da3e:	e0e2      	b.n	800dc06 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da46:	2b01      	cmp	r3, #1
 800da48:	d101      	bne.n	800da4e <HAL_SPI_Receive+0x52>
 800da4a:	2302      	movs	r3, #2
 800da4c:	e0db      	b.n	800dc06 <HAL_SPI_Receive+0x20a>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da56:	f7fb fa4b 	bl	8008ef0 <HAL_GetTick>
 800da5a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b01      	cmp	r3, #1
 800da66:	d002      	beq.n	800da6e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800da68:	2302      	movs	r3, #2
 800da6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800da6c:	e0c2      	b.n	800dbf4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <HAL_SPI_Receive+0x7e>
 800da74:	88fb      	ldrh	r3, [r7, #6]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800da7e:	e0b9      	b.n	800dbf4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2204      	movs	r2, #4
 800da84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	88fa      	ldrh	r2, [r7, #6]
 800da98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	88fa      	ldrh	r2, [r7, #6]
 800da9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dac6:	d107      	bne.n	800dad8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dad6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae2:	2b40      	cmp	r3, #64	; 0x40
 800dae4:	d007      	beq.n	800daf6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800daf4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d162      	bne.n	800dbc4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dafe:	e02e      	b.n	800db5e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d115      	bne.n	800db3a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f103 020c 	add.w	r2, r3, #12
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	7812      	ldrb	r2, [r2, #0]
 800db1c:	b2d2      	uxtb	r2, r2
 800db1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db2e:	b29b      	uxth	r3, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	b29a      	uxth	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db38:	e011      	b.n	800db5e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db3a:	f7fb f9d9 	bl	8008ef0 <HAL_GetTick>
 800db3e:	4602      	mov	r2, r0
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d803      	bhi.n	800db52 <HAL_SPI_Receive+0x156>
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db50:	d102      	bne.n	800db58 <HAL_SPI_Receive+0x15c>
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db5c:	e04a      	b.n	800dbf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db62:	b29b      	uxth	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1cb      	bne.n	800db00 <HAL_SPI_Receive+0x104>
 800db68:	e031      	b.n	800dbce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	2b01      	cmp	r3, #1
 800db76:	d113      	bne.n	800dba0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	b292      	uxth	r2, r2
 800db84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	1c9a      	adds	r2, r3, #2
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db94:	b29b      	uxth	r3, r3
 800db96:	3b01      	subs	r3, #1
 800db98:	b29a      	uxth	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db9e:	e011      	b.n	800dbc4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dba0:	f7fb f9a6 	bl	8008ef0 <HAL_GetTick>
 800dba4:	4602      	mov	r2, r0
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d803      	bhi.n	800dbb8 <HAL_SPI_Receive+0x1bc>
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb6:	d102      	bne.n	800dbbe <HAL_SPI_Receive+0x1c2>
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dbc2:	e017      	b.n	800dbf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1cd      	bne.n	800db6a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f000 fa27 	bl	800e026 <SPI_EndRxTransaction>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2220      	movs	r2, #32
 800dbe2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	75fb      	strb	r3, [r7, #23]
 800dbf0:	e000      	b.n	800dbf4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800dbf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b08c      	sub	sp, #48	; 0x30
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	607a      	str	r2, [r7, #4]
 800dc1a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d101      	bne.n	800dc34 <HAL_SPI_TransmitReceive+0x26>
 800dc30:	2302      	movs	r3, #2
 800dc32:	e18a      	b.n	800df4a <HAL_SPI_TransmitReceive+0x33c>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc3c:	f7fb f958 	bl	8008ef0 <HAL_GetTick>
 800dc40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dc52:	887b      	ldrh	r3, [r7, #2]
 800dc54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d00f      	beq.n	800dc7e <HAL_SPI_TransmitReceive+0x70>
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc64:	d107      	bne.n	800dc76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d103      	bne.n	800dc76 <HAL_SPI_TransmitReceive+0x68>
 800dc6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	d003      	beq.n	800dc7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dc76:	2302      	movs	r3, #2
 800dc78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dc7c:	e15b      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <HAL_SPI_TransmitReceive+0x82>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <HAL_SPI_TransmitReceive+0x82>
 800dc8a:	887b      	ldrh	r3, [r7, #2]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d103      	bne.n	800dc98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dc96:	e14e      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b04      	cmp	r3, #4
 800dca2:	d003      	beq.n	800dcac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2205      	movs	r2, #5
 800dca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	887a      	ldrh	r2, [r7, #2]
 800dcbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	887a      	ldrh	r2, [r7, #2]
 800dcc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	887a      	ldrh	r2, [r7, #2]
 800dcce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	887a      	ldrh	r2, [r7, #2]
 800dcd4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcec:	2b40      	cmp	r3, #64	; 0x40
 800dcee:	d007      	beq.n	800dd00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd08:	d178      	bne.n	800ddfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d002      	beq.n	800dd18 <HAL_SPI_TransmitReceive+0x10a>
 800dd12:	8b7b      	ldrh	r3, [r7, #26]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d166      	bne.n	800dde6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1c:	881a      	ldrh	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd28:	1c9a      	adds	r2, r3, #2
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd3c:	e053      	b.n	800dde6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	f003 0302 	and.w	r3, r3, #2
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d11b      	bne.n	800dd84 <HAL_SPI_TransmitReceive+0x176>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d016      	beq.n	800dd84 <HAL_SPI_TransmitReceive+0x176>
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d113      	bne.n	800dd84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd60:	881a      	ldrh	r2, [r3, #0]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	1c9a      	adds	r2, r3, #2
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd80:	2300      	movs	r3, #0
 800dd82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	f003 0301 	and.w	r3, r3, #1
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d119      	bne.n	800ddc6 <HAL_SPI_TransmitReceive+0x1b8>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d014      	beq.n	800ddc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68da      	ldr	r2, [r3, #12]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	b292      	uxth	r2, r2
 800dda8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddae:	1c9a      	adds	r2, r3, #2
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ddc6:	f7fb f893 	bl	8008ef0 <HAL_GetTick>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d807      	bhi.n	800dde6 <HAL_SPI_TransmitReceive+0x1d8>
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dddc:	d003      	beq.n	800dde6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ddde:	2303      	movs	r3, #3
 800dde0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dde4:	e0a7      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1a6      	bne.n	800dd3e <HAL_SPI_TransmitReceive+0x130>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1a1      	bne.n	800dd3e <HAL_SPI_TransmitReceive+0x130>
 800ddfa:	e07c      	b.n	800def6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <HAL_SPI_TransmitReceive+0x1fc>
 800de04:	8b7b      	ldrh	r3, [r7, #26]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d16b      	bne.n	800dee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	330c      	adds	r3, #12
 800de14:	7812      	ldrb	r2, [r2, #0]
 800de16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de26:	b29b      	uxth	r3, r3
 800de28:	3b01      	subs	r3, #1
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de30:	e057      	b.n	800dee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f003 0302 	and.w	r3, r3, #2
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d11c      	bne.n	800de7a <HAL_SPI_TransmitReceive+0x26c>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de44:	b29b      	uxth	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d017      	beq.n	800de7a <HAL_SPI_TransmitReceive+0x26c>
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d114      	bne.n	800de7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	330c      	adds	r3, #12
 800de5a:	7812      	ldrb	r2, [r2, #0]
 800de5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b01      	subs	r3, #1
 800de70:	b29a      	uxth	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800de76:	2300      	movs	r3, #0
 800de78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b01      	cmp	r3, #1
 800de86:	d119      	bne.n	800debc <HAL_SPI_TransmitReceive+0x2ae>
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d014      	beq.n	800debc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	b2d2      	uxtb	r2, r2
 800de9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3b01      	subs	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800deb8:	2301      	movs	r3, #1
 800deba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800debc:	f7fb f818 	bl	8008ef0 <HAL_GetTick>
 800dec0:	4602      	mov	r2, r0
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dec8:	429a      	cmp	r2, r3
 800deca:	d803      	bhi.n	800ded4 <HAL_SPI_TransmitReceive+0x2c6>
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded2:	d102      	bne.n	800deda <HAL_SPI_TransmitReceive+0x2cc>
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d103      	bne.n	800dee2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800deda:	2303      	movs	r3, #3
 800dedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dee0:	e029      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1a2      	bne.n	800de32 <HAL_SPI_TransmitReceive+0x224>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800def0:	b29b      	uxth	r3, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	d19d      	bne.n	800de32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800def6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f000 f8f8 	bl	800e0f0 <SPI_EndRxTxTransaction>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d006      	beq.n	800df14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2220      	movs	r2, #32
 800df10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800df12:	e010      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10b      	bne.n	800df34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	617b      	str	r3, [r7, #20]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	e000      	b.n	800df36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800df34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2201      	movs	r2, #1
 800df3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3730      	adds	r7, #48	; 0x30
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b084      	sub	sp, #16
 800df56:	af00      	add	r7, sp, #0
 800df58:	60f8      	str	r0, [r7, #12]
 800df5a:	60b9      	str	r1, [r7, #8]
 800df5c:	603b      	str	r3, [r7, #0]
 800df5e:	4613      	mov	r3, r2
 800df60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df62:	e04c      	b.n	800dffe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6a:	d048      	beq.n	800dffe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800df6c:	f7fa ffc0 	bl	8008ef0 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d902      	bls.n	800df82 <SPI_WaitFlagStateUntilTimeout+0x30>
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d13d      	bne.n	800dffe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	685a      	ldr	r2, [r3, #4]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df9a:	d111      	bne.n	800dfc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfa4:	d004      	beq.n	800dfb0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfae:	d107      	bne.n	800dfc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfc8:	d10f      	bne.n	800dfea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dfe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e00f      	b.n	800e01e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	4013      	ands	r3, r2
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	bf0c      	ite	eq
 800e00e:	2301      	moveq	r3, #1
 800e010:	2300      	movne	r3, #0
 800e012:	b2db      	uxtb	r3, r3
 800e014:	461a      	mov	r2, r3
 800e016:	79fb      	ldrb	r3, [r7, #7]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d1a3      	bne.n	800df64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b086      	sub	sp, #24
 800e02a:	af02      	add	r7, sp, #8
 800e02c:	60f8      	str	r0, [r7, #12]
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e03a:	d111      	bne.n	800e060 <SPI_EndRxTransaction+0x3a>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e044:	d004      	beq.n	800e050 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e04e:	d107      	bne.n	800e060 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e05e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e068:	d12a      	bne.n	800e0c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e072:	d012      	beq.n	800e09a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2200      	movs	r2, #0
 800e07c:	2180      	movs	r1, #128	; 0x80
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f7ff ff67 	bl	800df52 <SPI_WaitFlagStateUntilTimeout>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d02d      	beq.n	800e0e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e08e:	f043 0220 	orr.w	r2, r3, #32
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e096:	2303      	movs	r3, #3
 800e098:	e026      	b.n	800e0e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7ff ff54 	bl	800df52 <SPI_WaitFlagStateUntilTimeout>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01a      	beq.n	800e0e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b4:	f043 0220 	orr.w	r2, r3, #32
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e013      	b.n	800e0e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff ff41 	bl	800df52 <SPI_WaitFlagStateUntilTimeout>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0da:	f043 0220 	orr.w	r2, r3, #32
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e000      	b.n	800e0e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e0fc:	4b1b      	ldr	r3, [pc, #108]	; (800e16c <SPI_EndRxTxTransaction+0x7c>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a1b      	ldr	r2, [pc, #108]	; (800e170 <SPI_EndRxTxTransaction+0x80>)
 800e102:	fba2 2303 	umull	r2, r3, r2, r3
 800e106:	0d5b      	lsrs	r3, r3, #21
 800e108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e10c:	fb02 f303 	mul.w	r3, r2, r3
 800e110:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e11a:	d112      	bne.n	800e142 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2200      	movs	r2, #0
 800e124:	2180      	movs	r1, #128	; 0x80
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7ff ff13 	bl	800df52 <SPI_WaitFlagStateUntilTimeout>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d016      	beq.n	800e160 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e136:	f043 0220 	orr.w	r2, r3, #32
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e00f      	b.n	800e162 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00a      	beq.n	800e15e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e158:	2b80      	cmp	r3, #128	; 0x80
 800e15a:	d0f2      	beq.n	800e142 <SPI_EndRxTxTransaction+0x52>
 800e15c:	e000      	b.n	800e160 <SPI_EndRxTxTransaction+0x70>
        break;
 800e15e:	bf00      	nop
  }

  return HAL_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20000000 	.word	0x20000000
 800e170:	165e9f81 	.word	0x165e9f81

0800e174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d101      	bne.n	800e186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e01d      	b.n	800e1c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7f8 fdfa 	bl	8006d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3304      	adds	r3, #4
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	f000 fb56 	bl	800e864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b085      	sub	sp, #20
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	68da      	ldr	r2, [r3, #12]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f042 0201 	orr.w	r2, r2, #1
 800e1e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	f003 0307 	and.w	r3, r3, #7
 800e1ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b06      	cmp	r3, #6
 800e1f2:	d007      	beq.n	800e204 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f042 0201 	orr.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e01d      	b.n	800e260 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7f8 fd37 	bl	8006cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2202      	movs	r2, #2
 800e242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f000 fb07 	bl	800e864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2201      	movs	r2, #1
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fd42 	bl	800ed04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a15      	ldr	r2, [pc, #84]	; (800e2dc <HAL_TIM_PWM_Start+0x74>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d004      	beq.n	800e294 <HAL_TIM_PWM_Start+0x2c>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a14      	ldr	r2, [pc, #80]	; (800e2e0 <HAL_TIM_PWM_Start+0x78>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d101      	bne.n	800e298 <HAL_TIM_PWM_Start+0x30>
 800e294:	2301      	movs	r3, #1
 800e296:	e000      	b.n	800e29a <HAL_TIM_PWM_Start+0x32>
 800e298:	2300      	movs	r3, #0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d007      	beq.n	800e2ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	f003 0307 	and.w	r3, r3, #7
 800e2b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b06      	cmp	r3, #6
 800e2be:	d007      	beq.n	800e2d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f042 0201 	orr.w	r2, r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	40010000 	.word	0x40010000
 800e2e0:	40010400 	.word	0x40010400

0800e2e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d101      	bne.n	800e2f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e083      	b.n	800e400 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d106      	bne.n	800e312 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7f8 fdd1 	bl	8006eb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2202      	movs	r2, #2
 800e316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	6812      	ldr	r2, [r2, #0]
 800e324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e328:	f023 0307 	bic.w	r3, r3, #7
 800e32c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3304      	adds	r3, #4
 800e336:	4619      	mov	r1, r3
 800e338:	4610      	mov	r0, r2
 800e33a:	f000 fa93 	bl	800e864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6a1b      	ldr	r3, [r3, #32]
 800e354:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	4313      	orrs	r3, r2
 800e35e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e366:	f023 0303 	bic.w	r3, r3, #3
 800e36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	4313      	orrs	r3, r2
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e384:	f023 030c 	bic.w	r3, r3, #12
 800e388:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	021b      	lsls	r3, r3, #8
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	011a      	lsls	r2, r3, #4
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	6a1b      	ldr	r3, [r3, #32]
 800e3b2:	031b      	lsls	r3, r3, #12
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e3c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e3ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	011b      	lsls	r3, r3, #4
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <HAL_TIM_Encoder_Start+0x16>
 800e418:	2b04      	cmp	r3, #4
 800e41a:	d008      	beq.n	800e42e <HAL_TIM_Encoder_Start+0x26>
 800e41c:	e00f      	b.n	800e43e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2201      	movs	r2, #1
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f000 fc6c 	bl	800ed04 <TIM_CCxChannelCmd>
      break;
 800e42c:	e016      	b.n	800e45c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2201      	movs	r2, #1
 800e434:	2104      	movs	r1, #4
 800e436:	4618      	mov	r0, r3
 800e438:	f000 fc64 	bl	800ed04 <TIM_CCxChannelCmd>
      break;
 800e43c:	e00e      	b.n	800e45c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2201      	movs	r2, #1
 800e444:	2100      	movs	r1, #0
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fc5c 	bl	800ed04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2201      	movs	r2, #1
 800e452:	2104      	movs	r1, #4
 800e454:	4618      	mov	r0, r3
 800e456:	f000 fc55 	bl	800ed04 <TIM_CCxChannelCmd>
      break;
 800e45a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f042 0201 	orr.w	r2, r2, #1
 800e46a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	f003 0302 	and.w	r3, r3, #2
 800e488:	2b02      	cmp	r3, #2
 800e48a:	d122      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	f003 0302 	and.w	r3, r3, #2
 800e496:	2b02      	cmp	r3, #2
 800e498:	d11b      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f06f 0202 	mvn.w	r2, #2
 800e4a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	f003 0303 	and.w	r3, r3, #3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f9b5 	bl	800e828 <HAL_TIM_IC_CaptureCallback>
 800e4be:	e005      	b.n	800e4cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f9a7 	bl	800e814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f9b8 	bl	800e83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	f003 0304 	and.w	r3, r3, #4
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d122      	bne.n	800e526 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b04      	cmp	r3, #4
 800e4ec:	d11b      	bne.n	800e526 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f06f 0204 	mvn.w	r2, #4
 800e4f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f98b 	bl	800e828 <HAL_TIM_IC_CaptureCallback>
 800e512:	e005      	b.n	800e520 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f97d 	bl	800e814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f98e 	bl	800e83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f003 0308 	and.w	r3, r3, #8
 800e530:	2b08      	cmp	r3, #8
 800e532:	d122      	bne.n	800e57a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	f003 0308 	and.w	r3, r3, #8
 800e53e:	2b08      	cmp	r3, #8
 800e540:	d11b      	bne.n	800e57a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f06f 0208 	mvn.w	r2, #8
 800e54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2204      	movs	r2, #4
 800e550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	f003 0303 	and.w	r3, r3, #3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d003      	beq.n	800e568 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f961 	bl	800e828 <HAL_TIM_IC_CaptureCallback>
 800e566:	e005      	b.n	800e574 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f953 	bl	800e814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f964 	bl	800e83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	2b10      	cmp	r3, #16
 800e586:	d122      	bne.n	800e5ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	f003 0310 	and.w	r3, r3, #16
 800e592:	2b10      	cmp	r3, #16
 800e594:	d11b      	bne.n	800e5ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f06f 0210 	mvn.w	r2, #16
 800e59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2208      	movs	r2, #8
 800e5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	69db      	ldr	r3, [r3, #28]
 800e5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f937 	bl	800e828 <HAL_TIM_IC_CaptureCallback>
 800e5ba:	e005      	b.n	800e5c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f929 	bl	800e814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f93a 	bl	800e83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d10e      	bne.n	800e5fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	f003 0301 	and.w	r3, r3, #1
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d107      	bne.n	800e5fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f06f 0201 	mvn.w	r2, #1
 800e5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7f7 f947 	bl	8005888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e604:	2b80      	cmp	r3, #128	; 0x80
 800e606:	d10e      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e612:	2b80      	cmp	r3, #128	; 0x80
 800e614:	d107      	bne.n	800e626 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fc6d 	bl	800ef00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e630:	2b40      	cmp	r3, #64	; 0x40
 800e632:	d10e      	bne.n	800e652 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e63e:	2b40      	cmp	r3, #64	; 0x40
 800e640:	d107      	bne.n	800e652 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f8ff 	bl	800e850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	f003 0320 	and.w	r3, r3, #32
 800e65c:	2b20      	cmp	r3, #32
 800e65e:	d10e      	bne.n	800e67e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b20      	cmp	r3, #32
 800e66c:	d107      	bne.n	800e67e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f06f 0220 	mvn.w	r2, #32
 800e676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 fc37 	bl	800eeec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d101      	bne.n	800e6a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e69e:	2302      	movs	r3, #2
 800e6a0:	e0b4      	b.n	800e80c <HAL_TIM_PWM_ConfigChannel+0x184>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b0c      	cmp	r3, #12
 800e6b6:	f200 809f 	bhi.w	800e7f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e6ba:	a201      	add	r2, pc, #4	; (adr r2, 800e6c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c0:	0800e6f5 	.word	0x0800e6f5
 800e6c4:	0800e7f9 	.word	0x0800e7f9
 800e6c8:	0800e7f9 	.word	0x0800e7f9
 800e6cc:	0800e7f9 	.word	0x0800e7f9
 800e6d0:	0800e735 	.word	0x0800e735
 800e6d4:	0800e7f9 	.word	0x0800e7f9
 800e6d8:	0800e7f9 	.word	0x0800e7f9
 800e6dc:	0800e7f9 	.word	0x0800e7f9
 800e6e0:	0800e777 	.word	0x0800e777
 800e6e4:	0800e7f9 	.word	0x0800e7f9
 800e6e8:	0800e7f9 	.word	0x0800e7f9
 800e6ec:	0800e7f9 	.word	0x0800e7f9
 800e6f0:	0800e7b7 	.word	0x0800e7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f952 	bl	800e9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0208 	orr.w	r2, r2, #8
 800e70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0204 	bic.w	r2, r2, #4
 800e71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6999      	ldr	r1, [r3, #24]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	691a      	ldr	r2, [r3, #16]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	619a      	str	r2, [r3, #24]
      break;
 800e732:	e062      	b.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f000 f9a2 	bl	800ea84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	699a      	ldr	r2, [r3, #24]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	699a      	ldr	r2, [r3, #24]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6999      	ldr	r1, [r3, #24]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	021a      	lsls	r2, r3, #8
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	430a      	orrs	r2, r1
 800e772:	619a      	str	r2, [r3, #24]
      break;
 800e774:	e041      	b.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 f9f7 	bl	800eb70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	69da      	ldr	r2, [r3, #28]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f042 0208 	orr.w	r2, r2, #8
 800e790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69da      	ldr	r2, [r3, #28]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0204 	bic.w	r2, r2, #4
 800e7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	69d9      	ldr	r1, [r3, #28]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	430a      	orrs	r2, r1
 800e7b2:	61da      	str	r2, [r3, #28]
      break;
 800e7b4:	e021      	b.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fa4b 	bl	800ec58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	69da      	ldr	r2, [r3, #28]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	69da      	ldr	r2, [r3, #28]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	69d9      	ldr	r1, [r3, #28]
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	021a      	lsls	r2, r3, #8
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	430a      	orrs	r2, r1
 800e7f4:	61da      	str	r2, [r3, #28]
      break;
 800e7f6:	e000      	b.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e7f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e830:	bf00      	nop
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e844:	bf00      	nop
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a40      	ldr	r2, [pc, #256]	; (800e978 <TIM_Base_SetConfig+0x114>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d013      	beq.n	800e8a4 <TIM_Base_SetConfig+0x40>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e882:	d00f      	beq.n	800e8a4 <TIM_Base_SetConfig+0x40>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a3d      	ldr	r2, [pc, #244]	; (800e97c <TIM_Base_SetConfig+0x118>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d00b      	beq.n	800e8a4 <TIM_Base_SetConfig+0x40>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a3c      	ldr	r2, [pc, #240]	; (800e980 <TIM_Base_SetConfig+0x11c>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d007      	beq.n	800e8a4 <TIM_Base_SetConfig+0x40>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a3b      	ldr	r2, [pc, #236]	; (800e984 <TIM_Base_SetConfig+0x120>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d003      	beq.n	800e8a4 <TIM_Base_SetConfig+0x40>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a3a      	ldr	r2, [pc, #232]	; (800e988 <TIM_Base_SetConfig+0x124>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d108      	bne.n	800e8b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a2f      	ldr	r2, [pc, #188]	; (800e978 <TIM_Base_SetConfig+0x114>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d02b      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8c4:	d027      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a2c      	ldr	r2, [pc, #176]	; (800e97c <TIM_Base_SetConfig+0x118>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d023      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a2b      	ldr	r2, [pc, #172]	; (800e980 <TIM_Base_SetConfig+0x11c>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d01f      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a2a      	ldr	r2, [pc, #168]	; (800e984 <TIM_Base_SetConfig+0x120>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d01b      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a29      	ldr	r2, [pc, #164]	; (800e988 <TIM_Base_SetConfig+0x124>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d017      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a28      	ldr	r2, [pc, #160]	; (800e98c <TIM_Base_SetConfig+0x128>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d013      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a27      	ldr	r2, [pc, #156]	; (800e990 <TIM_Base_SetConfig+0x12c>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d00f      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a26      	ldr	r2, [pc, #152]	; (800e994 <TIM_Base_SetConfig+0x130>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00b      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a25      	ldr	r2, [pc, #148]	; (800e998 <TIM_Base_SetConfig+0x134>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d007      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a24      	ldr	r2, [pc, #144]	; (800e99c <TIM_Base_SetConfig+0x138>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d003      	beq.n	800e916 <TIM_Base_SetConfig+0xb2>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a23      	ldr	r2, [pc, #140]	; (800e9a0 <TIM_Base_SetConfig+0x13c>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d108      	bne.n	800e928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e91c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	4313      	orrs	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	4313      	orrs	r3, r2
 800e934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a0a      	ldr	r2, [pc, #40]	; (800e978 <TIM_Base_SetConfig+0x114>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d003      	beq.n	800e95c <TIM_Base_SetConfig+0xf8>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a0c      	ldr	r2, [pc, #48]	; (800e988 <TIM_Base_SetConfig+0x124>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d103      	bne.n	800e964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	691a      	ldr	r2, [r3, #16]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	615a      	str	r2, [r3, #20]
}
 800e96a:	bf00      	nop
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	40010000 	.word	0x40010000
 800e97c:	40000400 	.word	0x40000400
 800e980:	40000800 	.word	0x40000800
 800e984:	40000c00 	.word	0x40000c00
 800e988:	40010400 	.word	0x40010400
 800e98c:	40014000 	.word	0x40014000
 800e990:	40014400 	.word	0x40014400
 800e994:	40014800 	.word	0x40014800
 800e998:	40001800 	.word	0x40001800
 800e99c:	40001c00 	.word	0x40001c00
 800e9a0:	40002000 	.word	0x40002000

0800e9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	f023 0201 	bic.w	r2, r3, #1
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f023 0303 	bic.w	r3, r3, #3
 800e9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	f023 0302 	bic.w	r3, r3, #2
 800e9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a20      	ldr	r2, [pc, #128]	; (800ea7c <TIM_OC1_SetConfig+0xd8>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d003      	beq.n	800ea08 <TIM_OC1_SetConfig+0x64>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a1f      	ldr	r2, [pc, #124]	; (800ea80 <TIM_OC1_SetConfig+0xdc>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d10c      	bne.n	800ea22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f023 0308 	bic.w	r3, r3, #8
 800ea0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	697a      	ldr	r2, [r7, #20]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f023 0304 	bic.w	r3, r3, #4
 800ea20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a15      	ldr	r2, [pc, #84]	; (800ea7c <TIM_OC1_SetConfig+0xd8>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d003      	beq.n	800ea32 <TIM_OC1_SetConfig+0x8e>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a14      	ldr	r2, [pc, #80]	; (800ea80 <TIM_OC1_SetConfig+0xdc>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d111      	bne.n	800ea56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	693a      	ldr	r2, [r7, #16]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	621a      	str	r2, [r3, #32]
}
 800ea70:	bf00      	nop
 800ea72:	371c      	adds	r7, #28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	40010000 	.word	0x40010000
 800ea80:	40010400 	.word	0x40010400

0800ea84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a1b      	ldr	r3, [r3, #32]
 800ea92:	f023 0210 	bic.w	r2, r3, #16
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	021b      	lsls	r3, r3, #8
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	f023 0320 	bic.w	r3, r3, #32
 800eace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	011b      	lsls	r3, r3, #4
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	4313      	orrs	r3, r2
 800eada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	4a22      	ldr	r2, [pc, #136]	; (800eb68 <TIM_OC2_SetConfig+0xe4>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d003      	beq.n	800eaec <TIM_OC2_SetConfig+0x68>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a21      	ldr	r2, [pc, #132]	; (800eb6c <TIM_OC2_SetConfig+0xe8>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d10d      	bne.n	800eb08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	011b      	lsls	r3, r3, #4
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a17      	ldr	r2, [pc, #92]	; (800eb68 <TIM_OC2_SetConfig+0xe4>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d003      	beq.n	800eb18 <TIM_OC2_SetConfig+0x94>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a16      	ldr	r2, [pc, #88]	; (800eb6c <TIM_OC2_SetConfig+0xe8>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d113      	bne.n	800eb40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	693a      	ldr	r2, [r7, #16]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	693a      	ldr	r2, [r7, #16]
 800eb44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	621a      	str	r2, [r3, #32]
}
 800eb5a:	bf00      	nop
 800eb5c:	371c      	adds	r7, #28
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	40010000 	.word	0x40010000
 800eb6c:	40010400 	.word	0x40010400

0800eb70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b087      	sub	sp, #28
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f023 0303 	bic.w	r3, r3, #3
 800eba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	021b      	lsls	r3, r3, #8
 800ebc0:	697a      	ldr	r2, [r7, #20]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a21      	ldr	r2, [pc, #132]	; (800ec50 <TIM_OC3_SetConfig+0xe0>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d003      	beq.n	800ebd6 <TIM_OC3_SetConfig+0x66>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a20      	ldr	r2, [pc, #128]	; (800ec54 <TIM_OC3_SetConfig+0xe4>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d10d      	bne.n	800ebf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	021b      	lsls	r3, r3, #8
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ebf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a16      	ldr	r2, [pc, #88]	; (800ec50 <TIM_OC3_SetConfig+0xe0>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d003      	beq.n	800ec02 <TIM_OC3_SetConfig+0x92>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a15      	ldr	r2, [pc, #84]	; (800ec54 <TIM_OC3_SetConfig+0xe4>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d113      	bne.n	800ec2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	693a      	ldr	r2, [r7, #16]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	699b      	ldr	r3, [r3, #24]
 800ec22:	011b      	lsls	r3, r3, #4
 800ec24:	693a      	ldr	r2, [r7, #16]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	685a      	ldr	r2, [r3, #4]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	621a      	str	r2, [r3, #32]
}
 800ec44:	bf00      	nop
 800ec46:	371c      	adds	r7, #28
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	40010000 	.word	0x40010000
 800ec54:	40010400 	.word	0x40010400

0800ec58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b087      	sub	sp, #28
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a1b      	ldr	r3, [r3, #32]
 800ec66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	69db      	ldr	r3, [r3, #28]
 800ec7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	021b      	lsls	r3, r3, #8
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	031b      	lsls	r3, r3, #12
 800ecaa:	693a      	ldr	r2, [r7, #16]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a12      	ldr	r2, [pc, #72]	; (800ecfc <TIM_OC4_SetConfig+0xa4>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d003      	beq.n	800ecc0 <TIM_OC4_SetConfig+0x68>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4a11      	ldr	r2, [pc, #68]	; (800ed00 <TIM_OC4_SetConfig+0xa8>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d109      	bne.n	800ecd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ecc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	019b      	lsls	r3, r3, #6
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	685a      	ldr	r2, [r3, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	693a      	ldr	r2, [r7, #16]
 800ecec:	621a      	str	r2, [r3, #32]
}
 800ecee:	bf00      	nop
 800ecf0:	371c      	adds	r7, #28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	40010000 	.word	0x40010000
 800ed00:	40010400 	.word	0x40010400

0800ed04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 031f 	and.w	r3, r3, #31
 800ed16:	2201      	movs	r2, #1
 800ed18:	fa02 f303 	lsl.w	r3, r2, r3
 800ed1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a1a      	ldr	r2, [r3, #32]
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	43db      	mvns	r3, r3
 800ed26:	401a      	ands	r2, r3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6a1a      	ldr	r2, [r3, #32]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f003 031f 	and.w	r3, r3, #31
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3c:	431a      	orrs	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	621a      	str	r2, [r3, #32]
}
 800ed42:	bf00      	nop
 800ed44:	371c      	adds	r7, #28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
	...

0800ed50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d101      	bne.n	800ed68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ed64:	2302      	movs	r3, #2
 800ed66:	e05a      	b.n	800ee1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2202      	movs	r2, #2
 800ed74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a21      	ldr	r2, [pc, #132]	; (800ee2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d022      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edb4:	d01d      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a1d      	ldr	r2, [pc, #116]	; (800ee30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d018      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a1b      	ldr	r2, [pc, #108]	; (800ee34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d013      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a1a      	ldr	r2, [pc, #104]	; (800ee38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d00e      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a18      	ldr	r2, [pc, #96]	; (800ee3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d009      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4a17      	ldr	r2, [pc, #92]	; (800ee40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d004      	beq.n	800edf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a15      	ldr	r2, [pc, #84]	; (800ee44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d10c      	bne.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	40010000 	.word	0x40010000
 800ee30:	40000400 	.word	0x40000400
 800ee34:	40000800 	.word	0x40000800
 800ee38:	40000c00 	.word	0x40000c00
 800ee3c:	40010400 	.word	0x40010400
 800ee40:	40014000 	.word	0x40014000
 800ee44:	40001800 	.word	0x40001800

0800ee48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d101      	bne.n	800ee64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ee60:	2302      	movs	r3, #2
 800ee62:	e03d      	b.n	800eee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	69db      	ldr	r3, [r3, #28]
 800eeca:	4313      	orrs	r3, r2
 800eecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3714      	adds	r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e03f      	b.n	800efa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d106      	bne.n	800ef40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7f8 f8e4 	bl	8007108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2224      	movs	r2, #36	; 0x24
 800ef44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68da      	ldr	r2, [r3, #12]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 f829 	bl	800efb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ef6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	695a      	ldr	r2, [r3, #20]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ef7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68da      	ldr	r2, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2220      	movs	r2, #32
 800ef98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2220      	movs	r2, #32
 800efa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb4:	b085      	sub	sp, #20
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	68da      	ldr	r2, [r3, #12]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	430a      	orrs	r2, r1
 800efce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	689a      	ldr	r2, [r3, #8]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	431a      	orrs	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	695b      	ldr	r3, [r3, #20]
 800efde:	431a      	orrs	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800eff2:	f023 030c 	bic.w	r3, r3, #12
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	6812      	ldr	r2, [r2, #0]
 800effa:	68f9      	ldr	r1, [r7, #12]
 800effc:	430b      	orrs	r3, r1
 800effe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	699a      	ldr	r2, [r3, #24]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	430a      	orrs	r2, r1
 800f014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f01e:	f040 818b 	bne.w	800f338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4ac1      	ldr	r2, [pc, #772]	; (800f32c <UART_SetConfig+0x37c>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d005      	beq.n	800f038 <UART_SetConfig+0x88>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4abf      	ldr	r2, [pc, #764]	; (800f330 <UART_SetConfig+0x380>)
 800f032:	4293      	cmp	r3, r2
 800f034:	f040 80bd 	bne.w	800f1b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f038:	f7fc fbcc 	bl	800b7d4 <HAL_RCC_GetPCLK2Freq>
 800f03c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	461d      	mov	r5, r3
 800f042:	f04f 0600 	mov.w	r6, #0
 800f046:	46a8      	mov	r8, r5
 800f048:	46b1      	mov	r9, r6
 800f04a:	eb18 0308 	adds.w	r3, r8, r8
 800f04e:	eb49 0409 	adc.w	r4, r9, r9
 800f052:	4698      	mov	r8, r3
 800f054:	46a1      	mov	r9, r4
 800f056:	eb18 0805 	adds.w	r8, r8, r5
 800f05a:	eb49 0906 	adc.w	r9, r9, r6
 800f05e:	f04f 0100 	mov.w	r1, #0
 800f062:	f04f 0200 	mov.w	r2, #0
 800f066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f06a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f06e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f072:	4688      	mov	r8, r1
 800f074:	4691      	mov	r9, r2
 800f076:	eb18 0005 	adds.w	r0, r8, r5
 800f07a:	eb49 0106 	adc.w	r1, r9, r6
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	461d      	mov	r5, r3
 800f084:	f04f 0600 	mov.w	r6, #0
 800f088:	196b      	adds	r3, r5, r5
 800f08a:	eb46 0406 	adc.w	r4, r6, r6
 800f08e:	461a      	mov	r2, r3
 800f090:	4623      	mov	r3, r4
 800f092:	f7f1 fe11 	bl	8000cb8 <__aeabi_uldivmod>
 800f096:	4603      	mov	r3, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	461a      	mov	r2, r3
 800f09c:	4ba5      	ldr	r3, [pc, #660]	; (800f334 <UART_SetConfig+0x384>)
 800f09e:	fba3 2302 	umull	r2, r3, r3, r2
 800f0a2:	095b      	lsrs	r3, r3, #5
 800f0a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	461d      	mov	r5, r3
 800f0ac:	f04f 0600 	mov.w	r6, #0
 800f0b0:	46a9      	mov	r9, r5
 800f0b2:	46b2      	mov	sl, r6
 800f0b4:	eb19 0309 	adds.w	r3, r9, r9
 800f0b8:	eb4a 040a 	adc.w	r4, sl, sl
 800f0bc:	4699      	mov	r9, r3
 800f0be:	46a2      	mov	sl, r4
 800f0c0:	eb19 0905 	adds.w	r9, r9, r5
 800f0c4:	eb4a 0a06 	adc.w	sl, sl, r6
 800f0c8:	f04f 0100 	mov.w	r1, #0
 800f0cc:	f04f 0200 	mov.w	r2, #0
 800f0d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0dc:	4689      	mov	r9, r1
 800f0de:	4692      	mov	sl, r2
 800f0e0:	eb19 0005 	adds.w	r0, r9, r5
 800f0e4:	eb4a 0106 	adc.w	r1, sl, r6
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	461d      	mov	r5, r3
 800f0ee:	f04f 0600 	mov.w	r6, #0
 800f0f2:	196b      	adds	r3, r5, r5
 800f0f4:	eb46 0406 	adc.w	r4, r6, r6
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4623      	mov	r3, r4
 800f0fc:	f7f1 fddc 	bl	8000cb8 <__aeabi_uldivmod>
 800f100:	4603      	mov	r3, r0
 800f102:	460c      	mov	r4, r1
 800f104:	461a      	mov	r2, r3
 800f106:	4b8b      	ldr	r3, [pc, #556]	; (800f334 <UART_SetConfig+0x384>)
 800f108:	fba3 1302 	umull	r1, r3, r3, r2
 800f10c:	095b      	lsrs	r3, r3, #5
 800f10e:	2164      	movs	r1, #100	; 0x64
 800f110:	fb01 f303 	mul.w	r3, r1, r3
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	00db      	lsls	r3, r3, #3
 800f118:	3332      	adds	r3, #50	; 0x32
 800f11a:	4a86      	ldr	r2, [pc, #536]	; (800f334 <UART_SetConfig+0x384>)
 800f11c:	fba2 2303 	umull	r2, r3, r2, r3
 800f120:	095b      	lsrs	r3, r3, #5
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f128:	4498      	add	r8, r3
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	461d      	mov	r5, r3
 800f12e:	f04f 0600 	mov.w	r6, #0
 800f132:	46a9      	mov	r9, r5
 800f134:	46b2      	mov	sl, r6
 800f136:	eb19 0309 	adds.w	r3, r9, r9
 800f13a:	eb4a 040a 	adc.w	r4, sl, sl
 800f13e:	4699      	mov	r9, r3
 800f140:	46a2      	mov	sl, r4
 800f142:	eb19 0905 	adds.w	r9, r9, r5
 800f146:	eb4a 0a06 	adc.w	sl, sl, r6
 800f14a:	f04f 0100 	mov.w	r1, #0
 800f14e:	f04f 0200 	mov.w	r2, #0
 800f152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f15a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f15e:	4689      	mov	r9, r1
 800f160:	4692      	mov	sl, r2
 800f162:	eb19 0005 	adds.w	r0, r9, r5
 800f166:	eb4a 0106 	adc.w	r1, sl, r6
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	461d      	mov	r5, r3
 800f170:	f04f 0600 	mov.w	r6, #0
 800f174:	196b      	adds	r3, r5, r5
 800f176:	eb46 0406 	adc.w	r4, r6, r6
 800f17a:	461a      	mov	r2, r3
 800f17c:	4623      	mov	r3, r4
 800f17e:	f7f1 fd9b 	bl	8000cb8 <__aeabi_uldivmod>
 800f182:	4603      	mov	r3, r0
 800f184:	460c      	mov	r4, r1
 800f186:	461a      	mov	r2, r3
 800f188:	4b6a      	ldr	r3, [pc, #424]	; (800f334 <UART_SetConfig+0x384>)
 800f18a:	fba3 1302 	umull	r1, r3, r3, r2
 800f18e:	095b      	lsrs	r3, r3, #5
 800f190:	2164      	movs	r1, #100	; 0x64
 800f192:	fb01 f303 	mul.w	r3, r1, r3
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	00db      	lsls	r3, r3, #3
 800f19a:	3332      	adds	r3, #50	; 0x32
 800f19c:	4a65      	ldr	r2, [pc, #404]	; (800f334 <UART_SetConfig+0x384>)
 800f19e:	fba2 2303 	umull	r2, r3, r2, r3
 800f1a2:	095b      	lsrs	r3, r3, #5
 800f1a4:	f003 0207 	and.w	r2, r3, #7
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4442      	add	r2, r8
 800f1ae:	609a      	str	r2, [r3, #8]
 800f1b0:	e26f      	b.n	800f692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f1b2:	f7fc fafb 	bl	800b7ac <HAL_RCC_GetPCLK1Freq>
 800f1b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	461d      	mov	r5, r3
 800f1bc:	f04f 0600 	mov.w	r6, #0
 800f1c0:	46a8      	mov	r8, r5
 800f1c2:	46b1      	mov	r9, r6
 800f1c4:	eb18 0308 	adds.w	r3, r8, r8
 800f1c8:	eb49 0409 	adc.w	r4, r9, r9
 800f1cc:	4698      	mov	r8, r3
 800f1ce:	46a1      	mov	r9, r4
 800f1d0:	eb18 0805 	adds.w	r8, r8, r5
 800f1d4:	eb49 0906 	adc.w	r9, r9, r6
 800f1d8:	f04f 0100 	mov.w	r1, #0
 800f1dc:	f04f 0200 	mov.w	r2, #0
 800f1e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f1e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f1e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f1ec:	4688      	mov	r8, r1
 800f1ee:	4691      	mov	r9, r2
 800f1f0:	eb18 0005 	adds.w	r0, r8, r5
 800f1f4:	eb49 0106 	adc.w	r1, r9, r6
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	461d      	mov	r5, r3
 800f1fe:	f04f 0600 	mov.w	r6, #0
 800f202:	196b      	adds	r3, r5, r5
 800f204:	eb46 0406 	adc.w	r4, r6, r6
 800f208:	461a      	mov	r2, r3
 800f20a:	4623      	mov	r3, r4
 800f20c:	f7f1 fd54 	bl	8000cb8 <__aeabi_uldivmod>
 800f210:	4603      	mov	r3, r0
 800f212:	460c      	mov	r4, r1
 800f214:	461a      	mov	r2, r3
 800f216:	4b47      	ldr	r3, [pc, #284]	; (800f334 <UART_SetConfig+0x384>)
 800f218:	fba3 2302 	umull	r2, r3, r3, r2
 800f21c:	095b      	lsrs	r3, r3, #5
 800f21e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	461d      	mov	r5, r3
 800f226:	f04f 0600 	mov.w	r6, #0
 800f22a:	46a9      	mov	r9, r5
 800f22c:	46b2      	mov	sl, r6
 800f22e:	eb19 0309 	adds.w	r3, r9, r9
 800f232:	eb4a 040a 	adc.w	r4, sl, sl
 800f236:	4699      	mov	r9, r3
 800f238:	46a2      	mov	sl, r4
 800f23a:	eb19 0905 	adds.w	r9, r9, r5
 800f23e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f242:	f04f 0100 	mov.w	r1, #0
 800f246:	f04f 0200 	mov.w	r2, #0
 800f24a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f24e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f256:	4689      	mov	r9, r1
 800f258:	4692      	mov	sl, r2
 800f25a:	eb19 0005 	adds.w	r0, r9, r5
 800f25e:	eb4a 0106 	adc.w	r1, sl, r6
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	461d      	mov	r5, r3
 800f268:	f04f 0600 	mov.w	r6, #0
 800f26c:	196b      	adds	r3, r5, r5
 800f26e:	eb46 0406 	adc.w	r4, r6, r6
 800f272:	461a      	mov	r2, r3
 800f274:	4623      	mov	r3, r4
 800f276:	f7f1 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 800f27a:	4603      	mov	r3, r0
 800f27c:	460c      	mov	r4, r1
 800f27e:	461a      	mov	r2, r3
 800f280:	4b2c      	ldr	r3, [pc, #176]	; (800f334 <UART_SetConfig+0x384>)
 800f282:	fba3 1302 	umull	r1, r3, r3, r2
 800f286:	095b      	lsrs	r3, r3, #5
 800f288:	2164      	movs	r1, #100	; 0x64
 800f28a:	fb01 f303 	mul.w	r3, r1, r3
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	3332      	adds	r3, #50	; 0x32
 800f294:	4a27      	ldr	r2, [pc, #156]	; (800f334 <UART_SetConfig+0x384>)
 800f296:	fba2 2303 	umull	r2, r3, r2, r3
 800f29a:	095b      	lsrs	r3, r3, #5
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f2a2:	4498      	add	r8, r3
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	461d      	mov	r5, r3
 800f2a8:	f04f 0600 	mov.w	r6, #0
 800f2ac:	46a9      	mov	r9, r5
 800f2ae:	46b2      	mov	sl, r6
 800f2b0:	eb19 0309 	adds.w	r3, r9, r9
 800f2b4:	eb4a 040a 	adc.w	r4, sl, sl
 800f2b8:	4699      	mov	r9, r3
 800f2ba:	46a2      	mov	sl, r4
 800f2bc:	eb19 0905 	adds.w	r9, r9, r5
 800f2c0:	eb4a 0a06 	adc.w	sl, sl, r6
 800f2c4:	f04f 0100 	mov.w	r1, #0
 800f2c8:	f04f 0200 	mov.w	r2, #0
 800f2cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f2d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2d8:	4689      	mov	r9, r1
 800f2da:	4692      	mov	sl, r2
 800f2dc:	eb19 0005 	adds.w	r0, r9, r5
 800f2e0:	eb4a 0106 	adc.w	r1, sl, r6
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	461d      	mov	r5, r3
 800f2ea:	f04f 0600 	mov.w	r6, #0
 800f2ee:	196b      	adds	r3, r5, r5
 800f2f0:	eb46 0406 	adc.w	r4, r6, r6
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	4623      	mov	r3, r4
 800f2f8:	f7f1 fcde 	bl	8000cb8 <__aeabi_uldivmod>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	460c      	mov	r4, r1
 800f300:	461a      	mov	r2, r3
 800f302:	4b0c      	ldr	r3, [pc, #48]	; (800f334 <UART_SetConfig+0x384>)
 800f304:	fba3 1302 	umull	r1, r3, r3, r2
 800f308:	095b      	lsrs	r3, r3, #5
 800f30a:	2164      	movs	r1, #100	; 0x64
 800f30c:	fb01 f303 	mul.w	r3, r1, r3
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	3332      	adds	r3, #50	; 0x32
 800f316:	4a07      	ldr	r2, [pc, #28]	; (800f334 <UART_SetConfig+0x384>)
 800f318:	fba2 2303 	umull	r2, r3, r2, r3
 800f31c:	095b      	lsrs	r3, r3, #5
 800f31e:	f003 0207 	and.w	r2, r3, #7
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	4442      	add	r2, r8
 800f328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f32a:	e1b2      	b.n	800f692 <UART_SetConfig+0x6e2>
 800f32c:	40011000 	.word	0x40011000
 800f330:	40011400 	.word	0x40011400
 800f334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4ad7      	ldr	r2, [pc, #860]	; (800f69c <UART_SetConfig+0x6ec>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d005      	beq.n	800f34e <UART_SetConfig+0x39e>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	4ad6      	ldr	r2, [pc, #856]	; (800f6a0 <UART_SetConfig+0x6f0>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	f040 80d1 	bne.w	800f4f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f34e:	f7fc fa41 	bl	800b7d4 <HAL_RCC_GetPCLK2Freq>
 800f352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	469a      	mov	sl, r3
 800f358:	f04f 0b00 	mov.w	fp, #0
 800f35c:	46d0      	mov	r8, sl
 800f35e:	46d9      	mov	r9, fp
 800f360:	eb18 0308 	adds.w	r3, r8, r8
 800f364:	eb49 0409 	adc.w	r4, r9, r9
 800f368:	4698      	mov	r8, r3
 800f36a:	46a1      	mov	r9, r4
 800f36c:	eb18 080a 	adds.w	r8, r8, sl
 800f370:	eb49 090b 	adc.w	r9, r9, fp
 800f374:	f04f 0100 	mov.w	r1, #0
 800f378:	f04f 0200 	mov.w	r2, #0
 800f37c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f388:	4688      	mov	r8, r1
 800f38a:	4691      	mov	r9, r2
 800f38c:	eb1a 0508 	adds.w	r5, sl, r8
 800f390:	eb4b 0609 	adc.w	r6, fp, r9
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	4619      	mov	r1, r3
 800f39a:	f04f 0200 	mov.w	r2, #0
 800f39e:	f04f 0300 	mov.w	r3, #0
 800f3a2:	f04f 0400 	mov.w	r4, #0
 800f3a6:	0094      	lsls	r4, r2, #2
 800f3a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3ac:	008b      	lsls	r3, r1, #2
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	4631      	mov	r1, r6
 800f3b6:	f7f1 fc7f 	bl	8000cb8 <__aeabi_uldivmod>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	460c      	mov	r4, r1
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4bb8      	ldr	r3, [pc, #736]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f3c2:	fba3 2302 	umull	r2, r3, r3, r2
 800f3c6:	095b      	lsrs	r3, r3, #5
 800f3c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	469b      	mov	fp, r3
 800f3d0:	f04f 0c00 	mov.w	ip, #0
 800f3d4:	46d9      	mov	r9, fp
 800f3d6:	46e2      	mov	sl, ip
 800f3d8:	eb19 0309 	adds.w	r3, r9, r9
 800f3dc:	eb4a 040a 	adc.w	r4, sl, sl
 800f3e0:	4699      	mov	r9, r3
 800f3e2:	46a2      	mov	sl, r4
 800f3e4:	eb19 090b 	adds.w	r9, r9, fp
 800f3e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f3ec:	f04f 0100 	mov.w	r1, #0
 800f3f0:	f04f 0200 	mov.w	r2, #0
 800f3f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f3fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f400:	4689      	mov	r9, r1
 800f402:	4692      	mov	sl, r2
 800f404:	eb1b 0509 	adds.w	r5, fp, r9
 800f408:	eb4c 060a 	adc.w	r6, ip, sl
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	4619      	mov	r1, r3
 800f412:	f04f 0200 	mov.w	r2, #0
 800f416:	f04f 0300 	mov.w	r3, #0
 800f41a:	f04f 0400 	mov.w	r4, #0
 800f41e:	0094      	lsls	r4, r2, #2
 800f420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f424:	008b      	lsls	r3, r1, #2
 800f426:	461a      	mov	r2, r3
 800f428:	4623      	mov	r3, r4
 800f42a:	4628      	mov	r0, r5
 800f42c:	4631      	mov	r1, r6
 800f42e:	f7f1 fc43 	bl	8000cb8 <__aeabi_uldivmod>
 800f432:	4603      	mov	r3, r0
 800f434:	460c      	mov	r4, r1
 800f436:	461a      	mov	r2, r3
 800f438:	4b9a      	ldr	r3, [pc, #616]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f43a:	fba3 1302 	umull	r1, r3, r3, r2
 800f43e:	095b      	lsrs	r3, r3, #5
 800f440:	2164      	movs	r1, #100	; 0x64
 800f442:	fb01 f303 	mul.w	r3, r1, r3
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	011b      	lsls	r3, r3, #4
 800f44a:	3332      	adds	r3, #50	; 0x32
 800f44c:	4a95      	ldr	r2, [pc, #596]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f44e:	fba2 2303 	umull	r2, r3, r2, r3
 800f452:	095b      	lsrs	r3, r3, #5
 800f454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f458:	4498      	add	r8, r3
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	469b      	mov	fp, r3
 800f45e:	f04f 0c00 	mov.w	ip, #0
 800f462:	46d9      	mov	r9, fp
 800f464:	46e2      	mov	sl, ip
 800f466:	eb19 0309 	adds.w	r3, r9, r9
 800f46a:	eb4a 040a 	adc.w	r4, sl, sl
 800f46e:	4699      	mov	r9, r3
 800f470:	46a2      	mov	sl, r4
 800f472:	eb19 090b 	adds.w	r9, r9, fp
 800f476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f47a:	f04f 0100 	mov.w	r1, #0
 800f47e:	f04f 0200 	mov.w	r2, #0
 800f482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f48a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f48e:	4689      	mov	r9, r1
 800f490:	4692      	mov	sl, r2
 800f492:	eb1b 0509 	adds.w	r5, fp, r9
 800f496:	eb4c 060a 	adc.w	r6, ip, sl
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4619      	mov	r1, r3
 800f4a0:	f04f 0200 	mov.w	r2, #0
 800f4a4:	f04f 0300 	mov.w	r3, #0
 800f4a8:	f04f 0400 	mov.w	r4, #0
 800f4ac:	0094      	lsls	r4, r2, #2
 800f4ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4b2:	008b      	lsls	r3, r1, #2
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4623      	mov	r3, r4
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	f7f1 fbfc 	bl	8000cb8 <__aeabi_uldivmod>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	4b77      	ldr	r3, [pc, #476]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f4c8:	fba3 1302 	umull	r1, r3, r3, r2
 800f4cc:	095b      	lsrs	r3, r3, #5
 800f4ce:	2164      	movs	r1, #100	; 0x64
 800f4d0:	fb01 f303 	mul.w	r3, r1, r3
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	3332      	adds	r3, #50	; 0x32
 800f4da:	4a72      	ldr	r2, [pc, #456]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e0:	095b      	lsrs	r3, r3, #5
 800f4e2:	f003 020f 	and.w	r2, r3, #15
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4442      	add	r2, r8
 800f4ec:	609a      	str	r2, [r3, #8]
 800f4ee:	e0d0      	b.n	800f692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f4f0:	f7fc f95c 	bl	800b7ac <HAL_RCC_GetPCLK1Freq>
 800f4f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	469a      	mov	sl, r3
 800f4fa:	f04f 0b00 	mov.w	fp, #0
 800f4fe:	46d0      	mov	r8, sl
 800f500:	46d9      	mov	r9, fp
 800f502:	eb18 0308 	adds.w	r3, r8, r8
 800f506:	eb49 0409 	adc.w	r4, r9, r9
 800f50a:	4698      	mov	r8, r3
 800f50c:	46a1      	mov	r9, r4
 800f50e:	eb18 080a 	adds.w	r8, r8, sl
 800f512:	eb49 090b 	adc.w	r9, r9, fp
 800f516:	f04f 0100 	mov.w	r1, #0
 800f51a:	f04f 0200 	mov.w	r2, #0
 800f51e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f52a:	4688      	mov	r8, r1
 800f52c:	4691      	mov	r9, r2
 800f52e:	eb1a 0508 	adds.w	r5, sl, r8
 800f532:	eb4b 0609 	adc.w	r6, fp, r9
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	4619      	mov	r1, r3
 800f53c:	f04f 0200 	mov.w	r2, #0
 800f540:	f04f 0300 	mov.w	r3, #0
 800f544:	f04f 0400 	mov.w	r4, #0
 800f548:	0094      	lsls	r4, r2, #2
 800f54a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f54e:	008b      	lsls	r3, r1, #2
 800f550:	461a      	mov	r2, r3
 800f552:	4623      	mov	r3, r4
 800f554:	4628      	mov	r0, r5
 800f556:	4631      	mov	r1, r6
 800f558:	f7f1 fbae 	bl	8000cb8 <__aeabi_uldivmod>
 800f55c:	4603      	mov	r3, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	461a      	mov	r2, r3
 800f562:	4b50      	ldr	r3, [pc, #320]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f564:	fba3 2302 	umull	r2, r3, r3, r2
 800f568:	095b      	lsrs	r3, r3, #5
 800f56a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	469b      	mov	fp, r3
 800f572:	f04f 0c00 	mov.w	ip, #0
 800f576:	46d9      	mov	r9, fp
 800f578:	46e2      	mov	sl, ip
 800f57a:	eb19 0309 	adds.w	r3, r9, r9
 800f57e:	eb4a 040a 	adc.w	r4, sl, sl
 800f582:	4699      	mov	r9, r3
 800f584:	46a2      	mov	sl, r4
 800f586:	eb19 090b 	adds.w	r9, r9, fp
 800f58a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f58e:	f04f 0100 	mov.w	r1, #0
 800f592:	f04f 0200 	mov.w	r2, #0
 800f596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f59a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f59e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f5a2:	4689      	mov	r9, r1
 800f5a4:	4692      	mov	sl, r2
 800f5a6:	eb1b 0509 	adds.w	r5, fp, r9
 800f5aa:	eb4c 060a 	adc.w	r6, ip, sl
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	f04f 0200 	mov.w	r2, #0
 800f5b8:	f04f 0300 	mov.w	r3, #0
 800f5bc:	f04f 0400 	mov.w	r4, #0
 800f5c0:	0094      	lsls	r4, r2, #2
 800f5c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f5c6:	008b      	lsls	r3, r1, #2
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4623      	mov	r3, r4
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	4631      	mov	r1, r6
 800f5d0:	f7f1 fb72 	bl	8000cb8 <__aeabi_uldivmod>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4b32      	ldr	r3, [pc, #200]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800f5e0:	095b      	lsrs	r3, r3, #5
 800f5e2:	2164      	movs	r1, #100	; 0x64
 800f5e4:	fb01 f303 	mul.w	r3, r1, r3
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	011b      	lsls	r3, r3, #4
 800f5ec:	3332      	adds	r3, #50	; 0x32
 800f5ee:	4a2d      	ldr	r2, [pc, #180]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f4:	095b      	lsrs	r3, r3, #5
 800f5f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f5fa:	4498      	add	r8, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	469b      	mov	fp, r3
 800f600:	f04f 0c00 	mov.w	ip, #0
 800f604:	46d9      	mov	r9, fp
 800f606:	46e2      	mov	sl, ip
 800f608:	eb19 0309 	adds.w	r3, r9, r9
 800f60c:	eb4a 040a 	adc.w	r4, sl, sl
 800f610:	4699      	mov	r9, r3
 800f612:	46a2      	mov	sl, r4
 800f614:	eb19 090b 	adds.w	r9, r9, fp
 800f618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f61c:	f04f 0100 	mov.w	r1, #0
 800f620:	f04f 0200 	mov.w	r2, #0
 800f624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f62c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f630:	4689      	mov	r9, r1
 800f632:	4692      	mov	sl, r2
 800f634:	eb1b 0509 	adds.w	r5, fp, r9
 800f638:	eb4c 060a 	adc.w	r6, ip, sl
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	4619      	mov	r1, r3
 800f642:	f04f 0200 	mov.w	r2, #0
 800f646:	f04f 0300 	mov.w	r3, #0
 800f64a:	f04f 0400 	mov.w	r4, #0
 800f64e:	0094      	lsls	r4, r2, #2
 800f650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f654:	008b      	lsls	r3, r1, #2
 800f656:	461a      	mov	r2, r3
 800f658:	4623      	mov	r3, r4
 800f65a:	4628      	mov	r0, r5
 800f65c:	4631      	mov	r1, r6
 800f65e:	f7f1 fb2b 	bl	8000cb8 <__aeabi_uldivmod>
 800f662:	4603      	mov	r3, r0
 800f664:	460c      	mov	r4, r1
 800f666:	461a      	mov	r2, r3
 800f668:	4b0e      	ldr	r3, [pc, #56]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f66a:	fba3 1302 	umull	r1, r3, r3, r2
 800f66e:	095b      	lsrs	r3, r3, #5
 800f670:	2164      	movs	r1, #100	; 0x64
 800f672:	fb01 f303 	mul.w	r3, r1, r3
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	011b      	lsls	r3, r3, #4
 800f67a:	3332      	adds	r3, #50	; 0x32
 800f67c:	4a09      	ldr	r2, [pc, #36]	; (800f6a4 <UART_SetConfig+0x6f4>)
 800f67e:	fba2 2303 	umull	r2, r3, r2, r3
 800f682:	095b      	lsrs	r3, r3, #5
 800f684:	f003 020f 	and.w	r2, r3, #15
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4442      	add	r2, r8
 800f68e:	609a      	str	r2, [r3, #8]
}
 800f690:	e7ff      	b.n	800f692 <UART_SetConfig+0x6e2>
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	40011000 	.word	0x40011000
 800f6a0:	40011400 	.word	0x40011400
 800f6a4:	51eb851f 	.word	0x51eb851f

0800f6a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	b480      	push	{r7}
 800f6ac:	b085      	sub	sp, #20
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	f107 001c 	add.w	r0, r7, #28
 800f6b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f6be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f6c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f6c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f6ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f6ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f6d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f6e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	431a      	orrs	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f6ee:	2300      	movs	r3, #0
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3714      	adds	r7, #20
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	b004      	add	sp, #16
 800f6fc:	4770      	bx	lr

0800f6fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f6fe:	b480      	push	{r7}
 800f700:	b083      	sub	sp, #12
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2203      	movs	r2, #3
 800f746:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f748:	2002      	movs	r0, #2
 800f74a:	f7f9 fbdd 	bl	8008f08 <HAL_Delay>
  
  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 0303 	and.w	r3, r3, #3
}
 800f768:	4618      	mov	r0, r3
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f774:	b480      	push	{r7}
 800f776:	b085      	sub	sp, #20
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f792:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f798:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f79e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f7ae:	f023 030f 	bic.w	r3, r3, #15
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	431a      	orrs	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3714      	adds	r7, #20
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	b2db      	uxtb	r3, r3
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b085      	sub	sp, #20
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
 800f7ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	3314      	adds	r3, #20
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
}  
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3714      	adds	r7, #20
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f82e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f834:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f83a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	4313      	orrs	r3, r2
 800f840:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f846:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	431a      	orrs	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f852:	2300      	movs	r3, #0

}
 800f854:	4618      	mov	r0, r3
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f86e:	2310      	movs	r3, #16
 800f870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f872:	2340      	movs	r3, #64	; 0x40
 800f874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f880:	f107 0308 	add.w	r3, r7, #8
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff ff74 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f890:	2110      	movs	r1, #16
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fa40 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f89a:	69fb      	ldr	r3, [r7, #28]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3720      	adds	r7, #32
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b088      	sub	sp, #32
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f8b2:	2311      	movs	r3, #17
 800f8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8b6:	2340      	movs	r3, #64	; 0x40
 800f8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8c4:	f107 0308 	add.w	r3, r7, #8
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff ff52 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8d4:	2111      	movs	r1, #17
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fa1e 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8de:	69fb      	ldr	r3, [r7, #28]
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3720      	adds	r7, #32
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f8f6:	2312      	movs	r3, #18
 800f8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8fa:	2340      	movs	r3, #64	; 0x40
 800f8fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8fe:	2300      	movs	r3, #0
 800f900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f908:	f107 0308 	add.w	r3, r7, #8
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7ff ff30 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f914:	f241 3288 	movw	r2, #5000	; 0x1388
 800f918:	2112      	movs	r1, #18
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 f9fc 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f922:	69fb      	ldr	r3, [r7, #28]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3720      	adds	r7, #32
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b088      	sub	sp, #32
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f93a:	2318      	movs	r3, #24
 800f93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f93e:	2340      	movs	r3, #64	; 0x40
 800f940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f942:	2300      	movs	r3, #0
 800f944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f94a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f94c:	f107 0308 	add.w	r3, r7, #8
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff ff0e 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f958:	f241 3288 	movw	r2, #5000	; 0x1388
 800f95c:	2118      	movs	r1, #24
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 f9da 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f966:	69fb      	ldr	r3, [r7, #28]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3720      	adds	r7, #32
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b088      	sub	sp, #32
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f97e:	2319      	movs	r3, #25
 800f980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f982:	2340      	movs	r3, #64	; 0x40
 800f984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f986:	2300      	movs	r3, #0
 800f988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f98e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f990:	f107 0308 	add.w	r3, r7, #8
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7ff feec 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9a0:	2119      	movs	r1, #25
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 f9b8 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9aa:	69fb      	ldr	r3, [r7, #28]
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3720      	adds	r7, #32
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b088      	sub	sp, #32
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f9c0:	230c      	movs	r3, #12
 800f9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9c4:	2340      	movs	r3, #64	; 0x40
 800f9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9d2:	f107 0308 	add.w	r3, r7, #8
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fecb 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f9de:	4a05      	ldr	r2, [pc, #20]	; (800f9f4 <SDMMC_CmdStopTransfer+0x40>)
 800f9e0:	210c      	movs	r1, #12
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f998 	bl	800fd18 <SDMMC_GetCmdResp1>
 800f9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	05f5e100 	.word	0x05f5e100

0800f9f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	; 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fa08:	2307      	movs	r3, #7
 800fa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa0c:	2340      	movs	r3, #64	; 0x40
 800fa0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa10:	2300      	movs	r3, #0
 800fa12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa1a:	f107 0310 	add.w	r3, r7, #16
 800fa1e:	4619      	mov	r1, r3
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff fea7 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800fa26:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa2a:	2107      	movs	r1, #7
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f000 f973 	bl	800fd18 <SDMMC_GetCmdResp1>
 800fa32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3728      	adds	r7, #40	; 0x28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b088      	sub	sp, #32
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa52:	2300      	movs	r3, #0
 800fa54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa5c:	f107 0308 	add.w	r3, r7, #8
 800fa60:	4619      	mov	r1, r3
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff fe86 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f92d 	bl	800fcc8 <SDMMC_GetCmdError>
 800fa6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa70:	69fb      	ldr	r3, [r7, #28]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3720      	adds	r7, #32
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b088      	sub	sp, #32
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fa82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800fa86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fa88:	2308      	movs	r3, #8
 800fa8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa8c:	2340      	movs	r3, #64	; 0x40
 800fa8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa90:	2300      	movs	r3, #0
 800fa92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa9a:	f107 0308 	add.w	r3, r7, #8
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff fe67 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 fb16 	bl	80100d8 <SDMMC_GetCmdResp7>
 800faac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faae:	69fb      	ldr	r3, [r7, #28]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3720      	adds	r7, #32
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b088      	sub	sp, #32
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fac6:	2337      	movs	r3, #55	; 0x37
 800fac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800faca:	2340      	movs	r3, #64	; 0x40
 800facc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800face:	2300      	movs	r3, #0
 800fad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fad8:	f107 0308 	add.w	r3, r7, #8
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fe48 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800fae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fae8:	2137      	movs	r1, #55	; 0x37
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f914 	bl	800fd18 <SDMMC_GetCmdResp1>
 800faf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faf2:	69fb      	ldr	r3, [r7, #28]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3720      	adds	r7, #32
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b088      	sub	sp, #32
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fb12:	2329      	movs	r3, #41	; 0x29
 800fb14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb16:	2340      	movs	r3, #64	; 0x40
 800fb18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb24:	f107 0308 	add.w	r3, r7, #8
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff fe22 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fa23 	bl	800ff7c <SDMMC_GetCmdResp3>
 800fb36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb38:	69fb      	ldr	r3, [r7, #28]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3720      	adds	r7, #32
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b088      	sub	sp, #32
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fb50:	2306      	movs	r3, #6
 800fb52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb54:	2340      	movs	r3, #64	; 0x40
 800fb56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb62:	f107 0308 	add.w	r3, r7, #8
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff fe03 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800fb6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb72:	2106      	movs	r1, #6
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 f8cf 	bl	800fd18 <SDMMC_GetCmdResp1>
 800fb7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3720      	adds	r7, #32
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b088      	sub	sp, #32
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fb92:	2333      	movs	r3, #51	; 0x33
 800fb94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb96:	2340      	movs	r3, #64	; 0x40
 800fb98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fba4:	f107 0308 	add.w	r3, r7, #8
 800fba8:	4619      	mov	r1, r3
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7ff fde2 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800fbb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbb4:	2133      	movs	r1, #51	; 0x33
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f8ae 	bl	800fd18 <SDMMC_GetCmdResp1>
 800fbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbbe:	69fb      	ldr	r3, [r7, #28]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3720      	adds	r7, #32
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fbd8:	23c0      	movs	r3, #192	; 0xc0
 800fbda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fbe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fbe6:	f107 0308 	add.w	r3, r7, #8
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff fdc1 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f97c 	bl	800fef0 <SDMMC_GetCmdResp2>
 800fbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbfa:	69fb      	ldr	r3, [r7, #28]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3720      	adds	r7, #32
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b088      	sub	sp, #32
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fc12:	2309      	movs	r3, #9
 800fc14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fc16:	23c0      	movs	r3, #192	; 0xc0
 800fc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fc1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fc24:	f107 0308 	add.w	r3, r7, #8
 800fc28:	4619      	mov	r1, r3
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7ff fda2 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f95d 	bl	800fef0 <SDMMC_GetCmdResp2>
 800fc36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc38:	69fb      	ldr	r3, [r7, #28]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b088      	sub	sp, #32
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
 800fc4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fc50:	2303      	movs	r3, #3
 800fc52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fc54:	2340      	movs	r3, #64	; 0x40
 800fc56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fc5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff fd83 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	2103      	movs	r1, #3
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f9bc 	bl	800fff0 <SDMMC_GetCmdResp6>
 800fc78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc7a:	69fb      	ldr	r3, [r7, #28]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3720      	adds	r7, #32
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b088      	sub	sp, #32
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fc92:	230d      	movs	r3, #13
 800fc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fc96:	2340      	movs	r3, #64	; 0x40
 800fc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fc9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fca4:	f107 0308 	add.w	r3, r7, #8
 800fca8:	4619      	mov	r1, r3
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7ff fd62 	bl	800f774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fcb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fcb4:	210d      	movs	r1, #13
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f82e 	bl	800fd18 <SDMMC_GetCmdResp1>
 800fcbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcbe:	69fb      	ldr	r3, [r7, #28]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3720      	adds	r7, #32
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fcc8:	b490      	push	{r4, r7}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fcd0:	4b0f      	ldr	r3, [pc, #60]	; (800fd10 <SDMMC_GetCmdError+0x48>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a0f      	ldr	r2, [pc, #60]	; (800fd14 <SDMMC_GetCmdError+0x4c>)
 800fcd6:	fba2 2303 	umull	r2, r3, r2, r3
 800fcda:	0a5b      	lsrs	r3, r3, #9
 800fcdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fce0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fce4:	4623      	mov	r3, r4
 800fce6:	1e5c      	subs	r4, r3, #1
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fcf0:	e009      	b.n	800fd06 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0f2      	beq.n	800fce4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	22c5      	movs	r2, #197	; 0xc5
 800fd02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bc90      	pop	{r4, r7}
 800fd0e:	4770      	bx	lr
 800fd10:	20000000 	.word	0x20000000
 800fd14:	10624dd3 	.word	0x10624dd3

0800fd18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fd18:	b590      	push	{r4, r7, lr}
 800fd1a:	b087      	sub	sp, #28
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	460b      	mov	r3, r1
 800fd22:	607a      	str	r2, [r7, #4]
 800fd24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fd26:	4b6f      	ldr	r3, [pc, #444]	; (800fee4 <SDMMC_GetCmdResp1+0x1cc>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a6f      	ldr	r2, [pc, #444]	; (800fee8 <SDMMC_GetCmdResp1+0x1d0>)
 800fd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd30:	0a5b      	lsrs	r3, r3, #9
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fd38:	4623      	mov	r3, r4
 800fd3a:	1e5c      	subs	r4, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d102      	bne.n	800fd46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd44:	e0c9      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd4a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0f0      	beq.n	800fd38 <SDMMC_GetCmdResp1+0x20>
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1eb      	bne.n	800fd38 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd64:	f003 0304 	and.w	r3, r3, #4
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d004      	beq.n	800fd76 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2204      	movs	r2, #4
 800fd70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd72:	2304      	movs	r3, #4
 800fd74:	e0b1      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d004      	beq.n	800fd8c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2201      	movs	r2, #1
 800fd86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e0a6      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	22c5      	movs	r2, #197	; 0xc5
 800fd90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f7ff fd18 	bl	800f7c8 <SDIO_GetCommandResponse>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	7afb      	ldrb	r3, [r7, #11]
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d001      	beq.n	800fda6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fda2:	2301      	movs	r3, #1
 800fda4:	e099      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fda6:	2100      	movs	r1, #0
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f7ff fd1a 	bl	800f7e2 <SDIO_GetResponse>
 800fdae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	4b4e      	ldr	r3, [pc, #312]	; (800feec <SDMMC_GetCmdResp1+0x1d4>)
 800fdb4:	4013      	ands	r3, r2
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d101      	bne.n	800fdbe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	e08d      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	da02      	bge.n	800fdca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fdc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fdc8:	e087      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fdd4:	2340      	movs	r3, #64	; 0x40
 800fdd6:	e080      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fde2:	2380      	movs	r3, #128	; 0x80
 800fde4:	e079      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d002      	beq.n	800fdf6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fdf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdf4:	e071      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fe00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe04:	e069      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fe10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe14:	e061      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fe20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe24:	e059      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d002      	beq.n	800fe36 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe34:	e051      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe44:	e049      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fe50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe54:	e041      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fe60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe64:	e039      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d002      	beq.n	800fe76 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fe70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fe74:	e031      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fe80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fe84:	e029      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fe90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fe94:	e021      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fea4:	e019      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800feac:	2b00      	cmp	r3, #0
 800feae:	d002      	beq.n	800feb6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800feb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800feb4:	e011      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fec4:	e009      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	f003 0308 	and.w	r3, r3, #8
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fed0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fed4:	e001      	b.n	800feda <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	20000000 	.word	0x20000000
 800fee8:	10624dd3 	.word	0x10624dd3
 800feec:	fdffe008 	.word	0xfdffe008

0800fef0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fef0:	b490      	push	{r4, r7}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fef8:	4b1e      	ldr	r3, [pc, #120]	; (800ff74 <SDMMC_GetCmdResp2+0x84>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4a1e      	ldr	r2, [pc, #120]	; (800ff78 <SDMMC_GetCmdResp2+0x88>)
 800fefe:	fba2 2303 	umull	r2, r3, r2, r3
 800ff02:	0a5b      	lsrs	r3, r3, #9
 800ff04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ff0c:	4623      	mov	r3, r4
 800ff0e:	1e5c      	subs	r4, r3, #1
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d102      	bne.n	800ff1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff18:	e026      	b.n	800ff68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d0f0      	beq.n	800ff0c <SDMMC_GetCmdResp2+0x1c>
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1eb      	bne.n	800ff0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff38:	f003 0304 	and.w	r3, r3, #4
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d004      	beq.n	800ff4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2204      	movs	r2, #4
 800ff44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff46:	2304      	movs	r3, #4
 800ff48:	e00e      	b.n	800ff68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d004      	beq.n	800ff60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e003      	b.n	800ff68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	22c5      	movs	r2, #197	; 0xc5
 800ff64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bc90      	pop	{r4, r7}
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	20000000 	.word	0x20000000
 800ff78:	10624dd3 	.word	0x10624dd3

0800ff7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ff7c:	b490      	push	{r4, r7}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff84:	4b18      	ldr	r3, [pc, #96]	; (800ffe8 <SDMMC_GetCmdResp3+0x6c>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a18      	ldr	r2, [pc, #96]	; (800ffec <SDMMC_GetCmdResp3+0x70>)
 800ff8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff8e:	0a5b      	lsrs	r3, r3, #9
 800ff90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ff98:	4623      	mov	r3, r4
 800ff9a:	1e5c      	subs	r4, r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d102      	bne.n	800ffa6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffa4:	e01b      	b.n	800ffde <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffaa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d0f0      	beq.n	800ff98 <SDMMC_GetCmdResp3+0x1c>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1eb      	bne.n	800ff98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d004      	beq.n	800ffd6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2204      	movs	r2, #4
 800ffd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffd2:	2304      	movs	r3, #4
 800ffd4:	e003      	b.n	800ffde <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	22c5      	movs	r2, #197	; 0xc5
 800ffda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bc90      	pop	{r4, r7}
 800ffe6:	4770      	bx	lr
 800ffe8:	20000000 	.word	0x20000000
 800ffec:	10624dd3 	.word	0x10624dd3

0800fff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fff0:	b590      	push	{r4, r7, lr}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	460b      	mov	r3, r1
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fffe:	4b34      	ldr	r3, [pc, #208]	; (80100d0 <SDMMC_GetCmdResp6+0xe0>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a34      	ldr	r2, [pc, #208]	; (80100d4 <SDMMC_GetCmdResp6+0xe4>)
 8010004:	fba2 2303 	umull	r2, r3, r2, r3
 8010008:	0a5b      	lsrs	r3, r3, #9
 801000a:	f241 3288 	movw	r2, #5000	; 0x1388
 801000e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010012:	4623      	mov	r3, r4
 8010014:	1e5c      	subs	r4, r3, #1
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801001a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801001e:	e052      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010024:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801002c:	2b00      	cmp	r3, #0
 801002e:	d0f0      	beq.n	8010012 <SDMMC_GetCmdResp6+0x22>
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010036:	2b00      	cmp	r3, #0
 8010038:	d1eb      	bne.n	8010012 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801003e:	f003 0304 	and.w	r3, r3, #4
 8010042:	2b00      	cmp	r3, #0
 8010044:	d004      	beq.n	8010050 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2204      	movs	r2, #4
 801004a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801004c:	2304      	movs	r3, #4
 801004e:	e03a      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d004      	beq.n	8010066 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2201      	movs	r2, #1
 8010060:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010062:	2301      	movs	r3, #1
 8010064:	e02f      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f7ff fbae 	bl	800f7c8 <SDIO_GetCommandResponse>
 801006c:	4603      	mov	r3, r0
 801006e:	461a      	mov	r2, r3
 8010070:	7afb      	ldrb	r3, [r7, #11]
 8010072:	4293      	cmp	r3, r2
 8010074:	d001      	beq.n	801007a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010076:	2301      	movs	r3, #1
 8010078:	e025      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	22c5      	movs	r2, #197	; 0xc5
 801007e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010080:	2100      	movs	r1, #0
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f7ff fbad 	bl	800f7e2 <SDIO_GetResponse>
 8010088:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010090:	2b00      	cmp	r3, #0
 8010092:	d106      	bne.n	80100a2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	0c1b      	lsrs	r3, r3, #16
 8010098:	b29a      	uxth	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801009e:	2300      	movs	r3, #0
 80100a0:	e011      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80100b0:	e009      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100c0:	e001      	b.n	80100c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	371c      	adds	r7, #28
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd90      	pop	{r4, r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20000000 	.word	0x20000000
 80100d4:	10624dd3 	.word	0x10624dd3

080100d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80100d8:	b490      	push	{r4, r7}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80100e0:	4b21      	ldr	r3, [pc, #132]	; (8010168 <SDMMC_GetCmdResp7+0x90>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a21      	ldr	r2, [pc, #132]	; (801016c <SDMMC_GetCmdResp7+0x94>)
 80100e6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ea:	0a5b      	lsrs	r3, r3, #9
 80100ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80100f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80100f4:	4623      	mov	r3, r4
 80100f6:	1e5c      	subs	r4, r3, #1
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d102      	bne.n	8010102 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80100fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010100:	e02c      	b.n	801015c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010106:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0f0      	beq.n	80100f4 <SDMMC_GetCmdResp7+0x1c>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1eb      	bne.n	80100f4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010120:	f003 0304 	and.w	r3, r3, #4
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2204      	movs	r2, #4
 801012c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801012e:	2304      	movs	r3, #4
 8010130:	e014      	b.n	801015c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010136:	f003 0301 	and.w	r3, r3, #1
 801013a:	2b00      	cmp	r3, #0
 801013c:	d004      	beq.n	8010148 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2201      	movs	r2, #1
 8010142:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010144:	2301      	movs	r3, #1
 8010146:	e009      	b.n	801015c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801014c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2240      	movs	r2, #64	; 0x40
 8010158:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801015a:	2300      	movs	r3, #0
  
}
 801015c:	4618      	mov	r0, r3
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bc90      	pop	{r4, r7}
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	20000000 	.word	0x20000000
 801016c:	10624dd3 	.word	0x10624dd3

08010170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010174:	4904      	ldr	r1, [pc, #16]	; (8010188 <MX_FATFS_Init+0x18>)
 8010176:	4805      	ldr	r0, [pc, #20]	; (801018c <MX_FATFS_Init+0x1c>)
 8010178:	f003 fb9c 	bl	80138b4 <FATFS_LinkDriver>
 801017c:	4603      	mov	r3, r0
 801017e:	461a      	mov	r2, r3
 8010180:	4b03      	ldr	r3, [pc, #12]	; (8010190 <MX_FATFS_Init+0x20>)
 8010182:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010184:	bf00      	nop
 8010186:	bd80      	pop	{r7, pc}
 8010188:	2003fda0 	.word	0x2003fda0
 801018c:	08019394 	.word	0x08019394
 8010190:	2003fd9c 	.word	0x2003fd9c

08010194 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801019e:	f000 f896 	bl	80102ce <BSP_SD_IsDetected>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d001      	beq.n	80101ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e012      	b.n	80101d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80101ac:	480b      	ldr	r0, [pc, #44]	; (80101dc <BSP_SD_Init+0x48>)
 80101ae:	f7fb ffa5 	bl	800c0fc <HAL_SD_Init>
 80101b2:	4603      	mov	r3, r0
 80101b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d109      	bne.n	80101d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80101bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80101c0:	4806      	ldr	r0, [pc, #24]	; (80101dc <BSP_SD_Init+0x48>)
 80101c2:	f7fc fd4f 	bl	800cc64 <HAL_SD_ConfigWideBusOperation>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d001      	beq.n	80101d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80101cc:	2301      	movs	r3, #1
 80101ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80101d0:	79fb      	ldrb	r3, [r7, #7]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	2003fb9c 	.word	0x2003fb9c

080101e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	68f9      	ldr	r1, [r7, #12]
 80101f6:	4806      	ldr	r0, [pc, #24]	; (8010210 <BSP_SD_ReadBlocks_DMA+0x30>)
 80101f8:	f7fc f810 	bl	800c21c <HAL_SD_ReadBlocks_DMA>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d001      	beq.n	8010206 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010206:	7dfb      	ldrb	r3, [r7, #23]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3718      	adds	r7, #24
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	2003fb9c 	.word	0x2003fb9c

08010214 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b086      	sub	sp, #24
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010220:	2300      	movs	r3, #0
 8010222:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	68f9      	ldr	r1, [r7, #12]
 801022a:	4806      	ldr	r0, [pc, #24]	; (8010244 <BSP_SD_WriteBlocks_DMA+0x30>)
 801022c:	f7fc f8de 	bl	800c3ec <HAL_SD_WriteBlocks_DMA>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d001      	beq.n	801023a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010236:	2301      	movs	r3, #1
 8010238:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801023a:	7dfb      	ldrb	r3, [r7, #23]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3718      	adds	r7, #24
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	2003fb9c 	.word	0x2003fb9c

08010248 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801024c:	4805      	ldr	r0, [pc, #20]	; (8010264 <BSP_SD_GetCardState+0x1c>)
 801024e:	f7fc fd85 	bl	800cd5c <HAL_SD_GetCardState>
 8010252:	4603      	mov	r3, r0
 8010254:	2b04      	cmp	r3, #4
 8010256:	bf14      	ite	ne
 8010258:	2301      	movne	r3, #1
 801025a:	2300      	moveq	r3, #0
 801025c:	b2db      	uxtb	r3, r3
}
 801025e:	4618      	mov	r0, r3
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	2003fb9c 	.word	0x2003fb9c

08010268 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010270:	6879      	ldr	r1, [r7, #4]
 8010272:	4803      	ldr	r0, [pc, #12]	; (8010280 <BSP_SD_GetCardInfo+0x18>)
 8010274:	f7fc fcca 	bl	800cc0c <HAL_SD_GetCardInfo>
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2003fb9c 	.word	0x2003fb9c

08010284 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801028c:	f000 f818 	bl	80102c0 <BSP_SD_AbortCallback>
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80102a0:	f000 f9a8 	bl	80105f4 <BSP_SD_WriteCpltCallback>
}
 80102a4:	bf00      	nop
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80102b4:	f000 f9aa 	bl	801060c <BSP_SD_ReadCpltCallback>
}
 80102b8:	bf00      	nop
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80102c0:	b480      	push	{r7}
 80102c2:	af00      	add	r7, sp, #0

}
 80102c4:	bf00      	nop
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80102d4:	2301      	movs	r3, #1
 80102d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80102d8:	f000 f80c 	bl	80102f4 <BSP_PlatformIsDetected>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d101      	bne.n	80102e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80102e2:	2300      	movs	r3, #0
 80102e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80102e6:	79fb      	ldrb	r3, [r7, #7]
 80102e8:	b2db      	uxtb	r3, r3
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
	...

080102f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80102fa:	2301      	movs	r3, #1
 80102fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80102fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010302:	4806      	ldr	r0, [pc, #24]	; (801031c <BSP_PlatformIsDetected+0x28>)
 8010304:	f7fa f87e 	bl	800a404 <HAL_GPIO_ReadPin>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d001      	beq.n	8010312 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801030e:	2300      	movs	r3, #0
 8010310:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010312:	79fb      	ldrb	r3, [r7, #7]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	40020000 	.word	0x40020000

08010320 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010328:	f7f8 fde2 	bl	8008ef0 <HAL_GetTick>
 801032c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801032e:	e006      	b.n	801033e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010330:	f7ff ff8a 	bl	8010248 <BSP_SD_GetCardState>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d101      	bne.n	801033e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801033a:	2300      	movs	r3, #0
 801033c:	e009      	b.n	8010352 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801033e:	f7f8 fdd7 	bl	8008ef0 <HAL_GetTick>
 8010342:	4602      	mov	r2, r0
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	429a      	cmp	r2, r3
 801034c:	d8f0      	bhi.n	8010330 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801034e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
	...

0801035c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010366:	4b0b      	ldr	r3, [pc, #44]	; (8010394 <SD_CheckStatus+0x38>)
 8010368:	2201      	movs	r2, #1
 801036a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801036c:	f7ff ff6c 	bl	8010248 <BSP_SD_GetCardState>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d107      	bne.n	8010386 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010376:	4b07      	ldr	r3, [pc, #28]	; (8010394 <SD_CheckStatus+0x38>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	b2db      	uxtb	r3, r3
 801037c:	f023 0301 	bic.w	r3, r3, #1
 8010380:	b2da      	uxtb	r2, r3
 8010382:	4b04      	ldr	r3, [pc, #16]	; (8010394 <SD_CheckStatus+0x38>)
 8010384:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010386:	4b03      	ldr	r3, [pc, #12]	; (8010394 <SD_CheckStatus+0x38>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	b2db      	uxtb	r3, r3
}
 801038c:	4618      	mov	r0, r3
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20000009 	.word	0x20000009

08010398 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80103a2:	f7ff fef7 	bl	8010194 <BSP_SD_Init>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d107      	bne.n	80103bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80103ac:	79fb      	ldrb	r3, [r7, #7]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff ffd4 	bl	801035c <SD_CheckStatus>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
 80103b8:	4b04      	ldr	r3, [pc, #16]	; (80103cc <SD_initialize+0x34>)
 80103ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80103bc:	4b03      	ldr	r3, [pc, #12]	; (80103cc <SD_initialize+0x34>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	b2db      	uxtb	r3, r3
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3708      	adds	r7, #8
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	20000009 	.word	0x20000009

080103d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	4603      	mov	r3, r0
 80103d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80103da:	79fb      	ldrb	r3, [r7, #7]
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff ffbd 	bl	801035c <SD_CheckStatus>
 80103e2:	4603      	mov	r3, r0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	4603      	mov	r3, r0
 80103fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80103fc:	2301      	movs	r3, #1
 80103fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010400:	f247 5030 	movw	r0, #30000	; 0x7530
 8010404:	f7ff ff8c 	bl	8010320 <SD_CheckStatusWithTimeout>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	da01      	bge.n	8010412 <SD_read+0x26>
  {
    return res;
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	e03b      	b.n	801048a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	6879      	ldr	r1, [r7, #4]
 8010416:	68b8      	ldr	r0, [r7, #8]
 8010418:	f7ff fee2 	bl	80101e0 <BSP_SD_ReadBlocks_DMA>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d132      	bne.n	8010488 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010422:	4b1c      	ldr	r3, [pc, #112]	; (8010494 <SD_read+0xa8>)
 8010424:	2200      	movs	r2, #0
 8010426:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010428:	f7f8 fd62 	bl	8008ef0 <HAL_GetTick>
 801042c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801042e:	bf00      	nop
 8010430:	4b18      	ldr	r3, [pc, #96]	; (8010494 <SD_read+0xa8>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d108      	bne.n	801044a <SD_read+0x5e>
 8010438:	f7f8 fd5a 	bl	8008ef0 <HAL_GetTick>
 801043c:	4602      	mov	r2, r0
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	f247 522f 	movw	r2, #29999	; 0x752f
 8010446:	4293      	cmp	r3, r2
 8010448:	d9f2      	bls.n	8010430 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801044a:	4b12      	ldr	r3, [pc, #72]	; (8010494 <SD_read+0xa8>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d102      	bne.n	8010458 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010452:	2301      	movs	r3, #1
 8010454:	75fb      	strb	r3, [r7, #23]
 8010456:	e017      	b.n	8010488 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010458:	4b0e      	ldr	r3, [pc, #56]	; (8010494 <SD_read+0xa8>)
 801045a:	2200      	movs	r2, #0
 801045c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801045e:	f7f8 fd47 	bl	8008ef0 <HAL_GetTick>
 8010462:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010464:	e007      	b.n	8010476 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010466:	f7ff feef 	bl	8010248 <BSP_SD_GetCardState>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <SD_read+0x8a>
          {
            res = RES_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010474:	e008      	b.n	8010488 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010476:	f7f8 fd3b 	bl	8008ef0 <HAL_GetTick>
 801047a:	4602      	mov	r2, r0
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	f247 522f 	movw	r2, #29999	; 0x752f
 8010484:	4293      	cmp	r3, r2
 8010486:	d9ee      	bls.n	8010466 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010488:	7dfb      	ldrb	r3, [r7, #23]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	2003d438 	.word	0x2003d438

08010498 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	60b9      	str	r1, [r7, #8]
 80104a0:	607a      	str	r2, [r7, #4]
 80104a2:	603b      	str	r3, [r7, #0]
 80104a4:	4603      	mov	r3, r0
 80104a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80104ac:	4b24      	ldr	r3, [pc, #144]	; (8010540 <SD_write+0xa8>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80104b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80104b6:	f7ff ff33 	bl	8010320 <SD_CheckStatusWithTimeout>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	da01      	bge.n	80104c4 <SD_write+0x2c>
  {
    return res;
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	e038      	b.n	8010536 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80104c4:	683a      	ldr	r2, [r7, #0]
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	68b8      	ldr	r0, [r7, #8]
 80104ca:	f7ff fea3 	bl	8010214 <BSP_SD_WriteBlocks_DMA>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d12f      	bne.n	8010534 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80104d4:	f7f8 fd0c 	bl	8008ef0 <HAL_GetTick>
 80104d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80104da:	bf00      	nop
 80104dc:	4b18      	ldr	r3, [pc, #96]	; (8010540 <SD_write+0xa8>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d108      	bne.n	80104f6 <SD_write+0x5e>
 80104e4:	f7f8 fd04 	bl	8008ef0 <HAL_GetTick>
 80104e8:	4602      	mov	r2, r0
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	1ad3      	subs	r3, r2, r3
 80104ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d9f2      	bls.n	80104dc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80104f6:	4b12      	ldr	r3, [pc, #72]	; (8010540 <SD_write+0xa8>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80104fe:	2301      	movs	r3, #1
 8010500:	75fb      	strb	r3, [r7, #23]
 8010502:	e017      	b.n	8010534 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010504:	4b0e      	ldr	r3, [pc, #56]	; (8010540 <SD_write+0xa8>)
 8010506:	2200      	movs	r2, #0
 8010508:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801050a:	f7f8 fcf1 	bl	8008ef0 <HAL_GetTick>
 801050e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010510:	e007      	b.n	8010522 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010512:	f7ff fe99 	bl	8010248 <BSP_SD_GetCardState>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d102      	bne.n	8010522 <SD_write+0x8a>
          {
            res = RES_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	75fb      	strb	r3, [r7, #23]
            break;
 8010520:	e008      	b.n	8010534 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010522:	f7f8 fce5 	bl	8008ef0 <HAL_GetTick>
 8010526:	4602      	mov	r2, r0
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010530:	4293      	cmp	r3, r2
 8010532:	d9ee      	bls.n	8010512 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010534:	7dfb      	ldrb	r3, [r7, #23]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3718      	adds	r7, #24
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	2003d434 	.word	0x2003d434

08010544 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b08c      	sub	sp, #48	; 0x30
 8010548:	af00      	add	r7, sp, #0
 801054a:	4603      	mov	r3, r0
 801054c:	603a      	str	r2, [r7, #0]
 801054e:	71fb      	strb	r3, [r7, #7]
 8010550:	460b      	mov	r3, r1
 8010552:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801055a:	4b25      	ldr	r3, [pc, #148]	; (80105f0 <SD_ioctl+0xac>)
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	b2db      	uxtb	r3, r3
 8010560:	f003 0301 	and.w	r3, r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <SD_ioctl+0x28>
 8010568:	2303      	movs	r3, #3
 801056a:	e03c      	b.n	80105e6 <SD_ioctl+0xa2>

  switch (cmd)
 801056c:	79bb      	ldrb	r3, [r7, #6]
 801056e:	2b03      	cmp	r3, #3
 8010570:	d834      	bhi.n	80105dc <SD_ioctl+0x98>
 8010572:	a201      	add	r2, pc, #4	; (adr r2, 8010578 <SD_ioctl+0x34>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	08010589 	.word	0x08010589
 801057c:	08010591 	.word	0x08010591
 8010580:	080105a9 	.word	0x080105a9
 8010584:	080105c3 	.word	0x080105c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010588:	2300      	movs	r3, #0
 801058a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801058e:	e028      	b.n	80105e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010590:	f107 030c 	add.w	r3, r7, #12
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff fe67 	bl	8010268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801059a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80105a6:	e01c      	b.n	80105e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80105a8:	f107 030c 	add.w	r3, r7, #12
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7ff fe5b 	bl	8010268 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80105c0:	e00f      	b.n	80105e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80105c2:	f107 030c 	add.w	r3, r7, #12
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff fe4e 	bl	8010268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80105cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ce:	0a5a      	lsrs	r2, r3, #9
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80105da:	e002      	b.n	80105e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80105dc:	2304      	movs	r3, #4
 80105de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80105e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3730      	adds	r7, #48	; 0x30
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	20000009 	.word	0x20000009

080105f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80105f4:	b480      	push	{r7}
 80105f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80105f8:	4b03      	ldr	r3, [pc, #12]	; (8010608 <BSP_SD_WriteCpltCallback+0x14>)
 80105fa:	2201      	movs	r2, #1
 80105fc:	601a      	str	r2, [r3, #0]
}
 80105fe:	bf00      	nop
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	2003d434 	.word	0x2003d434

0801060c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801060c:	b480      	push	{r7}
 801060e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010610:	4b03      	ldr	r3, [pc, #12]	; (8010620 <BSP_SD_ReadCpltCallback+0x14>)
 8010612:	2201      	movs	r2, #1
 8010614:	601a      	str	r2, [r3, #0]
}
 8010616:	bf00      	nop
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	2003d438 	.word	0x2003d438

08010624 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	4603      	mov	r3, r0
 801062c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	4a08      	ldr	r2, [pc, #32]	; (8010654 <disk_status+0x30>)
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	4413      	add	r3, r2
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	79fa      	ldrb	r2, [r7, #7]
 801063c:	4905      	ldr	r1, [pc, #20]	; (8010654 <disk_status+0x30>)
 801063e:	440a      	add	r2, r1
 8010640:	7a12      	ldrb	r2, [r2, #8]
 8010642:	4610      	mov	r0, r2
 8010644:	4798      	blx	r3
 8010646:	4603      	mov	r3, r0
 8010648:	73fb      	strb	r3, [r7, #15]
  return stat;
 801064a:	7bfb      	ldrb	r3, [r7, #15]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	2003d464 	.word	0x2003d464

08010658 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010662:	2300      	movs	r3, #0
 8010664:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	4a0d      	ldr	r2, [pc, #52]	; (80106a0 <disk_initialize+0x48>)
 801066a:	5cd3      	ldrb	r3, [r2, r3]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d111      	bne.n	8010694 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	4a0b      	ldr	r2, [pc, #44]	; (80106a0 <disk_initialize+0x48>)
 8010674:	2101      	movs	r1, #1
 8010676:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	4a09      	ldr	r2, [pc, #36]	; (80106a0 <disk_initialize+0x48>)
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	79fa      	ldrb	r2, [r7, #7]
 8010686:	4906      	ldr	r1, [pc, #24]	; (80106a0 <disk_initialize+0x48>)
 8010688:	440a      	add	r2, r1
 801068a:	7a12      	ldrb	r2, [r2, #8]
 801068c:	4610      	mov	r0, r2
 801068e:	4798      	blx	r3
 8010690:	4603      	mov	r3, r0
 8010692:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010694:	7bfb      	ldrb	r3, [r7, #15]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	2003d464 	.word	0x2003d464

080106a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80106a4:	b590      	push	{r4, r7, lr}
 80106a6:	b087      	sub	sp, #28
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60b9      	str	r1, [r7, #8]
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	603b      	str	r3, [r7, #0]
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	4a0a      	ldr	r2, [pc, #40]	; (80106e0 <disk_read+0x3c>)
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4413      	add	r3, r2
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	689c      	ldr	r4, [r3, #8]
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	4a07      	ldr	r2, [pc, #28]	; (80106e0 <disk_read+0x3c>)
 80106c4:	4413      	add	r3, r2
 80106c6:	7a18      	ldrb	r0, [r3, #8]
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	68b9      	ldr	r1, [r7, #8]
 80106ce:	47a0      	blx	r4
 80106d0:	4603      	mov	r3, r0
 80106d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80106d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd90      	pop	{r4, r7, pc}
 80106de:	bf00      	nop
 80106e0:	2003d464 	.word	0x2003d464

080106e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80106e4:	b590      	push	{r4, r7, lr}
 80106e6:	b087      	sub	sp, #28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	607a      	str	r2, [r7, #4]
 80106ee:	603b      	str	r3, [r7, #0]
 80106f0:	4603      	mov	r3, r0
 80106f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
 80106f6:	4a0a      	ldr	r2, [pc, #40]	; (8010720 <disk_write+0x3c>)
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	68dc      	ldr	r4, [r3, #12]
 8010700:	7bfb      	ldrb	r3, [r7, #15]
 8010702:	4a07      	ldr	r2, [pc, #28]	; (8010720 <disk_write+0x3c>)
 8010704:	4413      	add	r3, r2
 8010706:	7a18      	ldrb	r0, [r3, #8]
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	68b9      	ldr	r1, [r7, #8]
 801070e:	47a0      	blx	r4
 8010710:	4603      	mov	r3, r0
 8010712:	75fb      	strb	r3, [r7, #23]
  return res;
 8010714:	7dfb      	ldrb	r3, [r7, #23]
}
 8010716:	4618      	mov	r0, r3
 8010718:	371c      	adds	r7, #28
 801071a:	46bd      	mov	sp, r7
 801071c:	bd90      	pop	{r4, r7, pc}
 801071e:	bf00      	nop
 8010720:	2003d464 	.word	0x2003d464

08010724 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	4603      	mov	r3, r0
 801072c:	603a      	str	r2, [r7, #0]
 801072e:	71fb      	strb	r3, [r7, #7]
 8010730:	460b      	mov	r3, r1
 8010732:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	4a09      	ldr	r2, [pc, #36]	; (801075c <disk_ioctl+0x38>)
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	4413      	add	r3, r2
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	691b      	ldr	r3, [r3, #16]
 8010740:	79fa      	ldrb	r2, [r7, #7]
 8010742:	4906      	ldr	r1, [pc, #24]	; (801075c <disk_ioctl+0x38>)
 8010744:	440a      	add	r2, r1
 8010746:	7a10      	ldrb	r0, [r2, #8]
 8010748:	79b9      	ldrb	r1, [r7, #6]
 801074a:	683a      	ldr	r2, [r7, #0]
 801074c:	4798      	blx	r3
 801074e:	4603      	mov	r3, r0
 8010750:	73fb      	strb	r3, [r7, #15]
  return res;
 8010752:	7bfb      	ldrb	r3, [r7, #15]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3710      	adds	r7, #16
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	2003d464 	.word	0x2003d464

08010760 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3301      	adds	r3, #1
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010770:	89fb      	ldrh	r3, [r7, #14]
 8010772:	021b      	lsls	r3, r3, #8
 8010774:	b21a      	sxth	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	b21b      	sxth	r3, r3
 801077c:	4313      	orrs	r3, r2
 801077e:	b21b      	sxth	r3, r3
 8010780:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010782:	89fb      	ldrh	r3, [r7, #14]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3714      	adds	r7, #20
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	3303      	adds	r3, #3
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	021b      	lsls	r3, r3, #8
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	3202      	adds	r2, #2
 80107a8:	7812      	ldrb	r2, [r2, #0]
 80107aa:	4313      	orrs	r3, r2
 80107ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	021b      	lsls	r3, r3, #8
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	3201      	adds	r2, #1
 80107b6:	7812      	ldrb	r2, [r2, #0]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	021b      	lsls	r3, r3, #8
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	7812      	ldrb	r2, [r2, #0]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80107c8:	68fb      	ldr	r3, [r7, #12]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80107d6:	b480      	push	{r7}
 80107d8:	b083      	sub	sp, #12
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	460b      	mov	r3, r1
 80107e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	1c5a      	adds	r2, r3, #1
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	887a      	ldrh	r2, [r7, #2]
 80107ea:	b2d2      	uxtb	r2, r2
 80107ec:	701a      	strb	r2, [r3, #0]
 80107ee:	887b      	ldrh	r3, [r7, #2]
 80107f0:	0a1b      	lsrs	r3, r3, #8
 80107f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	607a      	str	r2, [r7, #4]
 80107fa:	887a      	ldrh	r2, [r7, #2]
 80107fc:	b2d2      	uxtb	r2, r2
 80107fe:	701a      	strb	r2, [r3, #0]
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	1c5a      	adds	r2, r3, #1
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	b2d2      	uxtb	r2, r2
 8010820:	701a      	strb	r2, [r3, #0]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	0a1b      	lsrs	r3, r3, #8
 8010826:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	1c5a      	adds	r2, r3, #1
 801082c:	607a      	str	r2, [r7, #4]
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	b2d2      	uxtb	r2, r2
 8010832:	701a      	strb	r2, [r3, #0]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	0a1b      	lsrs	r3, r3, #8
 8010838:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	1c5a      	adds	r2, r3, #1
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	683a      	ldr	r2, [r7, #0]
 8010842:	b2d2      	uxtb	r2, r2
 8010844:	701a      	strb	r2, [r3, #0]
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	0a1b      	lsrs	r3, r3, #8
 801084a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	1c5a      	adds	r2, r3, #1
 8010850:	607a      	str	r2, [r7, #4]
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	b2d2      	uxtb	r2, r2
 8010856:	701a      	strb	r2, [r3, #0]
}
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010864:	b480      	push	{r7}
 8010866:	b087      	sub	sp, #28
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00d      	beq.n	801089a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801087e:	693a      	ldr	r2, [r7, #16]
 8010880:	1c53      	adds	r3, r2, #1
 8010882:	613b      	str	r3, [r7, #16]
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	1c59      	adds	r1, r3, #1
 8010888:	6179      	str	r1, [r7, #20]
 801088a:	7812      	ldrb	r2, [r2, #0]
 801088c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	3b01      	subs	r3, #1
 8010892:	607b      	str	r3, [r7, #4]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1f1      	bne.n	801087e <mem_cpy+0x1a>
	}
}
 801089a:	bf00      	nop
 801089c:	371c      	adds	r7, #28
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr

080108a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80108a6:	b480      	push	{r7}
 80108a8:	b087      	sub	sp, #28
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	60f8      	str	r0, [r7, #12]
 80108ae:	60b9      	str	r1, [r7, #8]
 80108b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	1c5a      	adds	r2, r3, #1
 80108ba:	617a      	str	r2, [r7, #20]
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	b2d2      	uxtb	r2, r2
 80108c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	3b01      	subs	r3, #1
 80108c6:	607b      	str	r3, [r7, #4]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d1f3      	bne.n	80108b6 <mem_set+0x10>
}
 80108ce:	bf00      	nop
 80108d0:	371c      	adds	r7, #28
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80108da:	b480      	push	{r7}
 80108dc:	b089      	sub	sp, #36	; 0x24
 80108de:	af00      	add	r7, sp, #0
 80108e0:	60f8      	str	r0, [r7, #12]
 80108e2:	60b9      	str	r1, [r7, #8]
 80108e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	61fb      	str	r3, [r7, #28]
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	61fa      	str	r2, [r7, #28]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	4619      	mov	r1, r3
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	1c5a      	adds	r2, r3, #1
 8010900:	61ba      	str	r2, [r7, #24]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	1acb      	subs	r3, r1, r3
 8010906:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	3b01      	subs	r3, #1
 801090c:	607b      	str	r3, [r7, #4]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d002      	beq.n	801091a <mem_cmp+0x40>
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d0eb      	beq.n	80108f2 <mem_cmp+0x18>

	return r;
 801091a:	697b      	ldr	r3, [r7, #20]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3724      	adds	r7, #36	; 0x24
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010932:	e002      	b.n	801093a <chk_chr+0x12>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3301      	adds	r3, #1
 8010938:	607b      	str	r3, [r7, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d005      	beq.n	801094e <chk_chr+0x26>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	4293      	cmp	r3, r2
 801094c:	d1f2      	bne.n	8010934 <chk_chr+0xc>
	return *str;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	781b      	ldrb	r3, [r3, #0]
}
 8010952:	4618      	mov	r0, r3
 8010954:	370c      	adds	r7, #12
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
	...

08010960 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801096a:	2300      	movs	r3, #0
 801096c:	60bb      	str	r3, [r7, #8]
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	60fb      	str	r3, [r7, #12]
 8010972:	e029      	b.n	80109c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010974:	4a27      	ldr	r2, [pc, #156]	; (8010a14 <chk_lock+0xb4>)
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	011b      	lsls	r3, r3, #4
 801097a:	4413      	add	r3, r2
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d01d      	beq.n	80109be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010982:	4a24      	ldr	r2, [pc, #144]	; (8010a14 <chk_lock+0xb4>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	011b      	lsls	r3, r3, #4
 8010988:	4413      	add	r3, r2
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	429a      	cmp	r2, r3
 8010992:	d116      	bne.n	80109c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010994:	4a1f      	ldr	r2, [pc, #124]	; (8010a14 <chk_lock+0xb4>)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	4413      	add	r3, r2
 801099c:	3304      	adds	r3, #4
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d10c      	bne.n	80109c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80109a8:	4a1a      	ldr	r2, [pc, #104]	; (8010a14 <chk_lock+0xb4>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	011b      	lsls	r3, r3, #4
 80109ae:	4413      	add	r3, r2
 80109b0:	3308      	adds	r3, #8
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d102      	bne.n	80109c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80109bc:	e007      	b.n	80109ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80109be:	2301      	movs	r3, #1
 80109c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3301      	adds	r3, #1
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d9d2      	bls.n	8010974 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	d109      	bne.n	80109e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d102      	bne.n	80109e0 <chk_lock+0x80>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d101      	bne.n	80109e4 <chk_lock+0x84>
 80109e0:	2300      	movs	r3, #0
 80109e2:	e010      	b.n	8010a06 <chk_lock+0xa6>
 80109e4:	2312      	movs	r3, #18
 80109e6:	e00e      	b.n	8010a06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d108      	bne.n	8010a00 <chk_lock+0xa0>
 80109ee:	4a09      	ldr	r2, [pc, #36]	; (8010a14 <chk_lock+0xb4>)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	4413      	add	r3, r2
 80109f6:	330c      	adds	r3, #12
 80109f8:	881b      	ldrh	r3, [r3, #0]
 80109fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109fe:	d101      	bne.n	8010a04 <chk_lock+0xa4>
 8010a00:	2310      	movs	r3, #16
 8010a02:	e000      	b.n	8010a06 <chk_lock+0xa6>
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	2003d444 	.word	0x2003d444

08010a18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	607b      	str	r3, [r7, #4]
 8010a22:	e002      	b.n	8010a2a <enq_lock+0x12>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	3301      	adds	r3, #1
 8010a28:	607b      	str	r3, [r7, #4]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d806      	bhi.n	8010a3e <enq_lock+0x26>
 8010a30:	4a09      	ldr	r2, [pc, #36]	; (8010a58 <enq_lock+0x40>)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	011b      	lsls	r3, r3, #4
 8010a36:	4413      	add	r3, r2
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1f2      	bne.n	8010a24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	bf14      	ite	ne
 8010a44:	2301      	movne	r3, #1
 8010a46:	2300      	moveq	r3, #0
 8010a48:	b2db      	uxtb	r3, r3
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	370c      	adds	r7, #12
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	2003d444 	.word	0x2003d444

08010a5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010a66:	2300      	movs	r3, #0
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	e01f      	b.n	8010aac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010a6c:	4a41      	ldr	r2, [pc, #260]	; (8010b74 <inc_lock+0x118>)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	011b      	lsls	r3, r3, #4
 8010a72:	4413      	add	r3, r2
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d113      	bne.n	8010aa6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010a7e:	4a3d      	ldr	r2, [pc, #244]	; (8010b74 <inc_lock+0x118>)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	4413      	add	r3, r2
 8010a86:	3304      	adds	r3, #4
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d109      	bne.n	8010aa6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010a92:	4a38      	ldr	r2, [pc, #224]	; (8010b74 <inc_lock+0x118>)
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	011b      	lsls	r3, r3, #4
 8010a98:	4413      	add	r3, r2
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d006      	beq.n	8010ab4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d9dc      	bls.n	8010a6c <inc_lock+0x10>
 8010ab2:	e000      	b.n	8010ab6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010ab4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b02      	cmp	r3, #2
 8010aba:	d132      	bne.n	8010b22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60fb      	str	r3, [r7, #12]
 8010ac0:	e002      	b.n	8010ac8 <inc_lock+0x6c>
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	60fb      	str	r3, [r7, #12]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d806      	bhi.n	8010adc <inc_lock+0x80>
 8010ace:	4a29      	ldr	r2, [pc, #164]	; (8010b74 <inc_lock+0x118>)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	011b      	lsls	r3, r3, #4
 8010ad4:	4413      	add	r3, r2
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1f2      	bne.n	8010ac2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2b02      	cmp	r3, #2
 8010ae0:	d101      	bne.n	8010ae6 <inc_lock+0x8a>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e040      	b.n	8010b68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	4922      	ldr	r1, [pc, #136]	; (8010b74 <inc_lock+0x118>)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	011b      	lsls	r3, r3, #4
 8010af0:	440b      	add	r3, r1
 8010af2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	689a      	ldr	r2, [r3, #8]
 8010af8:	491e      	ldr	r1, [pc, #120]	; (8010b74 <inc_lock+0x118>)
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	440b      	add	r3, r1
 8010b00:	3304      	adds	r3, #4
 8010b02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	695a      	ldr	r2, [r3, #20]
 8010b08:	491a      	ldr	r1, [pc, #104]	; (8010b74 <inc_lock+0x118>)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	011b      	lsls	r3, r3, #4
 8010b0e:	440b      	add	r3, r1
 8010b10:	3308      	adds	r3, #8
 8010b12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010b14:	4a17      	ldr	r2, [pc, #92]	; (8010b74 <inc_lock+0x118>)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	011b      	lsls	r3, r3, #4
 8010b1a:	4413      	add	r3, r2
 8010b1c:	330c      	adds	r3, #12
 8010b1e:	2200      	movs	r2, #0
 8010b20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d009      	beq.n	8010b3c <inc_lock+0xe0>
 8010b28:	4a12      	ldr	r2, [pc, #72]	; (8010b74 <inc_lock+0x118>)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	011b      	lsls	r3, r3, #4
 8010b2e:	4413      	add	r3, r2
 8010b30:	330c      	adds	r3, #12
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <inc_lock+0xe0>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	e015      	b.n	8010b68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d108      	bne.n	8010b54 <inc_lock+0xf8>
 8010b42:	4a0c      	ldr	r2, [pc, #48]	; (8010b74 <inc_lock+0x118>)
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	011b      	lsls	r3, r3, #4
 8010b48:	4413      	add	r3, r2
 8010b4a:	330c      	adds	r3, #12
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	e001      	b.n	8010b58 <inc_lock+0xfc>
 8010b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b58:	4906      	ldr	r1, [pc, #24]	; (8010b74 <inc_lock+0x118>)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	011b      	lsls	r3, r3, #4
 8010b5e:	440b      	add	r3, r1
 8010b60:	330c      	adds	r3, #12
 8010b62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	3301      	adds	r3, #1
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	2003d444 	.word	0x2003d444

08010b78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	607b      	str	r3, [r7, #4]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d825      	bhi.n	8010bd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8010b8c:	4a17      	ldr	r2, [pc, #92]	; (8010bec <dec_lock+0x74>)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	011b      	lsls	r3, r3, #4
 8010b92:	4413      	add	r3, r2
 8010b94:	330c      	adds	r3, #12
 8010b96:	881b      	ldrh	r3, [r3, #0]
 8010b98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010b9a:	89fb      	ldrh	r3, [r7, #14]
 8010b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba0:	d101      	bne.n	8010ba6 <dec_lock+0x2e>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010ba6:	89fb      	ldrh	r3, [r7, #14]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d002      	beq.n	8010bb2 <dec_lock+0x3a>
 8010bac:	89fb      	ldrh	r3, [r7, #14]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010bb2:	4a0e      	ldr	r2, [pc, #56]	; (8010bec <dec_lock+0x74>)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	011b      	lsls	r3, r3, #4
 8010bb8:	4413      	add	r3, r2
 8010bba:	330c      	adds	r3, #12
 8010bbc:	89fa      	ldrh	r2, [r7, #14]
 8010bbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010bc0:	89fb      	ldrh	r3, [r7, #14]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d105      	bne.n	8010bd2 <dec_lock+0x5a>
 8010bc6:	4a09      	ldr	r2, [pc, #36]	; (8010bec <dec_lock+0x74>)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	4413      	add	r3, r2
 8010bce:	2200      	movs	r2, #0
 8010bd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	737b      	strb	r3, [r7, #13]
 8010bd6:	e001      	b.n	8010bdc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010bd8:	2302      	movs	r3, #2
 8010bda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010bdc:	7b7b      	ldrb	r3, [r7, #13]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3714      	adds	r7, #20
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	2003d444 	.word	0x2003d444

08010bf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	e010      	b.n	8010c20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010bfe:	4a0d      	ldr	r2, [pc, #52]	; (8010c34 <clear_lock+0x44>)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	011b      	lsls	r3, r3, #4
 8010c04:	4413      	add	r3, r2
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d105      	bne.n	8010c1a <clear_lock+0x2a>
 8010c0e:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <clear_lock+0x44>)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	011b      	lsls	r3, r3, #4
 8010c14:	4413      	add	r3, r2
 8010c16:	2200      	movs	r2, #0
 8010c18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d9eb      	bls.n	8010bfe <clear_lock+0xe>
	}
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	2003d444 	.word	0x2003d444

08010c38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	78db      	ldrb	r3, [r3, #3]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d034      	beq.n	8010cb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	7858      	ldrb	r0, [r3, #1]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	f7ff fd40 	bl	80106e4 <disk_write>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	73fb      	strb	r3, [r7, #15]
 8010c6e:	e022      	b.n	8010cb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c7a:	697a      	ldr	r2, [r7, #20]
 8010c7c:	1ad2      	subs	r2, r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d217      	bcs.n	8010cb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	789b      	ldrb	r3, [r3, #2]
 8010c8a:	613b      	str	r3, [r7, #16]
 8010c8c:	e010      	b.n	8010cb0 <sync_window+0x78>
					wsect += fs->fsize;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	697a      	ldr	r2, [r7, #20]
 8010c94:	4413      	add	r3, r2
 8010c96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7858      	ldrb	r0, [r3, #1]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	697a      	ldr	r2, [r7, #20]
 8010ca6:	f7ff fd1d 	bl	80106e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	613b      	str	r3, [r7, #16]
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d8eb      	bhi.n	8010c8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3718      	adds	r7, #24
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d01b      	beq.n	8010d10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7ff ffad 	bl	8010c38 <sync_window>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d113      	bne.n	8010d10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	7858      	ldrb	r0, [r3, #1]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	f7ff fcd5 	bl	80106a4 <disk_read>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d004      	beq.n	8010d0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010d00:	f04f 33ff 	mov.w	r3, #4294967295
 8010d04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
	...

08010d1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7ff ff87 	bl	8010c38 <sync_window>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010d2e:	7bfb      	ldrb	r3, [r7, #15]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d159      	bne.n	8010de8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	d149      	bne.n	8010dd0 <sync_fs+0xb4>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	791b      	ldrb	r3, [r3, #4]
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d145      	bne.n	8010dd0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	899b      	ldrh	r3, [r3, #12]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	2100      	movs	r1, #0
 8010d52:	f7ff fda8 	bl	80108a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	3338      	adds	r3, #56	; 0x38
 8010d5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7ff fd37 	bl	80107d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3338      	adds	r3, #56	; 0x38
 8010d6c:	4921      	ldr	r1, [pc, #132]	; (8010df4 <sync_fs+0xd8>)
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7ff fd4c 	bl	801080c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	3338      	adds	r3, #56	; 0x38
 8010d78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010d7c:	491e      	ldr	r1, [pc, #120]	; (8010df8 <sync_fs+0xdc>)
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff fd44 	bl	801080c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	3338      	adds	r3, #56	; 0x38
 8010d88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	695b      	ldr	r3, [r3, #20]
 8010d90:	4619      	mov	r1, r3
 8010d92:	4610      	mov	r0, r2
 8010d94:	f7ff fd3a 	bl	801080c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	3338      	adds	r3, #56	; 0x38
 8010d9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	691b      	ldr	r3, [r3, #16]
 8010da4:	4619      	mov	r1, r3
 8010da6:	4610      	mov	r0, r2
 8010da8:	f7ff fd30 	bl	801080c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db0:	1c5a      	adds	r2, r3, #1
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7858      	ldrb	r0, [r3, #1]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	f7ff fc8d 	bl	80106e4 <disk_write>
			fs->fsi_flag = 0;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	785b      	ldrb	r3, [r3, #1]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fca3 	bl	8010724 <disk_ioctl>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d001      	beq.n	8010de8 <sync_fs+0xcc>
 8010de4:	2301      	movs	r3, #1
 8010de6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3710      	adds	r7, #16
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	41615252 	.word	0x41615252
 8010df8:	61417272 	.word	0x61417272

08010dfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	3b02      	subs	r3, #2
 8010e0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	69db      	ldr	r3, [r3, #28]
 8010e10:	3b02      	subs	r3, #2
 8010e12:	683a      	ldr	r2, [r7, #0]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d301      	bcc.n	8010e1c <clust2sect+0x20>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e008      	b.n	8010e2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	895b      	ldrh	r3, [r3, #10]
 8010e20:	461a      	mov	r2, r3
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	fb03 f202 	mul.w	r2, r3, r2
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e2c:	4413      	add	r3, r2
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b086      	sub	sp, #24
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d904      	bls.n	8010e5a <get_fat+0x20>
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	69db      	ldr	r3, [r3, #28]
 8010e54:	683a      	ldr	r2, [r7, #0]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d302      	bcc.n	8010e60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	617b      	str	r3, [r7, #20]
 8010e5e:	e0b7      	b.n	8010fd0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010e60:	f04f 33ff 	mov.w	r3, #4294967295
 8010e64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b02      	cmp	r3, #2
 8010e6c:	d05a      	beq.n	8010f24 <get_fat+0xea>
 8010e6e:	2b03      	cmp	r3, #3
 8010e70:	d07d      	beq.n	8010f6e <get_fat+0x134>
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	f040 80a2 	bne.w	8010fbc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	60fb      	str	r3, [r7, #12]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	085b      	lsrs	r3, r3, #1
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	4413      	add	r3, r2
 8010e84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	899b      	ldrh	r3, [r3, #12]
 8010e8e:	4619      	mov	r1, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e96:	4413      	add	r3, r2
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6938      	ldr	r0, [r7, #16]
 8010e9c:	f7ff ff10 	bl	8010cc0 <move_window>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f040 808d 	bne.w	8010fc2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	60fa      	str	r2, [r7, #12]
 8010eae:	693a      	ldr	r2, [r7, #16]
 8010eb0:	8992      	ldrh	r2, [r2, #12]
 8010eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eb6:	fb02 f201 	mul.w	r2, r2, r1
 8010eba:	1a9b      	subs	r3, r3, r2
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ec4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	899b      	ldrh	r3, [r3, #12]
 8010ece:	4619      	mov	r1, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	4619      	mov	r1, r3
 8010eda:	6938      	ldr	r0, [r7, #16]
 8010edc:	f7ff fef0 	bl	8010cc0 <move_window>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d16f      	bne.n	8010fc6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	899b      	ldrh	r3, [r3, #12]
 8010eea:	461a      	mov	r2, r3
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ef2:	fb02 f201 	mul.w	r2, r2, r1
 8010ef6:	1a9b      	subs	r3, r3, r2
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	4413      	add	r3, r2
 8010efc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f00:	021b      	lsls	r3, r3, #8
 8010f02:	461a      	mov	r2, r3
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <get_fat+0xe0>
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	091b      	lsrs	r3, r3, #4
 8010f18:	e002      	b.n	8010f20 <get_fat+0xe6>
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f20:	617b      	str	r3, [r7, #20]
			break;
 8010f22:	e055      	b.n	8010fd0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	899b      	ldrh	r3, [r3, #12]
 8010f2c:	085b      	lsrs	r3, r3, #1
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4619      	mov	r1, r3
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f38:	4413      	add	r3, r2
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6938      	ldr	r0, [r7, #16]
 8010f3e:	f7ff febf 	bl	8010cc0 <move_window>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d140      	bne.n	8010fca <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	005b      	lsls	r3, r3, #1
 8010f52:	693a      	ldr	r2, [r7, #16]
 8010f54:	8992      	ldrh	r2, [r2, #12]
 8010f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f5a:	fb02 f200 	mul.w	r2, r2, r0
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	440b      	add	r3, r1
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fbfc 	bl	8010760 <ld_word>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	617b      	str	r3, [r7, #20]
			break;
 8010f6c:	e030      	b.n	8010fd0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	899b      	ldrh	r3, [r3, #12]
 8010f76:	089b      	lsrs	r3, r3, #2
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f82:	4413      	add	r3, r2
 8010f84:	4619      	mov	r1, r3
 8010f86:	6938      	ldr	r0, [r7, #16]
 8010f88:	f7ff fe9a 	bl	8010cc0 <move_window>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d11d      	bne.n	8010fce <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	693a      	ldr	r2, [r7, #16]
 8010f9e:	8992      	ldrh	r2, [r2, #12]
 8010fa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fa4:	fb02 f200 	mul.w	r2, r2, r0
 8010fa8:	1a9b      	subs	r3, r3, r2
 8010faa:	440b      	add	r3, r1
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fbef 	bl	8010790 <ld_dword>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010fb8:	617b      	str	r3, [r7, #20]
			break;
 8010fba:	e009      	b.n	8010fd0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	617b      	str	r3, [r7, #20]
 8010fc0:	e006      	b.n	8010fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fc2:	bf00      	nop
 8010fc4:	e004      	b.n	8010fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fc6:	bf00      	nop
 8010fc8:	e002      	b.n	8010fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010fca:	bf00      	nop
 8010fcc:	e000      	b.n	8010fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010fce:	bf00      	nop
		}
	}

	return val;
 8010fd0:	697b      	ldr	r3, [r7, #20]
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3718      	adds	r7, #24
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010fda:	b590      	push	{r4, r7, lr}
 8010fdc:	b089      	sub	sp, #36	; 0x24
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	60f8      	str	r0, [r7, #12]
 8010fe2:	60b9      	str	r1, [r7, #8]
 8010fe4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	f240 8106 	bls.w	80111fe <put_fat+0x224>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	69db      	ldr	r3, [r3, #28]
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	f080 8100 	bcs.w	80111fe <put_fat+0x224>
		switch (fs->fs_type) {
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	2b02      	cmp	r3, #2
 8011004:	f000 8088 	beq.w	8011118 <put_fat+0x13e>
 8011008:	2b03      	cmp	r3, #3
 801100a:	f000 80b0 	beq.w	801116e <put_fat+0x194>
 801100e:	2b01      	cmp	r3, #1
 8011010:	f040 80f5 	bne.w	80111fe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	61bb      	str	r3, [r7, #24]
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	085b      	lsrs	r3, r3, #1
 801101c:	69ba      	ldr	r2, [r7, #24]
 801101e:	4413      	add	r3, r2
 8011020:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	899b      	ldrh	r3, [r3, #12]
 801102a:	4619      	mov	r1, r3
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011032:	4413      	add	r3, r2
 8011034:	4619      	mov	r1, r3
 8011036:	68f8      	ldr	r0, [r7, #12]
 8011038:	f7ff fe42 	bl	8010cc0 <move_window>
 801103c:	4603      	mov	r3, r0
 801103e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011040:	7ffb      	ldrb	r3, [r7, #31]
 8011042:	2b00      	cmp	r3, #0
 8011044:	f040 80d4 	bne.w	80111f0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	1c5a      	adds	r2, r3, #1
 8011052:	61ba      	str	r2, [r7, #24]
 8011054:	68fa      	ldr	r2, [r7, #12]
 8011056:	8992      	ldrh	r2, [r2, #12]
 8011058:	fbb3 f0f2 	udiv	r0, r3, r2
 801105c:	fb02 f200 	mul.w	r2, r2, r0
 8011060:	1a9b      	subs	r3, r3, r2
 8011062:	440b      	add	r3, r1
 8011064:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	f003 0301 	and.w	r3, r3, #1
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00d      	beq.n	801108c <put_fat+0xb2>
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	b25b      	sxtb	r3, r3
 8011076:	f003 030f 	and.w	r3, r3, #15
 801107a:	b25a      	sxtb	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	b2db      	uxtb	r3, r3
 8011080:	011b      	lsls	r3, r3, #4
 8011082:	b25b      	sxtb	r3, r3
 8011084:	4313      	orrs	r3, r2
 8011086:	b25b      	sxtb	r3, r3
 8011088:	b2db      	uxtb	r3, r3
 801108a:	e001      	b.n	8011090 <put_fat+0xb6>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	b2db      	uxtb	r3, r3
 8011090:	697a      	ldr	r2, [r7, #20]
 8011092:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2201      	movs	r2, #1
 8011098:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	899b      	ldrh	r3, [r3, #12]
 80110a2:	4619      	mov	r1, r3
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80110aa:	4413      	add	r3, r2
 80110ac:	4619      	mov	r1, r3
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f7ff fe06 	bl	8010cc0 <move_window>
 80110b4:	4603      	mov	r3, r0
 80110b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110b8:	7ffb      	ldrb	r3, [r7, #31]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f040 809a 	bne.w	80111f4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	899b      	ldrh	r3, [r3, #12]
 80110ca:	461a      	mov	r2, r3
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80110d2:	fb02 f200 	mul.w	r2, r2, r0
 80110d6:	1a9b      	subs	r3, r3, r2
 80110d8:	440b      	add	r3, r1
 80110da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d003      	beq.n	80110ee <put_fat+0x114>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	091b      	lsrs	r3, r3, #4
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	e00e      	b.n	801110c <put_fat+0x132>
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	b25b      	sxtb	r3, r3
 80110f4:	f023 030f 	bic.w	r3, r3, #15
 80110f8:	b25a      	sxtb	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	0a1b      	lsrs	r3, r3, #8
 80110fe:	b25b      	sxtb	r3, r3
 8011100:	f003 030f 	and.w	r3, r3, #15
 8011104:	b25b      	sxtb	r3, r3
 8011106:	4313      	orrs	r3, r2
 8011108:	b25b      	sxtb	r3, r3
 801110a:	b2db      	uxtb	r3, r3
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2201      	movs	r2, #1
 8011114:	70da      	strb	r2, [r3, #3]
			break;
 8011116:	e072      	b.n	80111fe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	899b      	ldrh	r3, [r3, #12]
 8011120:	085b      	lsrs	r3, r3, #1
 8011122:	b29b      	uxth	r3, r3
 8011124:	4619      	mov	r1, r3
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	fbb3 f3f1 	udiv	r3, r3, r1
 801112c:	4413      	add	r3, r2
 801112e:	4619      	mov	r1, r3
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f7ff fdc5 	bl	8010cc0 <move_window>
 8011136:	4603      	mov	r3, r0
 8011138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801113a:	7ffb      	ldrb	r3, [r7, #31]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d15b      	bne.n	80111f8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	8992      	ldrh	r2, [r2, #12]
 801114e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011152:	fb02 f200 	mul.w	r2, r2, r0
 8011156:	1a9b      	subs	r3, r3, r2
 8011158:	440b      	add	r3, r1
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	b292      	uxth	r2, r2
 801115e:	4611      	mov	r1, r2
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff fb38 	bl	80107d6 <st_word>
			fs->wflag = 1;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2201      	movs	r2, #1
 801116a:	70da      	strb	r2, [r3, #3]
			break;
 801116c:	e047      	b.n	80111fe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	089b      	lsrs	r3, r3, #2
 8011178:	b29b      	uxth	r3, r3
 801117a:	4619      	mov	r1, r3
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011182:	4413      	add	r3, r2
 8011184:	4619      	mov	r1, r3
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f7ff fd9a 	bl	8010cc0 <move_window>
 801118c:	4603      	mov	r3, r0
 801118e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011190:	7ffb      	ldrb	r3, [r7, #31]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d132      	bne.n	80111fc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	009b      	lsls	r3, r3, #2
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	8992      	ldrh	r2, [r2, #12]
 80111aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80111ae:	fb02 f200 	mul.w	r2, r2, r0
 80111b2:	1a9b      	subs	r3, r3, r2
 80111b4:	440b      	add	r3, r1
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7ff faea 	bl	8010790 <ld_dword>
 80111bc:	4603      	mov	r3, r0
 80111be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111c2:	4323      	orrs	r3, r4
 80111c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	68fa      	ldr	r2, [r7, #12]
 80111d2:	8992      	ldrh	r2, [r2, #12]
 80111d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80111d8:	fb02 f200 	mul.w	r2, r2, r0
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	440b      	add	r3, r1
 80111e0:	6879      	ldr	r1, [r7, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fb12 	bl	801080c <st_dword>
			fs->wflag = 1;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2201      	movs	r2, #1
 80111ec:	70da      	strb	r2, [r3, #3]
			break;
 80111ee:	e006      	b.n	80111fe <put_fat+0x224>
			if (res != FR_OK) break;
 80111f0:	bf00      	nop
 80111f2:	e004      	b.n	80111fe <put_fat+0x224>
			if (res != FR_OK) break;
 80111f4:	bf00      	nop
 80111f6:	e002      	b.n	80111fe <put_fat+0x224>
			if (res != FR_OK) break;
 80111f8:	bf00      	nop
 80111fa:	e000      	b.n	80111fe <put_fat+0x224>
			if (res != FR_OK) break;
 80111fc:	bf00      	nop
		}
	}
	return res;
 80111fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3724      	adds	r7, #36	; 0x24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd90      	pop	{r4, r7, pc}

08011208 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b088      	sub	sp, #32
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d904      	bls.n	801122e <remove_chain+0x26>
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	69db      	ldr	r3, [r3, #28]
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	429a      	cmp	r2, r3
 801122c:	d301      	bcc.n	8011232 <remove_chain+0x2a>
 801122e:	2302      	movs	r3, #2
 8011230:	e04b      	b.n	80112ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d00c      	beq.n	8011252 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011238:	f04f 32ff 	mov.w	r2, #4294967295
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	69b8      	ldr	r0, [r7, #24]
 8011240:	f7ff fecb 	bl	8010fda <put_fat>
 8011244:	4603      	mov	r3, r0
 8011246:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011248:	7ffb      	ldrb	r3, [r7, #31]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d001      	beq.n	8011252 <remove_chain+0x4a>
 801124e:	7ffb      	ldrb	r3, [r7, #31]
 8011250:	e03b      	b.n	80112ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011252:	68b9      	ldr	r1, [r7, #8]
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	f7ff fdf0 	bl	8010e3a <get_fat>
 801125a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d031      	beq.n	80112c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d101      	bne.n	801126c <remove_chain+0x64>
 8011268:	2302      	movs	r3, #2
 801126a:	e02e      	b.n	80112ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011272:	d101      	bne.n	8011278 <remove_chain+0x70>
 8011274:	2301      	movs	r3, #1
 8011276:	e028      	b.n	80112ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011278:	2200      	movs	r2, #0
 801127a:	68b9      	ldr	r1, [r7, #8]
 801127c:	69b8      	ldr	r0, [r7, #24]
 801127e:	f7ff feac 	bl	8010fda <put_fat>
 8011282:	4603      	mov	r3, r0
 8011284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011286:	7ffb      	ldrb	r3, [r7, #31]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <remove_chain+0x88>
 801128c:	7ffb      	ldrb	r3, [r7, #31]
 801128e:	e01c      	b.n	80112ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	695a      	ldr	r2, [r3, #20]
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	69db      	ldr	r3, [r3, #28]
 8011298:	3b02      	subs	r3, #2
 801129a:	429a      	cmp	r2, r3
 801129c:	d20b      	bcs.n	80112b6 <remove_chain+0xae>
			fs->free_clst++;
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	1c5a      	adds	r2, r3, #1
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	791b      	ldrb	r3, [r3, #4]
 80112ac:	f043 0301 	orr.w	r3, r3, #1
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	69db      	ldr	r3, [r3, #28]
 80112be:	68ba      	ldr	r2, [r7, #8]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d3c6      	bcc.n	8011252 <remove_chain+0x4a>
 80112c4:	e000      	b.n	80112c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80112c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3720      	adds	r7, #32
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b088      	sub	sp, #32
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10d      	bne.n	8011304 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	691b      	ldr	r3, [r3, #16]
 80112ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d004      	beq.n	80112fe <create_chain+0x2c>
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	69db      	ldr	r3, [r3, #28]
 80112f8:	69ba      	ldr	r2, [r7, #24]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d31b      	bcc.n	8011336 <create_chain+0x64>
 80112fe:	2301      	movs	r3, #1
 8011300:	61bb      	str	r3, [r7, #24]
 8011302:	e018      	b.n	8011336 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7ff fd97 	bl	8010e3a <get_fat>
 801130c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2b01      	cmp	r3, #1
 8011312:	d801      	bhi.n	8011318 <create_chain+0x46>
 8011314:	2301      	movs	r3, #1
 8011316:	e070      	b.n	80113fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131e:	d101      	bne.n	8011324 <create_chain+0x52>
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	e06a      	b.n	80113fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	429a      	cmp	r2, r3
 801132c:	d201      	bcs.n	8011332 <create_chain+0x60>
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	e063      	b.n	80113fa <create_chain+0x128>
		scl = clst;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	3301      	adds	r3, #1
 801133e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	69db      	ldr	r3, [r3, #28]
 8011344:	69fa      	ldr	r2, [r7, #28]
 8011346:	429a      	cmp	r2, r3
 8011348:	d307      	bcc.n	801135a <create_chain+0x88>
				ncl = 2;
 801134a:	2302      	movs	r3, #2
 801134c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801134e:	69fa      	ldr	r2, [r7, #28]
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	429a      	cmp	r2, r3
 8011354:	d901      	bls.n	801135a <create_chain+0x88>
 8011356:	2300      	movs	r3, #0
 8011358:	e04f      	b.n	80113fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801135a:	69f9      	ldr	r1, [r7, #28]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff fd6c 	bl	8010e3a <get_fat>
 8011362:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00e      	beq.n	8011388 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2b01      	cmp	r3, #1
 801136e:	d003      	beq.n	8011378 <create_chain+0xa6>
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011376:	d101      	bne.n	801137c <create_chain+0xaa>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	e03e      	b.n	80113fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801137c:	69fa      	ldr	r2, [r7, #28]
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	429a      	cmp	r2, r3
 8011382:	d1da      	bne.n	801133a <create_chain+0x68>
 8011384:	2300      	movs	r3, #0
 8011386:	e038      	b.n	80113fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011388:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801138a:	f04f 32ff 	mov.w	r2, #4294967295
 801138e:	69f9      	ldr	r1, [r7, #28]
 8011390:	6938      	ldr	r0, [r7, #16]
 8011392:	f7ff fe22 	bl	8010fda <put_fat>
 8011396:	4603      	mov	r3, r0
 8011398:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d109      	bne.n	80113b4 <create_chain+0xe2>
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80113a6:	69fa      	ldr	r2, [r7, #28]
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	6938      	ldr	r0, [r7, #16]
 80113ac:	f7ff fe15 	bl	8010fda <put_fat>
 80113b0:	4603      	mov	r3, r0
 80113b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80113b4:	7dfb      	ldrb	r3, [r7, #23]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d116      	bne.n	80113e8 <create_chain+0x116>
		fs->last_clst = ncl;
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	69fa      	ldr	r2, [r7, #28]
 80113be:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	695a      	ldr	r2, [r3, #20]
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	3b02      	subs	r3, #2
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d804      	bhi.n	80113d8 <create_chain+0x106>
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	695b      	ldr	r3, [r3, #20]
 80113d2:	1e5a      	subs	r2, r3, #1
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	791b      	ldrb	r3, [r3, #4]
 80113dc:	f043 0301 	orr.w	r3, r3, #1
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	711a      	strb	r2, [r3, #4]
 80113e6:	e007      	b.n	80113f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80113e8:	7dfb      	ldrb	r3, [r7, #23]
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d102      	bne.n	80113f4 <create_chain+0x122>
 80113ee:	f04f 33ff 	mov.w	r3, #4294967295
 80113f2:	e000      	b.n	80113f6 <create_chain+0x124>
 80113f4:	2301      	movs	r3, #1
 80113f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80113f8:	69fb      	ldr	r3, [r7, #28]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3720      	adds	r7, #32
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011402:	b480      	push	{r7}
 8011404:	b087      	sub	sp, #28
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	3304      	adds	r3, #4
 8011418:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	899b      	ldrh	r3, [r3, #12]
 801141e:	461a      	mov	r2, r3
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	fbb3 f3f2 	udiv	r3, r3, r2
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	8952      	ldrh	r2, [r2, #10]
 801142a:	fbb3 f3f2 	udiv	r3, r3, r2
 801142e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	1d1a      	adds	r2, r3, #4
 8011434:	613a      	str	r2, [r7, #16]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <clmt_clust+0x42>
 8011440:	2300      	movs	r3, #0
 8011442:	e010      	b.n	8011466 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	429a      	cmp	r2, r3
 801144a:	d307      	bcc.n	801145c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801144c:	697a      	ldr	r2, [r7, #20]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	617b      	str	r3, [r7, #20]
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	3304      	adds	r3, #4
 8011458:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801145a:	e7e9      	b.n	8011430 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801145c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	4413      	add	r3, r2
}
 8011466:	4618      	mov	r0, r3
 8011468:	371c      	adds	r7, #28
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr

08011472 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b086      	sub	sp, #24
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
 801147a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011488:	d204      	bcs.n	8011494 <dir_sdi+0x22>
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	f003 031f 	and.w	r3, r3, #31
 8011490:	2b00      	cmp	r3, #0
 8011492:	d001      	beq.n	8011498 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011494:	2302      	movs	r3, #2
 8011496:	e071      	b.n	801157c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d106      	bne.n	80114b8 <dir_sdi+0x46>
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d902      	bls.n	80114b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10c      	bne.n	80114d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	095b      	lsrs	r3, r3, #5
 80114c2:	693a      	ldr	r2, [r7, #16]
 80114c4:	8912      	ldrh	r2, [r2, #8]
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d301      	bcc.n	80114ce <dir_sdi+0x5c>
 80114ca:	2302      	movs	r3, #2
 80114cc:	e056      	b.n	801157c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	61da      	str	r2, [r3, #28]
 80114d6:	e02d      	b.n	8011534 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	895b      	ldrh	r3, [r3, #10]
 80114dc:	461a      	mov	r2, r3
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	899b      	ldrh	r3, [r3, #12]
 80114e2:	fb03 f302 	mul.w	r3, r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80114e8:	e019      	b.n	801151e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6979      	ldr	r1, [r7, #20]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff fca3 	bl	8010e3a <get_fat>
 80114f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fc:	d101      	bne.n	8011502 <dir_sdi+0x90>
 80114fe:	2301      	movs	r3, #1
 8011500:	e03c      	b.n	801157c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d904      	bls.n	8011512 <dir_sdi+0xa0>
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	697a      	ldr	r2, [r7, #20]
 801150e:	429a      	cmp	r2, r3
 8011510:	d301      	bcc.n	8011516 <dir_sdi+0xa4>
 8011512:	2302      	movs	r3, #2
 8011514:	e032      	b.n	801157c <dir_sdi+0x10a>
			ofs -= csz;
 8011516:	683a      	ldr	r2, [r7, #0]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	429a      	cmp	r2, r3
 8011524:	d2e1      	bcs.n	80114ea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011526:	6979      	ldr	r1, [r7, #20]
 8011528:	6938      	ldr	r0, [r7, #16]
 801152a:	f7ff fc67 	bl	8010dfc <clust2sect>
 801152e:	4602      	mov	r2, r0
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	697a      	ldr	r2, [r7, #20]
 8011538:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	69db      	ldr	r3, [r3, #28]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <dir_sdi+0xd4>
 8011542:	2302      	movs	r3, #2
 8011544:	e01a      	b.n	801157c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	69da      	ldr	r2, [r3, #28]
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	899b      	ldrh	r3, [r3, #12]
 801154e:	4619      	mov	r1, r3
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	fbb3 f3f1 	udiv	r3, r3, r1
 8011556:	441a      	add	r2, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	899b      	ldrh	r3, [r3, #12]
 8011566:	461a      	mov	r2, r3
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	fbb3 f0f2 	udiv	r0, r3, r2
 801156e:	fb02 f200 	mul.w	r2, r2, r0
 8011572:	1a9b      	subs	r3, r3, r2
 8011574:	18ca      	adds	r2, r1, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801157a:	2300      	movs	r3, #0
}
 801157c:	4618      	mov	r0, r3
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	695b      	ldr	r3, [r3, #20]
 8011598:	3320      	adds	r3, #32
 801159a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	69db      	ldr	r3, [r3, #28]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d003      	beq.n	80115ac <dir_next+0x28>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80115aa:	d301      	bcc.n	80115b0 <dir_next+0x2c>
 80115ac:	2304      	movs	r3, #4
 80115ae:	e0bb      	b.n	8011728 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	899b      	ldrh	r3, [r3, #12]
 80115b4:	461a      	mov	r2, r3
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80115bc:	fb02 f201 	mul.w	r2, r2, r1
 80115c0:	1a9b      	subs	r3, r3, r2
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f040 809d 	bne.w	8011702 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	69db      	ldr	r3, [r3, #28]
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	699b      	ldr	r3, [r3, #24]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10b      	bne.n	80115f2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	095b      	lsrs	r3, r3, #5
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	8912      	ldrh	r2, [r2, #8]
 80115e2:	4293      	cmp	r3, r2
 80115e4:	f0c0 808d 	bcc.w	8011702 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2200      	movs	r2, #0
 80115ec:	61da      	str	r2, [r3, #28]
 80115ee:	2304      	movs	r3, #4
 80115f0:	e09a      	b.n	8011728 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	461a      	mov	r2, r3
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80115fe:	68fa      	ldr	r2, [r7, #12]
 8011600:	8952      	ldrh	r2, [r2, #10]
 8011602:	3a01      	subs	r2, #1
 8011604:	4013      	ands	r3, r2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d17b      	bne.n	8011702 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f7ff fc11 	bl	8010e3a <get_fat>
 8011618:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d801      	bhi.n	8011624 <dir_next+0xa0>
 8011620:	2302      	movs	r3, #2
 8011622:	e081      	b.n	8011728 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801162a:	d101      	bne.n	8011630 <dir_next+0xac>
 801162c:	2301      	movs	r3, #1
 801162e:	e07b      	b.n	8011728 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	69db      	ldr	r3, [r3, #28]
 8011634:	697a      	ldr	r2, [r7, #20]
 8011636:	429a      	cmp	r2, r3
 8011638:	d359      	bcc.n	80116ee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d104      	bne.n	801164a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	61da      	str	r2, [r3, #28]
 8011646:	2304      	movs	r3, #4
 8011648:	e06e      	b.n	8011728 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	699b      	ldr	r3, [r3, #24]
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7ff fe3d 	bl	80112d2 <create_chain>
 8011658:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <dir_next+0xe0>
 8011660:	2307      	movs	r3, #7
 8011662:	e061      	b.n	8011728 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	2b01      	cmp	r3, #1
 8011668:	d101      	bne.n	801166e <dir_next+0xea>
 801166a:	2302      	movs	r3, #2
 801166c:	e05c      	b.n	8011728 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011674:	d101      	bne.n	801167a <dir_next+0xf6>
 8011676:	2301      	movs	r3, #1
 8011678:	e056      	b.n	8011728 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7ff fadc 	bl	8010c38 <sync_window>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <dir_next+0x106>
 8011686:	2301      	movs	r3, #1
 8011688:	e04e      	b.n	8011728 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	899b      	ldrh	r3, [r3, #12]
 8011694:	461a      	mov	r2, r3
 8011696:	2100      	movs	r1, #0
 8011698:	f7ff f905 	bl	80108a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801169c:	2300      	movs	r3, #0
 801169e:	613b      	str	r3, [r7, #16]
 80116a0:	6979      	ldr	r1, [r7, #20]
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f7ff fbaa 	bl	8010dfc <clust2sect>
 80116a8:	4602      	mov	r2, r0
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	635a      	str	r2, [r3, #52]	; 0x34
 80116ae:	e012      	b.n	80116d6 <dir_next+0x152>
						fs->wflag = 1;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2201      	movs	r2, #1
 80116b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f7ff fabe 	bl	8010c38 <sync_window>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d001      	beq.n	80116c6 <dir_next+0x142>
 80116c2:	2301      	movs	r3, #1
 80116c4:	e030      	b.n	8011728 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	3301      	adds	r3, #1
 80116ca:	613b      	str	r3, [r7, #16]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116d0:	1c5a      	adds	r2, r3, #1
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	635a      	str	r2, [r3, #52]	; 0x34
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	895b      	ldrh	r3, [r3, #10]
 80116da:	461a      	mov	r2, r3
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	4293      	cmp	r3, r2
 80116e0:	d3e6      	bcc.n	80116b0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	1ad2      	subs	r2, r2, r3
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80116f4:	6979      	ldr	r1, [r7, #20]
 80116f6:	68f8      	ldr	r0, [r7, #12]
 80116f8:	f7ff fb80 	bl	8010dfc <clust2sect>
 80116fc:	4602      	mov	r2, r0
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	899b      	ldrh	r3, [r3, #12]
 8011712:	461a      	mov	r2, r3
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	fbb3 f0f2 	udiv	r0, r3, r2
 801171a:	fb02 f200 	mul.w	r2, r2, r0
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	18ca      	adds	r2, r1, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011726:	2300      	movs	r3, #0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3718      	adds	r7, #24
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011740:	2100      	movs	r1, #0
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff fe95 	bl	8011472 <dir_sdi>
 8011748:	4603      	mov	r3, r0
 801174a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801174c:	7dfb      	ldrb	r3, [r7, #23]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d12b      	bne.n	80117aa <dir_alloc+0x7a>
		n = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	69db      	ldr	r3, [r3, #28]
 801175a:	4619      	mov	r1, r3
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f7ff faaf 	bl	8010cc0 <move_window>
 8011762:	4603      	mov	r3, r0
 8011764:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d11d      	bne.n	80117a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2be5      	cmp	r3, #229	; 0xe5
 8011774:	d004      	beq.n	8011780 <dir_alloc+0x50>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6a1b      	ldr	r3, [r3, #32]
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d107      	bne.n	8011790 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	3301      	adds	r3, #1
 8011784:	613b      	str	r3, [r7, #16]
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d102      	bne.n	8011794 <dir_alloc+0x64>
 801178e:	e00c      	b.n	80117aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011790:	2300      	movs	r3, #0
 8011792:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011794:	2101      	movs	r1, #1
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f7ff fef4 	bl	8011584 <dir_next>
 801179c:	4603      	mov	r3, r0
 801179e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80117a0:	7dfb      	ldrb	r3, [r7, #23]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d0d7      	beq.n	8011756 <dir_alloc+0x26>
 80117a6:	e000      	b.n	80117aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80117a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	2b04      	cmp	r3, #4
 80117ae:	d101      	bne.n	80117b4 <dir_alloc+0x84>
 80117b0:	2307      	movs	r3, #7
 80117b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3718      	adds	r7, #24
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	331a      	adds	r3, #26
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fe ffc7 	bl	8010760 <ld_word>
 80117d2:	4603      	mov	r3, r0
 80117d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d109      	bne.n	80117f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	3314      	adds	r3, #20
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fe ffbc 	bl	8010760 <ld_word>
 80117e8:	4603      	mov	r3, r0
 80117ea:	041b      	lsls	r3, r3, #16
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	4313      	orrs	r3, r2
 80117f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80117f2:	68fb      	ldr	r3, [r7, #12]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	331a      	adds	r3, #26
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	b292      	uxth	r2, r2
 8011810:	4611      	mov	r1, r2
 8011812:	4618      	mov	r0, r3
 8011814:	f7fe ffdf 	bl	80107d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b03      	cmp	r3, #3
 801181e:	d109      	bne.n	8011834 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	f103 0214 	add.w	r2, r3, #20
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	0c1b      	lsrs	r3, r3, #16
 801182a:	b29b      	uxth	r3, r3
 801182c:	4619      	mov	r1, r3
 801182e:	4610      	mov	r0, r2
 8011830:	f7fe ffd1 	bl	80107d6 <st_word>
	}
}
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011846:	2304      	movs	r3, #4
 8011848:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011850:	e03c      	b.n	80118cc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	69db      	ldr	r3, [r3, #28]
 8011856:	4619      	mov	r1, r3
 8011858:	6938      	ldr	r0, [r7, #16]
 801185a:	f7ff fa31 	bl	8010cc0 <move_window>
 801185e:	4603      	mov	r3, r0
 8011860:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011862:	7dfb      	ldrb	r3, [r7, #23]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d136      	bne.n	80118d6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6a1b      	ldr	r3, [r3, #32]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011870:	7bfb      	ldrb	r3, [r7, #15]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d102      	bne.n	801187c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011876:	2304      	movs	r3, #4
 8011878:	75fb      	strb	r3, [r7, #23]
 801187a:	e031      	b.n	80118e0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6a1b      	ldr	r3, [r3, #32]
 8011880:	330b      	adds	r3, #11
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011888:	73bb      	strb	r3, [r7, #14]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	7bba      	ldrb	r2, [r7, #14]
 801188e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011890:	7bfb      	ldrb	r3, [r7, #15]
 8011892:	2be5      	cmp	r3, #229	; 0xe5
 8011894:	d011      	beq.n	80118ba <dir_read+0x7e>
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	2b2e      	cmp	r3, #46	; 0x2e
 801189a:	d00e      	beq.n	80118ba <dir_read+0x7e>
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	2b0f      	cmp	r3, #15
 80118a0:	d00b      	beq.n	80118ba <dir_read+0x7e>
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
 80118a4:	f023 0320 	bic.w	r3, r3, #32
 80118a8:	2b08      	cmp	r3, #8
 80118aa:	bf0c      	ite	eq
 80118ac:	2301      	moveq	r3, #1
 80118ae:	2300      	movne	r3, #0
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	461a      	mov	r2, r3
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d00f      	beq.n	80118da <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80118ba:	2100      	movs	r1, #0
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7ff fe61 	bl	8011584 <dir_next>
 80118c2:	4603      	mov	r3, r0
 80118c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80118c6:	7dfb      	ldrb	r3, [r7, #23]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d108      	bne.n	80118de <dir_read+0xa2>
	while (dp->sect) {
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	69db      	ldr	r3, [r3, #28]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1be      	bne.n	8011852 <dir_read+0x16>
 80118d4:	e004      	b.n	80118e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80118d6:	bf00      	nop
 80118d8:	e002      	b.n	80118e0 <dir_read+0xa4>
				break;
 80118da:	bf00      	nop
 80118dc:	e000      	b.n	80118e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80118de:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80118e0:	7dfb      	ldrb	r3, [r7, #23]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d002      	beq.n	80118ec <dir_read+0xb0>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	61da      	str	r2, [r3, #28]
	return res;
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3718      	adds	r7, #24
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b086      	sub	sp, #24
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011904:	2100      	movs	r1, #0
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff fdb3 	bl	8011472 <dir_sdi>
 801190c:	4603      	mov	r3, r0
 801190e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <dir_find+0x24>
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	e03e      	b.n	8011998 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	69db      	ldr	r3, [r3, #28]
 801191e:	4619      	mov	r1, r3
 8011920:	6938      	ldr	r0, [r7, #16]
 8011922:	f7ff f9cd 	bl	8010cc0 <move_window>
 8011926:	4603      	mov	r3, r0
 8011928:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801192a:	7dfb      	ldrb	r3, [r7, #23]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d12f      	bne.n	8011990 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6a1b      	ldr	r3, [r3, #32]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011938:	7bfb      	ldrb	r3, [r7, #15]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d102      	bne.n	8011944 <dir_find+0x4e>
 801193e:	2304      	movs	r3, #4
 8011940:	75fb      	strb	r3, [r7, #23]
 8011942:	e028      	b.n	8011996 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a1b      	ldr	r3, [r3, #32]
 8011948:	330b      	adds	r3, #11
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011950:	b2da      	uxtb	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a1b      	ldr	r3, [r3, #32]
 801195a:	330b      	adds	r3, #11
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f003 0308 	and.w	r3, r3, #8
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10a      	bne.n	801197c <dir_find+0x86>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a18      	ldr	r0, [r3, #32]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	3324      	adds	r3, #36	; 0x24
 801196e:	220b      	movs	r2, #11
 8011970:	4619      	mov	r1, r3
 8011972:	f7fe ffb2 	bl	80108da <mem_cmp>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00b      	beq.n	8011994 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801197c:	2100      	movs	r1, #0
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff fe00 	bl	8011584 <dir_next>
 8011984:	4603      	mov	r3, r0
 8011986:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011988:	7dfb      	ldrb	r3, [r7, #23]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d0c5      	beq.n	801191a <dir_find+0x24>
 801198e:	e002      	b.n	8011996 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011990:	bf00      	nop
 8011992:	e000      	b.n	8011996 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011994:	bf00      	nop

	return res;
 8011996:	7dfb      	ldrb	r3, [r7, #23]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3718      	adds	r7, #24
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80119ae:	2101      	movs	r1, #1
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7ff febd 	bl	8011730 <dir_alloc>
 80119b6:	4603      	mov	r3, r0
 80119b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d11c      	bne.n	80119fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	69db      	ldr	r3, [r3, #28]
 80119c4:	4619      	mov	r1, r3
 80119c6:	68b8      	ldr	r0, [r7, #8]
 80119c8:	f7ff f97a 	bl	8010cc0 <move_window>
 80119cc:	4603      	mov	r3, r0
 80119ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80119d0:	7bfb      	ldrb	r3, [r7, #15]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d111      	bne.n	80119fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a1b      	ldr	r3, [r3, #32]
 80119da:	2220      	movs	r2, #32
 80119dc:	2100      	movs	r1, #0
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fe ff61 	bl	80108a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a18      	ldr	r0, [r3, #32]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3324      	adds	r3, #36	; 0x24
 80119ec:	220b      	movs	r2, #11
 80119ee:	4619      	mov	r1, r3
 80119f0:	f7fe ff38 	bl	8010864 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	2201      	movs	r2, #1
 80119f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	69db      	ldr	r3, [r3, #28]
 8011a16:	4619      	mov	r1, r3
 8011a18:	68f8      	ldr	r0, [r7, #12]
 8011a1a:	f7ff f951 	bl	8010cc0 <move_window>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011a22:	7afb      	ldrb	r3, [r7, #11]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d106      	bne.n	8011a36 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a1b      	ldr	r3, [r3, #32]
 8011a2c:	22e5      	movs	r2, #229	; 0xe5
 8011a2e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2201      	movs	r2, #1
 8011a34:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011a36:	7afb      	ldrb	r3, [r7, #11]
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b088      	sub	sp, #32
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	60fb      	str	r3, [r7, #12]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	3324      	adds	r3, #36	; 0x24
 8011a54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011a56:	220b      	movs	r2, #11
 8011a58:	2120      	movs	r1, #32
 8011a5a:	68b8      	ldr	r0, [r7, #8]
 8011a5c:	f7fe ff23 	bl	80108a6 <mem_set>
	si = i = 0; ni = 8;
 8011a60:	2300      	movs	r3, #0
 8011a62:	613b      	str	r3, [r7, #16]
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	2308      	movs	r3, #8
 8011a6a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8011a6c:	68fa      	ldr	r2, [r7, #12]
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	4413      	add	r3, r2
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2b2e      	cmp	r3, #46	; 0x2e
 8011a76:	d12f      	bne.n	8011ad8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	1c5a      	adds	r2, r3, #1
 8011a7c:	617a      	str	r2, [r7, #20]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	4413      	add	r3, r2
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011a86:	7ffb      	ldrb	r3, [r7, #31]
 8011a88:	2b2e      	cmp	r3, #46	; 0x2e
 8011a8a:	d10a      	bne.n	8011aa2 <create_name+0x62>
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	2b02      	cmp	r3, #2
 8011a90:	d807      	bhi.n	8011aa2 <create_name+0x62>
			sfn[i++] = c;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	1c5a      	adds	r2, r3, #1
 8011a96:	613a      	str	r2, [r7, #16]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	7ffa      	ldrb	r2, [r7, #31]
 8011a9e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011aa0:	e7ea      	b.n	8011a78 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011aa2:	7ffb      	ldrb	r3, [r7, #31]
 8011aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8011aa6:	d007      	beq.n	8011ab8 <create_name+0x78>
 8011aa8:	7ffb      	ldrb	r3, [r7, #31]
 8011aaa:	2b5c      	cmp	r3, #92	; 0x5c
 8011aac:	d004      	beq.n	8011ab8 <create_name+0x78>
 8011aae:	7ffb      	ldrb	r3, [r7, #31]
 8011ab0:	2b20      	cmp	r3, #32
 8011ab2:	d901      	bls.n	8011ab8 <create_name+0x78>
 8011ab4:	2306      	movs	r3, #6
 8011ab6:	e084      	b.n	8011bc2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8011ab8:	68fa      	ldr	r2, [r7, #12]
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	441a      	add	r2, r3
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8011ac2:	7ffb      	ldrb	r3, [r7, #31]
 8011ac4:	2b20      	cmp	r3, #32
 8011ac6:	d801      	bhi.n	8011acc <create_name+0x8c>
 8011ac8:	2224      	movs	r2, #36	; 0x24
 8011aca:	e000      	b.n	8011ace <create_name+0x8e>
 8011acc:	2220      	movs	r2, #32
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	330b      	adds	r3, #11
 8011ad2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	e074      	b.n	8011bc2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	1c5a      	adds	r2, r3, #1
 8011adc:	617a      	str	r2, [r7, #20]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011ae6:	7ffb      	ldrb	r3, [r7, #31]
 8011ae8:	2b20      	cmp	r3, #32
 8011aea:	d94e      	bls.n	8011b8a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011aec:	7ffb      	ldrb	r3, [r7, #31]
 8011aee:	2b2f      	cmp	r3, #47	; 0x2f
 8011af0:	d006      	beq.n	8011b00 <create_name+0xc0>
 8011af2:	7ffb      	ldrb	r3, [r7, #31]
 8011af4:	2b5c      	cmp	r3, #92	; 0x5c
 8011af6:	d110      	bne.n	8011b1a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011af8:	e002      	b.n	8011b00 <create_name+0xc0>
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	3301      	adds	r3, #1
 8011afe:	617b      	str	r3, [r7, #20]
 8011b00:	68fa      	ldr	r2, [r7, #12]
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	4413      	add	r3, r2
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	2b2f      	cmp	r3, #47	; 0x2f
 8011b0a:	d0f6      	beq.n	8011afa <create_name+0xba>
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	4413      	add	r3, r2
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b5c      	cmp	r3, #92	; 0x5c
 8011b16:	d0f0      	beq.n	8011afa <create_name+0xba>
			break;
 8011b18:	e038      	b.n	8011b8c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011b1a:	7ffb      	ldrb	r3, [r7, #31]
 8011b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011b1e:	d003      	beq.n	8011b28 <create_name+0xe8>
 8011b20:	693a      	ldr	r2, [r7, #16]
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d30c      	bcc.n	8011b42 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	2b0b      	cmp	r3, #11
 8011b2c:	d002      	beq.n	8011b34 <create_name+0xf4>
 8011b2e:	7ffb      	ldrb	r3, [r7, #31]
 8011b30:	2b2e      	cmp	r3, #46	; 0x2e
 8011b32:	d001      	beq.n	8011b38 <create_name+0xf8>
 8011b34:	2306      	movs	r3, #6
 8011b36:	e044      	b.n	8011bc2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011b38:	2308      	movs	r3, #8
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	230b      	movs	r3, #11
 8011b3e:	61bb      	str	r3, [r7, #24]
			continue;
 8011b40:	e022      	b.n	8011b88 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	da04      	bge.n	8011b54 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011b4a:	7ffb      	ldrb	r3, [r7, #31]
 8011b4c:	3b80      	subs	r3, #128	; 0x80
 8011b4e:	4a1f      	ldr	r2, [pc, #124]	; (8011bcc <create_name+0x18c>)
 8011b50:	5cd3      	ldrb	r3, [r2, r3]
 8011b52:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011b54:	7ffb      	ldrb	r3, [r7, #31]
 8011b56:	4619      	mov	r1, r3
 8011b58:	481d      	ldr	r0, [pc, #116]	; (8011bd0 <create_name+0x190>)
 8011b5a:	f7fe fee5 	bl	8010928 <chk_chr>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <create_name+0x128>
 8011b64:	2306      	movs	r3, #6
 8011b66:	e02c      	b.n	8011bc2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011b68:	7ffb      	ldrb	r3, [r7, #31]
 8011b6a:	2b60      	cmp	r3, #96	; 0x60
 8011b6c:	d905      	bls.n	8011b7a <create_name+0x13a>
 8011b6e:	7ffb      	ldrb	r3, [r7, #31]
 8011b70:	2b7a      	cmp	r3, #122	; 0x7a
 8011b72:	d802      	bhi.n	8011b7a <create_name+0x13a>
 8011b74:	7ffb      	ldrb	r3, [r7, #31]
 8011b76:	3b20      	subs	r3, #32
 8011b78:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	1c5a      	adds	r2, r3, #1
 8011b7e:	613a      	str	r2, [r7, #16]
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	4413      	add	r3, r2
 8011b84:	7ffa      	ldrb	r2, [r7, #31]
 8011b86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011b88:	e7a6      	b.n	8011ad8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011b8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011b8c:	68fa      	ldr	r2, [r7, #12]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	441a      	add	r2, r3
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <create_name+0x160>
 8011b9c:	2306      	movs	r3, #6
 8011b9e:	e010      	b.n	8011bc2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	2be5      	cmp	r3, #229	; 0xe5
 8011ba6:	d102      	bne.n	8011bae <create_name+0x16e>
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	2205      	movs	r2, #5
 8011bac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011bae:	7ffb      	ldrb	r3, [r7, #31]
 8011bb0:	2b20      	cmp	r3, #32
 8011bb2:	d801      	bhi.n	8011bb8 <create_name+0x178>
 8011bb4:	2204      	movs	r2, #4
 8011bb6:	e000      	b.n	8011bba <create_name+0x17a>
 8011bb8:	2200      	movs	r2, #0
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	330b      	adds	r3, #11
 8011bbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011bc0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3720      	adds	r7, #32
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	080193a8 	.word	0x080193a8
 8011bd0:	08019358 	.word	0x08019358

08011bd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	2b2f      	cmp	r3, #47	; 0x2f
 8011bee:	d00b      	beq.n	8011c08 <follow_path+0x34>
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8011bf6:	d007      	beq.n	8011c08 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	699a      	ldr	r2, [r3, #24]
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	609a      	str	r2, [r3, #8]
 8011c00:	e00d      	b.n	8011c1e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	3301      	adds	r3, #1
 8011c06:	603b      	str	r3, [r7, #0]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8011c0e:	d0f8      	beq.n	8011c02 <follow_path+0x2e>
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	2b5c      	cmp	r3, #92	; 0x5c
 8011c16:	d0f4      	beq.n	8011c02 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	2b1f      	cmp	r3, #31
 8011c24:	d80a      	bhi.n	8011c3c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2280      	movs	r2, #128	; 0x80
 8011c2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011c2e:	2100      	movs	r1, #0
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff fc1e 	bl	8011472 <dir_sdi>
 8011c36:	4603      	mov	r3, r0
 8011c38:	75fb      	strb	r3, [r7, #23]
 8011c3a:	e05b      	b.n	8011cf4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c3c:	463b      	mov	r3, r7
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7ff fefd 	bl	8011a40 <create_name>
 8011c46:	4603      	mov	r3, r0
 8011c48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d14c      	bne.n	8011cea <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7ff fe50 	bl	80118f6 <dir_find>
 8011c56:	4603      	mov	r3, r0
 8011c58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d01b      	beq.n	8011ca0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011c68:	7dfb      	ldrb	r3, [r7, #23]
 8011c6a:	2b04      	cmp	r3, #4
 8011c6c:	d13f      	bne.n	8011cee <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011c6e:	7afb      	ldrb	r3, [r7, #11]
 8011c70:	f003 0320 	and.w	r3, r3, #32
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00b      	beq.n	8011c90 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011c78:	7afb      	ldrb	r3, [r7, #11]
 8011c7a:	f003 0304 	and.w	r3, r3, #4
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d031      	beq.n	8011ce6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2280      	movs	r2, #128	; 0x80
 8011c86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011c8e:	e02e      	b.n	8011cee <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011c90:	7afb      	ldrb	r3, [r7, #11]
 8011c92:	f003 0304 	and.w	r3, r3, #4
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d129      	bne.n	8011cee <follow_path+0x11a>
 8011c9a:	2305      	movs	r3, #5
 8011c9c:	75fb      	strb	r3, [r7, #23]
				break;
 8011c9e:	e026      	b.n	8011cee <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ca0:	7afb      	ldrb	r3, [r7, #11]
 8011ca2:	f003 0304 	and.w	r3, r3, #4
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d123      	bne.n	8011cf2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	799b      	ldrb	r3, [r3, #6]
 8011cae:	f003 0310 	and.w	r3, r3, #16
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d102      	bne.n	8011cbc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011cb6:	2305      	movs	r3, #5
 8011cb8:	75fb      	strb	r3, [r7, #23]
 8011cba:	e01b      	b.n	8011cf4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	695b      	ldr	r3, [r3, #20]
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	8992      	ldrh	r2, [r2, #12]
 8011cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cce:	fb02 f200 	mul.w	r2, r2, r0
 8011cd2:	1a9b      	subs	r3, r3, r2
 8011cd4:	440b      	add	r3, r1
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff fd70 	bl	80117be <ld_clust>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	609a      	str	r2, [r3, #8]
 8011ce4:	e7aa      	b.n	8011c3c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011ce6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ce8:	e7a8      	b.n	8011c3c <follow_path+0x68>
			if (res != FR_OK) break;
 8011cea:	bf00      	nop
 8011cec:	e002      	b.n	8011cf4 <follow_path+0x120>
				break;
 8011cee:	bf00      	nop
 8011cf0:	e000      	b.n	8011cf4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011cf2:	bf00      	nop
			}
		}
	}

	return res;
 8011cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3718      	adds	r7, #24
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011cfe:	b480      	push	{r7}
 8011d00:	b087      	sub	sp, #28
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011d06:	f04f 33ff 	mov.w	r3, #4294967295
 8011d0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d031      	beq.n	8011d78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	617b      	str	r3, [r7, #20]
 8011d1a:	e002      	b.n	8011d22 <get_ldnumber+0x24>
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	617b      	str	r3, [r7, #20]
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	2b20      	cmp	r3, #32
 8011d28:	d903      	bls.n	8011d32 <get_ldnumber+0x34>
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8011d30:	d1f4      	bne.n	8011d1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	2b3a      	cmp	r3, #58	; 0x3a
 8011d38:	d11c      	bne.n	8011d74 <get_ldnumber+0x76>
			tp = *path;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	1c5a      	adds	r2, r3, #1
 8011d44:	60fa      	str	r2, [r7, #12]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	3b30      	subs	r3, #48	; 0x30
 8011d4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b09      	cmp	r3, #9
 8011d50:	d80e      	bhi.n	8011d70 <get_ldnumber+0x72>
 8011d52:	68fa      	ldr	r2, [r7, #12]
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d10a      	bne.n	8011d70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d107      	bne.n	8011d70 <get_ldnumber+0x72>
					vol = (int)i;
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	3301      	adds	r3, #1
 8011d68:	617b      	str	r3, [r7, #20]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	697a      	ldr	r2, [r7, #20]
 8011d6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	e002      	b.n	8011d7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011d74:	2300      	movs	r3, #0
 8011d76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011d78:	693b      	ldr	r3, [r7, #16]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	371c      	adds	r7, #28
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr
	...

08011d88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2200      	movs	r2, #0
 8011d96:	70da      	strb	r2, [r3, #3]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f7fe ff8c 	bl	8010cc0 <move_window>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <check_fs+0x2a>
 8011dae:	2304      	movs	r3, #4
 8011db0:	e038      	b.n	8011e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	3338      	adds	r3, #56	; 0x38
 8011db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fe fcd0 	bl	8010760 <ld_word>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d001      	beq.n	8011dd0 <check_fs+0x48>
 8011dcc:	2303      	movs	r3, #3
 8011dce:	e029      	b.n	8011e24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011dd6:	2be9      	cmp	r3, #233	; 0xe9
 8011dd8:	d009      	beq.n	8011dee <check_fs+0x66>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011de0:	2beb      	cmp	r3, #235	; 0xeb
 8011de2:	d11e      	bne.n	8011e22 <check_fs+0x9a>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011dea:	2b90      	cmp	r3, #144	; 0x90
 8011dec:	d119      	bne.n	8011e22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	3338      	adds	r3, #56	; 0x38
 8011df2:	3336      	adds	r3, #54	; 0x36
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fccb 	bl	8010790 <ld_dword>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011e00:	4a0a      	ldr	r2, [pc, #40]	; (8011e2c <check_fs+0xa4>)
 8011e02:	4293      	cmp	r3, r2
 8011e04:	d101      	bne.n	8011e0a <check_fs+0x82>
 8011e06:	2300      	movs	r3, #0
 8011e08:	e00c      	b.n	8011e24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	3338      	adds	r3, #56	; 0x38
 8011e0e:	3352      	adds	r3, #82	; 0x52
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fe fcbd 	bl	8010790 <ld_dword>
 8011e16:	4602      	mov	r2, r0
 8011e18:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <check_fs+0xa8>)
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d101      	bne.n	8011e22 <check_fs+0x9a>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e000      	b.n	8011e24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011e22:	2302      	movs	r3, #2
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	00544146 	.word	0x00544146
 8011e30:	33544146 	.word	0x33544146

08011e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b096      	sub	sp, #88	; 0x58
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f7ff ff58 	bl	8011cfe <get_ldnumber>
 8011e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	da01      	bge.n	8011e5a <find_volume+0x26>
 8011e56:	230b      	movs	r3, #11
 8011e58:	e268      	b.n	801232c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011e5a:	4ab0      	ldr	r2, [pc, #704]	; (801211c <find_volume+0x2e8>)
 8011e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d101      	bne.n	8011e6e <find_volume+0x3a>
 8011e6a:	230c      	movs	r3, #12
 8011e6c:	e25e      	b.n	801232c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011e74:	79fb      	ldrb	r3, [r7, #7]
 8011e76:	f023 0301 	bic.w	r3, r3, #1
 8011e7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d01a      	beq.n	8011eba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e86:	785b      	ldrb	r3, [r3, #1]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fe fbcb 	bl	8010624 <disk_status>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d10c      	bne.n	8011eba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011ea0:	79fb      	ldrb	r3, [r7, #7]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d007      	beq.n	8011eb6 <find_volume+0x82>
 8011ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011eaa:	f003 0304 	and.w	r3, r3, #4
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011eb2:	230a      	movs	r3, #10
 8011eb4:	e23a      	b.n	801232c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	e238      	b.n	801232c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	785b      	ldrb	r3, [r3, #1]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fe fbc3 	bl	8010658 <disk_initialize>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011ee4:	2303      	movs	r3, #3
 8011ee6:	e221      	b.n	801232c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011ee8:	79fb      	ldrb	r3, [r7, #7]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <find_volume+0xca>
 8011eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ef2:	f003 0304 	and.w	r3, r3, #4
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d001      	beq.n	8011efe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011efa:	230a      	movs	r3, #10
 8011efc:	e216      	b.n	801232c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	7858      	ldrb	r0, [r3, #1]
 8011f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f04:	330c      	adds	r3, #12
 8011f06:	461a      	mov	r2, r3
 8011f08:	2102      	movs	r1, #2
 8011f0a:	f7fe fc0b 	bl	8010724 <disk_ioctl>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d001      	beq.n	8011f18 <find_volume+0xe4>
 8011f14:	2301      	movs	r3, #1
 8011f16:	e209      	b.n	801232c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1a:	899b      	ldrh	r3, [r3, #12]
 8011f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f20:	d80d      	bhi.n	8011f3e <find_volume+0x10a>
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	899b      	ldrh	r3, [r3, #12]
 8011f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f2a:	d308      	bcc.n	8011f3e <find_volume+0x10a>
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	899b      	ldrh	r3, [r3, #12]
 8011f30:	461a      	mov	r2, r3
 8011f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f34:	899b      	ldrh	r3, [r3, #12]
 8011f36:	3b01      	subs	r3, #1
 8011f38:	4013      	ands	r3, r2
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d001      	beq.n	8011f42 <find_volume+0x10e>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e1f4      	b.n	801232c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f4a:	f7ff ff1d 	bl	8011d88 <check_fs>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d14b      	bne.n	8011ff4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8011f60:	e01f      	b.n	8011fa2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f6a:	011b      	lsls	r3, r3, #4
 8011f6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011f70:	4413      	add	r3, r2
 8011f72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	3304      	adds	r3, #4
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d006      	beq.n	8011f8c <find_volume+0x158>
 8011f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f80:	3308      	adds	r3, #8
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fc04 	bl	8010790 <ld_dword>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	e000      	b.n	8011f8e <find_volume+0x15a>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011f96:	440b      	add	r3, r1
 8011f98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8011fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fa4:	2b03      	cmp	r3, #3
 8011fa6:	d9dc      	bls.n	8011f62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011fa8:	2300      	movs	r3, #0
 8011faa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d002      	beq.n	8011fb8 <find_volume+0x184>
 8011fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fb4:	3b01      	subs	r3, #1
 8011fb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011fc0:	4413      	add	r3, r2
 8011fc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011fc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d005      	beq.n	8011fda <find_volume+0x1a6>
 8011fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011fd2:	f7ff fed9 	bl	8011d88 <check_fs>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	e000      	b.n	8011fdc <find_volume+0x1a8>
 8011fda:	2303      	movs	r3, #3
 8011fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d905      	bls.n	8011ff4 <find_volume+0x1c0>
 8011fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fea:	3301      	adds	r3, #1
 8011fec:	643b      	str	r3, [r7, #64]	; 0x40
 8011fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ff0:	2b03      	cmp	r3, #3
 8011ff2:	d9e1      	bls.n	8011fb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ff8:	2b04      	cmp	r3, #4
 8011ffa:	d101      	bne.n	8012000 <find_volume+0x1cc>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	e195      	b.n	801232c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012004:	2b01      	cmp	r3, #1
 8012006:	d901      	bls.n	801200c <find_volume+0x1d8>
 8012008:	230d      	movs	r3, #13
 801200a:	e18f      	b.n	801232c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	3338      	adds	r3, #56	; 0x38
 8012010:	330b      	adds	r3, #11
 8012012:	4618      	mov	r0, r3
 8012014:	f7fe fba4 	bl	8010760 <ld_word>
 8012018:	4603      	mov	r3, r0
 801201a:	461a      	mov	r2, r3
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	899b      	ldrh	r3, [r3, #12]
 8012020:	429a      	cmp	r2, r3
 8012022:	d001      	beq.n	8012028 <find_volume+0x1f4>
 8012024:	230d      	movs	r3, #13
 8012026:	e181      	b.n	801232c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	3338      	adds	r3, #56	; 0x38
 801202c:	3316      	adds	r3, #22
 801202e:	4618      	mov	r0, r3
 8012030:	f7fe fb96 	bl	8010760 <ld_word>
 8012034:	4603      	mov	r3, r0
 8012036:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <find_volume+0x218>
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	3338      	adds	r3, #56	; 0x38
 8012042:	3324      	adds	r3, #36	; 0x24
 8012044:	4618      	mov	r0, r3
 8012046:	f7fe fba3 	bl	8010790 <ld_dword>
 801204a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012050:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012054:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205e:	789b      	ldrb	r3, [r3, #2]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d005      	beq.n	8012070 <find_volume+0x23c>
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	789b      	ldrb	r3, [r3, #2]
 8012068:	2b02      	cmp	r3, #2
 801206a:	d001      	beq.n	8012070 <find_volume+0x23c>
 801206c:	230d      	movs	r3, #13
 801206e:	e15d      	b.n	801232c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012072:	789b      	ldrb	r3, [r3, #2]
 8012074:	461a      	mov	r2, r3
 8012076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012078:	fb02 f303 	mul.w	r3, r2, r3
 801207c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012084:	b29a      	uxth	r2, r3
 8012086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012088:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208c:	895b      	ldrh	r3, [r3, #10]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d008      	beq.n	80120a4 <find_volume+0x270>
 8012092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012094:	895b      	ldrh	r3, [r3, #10]
 8012096:	461a      	mov	r2, r3
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	895b      	ldrh	r3, [r3, #10]
 801209c:	3b01      	subs	r3, #1
 801209e:	4013      	ands	r3, r2
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <find_volume+0x274>
 80120a4:	230d      	movs	r3, #13
 80120a6:	e141      	b.n	801232c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	3338      	adds	r3, #56	; 0x38
 80120ac:	3311      	adds	r3, #17
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fb56 	bl	8010760 <ld_word>
 80120b4:	4603      	mov	r3, r0
 80120b6:	461a      	mov	r2, r3
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80120bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120be:	891b      	ldrh	r3, [r3, #8]
 80120c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120c2:	8992      	ldrh	r2, [r2, #12]
 80120c4:	0952      	lsrs	r2, r2, #5
 80120c6:	b292      	uxth	r2, r2
 80120c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80120cc:	fb02 f201 	mul.w	r2, r2, r1
 80120d0:	1a9b      	subs	r3, r3, r2
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d001      	beq.n	80120dc <find_volume+0x2a8>
 80120d8:	230d      	movs	r3, #13
 80120da:	e127      	b.n	801232c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	3338      	adds	r3, #56	; 0x38
 80120e0:	3313      	adds	r3, #19
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fe fb3c 	bl	8010760 <ld_word>
 80120e8:	4603      	mov	r3, r0
 80120ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80120ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d106      	bne.n	8012100 <find_volume+0x2cc>
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	3338      	adds	r3, #56	; 0x38
 80120f6:	3320      	adds	r3, #32
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fe fb49 	bl	8010790 <ld_dword>
 80120fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	3338      	adds	r3, #56	; 0x38
 8012104:	330e      	adds	r3, #14
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe fb2a 	bl	8010760 <ld_word>
 801210c:	4603      	mov	r3, r0
 801210e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012112:	2b00      	cmp	r3, #0
 8012114:	d104      	bne.n	8012120 <find_volume+0x2ec>
 8012116:	230d      	movs	r3, #13
 8012118:	e108      	b.n	801232c <find_volume+0x4f8>
 801211a:	bf00      	nop
 801211c:	2003d43c 	.word	0x2003d43c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012124:	4413      	add	r3, r2
 8012126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012128:	8911      	ldrh	r1, [r2, #8]
 801212a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801212c:	8992      	ldrh	r2, [r2, #12]
 801212e:	0952      	lsrs	r2, r2, #5
 8012130:	b292      	uxth	r2, r2
 8012132:	fbb1 f2f2 	udiv	r2, r1, r2
 8012136:	b292      	uxth	r2, r2
 8012138:	4413      	add	r3, r2
 801213a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801213c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012140:	429a      	cmp	r2, r3
 8012142:	d201      	bcs.n	8012148 <find_volume+0x314>
 8012144:	230d      	movs	r3, #13
 8012146:	e0f1      	b.n	801232c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	1ad3      	subs	r3, r2, r3
 801214e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012150:	8952      	ldrh	r2, [r2, #10]
 8012152:	fbb3 f3f2 	udiv	r3, r3, r2
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215a:	2b00      	cmp	r3, #0
 801215c:	d101      	bne.n	8012162 <find_volume+0x32e>
 801215e:	230d      	movs	r3, #13
 8012160:	e0e4      	b.n	801232c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012162:	2303      	movs	r3, #3
 8012164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801216e:	4293      	cmp	r3, r2
 8012170:	d802      	bhi.n	8012178 <find_volume+0x344>
 8012172:	2302      	movs	r3, #2
 8012174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801217e:	4293      	cmp	r3, r2
 8012180:	d802      	bhi.n	8012188 <find_volume+0x354>
 8012182:	2301      	movs	r3, #1
 8012184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	1c9a      	adds	r2, r3, #2
 801218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012194:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801219a:	441a      	add	r2, r3
 801219c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80121a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	441a      	add	r2, r3
 80121a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80121aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d11e      	bne.n	80121f0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80121b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b4:	3338      	adds	r3, #56	; 0x38
 80121b6:	332a      	adds	r3, #42	; 0x2a
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fe fad1 	bl	8010760 <ld_word>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d001      	beq.n	80121c8 <find_volume+0x394>
 80121c4:	230d      	movs	r3, #13
 80121c6:	e0b1      	b.n	801232c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80121c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ca:	891b      	ldrh	r3, [r3, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <find_volume+0x3a0>
 80121d0:	230d      	movs	r3, #13
 80121d2:	e0ab      	b.n	801232c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80121d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d6:	3338      	adds	r3, #56	; 0x38
 80121d8:	332c      	adds	r3, #44	; 0x2c
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fe fad8 	bl	8010790 <ld_dword>
 80121e0:	4602      	mov	r2, r0
 80121e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80121e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e8:	69db      	ldr	r3, [r3, #28]
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	647b      	str	r3, [r7, #68]	; 0x44
 80121ee:	e01f      	b.n	8012230 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	891b      	ldrh	r3, [r3, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <find_volume+0x3c8>
 80121f8:	230d      	movs	r3, #13
 80121fa:	e097      	b.n	801232c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80121fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012202:	441a      	add	r2, r3
 8012204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012206:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801220c:	2b02      	cmp	r3, #2
 801220e:	d103      	bne.n	8012218 <find_volume+0x3e4>
 8012210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012212:	69db      	ldr	r3, [r3, #28]
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	e00a      	b.n	801222e <find_volume+0x3fa>
 8012218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221a:	69da      	ldr	r2, [r3, #28]
 801221c:	4613      	mov	r3, r2
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	4413      	add	r3, r2
 8012222:	085a      	lsrs	r2, r3, #1
 8012224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012226:	69db      	ldr	r3, [r3, #28]
 8012228:	f003 0301 	and.w	r3, r3, #1
 801222c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801222e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012232:	6a1a      	ldr	r2, [r3, #32]
 8012234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012236:	899b      	ldrh	r3, [r3, #12]
 8012238:	4619      	mov	r1, r3
 801223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801223c:	440b      	add	r3, r1
 801223e:	3b01      	subs	r3, #1
 8012240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012242:	8989      	ldrh	r1, [r1, #12]
 8012244:	fbb3 f3f1 	udiv	r3, r3, r1
 8012248:	429a      	cmp	r2, r3
 801224a:	d201      	bcs.n	8012250 <find_volume+0x41c>
 801224c:	230d      	movs	r3, #13
 801224e:	e06d      	b.n	801232c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012252:	f04f 32ff 	mov.w	r2, #4294967295
 8012256:	615a      	str	r2, [r3, #20]
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	695a      	ldr	r2, [r3, #20]
 801225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012262:	2280      	movs	r2, #128	; 0x80
 8012264:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801226a:	2b03      	cmp	r3, #3
 801226c:	d149      	bne.n	8012302 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012270:	3338      	adds	r3, #56	; 0x38
 8012272:	3330      	adds	r3, #48	; 0x30
 8012274:	4618      	mov	r0, r3
 8012276:	f7fe fa73 	bl	8010760 <ld_word>
 801227a:	4603      	mov	r3, r0
 801227c:	2b01      	cmp	r3, #1
 801227e:	d140      	bne.n	8012302 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012282:	3301      	adds	r3, #1
 8012284:	4619      	mov	r1, r3
 8012286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012288:	f7fe fd1a 	bl	8010cc0 <move_window>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d137      	bne.n	8012302 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012294:	2200      	movs	r2, #0
 8012296:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229a:	3338      	adds	r3, #56	; 0x38
 801229c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fe fa5d 	bl	8010760 <ld_word>
 80122a6:	4603      	mov	r3, r0
 80122a8:	461a      	mov	r2, r3
 80122aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d127      	bne.n	8012302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80122b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b4:	3338      	adds	r3, #56	; 0x38
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7fe fa6a 	bl	8010790 <ld_dword>
 80122bc:	4602      	mov	r2, r0
 80122be:	4b1d      	ldr	r3, [pc, #116]	; (8012334 <find_volume+0x500>)
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d11e      	bne.n	8012302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80122c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c6:	3338      	adds	r3, #56	; 0x38
 80122c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7fe fa5f 	bl	8010790 <ld_dword>
 80122d2:	4602      	mov	r2, r0
 80122d4:	4b18      	ldr	r3, [pc, #96]	; (8012338 <find_volume+0x504>)
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d113      	bne.n	8012302 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	3338      	adds	r3, #56	; 0x38
 80122de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fe fa54 	bl	8010790 <ld_dword>
 80122e8:	4602      	mov	r2, r0
 80122ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	3338      	adds	r3, #56	; 0x38
 80122f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fe fa4a 	bl	8010790 <ld_dword>
 80122fc:	4602      	mov	r2, r0
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012300:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012304:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012308:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801230a:	4b0c      	ldr	r3, [pc, #48]	; (801233c <find_volume+0x508>)
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	3301      	adds	r3, #1
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b0a      	ldr	r3, [pc, #40]	; (801233c <find_volume+0x508>)
 8012314:	801a      	strh	r2, [r3, #0]
 8012316:	4b09      	ldr	r3, [pc, #36]	; (801233c <find_volume+0x508>)
 8012318:	881a      	ldrh	r2, [r3, #0]
 801231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012320:	2200      	movs	r2, #0
 8012322:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012326:	f7fe fc63 	bl	8010bf0 <clear_lock>
#endif
	return FR_OK;
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3758      	adds	r7, #88	; 0x58
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	41615252 	.word	0x41615252
 8012338:	61417272 	.word	0x61417272
 801233c:	2003d440 	.word	0x2003d440

08012340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801234a:	2309      	movs	r3, #9
 801234c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d01c      	beq.n	801238e <validate+0x4e>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d018      	beq.n	801238e <validate+0x4e>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d013      	beq.n	801238e <validate+0x4e>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	889a      	ldrh	r2, [r3, #4]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	88db      	ldrh	r3, [r3, #6]
 8012370:	429a      	cmp	r2, r3
 8012372:	d10c      	bne.n	801238e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	785b      	ldrb	r3, [r3, #1]
 801237a:	4618      	mov	r0, r3
 801237c:	f7fe f952 	bl	8010624 <disk_status>
 8012380:	4603      	mov	r3, r0
 8012382:	f003 0301 	and.w	r3, r3, #1
 8012386:	2b00      	cmp	r3, #0
 8012388:	d101      	bne.n	801238e <validate+0x4e>
			res = FR_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801238e:	7bfb      	ldrb	r3, [r7, #15]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d102      	bne.n	801239a <validate+0x5a>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	e000      	b.n	801239c <validate+0x5c>
 801239a:	2300      	movs	r3, #0
 801239c:	683a      	ldr	r2, [r7, #0]
 801239e:	6013      	str	r3, [r2, #0]
	return res;
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
	...

080123ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b088      	sub	sp, #32
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	4613      	mov	r3, r2
 80123b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80123be:	f107 0310 	add.w	r3, r7, #16
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7ff fc9b 	bl	8011cfe <get_ldnumber>
 80123c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	da01      	bge.n	80123d4 <f_mount+0x28>
 80123d0:	230b      	movs	r3, #11
 80123d2:	e02b      	b.n	801242c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80123d4:	4a17      	ldr	r2, [pc, #92]	; (8012434 <f_mount+0x88>)
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d005      	beq.n	80123f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80123e4:	69b8      	ldr	r0, [r7, #24]
 80123e6:	f7fe fc03 	bl	8010bf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	2200      	movs	r2, #0
 80123ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d002      	beq.n	80123fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	490d      	ldr	r1, [pc, #52]	; (8012434 <f_mount+0x88>)
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d002      	beq.n	8012412 <f_mount+0x66>
 801240c:	79fb      	ldrb	r3, [r7, #7]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d001      	beq.n	8012416 <f_mount+0x6a>
 8012412:	2300      	movs	r3, #0
 8012414:	e00a      	b.n	801242c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012416:	f107 010c 	add.w	r1, r7, #12
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	2200      	movs	r2, #0
 8012420:	4618      	mov	r0, r3
 8012422:	f7ff fd07 	bl	8011e34 <find_volume>
 8012426:	4603      	mov	r3, r0
 8012428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801242a:	7dfb      	ldrb	r3, [r7, #23]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3720      	adds	r7, #32
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	2003d43c 	.word	0x2003d43c

08012438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b098      	sub	sp, #96	; 0x60
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d101      	bne.n	8012450 <f_open+0x18>
 801244c:	2309      	movs	r3, #9
 801244e:	e1ba      	b.n	80127c6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012450:	79fb      	ldrb	r3, [r7, #7]
 8012452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012458:	79fa      	ldrb	r2, [r7, #7]
 801245a:	f107 0110 	add.w	r1, r7, #16
 801245e:	f107 0308 	add.w	r3, r7, #8
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff fce6 	bl	8011e34 <find_volume>
 8012468:	4603      	mov	r3, r0
 801246a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801246e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012472:	2b00      	cmp	r3, #0
 8012474:	f040 819e 	bne.w	80127b4 <f_open+0x37c>
		dj.obj.fs = fs;
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801247c:	68ba      	ldr	r2, [r7, #8]
 801247e:	f107 0314 	add.w	r3, r7, #20
 8012482:	4611      	mov	r1, r2
 8012484:	4618      	mov	r0, r3
 8012486:	f7ff fba5 	bl	8011bd4 <follow_path>
 801248a:	4603      	mov	r3, r0
 801248c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012494:	2b00      	cmp	r3, #0
 8012496:	d11a      	bne.n	80124ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801249c:	b25b      	sxtb	r3, r3
 801249e:	2b00      	cmp	r3, #0
 80124a0:	da03      	bge.n	80124aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80124a2:	2306      	movs	r3, #6
 80124a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124a8:	e011      	b.n	80124ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124aa:	79fb      	ldrb	r3, [r7, #7]
 80124ac:	f023 0301 	bic.w	r3, r3, #1
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bf14      	ite	ne
 80124b4:	2301      	movne	r3, #1
 80124b6:	2300      	moveq	r3, #0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	461a      	mov	r2, r3
 80124bc:	f107 0314 	add.w	r3, r7, #20
 80124c0:	4611      	mov	r1, r2
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fe fa4c 	bl	8010960 <chk_lock>
 80124c8:	4603      	mov	r3, r0
 80124ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80124ce:	79fb      	ldrb	r3, [r7, #7]
 80124d0:	f003 031c 	and.w	r3, r3, #28
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d07e      	beq.n	80125d6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80124d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d017      	beq.n	8012510 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80124e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124e4:	2b04      	cmp	r3, #4
 80124e6:	d10e      	bne.n	8012506 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80124e8:	f7fe fa96 	bl	8010a18 <enq_lock>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d006      	beq.n	8012500 <f_open+0xc8>
 80124f2:	f107 0314 	add.w	r3, r7, #20
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ff fa52 	bl	80119a0 <dir_register>
 80124fc:	4603      	mov	r3, r0
 80124fe:	e000      	b.n	8012502 <f_open+0xca>
 8012500:	2312      	movs	r3, #18
 8012502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012506:	79fb      	ldrb	r3, [r7, #7]
 8012508:	f043 0308 	orr.w	r3, r3, #8
 801250c:	71fb      	strb	r3, [r7, #7]
 801250e:	e010      	b.n	8012532 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012510:	7ebb      	ldrb	r3, [r7, #26]
 8012512:	f003 0311 	and.w	r3, r3, #17
 8012516:	2b00      	cmp	r3, #0
 8012518:	d003      	beq.n	8012522 <f_open+0xea>
					res = FR_DENIED;
 801251a:	2307      	movs	r3, #7
 801251c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012520:	e007      	b.n	8012532 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012522:	79fb      	ldrb	r3, [r7, #7]
 8012524:	f003 0304 	and.w	r3, r3, #4
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <f_open+0xfa>
 801252c:	2308      	movs	r3, #8
 801252e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012536:	2b00      	cmp	r3, #0
 8012538:	d167      	bne.n	801260a <f_open+0x1d2>
 801253a:	79fb      	ldrb	r3, [r7, #7]
 801253c:	f003 0308 	and.w	r3, r3, #8
 8012540:	2b00      	cmp	r3, #0
 8012542:	d062      	beq.n	801260a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012544:	4ba2      	ldr	r3, [pc, #648]	; (80127d0 <f_open+0x398>)
 8012546:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801254a:	330e      	adds	r3, #14
 801254c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801254e:	4618      	mov	r0, r3
 8012550:	f7fe f95c 	bl	801080c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012556:	3316      	adds	r3, #22
 8012558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801255a:	4618      	mov	r0, r3
 801255c:	f7fe f956 	bl	801080c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012562:	330b      	adds	r3, #11
 8012564:	2220      	movs	r2, #32
 8012566:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801256c:	4611      	mov	r1, r2
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff f925 	bl	80117be <ld_clust>
 8012574:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801257a:	2200      	movs	r2, #0
 801257c:	4618      	mov	r0, r3
 801257e:	f7ff f93d 	bl	80117fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012584:	331c      	adds	r3, #28
 8012586:	2100      	movs	r1, #0
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe f93f 	bl	801080c <st_dword>
					fs->wflag = 1;
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	2201      	movs	r2, #1
 8012592:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012596:	2b00      	cmp	r3, #0
 8012598:	d037      	beq.n	801260a <f_open+0x1d2>
						dw = fs->winsect;
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801259e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80125a0:	f107 0314 	add.w	r3, r7, #20
 80125a4:	2200      	movs	r2, #0
 80125a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7fe fe2d 	bl	8011208 <remove_chain>
 80125ae:	4603      	mov	r3, r0
 80125b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80125b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d126      	bne.n	801260a <f_open+0x1d2>
							res = move_window(fs, dw);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fe fb7d 	bl	8010cc0 <move_window>
 80125c6:	4603      	mov	r3, r0
 80125c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80125d0:	3a01      	subs	r2, #1
 80125d2:	611a      	str	r2, [r3, #16]
 80125d4:	e019      	b.n	801260a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80125d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d115      	bne.n	801260a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80125de:	7ebb      	ldrb	r3, [r7, #26]
 80125e0:	f003 0310 	and.w	r3, r3, #16
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d003      	beq.n	80125f0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80125e8:	2304      	movs	r3, #4
 80125ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80125ee:	e00c      	b.n	801260a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80125f0:	79fb      	ldrb	r3, [r7, #7]
 80125f2:	f003 0302 	and.w	r3, r3, #2
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d007      	beq.n	801260a <f_open+0x1d2>
 80125fa:	7ebb      	ldrb	r3, [r7, #26]
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b00      	cmp	r3, #0
 8012602:	d002      	beq.n	801260a <f_open+0x1d2>
						res = FR_DENIED;
 8012604:	2307      	movs	r3, #7
 8012606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801260a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801260e:	2b00      	cmp	r3, #0
 8012610:	d128      	bne.n	8012664 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012612:	79fb      	ldrb	r3, [r7, #7]
 8012614:	f003 0308 	and.w	r3, r3, #8
 8012618:	2b00      	cmp	r3, #0
 801261a:	d003      	beq.n	8012624 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801261c:	79fb      	ldrb	r3, [r7, #7]
 801261e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012622:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801262c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012632:	79fb      	ldrb	r3, [r7, #7]
 8012634:	f023 0301 	bic.w	r3, r3, #1
 8012638:	2b00      	cmp	r3, #0
 801263a:	bf14      	ite	ne
 801263c:	2301      	movne	r3, #1
 801263e:	2300      	moveq	r3, #0
 8012640:	b2db      	uxtb	r3, r3
 8012642:	461a      	mov	r2, r3
 8012644:	f107 0314 	add.w	r3, r7, #20
 8012648:	4611      	mov	r1, r2
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe fa06 	bl	8010a5c <inc_lock>
 8012650:	4602      	mov	r2, r0
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <f_open+0x22c>
 801265e:	2302      	movs	r3, #2
 8012660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012668:	2b00      	cmp	r3, #0
 801266a:	f040 80a3 	bne.w	80127b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff f8a2 	bl	80117be <ld_clust>
 801267a:	4602      	mov	r2, r0
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012682:	331c      	adds	r3, #28
 8012684:	4618      	mov	r0, r3
 8012686:	f7fe f883 	bl	8010790 <ld_dword>
 801268a:	4602      	mov	r2, r0
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2200      	movs	r2, #0
 8012694:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012696:	693a      	ldr	r2, [r7, #16]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	88da      	ldrh	r2, [r3, #6]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	79fa      	ldrb	r2, [r7, #7]
 80126a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2200      	movs	r2, #0
 80126ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	3330      	adds	r3, #48	; 0x30
 80126c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80126c4:	2100      	movs	r1, #0
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fe f8ed 	bl	80108a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80126cc:	79fb      	ldrb	r3, [r7, #7]
 80126ce:	f003 0320 	and.w	r3, r3, #32
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d06e      	beq.n	80127b4 <f_open+0x37c>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d06a      	beq.n	80127b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	68da      	ldr	r2, [r3, #12]
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	895b      	ldrh	r3, [r3, #10]
 80126ea:	461a      	mov	r2, r3
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	899b      	ldrh	r3, [r3, #12]
 80126f0:	fb03 f302 	mul.w	r3, r3, r2
 80126f4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	657b      	str	r3, [r7, #84]	; 0x54
 8012702:	e016      	b.n	8012732 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012708:	4618      	mov	r0, r3
 801270a:	f7fe fb96 	bl	8010e3a <get_fat>
 801270e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012712:	2b01      	cmp	r3, #1
 8012714:	d802      	bhi.n	801271c <f_open+0x2e4>
 8012716:	2302      	movs	r3, #2
 8012718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801271c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012722:	d102      	bne.n	801272a <f_open+0x2f2>
 8012724:	2301      	movs	r3, #1
 8012726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801272a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801272c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801272e:	1ad3      	subs	r3, r2, r3
 8012730:	657b      	str	r3, [r7, #84]	; 0x54
 8012732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012736:	2b00      	cmp	r3, #0
 8012738:	d103      	bne.n	8012742 <f_open+0x30a>
 801273a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801273c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801273e:	429a      	cmp	r2, r3
 8012740:	d8e0      	bhi.n	8012704 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012746:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801274c:	2b00      	cmp	r3, #0
 801274e:	d131      	bne.n	80127b4 <f_open+0x37c>
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	899b      	ldrh	r3, [r3, #12]
 8012754:	461a      	mov	r2, r3
 8012756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012758:	fbb3 f1f2 	udiv	r1, r3, r2
 801275c:	fb02 f201 	mul.w	r2, r2, r1
 8012760:	1a9b      	subs	r3, r3, r2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d026      	beq.n	80127b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe fb46 	bl	8010dfc <clust2sect>
 8012770:	6478      	str	r0, [r7, #68]	; 0x44
 8012772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012774:	2b00      	cmp	r3, #0
 8012776:	d103      	bne.n	8012780 <f_open+0x348>
						res = FR_INT_ERR;
 8012778:	2302      	movs	r3, #2
 801277a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801277e:	e019      	b.n	80127b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	899b      	ldrh	r3, [r3, #12]
 8012784:	461a      	mov	r2, r3
 8012786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012788:	fbb3 f2f2 	udiv	r2, r3, r2
 801278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801278e:	441a      	add	r2, r3
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	7858      	ldrb	r0, [r3, #1]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6a1a      	ldr	r2, [r3, #32]
 80127a2:	2301      	movs	r3, #1
 80127a4:	f7fd ff7e 	bl	80106a4 <disk_read>
 80127a8:	4603      	mov	r3, r0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d002      	beq.n	80127b4 <f_open+0x37c>
 80127ae:	2301      	movs	r3, #1
 80127b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80127b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d002      	beq.n	80127c2 <f_open+0x38a>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2200      	movs	r2, #0
 80127c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80127c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3760      	adds	r7, #96	; 0x60
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	274a0000 	.word	0x274a0000

080127d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b08e      	sub	sp, #56	; 0x38
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	607a      	str	r2, [r7, #4]
 80127e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f107 0214 	add.w	r2, r7, #20
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7ff fda3 	bl	8012340 <validate>
 80127fa:	4603      	mov	r3, r0
 80127fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012804:	2b00      	cmp	r3, #0
 8012806:	d107      	bne.n	8012818 <f_read+0x44>
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	7d5b      	ldrb	r3, [r3, #21]
 801280c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <f_read+0x4a>
 8012818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801281c:	e135      	b.n	8012a8a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	7d1b      	ldrb	r3, [r3, #20]
 8012822:	f003 0301 	and.w	r3, r3, #1
 8012826:	2b00      	cmp	r3, #0
 8012828:	d101      	bne.n	801282e <f_read+0x5a>
 801282a:	2307      	movs	r3, #7
 801282c:	e12d      	b.n	8012a8a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	68da      	ldr	r2, [r3, #12]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	429a      	cmp	r2, r3
 8012840:	f240 811e 	bls.w	8012a80 <f_read+0x2ac>
 8012844:	6a3b      	ldr	r3, [r7, #32]
 8012846:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012848:	e11a      	b.n	8012a80 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	8992      	ldrh	r2, [r2, #12]
 8012852:	fbb3 f1f2 	udiv	r1, r3, r2
 8012856:	fb02 f201 	mul.w	r2, r2, r1
 801285a:	1a9b      	subs	r3, r3, r2
 801285c:	2b00      	cmp	r3, #0
 801285e:	f040 80d5 	bne.w	8012a0c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	697a      	ldr	r2, [r7, #20]
 8012868:	8992      	ldrh	r2, [r2, #12]
 801286a:	fbb3 f3f2 	udiv	r3, r3, r2
 801286e:	697a      	ldr	r2, [r7, #20]
 8012870:	8952      	ldrh	r2, [r2, #10]
 8012872:	3a01      	subs	r2, #1
 8012874:	4013      	ands	r3, r2
 8012876:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d12f      	bne.n	80128de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	699b      	ldr	r3, [r3, #24]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d103      	bne.n	801288e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	633b      	str	r3, [r7, #48]	; 0x30
 801288c:	e013      	b.n	80128b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012892:	2b00      	cmp	r3, #0
 8012894:	d007      	beq.n	80128a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	699b      	ldr	r3, [r3, #24]
 801289a:	4619      	mov	r1, r3
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f7fe fdb0 	bl	8011402 <clmt_clust>
 80128a2:	6338      	str	r0, [r7, #48]	; 0x30
 80128a4:	e007      	b.n	80128b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	69db      	ldr	r3, [r3, #28]
 80128ac:	4619      	mov	r1, r3
 80128ae:	4610      	mov	r0, r2
 80128b0:	f7fe fac3 	bl	8010e3a <get_fat>
 80128b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d804      	bhi.n	80128c6 <f_read+0xf2>
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2202      	movs	r2, #2
 80128c0:	755a      	strb	r2, [r3, #21]
 80128c2:	2302      	movs	r3, #2
 80128c4:	e0e1      	b.n	8012a8a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80128c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128cc:	d104      	bne.n	80128d8 <f_read+0x104>
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2201      	movs	r2, #1
 80128d2:	755a      	strb	r2, [r3, #21]
 80128d4:	2301      	movs	r3, #1
 80128d6:	e0d8      	b.n	8012a8a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	69db      	ldr	r3, [r3, #28]
 80128e4:	4619      	mov	r1, r3
 80128e6:	4610      	mov	r0, r2
 80128e8:	f7fe fa88 	bl	8010dfc <clust2sect>
 80128ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d104      	bne.n	80128fe <f_read+0x12a>
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2202      	movs	r2, #2
 80128f8:	755a      	strb	r2, [r3, #21]
 80128fa:	2302      	movs	r3, #2
 80128fc:	e0c5      	b.n	8012a8a <f_read+0x2b6>
			sect += csect;
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	4413      	add	r3, r2
 8012904:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	899b      	ldrh	r3, [r3, #12]
 801290a:	461a      	mov	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012912:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012916:	2b00      	cmp	r3, #0
 8012918:	d041      	beq.n	801299e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801291a:	69fa      	ldr	r2, [r7, #28]
 801291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291e:	4413      	add	r3, r2
 8012920:	697a      	ldr	r2, [r7, #20]
 8012922:	8952      	ldrh	r2, [r2, #10]
 8012924:	4293      	cmp	r3, r2
 8012926:	d905      	bls.n	8012934 <f_read+0x160>
					cc = fs->csize - csect;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	895b      	ldrh	r3, [r3, #10]
 801292c:	461a      	mov	r2, r3
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	7858      	ldrb	r0, [r3, #1]
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	69ba      	ldr	r2, [r7, #24]
 801293c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801293e:	f7fd feb1 	bl	80106a4 <disk_read>
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d004      	beq.n	8012952 <f_read+0x17e>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2201      	movs	r2, #1
 801294c:	755a      	strb	r2, [r3, #21]
 801294e:	2301      	movs	r3, #1
 8012950:	e09b      	b.n	8012a8a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	7d1b      	ldrb	r3, [r3, #20]
 8012956:	b25b      	sxtb	r3, r3
 8012958:	2b00      	cmp	r3, #0
 801295a:	da18      	bge.n	801298e <f_read+0x1ba>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	6a1a      	ldr	r2, [r3, #32]
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	1ad3      	subs	r3, r2, r3
 8012964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012966:	429a      	cmp	r2, r3
 8012968:	d911      	bls.n	801298e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	6a1a      	ldr	r2, [r3, #32]
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	1ad3      	subs	r3, r2, r3
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	8992      	ldrh	r2, [r2, #12]
 8012976:	fb02 f303 	mul.w	r3, r2, r3
 801297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297c:	18d0      	adds	r0, r2, r3
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	899b      	ldrh	r3, [r3, #12]
 8012988:	461a      	mov	r2, r3
 801298a:	f7fd ff6b 	bl	8010864 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	899b      	ldrh	r3, [r3, #12]
 8012992:	461a      	mov	r2, r3
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	fb02 f303 	mul.w	r3, r2, r3
 801299a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801299c:	e05c      	b.n	8012a58 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6a1b      	ldr	r3, [r3, #32]
 80129a2:	69ba      	ldr	r2, [r7, #24]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d02e      	beq.n	8012a06 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	7d1b      	ldrb	r3, [r3, #20]
 80129ac:	b25b      	sxtb	r3, r3
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	da18      	bge.n	80129e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	7858      	ldrb	r0, [r3, #1]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	6a1a      	ldr	r2, [r3, #32]
 80129c0:	2301      	movs	r3, #1
 80129c2:	f7fd fe8f 	bl	80106e4 <disk_write>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d004      	beq.n	80129d6 <f_read+0x202>
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2201      	movs	r2, #1
 80129d0:	755a      	strb	r2, [r3, #21]
 80129d2:	2301      	movs	r3, #1
 80129d4:	e059      	b.n	8012a8a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	7d1b      	ldrb	r3, [r3, #20]
 80129da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129de:	b2da      	uxtb	r2, r3
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	7858      	ldrb	r0, [r3, #1]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129ee:	2301      	movs	r3, #1
 80129f0:	69ba      	ldr	r2, [r7, #24]
 80129f2:	f7fd fe57 	bl	80106a4 <disk_read>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d004      	beq.n	8012a06 <f_read+0x232>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2201      	movs	r2, #1
 8012a00:	755a      	strb	r2, [r3, #21]
 8012a02:	2301      	movs	r3, #1
 8012a04:	e041      	b.n	8012a8a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	69ba      	ldr	r2, [r7, #24]
 8012a0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	4618      	mov	r0, r3
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	697a      	ldr	r2, [r7, #20]
 8012a18:	8992      	ldrh	r2, [r2, #12]
 8012a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a1e:	fb02 f201 	mul.w	r2, r2, r1
 8012a22:	1a9b      	subs	r3, r3, r2
 8012a24:	1ac3      	subs	r3, r0, r3
 8012a26:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d901      	bls.n	8012a34 <f_read+0x260>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	699b      	ldr	r3, [r3, #24]
 8012a3e:	697a      	ldr	r2, [r7, #20]
 8012a40:	8992      	ldrh	r2, [r2, #12]
 8012a42:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a46:	fb02 f200 	mul.w	r2, r2, r0
 8012a4a:	1a9b      	subs	r3, r3, r2
 8012a4c:	440b      	add	r3, r1
 8012a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a50:	4619      	mov	r1, r3
 8012a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a54:	f7fd ff06 	bl	8010864 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5c:	4413      	add	r3, r2
 8012a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	699a      	ldr	r2, [r3, #24]
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	441a      	add	r2, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	619a      	str	r2, [r3, #24]
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	441a      	add	r2, r3
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	601a      	str	r2, [r3, #0]
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7c:	1ad3      	subs	r3, r2, r3
 8012a7e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f47f aee1 	bne.w	801284a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012a88:	2300      	movs	r3, #0
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3738      	adds	r7, #56	; 0x38
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b08c      	sub	sp, #48	; 0x30
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	60f8      	str	r0, [r7, #12]
 8012a9a:	60b9      	str	r1, [r7, #8]
 8012a9c:	607a      	str	r2, [r7, #4]
 8012a9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f107 0210 	add.w	r2, r7, #16
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7ff fc44 	bl	8012340 <validate>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d107      	bne.n	8012ad6 <f_write+0x44>
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	7d5b      	ldrb	r3, [r3, #21]
 8012aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d002      	beq.n	8012adc <f_write+0x4a>
 8012ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ada:	e16a      	b.n	8012db2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	7d1b      	ldrb	r3, [r3, #20]
 8012ae0:	f003 0302 	and.w	r3, r3, #2
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <f_write+0x5a>
 8012ae8:	2307      	movs	r3, #7
 8012aea:	e162      	b.n	8012db2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	699a      	ldr	r2, [r3, #24]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	441a      	add	r2, r3
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	699b      	ldr	r3, [r3, #24]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	f080 814c 	bcs.w	8012d96 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	699b      	ldr	r3, [r3, #24]
 8012b02:	43db      	mvns	r3, r3
 8012b04:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012b06:	e146      	b.n	8012d96 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	699b      	ldr	r3, [r3, #24]
 8012b0c:	693a      	ldr	r2, [r7, #16]
 8012b0e:	8992      	ldrh	r2, [r2, #12]
 8012b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b14:	fb02 f201 	mul.w	r2, r2, r1
 8012b18:	1a9b      	subs	r3, r3, r2
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f040 80f1 	bne.w	8012d02 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	699b      	ldr	r3, [r3, #24]
 8012b24:	693a      	ldr	r2, [r7, #16]
 8012b26:	8992      	ldrh	r2, [r2, #12]
 8012b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	8952      	ldrh	r2, [r2, #10]
 8012b30:	3a01      	subs	r2, #1
 8012b32:	4013      	ands	r3, r2
 8012b34:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d143      	bne.n	8012bc4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	699b      	ldr	r3, [r3, #24]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d10c      	bne.n	8012b5e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d11a      	bne.n	8012b86 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2100      	movs	r1, #0
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fe fbbc 	bl	80112d2 <create_chain>
 8012b5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8012b5c:	e013      	b.n	8012b86 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d007      	beq.n	8012b76 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	699b      	ldr	r3, [r3, #24]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f7fe fc48 	bl	8011402 <clmt_clust>
 8012b72:	62b8      	str	r0, [r7, #40]	; 0x28
 8012b74:	e007      	b.n	8012b86 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012b76:	68fa      	ldr	r2, [r7, #12]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	69db      	ldr	r3, [r3, #28]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	4610      	mov	r0, r2
 8012b80:	f7fe fba7 	bl	80112d2 <create_chain>
 8012b84:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8109 	beq.w	8012da0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d104      	bne.n	8012b9e <f_write+0x10c>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2202      	movs	r2, #2
 8012b98:	755a      	strb	r2, [r3, #21]
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	e109      	b.n	8012db2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba4:	d104      	bne.n	8012bb0 <f_write+0x11e>
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	755a      	strb	r2, [r3, #21]
 8012bac:	2301      	movs	r3, #1
 8012bae:	e100      	b.n	8012db2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bb4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d102      	bne.n	8012bc4 <f_write+0x132>
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bc2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	7d1b      	ldrb	r3, [r3, #20]
 8012bc8:	b25b      	sxtb	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	da18      	bge.n	8012c00 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	7858      	ldrb	r0, [r3, #1]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	6a1a      	ldr	r2, [r3, #32]
 8012bdc:	2301      	movs	r3, #1
 8012bde:	f7fd fd81 	bl	80106e4 <disk_write>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d004      	beq.n	8012bf2 <f_write+0x160>
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2201      	movs	r2, #1
 8012bec:	755a      	strb	r2, [r3, #21]
 8012bee:	2301      	movs	r3, #1
 8012bf0:	e0df      	b.n	8012db2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	7d1b      	ldrb	r3, [r3, #20]
 8012bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012c00:	693a      	ldr	r2, [r7, #16]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	69db      	ldr	r3, [r3, #28]
 8012c06:	4619      	mov	r1, r3
 8012c08:	4610      	mov	r0, r2
 8012c0a:	f7fe f8f7 	bl	8010dfc <clust2sect>
 8012c0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d104      	bne.n	8012c20 <f_write+0x18e>
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2202      	movs	r2, #2
 8012c1a:	755a      	strb	r2, [r3, #21]
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	e0c8      	b.n	8012db2 <f_write+0x320>
			sect += csect;
 8012c20:	697a      	ldr	r2, [r7, #20]
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	4413      	add	r3, r2
 8012c26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	899b      	ldrh	r3, [r3, #12]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012c36:	6a3b      	ldr	r3, [r7, #32]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d043      	beq.n	8012cc4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012c3c:	69ba      	ldr	r2, [r7, #24]
 8012c3e:	6a3b      	ldr	r3, [r7, #32]
 8012c40:	4413      	add	r3, r2
 8012c42:	693a      	ldr	r2, [r7, #16]
 8012c44:	8952      	ldrh	r2, [r2, #10]
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d905      	bls.n	8012c56 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	895b      	ldrh	r3, [r3, #10]
 8012c4e:	461a      	mov	r2, r3
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	7858      	ldrb	r0, [r3, #1]
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	697a      	ldr	r2, [r7, #20]
 8012c5e:	69f9      	ldr	r1, [r7, #28]
 8012c60:	f7fd fd40 	bl	80106e4 <disk_write>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d004      	beq.n	8012c74 <f_write+0x1e2>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	755a      	strb	r2, [r3, #21]
 8012c70:	2301      	movs	r3, #1
 8012c72:	e09e      	b.n	8012db2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6a1a      	ldr	r2, [r3, #32]
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	6a3a      	ldr	r2, [r7, #32]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d918      	bls.n	8012cb4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6a1a      	ldr	r2, [r3, #32]
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	693a      	ldr	r2, [r7, #16]
 8012c92:	8992      	ldrh	r2, [r2, #12]
 8012c94:	fb02 f303 	mul.w	r3, r2, r3
 8012c98:	69fa      	ldr	r2, [r7, #28]
 8012c9a:	18d1      	adds	r1, r2, r3
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	899b      	ldrh	r3, [r3, #12]
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	f7fd fddf 	bl	8010864 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	7d1b      	ldrb	r3, [r3, #20]
 8012caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cae:	b2da      	uxtb	r2, r3
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	899b      	ldrh	r3, [r3, #12]
 8012cb8:	461a      	mov	r2, r3
 8012cba:	6a3b      	ldr	r3, [r7, #32]
 8012cbc:	fb02 f303 	mul.w	r3, r2, r3
 8012cc0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012cc2:	e04b      	b.n	8012d5c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	6a1b      	ldr	r3, [r3, #32]
 8012cc8:	697a      	ldr	r2, [r7, #20]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d016      	beq.n	8012cfc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	699a      	ldr	r2, [r3, #24]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d210      	bcs.n	8012cfc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	7858      	ldrb	r0, [r3, #1]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	697a      	ldr	r2, [r7, #20]
 8012ce8:	f7fd fcdc 	bl	80106a4 <disk_read>
 8012cec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d004      	beq.n	8012cfc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	755a      	strb	r2, [r3, #21]
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e05a      	b.n	8012db2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	899b      	ldrh	r3, [r3, #12]
 8012d06:	4618      	mov	r0, r3
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	699b      	ldr	r3, [r3, #24]
 8012d0c:	693a      	ldr	r2, [r7, #16]
 8012d0e:	8992      	ldrh	r2, [r2, #12]
 8012d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d14:	fb02 f201 	mul.w	r2, r2, r1
 8012d18:	1a9b      	subs	r3, r3, r2
 8012d1a:	1ac3      	subs	r3, r0, r3
 8012d1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d901      	bls.n	8012d2a <f_write+0x298>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	699b      	ldr	r3, [r3, #24]
 8012d34:	693a      	ldr	r2, [r7, #16]
 8012d36:	8992      	ldrh	r2, [r2, #12]
 8012d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8012d3c:	fb02 f200 	mul.w	r2, r2, r0
 8012d40:	1a9b      	subs	r3, r3, r2
 8012d42:	440b      	add	r3, r1
 8012d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d46:	69f9      	ldr	r1, [r7, #28]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7fd fd8b 	bl	8010864 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	7d1b      	ldrb	r3, [r3, #20]
 8012d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012d56:	b2da      	uxtb	r2, r3
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012d5c:	69fa      	ldr	r2, [r7, #28]
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	4413      	add	r3, r2
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	699a      	ldr	r2, [r3, #24]
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	441a      	add	r2, r3
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	619a      	str	r2, [r3, #24]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	68da      	ldr	r2, [r3, #12]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	699b      	ldr	r3, [r3, #24]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	bf38      	it	cc
 8012d7c:	461a      	movcc	r2, r3
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	60da      	str	r2, [r3, #12]
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	441a      	add	r2, r3
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d92:	1ad3      	subs	r3, r2, r3
 8012d94:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f47f aeb5 	bne.w	8012b08 <f_write+0x76>
 8012d9e:	e000      	b.n	8012da2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012da0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	7d1b      	ldrb	r3, [r3, #20]
 8012da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012daa:	b2da      	uxtb	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3730      	adds	r7, #48	; 0x30
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b086      	sub	sp, #24
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f107 0208 	add.w	r2, r7, #8
 8012dca:	4611      	mov	r1, r2
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff fab7 	bl	8012340 <validate>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d167      	bne.n	8012eac <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	7d1b      	ldrb	r3, [r3, #20]
 8012de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d061      	beq.n	8012eac <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	7d1b      	ldrb	r3, [r3, #20]
 8012dec:	b25b      	sxtb	r3, r3
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	da15      	bge.n	8012e1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	7858      	ldrb	r0, [r3, #1]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6a1a      	ldr	r2, [r3, #32]
 8012e00:	2301      	movs	r3, #1
 8012e02:	f7fd fc6f 	bl	80106e4 <disk_write>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d001      	beq.n	8012e10 <f_sync+0x54>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e04e      	b.n	8012eae <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e18:	b2da      	uxtb	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012e1e:	4b26      	ldr	r3, [pc, #152]	; (8012eb8 <f_sync+0xfc>)
 8012e20:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e28:	4619      	mov	r1, r3
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	f7fd ff48 	bl	8010cc0 <move_window>
 8012e30:	4603      	mov	r3, r0
 8012e32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012e34:	7dfb      	ldrb	r3, [r7, #23]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d138      	bne.n	8012eac <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e3e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	330b      	adds	r3, #11
 8012e44:	781a      	ldrb	r2, [r3, #0]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	330b      	adds	r3, #11
 8012e4a:	f042 0220 	orr.w	r2, r2, #32
 8012e4e:	b2d2      	uxtb	r2, r2
 8012e50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6818      	ldr	r0, [r3, #0]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	689b      	ldr	r3, [r3, #8]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	68f9      	ldr	r1, [r7, #12]
 8012e5e:	f7fe fccd 	bl	80117fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f103 021c 	add.w	r2, r3, #28
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	4610      	mov	r0, r2
 8012e70:	f7fd fccc 	bl	801080c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	3316      	adds	r3, #22
 8012e78:	6939      	ldr	r1, [r7, #16]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fd fcc6 	bl	801080c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	3312      	adds	r3, #18
 8012e84:	2100      	movs	r1, #0
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fd fca5 	bl	80107d6 <st_word>
					fs->wflag = 1;
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7fd ff41 	bl	8010d1c <sync_fs>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	7d1b      	ldrb	r3, [r3, #20]
 8012ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ea6:	b2da      	uxtb	r2, r3
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3718      	adds	r7, #24
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	274a0000 	.word	0x274a0000

08012ebc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ff ff79 	bl	8012dbc <f_sync>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d118      	bne.n	8012f06 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f107 0208 	add.w	r2, r7, #8
 8012eda:	4611      	mov	r1, r2
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ff fa2f 	bl	8012340 <validate>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012ee6:	7bfb      	ldrb	r3, [r7, #15]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10c      	bne.n	8012f06 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	691b      	ldr	r3, [r3, #16]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7fd fe41 	bl	8010b78 <dec_lock>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012efa:	7bfb      	ldrb	r3, [r7, #15]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d102      	bne.n	8012f06 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3710      	adds	r7, #16
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012f10:	b590      	push	{r4, r7, lr}
 8012f12:	b091      	sub	sp, #68	; 0x44
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012f18:	f107 0108 	add.w	r1, r7, #8
 8012f1c:	1d3b      	adds	r3, r7, #4
 8012f1e:	2200      	movs	r2, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe ff87 	bl	8011e34 <find_volume>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012f2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d131      	bne.n	8012f98 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	f107 030c 	add.w	r3, r7, #12
 8012f3e:	4611      	mov	r1, r2
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe fe47 	bl	8011bd4 <follow_path>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d11a      	bne.n	8012f8a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012f54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012f58:	b25b      	sxtb	r3, r3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	da03      	bge.n	8012f66 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	697a      	ldr	r2, [r7, #20]
 8012f62:	619a      	str	r2, [r3, #24]
 8012f64:	e011      	b.n	8012f8a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012f66:	7cbb      	ldrb	r3, [r7, #18]
 8012f68:	f003 0310 	and.w	r3, r3, #16
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d009      	beq.n	8012f84 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f74:	68bc      	ldr	r4, [r7, #8]
 8012f76:	4611      	mov	r1, r2
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fc20 	bl	80117be <ld_clust>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	61a3      	str	r3, [r4, #24]
 8012f82:	e002      	b.n	8012f8a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012f84:	2305      	movs	r3, #5
 8012f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d102      	bne.n	8012f98 <f_chdir+0x88>
 8012f92:	2305      	movs	r3, #5
 8012f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012f98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3744      	adds	r7, #68	; 0x44
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd90      	pop	{r4, r7, pc}

08012fa4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b090      	sub	sp, #64	; 0x40
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f107 0208 	add.w	r2, r7, #8
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff f9c2 	bl	8012340 <validate>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d103      	bne.n	8012fd2 <f_lseek+0x2e>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	7d5b      	ldrb	r3, [r3, #21]
 8012fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <f_lseek+0x3c>
 8012fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fde:	e201      	b.n	80133e4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	f000 80d9 	beq.w	801319c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ff0:	d15a      	bne.n	80130a8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	1d1a      	adds	r2, r3, #4
 8012ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	617b      	str	r3, [r7, #20]
 8013002:	2302      	movs	r3, #2
 8013004:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	689b      	ldr	r3, [r3, #8]
 801300a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	2b00      	cmp	r3, #0
 8013010:	d03a      	beq.n	8013088 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013014:	613b      	str	r3, [r7, #16]
 8013016:	2300      	movs	r3, #0
 8013018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301c:	3302      	adds	r3, #2
 801301e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013026:	3301      	adds	r3, #1
 8013028:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801302e:	4618      	mov	r0, r3
 8013030:	f7fd ff03 	bl	8010e3a <get_fat>
 8013034:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013038:	2b01      	cmp	r3, #1
 801303a:	d804      	bhi.n	8013046 <f_lseek+0xa2>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2202      	movs	r2, #2
 8013040:	755a      	strb	r2, [r3, #21]
 8013042:	2302      	movs	r3, #2
 8013044:	e1ce      	b.n	80133e4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801304c:	d104      	bne.n	8013058 <f_lseek+0xb4>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	755a      	strb	r2, [r3, #21]
 8013054:	2301      	movs	r3, #1
 8013056:	e1c5      	b.n	80133e4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	3301      	adds	r3, #1
 801305c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801305e:	429a      	cmp	r2, r3
 8013060:	d0de      	beq.n	8013020 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	429a      	cmp	r2, r3
 8013068:	d809      	bhi.n	801307e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306c:	1d1a      	adds	r2, r3, #4
 801306e:	627a      	str	r2, [r7, #36]	; 0x24
 8013070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013072:	601a      	str	r2, [r3, #0]
 8013074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013076:	1d1a      	adds	r2, r3, #4
 8013078:	627a      	str	r2, [r7, #36]	; 0x24
 801307a:	693a      	ldr	r2, [r7, #16]
 801307c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	69db      	ldr	r3, [r3, #28]
 8013082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013084:	429a      	cmp	r2, r3
 8013086:	d3c4      	bcc.n	8013012 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801308c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801308e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	429a      	cmp	r2, r3
 8013096:	d803      	bhi.n	80130a0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	2200      	movs	r2, #0
 801309c:	601a      	str	r2, [r3, #0]
 801309e:	e19f      	b.n	80133e0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80130a0:	2311      	movs	r3, #17
 80130a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80130a6:	e19b      	b.n	80133e0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d902      	bls.n	80130b8 <f_lseek+0x114>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f000 818d 	beq.w	80133e0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	4619      	mov	r1, r3
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7fe f998 	bl	8011402 <clmt_clust>
 80130d2:	4602      	mov	r2, r0
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80130d8:	68ba      	ldr	r2, [r7, #8]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	69db      	ldr	r3, [r3, #28]
 80130de:	4619      	mov	r1, r3
 80130e0:	4610      	mov	r0, r2
 80130e2:	f7fd fe8b 	bl	8010dfc <clust2sect>
 80130e6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d104      	bne.n	80130f8 <f_lseek+0x154>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2202      	movs	r2, #2
 80130f2:	755a      	strb	r2, [r3, #21]
 80130f4:	2302      	movs	r3, #2
 80130f6:	e175      	b.n	80133e4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	3b01      	subs	r3, #1
 80130fc:	68ba      	ldr	r2, [r7, #8]
 80130fe:	8992      	ldrh	r2, [r2, #12]
 8013100:	fbb3 f3f2 	udiv	r3, r3, r2
 8013104:	68ba      	ldr	r2, [r7, #8]
 8013106:	8952      	ldrh	r2, [r2, #10]
 8013108:	3a01      	subs	r2, #1
 801310a:	4013      	ands	r3, r2
 801310c:	69ba      	ldr	r2, [r7, #24]
 801310e:	4413      	add	r3, r2
 8013110:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	699b      	ldr	r3, [r3, #24]
 8013116:	68ba      	ldr	r2, [r7, #8]
 8013118:	8992      	ldrh	r2, [r2, #12]
 801311a:	fbb3 f1f2 	udiv	r1, r3, r2
 801311e:	fb02 f201 	mul.w	r2, r2, r1
 8013122:	1a9b      	subs	r3, r3, r2
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 815b 	beq.w	80133e0 <f_lseek+0x43c>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a1b      	ldr	r3, [r3, #32]
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	429a      	cmp	r2, r3
 8013132:	f000 8155 	beq.w	80133e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	7d1b      	ldrb	r3, [r3, #20]
 801313a:	b25b      	sxtb	r3, r3
 801313c:	2b00      	cmp	r3, #0
 801313e:	da18      	bge.n	8013172 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	7858      	ldrb	r0, [r3, #1]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6a1a      	ldr	r2, [r3, #32]
 801314e:	2301      	movs	r3, #1
 8013150:	f7fd fac8 	bl	80106e4 <disk_write>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d004      	beq.n	8013164 <f_lseek+0x1c0>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2201      	movs	r2, #1
 801315e:	755a      	strb	r2, [r3, #21]
 8013160:	2301      	movs	r3, #1
 8013162:	e13f      	b.n	80133e4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	7d1b      	ldrb	r3, [r3, #20]
 8013168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801316c:	b2da      	uxtb	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	7858      	ldrb	r0, [r3, #1]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801317c:	2301      	movs	r3, #1
 801317e:	69ba      	ldr	r2, [r7, #24]
 8013180:	f7fd fa90 	bl	80106a4 <disk_read>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d004      	beq.n	8013194 <f_lseek+0x1f0>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2201      	movs	r2, #1
 801318e:	755a      	strb	r2, [r3, #21]
 8013190:	2301      	movs	r3, #1
 8013192:	e127      	b.n	80133e4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	69ba      	ldr	r2, [r7, #24]
 8013198:	621a      	str	r2, [r3, #32]
 801319a:	e121      	b.n	80133e0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	683a      	ldr	r2, [r7, #0]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d908      	bls.n	80131b8 <f_lseek+0x214>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	7d1b      	ldrb	r3, [r3, #20]
 80131aa:	f003 0302 	and.w	r3, r3, #2
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d102      	bne.n	80131b8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	699b      	ldr	r3, [r3, #24]
 80131bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	637b      	str	r3, [r7, #52]	; 0x34
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131c6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f000 80b5 	beq.w	801333a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	895b      	ldrh	r3, [r3, #10]
 80131d4:	461a      	mov	r2, r3
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	899b      	ldrh	r3, [r3, #12]
 80131da:	fb03 f302 	mul.w	r3, r3, r2
 80131de:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80131e0:	6a3b      	ldr	r3, [r7, #32]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d01b      	beq.n	801321e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	1e5a      	subs	r2, r3, #1
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	1e59      	subs	r1, r3, #1
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d30f      	bcc.n	801321e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80131fe:	6a3b      	ldr	r3, [r7, #32]
 8013200:	1e5a      	subs	r2, r3, #1
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	425b      	negs	r3, r3
 8013206:	401a      	ands	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	699b      	ldr	r3, [r3, #24]
 8013210:	683a      	ldr	r2, [r7, #0]
 8013212:	1ad3      	subs	r3, r2, r3
 8013214:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	69db      	ldr	r3, [r3, #28]
 801321a:	63bb      	str	r3, [r7, #56]	; 0x38
 801321c:	e022      	b.n	8013264 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013226:	2b00      	cmp	r3, #0
 8013228:	d119      	bne.n	801325e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2100      	movs	r1, #0
 801322e:	4618      	mov	r0, r3
 8013230:	f7fe f84f 	bl	80112d2 <create_chain>
 8013234:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013238:	2b01      	cmp	r3, #1
 801323a:	d104      	bne.n	8013246 <f_lseek+0x2a2>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2202      	movs	r2, #2
 8013240:	755a      	strb	r2, [r3, #21]
 8013242:	2302      	movs	r3, #2
 8013244:	e0ce      	b.n	80133e4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324c:	d104      	bne.n	8013258 <f_lseek+0x2b4>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2201      	movs	r2, #1
 8013252:	755a      	strb	r2, [r3, #21]
 8013254:	2301      	movs	r3, #1
 8013256:	e0c5      	b.n	80133e4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801325c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013262:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013266:	2b00      	cmp	r3, #0
 8013268:	d067      	beq.n	801333a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801326a:	e03a      	b.n	80132e2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801326c:	683a      	ldr	r2, [r7, #0]
 801326e:	69fb      	ldr	r3, [r7, #28]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	603b      	str	r3, [r7, #0]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	699a      	ldr	r2, [r3, #24]
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	441a      	add	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	7d1b      	ldrb	r3, [r3, #20]
 8013284:	f003 0302 	and.w	r3, r3, #2
 8013288:	2b00      	cmp	r3, #0
 801328a:	d00b      	beq.n	80132a4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013290:	4618      	mov	r0, r3
 8013292:	f7fe f81e 	bl	80112d2 <create_chain>
 8013296:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	2b00      	cmp	r3, #0
 801329c:	d108      	bne.n	80132b0 <f_lseek+0x30c>
							ofs = 0; break;
 801329e:	2300      	movs	r3, #0
 80132a0:	603b      	str	r3, [r7, #0]
 80132a2:	e022      	b.n	80132ea <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fd fdc6 	bl	8010e3a <get_fat>
 80132ae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b6:	d104      	bne.n	80132c2 <f_lseek+0x31e>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2201      	movs	r2, #1
 80132bc:	755a      	strb	r2, [r3, #21]
 80132be:	2301      	movs	r3, #1
 80132c0:	e090      	b.n	80133e4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80132c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d904      	bls.n	80132d2 <f_lseek+0x32e>
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	69db      	ldr	r3, [r3, #28]
 80132cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d304      	bcc.n	80132dc <f_lseek+0x338>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2202      	movs	r2, #2
 80132d6:	755a      	strb	r2, [r3, #21]
 80132d8:	2302      	movs	r3, #2
 80132da:	e083      	b.n	80133e4 <f_lseek+0x440>
					fp->clust = clst;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132e0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d8c0      	bhi.n	801326c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	699a      	ldr	r2, [r3, #24]
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	441a      	add	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	899b      	ldrh	r3, [r3, #12]
 80132fa:	461a      	mov	r2, r3
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013302:	fb02 f201 	mul.w	r2, r2, r1
 8013306:	1a9b      	subs	r3, r3, r2
 8013308:	2b00      	cmp	r3, #0
 801330a:	d016      	beq.n	801333a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013310:	4618      	mov	r0, r3
 8013312:	f7fd fd73 	bl	8010dfc <clust2sect>
 8013316:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331a:	2b00      	cmp	r3, #0
 801331c:	d104      	bne.n	8013328 <f_lseek+0x384>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2202      	movs	r2, #2
 8013322:	755a      	strb	r2, [r3, #21]
 8013324:	2302      	movs	r3, #2
 8013326:	e05d      	b.n	80133e4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	899b      	ldrh	r3, [r3, #12]
 801332c:	461a      	mov	r2, r3
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	fbb3 f3f2 	udiv	r3, r3, r2
 8013334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013336:	4413      	add	r3, r2
 8013338:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	699a      	ldr	r2, [r3, #24]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	68db      	ldr	r3, [r3, #12]
 8013342:	429a      	cmp	r2, r3
 8013344:	d90a      	bls.n	801335c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	699a      	ldr	r2, [r3, #24]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	7d1b      	ldrb	r3, [r3, #20]
 8013352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013356:	b2da      	uxtb	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	68ba      	ldr	r2, [r7, #8]
 8013362:	8992      	ldrh	r2, [r2, #12]
 8013364:	fbb3 f1f2 	udiv	r1, r3, r2
 8013368:	fb02 f201 	mul.w	r2, r2, r1
 801336c:	1a9b      	subs	r3, r3, r2
 801336e:	2b00      	cmp	r3, #0
 8013370:	d036      	beq.n	80133e0 <f_lseek+0x43c>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6a1b      	ldr	r3, [r3, #32]
 8013376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013378:	429a      	cmp	r2, r3
 801337a:	d031      	beq.n	80133e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7d1b      	ldrb	r3, [r3, #20]
 8013380:	b25b      	sxtb	r3, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	da18      	bge.n	80133b8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	7858      	ldrb	r0, [r3, #1]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6a1a      	ldr	r2, [r3, #32]
 8013394:	2301      	movs	r3, #1
 8013396:	f7fd f9a5 	bl	80106e4 <disk_write>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d004      	beq.n	80133aa <f_lseek+0x406>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2201      	movs	r2, #1
 80133a4:	755a      	strb	r2, [r3, #21]
 80133a6:	2301      	movs	r3, #1
 80133a8:	e01c      	b.n	80133e4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7d1b      	ldrb	r3, [r3, #20]
 80133ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	7858      	ldrb	r0, [r3, #1]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133c2:	2301      	movs	r3, #1
 80133c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133c6:	f7fd f96d 	bl	80106a4 <disk_read>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d004      	beq.n	80133da <f_lseek+0x436>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2201      	movs	r2, #1
 80133d4:	755a      	strb	r2, [r3, #21]
 80133d6:	2301      	movs	r3, #1
 80133d8:	e004      	b.n	80133e4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80133e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3740      	adds	r7, #64	; 0x40
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b09e      	sub	sp, #120	; 0x78
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80133f4:	2300      	movs	r3, #0
 80133f6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80133f8:	f107 010c 	add.w	r1, r7, #12
 80133fc:	1d3b      	adds	r3, r7, #4
 80133fe:	2202      	movs	r2, #2
 8013400:	4618      	mov	r0, r3
 8013402:	f7fe fd17 	bl	8011e34 <find_volume>
 8013406:	4603      	mov	r3, r0
 8013408:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013410:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013414:	2b00      	cmp	r3, #0
 8013416:	f040 80a4 	bne.w	8013562 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013420:	4611      	mov	r1, r2
 8013422:	4618      	mov	r0, r3
 8013424:	f7fe fbd6 	bl	8011bd4 <follow_path>
 8013428:	4603      	mov	r3, r0
 801342a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801342e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013432:	2b00      	cmp	r3, #0
 8013434:	d108      	bne.n	8013448 <f_unlink+0x5c>
 8013436:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801343a:	f003 0320 	and.w	r3, r3, #32
 801343e:	2b00      	cmp	r3, #0
 8013440:	d002      	beq.n	8013448 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013442:	2306      	movs	r3, #6
 8013444:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013448:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801344c:	2b00      	cmp	r3, #0
 801344e:	d108      	bne.n	8013462 <f_unlink+0x76>
 8013450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013454:	2102      	movs	r1, #2
 8013456:	4618      	mov	r0, r3
 8013458:	f7fd fa82 	bl	8010960 <chk_lock>
 801345c:	4603      	mov	r3, r0
 801345e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013466:	2b00      	cmp	r3, #0
 8013468:	d17b      	bne.n	8013562 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801346a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801346e:	b25b      	sxtb	r3, r3
 8013470:	2b00      	cmp	r3, #0
 8013472:	da03      	bge.n	801347c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013474:	2306      	movs	r3, #6
 8013476:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801347a:	e008      	b.n	801348e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801347c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013480:	f003 0301 	and.w	r3, r3, #1
 8013484:	2b00      	cmp	r3, #0
 8013486:	d002      	beq.n	801348e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013488:	2307      	movs	r3, #7
 801348a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801348e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013492:	2b00      	cmp	r3, #0
 8013494:	d13d      	bne.n	8013512 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f7fe f98e 	bl	80117be <ld_clust>
 80134a2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80134a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80134a8:	f003 0310 	and.w	r3, r3, #16
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d030      	beq.n	8013512 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d103      	bne.n	80134c2 <f_unlink+0xd6>
						res = FR_DENIED;
 80134ba:	2307      	movs	r3, #7
 80134bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80134c0:	e027      	b.n	8013512 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80134c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80134c8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80134ca:	f107 0310 	add.w	r3, r7, #16
 80134ce:	2100      	movs	r1, #0
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fd ffce 	bl	8011472 <dir_sdi>
 80134d6:	4603      	mov	r3, r0
 80134d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80134dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d116      	bne.n	8013512 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80134e4:	f107 0310 	add.w	r3, r7, #16
 80134e8:	2100      	movs	r1, #0
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fe f9a6 	bl	801183c <dir_read>
 80134f0:	4603      	mov	r3, r0
 80134f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80134f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <f_unlink+0x118>
 80134fe:	2307      	movs	r3, #7
 8013500:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013504:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013508:	2b04      	cmp	r3, #4
 801350a:	d102      	bne.n	8013512 <f_unlink+0x126>
 801350c:	2300      	movs	r3, #0
 801350e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013512:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013516:	2b00      	cmp	r3, #0
 8013518:	d123      	bne.n	8013562 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801351a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801351e:	4618      	mov	r0, r3
 8013520:	f7fe fa70 	bl	8011a04 <dir_remove>
 8013524:	4603      	mov	r3, r0
 8013526:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801352a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801352e:	2b00      	cmp	r3, #0
 8013530:	d10c      	bne.n	801354c <f_unlink+0x160>
 8013532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013534:	2b00      	cmp	r3, #0
 8013536:	d009      	beq.n	801354c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013538:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801353c:	2200      	movs	r2, #0
 801353e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd fe61 	bl	8011208 <remove_chain>
 8013546:	4603      	mov	r3, r0
 8013548:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801354c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013550:	2b00      	cmp	r3, #0
 8013552:	d106      	bne.n	8013562 <f_unlink+0x176>
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	4618      	mov	r0, r3
 8013558:	f7fd fbe0 	bl	8010d1c <sync_fs>
 801355c:	4603      	mov	r3, r0
 801355e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013562:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013566:	4618      	mov	r0, r3
 8013568:	3778      	adds	r7, #120	; 0x78
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
	...

08013570 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b096      	sub	sp, #88	; 0x58
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013578:	f107 0108 	add.w	r1, r7, #8
 801357c:	1d3b      	adds	r3, r7, #4
 801357e:	2202      	movs	r2, #2
 8013580:	4618      	mov	r0, r3
 8013582:	f7fe fc57 	bl	8011e34 <find_volume>
 8013586:	4603      	mov	r3, r0
 8013588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013594:	2b00      	cmp	r3, #0
 8013596:	f040 80fe 	bne.w	8013796 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	f107 030c 	add.w	r3, r7, #12
 80135a0:	4611      	mov	r1, r2
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fe fb16 	bl	8011bd4 <follow_path>
 80135a8:	4603      	mov	r3, r0
 80135aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80135ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d102      	bne.n	80135bc <f_mkdir+0x4c>
 80135b6:	2308      	movs	r3, #8
 80135b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80135bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135c0:	2b04      	cmp	r3, #4
 80135c2:	d108      	bne.n	80135d6 <f_mkdir+0x66>
 80135c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80135c8:	f003 0320 	and.w	r3, r3, #32
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d002      	beq.n	80135d6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80135d0:	2306      	movs	r3, #6
 80135d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80135d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135da:	2b04      	cmp	r3, #4
 80135dc:	f040 80db 	bne.w	8013796 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80135e0:	f107 030c 	add.w	r3, r7, #12
 80135e4:	2100      	movs	r1, #0
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fd fe73 	bl	80112d2 <create_chain>
 80135ec:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	895b      	ldrh	r3, [r3, #10]
 80135f2:	461a      	mov	r2, r3
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	899b      	ldrh	r3, [r3, #12]
 80135f8:	fb03 f302 	mul.w	r3, r3, r2
 80135fc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80135fe:	2300      	movs	r3, #0
 8013600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013606:	2b00      	cmp	r3, #0
 8013608:	d102      	bne.n	8013610 <f_mkdir+0xa0>
 801360a:	2307      	movs	r3, #7
 801360c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013612:	2b01      	cmp	r3, #1
 8013614:	d102      	bne.n	801361c <f_mkdir+0xac>
 8013616:	2302      	movs	r3, #2
 8013618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013622:	d102      	bne.n	801362a <f_mkdir+0xba>
 8013624:	2301      	movs	r3, #1
 8013626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801362a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <f_mkdir+0xd0>
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	4618      	mov	r0, r3
 8013636:	f7fd faff 	bl	8010c38 <sync_window>
 801363a:	4603      	mov	r3, r0
 801363c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013640:	4b58      	ldr	r3, [pc, #352]	; (80137a4 <f_mkdir+0x234>)
 8013642:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013648:	2b00      	cmp	r3, #0
 801364a:	d16c      	bne.n	8013726 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013650:	4618      	mov	r0, r3
 8013652:	f7fd fbd3 	bl	8010dfc <clust2sect>
 8013656:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	3338      	adds	r3, #56	; 0x38
 801365c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	899b      	ldrh	r3, [r3, #12]
 8013662:	461a      	mov	r2, r3
 8013664:	2100      	movs	r1, #0
 8013666:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013668:	f7fd f91d 	bl	80108a6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801366c:	220b      	movs	r2, #11
 801366e:	2120      	movs	r1, #32
 8013670:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013672:	f7fd f918 	bl	80108a6 <mem_set>
					dir[DIR_Name] = '.';
 8013676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013678:	222e      	movs	r2, #46	; 0x2e
 801367a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801367e:	330b      	adds	r3, #11
 8013680:	2210      	movs	r2, #16
 8013682:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013686:	3316      	adds	r3, #22
 8013688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801368a:	4618      	mov	r0, r3
 801368c:	f7fd f8be 	bl	801080c <st_dword>
					st_clust(fs, dir, dcl);
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013696:	4618      	mov	r0, r3
 8013698:	f7fe f8b0 	bl	80117fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801369e:	3320      	adds	r3, #32
 80136a0:	2220      	movs	r2, #32
 80136a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fd f8dd 	bl	8010864 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80136aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ac:	3321      	adds	r3, #33	; 0x21
 80136ae:	222e      	movs	r2, #46	; 0x2e
 80136b0:	701a      	strb	r2, [r3, #0]
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	2b03      	cmp	r3, #3
 80136bc:	d106      	bne.n	80136cc <f_mkdir+0x15c>
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d101      	bne.n	80136cc <f_mkdir+0x15c>
 80136c8:	2300      	movs	r3, #0
 80136ca:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80136cc:	68b8      	ldr	r0, [r7, #8]
 80136ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d0:	3320      	adds	r3, #32
 80136d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136d4:	4619      	mov	r1, r3
 80136d6:	f7fe f891 	bl	80117fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	895b      	ldrh	r3, [r3, #10]
 80136de:	653b      	str	r3, [r7, #80]	; 0x50
 80136e0:	e01c      	b.n	801371c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80136e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e4:	1c5a      	adds	r2, r3, #1
 80136e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80136e8:	68ba      	ldr	r2, [r7, #8]
 80136ea:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	2201      	movs	r2, #1
 80136f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fd fa9f 	bl	8010c38 <sync_window>
 80136fa:	4603      	mov	r3, r0
 80136fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10d      	bne.n	8013724 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	899b      	ldrh	r3, [r3, #12]
 801370c:	461a      	mov	r2, r3
 801370e:	2100      	movs	r1, #0
 8013710:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013712:	f7fd f8c8 	bl	80108a6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013718:	3b01      	subs	r3, #1
 801371a:	653b      	str	r3, [r7, #80]	; 0x50
 801371c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1df      	bne.n	80136e2 <f_mkdir+0x172>
 8013722:	e000      	b.n	8013726 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013724:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801372a:	2b00      	cmp	r3, #0
 801372c:	d107      	bne.n	801373e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801372e:	f107 030c 	add.w	r3, r7, #12
 8013732:	4618      	mov	r0, r3
 8013734:	f7fe f934 	bl	80119a0 <dir_register>
 8013738:	4603      	mov	r3, r0
 801373a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801373e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013742:	2b00      	cmp	r3, #0
 8013744:	d120      	bne.n	8013788 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013748:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801374c:	3316      	adds	r3, #22
 801374e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd f85b 	bl	801080c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801375a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801375c:	4618      	mov	r0, r3
 801375e:	f7fe f84d 	bl	80117fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013764:	330b      	adds	r3, #11
 8013766:	2210      	movs	r2, #16
 8013768:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	2201      	movs	r2, #1
 801376e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10e      	bne.n	8013796 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fd face 	bl	8010d1c <sync_fs>
 8013780:	4603      	mov	r3, r0
 8013782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013786:	e006      	b.n	8013796 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013788:	f107 030c 	add.w	r3, r7, #12
 801378c:	2200      	movs	r2, #0
 801378e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013790:	4618      	mov	r0, r3
 8013792:	f7fd fd39 	bl	8011208 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801379a:	4618      	mov	r0, r3
 801379c:	3758      	adds	r7, #88	; 0x58
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	274a0000 	.word	0x274a0000

080137a8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b088      	sub	sp, #32
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80137bc:	e017      	b.n	80137ee <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80137be:	f107 0310 	add.w	r3, r7, #16
 80137c2:	f107 0114 	add.w	r1, r7, #20
 80137c6:	2201      	movs	r2, #1
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7ff f803 	bl	80127d4 <f_read>
		if (rc != 1) break;
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d112      	bne.n	80137fa <f_gets+0x52>
		c = s[0];
 80137d4:	7d3b      	ldrb	r3, [r7, #20]
 80137d6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	1c5a      	adds	r2, r3, #1
 80137dc:	61ba      	str	r2, [r7, #24]
 80137de:	7dfa      	ldrb	r2, [r7, #23]
 80137e0:	701a      	strb	r2, [r3, #0]
		n++;
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	3301      	adds	r3, #1
 80137e6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80137e8:	7dfb      	ldrb	r3, [r7, #23]
 80137ea:	2b0a      	cmp	r3, #10
 80137ec:	d007      	beq.n	80137fe <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	3b01      	subs	r3, #1
 80137f2:	69fa      	ldr	r2, [r7, #28]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	dbe2      	blt.n	80137be <f_gets+0x16>
 80137f8:	e002      	b.n	8013800 <f_gets+0x58>
		if (rc != 1) break;
 80137fa:	bf00      	nop
 80137fc:	e000      	b.n	8013800 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80137fe:	bf00      	nop
	}
	*p = 0;
 8013800:	69bb      	ldr	r3, [r7, #24]
 8013802:	2200      	movs	r2, #0
 8013804:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d001      	beq.n	8013810 <f_gets+0x68>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	e000      	b.n	8013812 <f_gets+0x6a>
 8013810:	2300      	movs	r3, #0
}
 8013812:	4618      	mov	r0, r3
 8013814:	3720      	adds	r7, #32
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
	...

0801381c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801381c:	b480      	push	{r7}
 801381e:	b087      	sub	sp, #28
 8013820:	af00      	add	r7, sp, #0
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	4613      	mov	r3, r2
 8013828:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801382a:	2301      	movs	r3, #1
 801382c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801382e:	2300      	movs	r3, #0
 8013830:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013832:	4b1f      	ldr	r3, [pc, #124]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 8013834:	7a5b      	ldrb	r3, [r3, #9]
 8013836:	b2db      	uxtb	r3, r3
 8013838:	2b00      	cmp	r3, #0
 801383a:	d131      	bne.n	80138a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801383c:	4b1c      	ldr	r3, [pc, #112]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 801383e:	7a5b      	ldrb	r3, [r3, #9]
 8013840:	b2db      	uxtb	r3, r3
 8013842:	461a      	mov	r2, r3
 8013844:	4b1a      	ldr	r3, [pc, #104]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 8013846:	2100      	movs	r1, #0
 8013848:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801384a:	4b19      	ldr	r3, [pc, #100]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 801384c:	7a5b      	ldrb	r3, [r3, #9]
 801384e:	b2db      	uxtb	r3, r3
 8013850:	4a17      	ldr	r2, [pc, #92]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	4413      	add	r3, r2
 8013856:	68fa      	ldr	r2, [r7, #12]
 8013858:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801385a:	4b15      	ldr	r3, [pc, #84]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 801385c:	7a5b      	ldrb	r3, [r3, #9]
 801385e:	b2db      	uxtb	r3, r3
 8013860:	461a      	mov	r2, r3
 8013862:	4b13      	ldr	r3, [pc, #76]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 8013864:	4413      	add	r3, r2
 8013866:	79fa      	ldrb	r2, [r7, #7]
 8013868:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801386a:	4b11      	ldr	r3, [pc, #68]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 801386c:	7a5b      	ldrb	r3, [r3, #9]
 801386e:	b2db      	uxtb	r3, r3
 8013870:	1c5a      	adds	r2, r3, #1
 8013872:	b2d1      	uxtb	r1, r2
 8013874:	4a0e      	ldr	r2, [pc, #56]	; (80138b0 <FATFS_LinkDriverEx+0x94>)
 8013876:	7251      	strb	r1, [r2, #9]
 8013878:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801387a:	7dbb      	ldrb	r3, [r7, #22]
 801387c:	3330      	adds	r3, #48	; 0x30
 801387e:	b2da      	uxtb	r2, r3
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	3301      	adds	r3, #1
 8013888:	223a      	movs	r2, #58	; 0x3a
 801388a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	3302      	adds	r3, #2
 8013890:	222f      	movs	r2, #47	; 0x2f
 8013892:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	3303      	adds	r3, #3
 8013898:	2200      	movs	r2, #0
 801389a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80138a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	371c      	adds	r7, #28
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	2003d464 	.word	0x2003d464

080138b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80138be:	2200      	movs	r2, #0
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f7ff ffaa 	bl	801381c <FATFS_LinkDriverEx>
 80138c8:	4603      	mov	r3, r0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}

080138d2 <__cxa_guard_acquire>:
 80138d2:	6803      	ldr	r3, [r0, #0]
 80138d4:	07db      	lsls	r3, r3, #31
 80138d6:	d406      	bmi.n	80138e6 <__cxa_guard_acquire+0x14>
 80138d8:	7843      	ldrb	r3, [r0, #1]
 80138da:	b103      	cbz	r3, 80138de <__cxa_guard_acquire+0xc>
 80138dc:	deff      	udf	#255	; 0xff
 80138de:	2301      	movs	r3, #1
 80138e0:	7043      	strb	r3, [r0, #1]
 80138e2:	4618      	mov	r0, r3
 80138e4:	4770      	bx	lr
 80138e6:	2000      	movs	r0, #0
 80138e8:	4770      	bx	lr

080138ea <__cxa_guard_release>:
 80138ea:	2301      	movs	r3, #1
 80138ec:	6003      	str	r3, [r0, #0]
 80138ee:	4770      	bx	lr

080138f0 <cos>:
 80138f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138f2:	ec51 0b10 	vmov	r0, r1, d0
 80138f6:	4a1e      	ldr	r2, [pc, #120]	; (8013970 <cos+0x80>)
 80138f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80138fc:	4293      	cmp	r3, r2
 80138fe:	dc06      	bgt.n	801390e <cos+0x1e>
 8013900:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013968 <cos+0x78>
 8013904:	f000 fa74 	bl	8013df0 <__kernel_cos>
 8013908:	ec51 0b10 	vmov	r0, r1, d0
 801390c:	e007      	b.n	801391e <cos+0x2e>
 801390e:	4a19      	ldr	r2, [pc, #100]	; (8013974 <cos+0x84>)
 8013910:	4293      	cmp	r3, r2
 8013912:	dd09      	ble.n	8013928 <cos+0x38>
 8013914:	ee10 2a10 	vmov	r2, s0
 8013918:	460b      	mov	r3, r1
 801391a:	f7ec fccd 	bl	80002b8 <__aeabi_dsub>
 801391e:	ec41 0b10 	vmov	d0, r0, r1
 8013922:	b005      	add	sp, #20
 8013924:	f85d fb04 	ldr.w	pc, [sp], #4
 8013928:	4668      	mov	r0, sp
 801392a:	f000 f86d 	bl	8013a08 <__ieee754_rem_pio2>
 801392e:	f000 0003 	and.w	r0, r0, #3
 8013932:	2801      	cmp	r0, #1
 8013934:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013938:	ed9d 0b00 	vldr	d0, [sp]
 801393c:	d007      	beq.n	801394e <cos+0x5e>
 801393e:	2802      	cmp	r0, #2
 8013940:	d00e      	beq.n	8013960 <cos+0x70>
 8013942:	2800      	cmp	r0, #0
 8013944:	d0de      	beq.n	8013904 <cos+0x14>
 8013946:	2001      	movs	r0, #1
 8013948:	f000 fe5a 	bl	8014600 <__kernel_sin>
 801394c:	e7dc      	b.n	8013908 <cos+0x18>
 801394e:	f000 fe57 	bl	8014600 <__kernel_sin>
 8013952:	ec53 2b10 	vmov	r2, r3, d0
 8013956:	ee10 0a10 	vmov	r0, s0
 801395a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801395e:	e7de      	b.n	801391e <cos+0x2e>
 8013960:	f000 fa46 	bl	8013df0 <__kernel_cos>
 8013964:	e7f5      	b.n	8013952 <cos+0x62>
 8013966:	bf00      	nop
	...
 8013970:	3fe921fb 	.word	0x3fe921fb
 8013974:	7fefffff 	.word	0x7fefffff

08013978 <sin>:
 8013978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801397a:	ec51 0b10 	vmov	r0, r1, d0
 801397e:	4a20      	ldr	r2, [pc, #128]	; (8013a00 <sin+0x88>)
 8013980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013984:	4293      	cmp	r3, r2
 8013986:	dc07      	bgt.n	8013998 <sin+0x20>
 8013988:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80139f8 <sin+0x80>
 801398c:	2000      	movs	r0, #0
 801398e:	f000 fe37 	bl	8014600 <__kernel_sin>
 8013992:	ec51 0b10 	vmov	r0, r1, d0
 8013996:	e007      	b.n	80139a8 <sin+0x30>
 8013998:	4a1a      	ldr	r2, [pc, #104]	; (8013a04 <sin+0x8c>)
 801399a:	4293      	cmp	r3, r2
 801399c:	dd09      	ble.n	80139b2 <sin+0x3a>
 801399e:	ee10 2a10 	vmov	r2, s0
 80139a2:	460b      	mov	r3, r1
 80139a4:	f7ec fc88 	bl	80002b8 <__aeabi_dsub>
 80139a8:	ec41 0b10 	vmov	d0, r0, r1
 80139ac:	b005      	add	sp, #20
 80139ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80139b2:	4668      	mov	r0, sp
 80139b4:	f000 f828 	bl	8013a08 <__ieee754_rem_pio2>
 80139b8:	f000 0003 	and.w	r0, r0, #3
 80139bc:	2801      	cmp	r0, #1
 80139be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139c2:	ed9d 0b00 	vldr	d0, [sp]
 80139c6:	d004      	beq.n	80139d2 <sin+0x5a>
 80139c8:	2802      	cmp	r0, #2
 80139ca:	d005      	beq.n	80139d8 <sin+0x60>
 80139cc:	b970      	cbnz	r0, 80139ec <sin+0x74>
 80139ce:	2001      	movs	r0, #1
 80139d0:	e7dd      	b.n	801398e <sin+0x16>
 80139d2:	f000 fa0d 	bl	8013df0 <__kernel_cos>
 80139d6:	e7dc      	b.n	8013992 <sin+0x1a>
 80139d8:	2001      	movs	r0, #1
 80139da:	f000 fe11 	bl	8014600 <__kernel_sin>
 80139de:	ec53 2b10 	vmov	r2, r3, d0
 80139e2:	ee10 0a10 	vmov	r0, s0
 80139e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80139ea:	e7dd      	b.n	80139a8 <sin+0x30>
 80139ec:	f000 fa00 	bl	8013df0 <__kernel_cos>
 80139f0:	e7f5      	b.n	80139de <sin+0x66>
 80139f2:	bf00      	nop
 80139f4:	f3af 8000 	nop.w
	...
 8013a00:	3fe921fb 	.word	0x3fe921fb
 8013a04:	7fefffff 	.word	0x7fefffff

08013a08 <__ieee754_rem_pio2>:
 8013a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0c:	ec57 6b10 	vmov	r6, r7, d0
 8013a10:	4bc3      	ldr	r3, [pc, #780]	; (8013d20 <__ieee754_rem_pio2+0x318>)
 8013a12:	b08d      	sub	sp, #52	; 0x34
 8013a14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013a18:	4598      	cmp	r8, r3
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	9704      	str	r7, [sp, #16]
 8013a1e:	dc07      	bgt.n	8013a30 <__ieee754_rem_pio2+0x28>
 8013a20:	2200      	movs	r2, #0
 8013a22:	2300      	movs	r3, #0
 8013a24:	ed84 0b00 	vstr	d0, [r4]
 8013a28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013a2c:	2500      	movs	r5, #0
 8013a2e:	e027      	b.n	8013a80 <__ieee754_rem_pio2+0x78>
 8013a30:	4bbc      	ldr	r3, [pc, #752]	; (8013d24 <__ieee754_rem_pio2+0x31c>)
 8013a32:	4598      	cmp	r8, r3
 8013a34:	dc75      	bgt.n	8013b22 <__ieee754_rem_pio2+0x11a>
 8013a36:	9b04      	ldr	r3, [sp, #16]
 8013a38:	4dbb      	ldr	r5, [pc, #748]	; (8013d28 <__ieee754_rem_pio2+0x320>)
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	ee10 0a10 	vmov	r0, s0
 8013a40:	a3a9      	add	r3, pc, #676	; (adr r3, 8013ce8 <__ieee754_rem_pio2+0x2e0>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	4639      	mov	r1, r7
 8013a48:	dd36      	ble.n	8013ab8 <__ieee754_rem_pio2+0xb0>
 8013a4a:	f7ec fc35 	bl	80002b8 <__aeabi_dsub>
 8013a4e:	45a8      	cmp	r8, r5
 8013a50:	4606      	mov	r6, r0
 8013a52:	460f      	mov	r7, r1
 8013a54:	d018      	beq.n	8013a88 <__ieee754_rem_pio2+0x80>
 8013a56:	a3a6      	add	r3, pc, #664	; (adr r3, 8013cf0 <__ieee754_rem_pio2+0x2e8>)
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	f7ec fc2c 	bl	80002b8 <__aeabi_dsub>
 8013a60:	4602      	mov	r2, r0
 8013a62:	460b      	mov	r3, r1
 8013a64:	e9c4 2300 	strd	r2, r3, [r4]
 8013a68:	4630      	mov	r0, r6
 8013a6a:	4639      	mov	r1, r7
 8013a6c:	f7ec fc24 	bl	80002b8 <__aeabi_dsub>
 8013a70:	a39f      	add	r3, pc, #636	; (adr r3, 8013cf0 <__ieee754_rem_pio2+0x2e8>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	f7ec fc1f 	bl	80002b8 <__aeabi_dsub>
 8013a7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a7e:	2501      	movs	r5, #1
 8013a80:	4628      	mov	r0, r5
 8013a82:	b00d      	add	sp, #52	; 0x34
 8013a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a88:	a39b      	add	r3, pc, #620	; (adr r3, 8013cf8 <__ieee754_rem_pio2+0x2f0>)
 8013a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8e:	f7ec fc13 	bl	80002b8 <__aeabi_dsub>
 8013a92:	a39b      	add	r3, pc, #620	; (adr r3, 8013d00 <__ieee754_rem_pio2+0x2f8>)
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	4606      	mov	r6, r0
 8013a9a:	460f      	mov	r7, r1
 8013a9c:	f7ec fc0c 	bl	80002b8 <__aeabi_dsub>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	e9c4 2300 	strd	r2, r3, [r4]
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	4639      	mov	r1, r7
 8013aac:	f7ec fc04 	bl	80002b8 <__aeabi_dsub>
 8013ab0:	a393      	add	r3, pc, #588	; (adr r3, 8013d00 <__ieee754_rem_pio2+0x2f8>)
 8013ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab6:	e7de      	b.n	8013a76 <__ieee754_rem_pio2+0x6e>
 8013ab8:	f7ec fc00 	bl	80002bc <__adddf3>
 8013abc:	45a8      	cmp	r8, r5
 8013abe:	4606      	mov	r6, r0
 8013ac0:	460f      	mov	r7, r1
 8013ac2:	d016      	beq.n	8013af2 <__ieee754_rem_pio2+0xea>
 8013ac4:	a38a      	add	r3, pc, #552	; (adr r3, 8013cf0 <__ieee754_rem_pio2+0x2e8>)
 8013ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aca:	f7ec fbf7 	bl	80002bc <__adddf3>
 8013ace:	4602      	mov	r2, r0
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	e9c4 2300 	strd	r2, r3, [r4]
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	4639      	mov	r1, r7
 8013ada:	f7ec fbed 	bl	80002b8 <__aeabi_dsub>
 8013ade:	a384      	add	r3, pc, #528	; (adr r3, 8013cf0 <__ieee754_rem_pio2+0x2e8>)
 8013ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae4:	f7ec fbea 	bl	80002bc <__adddf3>
 8013ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8013aec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013af0:	e7c6      	b.n	8013a80 <__ieee754_rem_pio2+0x78>
 8013af2:	a381      	add	r3, pc, #516	; (adr r3, 8013cf8 <__ieee754_rem_pio2+0x2f0>)
 8013af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af8:	f7ec fbe0 	bl	80002bc <__adddf3>
 8013afc:	a380      	add	r3, pc, #512	; (adr r3, 8013d00 <__ieee754_rem_pio2+0x2f8>)
 8013afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b02:	4606      	mov	r6, r0
 8013b04:	460f      	mov	r7, r1
 8013b06:	f7ec fbd9 	bl	80002bc <__adddf3>
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	e9c4 2300 	strd	r2, r3, [r4]
 8013b12:	4630      	mov	r0, r6
 8013b14:	4639      	mov	r1, r7
 8013b16:	f7ec fbcf 	bl	80002b8 <__aeabi_dsub>
 8013b1a:	a379      	add	r3, pc, #484	; (adr r3, 8013d00 <__ieee754_rem_pio2+0x2f8>)
 8013b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b20:	e7e0      	b.n	8013ae4 <__ieee754_rem_pio2+0xdc>
 8013b22:	4b82      	ldr	r3, [pc, #520]	; (8013d2c <__ieee754_rem_pio2+0x324>)
 8013b24:	4598      	cmp	r8, r3
 8013b26:	f300 80d0 	bgt.w	8013cca <__ieee754_rem_pio2+0x2c2>
 8013b2a:	f000 fe23 	bl	8014774 <fabs>
 8013b2e:	ec57 6b10 	vmov	r6, r7, d0
 8013b32:	ee10 0a10 	vmov	r0, s0
 8013b36:	a374      	add	r3, pc, #464	; (adr r3, 8013d08 <__ieee754_rem_pio2+0x300>)
 8013b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3c:	4639      	mov	r1, r7
 8013b3e:	f7ec fd73 	bl	8000628 <__aeabi_dmul>
 8013b42:	2200      	movs	r2, #0
 8013b44:	4b7a      	ldr	r3, [pc, #488]	; (8013d30 <__ieee754_rem_pio2+0x328>)
 8013b46:	f7ec fbb9 	bl	80002bc <__adddf3>
 8013b4a:	f7ed f81d 	bl	8000b88 <__aeabi_d2iz>
 8013b4e:	4605      	mov	r5, r0
 8013b50:	f7ec fd00 	bl	8000554 <__aeabi_i2d>
 8013b54:	a364      	add	r3, pc, #400	; (adr r3, 8013ce8 <__ieee754_rem_pio2+0x2e0>)
 8013b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b5e:	f7ec fd63 	bl	8000628 <__aeabi_dmul>
 8013b62:	4602      	mov	r2, r0
 8013b64:	460b      	mov	r3, r1
 8013b66:	4630      	mov	r0, r6
 8013b68:	4639      	mov	r1, r7
 8013b6a:	f7ec fba5 	bl	80002b8 <__aeabi_dsub>
 8013b6e:	a360      	add	r3, pc, #384	; (adr r3, 8013cf0 <__ieee754_rem_pio2+0x2e8>)
 8013b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b74:	4682      	mov	sl, r0
 8013b76:	468b      	mov	fp, r1
 8013b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b7c:	f7ec fd54 	bl	8000628 <__aeabi_dmul>
 8013b80:	2d1f      	cmp	r5, #31
 8013b82:	4606      	mov	r6, r0
 8013b84:	460f      	mov	r7, r1
 8013b86:	dc0c      	bgt.n	8013ba2 <__ieee754_rem_pio2+0x19a>
 8013b88:	1e6a      	subs	r2, r5, #1
 8013b8a:	4b6a      	ldr	r3, [pc, #424]	; (8013d34 <__ieee754_rem_pio2+0x32c>)
 8013b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b90:	4543      	cmp	r3, r8
 8013b92:	d006      	beq.n	8013ba2 <__ieee754_rem_pio2+0x19a>
 8013b94:	4632      	mov	r2, r6
 8013b96:	463b      	mov	r3, r7
 8013b98:	4650      	mov	r0, sl
 8013b9a:	4659      	mov	r1, fp
 8013b9c:	f7ec fb8c 	bl	80002b8 <__aeabi_dsub>
 8013ba0:	e00e      	b.n	8013bc0 <__ieee754_rem_pio2+0x1b8>
 8013ba2:	4632      	mov	r2, r6
 8013ba4:	463b      	mov	r3, r7
 8013ba6:	4650      	mov	r0, sl
 8013ba8:	4659      	mov	r1, fp
 8013baa:	f7ec fb85 	bl	80002b8 <__aeabi_dsub>
 8013bae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	9a05      	ldr	r2, [sp, #20]
 8013bb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	2b10      	cmp	r3, #16
 8013bbe:	dc02      	bgt.n	8013bc6 <__ieee754_rem_pio2+0x1be>
 8013bc0:	e9c4 0100 	strd	r0, r1, [r4]
 8013bc4:	e039      	b.n	8013c3a <__ieee754_rem_pio2+0x232>
 8013bc6:	a34c      	add	r3, pc, #304	; (adr r3, 8013cf8 <__ieee754_rem_pio2+0x2f0>)
 8013bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bd0:	f7ec fd2a 	bl	8000628 <__aeabi_dmul>
 8013bd4:	4606      	mov	r6, r0
 8013bd6:	460f      	mov	r7, r1
 8013bd8:	4602      	mov	r2, r0
 8013bda:	460b      	mov	r3, r1
 8013bdc:	4650      	mov	r0, sl
 8013bde:	4659      	mov	r1, fp
 8013be0:	f7ec fb6a 	bl	80002b8 <__aeabi_dsub>
 8013be4:	4602      	mov	r2, r0
 8013be6:	460b      	mov	r3, r1
 8013be8:	4680      	mov	r8, r0
 8013bea:	4689      	mov	r9, r1
 8013bec:	4650      	mov	r0, sl
 8013bee:	4659      	mov	r1, fp
 8013bf0:	f7ec fb62 	bl	80002b8 <__aeabi_dsub>
 8013bf4:	4632      	mov	r2, r6
 8013bf6:	463b      	mov	r3, r7
 8013bf8:	f7ec fb5e 	bl	80002b8 <__aeabi_dsub>
 8013bfc:	a340      	add	r3, pc, #256	; (adr r3, 8013d00 <__ieee754_rem_pio2+0x2f8>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	4606      	mov	r6, r0
 8013c04:	460f      	mov	r7, r1
 8013c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c0a:	f7ec fd0d 	bl	8000628 <__aeabi_dmul>
 8013c0e:	4632      	mov	r2, r6
 8013c10:	463b      	mov	r3, r7
 8013c12:	f7ec fb51 	bl	80002b8 <__aeabi_dsub>
 8013c16:	4602      	mov	r2, r0
 8013c18:	460b      	mov	r3, r1
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	460f      	mov	r7, r1
 8013c1e:	4640      	mov	r0, r8
 8013c20:	4649      	mov	r1, r9
 8013c22:	f7ec fb49 	bl	80002b8 <__aeabi_dsub>
 8013c26:	9a05      	ldr	r2, [sp, #20]
 8013c28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	2b31      	cmp	r3, #49	; 0x31
 8013c30:	dc20      	bgt.n	8013c74 <__ieee754_rem_pio2+0x26c>
 8013c32:	e9c4 0100 	strd	r0, r1, [r4]
 8013c36:	46c2      	mov	sl, r8
 8013c38:	46cb      	mov	fp, r9
 8013c3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013c3e:	4650      	mov	r0, sl
 8013c40:	4642      	mov	r2, r8
 8013c42:	464b      	mov	r3, r9
 8013c44:	4659      	mov	r1, fp
 8013c46:	f7ec fb37 	bl	80002b8 <__aeabi_dsub>
 8013c4a:	463b      	mov	r3, r7
 8013c4c:	4632      	mov	r2, r6
 8013c4e:	f7ec fb33 	bl	80002b8 <__aeabi_dsub>
 8013c52:	9b04      	ldr	r3, [sp, #16]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013c5a:	f6bf af11 	bge.w	8013a80 <__ieee754_rem_pio2+0x78>
 8013c5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013c62:	6063      	str	r3, [r4, #4]
 8013c64:	f8c4 8000 	str.w	r8, [r4]
 8013c68:	60a0      	str	r0, [r4, #8]
 8013c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c6e:	60e3      	str	r3, [r4, #12]
 8013c70:	426d      	negs	r5, r5
 8013c72:	e705      	b.n	8013a80 <__ieee754_rem_pio2+0x78>
 8013c74:	a326      	add	r3, pc, #152	; (adr r3, 8013d10 <__ieee754_rem_pio2+0x308>)
 8013c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c7e:	f7ec fcd3 	bl	8000628 <__aeabi_dmul>
 8013c82:	4606      	mov	r6, r0
 8013c84:	460f      	mov	r7, r1
 8013c86:	4602      	mov	r2, r0
 8013c88:	460b      	mov	r3, r1
 8013c8a:	4640      	mov	r0, r8
 8013c8c:	4649      	mov	r1, r9
 8013c8e:	f7ec fb13 	bl	80002b8 <__aeabi_dsub>
 8013c92:	4602      	mov	r2, r0
 8013c94:	460b      	mov	r3, r1
 8013c96:	4682      	mov	sl, r0
 8013c98:	468b      	mov	fp, r1
 8013c9a:	4640      	mov	r0, r8
 8013c9c:	4649      	mov	r1, r9
 8013c9e:	f7ec fb0b 	bl	80002b8 <__aeabi_dsub>
 8013ca2:	4632      	mov	r2, r6
 8013ca4:	463b      	mov	r3, r7
 8013ca6:	f7ec fb07 	bl	80002b8 <__aeabi_dsub>
 8013caa:	a31b      	add	r3, pc, #108	; (adr r3, 8013d18 <__ieee754_rem_pio2+0x310>)
 8013cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	460f      	mov	r7, r1
 8013cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cb8:	f7ec fcb6 	bl	8000628 <__aeabi_dmul>
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	463b      	mov	r3, r7
 8013cc0:	f7ec fafa 	bl	80002b8 <__aeabi_dsub>
 8013cc4:	4606      	mov	r6, r0
 8013cc6:	460f      	mov	r7, r1
 8013cc8:	e764      	b.n	8013b94 <__ieee754_rem_pio2+0x18c>
 8013cca:	4b1b      	ldr	r3, [pc, #108]	; (8013d38 <__ieee754_rem_pio2+0x330>)
 8013ccc:	4598      	cmp	r8, r3
 8013cce:	dd35      	ble.n	8013d3c <__ieee754_rem_pio2+0x334>
 8013cd0:	ee10 2a10 	vmov	r2, s0
 8013cd4:	463b      	mov	r3, r7
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	4639      	mov	r1, r7
 8013cda:	f7ec faed 	bl	80002b8 <__aeabi_dsub>
 8013cde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ce2:	e9c4 0100 	strd	r0, r1, [r4]
 8013ce6:	e6a1      	b.n	8013a2c <__ieee754_rem_pio2+0x24>
 8013ce8:	54400000 	.word	0x54400000
 8013cec:	3ff921fb 	.word	0x3ff921fb
 8013cf0:	1a626331 	.word	0x1a626331
 8013cf4:	3dd0b461 	.word	0x3dd0b461
 8013cf8:	1a600000 	.word	0x1a600000
 8013cfc:	3dd0b461 	.word	0x3dd0b461
 8013d00:	2e037073 	.word	0x2e037073
 8013d04:	3ba3198a 	.word	0x3ba3198a
 8013d08:	6dc9c883 	.word	0x6dc9c883
 8013d0c:	3fe45f30 	.word	0x3fe45f30
 8013d10:	2e000000 	.word	0x2e000000
 8013d14:	3ba3198a 	.word	0x3ba3198a
 8013d18:	252049c1 	.word	0x252049c1
 8013d1c:	397b839a 	.word	0x397b839a
 8013d20:	3fe921fb 	.word	0x3fe921fb
 8013d24:	4002d97b 	.word	0x4002d97b
 8013d28:	3ff921fb 	.word	0x3ff921fb
 8013d2c:	413921fb 	.word	0x413921fb
 8013d30:	3fe00000 	.word	0x3fe00000
 8013d34:	08019428 	.word	0x08019428
 8013d38:	7fefffff 	.word	0x7fefffff
 8013d3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013d40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013d44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013d48:	4630      	mov	r0, r6
 8013d4a:	460f      	mov	r7, r1
 8013d4c:	f7ec ff1c 	bl	8000b88 <__aeabi_d2iz>
 8013d50:	f7ec fc00 	bl	8000554 <__aeabi_i2d>
 8013d54:	4602      	mov	r2, r0
 8013d56:	460b      	mov	r3, r1
 8013d58:	4630      	mov	r0, r6
 8013d5a:	4639      	mov	r1, r7
 8013d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013d60:	f7ec faaa 	bl	80002b8 <__aeabi_dsub>
 8013d64:	2200      	movs	r2, #0
 8013d66:	4b1f      	ldr	r3, [pc, #124]	; (8013de4 <__ieee754_rem_pio2+0x3dc>)
 8013d68:	f7ec fc5e 	bl	8000628 <__aeabi_dmul>
 8013d6c:	460f      	mov	r7, r1
 8013d6e:	4606      	mov	r6, r0
 8013d70:	f7ec ff0a 	bl	8000b88 <__aeabi_d2iz>
 8013d74:	f7ec fbee 	bl	8000554 <__aeabi_i2d>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	460b      	mov	r3, r1
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	4639      	mov	r1, r7
 8013d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d84:	f7ec fa98 	bl	80002b8 <__aeabi_dsub>
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4b16      	ldr	r3, [pc, #88]	; (8013de4 <__ieee754_rem_pio2+0x3dc>)
 8013d8c:	f7ec fc4c 	bl	8000628 <__aeabi_dmul>
 8013d90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013d94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013d98:	f04f 0803 	mov.w	r8, #3
 8013d9c:	2600      	movs	r6, #0
 8013d9e:	2700      	movs	r7, #0
 8013da0:	4632      	mov	r2, r6
 8013da2:	463b      	mov	r3, r7
 8013da4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8013dac:	f7ec fea4 	bl	8000af8 <__aeabi_dcmpeq>
 8013db0:	b9b0      	cbnz	r0, 8013de0 <__ieee754_rem_pio2+0x3d8>
 8013db2:	4b0d      	ldr	r3, [pc, #52]	; (8013de8 <__ieee754_rem_pio2+0x3e0>)
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	2302      	movs	r3, #2
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	462a      	mov	r2, r5
 8013dbc:	4643      	mov	r3, r8
 8013dbe:	4621      	mov	r1, r4
 8013dc0:	a806      	add	r0, sp, #24
 8013dc2:	f000 f8dd 	bl	8013f80 <__kernel_rem_pio2>
 8013dc6:	9b04      	ldr	r3, [sp, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	4605      	mov	r5, r0
 8013dcc:	f6bf ae58 	bge.w	8013a80 <__ieee754_rem_pio2+0x78>
 8013dd0:	6863      	ldr	r3, [r4, #4]
 8013dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013dd6:	6063      	str	r3, [r4, #4]
 8013dd8:	68e3      	ldr	r3, [r4, #12]
 8013dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013dde:	e746      	b.n	8013c6e <__ieee754_rem_pio2+0x266>
 8013de0:	46d0      	mov	r8, sl
 8013de2:	e7dd      	b.n	8013da0 <__ieee754_rem_pio2+0x398>
 8013de4:	41700000 	.word	0x41700000
 8013de8:	080194a8 	.word	0x080194a8
 8013dec:	00000000 	.word	0x00000000

08013df0 <__kernel_cos>:
 8013df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df4:	ec59 8b10 	vmov	r8, r9, d0
 8013df8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013dfc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013e00:	ed2d 8b02 	vpush	{d8}
 8013e04:	eeb0 8a41 	vmov.f32	s16, s2
 8013e08:	eef0 8a61 	vmov.f32	s17, s3
 8013e0c:	da07      	bge.n	8013e1e <__kernel_cos+0x2e>
 8013e0e:	ee10 0a10 	vmov	r0, s0
 8013e12:	4649      	mov	r1, r9
 8013e14:	f7ec feb8 	bl	8000b88 <__aeabi_d2iz>
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	f000 8089 	beq.w	8013f30 <__kernel_cos+0x140>
 8013e1e:	4642      	mov	r2, r8
 8013e20:	464b      	mov	r3, r9
 8013e22:	4640      	mov	r0, r8
 8013e24:	4649      	mov	r1, r9
 8013e26:	f7ec fbff 	bl	8000628 <__aeabi_dmul>
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	4b4e      	ldr	r3, [pc, #312]	; (8013f68 <__kernel_cos+0x178>)
 8013e2e:	4604      	mov	r4, r0
 8013e30:	460d      	mov	r5, r1
 8013e32:	f7ec fbf9 	bl	8000628 <__aeabi_dmul>
 8013e36:	a340      	add	r3, pc, #256	; (adr r3, 8013f38 <__kernel_cos+0x148>)
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	4682      	mov	sl, r0
 8013e3e:	468b      	mov	fp, r1
 8013e40:	4620      	mov	r0, r4
 8013e42:	4629      	mov	r1, r5
 8013e44:	f7ec fbf0 	bl	8000628 <__aeabi_dmul>
 8013e48:	a33d      	add	r3, pc, #244	; (adr r3, 8013f40 <__kernel_cos+0x150>)
 8013e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4e:	f7ec fa35 	bl	80002bc <__adddf3>
 8013e52:	4622      	mov	r2, r4
 8013e54:	462b      	mov	r3, r5
 8013e56:	f7ec fbe7 	bl	8000628 <__aeabi_dmul>
 8013e5a:	a33b      	add	r3, pc, #236	; (adr r3, 8013f48 <__kernel_cos+0x158>)
 8013e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e60:	f7ec fa2a 	bl	80002b8 <__aeabi_dsub>
 8013e64:	4622      	mov	r2, r4
 8013e66:	462b      	mov	r3, r5
 8013e68:	f7ec fbde 	bl	8000628 <__aeabi_dmul>
 8013e6c:	a338      	add	r3, pc, #224	; (adr r3, 8013f50 <__kernel_cos+0x160>)
 8013e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e72:	f7ec fa23 	bl	80002bc <__adddf3>
 8013e76:	4622      	mov	r2, r4
 8013e78:	462b      	mov	r3, r5
 8013e7a:	f7ec fbd5 	bl	8000628 <__aeabi_dmul>
 8013e7e:	a336      	add	r3, pc, #216	; (adr r3, 8013f58 <__kernel_cos+0x168>)
 8013e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e84:	f7ec fa18 	bl	80002b8 <__aeabi_dsub>
 8013e88:	4622      	mov	r2, r4
 8013e8a:	462b      	mov	r3, r5
 8013e8c:	f7ec fbcc 	bl	8000628 <__aeabi_dmul>
 8013e90:	a333      	add	r3, pc, #204	; (adr r3, 8013f60 <__kernel_cos+0x170>)
 8013e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e96:	f7ec fa11 	bl	80002bc <__adddf3>
 8013e9a:	4622      	mov	r2, r4
 8013e9c:	462b      	mov	r3, r5
 8013e9e:	f7ec fbc3 	bl	8000628 <__aeabi_dmul>
 8013ea2:	4622      	mov	r2, r4
 8013ea4:	462b      	mov	r3, r5
 8013ea6:	f7ec fbbf 	bl	8000628 <__aeabi_dmul>
 8013eaa:	ec53 2b18 	vmov	r2, r3, d8
 8013eae:	4604      	mov	r4, r0
 8013eb0:	460d      	mov	r5, r1
 8013eb2:	4640      	mov	r0, r8
 8013eb4:	4649      	mov	r1, r9
 8013eb6:	f7ec fbb7 	bl	8000628 <__aeabi_dmul>
 8013eba:	460b      	mov	r3, r1
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f7ec f9f9 	bl	80002b8 <__aeabi_dsub>
 8013ec6:	4b29      	ldr	r3, [pc, #164]	; (8013f6c <__kernel_cos+0x17c>)
 8013ec8:	429e      	cmp	r6, r3
 8013eca:	4680      	mov	r8, r0
 8013ecc:	4689      	mov	r9, r1
 8013ece:	dc11      	bgt.n	8013ef4 <__kernel_cos+0x104>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	4650      	mov	r0, sl
 8013ed6:	4659      	mov	r1, fp
 8013ed8:	f7ec f9ee 	bl	80002b8 <__aeabi_dsub>
 8013edc:	460b      	mov	r3, r1
 8013ede:	4924      	ldr	r1, [pc, #144]	; (8013f70 <__kernel_cos+0x180>)
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	f7ec f9e8 	bl	80002b8 <__aeabi_dsub>
 8013ee8:	ecbd 8b02 	vpop	{d8}
 8013eec:	ec41 0b10 	vmov	d0, r0, r1
 8013ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef4:	4b1f      	ldr	r3, [pc, #124]	; (8013f74 <__kernel_cos+0x184>)
 8013ef6:	491e      	ldr	r1, [pc, #120]	; (8013f70 <__kernel_cos+0x180>)
 8013ef8:	429e      	cmp	r6, r3
 8013efa:	bfcc      	ite	gt
 8013efc:	4d1e      	ldrgt	r5, [pc, #120]	; (8013f78 <__kernel_cos+0x188>)
 8013efe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013f02:	2400      	movs	r4, #0
 8013f04:	4622      	mov	r2, r4
 8013f06:	462b      	mov	r3, r5
 8013f08:	2000      	movs	r0, #0
 8013f0a:	f7ec f9d5 	bl	80002b8 <__aeabi_dsub>
 8013f0e:	4622      	mov	r2, r4
 8013f10:	4606      	mov	r6, r0
 8013f12:	460f      	mov	r7, r1
 8013f14:	462b      	mov	r3, r5
 8013f16:	4650      	mov	r0, sl
 8013f18:	4659      	mov	r1, fp
 8013f1a:	f7ec f9cd 	bl	80002b8 <__aeabi_dsub>
 8013f1e:	4642      	mov	r2, r8
 8013f20:	464b      	mov	r3, r9
 8013f22:	f7ec f9c9 	bl	80002b8 <__aeabi_dsub>
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	4639      	mov	r1, r7
 8013f2e:	e7d9      	b.n	8013ee4 <__kernel_cos+0xf4>
 8013f30:	2000      	movs	r0, #0
 8013f32:	490f      	ldr	r1, [pc, #60]	; (8013f70 <__kernel_cos+0x180>)
 8013f34:	e7d8      	b.n	8013ee8 <__kernel_cos+0xf8>
 8013f36:	bf00      	nop
 8013f38:	be8838d4 	.word	0xbe8838d4
 8013f3c:	bda8fae9 	.word	0xbda8fae9
 8013f40:	bdb4b1c4 	.word	0xbdb4b1c4
 8013f44:	3e21ee9e 	.word	0x3e21ee9e
 8013f48:	809c52ad 	.word	0x809c52ad
 8013f4c:	3e927e4f 	.word	0x3e927e4f
 8013f50:	19cb1590 	.word	0x19cb1590
 8013f54:	3efa01a0 	.word	0x3efa01a0
 8013f58:	16c15177 	.word	0x16c15177
 8013f5c:	3f56c16c 	.word	0x3f56c16c
 8013f60:	5555554c 	.word	0x5555554c
 8013f64:	3fa55555 	.word	0x3fa55555
 8013f68:	3fe00000 	.word	0x3fe00000
 8013f6c:	3fd33332 	.word	0x3fd33332
 8013f70:	3ff00000 	.word	0x3ff00000
 8013f74:	3fe90000 	.word	0x3fe90000
 8013f78:	3fd20000 	.word	0x3fd20000
 8013f7c:	00000000 	.word	0x00000000

08013f80 <__kernel_rem_pio2>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	ed2d 8b02 	vpush	{d8}
 8013f88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013f8c:	1ed4      	subs	r4, r2, #3
 8013f8e:	9308      	str	r3, [sp, #32]
 8013f90:	9101      	str	r1, [sp, #4]
 8013f92:	4bc5      	ldr	r3, [pc, #788]	; (80142a8 <__kernel_rem_pio2+0x328>)
 8013f94:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013f96:	9009      	str	r0, [sp, #36]	; 0x24
 8013f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f9c:	9304      	str	r3, [sp, #16]
 8013f9e:	9b08      	ldr	r3, [sp, #32]
 8013fa0:	3b01      	subs	r3, #1
 8013fa2:	9307      	str	r3, [sp, #28]
 8013fa4:	2318      	movs	r3, #24
 8013fa6:	fb94 f4f3 	sdiv	r4, r4, r3
 8013faa:	f06f 0317 	mvn.w	r3, #23
 8013fae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013fb2:	fb04 3303 	mla	r3, r4, r3, r3
 8013fb6:	eb03 0a02 	add.w	sl, r3, r2
 8013fba:	9b04      	ldr	r3, [sp, #16]
 8013fbc:	9a07      	ldr	r2, [sp, #28]
 8013fbe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014298 <__kernel_rem_pio2+0x318>
 8013fc2:	eb03 0802 	add.w	r8, r3, r2
 8013fc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013fc8:	1aa7      	subs	r7, r4, r2
 8013fca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013fce:	ae22      	add	r6, sp, #136	; 0x88
 8013fd0:	2500      	movs	r5, #0
 8013fd2:	4545      	cmp	r5, r8
 8013fd4:	dd13      	ble.n	8013ffe <__kernel_rem_pio2+0x7e>
 8013fd6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014298 <__kernel_rem_pio2+0x318>
 8013fda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013fde:	2600      	movs	r6, #0
 8013fe0:	9b04      	ldr	r3, [sp, #16]
 8013fe2:	429e      	cmp	r6, r3
 8013fe4:	dc32      	bgt.n	801404c <__kernel_rem_pio2+0xcc>
 8013fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe8:	9302      	str	r3, [sp, #8]
 8013fea:	9b08      	ldr	r3, [sp, #32]
 8013fec:	199d      	adds	r5, r3, r6
 8013fee:	ab22      	add	r3, sp, #136	; 0x88
 8013ff0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013ff4:	9306      	str	r3, [sp, #24]
 8013ff6:	ec59 8b18 	vmov	r8, r9, d8
 8013ffa:	2700      	movs	r7, #0
 8013ffc:	e01f      	b.n	801403e <__kernel_rem_pio2+0xbe>
 8013ffe:	42ef      	cmn	r7, r5
 8014000:	d407      	bmi.n	8014012 <__kernel_rem_pio2+0x92>
 8014002:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014006:	f7ec faa5 	bl	8000554 <__aeabi_i2d>
 801400a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801400e:	3501      	adds	r5, #1
 8014010:	e7df      	b.n	8013fd2 <__kernel_rem_pio2+0x52>
 8014012:	ec51 0b18 	vmov	r0, r1, d8
 8014016:	e7f8      	b.n	801400a <__kernel_rem_pio2+0x8a>
 8014018:	9906      	ldr	r1, [sp, #24]
 801401a:	9d02      	ldr	r5, [sp, #8]
 801401c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014020:	9106      	str	r1, [sp, #24]
 8014022:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014026:	9502      	str	r5, [sp, #8]
 8014028:	f7ec fafe 	bl	8000628 <__aeabi_dmul>
 801402c:	4602      	mov	r2, r0
 801402e:	460b      	mov	r3, r1
 8014030:	4640      	mov	r0, r8
 8014032:	4649      	mov	r1, r9
 8014034:	f7ec f942 	bl	80002bc <__adddf3>
 8014038:	3701      	adds	r7, #1
 801403a:	4680      	mov	r8, r0
 801403c:	4689      	mov	r9, r1
 801403e:	9b07      	ldr	r3, [sp, #28]
 8014040:	429f      	cmp	r7, r3
 8014042:	dde9      	ble.n	8014018 <__kernel_rem_pio2+0x98>
 8014044:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014048:	3601      	adds	r6, #1
 801404a:	e7c9      	b.n	8013fe0 <__kernel_rem_pio2+0x60>
 801404c:	9b04      	ldr	r3, [sp, #16]
 801404e:	aa0e      	add	r2, sp, #56	; 0x38
 8014050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014054:	930c      	str	r3, [sp, #48]	; 0x30
 8014056:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014058:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801405c:	9c04      	ldr	r4, [sp, #16]
 801405e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014060:	ab9a      	add	r3, sp, #616	; 0x268
 8014062:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014066:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801406a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801406e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014072:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014076:	ab9a      	add	r3, sp, #616	; 0x268
 8014078:	445b      	add	r3, fp
 801407a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801407e:	2500      	movs	r5, #0
 8014080:	1b63      	subs	r3, r4, r5
 8014082:	2b00      	cmp	r3, #0
 8014084:	dc78      	bgt.n	8014178 <__kernel_rem_pio2+0x1f8>
 8014086:	4650      	mov	r0, sl
 8014088:	ec49 8b10 	vmov	d0, r8, r9
 801408c:	f000 fc00 	bl	8014890 <scalbn>
 8014090:	ec57 6b10 	vmov	r6, r7, d0
 8014094:	2200      	movs	r2, #0
 8014096:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801409a:	ee10 0a10 	vmov	r0, s0
 801409e:	4639      	mov	r1, r7
 80140a0:	f7ec fac2 	bl	8000628 <__aeabi_dmul>
 80140a4:	ec41 0b10 	vmov	d0, r0, r1
 80140a8:	f000 fb6e 	bl	8014788 <floor>
 80140ac:	2200      	movs	r2, #0
 80140ae:	ec51 0b10 	vmov	r0, r1, d0
 80140b2:	4b7e      	ldr	r3, [pc, #504]	; (80142ac <__kernel_rem_pio2+0x32c>)
 80140b4:	f7ec fab8 	bl	8000628 <__aeabi_dmul>
 80140b8:	4602      	mov	r2, r0
 80140ba:	460b      	mov	r3, r1
 80140bc:	4630      	mov	r0, r6
 80140be:	4639      	mov	r1, r7
 80140c0:	f7ec f8fa 	bl	80002b8 <__aeabi_dsub>
 80140c4:	460f      	mov	r7, r1
 80140c6:	4606      	mov	r6, r0
 80140c8:	f7ec fd5e 	bl	8000b88 <__aeabi_d2iz>
 80140cc:	9006      	str	r0, [sp, #24]
 80140ce:	f7ec fa41 	bl	8000554 <__aeabi_i2d>
 80140d2:	4602      	mov	r2, r0
 80140d4:	460b      	mov	r3, r1
 80140d6:	4630      	mov	r0, r6
 80140d8:	4639      	mov	r1, r7
 80140da:	f7ec f8ed 	bl	80002b8 <__aeabi_dsub>
 80140de:	f1ba 0f00 	cmp.w	sl, #0
 80140e2:	4606      	mov	r6, r0
 80140e4:	460f      	mov	r7, r1
 80140e6:	dd6c      	ble.n	80141c2 <__kernel_rem_pio2+0x242>
 80140e8:	1e62      	subs	r2, r4, #1
 80140ea:	ab0e      	add	r3, sp, #56	; 0x38
 80140ec:	f1ca 0118 	rsb	r1, sl, #24
 80140f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80140f4:	9d06      	ldr	r5, [sp, #24]
 80140f6:	fa40 f301 	asr.w	r3, r0, r1
 80140fa:	441d      	add	r5, r3
 80140fc:	408b      	lsls	r3, r1
 80140fe:	1ac0      	subs	r0, r0, r3
 8014100:	ab0e      	add	r3, sp, #56	; 0x38
 8014102:	9506      	str	r5, [sp, #24]
 8014104:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014108:	f1ca 0317 	rsb	r3, sl, #23
 801410c:	fa40 f303 	asr.w	r3, r0, r3
 8014110:	9302      	str	r3, [sp, #8]
 8014112:	9b02      	ldr	r3, [sp, #8]
 8014114:	2b00      	cmp	r3, #0
 8014116:	dd62      	ble.n	80141de <__kernel_rem_pio2+0x25e>
 8014118:	9b06      	ldr	r3, [sp, #24]
 801411a:	2200      	movs	r2, #0
 801411c:	3301      	adds	r3, #1
 801411e:	9306      	str	r3, [sp, #24]
 8014120:	4615      	mov	r5, r2
 8014122:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014126:	4294      	cmp	r4, r2
 8014128:	f300 8095 	bgt.w	8014256 <__kernel_rem_pio2+0x2d6>
 801412c:	f1ba 0f00 	cmp.w	sl, #0
 8014130:	dd07      	ble.n	8014142 <__kernel_rem_pio2+0x1c2>
 8014132:	f1ba 0f01 	cmp.w	sl, #1
 8014136:	f000 80a2 	beq.w	801427e <__kernel_rem_pio2+0x2fe>
 801413a:	f1ba 0f02 	cmp.w	sl, #2
 801413e:	f000 80c1 	beq.w	80142c4 <__kernel_rem_pio2+0x344>
 8014142:	9b02      	ldr	r3, [sp, #8]
 8014144:	2b02      	cmp	r3, #2
 8014146:	d14a      	bne.n	80141de <__kernel_rem_pio2+0x25e>
 8014148:	4632      	mov	r2, r6
 801414a:	463b      	mov	r3, r7
 801414c:	2000      	movs	r0, #0
 801414e:	4958      	ldr	r1, [pc, #352]	; (80142b0 <__kernel_rem_pio2+0x330>)
 8014150:	f7ec f8b2 	bl	80002b8 <__aeabi_dsub>
 8014154:	4606      	mov	r6, r0
 8014156:	460f      	mov	r7, r1
 8014158:	2d00      	cmp	r5, #0
 801415a:	d040      	beq.n	80141de <__kernel_rem_pio2+0x25e>
 801415c:	4650      	mov	r0, sl
 801415e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80142a0 <__kernel_rem_pio2+0x320>
 8014162:	f000 fb95 	bl	8014890 <scalbn>
 8014166:	4630      	mov	r0, r6
 8014168:	4639      	mov	r1, r7
 801416a:	ec53 2b10 	vmov	r2, r3, d0
 801416e:	f7ec f8a3 	bl	80002b8 <__aeabi_dsub>
 8014172:	4606      	mov	r6, r0
 8014174:	460f      	mov	r7, r1
 8014176:	e032      	b.n	80141de <__kernel_rem_pio2+0x25e>
 8014178:	2200      	movs	r2, #0
 801417a:	4b4e      	ldr	r3, [pc, #312]	; (80142b4 <__kernel_rem_pio2+0x334>)
 801417c:	4640      	mov	r0, r8
 801417e:	4649      	mov	r1, r9
 8014180:	f7ec fa52 	bl	8000628 <__aeabi_dmul>
 8014184:	f7ec fd00 	bl	8000b88 <__aeabi_d2iz>
 8014188:	f7ec f9e4 	bl	8000554 <__aeabi_i2d>
 801418c:	2200      	movs	r2, #0
 801418e:	4b4a      	ldr	r3, [pc, #296]	; (80142b8 <__kernel_rem_pio2+0x338>)
 8014190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014194:	f7ec fa48 	bl	8000628 <__aeabi_dmul>
 8014198:	4602      	mov	r2, r0
 801419a:	460b      	mov	r3, r1
 801419c:	4640      	mov	r0, r8
 801419e:	4649      	mov	r1, r9
 80141a0:	f7ec f88a 	bl	80002b8 <__aeabi_dsub>
 80141a4:	f7ec fcf0 	bl	8000b88 <__aeabi_d2iz>
 80141a8:	ab0e      	add	r3, sp, #56	; 0x38
 80141aa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80141ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80141b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141b6:	f7ec f881 	bl	80002bc <__adddf3>
 80141ba:	3501      	adds	r5, #1
 80141bc:	4680      	mov	r8, r0
 80141be:	4689      	mov	r9, r1
 80141c0:	e75e      	b.n	8014080 <__kernel_rem_pio2+0x100>
 80141c2:	d105      	bne.n	80141d0 <__kernel_rem_pio2+0x250>
 80141c4:	1e63      	subs	r3, r4, #1
 80141c6:	aa0e      	add	r2, sp, #56	; 0x38
 80141c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80141cc:	15c3      	asrs	r3, r0, #23
 80141ce:	e79f      	b.n	8014110 <__kernel_rem_pio2+0x190>
 80141d0:	2200      	movs	r2, #0
 80141d2:	4b3a      	ldr	r3, [pc, #232]	; (80142bc <__kernel_rem_pio2+0x33c>)
 80141d4:	f7ec fcae 	bl	8000b34 <__aeabi_dcmpge>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d139      	bne.n	8014250 <__kernel_rem_pio2+0x2d0>
 80141dc:	9002      	str	r0, [sp, #8]
 80141de:	2200      	movs	r2, #0
 80141e0:	2300      	movs	r3, #0
 80141e2:	4630      	mov	r0, r6
 80141e4:	4639      	mov	r1, r7
 80141e6:	f7ec fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	f000 80c7 	beq.w	801437e <__kernel_rem_pio2+0x3fe>
 80141f0:	1e65      	subs	r5, r4, #1
 80141f2:	462b      	mov	r3, r5
 80141f4:	2200      	movs	r2, #0
 80141f6:	9904      	ldr	r1, [sp, #16]
 80141f8:	428b      	cmp	r3, r1
 80141fa:	da6a      	bge.n	80142d2 <__kernel_rem_pio2+0x352>
 80141fc:	2a00      	cmp	r2, #0
 80141fe:	f000 8088 	beq.w	8014312 <__kernel_rem_pio2+0x392>
 8014202:	ab0e      	add	r3, sp, #56	; 0x38
 8014204:	f1aa 0a18 	sub.w	sl, sl, #24
 8014208:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801420c:	2b00      	cmp	r3, #0
 801420e:	f000 80b4 	beq.w	801437a <__kernel_rem_pio2+0x3fa>
 8014212:	4650      	mov	r0, sl
 8014214:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80142a0 <__kernel_rem_pio2+0x320>
 8014218:	f000 fb3a 	bl	8014890 <scalbn>
 801421c:	00ec      	lsls	r4, r5, #3
 801421e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014220:	191e      	adds	r6, r3, r4
 8014222:	ec59 8b10 	vmov	r8, r9, d0
 8014226:	f106 0a08 	add.w	sl, r6, #8
 801422a:	462f      	mov	r7, r5
 801422c:	2f00      	cmp	r7, #0
 801422e:	f280 80df 	bge.w	80143f0 <__kernel_rem_pio2+0x470>
 8014232:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014298 <__kernel_rem_pio2+0x318>
 8014236:	f04f 0a00 	mov.w	sl, #0
 801423a:	eba5 030a 	sub.w	r3, r5, sl
 801423e:	2b00      	cmp	r3, #0
 8014240:	f2c0 810a 	blt.w	8014458 <__kernel_rem_pio2+0x4d8>
 8014244:	f8df b078 	ldr.w	fp, [pc, #120]	; 80142c0 <__kernel_rem_pio2+0x340>
 8014248:	ec59 8b18 	vmov	r8, r9, d8
 801424c:	2700      	movs	r7, #0
 801424e:	e0f5      	b.n	801443c <__kernel_rem_pio2+0x4bc>
 8014250:	2302      	movs	r3, #2
 8014252:	9302      	str	r3, [sp, #8]
 8014254:	e760      	b.n	8014118 <__kernel_rem_pio2+0x198>
 8014256:	ab0e      	add	r3, sp, #56	; 0x38
 8014258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801425c:	b94d      	cbnz	r5, 8014272 <__kernel_rem_pio2+0x2f2>
 801425e:	b12b      	cbz	r3, 801426c <__kernel_rem_pio2+0x2ec>
 8014260:	a80e      	add	r0, sp, #56	; 0x38
 8014262:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014266:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801426a:	2301      	movs	r3, #1
 801426c:	3201      	adds	r2, #1
 801426e:	461d      	mov	r5, r3
 8014270:	e759      	b.n	8014126 <__kernel_rem_pio2+0x1a6>
 8014272:	a80e      	add	r0, sp, #56	; 0x38
 8014274:	1acb      	subs	r3, r1, r3
 8014276:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801427a:	462b      	mov	r3, r5
 801427c:	e7f6      	b.n	801426c <__kernel_rem_pio2+0x2ec>
 801427e:	1e62      	subs	r2, r4, #1
 8014280:	ab0e      	add	r3, sp, #56	; 0x38
 8014282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014286:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801428a:	a90e      	add	r1, sp, #56	; 0x38
 801428c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014290:	e757      	b.n	8014142 <__kernel_rem_pio2+0x1c2>
 8014292:	bf00      	nop
 8014294:	f3af 8000 	nop.w
	...
 80142a4:	3ff00000 	.word	0x3ff00000
 80142a8:	080195f0 	.word	0x080195f0
 80142ac:	40200000 	.word	0x40200000
 80142b0:	3ff00000 	.word	0x3ff00000
 80142b4:	3e700000 	.word	0x3e700000
 80142b8:	41700000 	.word	0x41700000
 80142bc:	3fe00000 	.word	0x3fe00000
 80142c0:	080195b0 	.word	0x080195b0
 80142c4:	1e62      	subs	r2, r4, #1
 80142c6:	ab0e      	add	r3, sp, #56	; 0x38
 80142c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80142d0:	e7db      	b.n	801428a <__kernel_rem_pio2+0x30a>
 80142d2:	a90e      	add	r1, sp, #56	; 0x38
 80142d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80142d8:	3b01      	subs	r3, #1
 80142da:	430a      	orrs	r2, r1
 80142dc:	e78b      	b.n	80141f6 <__kernel_rem_pio2+0x276>
 80142de:	3301      	adds	r3, #1
 80142e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80142e4:	2900      	cmp	r1, #0
 80142e6:	d0fa      	beq.n	80142de <__kernel_rem_pio2+0x35e>
 80142e8:	9a08      	ldr	r2, [sp, #32]
 80142ea:	4422      	add	r2, r4
 80142ec:	00d2      	lsls	r2, r2, #3
 80142ee:	a922      	add	r1, sp, #136	; 0x88
 80142f0:	18e3      	adds	r3, r4, r3
 80142f2:	9206      	str	r2, [sp, #24]
 80142f4:	440a      	add	r2, r1
 80142f6:	9302      	str	r3, [sp, #8]
 80142f8:	f10b 0108 	add.w	r1, fp, #8
 80142fc:	f102 0308 	add.w	r3, r2, #8
 8014300:	1c66      	adds	r6, r4, #1
 8014302:	910a      	str	r1, [sp, #40]	; 0x28
 8014304:	2500      	movs	r5, #0
 8014306:	930d      	str	r3, [sp, #52]	; 0x34
 8014308:	9b02      	ldr	r3, [sp, #8]
 801430a:	42b3      	cmp	r3, r6
 801430c:	da04      	bge.n	8014318 <__kernel_rem_pio2+0x398>
 801430e:	461c      	mov	r4, r3
 8014310:	e6a6      	b.n	8014060 <__kernel_rem_pio2+0xe0>
 8014312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014314:	2301      	movs	r3, #1
 8014316:	e7e3      	b.n	80142e0 <__kernel_rem_pio2+0x360>
 8014318:	9b06      	ldr	r3, [sp, #24]
 801431a:	18ef      	adds	r7, r5, r3
 801431c:	ab22      	add	r3, sp, #136	; 0x88
 801431e:	441f      	add	r7, r3
 8014320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014322:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014326:	f7ec f915 	bl	8000554 <__aeabi_i2d>
 801432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801432c:	461c      	mov	r4, r3
 801432e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014330:	e9c7 0100 	strd	r0, r1, [r7]
 8014334:	eb03 0b05 	add.w	fp, r3, r5
 8014338:	2700      	movs	r7, #0
 801433a:	f04f 0800 	mov.w	r8, #0
 801433e:	f04f 0900 	mov.w	r9, #0
 8014342:	9b07      	ldr	r3, [sp, #28]
 8014344:	429f      	cmp	r7, r3
 8014346:	dd08      	ble.n	801435a <__kernel_rem_pio2+0x3da>
 8014348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801434a:	aa72      	add	r2, sp, #456	; 0x1c8
 801434c:	18eb      	adds	r3, r5, r3
 801434e:	4413      	add	r3, r2
 8014350:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014354:	3601      	adds	r6, #1
 8014356:	3508      	adds	r5, #8
 8014358:	e7d6      	b.n	8014308 <__kernel_rem_pio2+0x388>
 801435a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801435e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014362:	f7ec f961 	bl	8000628 <__aeabi_dmul>
 8014366:	4602      	mov	r2, r0
 8014368:	460b      	mov	r3, r1
 801436a:	4640      	mov	r0, r8
 801436c:	4649      	mov	r1, r9
 801436e:	f7eb ffa5 	bl	80002bc <__adddf3>
 8014372:	3701      	adds	r7, #1
 8014374:	4680      	mov	r8, r0
 8014376:	4689      	mov	r9, r1
 8014378:	e7e3      	b.n	8014342 <__kernel_rem_pio2+0x3c2>
 801437a:	3d01      	subs	r5, #1
 801437c:	e741      	b.n	8014202 <__kernel_rem_pio2+0x282>
 801437e:	f1ca 0000 	rsb	r0, sl, #0
 8014382:	ec47 6b10 	vmov	d0, r6, r7
 8014386:	f000 fa83 	bl	8014890 <scalbn>
 801438a:	ec57 6b10 	vmov	r6, r7, d0
 801438e:	2200      	movs	r2, #0
 8014390:	4b99      	ldr	r3, [pc, #612]	; (80145f8 <__kernel_rem_pio2+0x678>)
 8014392:	ee10 0a10 	vmov	r0, s0
 8014396:	4639      	mov	r1, r7
 8014398:	f7ec fbcc 	bl	8000b34 <__aeabi_dcmpge>
 801439c:	b1f8      	cbz	r0, 80143de <__kernel_rem_pio2+0x45e>
 801439e:	2200      	movs	r2, #0
 80143a0:	4b96      	ldr	r3, [pc, #600]	; (80145fc <__kernel_rem_pio2+0x67c>)
 80143a2:	4630      	mov	r0, r6
 80143a4:	4639      	mov	r1, r7
 80143a6:	f7ec f93f 	bl	8000628 <__aeabi_dmul>
 80143aa:	f7ec fbed 	bl	8000b88 <__aeabi_d2iz>
 80143ae:	4680      	mov	r8, r0
 80143b0:	f7ec f8d0 	bl	8000554 <__aeabi_i2d>
 80143b4:	2200      	movs	r2, #0
 80143b6:	4b90      	ldr	r3, [pc, #576]	; (80145f8 <__kernel_rem_pio2+0x678>)
 80143b8:	f7ec f936 	bl	8000628 <__aeabi_dmul>
 80143bc:	460b      	mov	r3, r1
 80143be:	4602      	mov	r2, r0
 80143c0:	4639      	mov	r1, r7
 80143c2:	4630      	mov	r0, r6
 80143c4:	f7eb ff78 	bl	80002b8 <__aeabi_dsub>
 80143c8:	f7ec fbde 	bl	8000b88 <__aeabi_d2iz>
 80143cc:	1c65      	adds	r5, r4, #1
 80143ce:	ab0e      	add	r3, sp, #56	; 0x38
 80143d0:	f10a 0a18 	add.w	sl, sl, #24
 80143d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80143d8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80143dc:	e719      	b.n	8014212 <__kernel_rem_pio2+0x292>
 80143de:	4630      	mov	r0, r6
 80143e0:	4639      	mov	r1, r7
 80143e2:	f7ec fbd1 	bl	8000b88 <__aeabi_d2iz>
 80143e6:	ab0e      	add	r3, sp, #56	; 0x38
 80143e8:	4625      	mov	r5, r4
 80143ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80143ee:	e710      	b.n	8014212 <__kernel_rem_pio2+0x292>
 80143f0:	ab0e      	add	r3, sp, #56	; 0x38
 80143f2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80143f6:	f7ec f8ad 	bl	8000554 <__aeabi_i2d>
 80143fa:	4642      	mov	r2, r8
 80143fc:	464b      	mov	r3, r9
 80143fe:	f7ec f913 	bl	8000628 <__aeabi_dmul>
 8014402:	2200      	movs	r2, #0
 8014404:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014408:	4b7c      	ldr	r3, [pc, #496]	; (80145fc <__kernel_rem_pio2+0x67c>)
 801440a:	4640      	mov	r0, r8
 801440c:	4649      	mov	r1, r9
 801440e:	f7ec f90b 	bl	8000628 <__aeabi_dmul>
 8014412:	3f01      	subs	r7, #1
 8014414:	4680      	mov	r8, r0
 8014416:	4689      	mov	r9, r1
 8014418:	e708      	b.n	801422c <__kernel_rem_pio2+0x2ac>
 801441a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014422:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014426:	f7ec f8ff 	bl	8000628 <__aeabi_dmul>
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	4640      	mov	r0, r8
 8014430:	4649      	mov	r1, r9
 8014432:	f7eb ff43 	bl	80002bc <__adddf3>
 8014436:	3701      	adds	r7, #1
 8014438:	4680      	mov	r8, r0
 801443a:	4689      	mov	r9, r1
 801443c:	9b04      	ldr	r3, [sp, #16]
 801443e:	429f      	cmp	r7, r3
 8014440:	dc01      	bgt.n	8014446 <__kernel_rem_pio2+0x4c6>
 8014442:	45ba      	cmp	sl, r7
 8014444:	dae9      	bge.n	801441a <__kernel_rem_pio2+0x49a>
 8014446:	ab4a      	add	r3, sp, #296	; 0x128
 8014448:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801444c:	e9c3 8900 	strd	r8, r9, [r3]
 8014450:	f10a 0a01 	add.w	sl, sl, #1
 8014454:	3e08      	subs	r6, #8
 8014456:	e6f0      	b.n	801423a <__kernel_rem_pio2+0x2ba>
 8014458:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801445a:	2b03      	cmp	r3, #3
 801445c:	d85b      	bhi.n	8014516 <__kernel_rem_pio2+0x596>
 801445e:	e8df f003 	tbb	[pc, r3]
 8014462:	264a      	.short	0x264a
 8014464:	0226      	.short	0x0226
 8014466:	ab9a      	add	r3, sp, #616	; 0x268
 8014468:	441c      	add	r4, r3
 801446a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801446e:	46a2      	mov	sl, r4
 8014470:	46ab      	mov	fp, r5
 8014472:	f1bb 0f00 	cmp.w	fp, #0
 8014476:	dc6c      	bgt.n	8014552 <__kernel_rem_pio2+0x5d2>
 8014478:	46a2      	mov	sl, r4
 801447a:	46ab      	mov	fp, r5
 801447c:	f1bb 0f01 	cmp.w	fp, #1
 8014480:	f300 8086 	bgt.w	8014590 <__kernel_rem_pio2+0x610>
 8014484:	2000      	movs	r0, #0
 8014486:	2100      	movs	r1, #0
 8014488:	2d01      	cmp	r5, #1
 801448a:	f300 80a0 	bgt.w	80145ce <__kernel_rem_pio2+0x64e>
 801448e:	9b02      	ldr	r3, [sp, #8]
 8014490:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014494:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014498:	2b00      	cmp	r3, #0
 801449a:	f040 809e 	bne.w	80145da <__kernel_rem_pio2+0x65a>
 801449e:	9b01      	ldr	r3, [sp, #4]
 80144a0:	e9c3 7800 	strd	r7, r8, [r3]
 80144a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80144a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80144ac:	e033      	b.n	8014516 <__kernel_rem_pio2+0x596>
 80144ae:	3408      	adds	r4, #8
 80144b0:	ab4a      	add	r3, sp, #296	; 0x128
 80144b2:	441c      	add	r4, r3
 80144b4:	462e      	mov	r6, r5
 80144b6:	2000      	movs	r0, #0
 80144b8:	2100      	movs	r1, #0
 80144ba:	2e00      	cmp	r6, #0
 80144bc:	da3a      	bge.n	8014534 <__kernel_rem_pio2+0x5b4>
 80144be:	9b02      	ldr	r3, [sp, #8]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d03d      	beq.n	8014540 <__kernel_rem_pio2+0x5c0>
 80144c4:	4602      	mov	r2, r0
 80144c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144ca:	9c01      	ldr	r4, [sp, #4]
 80144cc:	e9c4 2300 	strd	r2, r3, [r4]
 80144d0:	4602      	mov	r2, r0
 80144d2:	460b      	mov	r3, r1
 80144d4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80144d8:	f7eb feee 	bl	80002b8 <__aeabi_dsub>
 80144dc:	ae4c      	add	r6, sp, #304	; 0x130
 80144de:	2401      	movs	r4, #1
 80144e0:	42a5      	cmp	r5, r4
 80144e2:	da30      	bge.n	8014546 <__kernel_rem_pio2+0x5c6>
 80144e4:	9b02      	ldr	r3, [sp, #8]
 80144e6:	b113      	cbz	r3, 80144ee <__kernel_rem_pio2+0x56e>
 80144e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144ec:	4619      	mov	r1, r3
 80144ee:	9b01      	ldr	r3, [sp, #4]
 80144f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80144f4:	e00f      	b.n	8014516 <__kernel_rem_pio2+0x596>
 80144f6:	ab9a      	add	r3, sp, #616	; 0x268
 80144f8:	441c      	add	r4, r3
 80144fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80144fe:	2000      	movs	r0, #0
 8014500:	2100      	movs	r1, #0
 8014502:	2d00      	cmp	r5, #0
 8014504:	da10      	bge.n	8014528 <__kernel_rem_pio2+0x5a8>
 8014506:	9b02      	ldr	r3, [sp, #8]
 8014508:	b113      	cbz	r3, 8014510 <__kernel_rem_pio2+0x590>
 801450a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801450e:	4619      	mov	r1, r3
 8014510:	9b01      	ldr	r3, [sp, #4]
 8014512:	e9c3 0100 	strd	r0, r1, [r3]
 8014516:	9b06      	ldr	r3, [sp, #24]
 8014518:	f003 0007 	and.w	r0, r3, #7
 801451c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014520:	ecbd 8b02 	vpop	{d8}
 8014524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014528:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801452c:	f7eb fec6 	bl	80002bc <__adddf3>
 8014530:	3d01      	subs	r5, #1
 8014532:	e7e6      	b.n	8014502 <__kernel_rem_pio2+0x582>
 8014534:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014538:	f7eb fec0 	bl	80002bc <__adddf3>
 801453c:	3e01      	subs	r6, #1
 801453e:	e7bc      	b.n	80144ba <__kernel_rem_pio2+0x53a>
 8014540:	4602      	mov	r2, r0
 8014542:	460b      	mov	r3, r1
 8014544:	e7c1      	b.n	80144ca <__kernel_rem_pio2+0x54a>
 8014546:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801454a:	f7eb feb7 	bl	80002bc <__adddf3>
 801454e:	3401      	adds	r4, #1
 8014550:	e7c6      	b.n	80144e0 <__kernel_rem_pio2+0x560>
 8014552:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014556:	ed3a 7b02 	vldmdb	sl!, {d7}
 801455a:	4640      	mov	r0, r8
 801455c:	ec53 2b17 	vmov	r2, r3, d7
 8014560:	4649      	mov	r1, r9
 8014562:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014566:	f7eb fea9 	bl	80002bc <__adddf3>
 801456a:	4602      	mov	r2, r0
 801456c:	460b      	mov	r3, r1
 801456e:	4606      	mov	r6, r0
 8014570:	460f      	mov	r7, r1
 8014572:	4640      	mov	r0, r8
 8014574:	4649      	mov	r1, r9
 8014576:	f7eb fe9f 	bl	80002b8 <__aeabi_dsub>
 801457a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801457e:	f7eb fe9d 	bl	80002bc <__adddf3>
 8014582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014586:	e9ca 0100 	strd	r0, r1, [sl]
 801458a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801458e:	e770      	b.n	8014472 <__kernel_rem_pio2+0x4f2>
 8014590:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014594:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014598:	4630      	mov	r0, r6
 801459a:	ec53 2b17 	vmov	r2, r3, d7
 801459e:	4639      	mov	r1, r7
 80145a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80145a4:	f7eb fe8a 	bl	80002bc <__adddf3>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	4680      	mov	r8, r0
 80145ae:	4689      	mov	r9, r1
 80145b0:	4630      	mov	r0, r6
 80145b2:	4639      	mov	r1, r7
 80145b4:	f7eb fe80 	bl	80002b8 <__aeabi_dsub>
 80145b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145bc:	f7eb fe7e 	bl	80002bc <__adddf3>
 80145c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145c4:	e9ca 0100 	strd	r0, r1, [sl]
 80145c8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80145cc:	e756      	b.n	801447c <__kernel_rem_pio2+0x4fc>
 80145ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80145d2:	f7eb fe73 	bl	80002bc <__adddf3>
 80145d6:	3d01      	subs	r5, #1
 80145d8:	e756      	b.n	8014488 <__kernel_rem_pio2+0x508>
 80145da:	9b01      	ldr	r3, [sp, #4]
 80145dc:	9a01      	ldr	r2, [sp, #4]
 80145de:	601f      	str	r7, [r3, #0]
 80145e0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80145e4:	605c      	str	r4, [r3, #4]
 80145e6:	609d      	str	r5, [r3, #8]
 80145e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80145ec:	60d3      	str	r3, [r2, #12]
 80145ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145f2:	6110      	str	r0, [r2, #16]
 80145f4:	6153      	str	r3, [r2, #20]
 80145f6:	e78e      	b.n	8014516 <__kernel_rem_pio2+0x596>
 80145f8:	41700000 	.word	0x41700000
 80145fc:	3e700000 	.word	0x3e700000

08014600 <__kernel_sin>:
 8014600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014604:	ec55 4b10 	vmov	r4, r5, d0
 8014608:	b085      	sub	sp, #20
 801460a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801460e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014612:	ed8d 1b00 	vstr	d1, [sp]
 8014616:	9002      	str	r0, [sp, #8]
 8014618:	da06      	bge.n	8014628 <__kernel_sin+0x28>
 801461a:	ee10 0a10 	vmov	r0, s0
 801461e:	4629      	mov	r1, r5
 8014620:	f7ec fab2 	bl	8000b88 <__aeabi_d2iz>
 8014624:	2800      	cmp	r0, #0
 8014626:	d051      	beq.n	80146cc <__kernel_sin+0xcc>
 8014628:	4622      	mov	r2, r4
 801462a:	462b      	mov	r3, r5
 801462c:	4620      	mov	r0, r4
 801462e:	4629      	mov	r1, r5
 8014630:	f7eb fffa 	bl	8000628 <__aeabi_dmul>
 8014634:	4682      	mov	sl, r0
 8014636:	468b      	mov	fp, r1
 8014638:	4602      	mov	r2, r0
 801463a:	460b      	mov	r3, r1
 801463c:	4620      	mov	r0, r4
 801463e:	4629      	mov	r1, r5
 8014640:	f7eb fff2 	bl	8000628 <__aeabi_dmul>
 8014644:	a341      	add	r3, pc, #260	; (adr r3, 801474c <__kernel_sin+0x14c>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	4680      	mov	r8, r0
 801464c:	4689      	mov	r9, r1
 801464e:	4650      	mov	r0, sl
 8014650:	4659      	mov	r1, fp
 8014652:	f7eb ffe9 	bl	8000628 <__aeabi_dmul>
 8014656:	a33f      	add	r3, pc, #252	; (adr r3, 8014754 <__kernel_sin+0x154>)
 8014658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465c:	f7eb fe2c 	bl	80002b8 <__aeabi_dsub>
 8014660:	4652      	mov	r2, sl
 8014662:	465b      	mov	r3, fp
 8014664:	f7eb ffe0 	bl	8000628 <__aeabi_dmul>
 8014668:	a33c      	add	r3, pc, #240	; (adr r3, 801475c <__kernel_sin+0x15c>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	f7eb fe25 	bl	80002bc <__adddf3>
 8014672:	4652      	mov	r2, sl
 8014674:	465b      	mov	r3, fp
 8014676:	f7eb ffd7 	bl	8000628 <__aeabi_dmul>
 801467a:	a33a      	add	r3, pc, #232	; (adr r3, 8014764 <__kernel_sin+0x164>)
 801467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014680:	f7eb fe1a 	bl	80002b8 <__aeabi_dsub>
 8014684:	4652      	mov	r2, sl
 8014686:	465b      	mov	r3, fp
 8014688:	f7eb ffce 	bl	8000628 <__aeabi_dmul>
 801468c:	a337      	add	r3, pc, #220	; (adr r3, 801476c <__kernel_sin+0x16c>)
 801468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014692:	f7eb fe13 	bl	80002bc <__adddf3>
 8014696:	9b02      	ldr	r3, [sp, #8]
 8014698:	4606      	mov	r6, r0
 801469a:	460f      	mov	r7, r1
 801469c:	b9db      	cbnz	r3, 80146d6 <__kernel_sin+0xd6>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	4650      	mov	r0, sl
 80146a4:	4659      	mov	r1, fp
 80146a6:	f7eb ffbf 	bl	8000628 <__aeabi_dmul>
 80146aa:	a325      	add	r3, pc, #148	; (adr r3, 8014740 <__kernel_sin+0x140>)
 80146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b0:	f7eb fe02 	bl	80002b8 <__aeabi_dsub>
 80146b4:	4642      	mov	r2, r8
 80146b6:	464b      	mov	r3, r9
 80146b8:	f7eb ffb6 	bl	8000628 <__aeabi_dmul>
 80146bc:	4602      	mov	r2, r0
 80146be:	460b      	mov	r3, r1
 80146c0:	4620      	mov	r0, r4
 80146c2:	4629      	mov	r1, r5
 80146c4:	f7eb fdfa 	bl	80002bc <__adddf3>
 80146c8:	4604      	mov	r4, r0
 80146ca:	460d      	mov	r5, r1
 80146cc:	ec45 4b10 	vmov	d0, r4, r5
 80146d0:	b005      	add	sp, #20
 80146d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d6:	2200      	movs	r2, #0
 80146d8:	4b1b      	ldr	r3, [pc, #108]	; (8014748 <__kernel_sin+0x148>)
 80146da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146de:	f7eb ffa3 	bl	8000628 <__aeabi_dmul>
 80146e2:	4632      	mov	r2, r6
 80146e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146e8:	463b      	mov	r3, r7
 80146ea:	4640      	mov	r0, r8
 80146ec:	4649      	mov	r1, r9
 80146ee:	f7eb ff9b 	bl	8000628 <__aeabi_dmul>
 80146f2:	4602      	mov	r2, r0
 80146f4:	460b      	mov	r3, r1
 80146f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fa:	f7eb fddd 	bl	80002b8 <__aeabi_dsub>
 80146fe:	4652      	mov	r2, sl
 8014700:	465b      	mov	r3, fp
 8014702:	f7eb ff91 	bl	8000628 <__aeabi_dmul>
 8014706:	e9dd 2300 	ldrd	r2, r3, [sp]
 801470a:	f7eb fdd5 	bl	80002b8 <__aeabi_dsub>
 801470e:	a30c      	add	r3, pc, #48	; (adr r3, 8014740 <__kernel_sin+0x140>)
 8014710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014714:	4606      	mov	r6, r0
 8014716:	460f      	mov	r7, r1
 8014718:	4640      	mov	r0, r8
 801471a:	4649      	mov	r1, r9
 801471c:	f7eb ff84 	bl	8000628 <__aeabi_dmul>
 8014720:	4602      	mov	r2, r0
 8014722:	460b      	mov	r3, r1
 8014724:	4630      	mov	r0, r6
 8014726:	4639      	mov	r1, r7
 8014728:	f7eb fdc8 	bl	80002bc <__adddf3>
 801472c:	4602      	mov	r2, r0
 801472e:	460b      	mov	r3, r1
 8014730:	4620      	mov	r0, r4
 8014732:	4629      	mov	r1, r5
 8014734:	f7eb fdc0 	bl	80002b8 <__aeabi_dsub>
 8014738:	e7c6      	b.n	80146c8 <__kernel_sin+0xc8>
 801473a:	bf00      	nop
 801473c:	f3af 8000 	nop.w
 8014740:	55555549 	.word	0x55555549
 8014744:	3fc55555 	.word	0x3fc55555
 8014748:	3fe00000 	.word	0x3fe00000
 801474c:	5acfd57c 	.word	0x5acfd57c
 8014750:	3de5d93a 	.word	0x3de5d93a
 8014754:	8a2b9ceb 	.word	0x8a2b9ceb
 8014758:	3e5ae5e6 	.word	0x3e5ae5e6
 801475c:	57b1fe7d 	.word	0x57b1fe7d
 8014760:	3ec71de3 	.word	0x3ec71de3
 8014764:	19c161d5 	.word	0x19c161d5
 8014768:	3f2a01a0 	.word	0x3f2a01a0
 801476c:	1110f8a6 	.word	0x1110f8a6
 8014770:	3f811111 	.word	0x3f811111

08014774 <fabs>:
 8014774:	ec51 0b10 	vmov	r0, r1, d0
 8014778:	ee10 2a10 	vmov	r2, s0
 801477c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014780:	ec43 2b10 	vmov	d0, r2, r3
 8014784:	4770      	bx	lr
	...

08014788 <floor>:
 8014788:	ec51 0b10 	vmov	r0, r1, d0
 801478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014790:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014794:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014798:	2e13      	cmp	r6, #19
 801479a:	460c      	mov	r4, r1
 801479c:	ee10 5a10 	vmov	r5, s0
 80147a0:	4680      	mov	r8, r0
 80147a2:	dc34      	bgt.n	801480e <floor+0x86>
 80147a4:	2e00      	cmp	r6, #0
 80147a6:	da16      	bge.n	80147d6 <floor+0x4e>
 80147a8:	a335      	add	r3, pc, #212	; (adr r3, 8014880 <floor+0xf8>)
 80147aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ae:	f7eb fd85 	bl	80002bc <__adddf3>
 80147b2:	2200      	movs	r2, #0
 80147b4:	2300      	movs	r3, #0
 80147b6:	f7ec f9c7 	bl	8000b48 <__aeabi_dcmpgt>
 80147ba:	b148      	cbz	r0, 80147d0 <floor+0x48>
 80147bc:	2c00      	cmp	r4, #0
 80147be:	da59      	bge.n	8014874 <floor+0xec>
 80147c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80147c4:	4a30      	ldr	r2, [pc, #192]	; (8014888 <floor+0x100>)
 80147c6:	432b      	orrs	r3, r5
 80147c8:	2500      	movs	r5, #0
 80147ca:	42ab      	cmp	r3, r5
 80147cc:	bf18      	it	ne
 80147ce:	4614      	movne	r4, r2
 80147d0:	4621      	mov	r1, r4
 80147d2:	4628      	mov	r0, r5
 80147d4:	e025      	b.n	8014822 <floor+0x9a>
 80147d6:	4f2d      	ldr	r7, [pc, #180]	; (801488c <floor+0x104>)
 80147d8:	4137      	asrs	r7, r6
 80147da:	ea01 0307 	and.w	r3, r1, r7
 80147de:	4303      	orrs	r3, r0
 80147e0:	d01f      	beq.n	8014822 <floor+0x9a>
 80147e2:	a327      	add	r3, pc, #156	; (adr r3, 8014880 <floor+0xf8>)
 80147e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e8:	f7eb fd68 	bl	80002bc <__adddf3>
 80147ec:	2200      	movs	r2, #0
 80147ee:	2300      	movs	r3, #0
 80147f0:	f7ec f9aa 	bl	8000b48 <__aeabi_dcmpgt>
 80147f4:	2800      	cmp	r0, #0
 80147f6:	d0eb      	beq.n	80147d0 <floor+0x48>
 80147f8:	2c00      	cmp	r4, #0
 80147fa:	bfbe      	ittt	lt
 80147fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014800:	fa43 f606 	asrlt.w	r6, r3, r6
 8014804:	19a4      	addlt	r4, r4, r6
 8014806:	ea24 0407 	bic.w	r4, r4, r7
 801480a:	2500      	movs	r5, #0
 801480c:	e7e0      	b.n	80147d0 <floor+0x48>
 801480e:	2e33      	cmp	r6, #51	; 0x33
 8014810:	dd0b      	ble.n	801482a <floor+0xa2>
 8014812:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014816:	d104      	bne.n	8014822 <floor+0x9a>
 8014818:	ee10 2a10 	vmov	r2, s0
 801481c:	460b      	mov	r3, r1
 801481e:	f7eb fd4d 	bl	80002bc <__adddf3>
 8014822:	ec41 0b10 	vmov	d0, r0, r1
 8014826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801482a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801482e:	f04f 33ff 	mov.w	r3, #4294967295
 8014832:	fa23 f707 	lsr.w	r7, r3, r7
 8014836:	4207      	tst	r7, r0
 8014838:	d0f3      	beq.n	8014822 <floor+0x9a>
 801483a:	a311      	add	r3, pc, #68	; (adr r3, 8014880 <floor+0xf8>)
 801483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014840:	f7eb fd3c 	bl	80002bc <__adddf3>
 8014844:	2200      	movs	r2, #0
 8014846:	2300      	movs	r3, #0
 8014848:	f7ec f97e 	bl	8000b48 <__aeabi_dcmpgt>
 801484c:	2800      	cmp	r0, #0
 801484e:	d0bf      	beq.n	80147d0 <floor+0x48>
 8014850:	2c00      	cmp	r4, #0
 8014852:	da02      	bge.n	801485a <floor+0xd2>
 8014854:	2e14      	cmp	r6, #20
 8014856:	d103      	bne.n	8014860 <floor+0xd8>
 8014858:	3401      	adds	r4, #1
 801485a:	ea25 0507 	bic.w	r5, r5, r7
 801485e:	e7b7      	b.n	80147d0 <floor+0x48>
 8014860:	2301      	movs	r3, #1
 8014862:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014866:	fa03 f606 	lsl.w	r6, r3, r6
 801486a:	4435      	add	r5, r6
 801486c:	4545      	cmp	r5, r8
 801486e:	bf38      	it	cc
 8014870:	18e4      	addcc	r4, r4, r3
 8014872:	e7f2      	b.n	801485a <floor+0xd2>
 8014874:	2500      	movs	r5, #0
 8014876:	462c      	mov	r4, r5
 8014878:	e7aa      	b.n	80147d0 <floor+0x48>
 801487a:	bf00      	nop
 801487c:	f3af 8000 	nop.w
 8014880:	8800759c 	.word	0x8800759c
 8014884:	7e37e43c 	.word	0x7e37e43c
 8014888:	bff00000 	.word	0xbff00000
 801488c:	000fffff 	.word	0x000fffff

08014890 <scalbn>:
 8014890:	b570      	push	{r4, r5, r6, lr}
 8014892:	ec55 4b10 	vmov	r4, r5, d0
 8014896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801489a:	4606      	mov	r6, r0
 801489c:	462b      	mov	r3, r5
 801489e:	b9aa      	cbnz	r2, 80148cc <scalbn+0x3c>
 80148a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80148a4:	4323      	orrs	r3, r4
 80148a6:	d03b      	beq.n	8014920 <scalbn+0x90>
 80148a8:	4b31      	ldr	r3, [pc, #196]	; (8014970 <scalbn+0xe0>)
 80148aa:	4629      	mov	r1, r5
 80148ac:	2200      	movs	r2, #0
 80148ae:	ee10 0a10 	vmov	r0, s0
 80148b2:	f7eb feb9 	bl	8000628 <__aeabi_dmul>
 80148b6:	4b2f      	ldr	r3, [pc, #188]	; (8014974 <scalbn+0xe4>)
 80148b8:	429e      	cmp	r6, r3
 80148ba:	4604      	mov	r4, r0
 80148bc:	460d      	mov	r5, r1
 80148be:	da12      	bge.n	80148e6 <scalbn+0x56>
 80148c0:	a327      	add	r3, pc, #156	; (adr r3, 8014960 <scalbn+0xd0>)
 80148c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c6:	f7eb feaf 	bl	8000628 <__aeabi_dmul>
 80148ca:	e009      	b.n	80148e0 <scalbn+0x50>
 80148cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80148d0:	428a      	cmp	r2, r1
 80148d2:	d10c      	bne.n	80148ee <scalbn+0x5e>
 80148d4:	ee10 2a10 	vmov	r2, s0
 80148d8:	4620      	mov	r0, r4
 80148da:	4629      	mov	r1, r5
 80148dc:	f7eb fcee 	bl	80002bc <__adddf3>
 80148e0:	4604      	mov	r4, r0
 80148e2:	460d      	mov	r5, r1
 80148e4:	e01c      	b.n	8014920 <scalbn+0x90>
 80148e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80148ea:	460b      	mov	r3, r1
 80148ec:	3a36      	subs	r2, #54	; 0x36
 80148ee:	4432      	add	r2, r6
 80148f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80148f4:	428a      	cmp	r2, r1
 80148f6:	dd0b      	ble.n	8014910 <scalbn+0x80>
 80148f8:	ec45 4b11 	vmov	d1, r4, r5
 80148fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014968 <scalbn+0xd8>
 8014900:	f000 f83c 	bl	801497c <copysign>
 8014904:	a318      	add	r3, pc, #96	; (adr r3, 8014968 <scalbn+0xd8>)
 8014906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490a:	ec51 0b10 	vmov	r0, r1, d0
 801490e:	e7da      	b.n	80148c6 <scalbn+0x36>
 8014910:	2a00      	cmp	r2, #0
 8014912:	dd08      	ble.n	8014926 <scalbn+0x96>
 8014914:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014918:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801491c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014920:	ec45 4b10 	vmov	d0, r4, r5
 8014924:	bd70      	pop	{r4, r5, r6, pc}
 8014926:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801492a:	da0d      	bge.n	8014948 <scalbn+0xb8>
 801492c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014930:	429e      	cmp	r6, r3
 8014932:	ec45 4b11 	vmov	d1, r4, r5
 8014936:	dce1      	bgt.n	80148fc <scalbn+0x6c>
 8014938:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014960 <scalbn+0xd0>
 801493c:	f000 f81e 	bl	801497c <copysign>
 8014940:	a307      	add	r3, pc, #28	; (adr r3, 8014960 <scalbn+0xd0>)
 8014942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014946:	e7e0      	b.n	801490a <scalbn+0x7a>
 8014948:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801494c:	3236      	adds	r2, #54	; 0x36
 801494e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014952:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014956:	4620      	mov	r0, r4
 8014958:	4629      	mov	r1, r5
 801495a:	2200      	movs	r2, #0
 801495c:	4b06      	ldr	r3, [pc, #24]	; (8014978 <scalbn+0xe8>)
 801495e:	e7b2      	b.n	80148c6 <scalbn+0x36>
 8014960:	c2f8f359 	.word	0xc2f8f359
 8014964:	01a56e1f 	.word	0x01a56e1f
 8014968:	8800759c 	.word	0x8800759c
 801496c:	7e37e43c 	.word	0x7e37e43c
 8014970:	43500000 	.word	0x43500000
 8014974:	ffff3cb0 	.word	0xffff3cb0
 8014978:	3c900000 	.word	0x3c900000

0801497c <copysign>:
 801497c:	ec51 0b10 	vmov	r0, r1, d0
 8014980:	ee11 0a90 	vmov	r0, s3
 8014984:	ee10 2a10 	vmov	r2, s0
 8014988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801498c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014990:	ea41 0300 	orr.w	r3, r1, r0
 8014994:	ec43 2b10 	vmov	d0, r2, r3
 8014998:	4770      	bx	lr
	...

0801499c <__errno>:
 801499c:	4b01      	ldr	r3, [pc, #4]	; (80149a4 <__errno+0x8>)
 801499e:	6818      	ldr	r0, [r3, #0]
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	2000000c 	.word	0x2000000c

080149a8 <__libc_init_array>:
 80149a8:	b570      	push	{r4, r5, r6, lr}
 80149aa:	4e0d      	ldr	r6, [pc, #52]	; (80149e0 <__libc_init_array+0x38>)
 80149ac:	4c0d      	ldr	r4, [pc, #52]	; (80149e4 <__libc_init_array+0x3c>)
 80149ae:	1ba4      	subs	r4, r4, r6
 80149b0:	10a4      	asrs	r4, r4, #2
 80149b2:	2500      	movs	r5, #0
 80149b4:	42a5      	cmp	r5, r4
 80149b6:	d109      	bne.n	80149cc <__libc_init_array+0x24>
 80149b8:	4e0b      	ldr	r6, [pc, #44]	; (80149e8 <__libc_init_array+0x40>)
 80149ba:	4c0c      	ldr	r4, [pc, #48]	; (80149ec <__libc_init_array+0x44>)
 80149bc:	f004 f9e8 	bl	8018d90 <_init>
 80149c0:	1ba4      	subs	r4, r4, r6
 80149c2:	10a4      	asrs	r4, r4, #2
 80149c4:	2500      	movs	r5, #0
 80149c6:	42a5      	cmp	r5, r4
 80149c8:	d105      	bne.n	80149d6 <__libc_init_array+0x2e>
 80149ca:	bd70      	pop	{r4, r5, r6, pc}
 80149cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149d0:	4798      	blx	r3
 80149d2:	3501      	adds	r5, #1
 80149d4:	e7ee      	b.n	80149b4 <__libc_init_array+0xc>
 80149d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149da:	4798      	blx	r3
 80149dc:	3501      	adds	r5, #1
 80149de:	e7f2      	b.n	80149c6 <__libc_init_array+0x1e>
 80149e0:	0801993c 	.word	0x0801993c
 80149e4:	0801993c 	.word	0x0801993c
 80149e8:	0801993c 	.word	0x0801993c
 80149ec:	08019944 	.word	0x08019944

080149f0 <memcpy>:
 80149f0:	b510      	push	{r4, lr}
 80149f2:	1e43      	subs	r3, r0, #1
 80149f4:	440a      	add	r2, r1
 80149f6:	4291      	cmp	r1, r2
 80149f8:	d100      	bne.n	80149fc <memcpy+0xc>
 80149fa:	bd10      	pop	{r4, pc}
 80149fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a04:	e7f7      	b.n	80149f6 <memcpy+0x6>

08014a06 <memset>:
 8014a06:	4402      	add	r2, r0
 8014a08:	4603      	mov	r3, r0
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d100      	bne.n	8014a10 <memset+0xa>
 8014a0e:	4770      	bx	lr
 8014a10:	f803 1b01 	strb.w	r1, [r3], #1
 8014a14:	e7f9      	b.n	8014a0a <memset+0x4>

08014a16 <__cvt>:
 8014a16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a1a:	ec55 4b10 	vmov	r4, r5, d0
 8014a1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014a20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	460e      	mov	r6, r1
 8014a28:	4691      	mov	r9, r2
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	bfb8      	it	lt
 8014a2e:	4622      	movlt	r2, r4
 8014a30:	462b      	mov	r3, r5
 8014a32:	f027 0720 	bic.w	r7, r7, #32
 8014a36:	bfbb      	ittet	lt
 8014a38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014a3c:	461d      	movlt	r5, r3
 8014a3e:	2300      	movge	r3, #0
 8014a40:	232d      	movlt	r3, #45	; 0x2d
 8014a42:	bfb8      	it	lt
 8014a44:	4614      	movlt	r4, r2
 8014a46:	2f46      	cmp	r7, #70	; 0x46
 8014a48:	700b      	strb	r3, [r1, #0]
 8014a4a:	d004      	beq.n	8014a56 <__cvt+0x40>
 8014a4c:	2f45      	cmp	r7, #69	; 0x45
 8014a4e:	d100      	bne.n	8014a52 <__cvt+0x3c>
 8014a50:	3601      	adds	r6, #1
 8014a52:	2102      	movs	r1, #2
 8014a54:	e000      	b.n	8014a58 <__cvt+0x42>
 8014a56:	2103      	movs	r1, #3
 8014a58:	ab03      	add	r3, sp, #12
 8014a5a:	9301      	str	r3, [sp, #4]
 8014a5c:	ab02      	add	r3, sp, #8
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	4632      	mov	r2, r6
 8014a62:	4653      	mov	r3, sl
 8014a64:	ec45 4b10 	vmov	d0, r4, r5
 8014a68:	f001 fdfe 	bl	8016668 <_dtoa_r>
 8014a6c:	2f47      	cmp	r7, #71	; 0x47
 8014a6e:	4680      	mov	r8, r0
 8014a70:	d102      	bne.n	8014a78 <__cvt+0x62>
 8014a72:	f019 0f01 	tst.w	r9, #1
 8014a76:	d026      	beq.n	8014ac6 <__cvt+0xb0>
 8014a78:	2f46      	cmp	r7, #70	; 0x46
 8014a7a:	eb08 0906 	add.w	r9, r8, r6
 8014a7e:	d111      	bne.n	8014aa4 <__cvt+0x8e>
 8014a80:	f898 3000 	ldrb.w	r3, [r8]
 8014a84:	2b30      	cmp	r3, #48	; 0x30
 8014a86:	d10a      	bne.n	8014a9e <__cvt+0x88>
 8014a88:	2200      	movs	r2, #0
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	4629      	mov	r1, r5
 8014a90:	f7ec f832 	bl	8000af8 <__aeabi_dcmpeq>
 8014a94:	b918      	cbnz	r0, 8014a9e <__cvt+0x88>
 8014a96:	f1c6 0601 	rsb	r6, r6, #1
 8014a9a:	f8ca 6000 	str.w	r6, [sl]
 8014a9e:	f8da 3000 	ldr.w	r3, [sl]
 8014aa2:	4499      	add	r9, r3
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	4629      	mov	r1, r5
 8014aac:	f7ec f824 	bl	8000af8 <__aeabi_dcmpeq>
 8014ab0:	b938      	cbnz	r0, 8014ac2 <__cvt+0xac>
 8014ab2:	2230      	movs	r2, #48	; 0x30
 8014ab4:	9b03      	ldr	r3, [sp, #12]
 8014ab6:	454b      	cmp	r3, r9
 8014ab8:	d205      	bcs.n	8014ac6 <__cvt+0xb0>
 8014aba:	1c59      	adds	r1, r3, #1
 8014abc:	9103      	str	r1, [sp, #12]
 8014abe:	701a      	strb	r2, [r3, #0]
 8014ac0:	e7f8      	b.n	8014ab4 <__cvt+0x9e>
 8014ac2:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ac6:	9b03      	ldr	r3, [sp, #12]
 8014ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014aca:	eba3 0308 	sub.w	r3, r3, r8
 8014ace:	4640      	mov	r0, r8
 8014ad0:	6013      	str	r3, [r2, #0]
 8014ad2:	b004      	add	sp, #16
 8014ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014ad8 <__exponent>:
 8014ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ada:	2900      	cmp	r1, #0
 8014adc:	4604      	mov	r4, r0
 8014ade:	bfba      	itte	lt
 8014ae0:	4249      	neglt	r1, r1
 8014ae2:	232d      	movlt	r3, #45	; 0x2d
 8014ae4:	232b      	movge	r3, #43	; 0x2b
 8014ae6:	2909      	cmp	r1, #9
 8014ae8:	f804 2b02 	strb.w	r2, [r4], #2
 8014aec:	7043      	strb	r3, [r0, #1]
 8014aee:	dd20      	ble.n	8014b32 <__exponent+0x5a>
 8014af0:	f10d 0307 	add.w	r3, sp, #7
 8014af4:	461f      	mov	r7, r3
 8014af6:	260a      	movs	r6, #10
 8014af8:	fb91 f5f6 	sdiv	r5, r1, r6
 8014afc:	fb06 1115 	mls	r1, r6, r5, r1
 8014b00:	3130      	adds	r1, #48	; 0x30
 8014b02:	2d09      	cmp	r5, #9
 8014b04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014b08:	f103 32ff 	add.w	r2, r3, #4294967295
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	dc09      	bgt.n	8014b24 <__exponent+0x4c>
 8014b10:	3130      	adds	r1, #48	; 0x30
 8014b12:	3b02      	subs	r3, #2
 8014b14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014b18:	42bb      	cmp	r3, r7
 8014b1a:	4622      	mov	r2, r4
 8014b1c:	d304      	bcc.n	8014b28 <__exponent+0x50>
 8014b1e:	1a10      	subs	r0, r2, r0
 8014b20:	b003      	add	sp, #12
 8014b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b24:	4613      	mov	r3, r2
 8014b26:	e7e7      	b.n	8014af8 <__exponent+0x20>
 8014b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b2c:	f804 2b01 	strb.w	r2, [r4], #1
 8014b30:	e7f2      	b.n	8014b18 <__exponent+0x40>
 8014b32:	2330      	movs	r3, #48	; 0x30
 8014b34:	4419      	add	r1, r3
 8014b36:	7083      	strb	r3, [r0, #2]
 8014b38:	1d02      	adds	r2, r0, #4
 8014b3a:	70c1      	strb	r1, [r0, #3]
 8014b3c:	e7ef      	b.n	8014b1e <__exponent+0x46>
	...

08014b40 <_printf_float>:
 8014b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b44:	b08d      	sub	sp, #52	; 0x34
 8014b46:	460c      	mov	r4, r1
 8014b48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014b4c:	4616      	mov	r6, r2
 8014b4e:	461f      	mov	r7, r3
 8014b50:	4605      	mov	r5, r0
 8014b52:	f002 fe7b 	bl	801784c <_localeconv_r>
 8014b56:	6803      	ldr	r3, [r0, #0]
 8014b58:	9304      	str	r3, [sp, #16]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7eb fb50 	bl	8000200 <strlen>
 8014b60:	2300      	movs	r3, #0
 8014b62:	930a      	str	r3, [sp, #40]	; 0x28
 8014b64:	f8d8 3000 	ldr.w	r3, [r8]
 8014b68:	9005      	str	r0, [sp, #20]
 8014b6a:	3307      	adds	r3, #7
 8014b6c:	f023 0307 	bic.w	r3, r3, #7
 8014b70:	f103 0208 	add.w	r2, r3, #8
 8014b74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014b78:	f8d4 b000 	ldr.w	fp, [r4]
 8014b7c:	f8c8 2000 	str.w	r2, [r8]
 8014b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014b88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b90:	9307      	str	r3, [sp, #28]
 8014b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8014b96:	f04f 32ff 	mov.w	r2, #4294967295
 8014b9a:	4ba7      	ldr	r3, [pc, #668]	; (8014e38 <_printf_float+0x2f8>)
 8014b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ba0:	f7eb ffdc 	bl	8000b5c <__aeabi_dcmpun>
 8014ba4:	bb70      	cbnz	r0, 8014c04 <_printf_float+0xc4>
 8014ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8014baa:	4ba3      	ldr	r3, [pc, #652]	; (8014e38 <_printf_float+0x2f8>)
 8014bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014bb0:	f7eb ffb6 	bl	8000b20 <__aeabi_dcmple>
 8014bb4:	bb30      	cbnz	r0, 8014c04 <_printf_float+0xc4>
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	2300      	movs	r3, #0
 8014bba:	4640      	mov	r0, r8
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	f7eb ffa5 	bl	8000b0c <__aeabi_dcmplt>
 8014bc2:	b110      	cbz	r0, 8014bca <_printf_float+0x8a>
 8014bc4:	232d      	movs	r3, #45	; 0x2d
 8014bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bca:	4a9c      	ldr	r2, [pc, #624]	; (8014e3c <_printf_float+0x2fc>)
 8014bcc:	4b9c      	ldr	r3, [pc, #624]	; (8014e40 <_printf_float+0x300>)
 8014bce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014bd2:	bf8c      	ite	hi
 8014bd4:	4690      	movhi	r8, r2
 8014bd6:	4698      	movls	r8, r3
 8014bd8:	2303      	movs	r3, #3
 8014bda:	f02b 0204 	bic.w	r2, fp, #4
 8014bde:	6123      	str	r3, [r4, #16]
 8014be0:	6022      	str	r2, [r4, #0]
 8014be2:	f04f 0900 	mov.w	r9, #0
 8014be6:	9700      	str	r7, [sp, #0]
 8014be8:	4633      	mov	r3, r6
 8014bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8014bec:	4621      	mov	r1, r4
 8014bee:	4628      	mov	r0, r5
 8014bf0:	f000 f9e6 	bl	8014fc0 <_printf_common>
 8014bf4:	3001      	adds	r0, #1
 8014bf6:	f040 808d 	bne.w	8014d14 <_printf_float+0x1d4>
 8014bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfe:	b00d      	add	sp, #52	; 0x34
 8014c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c04:	4642      	mov	r2, r8
 8014c06:	464b      	mov	r3, r9
 8014c08:	4640      	mov	r0, r8
 8014c0a:	4649      	mov	r1, r9
 8014c0c:	f7eb ffa6 	bl	8000b5c <__aeabi_dcmpun>
 8014c10:	b110      	cbz	r0, 8014c18 <_printf_float+0xd8>
 8014c12:	4a8c      	ldr	r2, [pc, #560]	; (8014e44 <_printf_float+0x304>)
 8014c14:	4b8c      	ldr	r3, [pc, #560]	; (8014e48 <_printf_float+0x308>)
 8014c16:	e7da      	b.n	8014bce <_printf_float+0x8e>
 8014c18:	6861      	ldr	r1, [r4, #4]
 8014c1a:	1c4b      	adds	r3, r1, #1
 8014c1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014c20:	a80a      	add	r0, sp, #40	; 0x28
 8014c22:	d13e      	bne.n	8014ca2 <_printf_float+0x162>
 8014c24:	2306      	movs	r3, #6
 8014c26:	6063      	str	r3, [r4, #4]
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014c2e:	ab09      	add	r3, sp, #36	; 0x24
 8014c30:	9300      	str	r3, [sp, #0]
 8014c32:	ec49 8b10 	vmov	d0, r8, r9
 8014c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c3a:	6022      	str	r2, [r4, #0]
 8014c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8014c40:	6861      	ldr	r1, [r4, #4]
 8014c42:	4628      	mov	r0, r5
 8014c44:	f7ff fee7 	bl	8014a16 <__cvt>
 8014c48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014c4c:	2b47      	cmp	r3, #71	; 0x47
 8014c4e:	4680      	mov	r8, r0
 8014c50:	d109      	bne.n	8014c66 <_printf_float+0x126>
 8014c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c54:	1cd8      	adds	r0, r3, #3
 8014c56:	db02      	blt.n	8014c5e <_printf_float+0x11e>
 8014c58:	6862      	ldr	r2, [r4, #4]
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	dd47      	ble.n	8014cee <_printf_float+0x1ae>
 8014c5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014c62:	fa5f fa8a 	uxtb.w	sl, sl
 8014c66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c6c:	d824      	bhi.n	8014cb8 <_printf_float+0x178>
 8014c6e:	3901      	subs	r1, #1
 8014c70:	4652      	mov	r2, sl
 8014c72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c76:	9109      	str	r1, [sp, #36]	; 0x24
 8014c78:	f7ff ff2e 	bl	8014ad8 <__exponent>
 8014c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c7e:	1813      	adds	r3, r2, r0
 8014c80:	2a01      	cmp	r2, #1
 8014c82:	4681      	mov	r9, r0
 8014c84:	6123      	str	r3, [r4, #16]
 8014c86:	dc02      	bgt.n	8014c8e <_printf_float+0x14e>
 8014c88:	6822      	ldr	r2, [r4, #0]
 8014c8a:	07d1      	lsls	r1, r2, #31
 8014c8c:	d501      	bpl.n	8014c92 <_printf_float+0x152>
 8014c8e:	3301      	adds	r3, #1
 8014c90:	6123      	str	r3, [r4, #16]
 8014c92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d0a5      	beq.n	8014be6 <_printf_float+0xa6>
 8014c9a:	232d      	movs	r3, #45	; 0x2d
 8014c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ca0:	e7a1      	b.n	8014be6 <_printf_float+0xa6>
 8014ca2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014ca6:	f000 8177 	beq.w	8014f98 <_printf_float+0x458>
 8014caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014cae:	d1bb      	bne.n	8014c28 <_printf_float+0xe8>
 8014cb0:	2900      	cmp	r1, #0
 8014cb2:	d1b9      	bne.n	8014c28 <_printf_float+0xe8>
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	e7b6      	b.n	8014c26 <_printf_float+0xe6>
 8014cb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014cbc:	d119      	bne.n	8014cf2 <_printf_float+0x1b2>
 8014cbe:	2900      	cmp	r1, #0
 8014cc0:	6863      	ldr	r3, [r4, #4]
 8014cc2:	dd0c      	ble.n	8014cde <_printf_float+0x19e>
 8014cc4:	6121      	str	r1, [r4, #16]
 8014cc6:	b913      	cbnz	r3, 8014cce <_printf_float+0x18e>
 8014cc8:	6822      	ldr	r2, [r4, #0]
 8014cca:	07d2      	lsls	r2, r2, #31
 8014ccc:	d502      	bpl.n	8014cd4 <_printf_float+0x194>
 8014cce:	3301      	adds	r3, #1
 8014cd0:	440b      	add	r3, r1
 8014cd2:	6123      	str	r3, [r4, #16]
 8014cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8014cd8:	f04f 0900 	mov.w	r9, #0
 8014cdc:	e7d9      	b.n	8014c92 <_printf_float+0x152>
 8014cde:	b913      	cbnz	r3, 8014ce6 <_printf_float+0x1a6>
 8014ce0:	6822      	ldr	r2, [r4, #0]
 8014ce2:	07d0      	lsls	r0, r2, #31
 8014ce4:	d501      	bpl.n	8014cea <_printf_float+0x1aa>
 8014ce6:	3302      	adds	r3, #2
 8014ce8:	e7f3      	b.n	8014cd2 <_printf_float+0x192>
 8014cea:	2301      	movs	r3, #1
 8014cec:	e7f1      	b.n	8014cd2 <_printf_float+0x192>
 8014cee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014cf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	db05      	blt.n	8014d06 <_printf_float+0x1c6>
 8014cfa:	6822      	ldr	r2, [r4, #0]
 8014cfc:	6123      	str	r3, [r4, #16]
 8014cfe:	07d1      	lsls	r1, r2, #31
 8014d00:	d5e8      	bpl.n	8014cd4 <_printf_float+0x194>
 8014d02:	3301      	adds	r3, #1
 8014d04:	e7e5      	b.n	8014cd2 <_printf_float+0x192>
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	bfd4      	ite	le
 8014d0a:	f1c3 0302 	rsble	r3, r3, #2
 8014d0e:	2301      	movgt	r3, #1
 8014d10:	4413      	add	r3, r2
 8014d12:	e7de      	b.n	8014cd2 <_printf_float+0x192>
 8014d14:	6823      	ldr	r3, [r4, #0]
 8014d16:	055a      	lsls	r2, r3, #21
 8014d18:	d407      	bmi.n	8014d2a <_printf_float+0x1ea>
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	4642      	mov	r2, r8
 8014d1e:	4631      	mov	r1, r6
 8014d20:	4628      	mov	r0, r5
 8014d22:	47b8      	blx	r7
 8014d24:	3001      	adds	r0, #1
 8014d26:	d12b      	bne.n	8014d80 <_printf_float+0x240>
 8014d28:	e767      	b.n	8014bfa <_printf_float+0xba>
 8014d2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014d2e:	f240 80dc 	bls.w	8014eea <_printf_float+0x3aa>
 8014d32:	2200      	movs	r2, #0
 8014d34:	2300      	movs	r3, #0
 8014d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d3a:	f7eb fedd 	bl	8000af8 <__aeabi_dcmpeq>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d033      	beq.n	8014daa <_printf_float+0x26a>
 8014d42:	2301      	movs	r3, #1
 8014d44:	4a41      	ldr	r2, [pc, #260]	; (8014e4c <_printf_float+0x30c>)
 8014d46:	4631      	mov	r1, r6
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b8      	blx	r7
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	f43f af54 	beq.w	8014bfa <_printf_float+0xba>
 8014d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d56:	429a      	cmp	r2, r3
 8014d58:	db02      	blt.n	8014d60 <_printf_float+0x220>
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	07d8      	lsls	r0, r3, #31
 8014d5e:	d50f      	bpl.n	8014d80 <_printf_float+0x240>
 8014d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d64:	4631      	mov	r1, r6
 8014d66:	4628      	mov	r0, r5
 8014d68:	47b8      	blx	r7
 8014d6a:	3001      	adds	r0, #1
 8014d6c:	f43f af45 	beq.w	8014bfa <_printf_float+0xba>
 8014d70:	f04f 0800 	mov.w	r8, #0
 8014d74:	f104 091a 	add.w	r9, r4, #26
 8014d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	4543      	cmp	r3, r8
 8014d7e:	dc09      	bgt.n	8014d94 <_printf_float+0x254>
 8014d80:	6823      	ldr	r3, [r4, #0]
 8014d82:	079b      	lsls	r3, r3, #30
 8014d84:	f100 8103 	bmi.w	8014f8e <_printf_float+0x44e>
 8014d88:	68e0      	ldr	r0, [r4, #12]
 8014d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d8c:	4298      	cmp	r0, r3
 8014d8e:	bfb8      	it	lt
 8014d90:	4618      	movlt	r0, r3
 8014d92:	e734      	b.n	8014bfe <_printf_float+0xbe>
 8014d94:	2301      	movs	r3, #1
 8014d96:	464a      	mov	r2, r9
 8014d98:	4631      	mov	r1, r6
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	47b8      	blx	r7
 8014d9e:	3001      	adds	r0, #1
 8014da0:	f43f af2b 	beq.w	8014bfa <_printf_float+0xba>
 8014da4:	f108 0801 	add.w	r8, r8, #1
 8014da8:	e7e6      	b.n	8014d78 <_printf_float+0x238>
 8014daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	dc2b      	bgt.n	8014e08 <_printf_float+0x2c8>
 8014db0:	2301      	movs	r3, #1
 8014db2:	4a26      	ldr	r2, [pc, #152]	; (8014e4c <_printf_float+0x30c>)
 8014db4:	4631      	mov	r1, r6
 8014db6:	4628      	mov	r0, r5
 8014db8:	47b8      	blx	r7
 8014dba:	3001      	adds	r0, #1
 8014dbc:	f43f af1d 	beq.w	8014bfa <_printf_float+0xba>
 8014dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dc2:	b923      	cbnz	r3, 8014dce <_printf_float+0x28e>
 8014dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dc6:	b913      	cbnz	r3, 8014dce <_printf_float+0x28e>
 8014dc8:	6823      	ldr	r3, [r4, #0]
 8014dca:	07d9      	lsls	r1, r3, #31
 8014dcc:	d5d8      	bpl.n	8014d80 <_printf_float+0x240>
 8014dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dd2:	4631      	mov	r1, r6
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	47b8      	blx	r7
 8014dd8:	3001      	adds	r0, #1
 8014dda:	f43f af0e 	beq.w	8014bfa <_printf_float+0xba>
 8014dde:	f04f 0900 	mov.w	r9, #0
 8014de2:	f104 0a1a 	add.w	sl, r4, #26
 8014de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de8:	425b      	negs	r3, r3
 8014dea:	454b      	cmp	r3, r9
 8014dec:	dc01      	bgt.n	8014df2 <_printf_float+0x2b2>
 8014dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df0:	e794      	b.n	8014d1c <_printf_float+0x1dc>
 8014df2:	2301      	movs	r3, #1
 8014df4:	4652      	mov	r2, sl
 8014df6:	4631      	mov	r1, r6
 8014df8:	4628      	mov	r0, r5
 8014dfa:	47b8      	blx	r7
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	f43f aefc 	beq.w	8014bfa <_printf_float+0xba>
 8014e02:	f109 0901 	add.w	r9, r9, #1
 8014e06:	e7ee      	b.n	8014de6 <_printf_float+0x2a6>
 8014e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	bfa8      	it	ge
 8014e10:	461a      	movge	r2, r3
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	4691      	mov	r9, r2
 8014e16:	dd07      	ble.n	8014e28 <_printf_float+0x2e8>
 8014e18:	4613      	mov	r3, r2
 8014e1a:	4631      	mov	r1, r6
 8014e1c:	4642      	mov	r2, r8
 8014e1e:	4628      	mov	r0, r5
 8014e20:	47b8      	blx	r7
 8014e22:	3001      	adds	r0, #1
 8014e24:	f43f aee9 	beq.w	8014bfa <_printf_float+0xba>
 8014e28:	f104 031a 	add.w	r3, r4, #26
 8014e2c:	f04f 0b00 	mov.w	fp, #0
 8014e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e34:	9306      	str	r3, [sp, #24]
 8014e36:	e015      	b.n	8014e64 <_printf_float+0x324>
 8014e38:	7fefffff 	.word	0x7fefffff
 8014e3c:	08019604 	.word	0x08019604
 8014e40:	08019600 	.word	0x08019600
 8014e44:	0801960c 	.word	0x0801960c
 8014e48:	08019608 	.word	0x08019608
 8014e4c:	0801982b 	.word	0x0801982b
 8014e50:	2301      	movs	r3, #1
 8014e52:	9a06      	ldr	r2, [sp, #24]
 8014e54:	4631      	mov	r1, r6
 8014e56:	4628      	mov	r0, r5
 8014e58:	47b8      	blx	r7
 8014e5a:	3001      	adds	r0, #1
 8014e5c:	f43f aecd 	beq.w	8014bfa <_printf_float+0xba>
 8014e60:	f10b 0b01 	add.w	fp, fp, #1
 8014e64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014e68:	ebaa 0309 	sub.w	r3, sl, r9
 8014e6c:	455b      	cmp	r3, fp
 8014e6e:	dcef      	bgt.n	8014e50 <_printf_float+0x310>
 8014e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e74:	429a      	cmp	r2, r3
 8014e76:	44d0      	add	r8, sl
 8014e78:	db15      	blt.n	8014ea6 <_printf_float+0x366>
 8014e7a:	6823      	ldr	r3, [r4, #0]
 8014e7c:	07da      	lsls	r2, r3, #31
 8014e7e:	d412      	bmi.n	8014ea6 <_printf_float+0x366>
 8014e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e84:	eba3 020a 	sub.w	r2, r3, sl
 8014e88:	eba3 0a01 	sub.w	sl, r3, r1
 8014e8c:	4592      	cmp	sl, r2
 8014e8e:	bfa8      	it	ge
 8014e90:	4692      	movge	sl, r2
 8014e92:	f1ba 0f00 	cmp.w	sl, #0
 8014e96:	dc0e      	bgt.n	8014eb6 <_printf_float+0x376>
 8014e98:	f04f 0800 	mov.w	r8, #0
 8014e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ea0:	f104 091a 	add.w	r9, r4, #26
 8014ea4:	e019      	b.n	8014eda <_printf_float+0x39a>
 8014ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eaa:	4631      	mov	r1, r6
 8014eac:	4628      	mov	r0, r5
 8014eae:	47b8      	blx	r7
 8014eb0:	3001      	adds	r0, #1
 8014eb2:	d1e5      	bne.n	8014e80 <_printf_float+0x340>
 8014eb4:	e6a1      	b.n	8014bfa <_printf_float+0xba>
 8014eb6:	4653      	mov	r3, sl
 8014eb8:	4642      	mov	r2, r8
 8014eba:	4631      	mov	r1, r6
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	47b8      	blx	r7
 8014ec0:	3001      	adds	r0, #1
 8014ec2:	d1e9      	bne.n	8014e98 <_printf_float+0x358>
 8014ec4:	e699      	b.n	8014bfa <_printf_float+0xba>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	464a      	mov	r2, r9
 8014eca:	4631      	mov	r1, r6
 8014ecc:	4628      	mov	r0, r5
 8014ece:	47b8      	blx	r7
 8014ed0:	3001      	adds	r0, #1
 8014ed2:	f43f ae92 	beq.w	8014bfa <_printf_float+0xba>
 8014ed6:	f108 0801 	add.w	r8, r8, #1
 8014eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ede:	1a9b      	subs	r3, r3, r2
 8014ee0:	eba3 030a 	sub.w	r3, r3, sl
 8014ee4:	4543      	cmp	r3, r8
 8014ee6:	dcee      	bgt.n	8014ec6 <_printf_float+0x386>
 8014ee8:	e74a      	b.n	8014d80 <_printf_float+0x240>
 8014eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eec:	2a01      	cmp	r2, #1
 8014eee:	dc01      	bgt.n	8014ef4 <_printf_float+0x3b4>
 8014ef0:	07db      	lsls	r3, r3, #31
 8014ef2:	d53a      	bpl.n	8014f6a <_printf_float+0x42a>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	4642      	mov	r2, r8
 8014ef8:	4631      	mov	r1, r6
 8014efa:	4628      	mov	r0, r5
 8014efc:	47b8      	blx	r7
 8014efe:	3001      	adds	r0, #1
 8014f00:	f43f ae7b 	beq.w	8014bfa <_printf_float+0xba>
 8014f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f08:	4631      	mov	r1, r6
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	47b8      	blx	r7
 8014f0e:	3001      	adds	r0, #1
 8014f10:	f108 0801 	add.w	r8, r8, #1
 8014f14:	f43f ae71 	beq.w	8014bfa <_printf_float+0xba>
 8014f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f24:	2300      	movs	r3, #0
 8014f26:	f7eb fde7 	bl	8000af8 <__aeabi_dcmpeq>
 8014f2a:	b9c8      	cbnz	r0, 8014f60 <_printf_float+0x420>
 8014f2c:	4653      	mov	r3, sl
 8014f2e:	4642      	mov	r2, r8
 8014f30:	4631      	mov	r1, r6
 8014f32:	4628      	mov	r0, r5
 8014f34:	47b8      	blx	r7
 8014f36:	3001      	adds	r0, #1
 8014f38:	d10e      	bne.n	8014f58 <_printf_float+0x418>
 8014f3a:	e65e      	b.n	8014bfa <_printf_float+0xba>
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	4652      	mov	r2, sl
 8014f40:	4631      	mov	r1, r6
 8014f42:	4628      	mov	r0, r5
 8014f44:	47b8      	blx	r7
 8014f46:	3001      	adds	r0, #1
 8014f48:	f43f ae57 	beq.w	8014bfa <_printf_float+0xba>
 8014f4c:	f108 0801 	add.w	r8, r8, #1
 8014f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f52:	3b01      	subs	r3, #1
 8014f54:	4543      	cmp	r3, r8
 8014f56:	dcf1      	bgt.n	8014f3c <_printf_float+0x3fc>
 8014f58:	464b      	mov	r3, r9
 8014f5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f5e:	e6de      	b.n	8014d1e <_printf_float+0x1de>
 8014f60:	f04f 0800 	mov.w	r8, #0
 8014f64:	f104 0a1a 	add.w	sl, r4, #26
 8014f68:	e7f2      	b.n	8014f50 <_printf_float+0x410>
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	e7df      	b.n	8014f2e <_printf_float+0x3ee>
 8014f6e:	2301      	movs	r3, #1
 8014f70:	464a      	mov	r2, r9
 8014f72:	4631      	mov	r1, r6
 8014f74:	4628      	mov	r0, r5
 8014f76:	47b8      	blx	r7
 8014f78:	3001      	adds	r0, #1
 8014f7a:	f43f ae3e 	beq.w	8014bfa <_printf_float+0xba>
 8014f7e:	f108 0801 	add.w	r8, r8, #1
 8014f82:	68e3      	ldr	r3, [r4, #12]
 8014f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f86:	1a9b      	subs	r3, r3, r2
 8014f88:	4543      	cmp	r3, r8
 8014f8a:	dcf0      	bgt.n	8014f6e <_printf_float+0x42e>
 8014f8c:	e6fc      	b.n	8014d88 <_printf_float+0x248>
 8014f8e:	f04f 0800 	mov.w	r8, #0
 8014f92:	f104 0919 	add.w	r9, r4, #25
 8014f96:	e7f4      	b.n	8014f82 <_printf_float+0x442>
 8014f98:	2900      	cmp	r1, #0
 8014f9a:	f43f ae8b 	beq.w	8014cb4 <_printf_float+0x174>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014fa4:	ab09      	add	r3, sp, #36	; 0x24
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	ec49 8b10 	vmov	d0, r8, r9
 8014fac:	6022      	str	r2, [r4, #0]
 8014fae:	f8cd a004 	str.w	sl, [sp, #4]
 8014fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	f7ff fd2d 	bl	8014a16 <__cvt>
 8014fbc:	4680      	mov	r8, r0
 8014fbe:	e648      	b.n	8014c52 <_printf_float+0x112>

08014fc0 <_printf_common>:
 8014fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc4:	4691      	mov	r9, r2
 8014fc6:	461f      	mov	r7, r3
 8014fc8:	688a      	ldr	r2, [r1, #8]
 8014fca:	690b      	ldr	r3, [r1, #16]
 8014fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	bfb8      	it	lt
 8014fd4:	4613      	movlt	r3, r2
 8014fd6:	f8c9 3000 	str.w	r3, [r9]
 8014fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fde:	4606      	mov	r6, r0
 8014fe0:	460c      	mov	r4, r1
 8014fe2:	b112      	cbz	r2, 8014fea <_printf_common+0x2a>
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	f8c9 3000 	str.w	r3, [r9]
 8014fea:	6823      	ldr	r3, [r4, #0]
 8014fec:	0699      	lsls	r1, r3, #26
 8014fee:	bf42      	ittt	mi
 8014ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ff4:	3302      	addmi	r3, #2
 8014ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8014ffa:	6825      	ldr	r5, [r4, #0]
 8014ffc:	f015 0506 	ands.w	r5, r5, #6
 8015000:	d107      	bne.n	8015012 <_printf_common+0x52>
 8015002:	f104 0a19 	add.w	sl, r4, #25
 8015006:	68e3      	ldr	r3, [r4, #12]
 8015008:	f8d9 2000 	ldr.w	r2, [r9]
 801500c:	1a9b      	subs	r3, r3, r2
 801500e:	42ab      	cmp	r3, r5
 8015010:	dc28      	bgt.n	8015064 <_printf_common+0xa4>
 8015012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015016:	6822      	ldr	r2, [r4, #0]
 8015018:	3300      	adds	r3, #0
 801501a:	bf18      	it	ne
 801501c:	2301      	movne	r3, #1
 801501e:	0692      	lsls	r2, r2, #26
 8015020:	d42d      	bmi.n	801507e <_printf_common+0xbe>
 8015022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015026:	4639      	mov	r1, r7
 8015028:	4630      	mov	r0, r6
 801502a:	47c0      	blx	r8
 801502c:	3001      	adds	r0, #1
 801502e:	d020      	beq.n	8015072 <_printf_common+0xb2>
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	68e5      	ldr	r5, [r4, #12]
 8015034:	f8d9 2000 	ldr.w	r2, [r9]
 8015038:	f003 0306 	and.w	r3, r3, #6
 801503c:	2b04      	cmp	r3, #4
 801503e:	bf08      	it	eq
 8015040:	1aad      	subeq	r5, r5, r2
 8015042:	68a3      	ldr	r3, [r4, #8]
 8015044:	6922      	ldr	r2, [r4, #16]
 8015046:	bf0c      	ite	eq
 8015048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801504c:	2500      	movne	r5, #0
 801504e:	4293      	cmp	r3, r2
 8015050:	bfc4      	itt	gt
 8015052:	1a9b      	subgt	r3, r3, r2
 8015054:	18ed      	addgt	r5, r5, r3
 8015056:	f04f 0900 	mov.w	r9, #0
 801505a:	341a      	adds	r4, #26
 801505c:	454d      	cmp	r5, r9
 801505e:	d11a      	bne.n	8015096 <_printf_common+0xd6>
 8015060:	2000      	movs	r0, #0
 8015062:	e008      	b.n	8015076 <_printf_common+0xb6>
 8015064:	2301      	movs	r3, #1
 8015066:	4652      	mov	r2, sl
 8015068:	4639      	mov	r1, r7
 801506a:	4630      	mov	r0, r6
 801506c:	47c0      	blx	r8
 801506e:	3001      	adds	r0, #1
 8015070:	d103      	bne.n	801507a <_printf_common+0xba>
 8015072:	f04f 30ff 	mov.w	r0, #4294967295
 8015076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801507a:	3501      	adds	r5, #1
 801507c:	e7c3      	b.n	8015006 <_printf_common+0x46>
 801507e:	18e1      	adds	r1, r4, r3
 8015080:	1c5a      	adds	r2, r3, #1
 8015082:	2030      	movs	r0, #48	; 0x30
 8015084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015088:	4422      	add	r2, r4
 801508a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801508e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015092:	3302      	adds	r3, #2
 8015094:	e7c5      	b.n	8015022 <_printf_common+0x62>
 8015096:	2301      	movs	r3, #1
 8015098:	4622      	mov	r2, r4
 801509a:	4639      	mov	r1, r7
 801509c:	4630      	mov	r0, r6
 801509e:	47c0      	blx	r8
 80150a0:	3001      	adds	r0, #1
 80150a2:	d0e6      	beq.n	8015072 <_printf_common+0xb2>
 80150a4:	f109 0901 	add.w	r9, r9, #1
 80150a8:	e7d8      	b.n	801505c <_printf_common+0x9c>
	...

080150ac <_printf_i>:
 80150ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80150b4:	460c      	mov	r4, r1
 80150b6:	7e09      	ldrb	r1, [r1, #24]
 80150b8:	b085      	sub	sp, #20
 80150ba:	296e      	cmp	r1, #110	; 0x6e
 80150bc:	4617      	mov	r7, r2
 80150be:	4606      	mov	r6, r0
 80150c0:	4698      	mov	r8, r3
 80150c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150c4:	f000 80b3 	beq.w	801522e <_printf_i+0x182>
 80150c8:	d822      	bhi.n	8015110 <_printf_i+0x64>
 80150ca:	2963      	cmp	r1, #99	; 0x63
 80150cc:	d036      	beq.n	801513c <_printf_i+0x90>
 80150ce:	d80a      	bhi.n	80150e6 <_printf_i+0x3a>
 80150d0:	2900      	cmp	r1, #0
 80150d2:	f000 80b9 	beq.w	8015248 <_printf_i+0x19c>
 80150d6:	2958      	cmp	r1, #88	; 0x58
 80150d8:	f000 8083 	beq.w	80151e2 <_printf_i+0x136>
 80150dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80150e4:	e032      	b.n	801514c <_printf_i+0xa0>
 80150e6:	2964      	cmp	r1, #100	; 0x64
 80150e8:	d001      	beq.n	80150ee <_printf_i+0x42>
 80150ea:	2969      	cmp	r1, #105	; 0x69
 80150ec:	d1f6      	bne.n	80150dc <_printf_i+0x30>
 80150ee:	6820      	ldr	r0, [r4, #0]
 80150f0:	6813      	ldr	r3, [r2, #0]
 80150f2:	0605      	lsls	r5, r0, #24
 80150f4:	f103 0104 	add.w	r1, r3, #4
 80150f8:	d52a      	bpl.n	8015150 <_printf_i+0xa4>
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	6011      	str	r1, [r2, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	da03      	bge.n	801510a <_printf_i+0x5e>
 8015102:	222d      	movs	r2, #45	; 0x2d
 8015104:	425b      	negs	r3, r3
 8015106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801510a:	486f      	ldr	r0, [pc, #444]	; (80152c8 <_printf_i+0x21c>)
 801510c:	220a      	movs	r2, #10
 801510e:	e039      	b.n	8015184 <_printf_i+0xd8>
 8015110:	2973      	cmp	r1, #115	; 0x73
 8015112:	f000 809d 	beq.w	8015250 <_printf_i+0x1a4>
 8015116:	d808      	bhi.n	801512a <_printf_i+0x7e>
 8015118:	296f      	cmp	r1, #111	; 0x6f
 801511a:	d020      	beq.n	801515e <_printf_i+0xb2>
 801511c:	2970      	cmp	r1, #112	; 0x70
 801511e:	d1dd      	bne.n	80150dc <_printf_i+0x30>
 8015120:	6823      	ldr	r3, [r4, #0]
 8015122:	f043 0320 	orr.w	r3, r3, #32
 8015126:	6023      	str	r3, [r4, #0]
 8015128:	e003      	b.n	8015132 <_printf_i+0x86>
 801512a:	2975      	cmp	r1, #117	; 0x75
 801512c:	d017      	beq.n	801515e <_printf_i+0xb2>
 801512e:	2978      	cmp	r1, #120	; 0x78
 8015130:	d1d4      	bne.n	80150dc <_printf_i+0x30>
 8015132:	2378      	movs	r3, #120	; 0x78
 8015134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015138:	4864      	ldr	r0, [pc, #400]	; (80152cc <_printf_i+0x220>)
 801513a:	e055      	b.n	80151e8 <_printf_i+0x13c>
 801513c:	6813      	ldr	r3, [r2, #0]
 801513e:	1d19      	adds	r1, r3, #4
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	6011      	str	r1, [r2, #0]
 8015144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801514c:	2301      	movs	r3, #1
 801514e:	e08c      	b.n	801526a <_printf_i+0x1be>
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	6011      	str	r1, [r2, #0]
 8015154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015158:	bf18      	it	ne
 801515a:	b21b      	sxthne	r3, r3
 801515c:	e7cf      	b.n	80150fe <_printf_i+0x52>
 801515e:	6813      	ldr	r3, [r2, #0]
 8015160:	6825      	ldr	r5, [r4, #0]
 8015162:	1d18      	adds	r0, r3, #4
 8015164:	6010      	str	r0, [r2, #0]
 8015166:	0628      	lsls	r0, r5, #24
 8015168:	d501      	bpl.n	801516e <_printf_i+0xc2>
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	e002      	b.n	8015174 <_printf_i+0xc8>
 801516e:	0668      	lsls	r0, r5, #25
 8015170:	d5fb      	bpl.n	801516a <_printf_i+0xbe>
 8015172:	881b      	ldrh	r3, [r3, #0]
 8015174:	4854      	ldr	r0, [pc, #336]	; (80152c8 <_printf_i+0x21c>)
 8015176:	296f      	cmp	r1, #111	; 0x6f
 8015178:	bf14      	ite	ne
 801517a:	220a      	movne	r2, #10
 801517c:	2208      	moveq	r2, #8
 801517e:	2100      	movs	r1, #0
 8015180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015184:	6865      	ldr	r5, [r4, #4]
 8015186:	60a5      	str	r5, [r4, #8]
 8015188:	2d00      	cmp	r5, #0
 801518a:	f2c0 8095 	blt.w	80152b8 <_printf_i+0x20c>
 801518e:	6821      	ldr	r1, [r4, #0]
 8015190:	f021 0104 	bic.w	r1, r1, #4
 8015194:	6021      	str	r1, [r4, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d13d      	bne.n	8015216 <_printf_i+0x16a>
 801519a:	2d00      	cmp	r5, #0
 801519c:	f040 808e 	bne.w	80152bc <_printf_i+0x210>
 80151a0:	4665      	mov	r5, ip
 80151a2:	2a08      	cmp	r2, #8
 80151a4:	d10b      	bne.n	80151be <_printf_i+0x112>
 80151a6:	6823      	ldr	r3, [r4, #0]
 80151a8:	07db      	lsls	r3, r3, #31
 80151aa:	d508      	bpl.n	80151be <_printf_i+0x112>
 80151ac:	6923      	ldr	r3, [r4, #16]
 80151ae:	6862      	ldr	r2, [r4, #4]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	bfde      	ittt	le
 80151b4:	2330      	movle	r3, #48	; 0x30
 80151b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80151be:	ebac 0305 	sub.w	r3, ip, r5
 80151c2:	6123      	str	r3, [r4, #16]
 80151c4:	f8cd 8000 	str.w	r8, [sp]
 80151c8:	463b      	mov	r3, r7
 80151ca:	aa03      	add	r2, sp, #12
 80151cc:	4621      	mov	r1, r4
 80151ce:	4630      	mov	r0, r6
 80151d0:	f7ff fef6 	bl	8014fc0 <_printf_common>
 80151d4:	3001      	adds	r0, #1
 80151d6:	d14d      	bne.n	8015274 <_printf_i+0x1c8>
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295
 80151dc:	b005      	add	sp, #20
 80151de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151e2:	4839      	ldr	r0, [pc, #228]	; (80152c8 <_printf_i+0x21c>)
 80151e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80151e8:	6813      	ldr	r3, [r2, #0]
 80151ea:	6821      	ldr	r1, [r4, #0]
 80151ec:	1d1d      	adds	r5, r3, #4
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	6015      	str	r5, [r2, #0]
 80151f2:	060a      	lsls	r2, r1, #24
 80151f4:	d50b      	bpl.n	801520e <_printf_i+0x162>
 80151f6:	07ca      	lsls	r2, r1, #31
 80151f8:	bf44      	itt	mi
 80151fa:	f041 0120 	orrmi.w	r1, r1, #32
 80151fe:	6021      	strmi	r1, [r4, #0]
 8015200:	b91b      	cbnz	r3, 801520a <_printf_i+0x15e>
 8015202:	6822      	ldr	r2, [r4, #0]
 8015204:	f022 0220 	bic.w	r2, r2, #32
 8015208:	6022      	str	r2, [r4, #0]
 801520a:	2210      	movs	r2, #16
 801520c:	e7b7      	b.n	801517e <_printf_i+0xd2>
 801520e:	064d      	lsls	r5, r1, #25
 8015210:	bf48      	it	mi
 8015212:	b29b      	uxthmi	r3, r3
 8015214:	e7ef      	b.n	80151f6 <_printf_i+0x14a>
 8015216:	4665      	mov	r5, ip
 8015218:	fbb3 f1f2 	udiv	r1, r3, r2
 801521c:	fb02 3311 	mls	r3, r2, r1, r3
 8015220:	5cc3      	ldrb	r3, [r0, r3]
 8015222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015226:	460b      	mov	r3, r1
 8015228:	2900      	cmp	r1, #0
 801522a:	d1f5      	bne.n	8015218 <_printf_i+0x16c>
 801522c:	e7b9      	b.n	80151a2 <_printf_i+0xf6>
 801522e:	6813      	ldr	r3, [r2, #0]
 8015230:	6825      	ldr	r5, [r4, #0]
 8015232:	6961      	ldr	r1, [r4, #20]
 8015234:	1d18      	adds	r0, r3, #4
 8015236:	6010      	str	r0, [r2, #0]
 8015238:	0628      	lsls	r0, r5, #24
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	d501      	bpl.n	8015242 <_printf_i+0x196>
 801523e:	6019      	str	r1, [r3, #0]
 8015240:	e002      	b.n	8015248 <_printf_i+0x19c>
 8015242:	066a      	lsls	r2, r5, #25
 8015244:	d5fb      	bpl.n	801523e <_printf_i+0x192>
 8015246:	8019      	strh	r1, [r3, #0]
 8015248:	2300      	movs	r3, #0
 801524a:	6123      	str	r3, [r4, #16]
 801524c:	4665      	mov	r5, ip
 801524e:	e7b9      	b.n	80151c4 <_printf_i+0x118>
 8015250:	6813      	ldr	r3, [r2, #0]
 8015252:	1d19      	adds	r1, r3, #4
 8015254:	6011      	str	r1, [r2, #0]
 8015256:	681d      	ldr	r5, [r3, #0]
 8015258:	6862      	ldr	r2, [r4, #4]
 801525a:	2100      	movs	r1, #0
 801525c:	4628      	mov	r0, r5
 801525e:	f7ea ffd7 	bl	8000210 <memchr>
 8015262:	b108      	cbz	r0, 8015268 <_printf_i+0x1bc>
 8015264:	1b40      	subs	r0, r0, r5
 8015266:	6060      	str	r0, [r4, #4]
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	6123      	str	r3, [r4, #16]
 801526c:	2300      	movs	r3, #0
 801526e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015272:	e7a7      	b.n	80151c4 <_printf_i+0x118>
 8015274:	6923      	ldr	r3, [r4, #16]
 8015276:	462a      	mov	r2, r5
 8015278:	4639      	mov	r1, r7
 801527a:	4630      	mov	r0, r6
 801527c:	47c0      	blx	r8
 801527e:	3001      	adds	r0, #1
 8015280:	d0aa      	beq.n	80151d8 <_printf_i+0x12c>
 8015282:	6823      	ldr	r3, [r4, #0]
 8015284:	079b      	lsls	r3, r3, #30
 8015286:	d413      	bmi.n	80152b0 <_printf_i+0x204>
 8015288:	68e0      	ldr	r0, [r4, #12]
 801528a:	9b03      	ldr	r3, [sp, #12]
 801528c:	4298      	cmp	r0, r3
 801528e:	bfb8      	it	lt
 8015290:	4618      	movlt	r0, r3
 8015292:	e7a3      	b.n	80151dc <_printf_i+0x130>
 8015294:	2301      	movs	r3, #1
 8015296:	464a      	mov	r2, r9
 8015298:	4639      	mov	r1, r7
 801529a:	4630      	mov	r0, r6
 801529c:	47c0      	blx	r8
 801529e:	3001      	adds	r0, #1
 80152a0:	d09a      	beq.n	80151d8 <_printf_i+0x12c>
 80152a2:	3501      	adds	r5, #1
 80152a4:	68e3      	ldr	r3, [r4, #12]
 80152a6:	9a03      	ldr	r2, [sp, #12]
 80152a8:	1a9b      	subs	r3, r3, r2
 80152aa:	42ab      	cmp	r3, r5
 80152ac:	dcf2      	bgt.n	8015294 <_printf_i+0x1e8>
 80152ae:	e7eb      	b.n	8015288 <_printf_i+0x1dc>
 80152b0:	2500      	movs	r5, #0
 80152b2:	f104 0919 	add.w	r9, r4, #25
 80152b6:	e7f5      	b.n	80152a4 <_printf_i+0x1f8>
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1ac      	bne.n	8015216 <_printf_i+0x16a>
 80152bc:	7803      	ldrb	r3, [r0, #0]
 80152be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80152c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152c6:	e76c      	b.n	80151a2 <_printf_i+0xf6>
 80152c8:	08019610 	.word	0x08019610
 80152cc:	08019621 	.word	0x08019621

080152d0 <_scanf_float>:
 80152d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d4:	469a      	mov	sl, r3
 80152d6:	688b      	ldr	r3, [r1, #8]
 80152d8:	4616      	mov	r6, r2
 80152da:	1e5a      	subs	r2, r3, #1
 80152dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80152e0:	b087      	sub	sp, #28
 80152e2:	bf83      	ittte	hi
 80152e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80152e8:	189b      	addhi	r3, r3, r2
 80152ea:	9301      	strhi	r3, [sp, #4]
 80152ec:	2300      	movls	r3, #0
 80152ee:	bf86      	itte	hi
 80152f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80152f4:	608b      	strhi	r3, [r1, #8]
 80152f6:	9301      	strls	r3, [sp, #4]
 80152f8:	680b      	ldr	r3, [r1, #0]
 80152fa:	4688      	mov	r8, r1
 80152fc:	f04f 0b00 	mov.w	fp, #0
 8015300:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015304:	f848 3b1c 	str.w	r3, [r8], #28
 8015308:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801530c:	4607      	mov	r7, r0
 801530e:	460c      	mov	r4, r1
 8015310:	4645      	mov	r5, r8
 8015312:	465a      	mov	r2, fp
 8015314:	46d9      	mov	r9, fp
 8015316:	f8cd b008 	str.w	fp, [sp, #8]
 801531a:	68a1      	ldr	r1, [r4, #8]
 801531c:	b181      	cbz	r1, 8015340 <_scanf_float+0x70>
 801531e:	6833      	ldr	r3, [r6, #0]
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	2b49      	cmp	r3, #73	; 0x49
 8015324:	d071      	beq.n	801540a <_scanf_float+0x13a>
 8015326:	d84d      	bhi.n	80153c4 <_scanf_float+0xf4>
 8015328:	2b39      	cmp	r3, #57	; 0x39
 801532a:	d840      	bhi.n	80153ae <_scanf_float+0xde>
 801532c:	2b31      	cmp	r3, #49	; 0x31
 801532e:	f080 8088 	bcs.w	8015442 <_scanf_float+0x172>
 8015332:	2b2d      	cmp	r3, #45	; 0x2d
 8015334:	f000 8090 	beq.w	8015458 <_scanf_float+0x188>
 8015338:	d815      	bhi.n	8015366 <_scanf_float+0x96>
 801533a:	2b2b      	cmp	r3, #43	; 0x2b
 801533c:	f000 808c 	beq.w	8015458 <_scanf_float+0x188>
 8015340:	f1b9 0f00 	cmp.w	r9, #0
 8015344:	d003      	beq.n	801534e <_scanf_float+0x7e>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801534c:	6023      	str	r3, [r4, #0]
 801534e:	3a01      	subs	r2, #1
 8015350:	2a01      	cmp	r2, #1
 8015352:	f200 80ea 	bhi.w	801552a <_scanf_float+0x25a>
 8015356:	4545      	cmp	r5, r8
 8015358:	f200 80dc 	bhi.w	8015514 <_scanf_float+0x244>
 801535c:	2601      	movs	r6, #1
 801535e:	4630      	mov	r0, r6
 8015360:	b007      	add	sp, #28
 8015362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015366:	2b2e      	cmp	r3, #46	; 0x2e
 8015368:	f000 809f 	beq.w	80154aa <_scanf_float+0x1da>
 801536c:	2b30      	cmp	r3, #48	; 0x30
 801536e:	d1e7      	bne.n	8015340 <_scanf_float+0x70>
 8015370:	6820      	ldr	r0, [r4, #0]
 8015372:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015376:	d064      	beq.n	8015442 <_scanf_float+0x172>
 8015378:	9b01      	ldr	r3, [sp, #4]
 801537a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801537e:	6020      	str	r0, [r4, #0]
 8015380:	f109 0901 	add.w	r9, r9, #1
 8015384:	b11b      	cbz	r3, 801538e <_scanf_float+0xbe>
 8015386:	3b01      	subs	r3, #1
 8015388:	3101      	adds	r1, #1
 801538a:	9301      	str	r3, [sp, #4]
 801538c:	60a1      	str	r1, [r4, #8]
 801538e:	68a3      	ldr	r3, [r4, #8]
 8015390:	3b01      	subs	r3, #1
 8015392:	60a3      	str	r3, [r4, #8]
 8015394:	6923      	ldr	r3, [r4, #16]
 8015396:	3301      	adds	r3, #1
 8015398:	6123      	str	r3, [r4, #16]
 801539a:	6873      	ldr	r3, [r6, #4]
 801539c:	3b01      	subs	r3, #1
 801539e:	2b00      	cmp	r3, #0
 80153a0:	6073      	str	r3, [r6, #4]
 80153a2:	f340 80ac 	ble.w	80154fe <_scanf_float+0x22e>
 80153a6:	6833      	ldr	r3, [r6, #0]
 80153a8:	3301      	adds	r3, #1
 80153aa:	6033      	str	r3, [r6, #0]
 80153ac:	e7b5      	b.n	801531a <_scanf_float+0x4a>
 80153ae:	2b45      	cmp	r3, #69	; 0x45
 80153b0:	f000 8085 	beq.w	80154be <_scanf_float+0x1ee>
 80153b4:	2b46      	cmp	r3, #70	; 0x46
 80153b6:	d06a      	beq.n	801548e <_scanf_float+0x1be>
 80153b8:	2b41      	cmp	r3, #65	; 0x41
 80153ba:	d1c1      	bne.n	8015340 <_scanf_float+0x70>
 80153bc:	2a01      	cmp	r2, #1
 80153be:	d1bf      	bne.n	8015340 <_scanf_float+0x70>
 80153c0:	2202      	movs	r2, #2
 80153c2:	e046      	b.n	8015452 <_scanf_float+0x182>
 80153c4:	2b65      	cmp	r3, #101	; 0x65
 80153c6:	d07a      	beq.n	80154be <_scanf_float+0x1ee>
 80153c8:	d818      	bhi.n	80153fc <_scanf_float+0x12c>
 80153ca:	2b54      	cmp	r3, #84	; 0x54
 80153cc:	d066      	beq.n	801549c <_scanf_float+0x1cc>
 80153ce:	d811      	bhi.n	80153f4 <_scanf_float+0x124>
 80153d0:	2b4e      	cmp	r3, #78	; 0x4e
 80153d2:	d1b5      	bne.n	8015340 <_scanf_float+0x70>
 80153d4:	2a00      	cmp	r2, #0
 80153d6:	d146      	bne.n	8015466 <_scanf_float+0x196>
 80153d8:	f1b9 0f00 	cmp.w	r9, #0
 80153dc:	d145      	bne.n	801546a <_scanf_float+0x19a>
 80153de:	6821      	ldr	r1, [r4, #0]
 80153e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80153e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80153e8:	d13f      	bne.n	801546a <_scanf_float+0x19a>
 80153ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80153ee:	6021      	str	r1, [r4, #0]
 80153f0:	2201      	movs	r2, #1
 80153f2:	e02e      	b.n	8015452 <_scanf_float+0x182>
 80153f4:	2b59      	cmp	r3, #89	; 0x59
 80153f6:	d01e      	beq.n	8015436 <_scanf_float+0x166>
 80153f8:	2b61      	cmp	r3, #97	; 0x61
 80153fa:	e7de      	b.n	80153ba <_scanf_float+0xea>
 80153fc:	2b6e      	cmp	r3, #110	; 0x6e
 80153fe:	d0e9      	beq.n	80153d4 <_scanf_float+0x104>
 8015400:	d815      	bhi.n	801542e <_scanf_float+0x15e>
 8015402:	2b66      	cmp	r3, #102	; 0x66
 8015404:	d043      	beq.n	801548e <_scanf_float+0x1be>
 8015406:	2b69      	cmp	r3, #105	; 0x69
 8015408:	d19a      	bne.n	8015340 <_scanf_float+0x70>
 801540a:	f1bb 0f00 	cmp.w	fp, #0
 801540e:	d138      	bne.n	8015482 <_scanf_float+0x1b2>
 8015410:	f1b9 0f00 	cmp.w	r9, #0
 8015414:	d197      	bne.n	8015346 <_scanf_float+0x76>
 8015416:	6821      	ldr	r1, [r4, #0]
 8015418:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801541c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015420:	d195      	bne.n	801534e <_scanf_float+0x7e>
 8015422:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015426:	6021      	str	r1, [r4, #0]
 8015428:	f04f 0b01 	mov.w	fp, #1
 801542c:	e011      	b.n	8015452 <_scanf_float+0x182>
 801542e:	2b74      	cmp	r3, #116	; 0x74
 8015430:	d034      	beq.n	801549c <_scanf_float+0x1cc>
 8015432:	2b79      	cmp	r3, #121	; 0x79
 8015434:	d184      	bne.n	8015340 <_scanf_float+0x70>
 8015436:	f1bb 0f07 	cmp.w	fp, #7
 801543a:	d181      	bne.n	8015340 <_scanf_float+0x70>
 801543c:	f04f 0b08 	mov.w	fp, #8
 8015440:	e007      	b.n	8015452 <_scanf_float+0x182>
 8015442:	eb12 0f0b 	cmn.w	r2, fp
 8015446:	f47f af7b 	bne.w	8015340 <_scanf_float+0x70>
 801544a:	6821      	ldr	r1, [r4, #0]
 801544c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015450:	6021      	str	r1, [r4, #0]
 8015452:	702b      	strb	r3, [r5, #0]
 8015454:	3501      	adds	r5, #1
 8015456:	e79a      	b.n	801538e <_scanf_float+0xbe>
 8015458:	6821      	ldr	r1, [r4, #0]
 801545a:	0608      	lsls	r0, r1, #24
 801545c:	f57f af70 	bpl.w	8015340 <_scanf_float+0x70>
 8015460:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015464:	e7f4      	b.n	8015450 <_scanf_float+0x180>
 8015466:	2a02      	cmp	r2, #2
 8015468:	d047      	beq.n	80154fa <_scanf_float+0x22a>
 801546a:	f1bb 0f01 	cmp.w	fp, #1
 801546e:	d003      	beq.n	8015478 <_scanf_float+0x1a8>
 8015470:	f1bb 0f04 	cmp.w	fp, #4
 8015474:	f47f af64 	bne.w	8015340 <_scanf_float+0x70>
 8015478:	f10b 0b01 	add.w	fp, fp, #1
 801547c:	fa5f fb8b 	uxtb.w	fp, fp
 8015480:	e7e7      	b.n	8015452 <_scanf_float+0x182>
 8015482:	f1bb 0f03 	cmp.w	fp, #3
 8015486:	d0f7      	beq.n	8015478 <_scanf_float+0x1a8>
 8015488:	f1bb 0f05 	cmp.w	fp, #5
 801548c:	e7f2      	b.n	8015474 <_scanf_float+0x1a4>
 801548e:	f1bb 0f02 	cmp.w	fp, #2
 8015492:	f47f af55 	bne.w	8015340 <_scanf_float+0x70>
 8015496:	f04f 0b03 	mov.w	fp, #3
 801549a:	e7da      	b.n	8015452 <_scanf_float+0x182>
 801549c:	f1bb 0f06 	cmp.w	fp, #6
 80154a0:	f47f af4e 	bne.w	8015340 <_scanf_float+0x70>
 80154a4:	f04f 0b07 	mov.w	fp, #7
 80154a8:	e7d3      	b.n	8015452 <_scanf_float+0x182>
 80154aa:	6821      	ldr	r1, [r4, #0]
 80154ac:	0588      	lsls	r0, r1, #22
 80154ae:	f57f af47 	bpl.w	8015340 <_scanf_float+0x70>
 80154b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80154b6:	6021      	str	r1, [r4, #0]
 80154b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80154bc:	e7c9      	b.n	8015452 <_scanf_float+0x182>
 80154be:	6821      	ldr	r1, [r4, #0]
 80154c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80154c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80154c8:	d006      	beq.n	80154d8 <_scanf_float+0x208>
 80154ca:	0548      	lsls	r0, r1, #21
 80154cc:	f57f af38 	bpl.w	8015340 <_scanf_float+0x70>
 80154d0:	f1b9 0f00 	cmp.w	r9, #0
 80154d4:	f43f af3b 	beq.w	801534e <_scanf_float+0x7e>
 80154d8:	0588      	lsls	r0, r1, #22
 80154da:	bf58      	it	pl
 80154dc:	9802      	ldrpl	r0, [sp, #8]
 80154de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80154e2:	bf58      	it	pl
 80154e4:	eba9 0000 	subpl.w	r0, r9, r0
 80154e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80154ec:	bf58      	it	pl
 80154ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80154f2:	6021      	str	r1, [r4, #0]
 80154f4:	f04f 0900 	mov.w	r9, #0
 80154f8:	e7ab      	b.n	8015452 <_scanf_float+0x182>
 80154fa:	2203      	movs	r2, #3
 80154fc:	e7a9      	b.n	8015452 <_scanf_float+0x182>
 80154fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015502:	9205      	str	r2, [sp, #20]
 8015504:	4631      	mov	r1, r6
 8015506:	4638      	mov	r0, r7
 8015508:	4798      	blx	r3
 801550a:	9a05      	ldr	r2, [sp, #20]
 801550c:	2800      	cmp	r0, #0
 801550e:	f43f af04 	beq.w	801531a <_scanf_float+0x4a>
 8015512:	e715      	b.n	8015340 <_scanf_float+0x70>
 8015514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015518:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801551c:	4632      	mov	r2, r6
 801551e:	4638      	mov	r0, r7
 8015520:	4798      	blx	r3
 8015522:	6923      	ldr	r3, [r4, #16]
 8015524:	3b01      	subs	r3, #1
 8015526:	6123      	str	r3, [r4, #16]
 8015528:	e715      	b.n	8015356 <_scanf_float+0x86>
 801552a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801552e:	2b06      	cmp	r3, #6
 8015530:	d80a      	bhi.n	8015548 <_scanf_float+0x278>
 8015532:	f1bb 0f02 	cmp.w	fp, #2
 8015536:	d968      	bls.n	801560a <_scanf_float+0x33a>
 8015538:	f1ab 0b03 	sub.w	fp, fp, #3
 801553c:	fa5f fb8b 	uxtb.w	fp, fp
 8015540:	eba5 0b0b 	sub.w	fp, r5, fp
 8015544:	455d      	cmp	r5, fp
 8015546:	d14b      	bne.n	80155e0 <_scanf_float+0x310>
 8015548:	6823      	ldr	r3, [r4, #0]
 801554a:	05da      	lsls	r2, r3, #23
 801554c:	d51f      	bpl.n	801558e <_scanf_float+0x2be>
 801554e:	055b      	lsls	r3, r3, #21
 8015550:	d468      	bmi.n	8015624 <_scanf_float+0x354>
 8015552:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015556:	6923      	ldr	r3, [r4, #16]
 8015558:	2965      	cmp	r1, #101	; 0x65
 801555a:	f103 33ff 	add.w	r3, r3, #4294967295
 801555e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015562:	6123      	str	r3, [r4, #16]
 8015564:	d00d      	beq.n	8015582 <_scanf_float+0x2b2>
 8015566:	2945      	cmp	r1, #69	; 0x45
 8015568:	d00b      	beq.n	8015582 <_scanf_float+0x2b2>
 801556a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801556e:	4632      	mov	r2, r6
 8015570:	4638      	mov	r0, r7
 8015572:	4798      	blx	r3
 8015574:	6923      	ldr	r3, [r4, #16]
 8015576:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801557a:	3b01      	subs	r3, #1
 801557c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015580:	6123      	str	r3, [r4, #16]
 8015582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015586:	4632      	mov	r2, r6
 8015588:	4638      	mov	r0, r7
 801558a:	4798      	blx	r3
 801558c:	465d      	mov	r5, fp
 801558e:	6826      	ldr	r6, [r4, #0]
 8015590:	f016 0610 	ands.w	r6, r6, #16
 8015594:	d17a      	bne.n	801568c <_scanf_float+0x3bc>
 8015596:	702e      	strb	r6, [r5, #0]
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80155a2:	d142      	bne.n	801562a <_scanf_float+0x35a>
 80155a4:	9b02      	ldr	r3, [sp, #8]
 80155a6:	eba9 0303 	sub.w	r3, r9, r3
 80155aa:	425a      	negs	r2, r3
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d149      	bne.n	8015644 <_scanf_float+0x374>
 80155b0:	2200      	movs	r2, #0
 80155b2:	4641      	mov	r1, r8
 80155b4:	4638      	mov	r0, r7
 80155b6:	f000 ff0b 	bl	80163d0 <_strtod_r>
 80155ba:	6825      	ldr	r5, [r4, #0]
 80155bc:	f8da 3000 	ldr.w	r3, [sl]
 80155c0:	f015 0f02 	tst.w	r5, #2
 80155c4:	f103 0204 	add.w	r2, r3, #4
 80155c8:	ec59 8b10 	vmov	r8, r9, d0
 80155cc:	f8ca 2000 	str.w	r2, [sl]
 80155d0:	d043      	beq.n	801565a <_scanf_float+0x38a>
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	e9c3 8900 	strd	r8, r9, [r3]
 80155d8:	68e3      	ldr	r3, [r4, #12]
 80155da:	3301      	adds	r3, #1
 80155dc:	60e3      	str	r3, [r4, #12]
 80155de:	e6be      	b.n	801535e <_scanf_float+0x8e>
 80155e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80155e8:	4632      	mov	r2, r6
 80155ea:	4638      	mov	r0, r7
 80155ec:	4798      	blx	r3
 80155ee:	6923      	ldr	r3, [r4, #16]
 80155f0:	3b01      	subs	r3, #1
 80155f2:	6123      	str	r3, [r4, #16]
 80155f4:	e7a6      	b.n	8015544 <_scanf_float+0x274>
 80155f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80155fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80155fe:	4632      	mov	r2, r6
 8015600:	4638      	mov	r0, r7
 8015602:	4798      	blx	r3
 8015604:	6923      	ldr	r3, [r4, #16]
 8015606:	3b01      	subs	r3, #1
 8015608:	6123      	str	r3, [r4, #16]
 801560a:	4545      	cmp	r5, r8
 801560c:	d8f3      	bhi.n	80155f6 <_scanf_float+0x326>
 801560e:	e6a5      	b.n	801535c <_scanf_float+0x8c>
 8015610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015614:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015618:	4632      	mov	r2, r6
 801561a:	4638      	mov	r0, r7
 801561c:	4798      	blx	r3
 801561e:	6923      	ldr	r3, [r4, #16]
 8015620:	3b01      	subs	r3, #1
 8015622:	6123      	str	r3, [r4, #16]
 8015624:	4545      	cmp	r5, r8
 8015626:	d8f3      	bhi.n	8015610 <_scanf_float+0x340>
 8015628:	e698      	b.n	801535c <_scanf_float+0x8c>
 801562a:	9b03      	ldr	r3, [sp, #12]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d0bf      	beq.n	80155b0 <_scanf_float+0x2e0>
 8015630:	9904      	ldr	r1, [sp, #16]
 8015632:	230a      	movs	r3, #10
 8015634:	4632      	mov	r2, r6
 8015636:	3101      	adds	r1, #1
 8015638:	4638      	mov	r0, r7
 801563a:	f000 ff55 	bl	80164e8 <_strtol_r>
 801563e:	9b03      	ldr	r3, [sp, #12]
 8015640:	9d04      	ldr	r5, [sp, #16]
 8015642:	1ac2      	subs	r2, r0, r3
 8015644:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015648:	429d      	cmp	r5, r3
 801564a:	bf28      	it	cs
 801564c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015650:	490f      	ldr	r1, [pc, #60]	; (8015690 <_scanf_float+0x3c0>)
 8015652:	4628      	mov	r0, r5
 8015654:	f000 f858 	bl	8015708 <siprintf>
 8015658:	e7aa      	b.n	80155b0 <_scanf_float+0x2e0>
 801565a:	f015 0504 	ands.w	r5, r5, #4
 801565e:	d1b8      	bne.n	80155d2 <_scanf_float+0x302>
 8015660:	681f      	ldr	r7, [r3, #0]
 8015662:	ee10 2a10 	vmov	r2, s0
 8015666:	464b      	mov	r3, r9
 8015668:	ee10 0a10 	vmov	r0, s0
 801566c:	4649      	mov	r1, r9
 801566e:	f7eb fa75 	bl	8000b5c <__aeabi_dcmpun>
 8015672:	b128      	cbz	r0, 8015680 <_scanf_float+0x3b0>
 8015674:	4628      	mov	r0, r5
 8015676:	f000 f80d 	bl	8015694 <nanf>
 801567a:	ed87 0a00 	vstr	s0, [r7]
 801567e:	e7ab      	b.n	80155d8 <_scanf_float+0x308>
 8015680:	4640      	mov	r0, r8
 8015682:	4649      	mov	r1, r9
 8015684:	f7eb fac8 	bl	8000c18 <__aeabi_d2f>
 8015688:	6038      	str	r0, [r7, #0]
 801568a:	e7a5      	b.n	80155d8 <_scanf_float+0x308>
 801568c:	2600      	movs	r6, #0
 801568e:	e666      	b.n	801535e <_scanf_float+0x8e>
 8015690:	08019632 	.word	0x08019632

08015694 <nanf>:
 8015694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801569c <nanf+0x8>
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	7fc00000 	.word	0x7fc00000

080156a0 <sniprintf>:
 80156a0:	b40c      	push	{r2, r3}
 80156a2:	b530      	push	{r4, r5, lr}
 80156a4:	4b17      	ldr	r3, [pc, #92]	; (8015704 <sniprintf+0x64>)
 80156a6:	1e0c      	subs	r4, r1, #0
 80156a8:	b09d      	sub	sp, #116	; 0x74
 80156aa:	681d      	ldr	r5, [r3, #0]
 80156ac:	da08      	bge.n	80156c0 <sniprintf+0x20>
 80156ae:	238b      	movs	r3, #139	; 0x8b
 80156b0:	602b      	str	r3, [r5, #0]
 80156b2:	f04f 30ff 	mov.w	r0, #4294967295
 80156b6:	b01d      	add	sp, #116	; 0x74
 80156b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156bc:	b002      	add	sp, #8
 80156be:	4770      	bx	lr
 80156c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80156c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156c8:	bf14      	ite	ne
 80156ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80156ce:	4623      	moveq	r3, r4
 80156d0:	9304      	str	r3, [sp, #16]
 80156d2:	9307      	str	r3, [sp, #28]
 80156d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156d8:	9002      	str	r0, [sp, #8]
 80156da:	9006      	str	r0, [sp, #24]
 80156dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80156e2:	ab21      	add	r3, sp, #132	; 0x84
 80156e4:	a902      	add	r1, sp, #8
 80156e6:	4628      	mov	r0, r5
 80156e8:	9301      	str	r3, [sp, #4]
 80156ea:	f002 fde7 	bl	80182bc <_svfiprintf_r>
 80156ee:	1c43      	adds	r3, r0, #1
 80156f0:	bfbc      	itt	lt
 80156f2:	238b      	movlt	r3, #139	; 0x8b
 80156f4:	602b      	strlt	r3, [r5, #0]
 80156f6:	2c00      	cmp	r4, #0
 80156f8:	d0dd      	beq.n	80156b6 <sniprintf+0x16>
 80156fa:	9b02      	ldr	r3, [sp, #8]
 80156fc:	2200      	movs	r2, #0
 80156fe:	701a      	strb	r2, [r3, #0]
 8015700:	e7d9      	b.n	80156b6 <sniprintf+0x16>
 8015702:	bf00      	nop
 8015704:	2000000c 	.word	0x2000000c

08015708 <siprintf>:
 8015708:	b40e      	push	{r1, r2, r3}
 801570a:	b500      	push	{lr}
 801570c:	b09c      	sub	sp, #112	; 0x70
 801570e:	ab1d      	add	r3, sp, #116	; 0x74
 8015710:	9002      	str	r0, [sp, #8]
 8015712:	9006      	str	r0, [sp, #24]
 8015714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015718:	4809      	ldr	r0, [pc, #36]	; (8015740 <siprintf+0x38>)
 801571a:	9107      	str	r1, [sp, #28]
 801571c:	9104      	str	r1, [sp, #16]
 801571e:	4909      	ldr	r1, [pc, #36]	; (8015744 <siprintf+0x3c>)
 8015720:	f853 2b04 	ldr.w	r2, [r3], #4
 8015724:	9105      	str	r1, [sp, #20]
 8015726:	6800      	ldr	r0, [r0, #0]
 8015728:	9301      	str	r3, [sp, #4]
 801572a:	a902      	add	r1, sp, #8
 801572c:	f002 fdc6 	bl	80182bc <_svfiprintf_r>
 8015730:	9b02      	ldr	r3, [sp, #8]
 8015732:	2200      	movs	r2, #0
 8015734:	701a      	strb	r2, [r3, #0]
 8015736:	b01c      	add	sp, #112	; 0x70
 8015738:	f85d eb04 	ldr.w	lr, [sp], #4
 801573c:	b003      	add	sp, #12
 801573e:	4770      	bx	lr
 8015740:	2000000c 	.word	0x2000000c
 8015744:	ffff0208 	.word	0xffff0208

08015748 <siscanf>:
 8015748:	b40e      	push	{r1, r2, r3}
 801574a:	b530      	push	{r4, r5, lr}
 801574c:	b09c      	sub	sp, #112	; 0x70
 801574e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015750:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015754:	f854 5b04 	ldr.w	r5, [r4], #4
 8015758:	f8ad 2014 	strh.w	r2, [sp, #20]
 801575c:	9002      	str	r0, [sp, #8]
 801575e:	9006      	str	r0, [sp, #24]
 8015760:	f7ea fd4e 	bl	8000200 <strlen>
 8015764:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <siscanf+0x4c>)
 8015766:	9003      	str	r0, [sp, #12]
 8015768:	9007      	str	r0, [sp, #28]
 801576a:	930b      	str	r3, [sp, #44]	; 0x2c
 801576c:	480a      	ldr	r0, [pc, #40]	; (8015798 <siscanf+0x50>)
 801576e:	9401      	str	r4, [sp, #4]
 8015770:	2300      	movs	r3, #0
 8015772:	930f      	str	r3, [sp, #60]	; 0x3c
 8015774:	9314      	str	r3, [sp, #80]	; 0x50
 8015776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801577a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801577e:	462a      	mov	r2, r5
 8015780:	4623      	mov	r3, r4
 8015782:	a902      	add	r1, sp, #8
 8015784:	6800      	ldr	r0, [r0, #0]
 8015786:	f002 feeb 	bl	8018560 <__ssvfiscanf_r>
 801578a:	b01c      	add	sp, #112	; 0x70
 801578c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015790:	b003      	add	sp, #12
 8015792:	4770      	bx	lr
 8015794:	0801579d 	.word	0x0801579d
 8015798:	2000000c 	.word	0x2000000c

0801579c <__seofread>:
 801579c:	2000      	movs	r0, #0
 801579e:	4770      	bx	lr

080157a0 <strcpy>:
 80157a0:	4603      	mov	r3, r0
 80157a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157a6:	f803 2b01 	strb.w	r2, [r3], #1
 80157aa:	2a00      	cmp	r2, #0
 80157ac:	d1f9      	bne.n	80157a2 <strcpy+0x2>
 80157ae:	4770      	bx	lr

080157b0 <sulp>:
 80157b0:	b570      	push	{r4, r5, r6, lr}
 80157b2:	4604      	mov	r4, r0
 80157b4:	460d      	mov	r5, r1
 80157b6:	ec45 4b10 	vmov	d0, r4, r5
 80157ba:	4616      	mov	r6, r2
 80157bc:	f002 fb3a 	bl	8017e34 <__ulp>
 80157c0:	ec51 0b10 	vmov	r0, r1, d0
 80157c4:	b17e      	cbz	r6, 80157e6 <sulp+0x36>
 80157c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80157ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	dd09      	ble.n	80157e6 <sulp+0x36>
 80157d2:	051b      	lsls	r3, r3, #20
 80157d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80157d8:	2400      	movs	r4, #0
 80157da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80157de:	4622      	mov	r2, r4
 80157e0:	462b      	mov	r3, r5
 80157e2:	f7ea ff21 	bl	8000628 <__aeabi_dmul>
 80157e6:	bd70      	pop	{r4, r5, r6, pc}

080157e8 <_strtod_l>:
 80157e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ec:	461f      	mov	r7, r3
 80157ee:	b0a1      	sub	sp, #132	; 0x84
 80157f0:	2300      	movs	r3, #0
 80157f2:	4681      	mov	r9, r0
 80157f4:	4638      	mov	r0, r7
 80157f6:	460e      	mov	r6, r1
 80157f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80157fa:	931c      	str	r3, [sp, #112]	; 0x70
 80157fc:	f002 f824 	bl	8017848 <__localeconv_l>
 8015800:	4680      	mov	r8, r0
 8015802:	6800      	ldr	r0, [r0, #0]
 8015804:	f7ea fcfc 	bl	8000200 <strlen>
 8015808:	f04f 0a00 	mov.w	sl, #0
 801580c:	4604      	mov	r4, r0
 801580e:	f04f 0b00 	mov.w	fp, #0
 8015812:	961b      	str	r6, [sp, #108]	; 0x6c
 8015814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015816:	781a      	ldrb	r2, [r3, #0]
 8015818:	2a0d      	cmp	r2, #13
 801581a:	d832      	bhi.n	8015882 <_strtod_l+0x9a>
 801581c:	2a09      	cmp	r2, #9
 801581e:	d236      	bcs.n	801588e <_strtod_l+0xa6>
 8015820:	2a00      	cmp	r2, #0
 8015822:	d03e      	beq.n	80158a2 <_strtod_l+0xba>
 8015824:	2300      	movs	r3, #0
 8015826:	930d      	str	r3, [sp, #52]	; 0x34
 8015828:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801582a:	782b      	ldrb	r3, [r5, #0]
 801582c:	2b30      	cmp	r3, #48	; 0x30
 801582e:	f040 80ac 	bne.w	801598a <_strtod_l+0x1a2>
 8015832:	786b      	ldrb	r3, [r5, #1]
 8015834:	2b58      	cmp	r3, #88	; 0x58
 8015836:	d001      	beq.n	801583c <_strtod_l+0x54>
 8015838:	2b78      	cmp	r3, #120	; 0x78
 801583a:	d167      	bne.n	801590c <_strtod_l+0x124>
 801583c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801583e:	9301      	str	r3, [sp, #4]
 8015840:	ab1c      	add	r3, sp, #112	; 0x70
 8015842:	9300      	str	r3, [sp, #0]
 8015844:	9702      	str	r7, [sp, #8]
 8015846:	ab1d      	add	r3, sp, #116	; 0x74
 8015848:	4a88      	ldr	r2, [pc, #544]	; (8015a6c <_strtod_l+0x284>)
 801584a:	a91b      	add	r1, sp, #108	; 0x6c
 801584c:	4648      	mov	r0, r9
 801584e:	f001 fd12 	bl	8017276 <__gethex>
 8015852:	f010 0407 	ands.w	r4, r0, #7
 8015856:	4606      	mov	r6, r0
 8015858:	d005      	beq.n	8015866 <_strtod_l+0x7e>
 801585a:	2c06      	cmp	r4, #6
 801585c:	d12b      	bne.n	80158b6 <_strtod_l+0xce>
 801585e:	3501      	adds	r5, #1
 8015860:	2300      	movs	r3, #0
 8015862:	951b      	str	r5, [sp, #108]	; 0x6c
 8015864:	930d      	str	r3, [sp, #52]	; 0x34
 8015866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015868:	2b00      	cmp	r3, #0
 801586a:	f040 859a 	bne.w	80163a2 <_strtod_l+0xbba>
 801586e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015870:	b1e3      	cbz	r3, 80158ac <_strtod_l+0xc4>
 8015872:	4652      	mov	r2, sl
 8015874:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015878:	ec43 2b10 	vmov	d0, r2, r3
 801587c:	b021      	add	sp, #132	; 0x84
 801587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015882:	2a2b      	cmp	r2, #43	; 0x2b
 8015884:	d015      	beq.n	80158b2 <_strtod_l+0xca>
 8015886:	2a2d      	cmp	r2, #45	; 0x2d
 8015888:	d004      	beq.n	8015894 <_strtod_l+0xac>
 801588a:	2a20      	cmp	r2, #32
 801588c:	d1ca      	bne.n	8015824 <_strtod_l+0x3c>
 801588e:	3301      	adds	r3, #1
 8015890:	931b      	str	r3, [sp, #108]	; 0x6c
 8015892:	e7bf      	b.n	8015814 <_strtod_l+0x2c>
 8015894:	2201      	movs	r2, #1
 8015896:	920d      	str	r2, [sp, #52]	; 0x34
 8015898:	1c5a      	adds	r2, r3, #1
 801589a:	921b      	str	r2, [sp, #108]	; 0x6c
 801589c:	785b      	ldrb	r3, [r3, #1]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d1c2      	bne.n	8015828 <_strtod_l+0x40>
 80158a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80158a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f040 8579 	bne.w	801639e <_strtod_l+0xbb6>
 80158ac:	4652      	mov	r2, sl
 80158ae:	465b      	mov	r3, fp
 80158b0:	e7e2      	b.n	8015878 <_strtod_l+0x90>
 80158b2:	2200      	movs	r2, #0
 80158b4:	e7ef      	b.n	8015896 <_strtod_l+0xae>
 80158b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80158b8:	b13a      	cbz	r2, 80158ca <_strtod_l+0xe2>
 80158ba:	2135      	movs	r1, #53	; 0x35
 80158bc:	a81e      	add	r0, sp, #120	; 0x78
 80158be:	f002 fbb1 	bl	8018024 <__copybits>
 80158c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158c4:	4648      	mov	r0, r9
 80158c6:	f002 f81d 	bl	8017904 <_Bfree>
 80158ca:	3c01      	subs	r4, #1
 80158cc:	2c04      	cmp	r4, #4
 80158ce:	d806      	bhi.n	80158de <_strtod_l+0xf6>
 80158d0:	e8df f004 	tbb	[pc, r4]
 80158d4:	1714030a 	.word	0x1714030a
 80158d8:	0a          	.byte	0x0a
 80158d9:	00          	.byte	0x00
 80158da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80158de:	0730      	lsls	r0, r6, #28
 80158e0:	d5c1      	bpl.n	8015866 <_strtod_l+0x7e>
 80158e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80158e6:	e7be      	b.n	8015866 <_strtod_l+0x7e>
 80158e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80158ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80158ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80158f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80158f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80158fa:	e7f0      	b.n	80158de <_strtod_l+0xf6>
 80158fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015a70 <_strtod_l+0x288>
 8015900:	e7ed      	b.n	80158de <_strtod_l+0xf6>
 8015902:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015906:	f04f 3aff 	mov.w	sl, #4294967295
 801590a:	e7e8      	b.n	80158de <_strtod_l+0xf6>
 801590c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801590e:	1c5a      	adds	r2, r3, #1
 8015910:	921b      	str	r2, [sp, #108]	; 0x6c
 8015912:	785b      	ldrb	r3, [r3, #1]
 8015914:	2b30      	cmp	r3, #48	; 0x30
 8015916:	d0f9      	beq.n	801590c <_strtod_l+0x124>
 8015918:	2b00      	cmp	r3, #0
 801591a:	d0a4      	beq.n	8015866 <_strtod_l+0x7e>
 801591c:	2301      	movs	r3, #1
 801591e:	2500      	movs	r5, #0
 8015920:	9306      	str	r3, [sp, #24]
 8015922:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015924:	9308      	str	r3, [sp, #32]
 8015926:	9507      	str	r5, [sp, #28]
 8015928:	9505      	str	r5, [sp, #20]
 801592a:	220a      	movs	r2, #10
 801592c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801592e:	7807      	ldrb	r7, [r0, #0]
 8015930:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015934:	b2d9      	uxtb	r1, r3
 8015936:	2909      	cmp	r1, #9
 8015938:	d929      	bls.n	801598e <_strtod_l+0x1a6>
 801593a:	4622      	mov	r2, r4
 801593c:	f8d8 1000 	ldr.w	r1, [r8]
 8015940:	f003 f8f8 	bl	8018b34 <strncmp>
 8015944:	2800      	cmp	r0, #0
 8015946:	d031      	beq.n	80159ac <_strtod_l+0x1c4>
 8015948:	2000      	movs	r0, #0
 801594a:	9c05      	ldr	r4, [sp, #20]
 801594c:	9004      	str	r0, [sp, #16]
 801594e:	463b      	mov	r3, r7
 8015950:	4602      	mov	r2, r0
 8015952:	2b65      	cmp	r3, #101	; 0x65
 8015954:	d001      	beq.n	801595a <_strtod_l+0x172>
 8015956:	2b45      	cmp	r3, #69	; 0x45
 8015958:	d114      	bne.n	8015984 <_strtod_l+0x19c>
 801595a:	b924      	cbnz	r4, 8015966 <_strtod_l+0x17e>
 801595c:	b910      	cbnz	r0, 8015964 <_strtod_l+0x17c>
 801595e:	9b06      	ldr	r3, [sp, #24]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d09e      	beq.n	80158a2 <_strtod_l+0xba>
 8015964:	2400      	movs	r4, #0
 8015966:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015968:	1c73      	adds	r3, r6, #1
 801596a:	931b      	str	r3, [sp, #108]	; 0x6c
 801596c:	7873      	ldrb	r3, [r6, #1]
 801596e:	2b2b      	cmp	r3, #43	; 0x2b
 8015970:	d078      	beq.n	8015a64 <_strtod_l+0x27c>
 8015972:	2b2d      	cmp	r3, #45	; 0x2d
 8015974:	d070      	beq.n	8015a58 <_strtod_l+0x270>
 8015976:	f04f 0c00 	mov.w	ip, #0
 801597a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801597e:	2f09      	cmp	r7, #9
 8015980:	d97c      	bls.n	8015a7c <_strtod_l+0x294>
 8015982:	961b      	str	r6, [sp, #108]	; 0x6c
 8015984:	f04f 0e00 	mov.w	lr, #0
 8015988:	e09a      	b.n	8015ac0 <_strtod_l+0x2d8>
 801598a:	2300      	movs	r3, #0
 801598c:	e7c7      	b.n	801591e <_strtod_l+0x136>
 801598e:	9905      	ldr	r1, [sp, #20]
 8015990:	2908      	cmp	r1, #8
 8015992:	bfdd      	ittte	le
 8015994:	9907      	ldrle	r1, [sp, #28]
 8015996:	fb02 3301 	mlale	r3, r2, r1, r3
 801599a:	9307      	strle	r3, [sp, #28]
 801599c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80159a0:	9b05      	ldr	r3, [sp, #20]
 80159a2:	3001      	adds	r0, #1
 80159a4:	3301      	adds	r3, #1
 80159a6:	9305      	str	r3, [sp, #20]
 80159a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80159aa:	e7bf      	b.n	801592c <_strtod_l+0x144>
 80159ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159ae:	191a      	adds	r2, r3, r4
 80159b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80159b2:	9a05      	ldr	r2, [sp, #20]
 80159b4:	5d1b      	ldrb	r3, [r3, r4]
 80159b6:	2a00      	cmp	r2, #0
 80159b8:	d037      	beq.n	8015a2a <_strtod_l+0x242>
 80159ba:	9c05      	ldr	r4, [sp, #20]
 80159bc:	4602      	mov	r2, r0
 80159be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80159c2:	2909      	cmp	r1, #9
 80159c4:	d913      	bls.n	80159ee <_strtod_l+0x206>
 80159c6:	2101      	movs	r1, #1
 80159c8:	9104      	str	r1, [sp, #16]
 80159ca:	e7c2      	b.n	8015952 <_strtod_l+0x16a>
 80159cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159ce:	1c5a      	adds	r2, r3, #1
 80159d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80159d2:	785b      	ldrb	r3, [r3, #1]
 80159d4:	3001      	adds	r0, #1
 80159d6:	2b30      	cmp	r3, #48	; 0x30
 80159d8:	d0f8      	beq.n	80159cc <_strtod_l+0x1e4>
 80159da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80159de:	2a08      	cmp	r2, #8
 80159e0:	f200 84e4 	bhi.w	80163ac <_strtod_l+0xbc4>
 80159e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80159e6:	9208      	str	r2, [sp, #32]
 80159e8:	4602      	mov	r2, r0
 80159ea:	2000      	movs	r0, #0
 80159ec:	4604      	mov	r4, r0
 80159ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80159f2:	f100 0101 	add.w	r1, r0, #1
 80159f6:	d012      	beq.n	8015a1e <_strtod_l+0x236>
 80159f8:	440a      	add	r2, r1
 80159fa:	eb00 0c04 	add.w	ip, r0, r4
 80159fe:	4621      	mov	r1, r4
 8015a00:	270a      	movs	r7, #10
 8015a02:	458c      	cmp	ip, r1
 8015a04:	d113      	bne.n	8015a2e <_strtod_l+0x246>
 8015a06:	1821      	adds	r1, r4, r0
 8015a08:	2908      	cmp	r1, #8
 8015a0a:	f104 0401 	add.w	r4, r4, #1
 8015a0e:	4404      	add	r4, r0
 8015a10:	dc19      	bgt.n	8015a46 <_strtod_l+0x25e>
 8015a12:	9b07      	ldr	r3, [sp, #28]
 8015a14:	210a      	movs	r1, #10
 8015a16:	fb01 e303 	mla	r3, r1, r3, lr
 8015a1a:	9307      	str	r3, [sp, #28]
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a20:	1c58      	adds	r0, r3, #1
 8015a22:	901b      	str	r0, [sp, #108]	; 0x6c
 8015a24:	785b      	ldrb	r3, [r3, #1]
 8015a26:	4608      	mov	r0, r1
 8015a28:	e7c9      	b.n	80159be <_strtod_l+0x1d6>
 8015a2a:	9805      	ldr	r0, [sp, #20]
 8015a2c:	e7d3      	b.n	80159d6 <_strtod_l+0x1ee>
 8015a2e:	2908      	cmp	r1, #8
 8015a30:	f101 0101 	add.w	r1, r1, #1
 8015a34:	dc03      	bgt.n	8015a3e <_strtod_l+0x256>
 8015a36:	9b07      	ldr	r3, [sp, #28]
 8015a38:	437b      	muls	r3, r7
 8015a3a:	9307      	str	r3, [sp, #28]
 8015a3c:	e7e1      	b.n	8015a02 <_strtod_l+0x21a>
 8015a3e:	2910      	cmp	r1, #16
 8015a40:	bfd8      	it	le
 8015a42:	437d      	mulle	r5, r7
 8015a44:	e7dd      	b.n	8015a02 <_strtod_l+0x21a>
 8015a46:	2c10      	cmp	r4, #16
 8015a48:	bfdc      	itt	le
 8015a4a:	210a      	movle	r1, #10
 8015a4c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015a50:	e7e4      	b.n	8015a1c <_strtod_l+0x234>
 8015a52:	2301      	movs	r3, #1
 8015a54:	9304      	str	r3, [sp, #16]
 8015a56:	e781      	b.n	801595c <_strtod_l+0x174>
 8015a58:	f04f 0c01 	mov.w	ip, #1
 8015a5c:	1cb3      	adds	r3, r6, #2
 8015a5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a60:	78b3      	ldrb	r3, [r6, #2]
 8015a62:	e78a      	b.n	801597a <_strtod_l+0x192>
 8015a64:	f04f 0c00 	mov.w	ip, #0
 8015a68:	e7f8      	b.n	8015a5c <_strtod_l+0x274>
 8015a6a:	bf00      	nop
 8015a6c:	08019638 	.word	0x08019638
 8015a70:	7ff00000 	.word	0x7ff00000
 8015a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a76:	1c5f      	adds	r7, r3, #1
 8015a78:	971b      	str	r7, [sp, #108]	; 0x6c
 8015a7a:	785b      	ldrb	r3, [r3, #1]
 8015a7c:	2b30      	cmp	r3, #48	; 0x30
 8015a7e:	d0f9      	beq.n	8015a74 <_strtod_l+0x28c>
 8015a80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015a84:	2f08      	cmp	r7, #8
 8015a86:	f63f af7d 	bhi.w	8015984 <_strtod_l+0x19c>
 8015a8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015a8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a90:	930a      	str	r3, [sp, #40]	; 0x28
 8015a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a94:	1c5f      	adds	r7, r3, #1
 8015a96:	971b      	str	r7, [sp, #108]	; 0x6c
 8015a98:	785b      	ldrb	r3, [r3, #1]
 8015a9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015a9e:	f1b8 0f09 	cmp.w	r8, #9
 8015aa2:	d937      	bls.n	8015b14 <_strtod_l+0x32c>
 8015aa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015aa6:	1a7f      	subs	r7, r7, r1
 8015aa8:	2f08      	cmp	r7, #8
 8015aaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015aae:	dc37      	bgt.n	8015b20 <_strtod_l+0x338>
 8015ab0:	45be      	cmp	lr, r7
 8015ab2:	bfa8      	it	ge
 8015ab4:	46be      	movge	lr, r7
 8015ab6:	f1bc 0f00 	cmp.w	ip, #0
 8015aba:	d001      	beq.n	8015ac0 <_strtod_l+0x2d8>
 8015abc:	f1ce 0e00 	rsb	lr, lr, #0
 8015ac0:	2c00      	cmp	r4, #0
 8015ac2:	d151      	bne.n	8015b68 <_strtod_l+0x380>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	f47f aece 	bne.w	8015866 <_strtod_l+0x7e>
 8015aca:	9a06      	ldr	r2, [sp, #24]
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	f47f aeca 	bne.w	8015866 <_strtod_l+0x7e>
 8015ad2:	9a04      	ldr	r2, [sp, #16]
 8015ad4:	2a00      	cmp	r2, #0
 8015ad6:	f47f aee4 	bne.w	80158a2 <_strtod_l+0xba>
 8015ada:	2b4e      	cmp	r3, #78	; 0x4e
 8015adc:	d027      	beq.n	8015b2e <_strtod_l+0x346>
 8015ade:	dc21      	bgt.n	8015b24 <_strtod_l+0x33c>
 8015ae0:	2b49      	cmp	r3, #73	; 0x49
 8015ae2:	f47f aede 	bne.w	80158a2 <_strtod_l+0xba>
 8015ae6:	49a0      	ldr	r1, [pc, #640]	; (8015d68 <_strtod_l+0x580>)
 8015ae8:	a81b      	add	r0, sp, #108	; 0x6c
 8015aea:	f001 fdf7 	bl	80176dc <__match>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	f43f aed7 	beq.w	80158a2 <_strtod_l+0xba>
 8015af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015af6:	499d      	ldr	r1, [pc, #628]	; (8015d6c <_strtod_l+0x584>)
 8015af8:	3b01      	subs	r3, #1
 8015afa:	a81b      	add	r0, sp, #108	; 0x6c
 8015afc:	931b      	str	r3, [sp, #108]	; 0x6c
 8015afe:	f001 fded 	bl	80176dc <__match>
 8015b02:	b910      	cbnz	r0, 8015b0a <_strtod_l+0x322>
 8015b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b06:	3301      	adds	r3, #1
 8015b08:	931b      	str	r3, [sp, #108]	; 0x6c
 8015b0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015d80 <_strtod_l+0x598>
 8015b0e:	f04f 0a00 	mov.w	sl, #0
 8015b12:	e6a8      	b.n	8015866 <_strtod_l+0x7e>
 8015b14:	210a      	movs	r1, #10
 8015b16:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015b1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015b1e:	e7b8      	b.n	8015a92 <_strtod_l+0x2aa>
 8015b20:	46be      	mov	lr, r7
 8015b22:	e7c8      	b.n	8015ab6 <_strtod_l+0x2ce>
 8015b24:	2b69      	cmp	r3, #105	; 0x69
 8015b26:	d0de      	beq.n	8015ae6 <_strtod_l+0x2fe>
 8015b28:	2b6e      	cmp	r3, #110	; 0x6e
 8015b2a:	f47f aeba 	bne.w	80158a2 <_strtod_l+0xba>
 8015b2e:	4990      	ldr	r1, [pc, #576]	; (8015d70 <_strtod_l+0x588>)
 8015b30:	a81b      	add	r0, sp, #108	; 0x6c
 8015b32:	f001 fdd3 	bl	80176dc <__match>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	f43f aeb3 	beq.w	80158a2 <_strtod_l+0xba>
 8015b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	2b28      	cmp	r3, #40	; 0x28
 8015b42:	d10e      	bne.n	8015b62 <_strtod_l+0x37a>
 8015b44:	aa1e      	add	r2, sp, #120	; 0x78
 8015b46:	498b      	ldr	r1, [pc, #556]	; (8015d74 <_strtod_l+0x58c>)
 8015b48:	a81b      	add	r0, sp, #108	; 0x6c
 8015b4a:	f001 fddb 	bl	8017704 <__hexnan>
 8015b4e:	2805      	cmp	r0, #5
 8015b50:	d107      	bne.n	8015b62 <_strtod_l+0x37a>
 8015b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015b54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015b58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015b5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015b60:	e681      	b.n	8015866 <_strtod_l+0x7e>
 8015b62:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015d88 <_strtod_l+0x5a0>
 8015b66:	e7d2      	b.n	8015b0e <_strtod_l+0x326>
 8015b68:	ebae 0302 	sub.w	r3, lr, r2
 8015b6c:	9306      	str	r3, [sp, #24]
 8015b6e:	9b05      	ldr	r3, [sp, #20]
 8015b70:	9807      	ldr	r0, [sp, #28]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	bf08      	it	eq
 8015b76:	4623      	moveq	r3, r4
 8015b78:	2c10      	cmp	r4, #16
 8015b7a:	9305      	str	r3, [sp, #20]
 8015b7c:	46a0      	mov	r8, r4
 8015b7e:	bfa8      	it	ge
 8015b80:	f04f 0810 	movge.w	r8, #16
 8015b84:	f7ea fcd6 	bl	8000534 <__aeabi_ui2d>
 8015b88:	2c09      	cmp	r4, #9
 8015b8a:	4682      	mov	sl, r0
 8015b8c:	468b      	mov	fp, r1
 8015b8e:	dc13      	bgt.n	8015bb8 <_strtod_l+0x3d0>
 8015b90:	9b06      	ldr	r3, [sp, #24]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	f43f ae67 	beq.w	8015866 <_strtod_l+0x7e>
 8015b98:	9b06      	ldr	r3, [sp, #24]
 8015b9a:	dd7a      	ble.n	8015c92 <_strtod_l+0x4aa>
 8015b9c:	2b16      	cmp	r3, #22
 8015b9e:	dc61      	bgt.n	8015c64 <_strtod_l+0x47c>
 8015ba0:	4a75      	ldr	r2, [pc, #468]	; (8015d78 <_strtod_l+0x590>)
 8015ba2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015ba6:	e9de 0100 	ldrd	r0, r1, [lr]
 8015baa:	4652      	mov	r2, sl
 8015bac:	465b      	mov	r3, fp
 8015bae:	f7ea fd3b 	bl	8000628 <__aeabi_dmul>
 8015bb2:	4682      	mov	sl, r0
 8015bb4:	468b      	mov	fp, r1
 8015bb6:	e656      	b.n	8015866 <_strtod_l+0x7e>
 8015bb8:	4b6f      	ldr	r3, [pc, #444]	; (8015d78 <_strtod_l+0x590>)
 8015bba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015bbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015bc2:	f7ea fd31 	bl	8000628 <__aeabi_dmul>
 8015bc6:	4606      	mov	r6, r0
 8015bc8:	4628      	mov	r0, r5
 8015bca:	460f      	mov	r7, r1
 8015bcc:	f7ea fcb2 	bl	8000534 <__aeabi_ui2d>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	4639      	mov	r1, r7
 8015bd8:	f7ea fb70 	bl	80002bc <__adddf3>
 8015bdc:	2c0f      	cmp	r4, #15
 8015bde:	4682      	mov	sl, r0
 8015be0:	468b      	mov	fp, r1
 8015be2:	ddd5      	ble.n	8015b90 <_strtod_l+0x3a8>
 8015be4:	9b06      	ldr	r3, [sp, #24]
 8015be6:	eba4 0808 	sub.w	r8, r4, r8
 8015bea:	4498      	add	r8, r3
 8015bec:	f1b8 0f00 	cmp.w	r8, #0
 8015bf0:	f340 8096 	ble.w	8015d20 <_strtod_l+0x538>
 8015bf4:	f018 030f 	ands.w	r3, r8, #15
 8015bf8:	d00a      	beq.n	8015c10 <_strtod_l+0x428>
 8015bfa:	495f      	ldr	r1, [pc, #380]	; (8015d78 <_strtod_l+0x590>)
 8015bfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c00:	4652      	mov	r2, sl
 8015c02:	465b      	mov	r3, fp
 8015c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c08:	f7ea fd0e 	bl	8000628 <__aeabi_dmul>
 8015c0c:	4682      	mov	sl, r0
 8015c0e:	468b      	mov	fp, r1
 8015c10:	f038 080f 	bics.w	r8, r8, #15
 8015c14:	d073      	beq.n	8015cfe <_strtod_l+0x516>
 8015c16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015c1a:	dd47      	ble.n	8015cac <_strtod_l+0x4c4>
 8015c1c:	2400      	movs	r4, #0
 8015c1e:	46a0      	mov	r8, r4
 8015c20:	9407      	str	r4, [sp, #28]
 8015c22:	9405      	str	r4, [sp, #20]
 8015c24:	2322      	movs	r3, #34	; 0x22
 8015c26:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015d80 <_strtod_l+0x598>
 8015c2a:	f8c9 3000 	str.w	r3, [r9]
 8015c2e:	f04f 0a00 	mov.w	sl, #0
 8015c32:	9b07      	ldr	r3, [sp, #28]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f43f ae16 	beq.w	8015866 <_strtod_l+0x7e>
 8015c3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c3c:	4648      	mov	r0, r9
 8015c3e:	f001 fe61 	bl	8017904 <_Bfree>
 8015c42:	9905      	ldr	r1, [sp, #20]
 8015c44:	4648      	mov	r0, r9
 8015c46:	f001 fe5d 	bl	8017904 <_Bfree>
 8015c4a:	4641      	mov	r1, r8
 8015c4c:	4648      	mov	r0, r9
 8015c4e:	f001 fe59 	bl	8017904 <_Bfree>
 8015c52:	9907      	ldr	r1, [sp, #28]
 8015c54:	4648      	mov	r0, r9
 8015c56:	f001 fe55 	bl	8017904 <_Bfree>
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f001 fe51 	bl	8017904 <_Bfree>
 8015c62:	e600      	b.n	8015866 <_strtod_l+0x7e>
 8015c64:	9a06      	ldr	r2, [sp, #24]
 8015c66:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015c6a:	4293      	cmp	r3, r2
 8015c6c:	dbba      	blt.n	8015be4 <_strtod_l+0x3fc>
 8015c6e:	4d42      	ldr	r5, [pc, #264]	; (8015d78 <_strtod_l+0x590>)
 8015c70:	f1c4 040f 	rsb	r4, r4, #15
 8015c74:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015c78:	4652      	mov	r2, sl
 8015c7a:	465b      	mov	r3, fp
 8015c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c80:	f7ea fcd2 	bl	8000628 <__aeabi_dmul>
 8015c84:	9b06      	ldr	r3, [sp, #24]
 8015c86:	1b1c      	subs	r4, r3, r4
 8015c88:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c90:	e78d      	b.n	8015bae <_strtod_l+0x3c6>
 8015c92:	f113 0f16 	cmn.w	r3, #22
 8015c96:	dba5      	blt.n	8015be4 <_strtod_l+0x3fc>
 8015c98:	4a37      	ldr	r2, [pc, #220]	; (8015d78 <_strtod_l+0x590>)
 8015c9a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015c9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015ca2:	4650      	mov	r0, sl
 8015ca4:	4659      	mov	r1, fp
 8015ca6:	f7ea fde9 	bl	800087c <__aeabi_ddiv>
 8015caa:	e782      	b.n	8015bb2 <_strtod_l+0x3ca>
 8015cac:	2300      	movs	r3, #0
 8015cae:	4e33      	ldr	r6, [pc, #204]	; (8015d7c <_strtod_l+0x594>)
 8015cb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015cb4:	4650      	mov	r0, sl
 8015cb6:	4659      	mov	r1, fp
 8015cb8:	461d      	mov	r5, r3
 8015cba:	f1b8 0f01 	cmp.w	r8, #1
 8015cbe:	dc21      	bgt.n	8015d04 <_strtod_l+0x51c>
 8015cc0:	b10b      	cbz	r3, 8015cc6 <_strtod_l+0x4de>
 8015cc2:	4682      	mov	sl, r0
 8015cc4:	468b      	mov	fp, r1
 8015cc6:	4b2d      	ldr	r3, [pc, #180]	; (8015d7c <_strtod_l+0x594>)
 8015cc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015ccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015cd0:	4652      	mov	r2, sl
 8015cd2:	465b      	mov	r3, fp
 8015cd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015cd8:	f7ea fca6 	bl	8000628 <__aeabi_dmul>
 8015cdc:	4b28      	ldr	r3, [pc, #160]	; (8015d80 <_strtod_l+0x598>)
 8015cde:	460a      	mov	r2, r1
 8015ce0:	400b      	ands	r3, r1
 8015ce2:	4928      	ldr	r1, [pc, #160]	; (8015d84 <_strtod_l+0x59c>)
 8015ce4:	428b      	cmp	r3, r1
 8015ce6:	4682      	mov	sl, r0
 8015ce8:	d898      	bhi.n	8015c1c <_strtod_l+0x434>
 8015cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015cee:	428b      	cmp	r3, r1
 8015cf0:	bf86      	itte	hi
 8015cf2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015d8c <_strtod_l+0x5a4>
 8015cf6:	f04f 3aff 	movhi.w	sl, #4294967295
 8015cfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015cfe:	2300      	movs	r3, #0
 8015d00:	9304      	str	r3, [sp, #16]
 8015d02:	e077      	b.n	8015df4 <_strtod_l+0x60c>
 8015d04:	f018 0f01 	tst.w	r8, #1
 8015d08:	d006      	beq.n	8015d18 <_strtod_l+0x530>
 8015d0a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d12:	f7ea fc89 	bl	8000628 <__aeabi_dmul>
 8015d16:	2301      	movs	r3, #1
 8015d18:	3501      	adds	r5, #1
 8015d1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015d1e:	e7cc      	b.n	8015cba <_strtod_l+0x4d2>
 8015d20:	d0ed      	beq.n	8015cfe <_strtod_l+0x516>
 8015d22:	f1c8 0800 	rsb	r8, r8, #0
 8015d26:	f018 020f 	ands.w	r2, r8, #15
 8015d2a:	d00a      	beq.n	8015d42 <_strtod_l+0x55a>
 8015d2c:	4b12      	ldr	r3, [pc, #72]	; (8015d78 <_strtod_l+0x590>)
 8015d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d32:	4650      	mov	r0, sl
 8015d34:	4659      	mov	r1, fp
 8015d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3a:	f7ea fd9f 	bl	800087c <__aeabi_ddiv>
 8015d3e:	4682      	mov	sl, r0
 8015d40:	468b      	mov	fp, r1
 8015d42:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015d46:	d0da      	beq.n	8015cfe <_strtod_l+0x516>
 8015d48:	f1b8 0f1f 	cmp.w	r8, #31
 8015d4c:	dd20      	ble.n	8015d90 <_strtod_l+0x5a8>
 8015d4e:	2400      	movs	r4, #0
 8015d50:	46a0      	mov	r8, r4
 8015d52:	9407      	str	r4, [sp, #28]
 8015d54:	9405      	str	r4, [sp, #20]
 8015d56:	2322      	movs	r3, #34	; 0x22
 8015d58:	f04f 0a00 	mov.w	sl, #0
 8015d5c:	f04f 0b00 	mov.w	fp, #0
 8015d60:	f8c9 3000 	str.w	r3, [r9]
 8015d64:	e765      	b.n	8015c32 <_strtod_l+0x44a>
 8015d66:	bf00      	nop
 8015d68:	08019605 	.word	0x08019605
 8015d6c:	0801968b 	.word	0x0801968b
 8015d70:	0801960d 	.word	0x0801960d
 8015d74:	0801964c 	.word	0x0801964c
 8015d78:	08019730 	.word	0x08019730
 8015d7c:	08019708 	.word	0x08019708
 8015d80:	7ff00000 	.word	0x7ff00000
 8015d84:	7ca00000 	.word	0x7ca00000
 8015d88:	fff80000 	.word	0xfff80000
 8015d8c:	7fefffff 	.word	0x7fefffff
 8015d90:	f018 0310 	ands.w	r3, r8, #16
 8015d94:	bf18      	it	ne
 8015d96:	236a      	movne	r3, #106	; 0x6a
 8015d98:	4da0      	ldr	r5, [pc, #640]	; (801601c <_strtod_l+0x834>)
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	4650      	mov	r0, sl
 8015d9e:	4659      	mov	r1, fp
 8015da0:	2300      	movs	r3, #0
 8015da2:	f1b8 0f00 	cmp.w	r8, #0
 8015da6:	f300 810a 	bgt.w	8015fbe <_strtod_l+0x7d6>
 8015daa:	b10b      	cbz	r3, 8015db0 <_strtod_l+0x5c8>
 8015dac:	4682      	mov	sl, r0
 8015dae:	468b      	mov	fp, r1
 8015db0:	9b04      	ldr	r3, [sp, #16]
 8015db2:	b1bb      	cbz	r3, 8015de4 <_strtod_l+0x5fc>
 8015db4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015db8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	4659      	mov	r1, fp
 8015dc0:	dd10      	ble.n	8015de4 <_strtod_l+0x5fc>
 8015dc2:	2b1f      	cmp	r3, #31
 8015dc4:	f340 8107 	ble.w	8015fd6 <_strtod_l+0x7ee>
 8015dc8:	2b34      	cmp	r3, #52	; 0x34
 8015dca:	bfde      	ittt	le
 8015dcc:	3b20      	suble	r3, #32
 8015dce:	f04f 32ff 	movle.w	r2, #4294967295
 8015dd2:	fa02 f303 	lslle.w	r3, r2, r3
 8015dd6:	f04f 0a00 	mov.w	sl, #0
 8015dda:	bfcc      	ite	gt
 8015ddc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015de0:	ea03 0b01 	andle.w	fp, r3, r1
 8015de4:	2200      	movs	r2, #0
 8015de6:	2300      	movs	r3, #0
 8015de8:	4650      	mov	r0, sl
 8015dea:	4659      	mov	r1, fp
 8015dec:	f7ea fe84 	bl	8000af8 <__aeabi_dcmpeq>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d1ac      	bne.n	8015d4e <_strtod_l+0x566>
 8015df4:	9b07      	ldr	r3, [sp, #28]
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	9a05      	ldr	r2, [sp, #20]
 8015dfa:	9908      	ldr	r1, [sp, #32]
 8015dfc:	4623      	mov	r3, r4
 8015dfe:	4648      	mov	r0, r9
 8015e00:	f001 fdd2 	bl	80179a8 <__s2b>
 8015e04:	9007      	str	r0, [sp, #28]
 8015e06:	2800      	cmp	r0, #0
 8015e08:	f43f af08 	beq.w	8015c1c <_strtod_l+0x434>
 8015e0c:	9a06      	ldr	r2, [sp, #24]
 8015e0e:	9b06      	ldr	r3, [sp, #24]
 8015e10:	2a00      	cmp	r2, #0
 8015e12:	f1c3 0300 	rsb	r3, r3, #0
 8015e16:	bfa8      	it	ge
 8015e18:	2300      	movge	r3, #0
 8015e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8015e1c:	2400      	movs	r4, #0
 8015e1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015e22:	9316      	str	r3, [sp, #88]	; 0x58
 8015e24:	46a0      	mov	r8, r4
 8015e26:	9b07      	ldr	r3, [sp, #28]
 8015e28:	4648      	mov	r0, r9
 8015e2a:	6859      	ldr	r1, [r3, #4]
 8015e2c:	f001 fd36 	bl	801789c <_Balloc>
 8015e30:	9005      	str	r0, [sp, #20]
 8015e32:	2800      	cmp	r0, #0
 8015e34:	f43f aef6 	beq.w	8015c24 <_strtod_l+0x43c>
 8015e38:	9b07      	ldr	r3, [sp, #28]
 8015e3a:	691a      	ldr	r2, [r3, #16]
 8015e3c:	3202      	adds	r2, #2
 8015e3e:	f103 010c 	add.w	r1, r3, #12
 8015e42:	0092      	lsls	r2, r2, #2
 8015e44:	300c      	adds	r0, #12
 8015e46:	f7fe fdd3 	bl	80149f0 <memcpy>
 8015e4a:	aa1e      	add	r2, sp, #120	; 0x78
 8015e4c:	a91d      	add	r1, sp, #116	; 0x74
 8015e4e:	ec4b ab10 	vmov	d0, sl, fp
 8015e52:	4648      	mov	r0, r9
 8015e54:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015e58:	f002 f862 	bl	8017f20 <__d2b>
 8015e5c:	901c      	str	r0, [sp, #112]	; 0x70
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	f43f aee0 	beq.w	8015c24 <_strtod_l+0x43c>
 8015e64:	2101      	movs	r1, #1
 8015e66:	4648      	mov	r0, r9
 8015e68:	f001 fe2a 	bl	8017ac0 <__i2b>
 8015e6c:	4680      	mov	r8, r0
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f43f aed8 	beq.w	8015c24 <_strtod_l+0x43c>
 8015e74:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015e76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015e78:	2e00      	cmp	r6, #0
 8015e7a:	bfab      	itete	ge
 8015e7c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015e7e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015e80:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015e82:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015e84:	bfac      	ite	ge
 8015e86:	18f7      	addge	r7, r6, r3
 8015e88:	1b9d      	sublt	r5, r3, r6
 8015e8a:	9b04      	ldr	r3, [sp, #16]
 8015e8c:	1af6      	subs	r6, r6, r3
 8015e8e:	4416      	add	r6, r2
 8015e90:	4b63      	ldr	r3, [pc, #396]	; (8016020 <_strtod_l+0x838>)
 8015e92:	3e01      	subs	r6, #1
 8015e94:	429e      	cmp	r6, r3
 8015e96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015e9a:	f280 80af 	bge.w	8015ffc <_strtod_l+0x814>
 8015e9e:	1b9b      	subs	r3, r3, r6
 8015ea0:	2b1f      	cmp	r3, #31
 8015ea2:	eba2 0203 	sub.w	r2, r2, r3
 8015ea6:	f04f 0101 	mov.w	r1, #1
 8015eaa:	f300 809b 	bgt.w	8015fe4 <_strtod_l+0x7fc>
 8015eae:	fa01 f303 	lsl.w	r3, r1, r3
 8015eb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015eb8:	18be      	adds	r6, r7, r2
 8015eba:	9b04      	ldr	r3, [sp, #16]
 8015ebc:	42b7      	cmp	r7, r6
 8015ebe:	4415      	add	r5, r2
 8015ec0:	441d      	add	r5, r3
 8015ec2:	463b      	mov	r3, r7
 8015ec4:	bfa8      	it	ge
 8015ec6:	4633      	movge	r3, r6
 8015ec8:	42ab      	cmp	r3, r5
 8015eca:	bfa8      	it	ge
 8015ecc:	462b      	movge	r3, r5
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	bfc2      	ittt	gt
 8015ed2:	1af6      	subgt	r6, r6, r3
 8015ed4:	1aed      	subgt	r5, r5, r3
 8015ed6:	1aff      	subgt	r7, r7, r3
 8015ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eda:	b1bb      	cbz	r3, 8015f0c <_strtod_l+0x724>
 8015edc:	4641      	mov	r1, r8
 8015ede:	461a      	mov	r2, r3
 8015ee0:	4648      	mov	r0, r9
 8015ee2:	f001 fe8d 	bl	8017c00 <__pow5mult>
 8015ee6:	4680      	mov	r8, r0
 8015ee8:	2800      	cmp	r0, #0
 8015eea:	f43f ae9b 	beq.w	8015c24 <_strtod_l+0x43c>
 8015eee:	4601      	mov	r1, r0
 8015ef0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ef2:	4648      	mov	r0, r9
 8015ef4:	f001 fded 	bl	8017ad2 <__multiply>
 8015ef8:	900c      	str	r0, [sp, #48]	; 0x30
 8015efa:	2800      	cmp	r0, #0
 8015efc:	f43f ae92 	beq.w	8015c24 <_strtod_l+0x43c>
 8015f00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f02:	4648      	mov	r0, r9
 8015f04:	f001 fcfe 	bl	8017904 <_Bfree>
 8015f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f0a:	931c      	str	r3, [sp, #112]	; 0x70
 8015f0c:	2e00      	cmp	r6, #0
 8015f0e:	dc7a      	bgt.n	8016006 <_strtod_l+0x81e>
 8015f10:	9b06      	ldr	r3, [sp, #24]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	dd08      	ble.n	8015f28 <_strtod_l+0x740>
 8015f16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015f18:	9905      	ldr	r1, [sp, #20]
 8015f1a:	4648      	mov	r0, r9
 8015f1c:	f001 fe70 	bl	8017c00 <__pow5mult>
 8015f20:	9005      	str	r0, [sp, #20]
 8015f22:	2800      	cmp	r0, #0
 8015f24:	f43f ae7e 	beq.w	8015c24 <_strtod_l+0x43c>
 8015f28:	2d00      	cmp	r5, #0
 8015f2a:	dd08      	ble.n	8015f3e <_strtod_l+0x756>
 8015f2c:	462a      	mov	r2, r5
 8015f2e:	9905      	ldr	r1, [sp, #20]
 8015f30:	4648      	mov	r0, r9
 8015f32:	f001 feb3 	bl	8017c9c <__lshift>
 8015f36:	9005      	str	r0, [sp, #20]
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f43f ae73 	beq.w	8015c24 <_strtod_l+0x43c>
 8015f3e:	2f00      	cmp	r7, #0
 8015f40:	dd08      	ble.n	8015f54 <_strtod_l+0x76c>
 8015f42:	4641      	mov	r1, r8
 8015f44:	463a      	mov	r2, r7
 8015f46:	4648      	mov	r0, r9
 8015f48:	f001 fea8 	bl	8017c9c <__lshift>
 8015f4c:	4680      	mov	r8, r0
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	f43f ae68 	beq.w	8015c24 <_strtod_l+0x43c>
 8015f54:	9a05      	ldr	r2, [sp, #20]
 8015f56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f58:	4648      	mov	r0, r9
 8015f5a:	f001 ff0d 	bl	8017d78 <__mdiff>
 8015f5e:	4604      	mov	r4, r0
 8015f60:	2800      	cmp	r0, #0
 8015f62:	f43f ae5f 	beq.w	8015c24 <_strtod_l+0x43c>
 8015f66:	68c3      	ldr	r3, [r0, #12]
 8015f68:	930c      	str	r3, [sp, #48]	; 0x30
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	60c3      	str	r3, [r0, #12]
 8015f6e:	4641      	mov	r1, r8
 8015f70:	f001 fee8 	bl	8017d44 <__mcmp>
 8015f74:	2800      	cmp	r0, #0
 8015f76:	da55      	bge.n	8016024 <_strtod_l+0x83c>
 8015f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f7a:	b9e3      	cbnz	r3, 8015fb6 <_strtod_l+0x7ce>
 8015f7c:	f1ba 0f00 	cmp.w	sl, #0
 8015f80:	d119      	bne.n	8015fb6 <_strtod_l+0x7ce>
 8015f82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f86:	b9b3      	cbnz	r3, 8015fb6 <_strtod_l+0x7ce>
 8015f88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f8c:	0d1b      	lsrs	r3, r3, #20
 8015f8e:	051b      	lsls	r3, r3, #20
 8015f90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015f94:	d90f      	bls.n	8015fb6 <_strtod_l+0x7ce>
 8015f96:	6963      	ldr	r3, [r4, #20]
 8015f98:	b913      	cbnz	r3, 8015fa0 <_strtod_l+0x7b8>
 8015f9a:	6923      	ldr	r3, [r4, #16]
 8015f9c:	2b01      	cmp	r3, #1
 8015f9e:	dd0a      	ble.n	8015fb6 <_strtod_l+0x7ce>
 8015fa0:	4621      	mov	r1, r4
 8015fa2:	2201      	movs	r2, #1
 8015fa4:	4648      	mov	r0, r9
 8015fa6:	f001 fe79 	bl	8017c9c <__lshift>
 8015faa:	4641      	mov	r1, r8
 8015fac:	4604      	mov	r4, r0
 8015fae:	f001 fec9 	bl	8017d44 <__mcmp>
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	dc67      	bgt.n	8016086 <_strtod_l+0x89e>
 8015fb6:	9b04      	ldr	r3, [sp, #16]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d171      	bne.n	80160a0 <_strtod_l+0x8b8>
 8015fbc:	e63d      	b.n	8015c3a <_strtod_l+0x452>
 8015fbe:	f018 0f01 	tst.w	r8, #1
 8015fc2:	d004      	beq.n	8015fce <_strtod_l+0x7e6>
 8015fc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015fc8:	f7ea fb2e 	bl	8000628 <__aeabi_dmul>
 8015fcc:	2301      	movs	r3, #1
 8015fce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015fd2:	3508      	adds	r5, #8
 8015fd4:	e6e5      	b.n	8015da2 <_strtod_l+0x5ba>
 8015fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8015fda:	fa02 f303 	lsl.w	r3, r2, r3
 8015fde:	ea03 0a0a 	and.w	sl, r3, sl
 8015fe2:	e6ff      	b.n	8015de4 <_strtod_l+0x5fc>
 8015fe4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015fe8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015fec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ff0:	36e2      	adds	r6, #226	; 0xe2
 8015ff2:	fa01 f306 	lsl.w	r3, r1, r6
 8015ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ff8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015ffa:	e75d      	b.n	8015eb8 <_strtod_l+0x6d0>
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8016000:	2301      	movs	r3, #1
 8016002:	930f      	str	r3, [sp, #60]	; 0x3c
 8016004:	e758      	b.n	8015eb8 <_strtod_l+0x6d0>
 8016006:	4632      	mov	r2, r6
 8016008:	991c      	ldr	r1, [sp, #112]	; 0x70
 801600a:	4648      	mov	r0, r9
 801600c:	f001 fe46 	bl	8017c9c <__lshift>
 8016010:	901c      	str	r0, [sp, #112]	; 0x70
 8016012:	2800      	cmp	r0, #0
 8016014:	f47f af7c 	bne.w	8015f10 <_strtod_l+0x728>
 8016018:	e604      	b.n	8015c24 <_strtod_l+0x43c>
 801601a:	bf00      	nop
 801601c:	08019660 	.word	0x08019660
 8016020:	fffffc02 	.word	0xfffffc02
 8016024:	465d      	mov	r5, fp
 8016026:	f040 8086 	bne.w	8016136 <_strtod_l+0x94e>
 801602a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801602c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016030:	b32a      	cbz	r2, 801607e <_strtod_l+0x896>
 8016032:	4aaf      	ldr	r2, [pc, #700]	; (80162f0 <_strtod_l+0xb08>)
 8016034:	4293      	cmp	r3, r2
 8016036:	d153      	bne.n	80160e0 <_strtod_l+0x8f8>
 8016038:	9b04      	ldr	r3, [sp, #16]
 801603a:	4650      	mov	r0, sl
 801603c:	b1d3      	cbz	r3, 8016074 <_strtod_l+0x88c>
 801603e:	4aad      	ldr	r2, [pc, #692]	; (80162f4 <_strtod_l+0xb0c>)
 8016040:	402a      	ands	r2, r5
 8016042:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016046:	f04f 31ff 	mov.w	r1, #4294967295
 801604a:	d816      	bhi.n	801607a <_strtod_l+0x892>
 801604c:	0d12      	lsrs	r2, r2, #20
 801604e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016052:	fa01 f303 	lsl.w	r3, r1, r3
 8016056:	4298      	cmp	r0, r3
 8016058:	d142      	bne.n	80160e0 <_strtod_l+0x8f8>
 801605a:	4ba7      	ldr	r3, [pc, #668]	; (80162f8 <_strtod_l+0xb10>)
 801605c:	429d      	cmp	r5, r3
 801605e:	d102      	bne.n	8016066 <_strtod_l+0x87e>
 8016060:	3001      	adds	r0, #1
 8016062:	f43f addf 	beq.w	8015c24 <_strtod_l+0x43c>
 8016066:	4ba3      	ldr	r3, [pc, #652]	; (80162f4 <_strtod_l+0xb0c>)
 8016068:	402b      	ands	r3, r5
 801606a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801606e:	f04f 0a00 	mov.w	sl, #0
 8016072:	e7a0      	b.n	8015fb6 <_strtod_l+0x7ce>
 8016074:	f04f 33ff 	mov.w	r3, #4294967295
 8016078:	e7ed      	b.n	8016056 <_strtod_l+0x86e>
 801607a:	460b      	mov	r3, r1
 801607c:	e7eb      	b.n	8016056 <_strtod_l+0x86e>
 801607e:	bb7b      	cbnz	r3, 80160e0 <_strtod_l+0x8f8>
 8016080:	f1ba 0f00 	cmp.w	sl, #0
 8016084:	d12c      	bne.n	80160e0 <_strtod_l+0x8f8>
 8016086:	9904      	ldr	r1, [sp, #16]
 8016088:	4a9a      	ldr	r2, [pc, #616]	; (80162f4 <_strtod_l+0xb0c>)
 801608a:	465b      	mov	r3, fp
 801608c:	b1f1      	cbz	r1, 80160cc <_strtod_l+0x8e4>
 801608e:	ea02 010b 	and.w	r1, r2, fp
 8016092:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016096:	dc19      	bgt.n	80160cc <_strtod_l+0x8e4>
 8016098:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801609c:	f77f ae5b 	ble.w	8015d56 <_strtod_l+0x56e>
 80160a0:	4a96      	ldr	r2, [pc, #600]	; (80162fc <_strtod_l+0xb14>)
 80160a2:	2300      	movs	r3, #0
 80160a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80160a8:	4650      	mov	r0, sl
 80160aa:	4659      	mov	r1, fp
 80160ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80160b0:	f7ea faba 	bl	8000628 <__aeabi_dmul>
 80160b4:	4682      	mov	sl, r0
 80160b6:	468b      	mov	fp, r1
 80160b8:	2900      	cmp	r1, #0
 80160ba:	f47f adbe 	bne.w	8015c3a <_strtod_l+0x452>
 80160be:	2800      	cmp	r0, #0
 80160c0:	f47f adbb 	bne.w	8015c3a <_strtod_l+0x452>
 80160c4:	2322      	movs	r3, #34	; 0x22
 80160c6:	f8c9 3000 	str.w	r3, [r9]
 80160ca:	e5b6      	b.n	8015c3a <_strtod_l+0x452>
 80160cc:	4013      	ands	r3, r2
 80160ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80160d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80160d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80160da:	f04f 3aff 	mov.w	sl, #4294967295
 80160de:	e76a      	b.n	8015fb6 <_strtod_l+0x7ce>
 80160e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e2:	b193      	cbz	r3, 801610a <_strtod_l+0x922>
 80160e4:	422b      	tst	r3, r5
 80160e6:	f43f af66 	beq.w	8015fb6 <_strtod_l+0x7ce>
 80160ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160ec:	9a04      	ldr	r2, [sp, #16]
 80160ee:	4650      	mov	r0, sl
 80160f0:	4659      	mov	r1, fp
 80160f2:	b173      	cbz	r3, 8016112 <_strtod_l+0x92a>
 80160f4:	f7ff fb5c 	bl	80157b0 <sulp>
 80160f8:	4602      	mov	r2, r0
 80160fa:	460b      	mov	r3, r1
 80160fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016100:	f7ea f8dc 	bl	80002bc <__adddf3>
 8016104:	4682      	mov	sl, r0
 8016106:	468b      	mov	fp, r1
 8016108:	e755      	b.n	8015fb6 <_strtod_l+0x7ce>
 801610a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801610c:	ea13 0f0a 	tst.w	r3, sl
 8016110:	e7e9      	b.n	80160e6 <_strtod_l+0x8fe>
 8016112:	f7ff fb4d 	bl	80157b0 <sulp>
 8016116:	4602      	mov	r2, r0
 8016118:	460b      	mov	r3, r1
 801611a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801611e:	f7ea f8cb 	bl	80002b8 <__aeabi_dsub>
 8016122:	2200      	movs	r2, #0
 8016124:	2300      	movs	r3, #0
 8016126:	4682      	mov	sl, r0
 8016128:	468b      	mov	fp, r1
 801612a:	f7ea fce5 	bl	8000af8 <__aeabi_dcmpeq>
 801612e:	2800      	cmp	r0, #0
 8016130:	f47f ae11 	bne.w	8015d56 <_strtod_l+0x56e>
 8016134:	e73f      	b.n	8015fb6 <_strtod_l+0x7ce>
 8016136:	4641      	mov	r1, r8
 8016138:	4620      	mov	r0, r4
 801613a:	f001 ff40 	bl	8017fbe <__ratio>
 801613e:	ec57 6b10 	vmov	r6, r7, d0
 8016142:	2200      	movs	r2, #0
 8016144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016148:	ee10 0a10 	vmov	r0, s0
 801614c:	4639      	mov	r1, r7
 801614e:	f7ea fce7 	bl	8000b20 <__aeabi_dcmple>
 8016152:	2800      	cmp	r0, #0
 8016154:	d077      	beq.n	8016246 <_strtod_l+0xa5e>
 8016156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016158:	2b00      	cmp	r3, #0
 801615a:	d04a      	beq.n	80161f2 <_strtod_l+0xa0a>
 801615c:	4b68      	ldr	r3, [pc, #416]	; (8016300 <_strtod_l+0xb18>)
 801615e:	2200      	movs	r2, #0
 8016160:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016164:	4f66      	ldr	r7, [pc, #408]	; (8016300 <_strtod_l+0xb18>)
 8016166:	2600      	movs	r6, #0
 8016168:	4b62      	ldr	r3, [pc, #392]	; (80162f4 <_strtod_l+0xb0c>)
 801616a:	402b      	ands	r3, r5
 801616c:	930f      	str	r3, [sp, #60]	; 0x3c
 801616e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016170:	4b64      	ldr	r3, [pc, #400]	; (8016304 <_strtod_l+0xb1c>)
 8016172:	429a      	cmp	r2, r3
 8016174:	f040 80ce 	bne.w	8016314 <_strtod_l+0xb2c>
 8016178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801617c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016180:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016184:	ec4b ab10 	vmov	d0, sl, fp
 8016188:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801618c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016190:	f001 fe50 	bl	8017e34 <__ulp>
 8016194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016198:	ec53 2b10 	vmov	r2, r3, d0
 801619c:	f7ea fa44 	bl	8000628 <__aeabi_dmul>
 80161a0:	4652      	mov	r2, sl
 80161a2:	465b      	mov	r3, fp
 80161a4:	f7ea f88a 	bl	80002bc <__adddf3>
 80161a8:	460b      	mov	r3, r1
 80161aa:	4952      	ldr	r1, [pc, #328]	; (80162f4 <_strtod_l+0xb0c>)
 80161ac:	4a56      	ldr	r2, [pc, #344]	; (8016308 <_strtod_l+0xb20>)
 80161ae:	4019      	ands	r1, r3
 80161b0:	4291      	cmp	r1, r2
 80161b2:	4682      	mov	sl, r0
 80161b4:	d95b      	bls.n	801626e <_strtod_l+0xa86>
 80161b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80161bc:	4293      	cmp	r3, r2
 80161be:	d103      	bne.n	80161c8 <_strtod_l+0x9e0>
 80161c0:	9b08      	ldr	r3, [sp, #32]
 80161c2:	3301      	adds	r3, #1
 80161c4:	f43f ad2e 	beq.w	8015c24 <_strtod_l+0x43c>
 80161c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80162f8 <_strtod_l+0xb10>
 80161cc:	f04f 3aff 	mov.w	sl, #4294967295
 80161d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80161d2:	4648      	mov	r0, r9
 80161d4:	f001 fb96 	bl	8017904 <_Bfree>
 80161d8:	9905      	ldr	r1, [sp, #20]
 80161da:	4648      	mov	r0, r9
 80161dc:	f001 fb92 	bl	8017904 <_Bfree>
 80161e0:	4641      	mov	r1, r8
 80161e2:	4648      	mov	r0, r9
 80161e4:	f001 fb8e 	bl	8017904 <_Bfree>
 80161e8:	4621      	mov	r1, r4
 80161ea:	4648      	mov	r0, r9
 80161ec:	f001 fb8a 	bl	8017904 <_Bfree>
 80161f0:	e619      	b.n	8015e26 <_strtod_l+0x63e>
 80161f2:	f1ba 0f00 	cmp.w	sl, #0
 80161f6:	d11a      	bne.n	801622e <_strtod_l+0xa46>
 80161f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161fc:	b9eb      	cbnz	r3, 801623a <_strtod_l+0xa52>
 80161fe:	2200      	movs	r2, #0
 8016200:	4b3f      	ldr	r3, [pc, #252]	; (8016300 <_strtod_l+0xb18>)
 8016202:	4630      	mov	r0, r6
 8016204:	4639      	mov	r1, r7
 8016206:	f7ea fc81 	bl	8000b0c <__aeabi_dcmplt>
 801620a:	b9c8      	cbnz	r0, 8016240 <_strtod_l+0xa58>
 801620c:	4630      	mov	r0, r6
 801620e:	4639      	mov	r1, r7
 8016210:	2200      	movs	r2, #0
 8016212:	4b3e      	ldr	r3, [pc, #248]	; (801630c <_strtod_l+0xb24>)
 8016214:	f7ea fa08 	bl	8000628 <__aeabi_dmul>
 8016218:	4606      	mov	r6, r0
 801621a:	460f      	mov	r7, r1
 801621c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016220:	9618      	str	r6, [sp, #96]	; 0x60
 8016222:	9319      	str	r3, [sp, #100]	; 0x64
 8016224:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801622c:	e79c      	b.n	8016168 <_strtod_l+0x980>
 801622e:	f1ba 0f01 	cmp.w	sl, #1
 8016232:	d102      	bne.n	801623a <_strtod_l+0xa52>
 8016234:	2d00      	cmp	r5, #0
 8016236:	f43f ad8e 	beq.w	8015d56 <_strtod_l+0x56e>
 801623a:	2200      	movs	r2, #0
 801623c:	4b34      	ldr	r3, [pc, #208]	; (8016310 <_strtod_l+0xb28>)
 801623e:	e78f      	b.n	8016160 <_strtod_l+0x978>
 8016240:	2600      	movs	r6, #0
 8016242:	4f32      	ldr	r7, [pc, #200]	; (801630c <_strtod_l+0xb24>)
 8016244:	e7ea      	b.n	801621c <_strtod_l+0xa34>
 8016246:	4b31      	ldr	r3, [pc, #196]	; (801630c <_strtod_l+0xb24>)
 8016248:	4630      	mov	r0, r6
 801624a:	4639      	mov	r1, r7
 801624c:	2200      	movs	r2, #0
 801624e:	f7ea f9eb 	bl	8000628 <__aeabi_dmul>
 8016252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016254:	4606      	mov	r6, r0
 8016256:	460f      	mov	r7, r1
 8016258:	b933      	cbnz	r3, 8016268 <_strtod_l+0xa80>
 801625a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801625e:	9010      	str	r0, [sp, #64]	; 0x40
 8016260:	9311      	str	r3, [sp, #68]	; 0x44
 8016262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016266:	e7df      	b.n	8016228 <_strtod_l+0xa40>
 8016268:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801626c:	e7f9      	b.n	8016262 <_strtod_l+0xa7a>
 801626e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016272:	9b04      	ldr	r3, [sp, #16]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d1ab      	bne.n	80161d0 <_strtod_l+0x9e8>
 8016278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801627c:	0d1b      	lsrs	r3, r3, #20
 801627e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016280:	051b      	lsls	r3, r3, #20
 8016282:	429a      	cmp	r2, r3
 8016284:	465d      	mov	r5, fp
 8016286:	d1a3      	bne.n	80161d0 <_strtod_l+0x9e8>
 8016288:	4639      	mov	r1, r7
 801628a:	4630      	mov	r0, r6
 801628c:	f7ea fc7c 	bl	8000b88 <__aeabi_d2iz>
 8016290:	f7ea f960 	bl	8000554 <__aeabi_i2d>
 8016294:	460b      	mov	r3, r1
 8016296:	4602      	mov	r2, r0
 8016298:	4639      	mov	r1, r7
 801629a:	4630      	mov	r0, r6
 801629c:	f7ea f80c 	bl	80002b8 <__aeabi_dsub>
 80162a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162a2:	4606      	mov	r6, r0
 80162a4:	460f      	mov	r7, r1
 80162a6:	b933      	cbnz	r3, 80162b6 <_strtod_l+0xace>
 80162a8:	f1ba 0f00 	cmp.w	sl, #0
 80162ac:	d103      	bne.n	80162b6 <_strtod_l+0xace>
 80162ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80162b2:	2d00      	cmp	r5, #0
 80162b4:	d06d      	beq.n	8016392 <_strtod_l+0xbaa>
 80162b6:	a30a      	add	r3, pc, #40	; (adr r3, 80162e0 <_strtod_l+0xaf8>)
 80162b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162bc:	4630      	mov	r0, r6
 80162be:	4639      	mov	r1, r7
 80162c0:	f7ea fc24 	bl	8000b0c <__aeabi_dcmplt>
 80162c4:	2800      	cmp	r0, #0
 80162c6:	f47f acb8 	bne.w	8015c3a <_strtod_l+0x452>
 80162ca:	a307      	add	r3, pc, #28	; (adr r3, 80162e8 <_strtod_l+0xb00>)
 80162cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d0:	4630      	mov	r0, r6
 80162d2:	4639      	mov	r1, r7
 80162d4:	f7ea fc38 	bl	8000b48 <__aeabi_dcmpgt>
 80162d8:	2800      	cmp	r0, #0
 80162da:	f43f af79 	beq.w	80161d0 <_strtod_l+0x9e8>
 80162de:	e4ac      	b.n	8015c3a <_strtod_l+0x452>
 80162e0:	94a03595 	.word	0x94a03595
 80162e4:	3fdfffff 	.word	0x3fdfffff
 80162e8:	35afe535 	.word	0x35afe535
 80162ec:	3fe00000 	.word	0x3fe00000
 80162f0:	000fffff 	.word	0x000fffff
 80162f4:	7ff00000 	.word	0x7ff00000
 80162f8:	7fefffff 	.word	0x7fefffff
 80162fc:	39500000 	.word	0x39500000
 8016300:	3ff00000 	.word	0x3ff00000
 8016304:	7fe00000 	.word	0x7fe00000
 8016308:	7c9fffff 	.word	0x7c9fffff
 801630c:	3fe00000 	.word	0x3fe00000
 8016310:	bff00000 	.word	0xbff00000
 8016314:	9b04      	ldr	r3, [sp, #16]
 8016316:	b333      	cbz	r3, 8016366 <_strtod_l+0xb7e>
 8016318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801631a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801631e:	d822      	bhi.n	8016366 <_strtod_l+0xb7e>
 8016320:	a327      	add	r3, pc, #156	; (adr r3, 80163c0 <_strtod_l+0xbd8>)
 8016322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016326:	4630      	mov	r0, r6
 8016328:	4639      	mov	r1, r7
 801632a:	f7ea fbf9 	bl	8000b20 <__aeabi_dcmple>
 801632e:	b1a0      	cbz	r0, 801635a <_strtod_l+0xb72>
 8016330:	4639      	mov	r1, r7
 8016332:	4630      	mov	r0, r6
 8016334:	f7ea fc50 	bl	8000bd8 <__aeabi_d2uiz>
 8016338:	2800      	cmp	r0, #0
 801633a:	bf08      	it	eq
 801633c:	2001      	moveq	r0, #1
 801633e:	f7ea f8f9 	bl	8000534 <__aeabi_ui2d>
 8016342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016344:	4606      	mov	r6, r0
 8016346:	460f      	mov	r7, r1
 8016348:	bb03      	cbnz	r3, 801638c <_strtod_l+0xba4>
 801634a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801634e:	9012      	str	r0, [sp, #72]	; 0x48
 8016350:	9313      	str	r3, [sp, #76]	; 0x4c
 8016352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016356:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801635a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801635c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801635e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016362:	1a9b      	subs	r3, r3, r2
 8016364:	930b      	str	r3, [sp, #44]	; 0x2c
 8016366:	ed9d 0b08 	vldr	d0, [sp, #32]
 801636a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801636e:	f001 fd61 	bl	8017e34 <__ulp>
 8016372:	4650      	mov	r0, sl
 8016374:	ec53 2b10 	vmov	r2, r3, d0
 8016378:	4659      	mov	r1, fp
 801637a:	f7ea f955 	bl	8000628 <__aeabi_dmul>
 801637e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016382:	f7e9 ff9b 	bl	80002bc <__adddf3>
 8016386:	4682      	mov	sl, r0
 8016388:	468b      	mov	fp, r1
 801638a:	e772      	b.n	8016272 <_strtod_l+0xa8a>
 801638c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016390:	e7df      	b.n	8016352 <_strtod_l+0xb6a>
 8016392:	a30d      	add	r3, pc, #52	; (adr r3, 80163c8 <_strtod_l+0xbe0>)
 8016394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016398:	f7ea fbb8 	bl	8000b0c <__aeabi_dcmplt>
 801639c:	e79c      	b.n	80162d8 <_strtod_l+0xaf0>
 801639e:	2300      	movs	r3, #0
 80163a0:	930d      	str	r3, [sp, #52]	; 0x34
 80163a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80163a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163a6:	6013      	str	r3, [r2, #0]
 80163a8:	f7ff ba61 	b.w	801586e <_strtod_l+0x86>
 80163ac:	2b65      	cmp	r3, #101	; 0x65
 80163ae:	f04f 0200 	mov.w	r2, #0
 80163b2:	f43f ab4e 	beq.w	8015a52 <_strtod_l+0x26a>
 80163b6:	2101      	movs	r1, #1
 80163b8:	4614      	mov	r4, r2
 80163ba:	9104      	str	r1, [sp, #16]
 80163bc:	f7ff bacb 	b.w	8015956 <_strtod_l+0x16e>
 80163c0:	ffc00000 	.word	0xffc00000
 80163c4:	41dfffff 	.word	0x41dfffff
 80163c8:	94a03595 	.word	0x94a03595
 80163cc:	3fcfffff 	.word	0x3fcfffff

080163d0 <_strtod_r>:
 80163d0:	4b05      	ldr	r3, [pc, #20]	; (80163e8 <_strtod_r+0x18>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	b410      	push	{r4}
 80163d6:	6a1b      	ldr	r3, [r3, #32]
 80163d8:	4c04      	ldr	r4, [pc, #16]	; (80163ec <_strtod_r+0x1c>)
 80163da:	2b00      	cmp	r3, #0
 80163dc:	bf08      	it	eq
 80163de:	4623      	moveq	r3, r4
 80163e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163e4:	f7ff ba00 	b.w	80157e8 <_strtod_l>
 80163e8:	2000000c 	.word	0x2000000c
 80163ec:	20000070 	.word	0x20000070

080163f0 <_strtol_l.isra.0>:
 80163f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f4:	4680      	mov	r8, r0
 80163f6:	4689      	mov	r9, r1
 80163f8:	4692      	mov	sl, r2
 80163fa:	461e      	mov	r6, r3
 80163fc:	460f      	mov	r7, r1
 80163fe:	463d      	mov	r5, r7
 8016400:	9808      	ldr	r0, [sp, #32]
 8016402:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016406:	f001 fa0d 	bl	8017824 <__locale_ctype_ptr_l>
 801640a:	4420      	add	r0, r4
 801640c:	7843      	ldrb	r3, [r0, #1]
 801640e:	f013 0308 	ands.w	r3, r3, #8
 8016412:	d132      	bne.n	801647a <_strtol_l.isra.0+0x8a>
 8016414:	2c2d      	cmp	r4, #45	; 0x2d
 8016416:	d132      	bne.n	801647e <_strtol_l.isra.0+0x8e>
 8016418:	787c      	ldrb	r4, [r7, #1]
 801641a:	1cbd      	adds	r5, r7, #2
 801641c:	2201      	movs	r2, #1
 801641e:	2e00      	cmp	r6, #0
 8016420:	d05d      	beq.n	80164de <_strtol_l.isra.0+0xee>
 8016422:	2e10      	cmp	r6, #16
 8016424:	d109      	bne.n	801643a <_strtol_l.isra.0+0x4a>
 8016426:	2c30      	cmp	r4, #48	; 0x30
 8016428:	d107      	bne.n	801643a <_strtol_l.isra.0+0x4a>
 801642a:	782b      	ldrb	r3, [r5, #0]
 801642c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016430:	2b58      	cmp	r3, #88	; 0x58
 8016432:	d14f      	bne.n	80164d4 <_strtol_l.isra.0+0xe4>
 8016434:	786c      	ldrb	r4, [r5, #1]
 8016436:	2610      	movs	r6, #16
 8016438:	3502      	adds	r5, #2
 801643a:	2a00      	cmp	r2, #0
 801643c:	bf14      	ite	ne
 801643e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016442:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016446:	2700      	movs	r7, #0
 8016448:	fbb1 fcf6 	udiv	ip, r1, r6
 801644c:	4638      	mov	r0, r7
 801644e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016452:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016456:	2b09      	cmp	r3, #9
 8016458:	d817      	bhi.n	801648a <_strtol_l.isra.0+0x9a>
 801645a:	461c      	mov	r4, r3
 801645c:	42a6      	cmp	r6, r4
 801645e:	dd23      	ble.n	80164a8 <_strtol_l.isra.0+0xb8>
 8016460:	1c7b      	adds	r3, r7, #1
 8016462:	d007      	beq.n	8016474 <_strtol_l.isra.0+0x84>
 8016464:	4584      	cmp	ip, r0
 8016466:	d31c      	bcc.n	80164a2 <_strtol_l.isra.0+0xb2>
 8016468:	d101      	bne.n	801646e <_strtol_l.isra.0+0x7e>
 801646a:	45a6      	cmp	lr, r4
 801646c:	db19      	blt.n	80164a2 <_strtol_l.isra.0+0xb2>
 801646e:	fb00 4006 	mla	r0, r0, r6, r4
 8016472:	2701      	movs	r7, #1
 8016474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016478:	e7eb      	b.n	8016452 <_strtol_l.isra.0+0x62>
 801647a:	462f      	mov	r7, r5
 801647c:	e7bf      	b.n	80163fe <_strtol_l.isra.0+0xe>
 801647e:	2c2b      	cmp	r4, #43	; 0x2b
 8016480:	bf04      	itt	eq
 8016482:	1cbd      	addeq	r5, r7, #2
 8016484:	787c      	ldrbeq	r4, [r7, #1]
 8016486:	461a      	mov	r2, r3
 8016488:	e7c9      	b.n	801641e <_strtol_l.isra.0+0x2e>
 801648a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801648e:	2b19      	cmp	r3, #25
 8016490:	d801      	bhi.n	8016496 <_strtol_l.isra.0+0xa6>
 8016492:	3c37      	subs	r4, #55	; 0x37
 8016494:	e7e2      	b.n	801645c <_strtol_l.isra.0+0x6c>
 8016496:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801649a:	2b19      	cmp	r3, #25
 801649c:	d804      	bhi.n	80164a8 <_strtol_l.isra.0+0xb8>
 801649e:	3c57      	subs	r4, #87	; 0x57
 80164a0:	e7dc      	b.n	801645c <_strtol_l.isra.0+0x6c>
 80164a2:	f04f 37ff 	mov.w	r7, #4294967295
 80164a6:	e7e5      	b.n	8016474 <_strtol_l.isra.0+0x84>
 80164a8:	1c7b      	adds	r3, r7, #1
 80164aa:	d108      	bne.n	80164be <_strtol_l.isra.0+0xce>
 80164ac:	2322      	movs	r3, #34	; 0x22
 80164ae:	f8c8 3000 	str.w	r3, [r8]
 80164b2:	4608      	mov	r0, r1
 80164b4:	f1ba 0f00 	cmp.w	sl, #0
 80164b8:	d107      	bne.n	80164ca <_strtol_l.isra.0+0xda>
 80164ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164be:	b102      	cbz	r2, 80164c2 <_strtol_l.isra.0+0xd2>
 80164c0:	4240      	negs	r0, r0
 80164c2:	f1ba 0f00 	cmp.w	sl, #0
 80164c6:	d0f8      	beq.n	80164ba <_strtol_l.isra.0+0xca>
 80164c8:	b10f      	cbz	r7, 80164ce <_strtol_l.isra.0+0xde>
 80164ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80164ce:	f8ca 9000 	str.w	r9, [sl]
 80164d2:	e7f2      	b.n	80164ba <_strtol_l.isra.0+0xca>
 80164d4:	2430      	movs	r4, #48	; 0x30
 80164d6:	2e00      	cmp	r6, #0
 80164d8:	d1af      	bne.n	801643a <_strtol_l.isra.0+0x4a>
 80164da:	2608      	movs	r6, #8
 80164dc:	e7ad      	b.n	801643a <_strtol_l.isra.0+0x4a>
 80164de:	2c30      	cmp	r4, #48	; 0x30
 80164e0:	d0a3      	beq.n	801642a <_strtol_l.isra.0+0x3a>
 80164e2:	260a      	movs	r6, #10
 80164e4:	e7a9      	b.n	801643a <_strtol_l.isra.0+0x4a>
	...

080164e8 <_strtol_r>:
 80164e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ea:	4c06      	ldr	r4, [pc, #24]	; (8016504 <_strtol_r+0x1c>)
 80164ec:	4d06      	ldr	r5, [pc, #24]	; (8016508 <_strtol_r+0x20>)
 80164ee:	6824      	ldr	r4, [r4, #0]
 80164f0:	6a24      	ldr	r4, [r4, #32]
 80164f2:	2c00      	cmp	r4, #0
 80164f4:	bf08      	it	eq
 80164f6:	462c      	moveq	r4, r5
 80164f8:	9400      	str	r4, [sp, #0]
 80164fa:	f7ff ff79 	bl	80163f0 <_strtol_l.isra.0>
 80164fe:	b003      	add	sp, #12
 8016500:	bd30      	pop	{r4, r5, pc}
 8016502:	bf00      	nop
 8016504:	2000000c 	.word	0x2000000c
 8016508:	20000070 	.word	0x20000070

0801650c <_vsiprintf_r>:
 801650c:	b500      	push	{lr}
 801650e:	b09b      	sub	sp, #108	; 0x6c
 8016510:	9100      	str	r1, [sp, #0]
 8016512:	9104      	str	r1, [sp, #16]
 8016514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016518:	9105      	str	r1, [sp, #20]
 801651a:	9102      	str	r1, [sp, #8]
 801651c:	4905      	ldr	r1, [pc, #20]	; (8016534 <_vsiprintf_r+0x28>)
 801651e:	9103      	str	r1, [sp, #12]
 8016520:	4669      	mov	r1, sp
 8016522:	f001 fecb 	bl	80182bc <_svfiprintf_r>
 8016526:	9b00      	ldr	r3, [sp, #0]
 8016528:	2200      	movs	r2, #0
 801652a:	701a      	strb	r2, [r3, #0]
 801652c:	b01b      	add	sp, #108	; 0x6c
 801652e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016532:	bf00      	nop
 8016534:	ffff0208 	.word	0xffff0208

08016538 <vsiprintf>:
 8016538:	4613      	mov	r3, r2
 801653a:	460a      	mov	r2, r1
 801653c:	4601      	mov	r1, r0
 801653e:	4802      	ldr	r0, [pc, #8]	; (8016548 <vsiprintf+0x10>)
 8016540:	6800      	ldr	r0, [r0, #0]
 8016542:	f7ff bfe3 	b.w	801650c <_vsiprintf_r>
 8016546:	bf00      	nop
 8016548:	2000000c 	.word	0x2000000c

0801654c <quorem>:
 801654c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016550:	6903      	ldr	r3, [r0, #16]
 8016552:	690c      	ldr	r4, [r1, #16]
 8016554:	42a3      	cmp	r3, r4
 8016556:	4680      	mov	r8, r0
 8016558:	f2c0 8082 	blt.w	8016660 <quorem+0x114>
 801655c:	3c01      	subs	r4, #1
 801655e:	f101 0714 	add.w	r7, r1, #20
 8016562:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016566:	f100 0614 	add.w	r6, r0, #20
 801656a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801656e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016572:	eb06 030c 	add.w	r3, r6, ip
 8016576:	3501      	adds	r5, #1
 8016578:	eb07 090c 	add.w	r9, r7, ip
 801657c:	9301      	str	r3, [sp, #4]
 801657e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016582:	b395      	cbz	r5, 80165ea <quorem+0x9e>
 8016584:	f04f 0a00 	mov.w	sl, #0
 8016588:	4638      	mov	r0, r7
 801658a:	46b6      	mov	lr, r6
 801658c:	46d3      	mov	fp, sl
 801658e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016592:	b293      	uxth	r3, r2
 8016594:	fb05 a303 	mla	r3, r5, r3, sl
 8016598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801659c:	b29b      	uxth	r3, r3
 801659e:	ebab 0303 	sub.w	r3, fp, r3
 80165a2:	0c12      	lsrs	r2, r2, #16
 80165a4:	f8de b000 	ldr.w	fp, [lr]
 80165a8:	fb05 a202 	mla	r2, r5, r2, sl
 80165ac:	fa13 f38b 	uxtah	r3, r3, fp
 80165b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80165b4:	fa1f fb82 	uxth.w	fp, r2
 80165b8:	f8de 2000 	ldr.w	r2, [lr]
 80165bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80165c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165ca:	4581      	cmp	r9, r0
 80165cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80165d0:	f84e 3b04 	str.w	r3, [lr], #4
 80165d4:	d2db      	bcs.n	801658e <quorem+0x42>
 80165d6:	f856 300c 	ldr.w	r3, [r6, ip]
 80165da:	b933      	cbnz	r3, 80165ea <quorem+0x9e>
 80165dc:	9b01      	ldr	r3, [sp, #4]
 80165de:	3b04      	subs	r3, #4
 80165e0:	429e      	cmp	r6, r3
 80165e2:	461a      	mov	r2, r3
 80165e4:	d330      	bcc.n	8016648 <quorem+0xfc>
 80165e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80165ea:	4640      	mov	r0, r8
 80165ec:	f001 fbaa 	bl	8017d44 <__mcmp>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	db25      	blt.n	8016640 <quorem+0xf4>
 80165f4:	3501      	adds	r5, #1
 80165f6:	4630      	mov	r0, r6
 80165f8:	f04f 0c00 	mov.w	ip, #0
 80165fc:	f857 2b04 	ldr.w	r2, [r7], #4
 8016600:	f8d0 e000 	ldr.w	lr, [r0]
 8016604:	b293      	uxth	r3, r2
 8016606:	ebac 0303 	sub.w	r3, ip, r3
 801660a:	0c12      	lsrs	r2, r2, #16
 801660c:	fa13 f38e 	uxtah	r3, r3, lr
 8016610:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016618:	b29b      	uxth	r3, r3
 801661a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801661e:	45b9      	cmp	r9, r7
 8016620:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016624:	f840 3b04 	str.w	r3, [r0], #4
 8016628:	d2e8      	bcs.n	80165fc <quorem+0xb0>
 801662a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801662e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016632:	b92a      	cbnz	r2, 8016640 <quorem+0xf4>
 8016634:	3b04      	subs	r3, #4
 8016636:	429e      	cmp	r6, r3
 8016638:	461a      	mov	r2, r3
 801663a:	d30b      	bcc.n	8016654 <quorem+0x108>
 801663c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016640:	4628      	mov	r0, r5
 8016642:	b003      	add	sp, #12
 8016644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016648:	6812      	ldr	r2, [r2, #0]
 801664a:	3b04      	subs	r3, #4
 801664c:	2a00      	cmp	r2, #0
 801664e:	d1ca      	bne.n	80165e6 <quorem+0x9a>
 8016650:	3c01      	subs	r4, #1
 8016652:	e7c5      	b.n	80165e0 <quorem+0x94>
 8016654:	6812      	ldr	r2, [r2, #0]
 8016656:	3b04      	subs	r3, #4
 8016658:	2a00      	cmp	r2, #0
 801665a:	d1ef      	bne.n	801663c <quorem+0xf0>
 801665c:	3c01      	subs	r4, #1
 801665e:	e7ea      	b.n	8016636 <quorem+0xea>
 8016660:	2000      	movs	r0, #0
 8016662:	e7ee      	b.n	8016642 <quorem+0xf6>
 8016664:	0000      	movs	r0, r0
	...

08016668 <_dtoa_r>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	ec57 6b10 	vmov	r6, r7, d0
 8016670:	b097      	sub	sp, #92	; 0x5c
 8016672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016674:	9106      	str	r1, [sp, #24]
 8016676:	4604      	mov	r4, r0
 8016678:	920b      	str	r2, [sp, #44]	; 0x2c
 801667a:	9312      	str	r3, [sp, #72]	; 0x48
 801667c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016680:	e9cd 6700 	strd	r6, r7, [sp]
 8016684:	b93d      	cbnz	r5, 8016696 <_dtoa_r+0x2e>
 8016686:	2010      	movs	r0, #16
 8016688:	f001 f8ee 	bl	8017868 <malloc>
 801668c:	6260      	str	r0, [r4, #36]	; 0x24
 801668e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016692:	6005      	str	r5, [r0, #0]
 8016694:	60c5      	str	r5, [r0, #12]
 8016696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016698:	6819      	ldr	r1, [r3, #0]
 801669a:	b151      	cbz	r1, 80166b2 <_dtoa_r+0x4a>
 801669c:	685a      	ldr	r2, [r3, #4]
 801669e:	604a      	str	r2, [r1, #4]
 80166a0:	2301      	movs	r3, #1
 80166a2:	4093      	lsls	r3, r2
 80166a4:	608b      	str	r3, [r1, #8]
 80166a6:	4620      	mov	r0, r4
 80166a8:	f001 f92c 	bl	8017904 <_Bfree>
 80166ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166ae:	2200      	movs	r2, #0
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	1e3b      	subs	r3, r7, #0
 80166b4:	bfbb      	ittet	lt
 80166b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80166ba:	9301      	strlt	r3, [sp, #4]
 80166bc:	2300      	movge	r3, #0
 80166be:	2201      	movlt	r2, #1
 80166c0:	bfac      	ite	ge
 80166c2:	f8c8 3000 	strge.w	r3, [r8]
 80166c6:	f8c8 2000 	strlt.w	r2, [r8]
 80166ca:	4baf      	ldr	r3, [pc, #700]	; (8016988 <_dtoa_r+0x320>)
 80166cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80166d0:	ea33 0308 	bics.w	r3, r3, r8
 80166d4:	d114      	bne.n	8016700 <_dtoa_r+0x98>
 80166d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80166dc:	6013      	str	r3, [r2, #0]
 80166de:	9b00      	ldr	r3, [sp, #0]
 80166e0:	b923      	cbnz	r3, 80166ec <_dtoa_r+0x84>
 80166e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80166e6:	2800      	cmp	r0, #0
 80166e8:	f000 8542 	beq.w	8017170 <_dtoa_r+0xb08>
 80166ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801699c <_dtoa_r+0x334>
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	f000 8544 	beq.w	8017180 <_dtoa_r+0xb18>
 80166f8:	f10b 0303 	add.w	r3, fp, #3
 80166fc:	f000 bd3e 	b.w	801717c <_dtoa_r+0xb14>
 8016700:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016704:	2200      	movs	r2, #0
 8016706:	2300      	movs	r3, #0
 8016708:	4630      	mov	r0, r6
 801670a:	4639      	mov	r1, r7
 801670c:	f7ea f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 8016710:	4681      	mov	r9, r0
 8016712:	b168      	cbz	r0, 8016730 <_dtoa_r+0xc8>
 8016714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016716:	2301      	movs	r3, #1
 8016718:	6013      	str	r3, [r2, #0]
 801671a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801671c:	2b00      	cmp	r3, #0
 801671e:	f000 8524 	beq.w	801716a <_dtoa_r+0xb02>
 8016722:	4b9a      	ldr	r3, [pc, #616]	; (801698c <_dtoa_r+0x324>)
 8016724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016726:	f103 3bff 	add.w	fp, r3, #4294967295
 801672a:	6013      	str	r3, [r2, #0]
 801672c:	f000 bd28 	b.w	8017180 <_dtoa_r+0xb18>
 8016730:	aa14      	add	r2, sp, #80	; 0x50
 8016732:	a915      	add	r1, sp, #84	; 0x54
 8016734:	ec47 6b10 	vmov	d0, r6, r7
 8016738:	4620      	mov	r0, r4
 801673a:	f001 fbf1 	bl	8017f20 <__d2b>
 801673e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016742:	9004      	str	r0, [sp, #16]
 8016744:	2d00      	cmp	r5, #0
 8016746:	d07c      	beq.n	8016842 <_dtoa_r+0x1da>
 8016748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801674c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016750:	46b2      	mov	sl, r6
 8016752:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801675a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801675e:	2200      	movs	r2, #0
 8016760:	4b8b      	ldr	r3, [pc, #556]	; (8016990 <_dtoa_r+0x328>)
 8016762:	4650      	mov	r0, sl
 8016764:	4659      	mov	r1, fp
 8016766:	f7e9 fda7 	bl	80002b8 <__aeabi_dsub>
 801676a:	a381      	add	r3, pc, #516	; (adr r3, 8016970 <_dtoa_r+0x308>)
 801676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016770:	f7e9 ff5a 	bl	8000628 <__aeabi_dmul>
 8016774:	a380      	add	r3, pc, #512	; (adr r3, 8016978 <_dtoa_r+0x310>)
 8016776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677a:	f7e9 fd9f 	bl	80002bc <__adddf3>
 801677e:	4606      	mov	r6, r0
 8016780:	4628      	mov	r0, r5
 8016782:	460f      	mov	r7, r1
 8016784:	f7e9 fee6 	bl	8000554 <__aeabi_i2d>
 8016788:	a37d      	add	r3, pc, #500	; (adr r3, 8016980 <_dtoa_r+0x318>)
 801678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678e:	f7e9 ff4b 	bl	8000628 <__aeabi_dmul>
 8016792:	4602      	mov	r2, r0
 8016794:	460b      	mov	r3, r1
 8016796:	4630      	mov	r0, r6
 8016798:	4639      	mov	r1, r7
 801679a:	f7e9 fd8f 	bl	80002bc <__adddf3>
 801679e:	4606      	mov	r6, r0
 80167a0:	460f      	mov	r7, r1
 80167a2:	f7ea f9f1 	bl	8000b88 <__aeabi_d2iz>
 80167a6:	2200      	movs	r2, #0
 80167a8:	4682      	mov	sl, r0
 80167aa:	2300      	movs	r3, #0
 80167ac:	4630      	mov	r0, r6
 80167ae:	4639      	mov	r1, r7
 80167b0:	f7ea f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80167b4:	b148      	cbz	r0, 80167ca <_dtoa_r+0x162>
 80167b6:	4650      	mov	r0, sl
 80167b8:	f7e9 fecc 	bl	8000554 <__aeabi_i2d>
 80167bc:	4632      	mov	r2, r6
 80167be:	463b      	mov	r3, r7
 80167c0:	f7ea f99a 	bl	8000af8 <__aeabi_dcmpeq>
 80167c4:	b908      	cbnz	r0, 80167ca <_dtoa_r+0x162>
 80167c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167ca:	f1ba 0f16 	cmp.w	sl, #22
 80167ce:	d859      	bhi.n	8016884 <_dtoa_r+0x21c>
 80167d0:	4970      	ldr	r1, [pc, #448]	; (8016994 <_dtoa_r+0x32c>)
 80167d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80167d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167de:	f7ea f9b3 	bl	8000b48 <__aeabi_dcmpgt>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d050      	beq.n	8016888 <_dtoa_r+0x220>
 80167e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167ea:	2300      	movs	r3, #0
 80167ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80167ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167f0:	1b5d      	subs	r5, r3, r5
 80167f2:	f1b5 0801 	subs.w	r8, r5, #1
 80167f6:	bf49      	itett	mi
 80167f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80167fc:	2300      	movpl	r3, #0
 80167fe:	9305      	strmi	r3, [sp, #20]
 8016800:	f04f 0800 	movmi.w	r8, #0
 8016804:	bf58      	it	pl
 8016806:	9305      	strpl	r3, [sp, #20]
 8016808:	f1ba 0f00 	cmp.w	sl, #0
 801680c:	db3e      	blt.n	801688c <_dtoa_r+0x224>
 801680e:	2300      	movs	r3, #0
 8016810:	44d0      	add	r8, sl
 8016812:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016816:	9307      	str	r3, [sp, #28]
 8016818:	9b06      	ldr	r3, [sp, #24]
 801681a:	2b09      	cmp	r3, #9
 801681c:	f200 8090 	bhi.w	8016940 <_dtoa_r+0x2d8>
 8016820:	2b05      	cmp	r3, #5
 8016822:	bfc4      	itt	gt
 8016824:	3b04      	subgt	r3, #4
 8016826:	9306      	strgt	r3, [sp, #24]
 8016828:	9b06      	ldr	r3, [sp, #24]
 801682a:	f1a3 0302 	sub.w	r3, r3, #2
 801682e:	bfcc      	ite	gt
 8016830:	2500      	movgt	r5, #0
 8016832:	2501      	movle	r5, #1
 8016834:	2b03      	cmp	r3, #3
 8016836:	f200 808f 	bhi.w	8016958 <_dtoa_r+0x2f0>
 801683a:	e8df f003 	tbb	[pc, r3]
 801683e:	7f7d      	.short	0x7f7d
 8016840:	7131      	.short	0x7131
 8016842:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016846:	441d      	add	r5, r3
 8016848:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801684c:	2820      	cmp	r0, #32
 801684e:	dd13      	ble.n	8016878 <_dtoa_r+0x210>
 8016850:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016854:	9b00      	ldr	r3, [sp, #0]
 8016856:	fa08 f800 	lsl.w	r8, r8, r0
 801685a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801685e:	fa23 f000 	lsr.w	r0, r3, r0
 8016862:	ea48 0000 	orr.w	r0, r8, r0
 8016866:	f7e9 fe65 	bl	8000534 <__aeabi_ui2d>
 801686a:	2301      	movs	r3, #1
 801686c:	4682      	mov	sl, r0
 801686e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016872:	3d01      	subs	r5, #1
 8016874:	9313      	str	r3, [sp, #76]	; 0x4c
 8016876:	e772      	b.n	801675e <_dtoa_r+0xf6>
 8016878:	9b00      	ldr	r3, [sp, #0]
 801687a:	f1c0 0020 	rsb	r0, r0, #32
 801687e:	fa03 f000 	lsl.w	r0, r3, r0
 8016882:	e7f0      	b.n	8016866 <_dtoa_r+0x1fe>
 8016884:	2301      	movs	r3, #1
 8016886:	e7b1      	b.n	80167ec <_dtoa_r+0x184>
 8016888:	900f      	str	r0, [sp, #60]	; 0x3c
 801688a:	e7b0      	b.n	80167ee <_dtoa_r+0x186>
 801688c:	9b05      	ldr	r3, [sp, #20]
 801688e:	eba3 030a 	sub.w	r3, r3, sl
 8016892:	9305      	str	r3, [sp, #20]
 8016894:	f1ca 0300 	rsb	r3, sl, #0
 8016898:	9307      	str	r3, [sp, #28]
 801689a:	2300      	movs	r3, #0
 801689c:	930e      	str	r3, [sp, #56]	; 0x38
 801689e:	e7bb      	b.n	8016818 <_dtoa_r+0x1b0>
 80168a0:	2301      	movs	r3, #1
 80168a2:	930a      	str	r3, [sp, #40]	; 0x28
 80168a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	dd59      	ble.n	801695e <_dtoa_r+0x2f6>
 80168aa:	9302      	str	r3, [sp, #8]
 80168ac:	4699      	mov	r9, r3
 80168ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80168b0:	2200      	movs	r2, #0
 80168b2:	6072      	str	r2, [r6, #4]
 80168b4:	2204      	movs	r2, #4
 80168b6:	f102 0014 	add.w	r0, r2, #20
 80168ba:	4298      	cmp	r0, r3
 80168bc:	6871      	ldr	r1, [r6, #4]
 80168be:	d953      	bls.n	8016968 <_dtoa_r+0x300>
 80168c0:	4620      	mov	r0, r4
 80168c2:	f000 ffeb 	bl	801789c <_Balloc>
 80168c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168c8:	6030      	str	r0, [r6, #0]
 80168ca:	f1b9 0f0e 	cmp.w	r9, #14
 80168ce:	f8d3 b000 	ldr.w	fp, [r3]
 80168d2:	f200 80e6 	bhi.w	8016aa2 <_dtoa_r+0x43a>
 80168d6:	2d00      	cmp	r5, #0
 80168d8:	f000 80e3 	beq.w	8016aa2 <_dtoa_r+0x43a>
 80168dc:	ed9d 7b00 	vldr	d7, [sp]
 80168e0:	f1ba 0f00 	cmp.w	sl, #0
 80168e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80168e8:	dd74      	ble.n	80169d4 <_dtoa_r+0x36c>
 80168ea:	4a2a      	ldr	r2, [pc, #168]	; (8016994 <_dtoa_r+0x32c>)
 80168ec:	f00a 030f 	and.w	r3, sl, #15
 80168f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80168f4:	ed93 7b00 	vldr	d7, [r3]
 80168f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80168fc:	06f0      	lsls	r0, r6, #27
 80168fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016902:	d565      	bpl.n	80169d0 <_dtoa_r+0x368>
 8016904:	4b24      	ldr	r3, [pc, #144]	; (8016998 <_dtoa_r+0x330>)
 8016906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801690a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801690e:	f7e9 ffb5 	bl	800087c <__aeabi_ddiv>
 8016912:	e9cd 0100 	strd	r0, r1, [sp]
 8016916:	f006 060f 	and.w	r6, r6, #15
 801691a:	2503      	movs	r5, #3
 801691c:	4f1e      	ldr	r7, [pc, #120]	; (8016998 <_dtoa_r+0x330>)
 801691e:	e04c      	b.n	80169ba <_dtoa_r+0x352>
 8016920:	2301      	movs	r3, #1
 8016922:	930a      	str	r3, [sp, #40]	; 0x28
 8016924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016926:	4453      	add	r3, sl
 8016928:	f103 0901 	add.w	r9, r3, #1
 801692c:	9302      	str	r3, [sp, #8]
 801692e:	464b      	mov	r3, r9
 8016930:	2b01      	cmp	r3, #1
 8016932:	bfb8      	it	lt
 8016934:	2301      	movlt	r3, #1
 8016936:	e7ba      	b.n	80168ae <_dtoa_r+0x246>
 8016938:	2300      	movs	r3, #0
 801693a:	e7b2      	b.n	80168a2 <_dtoa_r+0x23a>
 801693c:	2300      	movs	r3, #0
 801693e:	e7f0      	b.n	8016922 <_dtoa_r+0x2ba>
 8016940:	2501      	movs	r5, #1
 8016942:	2300      	movs	r3, #0
 8016944:	9306      	str	r3, [sp, #24]
 8016946:	950a      	str	r5, [sp, #40]	; 0x28
 8016948:	f04f 33ff 	mov.w	r3, #4294967295
 801694c:	9302      	str	r3, [sp, #8]
 801694e:	4699      	mov	r9, r3
 8016950:	2200      	movs	r2, #0
 8016952:	2312      	movs	r3, #18
 8016954:	920b      	str	r2, [sp, #44]	; 0x2c
 8016956:	e7aa      	b.n	80168ae <_dtoa_r+0x246>
 8016958:	2301      	movs	r3, #1
 801695a:	930a      	str	r3, [sp, #40]	; 0x28
 801695c:	e7f4      	b.n	8016948 <_dtoa_r+0x2e0>
 801695e:	2301      	movs	r3, #1
 8016960:	9302      	str	r3, [sp, #8]
 8016962:	4699      	mov	r9, r3
 8016964:	461a      	mov	r2, r3
 8016966:	e7f5      	b.n	8016954 <_dtoa_r+0x2ec>
 8016968:	3101      	adds	r1, #1
 801696a:	6071      	str	r1, [r6, #4]
 801696c:	0052      	lsls	r2, r2, #1
 801696e:	e7a2      	b.n	80168b6 <_dtoa_r+0x24e>
 8016970:	636f4361 	.word	0x636f4361
 8016974:	3fd287a7 	.word	0x3fd287a7
 8016978:	8b60c8b3 	.word	0x8b60c8b3
 801697c:	3fc68a28 	.word	0x3fc68a28
 8016980:	509f79fb 	.word	0x509f79fb
 8016984:	3fd34413 	.word	0x3fd34413
 8016988:	7ff00000 	.word	0x7ff00000
 801698c:	0801982c 	.word	0x0801982c
 8016990:	3ff80000 	.word	0x3ff80000
 8016994:	08019730 	.word	0x08019730
 8016998:	08019708 	.word	0x08019708
 801699c:	08019691 	.word	0x08019691
 80169a0:	07f1      	lsls	r1, r6, #31
 80169a2:	d508      	bpl.n	80169b6 <_dtoa_r+0x34e>
 80169a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169ac:	f7e9 fe3c 	bl	8000628 <__aeabi_dmul>
 80169b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80169b4:	3501      	adds	r5, #1
 80169b6:	1076      	asrs	r6, r6, #1
 80169b8:	3708      	adds	r7, #8
 80169ba:	2e00      	cmp	r6, #0
 80169bc:	d1f0      	bne.n	80169a0 <_dtoa_r+0x338>
 80169be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169c6:	f7e9 ff59 	bl	800087c <__aeabi_ddiv>
 80169ca:	e9cd 0100 	strd	r0, r1, [sp]
 80169ce:	e01a      	b.n	8016a06 <_dtoa_r+0x39e>
 80169d0:	2502      	movs	r5, #2
 80169d2:	e7a3      	b.n	801691c <_dtoa_r+0x2b4>
 80169d4:	f000 80a0 	beq.w	8016b18 <_dtoa_r+0x4b0>
 80169d8:	f1ca 0600 	rsb	r6, sl, #0
 80169dc:	4b9f      	ldr	r3, [pc, #636]	; (8016c5c <_dtoa_r+0x5f4>)
 80169de:	4fa0      	ldr	r7, [pc, #640]	; (8016c60 <_dtoa_r+0x5f8>)
 80169e0:	f006 020f 	and.w	r2, r6, #15
 80169e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80169f0:	f7e9 fe1a 	bl	8000628 <__aeabi_dmul>
 80169f4:	e9cd 0100 	strd	r0, r1, [sp]
 80169f8:	1136      	asrs	r6, r6, #4
 80169fa:	2300      	movs	r3, #0
 80169fc:	2502      	movs	r5, #2
 80169fe:	2e00      	cmp	r6, #0
 8016a00:	d17f      	bne.n	8016b02 <_dtoa_r+0x49a>
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d1e1      	bne.n	80169ca <_dtoa_r+0x362>
 8016a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	f000 8087 	beq.w	8016b1c <_dtoa_r+0x4b4>
 8016a0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a12:	2200      	movs	r2, #0
 8016a14:	4b93      	ldr	r3, [pc, #588]	; (8016c64 <_dtoa_r+0x5fc>)
 8016a16:	4630      	mov	r0, r6
 8016a18:	4639      	mov	r1, r7
 8016a1a:	f7ea f877 	bl	8000b0c <__aeabi_dcmplt>
 8016a1e:	2800      	cmp	r0, #0
 8016a20:	d07c      	beq.n	8016b1c <_dtoa_r+0x4b4>
 8016a22:	f1b9 0f00 	cmp.w	r9, #0
 8016a26:	d079      	beq.n	8016b1c <_dtoa_r+0x4b4>
 8016a28:	9b02      	ldr	r3, [sp, #8]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	dd35      	ble.n	8016a9a <_dtoa_r+0x432>
 8016a2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016a32:	9308      	str	r3, [sp, #32]
 8016a34:	4639      	mov	r1, r7
 8016a36:	2200      	movs	r2, #0
 8016a38:	4b8b      	ldr	r3, [pc, #556]	; (8016c68 <_dtoa_r+0x600>)
 8016a3a:	4630      	mov	r0, r6
 8016a3c:	f7e9 fdf4 	bl	8000628 <__aeabi_dmul>
 8016a40:	e9cd 0100 	strd	r0, r1, [sp]
 8016a44:	9f02      	ldr	r7, [sp, #8]
 8016a46:	3501      	adds	r5, #1
 8016a48:	4628      	mov	r0, r5
 8016a4a:	f7e9 fd83 	bl	8000554 <__aeabi_i2d>
 8016a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a52:	f7e9 fde9 	bl	8000628 <__aeabi_dmul>
 8016a56:	2200      	movs	r2, #0
 8016a58:	4b84      	ldr	r3, [pc, #528]	; (8016c6c <_dtoa_r+0x604>)
 8016a5a:	f7e9 fc2f 	bl	80002bc <__adddf3>
 8016a5e:	4605      	mov	r5, r0
 8016a60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016a64:	2f00      	cmp	r7, #0
 8016a66:	d15d      	bne.n	8016b24 <_dtoa_r+0x4bc>
 8016a68:	2200      	movs	r2, #0
 8016a6a:	4b81      	ldr	r3, [pc, #516]	; (8016c70 <_dtoa_r+0x608>)
 8016a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a70:	f7e9 fc22 	bl	80002b8 <__aeabi_dsub>
 8016a74:	462a      	mov	r2, r5
 8016a76:	4633      	mov	r3, r6
 8016a78:	e9cd 0100 	strd	r0, r1, [sp]
 8016a7c:	f7ea f864 	bl	8000b48 <__aeabi_dcmpgt>
 8016a80:	2800      	cmp	r0, #0
 8016a82:	f040 8288 	bne.w	8016f96 <_dtoa_r+0x92e>
 8016a86:	462a      	mov	r2, r5
 8016a88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a90:	f7ea f83c 	bl	8000b0c <__aeabi_dcmplt>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	f040 827c 	bne.w	8016f92 <_dtoa_r+0x92a>
 8016a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8016aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	f2c0 8150 	blt.w	8016d4a <_dtoa_r+0x6e2>
 8016aaa:	f1ba 0f0e 	cmp.w	sl, #14
 8016aae:	f300 814c 	bgt.w	8016d4a <_dtoa_r+0x6e2>
 8016ab2:	4b6a      	ldr	r3, [pc, #424]	; (8016c5c <_dtoa_r+0x5f4>)
 8016ab4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016ab8:	ed93 7b00 	vldr	d7, [r3]
 8016abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016ac4:	f280 80d8 	bge.w	8016c78 <_dtoa_r+0x610>
 8016ac8:	f1b9 0f00 	cmp.w	r9, #0
 8016acc:	f300 80d4 	bgt.w	8016c78 <_dtoa_r+0x610>
 8016ad0:	f040 825e 	bne.w	8016f90 <_dtoa_r+0x928>
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	4b66      	ldr	r3, [pc, #408]	; (8016c70 <_dtoa_r+0x608>)
 8016ad8:	ec51 0b17 	vmov	r0, r1, d7
 8016adc:	f7e9 fda4 	bl	8000628 <__aeabi_dmul>
 8016ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ae4:	f7ea f826 	bl	8000b34 <__aeabi_dcmpge>
 8016ae8:	464f      	mov	r7, r9
 8016aea:	464e      	mov	r6, r9
 8016aec:	2800      	cmp	r0, #0
 8016aee:	f040 8234 	bne.w	8016f5a <_dtoa_r+0x8f2>
 8016af2:	2331      	movs	r3, #49	; 0x31
 8016af4:	f10b 0501 	add.w	r5, fp, #1
 8016af8:	f88b 3000 	strb.w	r3, [fp]
 8016afc:	f10a 0a01 	add.w	sl, sl, #1
 8016b00:	e22f      	b.n	8016f62 <_dtoa_r+0x8fa>
 8016b02:	07f2      	lsls	r2, r6, #31
 8016b04:	d505      	bpl.n	8016b12 <_dtoa_r+0x4aa>
 8016b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b0a:	f7e9 fd8d 	bl	8000628 <__aeabi_dmul>
 8016b0e:	3501      	adds	r5, #1
 8016b10:	2301      	movs	r3, #1
 8016b12:	1076      	asrs	r6, r6, #1
 8016b14:	3708      	adds	r7, #8
 8016b16:	e772      	b.n	80169fe <_dtoa_r+0x396>
 8016b18:	2502      	movs	r5, #2
 8016b1a:	e774      	b.n	8016a06 <_dtoa_r+0x39e>
 8016b1c:	f8cd a020 	str.w	sl, [sp, #32]
 8016b20:	464f      	mov	r7, r9
 8016b22:	e791      	b.n	8016a48 <_dtoa_r+0x3e0>
 8016b24:	4b4d      	ldr	r3, [pc, #308]	; (8016c5c <_dtoa_r+0x5f4>)
 8016b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016b2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d047      	beq.n	8016bc4 <_dtoa_r+0x55c>
 8016b34:	4602      	mov	r2, r0
 8016b36:	460b      	mov	r3, r1
 8016b38:	2000      	movs	r0, #0
 8016b3a:	494e      	ldr	r1, [pc, #312]	; (8016c74 <_dtoa_r+0x60c>)
 8016b3c:	f7e9 fe9e 	bl	800087c <__aeabi_ddiv>
 8016b40:	462a      	mov	r2, r5
 8016b42:	4633      	mov	r3, r6
 8016b44:	f7e9 fbb8 	bl	80002b8 <__aeabi_dsub>
 8016b48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b4c:	465d      	mov	r5, fp
 8016b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b52:	f7ea f819 	bl	8000b88 <__aeabi_d2iz>
 8016b56:	4606      	mov	r6, r0
 8016b58:	f7e9 fcfc 	bl	8000554 <__aeabi_i2d>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	460b      	mov	r3, r1
 8016b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b64:	f7e9 fba8 	bl	80002b8 <__aeabi_dsub>
 8016b68:	3630      	adds	r6, #48	; 0x30
 8016b6a:	f805 6b01 	strb.w	r6, [r5], #1
 8016b6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b72:	e9cd 0100 	strd	r0, r1, [sp]
 8016b76:	f7e9 ffc9 	bl	8000b0c <__aeabi_dcmplt>
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d163      	bne.n	8016c46 <_dtoa_r+0x5de>
 8016b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b82:	2000      	movs	r0, #0
 8016b84:	4937      	ldr	r1, [pc, #220]	; (8016c64 <_dtoa_r+0x5fc>)
 8016b86:	f7e9 fb97 	bl	80002b8 <__aeabi_dsub>
 8016b8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b8e:	f7e9 ffbd 	bl	8000b0c <__aeabi_dcmplt>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	f040 80b7 	bne.w	8016d06 <_dtoa_r+0x69e>
 8016b98:	eba5 030b 	sub.w	r3, r5, fp
 8016b9c:	429f      	cmp	r7, r3
 8016b9e:	f77f af7c 	ble.w	8016a9a <_dtoa_r+0x432>
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	4b30      	ldr	r3, [pc, #192]	; (8016c68 <_dtoa_r+0x600>)
 8016ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016baa:	f7e9 fd3d 	bl	8000628 <__aeabi_dmul>
 8016bae:	2200      	movs	r2, #0
 8016bb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016bb4:	4b2c      	ldr	r3, [pc, #176]	; (8016c68 <_dtoa_r+0x600>)
 8016bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bba:	f7e9 fd35 	bl	8000628 <__aeabi_dmul>
 8016bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8016bc2:	e7c4      	b.n	8016b4e <_dtoa_r+0x4e6>
 8016bc4:	462a      	mov	r2, r5
 8016bc6:	4633      	mov	r3, r6
 8016bc8:	f7e9 fd2e 	bl	8000628 <__aeabi_dmul>
 8016bcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016bd0:	eb0b 0507 	add.w	r5, fp, r7
 8016bd4:	465e      	mov	r6, fp
 8016bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bda:	f7e9 ffd5 	bl	8000b88 <__aeabi_d2iz>
 8016bde:	4607      	mov	r7, r0
 8016be0:	f7e9 fcb8 	bl	8000554 <__aeabi_i2d>
 8016be4:	3730      	adds	r7, #48	; 0x30
 8016be6:	4602      	mov	r2, r0
 8016be8:	460b      	mov	r3, r1
 8016bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bee:	f7e9 fb63 	bl	80002b8 <__aeabi_dsub>
 8016bf2:	f806 7b01 	strb.w	r7, [r6], #1
 8016bf6:	42ae      	cmp	r6, r5
 8016bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8016bfc:	f04f 0200 	mov.w	r2, #0
 8016c00:	d126      	bne.n	8016c50 <_dtoa_r+0x5e8>
 8016c02:	4b1c      	ldr	r3, [pc, #112]	; (8016c74 <_dtoa_r+0x60c>)
 8016c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c08:	f7e9 fb58 	bl	80002bc <__adddf3>
 8016c0c:	4602      	mov	r2, r0
 8016c0e:	460b      	mov	r3, r1
 8016c10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c14:	f7e9 ff98 	bl	8000b48 <__aeabi_dcmpgt>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d174      	bne.n	8016d06 <_dtoa_r+0x69e>
 8016c1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016c20:	2000      	movs	r0, #0
 8016c22:	4914      	ldr	r1, [pc, #80]	; (8016c74 <_dtoa_r+0x60c>)
 8016c24:	f7e9 fb48 	bl	80002b8 <__aeabi_dsub>
 8016c28:	4602      	mov	r2, r0
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c30:	f7e9 ff6c 	bl	8000b0c <__aeabi_dcmplt>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	f43f af30 	beq.w	8016a9a <_dtoa_r+0x432>
 8016c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c3e:	2b30      	cmp	r3, #48	; 0x30
 8016c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8016c44:	d002      	beq.n	8016c4c <_dtoa_r+0x5e4>
 8016c46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016c4a:	e04a      	b.n	8016ce2 <_dtoa_r+0x67a>
 8016c4c:	4615      	mov	r5, r2
 8016c4e:	e7f4      	b.n	8016c3a <_dtoa_r+0x5d2>
 8016c50:	4b05      	ldr	r3, [pc, #20]	; (8016c68 <_dtoa_r+0x600>)
 8016c52:	f7e9 fce9 	bl	8000628 <__aeabi_dmul>
 8016c56:	e9cd 0100 	strd	r0, r1, [sp]
 8016c5a:	e7bc      	b.n	8016bd6 <_dtoa_r+0x56e>
 8016c5c:	08019730 	.word	0x08019730
 8016c60:	08019708 	.word	0x08019708
 8016c64:	3ff00000 	.word	0x3ff00000
 8016c68:	40240000 	.word	0x40240000
 8016c6c:	401c0000 	.word	0x401c0000
 8016c70:	40140000 	.word	0x40140000
 8016c74:	3fe00000 	.word	0x3fe00000
 8016c78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016c7c:	465d      	mov	r5, fp
 8016c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c82:	4630      	mov	r0, r6
 8016c84:	4639      	mov	r1, r7
 8016c86:	f7e9 fdf9 	bl	800087c <__aeabi_ddiv>
 8016c8a:	f7e9 ff7d 	bl	8000b88 <__aeabi_d2iz>
 8016c8e:	4680      	mov	r8, r0
 8016c90:	f7e9 fc60 	bl	8000554 <__aeabi_i2d>
 8016c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c98:	f7e9 fcc6 	bl	8000628 <__aeabi_dmul>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	460b      	mov	r3, r1
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	4639      	mov	r1, r7
 8016ca4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016ca8:	f7e9 fb06 	bl	80002b8 <__aeabi_dsub>
 8016cac:	f805 6b01 	strb.w	r6, [r5], #1
 8016cb0:	eba5 060b 	sub.w	r6, r5, fp
 8016cb4:	45b1      	cmp	r9, r6
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	460b      	mov	r3, r1
 8016cba:	d139      	bne.n	8016d30 <_dtoa_r+0x6c8>
 8016cbc:	f7e9 fafe 	bl	80002bc <__adddf3>
 8016cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cc4:	4606      	mov	r6, r0
 8016cc6:	460f      	mov	r7, r1
 8016cc8:	f7e9 ff3e 	bl	8000b48 <__aeabi_dcmpgt>
 8016ccc:	b9c8      	cbnz	r0, 8016d02 <_dtoa_r+0x69a>
 8016cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016cd2:	4630      	mov	r0, r6
 8016cd4:	4639      	mov	r1, r7
 8016cd6:	f7e9 ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8016cda:	b110      	cbz	r0, 8016ce2 <_dtoa_r+0x67a>
 8016cdc:	f018 0f01 	tst.w	r8, #1
 8016ce0:	d10f      	bne.n	8016d02 <_dtoa_r+0x69a>
 8016ce2:	9904      	ldr	r1, [sp, #16]
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	f000 fe0d 	bl	8017904 <_Bfree>
 8016cea:	2300      	movs	r3, #0
 8016cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cee:	702b      	strb	r3, [r5, #0]
 8016cf0:	f10a 0301 	add.w	r3, sl, #1
 8016cf4:	6013      	str	r3, [r2, #0]
 8016cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f000 8241 	beq.w	8017180 <_dtoa_r+0xb18>
 8016cfe:	601d      	str	r5, [r3, #0]
 8016d00:	e23e      	b.n	8017180 <_dtoa_r+0xb18>
 8016d02:	f8cd a020 	str.w	sl, [sp, #32]
 8016d06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016d0a:	2a39      	cmp	r2, #57	; 0x39
 8016d0c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016d10:	d108      	bne.n	8016d24 <_dtoa_r+0x6bc>
 8016d12:	459b      	cmp	fp, r3
 8016d14:	d10a      	bne.n	8016d2c <_dtoa_r+0x6c4>
 8016d16:	9b08      	ldr	r3, [sp, #32]
 8016d18:	3301      	adds	r3, #1
 8016d1a:	9308      	str	r3, [sp, #32]
 8016d1c:	2330      	movs	r3, #48	; 0x30
 8016d1e:	f88b 3000 	strb.w	r3, [fp]
 8016d22:	465b      	mov	r3, fp
 8016d24:	781a      	ldrb	r2, [r3, #0]
 8016d26:	3201      	adds	r2, #1
 8016d28:	701a      	strb	r2, [r3, #0]
 8016d2a:	e78c      	b.n	8016c46 <_dtoa_r+0x5de>
 8016d2c:	461d      	mov	r5, r3
 8016d2e:	e7ea      	b.n	8016d06 <_dtoa_r+0x69e>
 8016d30:	2200      	movs	r2, #0
 8016d32:	4b9b      	ldr	r3, [pc, #620]	; (8016fa0 <_dtoa_r+0x938>)
 8016d34:	f7e9 fc78 	bl	8000628 <__aeabi_dmul>
 8016d38:	2200      	movs	r2, #0
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	4606      	mov	r6, r0
 8016d3e:	460f      	mov	r7, r1
 8016d40:	f7e9 feda 	bl	8000af8 <__aeabi_dcmpeq>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	d09a      	beq.n	8016c7e <_dtoa_r+0x616>
 8016d48:	e7cb      	b.n	8016ce2 <_dtoa_r+0x67a>
 8016d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d4c:	2a00      	cmp	r2, #0
 8016d4e:	f000 808b 	beq.w	8016e68 <_dtoa_r+0x800>
 8016d52:	9a06      	ldr	r2, [sp, #24]
 8016d54:	2a01      	cmp	r2, #1
 8016d56:	dc6e      	bgt.n	8016e36 <_dtoa_r+0x7ce>
 8016d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d5a:	2a00      	cmp	r2, #0
 8016d5c:	d067      	beq.n	8016e2e <_dtoa_r+0x7c6>
 8016d5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d62:	9f07      	ldr	r7, [sp, #28]
 8016d64:	9d05      	ldr	r5, [sp, #20]
 8016d66:	9a05      	ldr	r2, [sp, #20]
 8016d68:	2101      	movs	r1, #1
 8016d6a:	441a      	add	r2, r3
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	9205      	str	r2, [sp, #20]
 8016d70:	4498      	add	r8, r3
 8016d72:	f000 fea5 	bl	8017ac0 <__i2b>
 8016d76:	4606      	mov	r6, r0
 8016d78:	2d00      	cmp	r5, #0
 8016d7a:	dd0c      	ble.n	8016d96 <_dtoa_r+0x72e>
 8016d7c:	f1b8 0f00 	cmp.w	r8, #0
 8016d80:	dd09      	ble.n	8016d96 <_dtoa_r+0x72e>
 8016d82:	4545      	cmp	r5, r8
 8016d84:	9a05      	ldr	r2, [sp, #20]
 8016d86:	462b      	mov	r3, r5
 8016d88:	bfa8      	it	ge
 8016d8a:	4643      	movge	r3, r8
 8016d8c:	1ad2      	subs	r2, r2, r3
 8016d8e:	9205      	str	r2, [sp, #20]
 8016d90:	1aed      	subs	r5, r5, r3
 8016d92:	eba8 0803 	sub.w	r8, r8, r3
 8016d96:	9b07      	ldr	r3, [sp, #28]
 8016d98:	b1eb      	cbz	r3, 8016dd6 <_dtoa_r+0x76e>
 8016d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d067      	beq.n	8016e70 <_dtoa_r+0x808>
 8016da0:	b18f      	cbz	r7, 8016dc6 <_dtoa_r+0x75e>
 8016da2:	4631      	mov	r1, r6
 8016da4:	463a      	mov	r2, r7
 8016da6:	4620      	mov	r0, r4
 8016da8:	f000 ff2a 	bl	8017c00 <__pow5mult>
 8016dac:	9a04      	ldr	r2, [sp, #16]
 8016dae:	4601      	mov	r1, r0
 8016db0:	4606      	mov	r6, r0
 8016db2:	4620      	mov	r0, r4
 8016db4:	f000 fe8d 	bl	8017ad2 <__multiply>
 8016db8:	9904      	ldr	r1, [sp, #16]
 8016dba:	9008      	str	r0, [sp, #32]
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	f000 fda1 	bl	8017904 <_Bfree>
 8016dc2:	9b08      	ldr	r3, [sp, #32]
 8016dc4:	9304      	str	r3, [sp, #16]
 8016dc6:	9b07      	ldr	r3, [sp, #28]
 8016dc8:	1bda      	subs	r2, r3, r7
 8016dca:	d004      	beq.n	8016dd6 <_dtoa_r+0x76e>
 8016dcc:	9904      	ldr	r1, [sp, #16]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	f000 ff16 	bl	8017c00 <__pow5mult>
 8016dd4:	9004      	str	r0, [sp, #16]
 8016dd6:	2101      	movs	r1, #1
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f000 fe71 	bl	8017ac0 <__i2b>
 8016dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016de0:	4607      	mov	r7, r0
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f000 81d0 	beq.w	8017188 <_dtoa_r+0xb20>
 8016de8:	461a      	mov	r2, r3
 8016dea:	4601      	mov	r1, r0
 8016dec:	4620      	mov	r0, r4
 8016dee:	f000 ff07 	bl	8017c00 <__pow5mult>
 8016df2:	9b06      	ldr	r3, [sp, #24]
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	4607      	mov	r7, r0
 8016df8:	dc40      	bgt.n	8016e7c <_dtoa_r+0x814>
 8016dfa:	9b00      	ldr	r3, [sp, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d139      	bne.n	8016e74 <_dtoa_r+0x80c>
 8016e00:	9b01      	ldr	r3, [sp, #4]
 8016e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d136      	bne.n	8016e78 <_dtoa_r+0x810>
 8016e0a:	9b01      	ldr	r3, [sp, #4]
 8016e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e10:	0d1b      	lsrs	r3, r3, #20
 8016e12:	051b      	lsls	r3, r3, #20
 8016e14:	b12b      	cbz	r3, 8016e22 <_dtoa_r+0x7ba>
 8016e16:	9b05      	ldr	r3, [sp, #20]
 8016e18:	3301      	adds	r3, #1
 8016e1a:	9305      	str	r3, [sp, #20]
 8016e1c:	f108 0801 	add.w	r8, r8, #1
 8016e20:	2301      	movs	r3, #1
 8016e22:	9307      	str	r3, [sp, #28]
 8016e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d12a      	bne.n	8016e80 <_dtoa_r+0x818>
 8016e2a:	2001      	movs	r0, #1
 8016e2c:	e030      	b.n	8016e90 <_dtoa_r+0x828>
 8016e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016e34:	e795      	b.n	8016d62 <_dtoa_r+0x6fa>
 8016e36:	9b07      	ldr	r3, [sp, #28]
 8016e38:	f109 37ff 	add.w	r7, r9, #4294967295
 8016e3c:	42bb      	cmp	r3, r7
 8016e3e:	bfbf      	itttt	lt
 8016e40:	9b07      	ldrlt	r3, [sp, #28]
 8016e42:	9707      	strlt	r7, [sp, #28]
 8016e44:	1afa      	sublt	r2, r7, r3
 8016e46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016e48:	bfbb      	ittet	lt
 8016e4a:	189b      	addlt	r3, r3, r2
 8016e4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016e4e:	1bdf      	subge	r7, r3, r7
 8016e50:	2700      	movlt	r7, #0
 8016e52:	f1b9 0f00 	cmp.w	r9, #0
 8016e56:	bfb5      	itete	lt
 8016e58:	9b05      	ldrlt	r3, [sp, #20]
 8016e5a:	9d05      	ldrge	r5, [sp, #20]
 8016e5c:	eba3 0509 	sublt.w	r5, r3, r9
 8016e60:	464b      	movge	r3, r9
 8016e62:	bfb8      	it	lt
 8016e64:	2300      	movlt	r3, #0
 8016e66:	e77e      	b.n	8016d66 <_dtoa_r+0x6fe>
 8016e68:	9f07      	ldr	r7, [sp, #28]
 8016e6a:	9d05      	ldr	r5, [sp, #20]
 8016e6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016e6e:	e783      	b.n	8016d78 <_dtoa_r+0x710>
 8016e70:	9a07      	ldr	r2, [sp, #28]
 8016e72:	e7ab      	b.n	8016dcc <_dtoa_r+0x764>
 8016e74:	2300      	movs	r3, #0
 8016e76:	e7d4      	b.n	8016e22 <_dtoa_r+0x7ba>
 8016e78:	9b00      	ldr	r3, [sp, #0]
 8016e7a:	e7d2      	b.n	8016e22 <_dtoa_r+0x7ba>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	9307      	str	r3, [sp, #28]
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016e86:	6918      	ldr	r0, [r3, #16]
 8016e88:	f000 fdcc 	bl	8017a24 <__hi0bits>
 8016e8c:	f1c0 0020 	rsb	r0, r0, #32
 8016e90:	4440      	add	r0, r8
 8016e92:	f010 001f 	ands.w	r0, r0, #31
 8016e96:	d047      	beq.n	8016f28 <_dtoa_r+0x8c0>
 8016e98:	f1c0 0320 	rsb	r3, r0, #32
 8016e9c:	2b04      	cmp	r3, #4
 8016e9e:	dd3b      	ble.n	8016f18 <_dtoa_r+0x8b0>
 8016ea0:	9b05      	ldr	r3, [sp, #20]
 8016ea2:	f1c0 001c 	rsb	r0, r0, #28
 8016ea6:	4403      	add	r3, r0
 8016ea8:	9305      	str	r3, [sp, #20]
 8016eaa:	4405      	add	r5, r0
 8016eac:	4480      	add	r8, r0
 8016eae:	9b05      	ldr	r3, [sp, #20]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	dd05      	ble.n	8016ec0 <_dtoa_r+0x858>
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	9904      	ldr	r1, [sp, #16]
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f000 feef 	bl	8017c9c <__lshift>
 8016ebe:	9004      	str	r0, [sp, #16]
 8016ec0:	f1b8 0f00 	cmp.w	r8, #0
 8016ec4:	dd05      	ble.n	8016ed2 <_dtoa_r+0x86a>
 8016ec6:	4639      	mov	r1, r7
 8016ec8:	4642      	mov	r2, r8
 8016eca:	4620      	mov	r0, r4
 8016ecc:	f000 fee6 	bl	8017c9c <__lshift>
 8016ed0:	4607      	mov	r7, r0
 8016ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed4:	b353      	cbz	r3, 8016f2c <_dtoa_r+0x8c4>
 8016ed6:	4639      	mov	r1, r7
 8016ed8:	9804      	ldr	r0, [sp, #16]
 8016eda:	f000 ff33 	bl	8017d44 <__mcmp>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	da24      	bge.n	8016f2c <_dtoa_r+0x8c4>
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	220a      	movs	r2, #10
 8016ee6:	9904      	ldr	r1, [sp, #16]
 8016ee8:	4620      	mov	r0, r4
 8016eea:	f000 fd22 	bl	8017932 <__multadd>
 8016eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ef0:	9004      	str	r0, [sp, #16]
 8016ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	f000 814d 	beq.w	8017196 <_dtoa_r+0xb2e>
 8016efc:	2300      	movs	r3, #0
 8016efe:	4631      	mov	r1, r6
 8016f00:	220a      	movs	r2, #10
 8016f02:	4620      	mov	r0, r4
 8016f04:	f000 fd15 	bl	8017932 <__multadd>
 8016f08:	9b02      	ldr	r3, [sp, #8]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	4606      	mov	r6, r0
 8016f0e:	dc4f      	bgt.n	8016fb0 <_dtoa_r+0x948>
 8016f10:	9b06      	ldr	r3, [sp, #24]
 8016f12:	2b02      	cmp	r3, #2
 8016f14:	dd4c      	ble.n	8016fb0 <_dtoa_r+0x948>
 8016f16:	e011      	b.n	8016f3c <_dtoa_r+0x8d4>
 8016f18:	d0c9      	beq.n	8016eae <_dtoa_r+0x846>
 8016f1a:	9a05      	ldr	r2, [sp, #20]
 8016f1c:	331c      	adds	r3, #28
 8016f1e:	441a      	add	r2, r3
 8016f20:	9205      	str	r2, [sp, #20]
 8016f22:	441d      	add	r5, r3
 8016f24:	4498      	add	r8, r3
 8016f26:	e7c2      	b.n	8016eae <_dtoa_r+0x846>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	e7f6      	b.n	8016f1a <_dtoa_r+0x8b2>
 8016f2c:	f1b9 0f00 	cmp.w	r9, #0
 8016f30:	dc38      	bgt.n	8016fa4 <_dtoa_r+0x93c>
 8016f32:	9b06      	ldr	r3, [sp, #24]
 8016f34:	2b02      	cmp	r3, #2
 8016f36:	dd35      	ble.n	8016fa4 <_dtoa_r+0x93c>
 8016f38:	f8cd 9008 	str.w	r9, [sp, #8]
 8016f3c:	9b02      	ldr	r3, [sp, #8]
 8016f3e:	b963      	cbnz	r3, 8016f5a <_dtoa_r+0x8f2>
 8016f40:	4639      	mov	r1, r7
 8016f42:	2205      	movs	r2, #5
 8016f44:	4620      	mov	r0, r4
 8016f46:	f000 fcf4 	bl	8017932 <__multadd>
 8016f4a:	4601      	mov	r1, r0
 8016f4c:	4607      	mov	r7, r0
 8016f4e:	9804      	ldr	r0, [sp, #16]
 8016f50:	f000 fef8 	bl	8017d44 <__mcmp>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	f73f adcc 	bgt.w	8016af2 <_dtoa_r+0x48a>
 8016f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f5c:	465d      	mov	r5, fp
 8016f5e:	ea6f 0a03 	mvn.w	sl, r3
 8016f62:	f04f 0900 	mov.w	r9, #0
 8016f66:	4639      	mov	r1, r7
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f000 fccb 	bl	8017904 <_Bfree>
 8016f6e:	2e00      	cmp	r6, #0
 8016f70:	f43f aeb7 	beq.w	8016ce2 <_dtoa_r+0x67a>
 8016f74:	f1b9 0f00 	cmp.w	r9, #0
 8016f78:	d005      	beq.n	8016f86 <_dtoa_r+0x91e>
 8016f7a:	45b1      	cmp	r9, r6
 8016f7c:	d003      	beq.n	8016f86 <_dtoa_r+0x91e>
 8016f7e:	4649      	mov	r1, r9
 8016f80:	4620      	mov	r0, r4
 8016f82:	f000 fcbf 	bl	8017904 <_Bfree>
 8016f86:	4631      	mov	r1, r6
 8016f88:	4620      	mov	r0, r4
 8016f8a:	f000 fcbb 	bl	8017904 <_Bfree>
 8016f8e:	e6a8      	b.n	8016ce2 <_dtoa_r+0x67a>
 8016f90:	2700      	movs	r7, #0
 8016f92:	463e      	mov	r6, r7
 8016f94:	e7e1      	b.n	8016f5a <_dtoa_r+0x8f2>
 8016f96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016f9a:	463e      	mov	r6, r7
 8016f9c:	e5a9      	b.n	8016af2 <_dtoa_r+0x48a>
 8016f9e:	bf00      	nop
 8016fa0:	40240000 	.word	0x40240000
 8016fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	f000 80fa 	beq.w	80171a4 <_dtoa_r+0xb3c>
 8016fb0:	2d00      	cmp	r5, #0
 8016fb2:	dd05      	ble.n	8016fc0 <_dtoa_r+0x958>
 8016fb4:	4631      	mov	r1, r6
 8016fb6:	462a      	mov	r2, r5
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f000 fe6f 	bl	8017c9c <__lshift>
 8016fbe:	4606      	mov	r6, r0
 8016fc0:	9b07      	ldr	r3, [sp, #28]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d04c      	beq.n	8017060 <_dtoa_r+0x9f8>
 8016fc6:	6871      	ldr	r1, [r6, #4]
 8016fc8:	4620      	mov	r0, r4
 8016fca:	f000 fc67 	bl	801789c <_Balloc>
 8016fce:	6932      	ldr	r2, [r6, #16]
 8016fd0:	3202      	adds	r2, #2
 8016fd2:	4605      	mov	r5, r0
 8016fd4:	0092      	lsls	r2, r2, #2
 8016fd6:	f106 010c 	add.w	r1, r6, #12
 8016fda:	300c      	adds	r0, #12
 8016fdc:	f7fd fd08 	bl	80149f0 <memcpy>
 8016fe0:	2201      	movs	r2, #1
 8016fe2:	4629      	mov	r1, r5
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	f000 fe59 	bl	8017c9c <__lshift>
 8016fea:	9b00      	ldr	r3, [sp, #0]
 8016fec:	f8cd b014 	str.w	fp, [sp, #20]
 8016ff0:	f003 0301 	and.w	r3, r3, #1
 8016ff4:	46b1      	mov	r9, r6
 8016ff6:	9307      	str	r3, [sp, #28]
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	4639      	mov	r1, r7
 8016ffc:	9804      	ldr	r0, [sp, #16]
 8016ffe:	f7ff faa5 	bl	801654c <quorem>
 8017002:	4649      	mov	r1, r9
 8017004:	4605      	mov	r5, r0
 8017006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801700a:	9804      	ldr	r0, [sp, #16]
 801700c:	f000 fe9a 	bl	8017d44 <__mcmp>
 8017010:	4632      	mov	r2, r6
 8017012:	9000      	str	r0, [sp, #0]
 8017014:	4639      	mov	r1, r7
 8017016:	4620      	mov	r0, r4
 8017018:	f000 feae 	bl	8017d78 <__mdiff>
 801701c:	68c3      	ldr	r3, [r0, #12]
 801701e:	4602      	mov	r2, r0
 8017020:	bb03      	cbnz	r3, 8017064 <_dtoa_r+0x9fc>
 8017022:	4601      	mov	r1, r0
 8017024:	9008      	str	r0, [sp, #32]
 8017026:	9804      	ldr	r0, [sp, #16]
 8017028:	f000 fe8c 	bl	8017d44 <__mcmp>
 801702c:	9a08      	ldr	r2, [sp, #32]
 801702e:	4603      	mov	r3, r0
 8017030:	4611      	mov	r1, r2
 8017032:	4620      	mov	r0, r4
 8017034:	9308      	str	r3, [sp, #32]
 8017036:	f000 fc65 	bl	8017904 <_Bfree>
 801703a:	9b08      	ldr	r3, [sp, #32]
 801703c:	b9a3      	cbnz	r3, 8017068 <_dtoa_r+0xa00>
 801703e:	9a06      	ldr	r2, [sp, #24]
 8017040:	b992      	cbnz	r2, 8017068 <_dtoa_r+0xa00>
 8017042:	9a07      	ldr	r2, [sp, #28]
 8017044:	b982      	cbnz	r2, 8017068 <_dtoa_r+0xa00>
 8017046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801704a:	d029      	beq.n	80170a0 <_dtoa_r+0xa38>
 801704c:	9b00      	ldr	r3, [sp, #0]
 801704e:	2b00      	cmp	r3, #0
 8017050:	dd01      	ble.n	8017056 <_dtoa_r+0x9ee>
 8017052:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017056:	9b05      	ldr	r3, [sp, #20]
 8017058:	1c5d      	adds	r5, r3, #1
 801705a:	f883 8000 	strb.w	r8, [r3]
 801705e:	e782      	b.n	8016f66 <_dtoa_r+0x8fe>
 8017060:	4630      	mov	r0, r6
 8017062:	e7c2      	b.n	8016fea <_dtoa_r+0x982>
 8017064:	2301      	movs	r3, #1
 8017066:	e7e3      	b.n	8017030 <_dtoa_r+0x9c8>
 8017068:	9a00      	ldr	r2, [sp, #0]
 801706a:	2a00      	cmp	r2, #0
 801706c:	db04      	blt.n	8017078 <_dtoa_r+0xa10>
 801706e:	d125      	bne.n	80170bc <_dtoa_r+0xa54>
 8017070:	9a06      	ldr	r2, [sp, #24]
 8017072:	bb1a      	cbnz	r2, 80170bc <_dtoa_r+0xa54>
 8017074:	9a07      	ldr	r2, [sp, #28]
 8017076:	bb0a      	cbnz	r2, 80170bc <_dtoa_r+0xa54>
 8017078:	2b00      	cmp	r3, #0
 801707a:	ddec      	ble.n	8017056 <_dtoa_r+0x9ee>
 801707c:	2201      	movs	r2, #1
 801707e:	9904      	ldr	r1, [sp, #16]
 8017080:	4620      	mov	r0, r4
 8017082:	f000 fe0b 	bl	8017c9c <__lshift>
 8017086:	4639      	mov	r1, r7
 8017088:	9004      	str	r0, [sp, #16]
 801708a:	f000 fe5b 	bl	8017d44 <__mcmp>
 801708e:	2800      	cmp	r0, #0
 8017090:	dc03      	bgt.n	801709a <_dtoa_r+0xa32>
 8017092:	d1e0      	bne.n	8017056 <_dtoa_r+0x9ee>
 8017094:	f018 0f01 	tst.w	r8, #1
 8017098:	d0dd      	beq.n	8017056 <_dtoa_r+0x9ee>
 801709a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801709e:	d1d8      	bne.n	8017052 <_dtoa_r+0x9ea>
 80170a0:	9b05      	ldr	r3, [sp, #20]
 80170a2:	9a05      	ldr	r2, [sp, #20]
 80170a4:	1c5d      	adds	r5, r3, #1
 80170a6:	2339      	movs	r3, #57	; 0x39
 80170a8:	7013      	strb	r3, [r2, #0]
 80170aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170ae:	2b39      	cmp	r3, #57	; 0x39
 80170b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80170b4:	d04f      	beq.n	8017156 <_dtoa_r+0xaee>
 80170b6:	3301      	adds	r3, #1
 80170b8:	7013      	strb	r3, [r2, #0]
 80170ba:	e754      	b.n	8016f66 <_dtoa_r+0x8fe>
 80170bc:	9a05      	ldr	r2, [sp, #20]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	f102 0501 	add.w	r5, r2, #1
 80170c4:	dd06      	ble.n	80170d4 <_dtoa_r+0xa6c>
 80170c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80170ca:	d0e9      	beq.n	80170a0 <_dtoa_r+0xa38>
 80170cc:	f108 0801 	add.w	r8, r8, #1
 80170d0:	9b05      	ldr	r3, [sp, #20]
 80170d2:	e7c2      	b.n	801705a <_dtoa_r+0x9f2>
 80170d4:	9a02      	ldr	r2, [sp, #8]
 80170d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80170da:	eba5 030b 	sub.w	r3, r5, fp
 80170de:	4293      	cmp	r3, r2
 80170e0:	d021      	beq.n	8017126 <_dtoa_r+0xabe>
 80170e2:	2300      	movs	r3, #0
 80170e4:	220a      	movs	r2, #10
 80170e6:	9904      	ldr	r1, [sp, #16]
 80170e8:	4620      	mov	r0, r4
 80170ea:	f000 fc22 	bl	8017932 <__multadd>
 80170ee:	45b1      	cmp	r9, r6
 80170f0:	9004      	str	r0, [sp, #16]
 80170f2:	f04f 0300 	mov.w	r3, #0
 80170f6:	f04f 020a 	mov.w	r2, #10
 80170fa:	4649      	mov	r1, r9
 80170fc:	4620      	mov	r0, r4
 80170fe:	d105      	bne.n	801710c <_dtoa_r+0xaa4>
 8017100:	f000 fc17 	bl	8017932 <__multadd>
 8017104:	4681      	mov	r9, r0
 8017106:	4606      	mov	r6, r0
 8017108:	9505      	str	r5, [sp, #20]
 801710a:	e776      	b.n	8016ffa <_dtoa_r+0x992>
 801710c:	f000 fc11 	bl	8017932 <__multadd>
 8017110:	4631      	mov	r1, r6
 8017112:	4681      	mov	r9, r0
 8017114:	2300      	movs	r3, #0
 8017116:	220a      	movs	r2, #10
 8017118:	4620      	mov	r0, r4
 801711a:	f000 fc0a 	bl	8017932 <__multadd>
 801711e:	4606      	mov	r6, r0
 8017120:	e7f2      	b.n	8017108 <_dtoa_r+0xaa0>
 8017122:	f04f 0900 	mov.w	r9, #0
 8017126:	2201      	movs	r2, #1
 8017128:	9904      	ldr	r1, [sp, #16]
 801712a:	4620      	mov	r0, r4
 801712c:	f000 fdb6 	bl	8017c9c <__lshift>
 8017130:	4639      	mov	r1, r7
 8017132:	9004      	str	r0, [sp, #16]
 8017134:	f000 fe06 	bl	8017d44 <__mcmp>
 8017138:	2800      	cmp	r0, #0
 801713a:	dcb6      	bgt.n	80170aa <_dtoa_r+0xa42>
 801713c:	d102      	bne.n	8017144 <_dtoa_r+0xadc>
 801713e:	f018 0f01 	tst.w	r8, #1
 8017142:	d1b2      	bne.n	80170aa <_dtoa_r+0xa42>
 8017144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017148:	2b30      	cmp	r3, #48	; 0x30
 801714a:	f105 32ff 	add.w	r2, r5, #4294967295
 801714e:	f47f af0a 	bne.w	8016f66 <_dtoa_r+0x8fe>
 8017152:	4615      	mov	r5, r2
 8017154:	e7f6      	b.n	8017144 <_dtoa_r+0xadc>
 8017156:	4593      	cmp	fp, r2
 8017158:	d105      	bne.n	8017166 <_dtoa_r+0xafe>
 801715a:	2331      	movs	r3, #49	; 0x31
 801715c:	f10a 0a01 	add.w	sl, sl, #1
 8017160:	f88b 3000 	strb.w	r3, [fp]
 8017164:	e6ff      	b.n	8016f66 <_dtoa_r+0x8fe>
 8017166:	4615      	mov	r5, r2
 8017168:	e79f      	b.n	80170aa <_dtoa_r+0xa42>
 801716a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80171d0 <_dtoa_r+0xb68>
 801716e:	e007      	b.n	8017180 <_dtoa_r+0xb18>
 8017170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017172:	f8df b060 	ldr.w	fp, [pc, #96]	; 80171d4 <_dtoa_r+0xb6c>
 8017176:	b11b      	cbz	r3, 8017180 <_dtoa_r+0xb18>
 8017178:	f10b 0308 	add.w	r3, fp, #8
 801717c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801717e:	6013      	str	r3, [r2, #0]
 8017180:	4658      	mov	r0, fp
 8017182:	b017      	add	sp, #92	; 0x5c
 8017184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017188:	9b06      	ldr	r3, [sp, #24]
 801718a:	2b01      	cmp	r3, #1
 801718c:	f77f ae35 	ble.w	8016dfa <_dtoa_r+0x792>
 8017190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017192:	9307      	str	r3, [sp, #28]
 8017194:	e649      	b.n	8016e2a <_dtoa_r+0x7c2>
 8017196:	9b02      	ldr	r3, [sp, #8]
 8017198:	2b00      	cmp	r3, #0
 801719a:	dc03      	bgt.n	80171a4 <_dtoa_r+0xb3c>
 801719c:	9b06      	ldr	r3, [sp, #24]
 801719e:	2b02      	cmp	r3, #2
 80171a0:	f73f aecc 	bgt.w	8016f3c <_dtoa_r+0x8d4>
 80171a4:	465d      	mov	r5, fp
 80171a6:	4639      	mov	r1, r7
 80171a8:	9804      	ldr	r0, [sp, #16]
 80171aa:	f7ff f9cf 	bl	801654c <quorem>
 80171ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80171b2:	f805 8b01 	strb.w	r8, [r5], #1
 80171b6:	9a02      	ldr	r2, [sp, #8]
 80171b8:	eba5 030b 	sub.w	r3, r5, fp
 80171bc:	429a      	cmp	r2, r3
 80171be:	ddb0      	ble.n	8017122 <_dtoa_r+0xaba>
 80171c0:	2300      	movs	r3, #0
 80171c2:	220a      	movs	r2, #10
 80171c4:	9904      	ldr	r1, [sp, #16]
 80171c6:	4620      	mov	r0, r4
 80171c8:	f000 fbb3 	bl	8017932 <__multadd>
 80171cc:	9004      	str	r0, [sp, #16]
 80171ce:	e7ea      	b.n	80171a6 <_dtoa_r+0xb3e>
 80171d0:	0801982b 	.word	0x0801982b
 80171d4:	08019688 	.word	0x08019688

080171d8 <rshift>:
 80171d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171da:	6906      	ldr	r6, [r0, #16]
 80171dc:	114b      	asrs	r3, r1, #5
 80171de:	429e      	cmp	r6, r3
 80171e0:	f100 0414 	add.w	r4, r0, #20
 80171e4:	dd30      	ble.n	8017248 <rshift+0x70>
 80171e6:	f011 011f 	ands.w	r1, r1, #31
 80171ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80171ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80171f2:	d108      	bne.n	8017206 <rshift+0x2e>
 80171f4:	4621      	mov	r1, r4
 80171f6:	42b2      	cmp	r2, r6
 80171f8:	460b      	mov	r3, r1
 80171fa:	d211      	bcs.n	8017220 <rshift+0x48>
 80171fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8017200:	f841 3b04 	str.w	r3, [r1], #4
 8017204:	e7f7      	b.n	80171f6 <rshift+0x1e>
 8017206:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801720a:	f1c1 0c20 	rsb	ip, r1, #32
 801720e:	40cd      	lsrs	r5, r1
 8017210:	3204      	adds	r2, #4
 8017212:	4623      	mov	r3, r4
 8017214:	42b2      	cmp	r2, r6
 8017216:	4617      	mov	r7, r2
 8017218:	d30c      	bcc.n	8017234 <rshift+0x5c>
 801721a:	601d      	str	r5, [r3, #0]
 801721c:	b105      	cbz	r5, 8017220 <rshift+0x48>
 801721e:	3304      	adds	r3, #4
 8017220:	1b1a      	subs	r2, r3, r4
 8017222:	42a3      	cmp	r3, r4
 8017224:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017228:	bf08      	it	eq
 801722a:	2300      	moveq	r3, #0
 801722c:	6102      	str	r2, [r0, #16]
 801722e:	bf08      	it	eq
 8017230:	6143      	streq	r3, [r0, #20]
 8017232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017234:	683f      	ldr	r7, [r7, #0]
 8017236:	fa07 f70c 	lsl.w	r7, r7, ip
 801723a:	433d      	orrs	r5, r7
 801723c:	f843 5b04 	str.w	r5, [r3], #4
 8017240:	f852 5b04 	ldr.w	r5, [r2], #4
 8017244:	40cd      	lsrs	r5, r1
 8017246:	e7e5      	b.n	8017214 <rshift+0x3c>
 8017248:	4623      	mov	r3, r4
 801724a:	e7e9      	b.n	8017220 <rshift+0x48>

0801724c <__hexdig_fun>:
 801724c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017250:	2b09      	cmp	r3, #9
 8017252:	d802      	bhi.n	801725a <__hexdig_fun+0xe>
 8017254:	3820      	subs	r0, #32
 8017256:	b2c0      	uxtb	r0, r0
 8017258:	4770      	bx	lr
 801725a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801725e:	2b05      	cmp	r3, #5
 8017260:	d801      	bhi.n	8017266 <__hexdig_fun+0x1a>
 8017262:	3847      	subs	r0, #71	; 0x47
 8017264:	e7f7      	b.n	8017256 <__hexdig_fun+0xa>
 8017266:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801726a:	2b05      	cmp	r3, #5
 801726c:	d801      	bhi.n	8017272 <__hexdig_fun+0x26>
 801726e:	3827      	subs	r0, #39	; 0x27
 8017270:	e7f1      	b.n	8017256 <__hexdig_fun+0xa>
 8017272:	2000      	movs	r0, #0
 8017274:	4770      	bx	lr

08017276 <__gethex>:
 8017276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727a:	b08b      	sub	sp, #44	; 0x2c
 801727c:	468a      	mov	sl, r1
 801727e:	9002      	str	r0, [sp, #8]
 8017280:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017282:	9306      	str	r3, [sp, #24]
 8017284:	4690      	mov	r8, r2
 8017286:	f000 fadf 	bl	8017848 <__localeconv_l>
 801728a:	6803      	ldr	r3, [r0, #0]
 801728c:	9303      	str	r3, [sp, #12]
 801728e:	4618      	mov	r0, r3
 8017290:	f7e8 ffb6 	bl	8000200 <strlen>
 8017294:	9b03      	ldr	r3, [sp, #12]
 8017296:	9001      	str	r0, [sp, #4]
 8017298:	4403      	add	r3, r0
 801729a:	f04f 0b00 	mov.w	fp, #0
 801729e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80172a2:	9307      	str	r3, [sp, #28]
 80172a4:	f8da 3000 	ldr.w	r3, [sl]
 80172a8:	3302      	adds	r3, #2
 80172aa:	461f      	mov	r7, r3
 80172ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80172b0:	2830      	cmp	r0, #48	; 0x30
 80172b2:	d06c      	beq.n	801738e <__gethex+0x118>
 80172b4:	f7ff ffca 	bl	801724c <__hexdig_fun>
 80172b8:	4604      	mov	r4, r0
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d16a      	bne.n	8017394 <__gethex+0x11e>
 80172be:	9a01      	ldr	r2, [sp, #4]
 80172c0:	9903      	ldr	r1, [sp, #12]
 80172c2:	4638      	mov	r0, r7
 80172c4:	f001 fc36 	bl	8018b34 <strncmp>
 80172c8:	2800      	cmp	r0, #0
 80172ca:	d166      	bne.n	801739a <__gethex+0x124>
 80172cc:	9b01      	ldr	r3, [sp, #4]
 80172ce:	5cf8      	ldrb	r0, [r7, r3]
 80172d0:	18fe      	adds	r6, r7, r3
 80172d2:	f7ff ffbb 	bl	801724c <__hexdig_fun>
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d062      	beq.n	80173a0 <__gethex+0x12a>
 80172da:	4633      	mov	r3, r6
 80172dc:	7818      	ldrb	r0, [r3, #0]
 80172de:	2830      	cmp	r0, #48	; 0x30
 80172e0:	461f      	mov	r7, r3
 80172e2:	f103 0301 	add.w	r3, r3, #1
 80172e6:	d0f9      	beq.n	80172dc <__gethex+0x66>
 80172e8:	f7ff ffb0 	bl	801724c <__hexdig_fun>
 80172ec:	fab0 f580 	clz	r5, r0
 80172f0:	096d      	lsrs	r5, r5, #5
 80172f2:	4634      	mov	r4, r6
 80172f4:	f04f 0b01 	mov.w	fp, #1
 80172f8:	463a      	mov	r2, r7
 80172fa:	4616      	mov	r6, r2
 80172fc:	3201      	adds	r2, #1
 80172fe:	7830      	ldrb	r0, [r6, #0]
 8017300:	f7ff ffa4 	bl	801724c <__hexdig_fun>
 8017304:	2800      	cmp	r0, #0
 8017306:	d1f8      	bne.n	80172fa <__gethex+0x84>
 8017308:	9a01      	ldr	r2, [sp, #4]
 801730a:	9903      	ldr	r1, [sp, #12]
 801730c:	4630      	mov	r0, r6
 801730e:	f001 fc11 	bl	8018b34 <strncmp>
 8017312:	b950      	cbnz	r0, 801732a <__gethex+0xb4>
 8017314:	b954      	cbnz	r4, 801732c <__gethex+0xb6>
 8017316:	9b01      	ldr	r3, [sp, #4]
 8017318:	18f4      	adds	r4, r6, r3
 801731a:	4622      	mov	r2, r4
 801731c:	4616      	mov	r6, r2
 801731e:	3201      	adds	r2, #1
 8017320:	7830      	ldrb	r0, [r6, #0]
 8017322:	f7ff ff93 	bl	801724c <__hexdig_fun>
 8017326:	2800      	cmp	r0, #0
 8017328:	d1f8      	bne.n	801731c <__gethex+0xa6>
 801732a:	b10c      	cbz	r4, 8017330 <__gethex+0xba>
 801732c:	1ba4      	subs	r4, r4, r6
 801732e:	00a4      	lsls	r4, r4, #2
 8017330:	7833      	ldrb	r3, [r6, #0]
 8017332:	2b50      	cmp	r3, #80	; 0x50
 8017334:	d001      	beq.n	801733a <__gethex+0xc4>
 8017336:	2b70      	cmp	r3, #112	; 0x70
 8017338:	d140      	bne.n	80173bc <__gethex+0x146>
 801733a:	7873      	ldrb	r3, [r6, #1]
 801733c:	2b2b      	cmp	r3, #43	; 0x2b
 801733e:	d031      	beq.n	80173a4 <__gethex+0x12e>
 8017340:	2b2d      	cmp	r3, #45	; 0x2d
 8017342:	d033      	beq.n	80173ac <__gethex+0x136>
 8017344:	1c71      	adds	r1, r6, #1
 8017346:	f04f 0900 	mov.w	r9, #0
 801734a:	7808      	ldrb	r0, [r1, #0]
 801734c:	f7ff ff7e 	bl	801724c <__hexdig_fun>
 8017350:	1e43      	subs	r3, r0, #1
 8017352:	b2db      	uxtb	r3, r3
 8017354:	2b18      	cmp	r3, #24
 8017356:	d831      	bhi.n	80173bc <__gethex+0x146>
 8017358:	f1a0 0210 	sub.w	r2, r0, #16
 801735c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017360:	f7ff ff74 	bl	801724c <__hexdig_fun>
 8017364:	1e43      	subs	r3, r0, #1
 8017366:	b2db      	uxtb	r3, r3
 8017368:	2b18      	cmp	r3, #24
 801736a:	d922      	bls.n	80173b2 <__gethex+0x13c>
 801736c:	f1b9 0f00 	cmp.w	r9, #0
 8017370:	d000      	beq.n	8017374 <__gethex+0xfe>
 8017372:	4252      	negs	r2, r2
 8017374:	4414      	add	r4, r2
 8017376:	f8ca 1000 	str.w	r1, [sl]
 801737a:	b30d      	cbz	r5, 80173c0 <__gethex+0x14a>
 801737c:	f1bb 0f00 	cmp.w	fp, #0
 8017380:	bf0c      	ite	eq
 8017382:	2706      	moveq	r7, #6
 8017384:	2700      	movne	r7, #0
 8017386:	4638      	mov	r0, r7
 8017388:	b00b      	add	sp, #44	; 0x2c
 801738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801738e:	f10b 0b01 	add.w	fp, fp, #1
 8017392:	e78a      	b.n	80172aa <__gethex+0x34>
 8017394:	2500      	movs	r5, #0
 8017396:	462c      	mov	r4, r5
 8017398:	e7ae      	b.n	80172f8 <__gethex+0x82>
 801739a:	463e      	mov	r6, r7
 801739c:	2501      	movs	r5, #1
 801739e:	e7c7      	b.n	8017330 <__gethex+0xba>
 80173a0:	4604      	mov	r4, r0
 80173a2:	e7fb      	b.n	801739c <__gethex+0x126>
 80173a4:	f04f 0900 	mov.w	r9, #0
 80173a8:	1cb1      	adds	r1, r6, #2
 80173aa:	e7ce      	b.n	801734a <__gethex+0xd4>
 80173ac:	f04f 0901 	mov.w	r9, #1
 80173b0:	e7fa      	b.n	80173a8 <__gethex+0x132>
 80173b2:	230a      	movs	r3, #10
 80173b4:	fb03 0202 	mla	r2, r3, r2, r0
 80173b8:	3a10      	subs	r2, #16
 80173ba:	e7cf      	b.n	801735c <__gethex+0xe6>
 80173bc:	4631      	mov	r1, r6
 80173be:	e7da      	b.n	8017376 <__gethex+0x100>
 80173c0:	1bf3      	subs	r3, r6, r7
 80173c2:	3b01      	subs	r3, #1
 80173c4:	4629      	mov	r1, r5
 80173c6:	2b07      	cmp	r3, #7
 80173c8:	dc49      	bgt.n	801745e <__gethex+0x1e8>
 80173ca:	9802      	ldr	r0, [sp, #8]
 80173cc:	f000 fa66 	bl	801789c <_Balloc>
 80173d0:	9b01      	ldr	r3, [sp, #4]
 80173d2:	f100 0914 	add.w	r9, r0, #20
 80173d6:	f04f 0b00 	mov.w	fp, #0
 80173da:	f1c3 0301 	rsb	r3, r3, #1
 80173de:	4605      	mov	r5, r0
 80173e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80173e4:	46da      	mov	sl, fp
 80173e6:	9308      	str	r3, [sp, #32]
 80173e8:	42b7      	cmp	r7, r6
 80173ea:	d33b      	bcc.n	8017464 <__gethex+0x1ee>
 80173ec:	9804      	ldr	r0, [sp, #16]
 80173ee:	f840 ab04 	str.w	sl, [r0], #4
 80173f2:	eba0 0009 	sub.w	r0, r0, r9
 80173f6:	1080      	asrs	r0, r0, #2
 80173f8:	6128      	str	r0, [r5, #16]
 80173fa:	0147      	lsls	r7, r0, #5
 80173fc:	4650      	mov	r0, sl
 80173fe:	f000 fb11 	bl	8017a24 <__hi0bits>
 8017402:	f8d8 6000 	ldr.w	r6, [r8]
 8017406:	1a3f      	subs	r7, r7, r0
 8017408:	42b7      	cmp	r7, r6
 801740a:	dd64      	ble.n	80174d6 <__gethex+0x260>
 801740c:	1bbf      	subs	r7, r7, r6
 801740e:	4639      	mov	r1, r7
 8017410:	4628      	mov	r0, r5
 8017412:	f000 fe21 	bl	8018058 <__any_on>
 8017416:	4682      	mov	sl, r0
 8017418:	b178      	cbz	r0, 801743a <__gethex+0x1c4>
 801741a:	1e7b      	subs	r3, r7, #1
 801741c:	1159      	asrs	r1, r3, #5
 801741e:	f003 021f 	and.w	r2, r3, #31
 8017422:	f04f 0a01 	mov.w	sl, #1
 8017426:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801742a:	fa0a f202 	lsl.w	r2, sl, r2
 801742e:	420a      	tst	r2, r1
 8017430:	d003      	beq.n	801743a <__gethex+0x1c4>
 8017432:	4553      	cmp	r3, sl
 8017434:	dc46      	bgt.n	80174c4 <__gethex+0x24e>
 8017436:	f04f 0a02 	mov.w	sl, #2
 801743a:	4639      	mov	r1, r7
 801743c:	4628      	mov	r0, r5
 801743e:	f7ff fecb 	bl	80171d8 <rshift>
 8017442:	443c      	add	r4, r7
 8017444:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017448:	42a3      	cmp	r3, r4
 801744a:	da52      	bge.n	80174f2 <__gethex+0x27c>
 801744c:	4629      	mov	r1, r5
 801744e:	9802      	ldr	r0, [sp, #8]
 8017450:	f000 fa58 	bl	8017904 <_Bfree>
 8017454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017456:	2300      	movs	r3, #0
 8017458:	6013      	str	r3, [r2, #0]
 801745a:	27a3      	movs	r7, #163	; 0xa3
 801745c:	e793      	b.n	8017386 <__gethex+0x110>
 801745e:	3101      	adds	r1, #1
 8017460:	105b      	asrs	r3, r3, #1
 8017462:	e7b0      	b.n	80173c6 <__gethex+0x150>
 8017464:	1e73      	subs	r3, r6, #1
 8017466:	9305      	str	r3, [sp, #20]
 8017468:	9a07      	ldr	r2, [sp, #28]
 801746a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801746e:	4293      	cmp	r3, r2
 8017470:	d018      	beq.n	80174a4 <__gethex+0x22e>
 8017472:	f1bb 0f20 	cmp.w	fp, #32
 8017476:	d107      	bne.n	8017488 <__gethex+0x212>
 8017478:	9b04      	ldr	r3, [sp, #16]
 801747a:	f8c3 a000 	str.w	sl, [r3]
 801747e:	3304      	adds	r3, #4
 8017480:	f04f 0a00 	mov.w	sl, #0
 8017484:	9304      	str	r3, [sp, #16]
 8017486:	46d3      	mov	fp, sl
 8017488:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801748c:	f7ff fede 	bl	801724c <__hexdig_fun>
 8017490:	f000 000f 	and.w	r0, r0, #15
 8017494:	fa00 f00b 	lsl.w	r0, r0, fp
 8017498:	ea4a 0a00 	orr.w	sl, sl, r0
 801749c:	f10b 0b04 	add.w	fp, fp, #4
 80174a0:	9b05      	ldr	r3, [sp, #20]
 80174a2:	e00d      	b.n	80174c0 <__gethex+0x24a>
 80174a4:	9b05      	ldr	r3, [sp, #20]
 80174a6:	9a08      	ldr	r2, [sp, #32]
 80174a8:	4413      	add	r3, r2
 80174aa:	42bb      	cmp	r3, r7
 80174ac:	d3e1      	bcc.n	8017472 <__gethex+0x1fc>
 80174ae:	4618      	mov	r0, r3
 80174b0:	9a01      	ldr	r2, [sp, #4]
 80174b2:	9903      	ldr	r1, [sp, #12]
 80174b4:	9309      	str	r3, [sp, #36]	; 0x24
 80174b6:	f001 fb3d 	bl	8018b34 <strncmp>
 80174ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174bc:	2800      	cmp	r0, #0
 80174be:	d1d8      	bne.n	8017472 <__gethex+0x1fc>
 80174c0:	461e      	mov	r6, r3
 80174c2:	e791      	b.n	80173e8 <__gethex+0x172>
 80174c4:	1eb9      	subs	r1, r7, #2
 80174c6:	4628      	mov	r0, r5
 80174c8:	f000 fdc6 	bl	8018058 <__any_on>
 80174cc:	2800      	cmp	r0, #0
 80174ce:	d0b2      	beq.n	8017436 <__gethex+0x1c0>
 80174d0:	f04f 0a03 	mov.w	sl, #3
 80174d4:	e7b1      	b.n	801743a <__gethex+0x1c4>
 80174d6:	da09      	bge.n	80174ec <__gethex+0x276>
 80174d8:	1bf7      	subs	r7, r6, r7
 80174da:	4629      	mov	r1, r5
 80174dc:	463a      	mov	r2, r7
 80174de:	9802      	ldr	r0, [sp, #8]
 80174e0:	f000 fbdc 	bl	8017c9c <__lshift>
 80174e4:	1be4      	subs	r4, r4, r7
 80174e6:	4605      	mov	r5, r0
 80174e8:	f100 0914 	add.w	r9, r0, #20
 80174ec:	f04f 0a00 	mov.w	sl, #0
 80174f0:	e7a8      	b.n	8017444 <__gethex+0x1ce>
 80174f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80174f6:	42a0      	cmp	r0, r4
 80174f8:	dd6a      	ble.n	80175d0 <__gethex+0x35a>
 80174fa:	1b04      	subs	r4, r0, r4
 80174fc:	42a6      	cmp	r6, r4
 80174fe:	dc2e      	bgt.n	801755e <__gethex+0x2e8>
 8017500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017504:	2b02      	cmp	r3, #2
 8017506:	d022      	beq.n	801754e <__gethex+0x2d8>
 8017508:	2b03      	cmp	r3, #3
 801750a:	d024      	beq.n	8017556 <__gethex+0x2e0>
 801750c:	2b01      	cmp	r3, #1
 801750e:	d115      	bne.n	801753c <__gethex+0x2c6>
 8017510:	42a6      	cmp	r6, r4
 8017512:	d113      	bne.n	801753c <__gethex+0x2c6>
 8017514:	2e01      	cmp	r6, #1
 8017516:	dc0b      	bgt.n	8017530 <__gethex+0x2ba>
 8017518:	9a06      	ldr	r2, [sp, #24]
 801751a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801751e:	6013      	str	r3, [r2, #0]
 8017520:	2301      	movs	r3, #1
 8017522:	612b      	str	r3, [r5, #16]
 8017524:	f8c9 3000 	str.w	r3, [r9]
 8017528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801752a:	2762      	movs	r7, #98	; 0x62
 801752c:	601d      	str	r5, [r3, #0]
 801752e:	e72a      	b.n	8017386 <__gethex+0x110>
 8017530:	1e71      	subs	r1, r6, #1
 8017532:	4628      	mov	r0, r5
 8017534:	f000 fd90 	bl	8018058 <__any_on>
 8017538:	2800      	cmp	r0, #0
 801753a:	d1ed      	bne.n	8017518 <__gethex+0x2a2>
 801753c:	4629      	mov	r1, r5
 801753e:	9802      	ldr	r0, [sp, #8]
 8017540:	f000 f9e0 	bl	8017904 <_Bfree>
 8017544:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017546:	2300      	movs	r3, #0
 8017548:	6013      	str	r3, [r2, #0]
 801754a:	2750      	movs	r7, #80	; 0x50
 801754c:	e71b      	b.n	8017386 <__gethex+0x110>
 801754e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017550:	2b00      	cmp	r3, #0
 8017552:	d0e1      	beq.n	8017518 <__gethex+0x2a2>
 8017554:	e7f2      	b.n	801753c <__gethex+0x2c6>
 8017556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017558:	2b00      	cmp	r3, #0
 801755a:	d1dd      	bne.n	8017518 <__gethex+0x2a2>
 801755c:	e7ee      	b.n	801753c <__gethex+0x2c6>
 801755e:	1e67      	subs	r7, r4, #1
 8017560:	f1ba 0f00 	cmp.w	sl, #0
 8017564:	d131      	bne.n	80175ca <__gethex+0x354>
 8017566:	b127      	cbz	r7, 8017572 <__gethex+0x2fc>
 8017568:	4639      	mov	r1, r7
 801756a:	4628      	mov	r0, r5
 801756c:	f000 fd74 	bl	8018058 <__any_on>
 8017570:	4682      	mov	sl, r0
 8017572:	117a      	asrs	r2, r7, #5
 8017574:	2301      	movs	r3, #1
 8017576:	f007 071f 	and.w	r7, r7, #31
 801757a:	fa03 f707 	lsl.w	r7, r3, r7
 801757e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017582:	4621      	mov	r1, r4
 8017584:	421f      	tst	r7, r3
 8017586:	4628      	mov	r0, r5
 8017588:	bf18      	it	ne
 801758a:	f04a 0a02 	orrne.w	sl, sl, #2
 801758e:	1b36      	subs	r6, r6, r4
 8017590:	f7ff fe22 	bl	80171d8 <rshift>
 8017594:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017598:	2702      	movs	r7, #2
 801759a:	f1ba 0f00 	cmp.w	sl, #0
 801759e:	d048      	beq.n	8017632 <__gethex+0x3bc>
 80175a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80175a4:	2b02      	cmp	r3, #2
 80175a6:	d015      	beq.n	80175d4 <__gethex+0x35e>
 80175a8:	2b03      	cmp	r3, #3
 80175aa:	d017      	beq.n	80175dc <__gethex+0x366>
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	d109      	bne.n	80175c4 <__gethex+0x34e>
 80175b0:	f01a 0f02 	tst.w	sl, #2
 80175b4:	d006      	beq.n	80175c4 <__gethex+0x34e>
 80175b6:	f8d9 3000 	ldr.w	r3, [r9]
 80175ba:	ea4a 0a03 	orr.w	sl, sl, r3
 80175be:	f01a 0f01 	tst.w	sl, #1
 80175c2:	d10e      	bne.n	80175e2 <__gethex+0x36c>
 80175c4:	f047 0710 	orr.w	r7, r7, #16
 80175c8:	e033      	b.n	8017632 <__gethex+0x3bc>
 80175ca:	f04f 0a01 	mov.w	sl, #1
 80175ce:	e7d0      	b.n	8017572 <__gethex+0x2fc>
 80175d0:	2701      	movs	r7, #1
 80175d2:	e7e2      	b.n	801759a <__gethex+0x324>
 80175d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175d6:	f1c3 0301 	rsb	r3, r3, #1
 80175da:	9315      	str	r3, [sp, #84]	; 0x54
 80175dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d0f0      	beq.n	80175c4 <__gethex+0x34e>
 80175e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80175e6:	f105 0314 	add.w	r3, r5, #20
 80175ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80175ee:	eb03 010a 	add.w	r1, r3, sl
 80175f2:	f04f 0c00 	mov.w	ip, #0
 80175f6:	4618      	mov	r0, r3
 80175f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80175fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017600:	d01c      	beq.n	801763c <__gethex+0x3c6>
 8017602:	3201      	adds	r2, #1
 8017604:	6002      	str	r2, [r0, #0]
 8017606:	2f02      	cmp	r7, #2
 8017608:	f105 0314 	add.w	r3, r5, #20
 801760c:	d138      	bne.n	8017680 <__gethex+0x40a>
 801760e:	f8d8 2000 	ldr.w	r2, [r8]
 8017612:	3a01      	subs	r2, #1
 8017614:	42b2      	cmp	r2, r6
 8017616:	d10a      	bne.n	801762e <__gethex+0x3b8>
 8017618:	1171      	asrs	r1, r6, #5
 801761a:	2201      	movs	r2, #1
 801761c:	f006 061f 	and.w	r6, r6, #31
 8017620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017624:	fa02 f606 	lsl.w	r6, r2, r6
 8017628:	421e      	tst	r6, r3
 801762a:	bf18      	it	ne
 801762c:	4617      	movne	r7, r2
 801762e:	f047 0720 	orr.w	r7, r7, #32
 8017632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017634:	601d      	str	r5, [r3, #0]
 8017636:	9b06      	ldr	r3, [sp, #24]
 8017638:	601c      	str	r4, [r3, #0]
 801763a:	e6a4      	b.n	8017386 <__gethex+0x110>
 801763c:	4299      	cmp	r1, r3
 801763e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017642:	d8d8      	bhi.n	80175f6 <__gethex+0x380>
 8017644:	68ab      	ldr	r3, [r5, #8]
 8017646:	4599      	cmp	r9, r3
 8017648:	db12      	blt.n	8017670 <__gethex+0x3fa>
 801764a:	6869      	ldr	r1, [r5, #4]
 801764c:	9802      	ldr	r0, [sp, #8]
 801764e:	3101      	adds	r1, #1
 8017650:	f000 f924 	bl	801789c <_Balloc>
 8017654:	692a      	ldr	r2, [r5, #16]
 8017656:	3202      	adds	r2, #2
 8017658:	f105 010c 	add.w	r1, r5, #12
 801765c:	4683      	mov	fp, r0
 801765e:	0092      	lsls	r2, r2, #2
 8017660:	300c      	adds	r0, #12
 8017662:	f7fd f9c5 	bl	80149f0 <memcpy>
 8017666:	4629      	mov	r1, r5
 8017668:	9802      	ldr	r0, [sp, #8]
 801766a:	f000 f94b 	bl	8017904 <_Bfree>
 801766e:	465d      	mov	r5, fp
 8017670:	692b      	ldr	r3, [r5, #16]
 8017672:	1c5a      	adds	r2, r3, #1
 8017674:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017678:	612a      	str	r2, [r5, #16]
 801767a:	2201      	movs	r2, #1
 801767c:	615a      	str	r2, [r3, #20]
 801767e:	e7c2      	b.n	8017606 <__gethex+0x390>
 8017680:	692a      	ldr	r2, [r5, #16]
 8017682:	454a      	cmp	r2, r9
 8017684:	dd0b      	ble.n	801769e <__gethex+0x428>
 8017686:	2101      	movs	r1, #1
 8017688:	4628      	mov	r0, r5
 801768a:	f7ff fda5 	bl	80171d8 <rshift>
 801768e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017692:	3401      	adds	r4, #1
 8017694:	42a3      	cmp	r3, r4
 8017696:	f6ff aed9 	blt.w	801744c <__gethex+0x1d6>
 801769a:	2701      	movs	r7, #1
 801769c:	e7c7      	b.n	801762e <__gethex+0x3b8>
 801769e:	f016 061f 	ands.w	r6, r6, #31
 80176a2:	d0fa      	beq.n	801769a <__gethex+0x424>
 80176a4:	449a      	add	sl, r3
 80176a6:	f1c6 0620 	rsb	r6, r6, #32
 80176aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80176ae:	f000 f9b9 	bl	8017a24 <__hi0bits>
 80176b2:	42b0      	cmp	r0, r6
 80176b4:	dbe7      	blt.n	8017686 <__gethex+0x410>
 80176b6:	e7f0      	b.n	801769a <__gethex+0x424>

080176b8 <L_shift>:
 80176b8:	f1c2 0208 	rsb	r2, r2, #8
 80176bc:	0092      	lsls	r2, r2, #2
 80176be:	b570      	push	{r4, r5, r6, lr}
 80176c0:	f1c2 0620 	rsb	r6, r2, #32
 80176c4:	6843      	ldr	r3, [r0, #4]
 80176c6:	6804      	ldr	r4, [r0, #0]
 80176c8:	fa03 f506 	lsl.w	r5, r3, r6
 80176cc:	432c      	orrs	r4, r5
 80176ce:	40d3      	lsrs	r3, r2
 80176d0:	6004      	str	r4, [r0, #0]
 80176d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80176d6:	4288      	cmp	r0, r1
 80176d8:	d3f4      	bcc.n	80176c4 <L_shift+0xc>
 80176da:	bd70      	pop	{r4, r5, r6, pc}

080176dc <__match>:
 80176dc:	b530      	push	{r4, r5, lr}
 80176de:	6803      	ldr	r3, [r0, #0]
 80176e0:	3301      	adds	r3, #1
 80176e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176e6:	b914      	cbnz	r4, 80176ee <__match+0x12>
 80176e8:	6003      	str	r3, [r0, #0]
 80176ea:	2001      	movs	r0, #1
 80176ec:	bd30      	pop	{r4, r5, pc}
 80176ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80176f6:	2d19      	cmp	r5, #25
 80176f8:	bf98      	it	ls
 80176fa:	3220      	addls	r2, #32
 80176fc:	42a2      	cmp	r2, r4
 80176fe:	d0f0      	beq.n	80176e2 <__match+0x6>
 8017700:	2000      	movs	r0, #0
 8017702:	e7f3      	b.n	80176ec <__match+0x10>

08017704 <__hexnan>:
 8017704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017708:	680b      	ldr	r3, [r1, #0]
 801770a:	6801      	ldr	r1, [r0, #0]
 801770c:	115f      	asrs	r7, r3, #5
 801770e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017712:	f013 031f 	ands.w	r3, r3, #31
 8017716:	b087      	sub	sp, #28
 8017718:	bf18      	it	ne
 801771a:	3704      	addne	r7, #4
 801771c:	2500      	movs	r5, #0
 801771e:	1f3e      	subs	r6, r7, #4
 8017720:	4682      	mov	sl, r0
 8017722:	4690      	mov	r8, r2
 8017724:	9301      	str	r3, [sp, #4]
 8017726:	f847 5c04 	str.w	r5, [r7, #-4]
 801772a:	46b1      	mov	r9, r6
 801772c:	4634      	mov	r4, r6
 801772e:	9502      	str	r5, [sp, #8]
 8017730:	46ab      	mov	fp, r5
 8017732:	784a      	ldrb	r2, [r1, #1]
 8017734:	1c4b      	adds	r3, r1, #1
 8017736:	9303      	str	r3, [sp, #12]
 8017738:	b342      	cbz	r2, 801778c <__hexnan+0x88>
 801773a:	4610      	mov	r0, r2
 801773c:	9105      	str	r1, [sp, #20]
 801773e:	9204      	str	r2, [sp, #16]
 8017740:	f7ff fd84 	bl	801724c <__hexdig_fun>
 8017744:	2800      	cmp	r0, #0
 8017746:	d143      	bne.n	80177d0 <__hexnan+0xcc>
 8017748:	9a04      	ldr	r2, [sp, #16]
 801774a:	9905      	ldr	r1, [sp, #20]
 801774c:	2a20      	cmp	r2, #32
 801774e:	d818      	bhi.n	8017782 <__hexnan+0x7e>
 8017750:	9b02      	ldr	r3, [sp, #8]
 8017752:	459b      	cmp	fp, r3
 8017754:	dd13      	ble.n	801777e <__hexnan+0x7a>
 8017756:	454c      	cmp	r4, r9
 8017758:	d206      	bcs.n	8017768 <__hexnan+0x64>
 801775a:	2d07      	cmp	r5, #7
 801775c:	dc04      	bgt.n	8017768 <__hexnan+0x64>
 801775e:	462a      	mov	r2, r5
 8017760:	4649      	mov	r1, r9
 8017762:	4620      	mov	r0, r4
 8017764:	f7ff ffa8 	bl	80176b8 <L_shift>
 8017768:	4544      	cmp	r4, r8
 801776a:	d944      	bls.n	80177f6 <__hexnan+0xf2>
 801776c:	2300      	movs	r3, #0
 801776e:	f1a4 0904 	sub.w	r9, r4, #4
 8017772:	f844 3c04 	str.w	r3, [r4, #-4]
 8017776:	f8cd b008 	str.w	fp, [sp, #8]
 801777a:	464c      	mov	r4, r9
 801777c:	461d      	mov	r5, r3
 801777e:	9903      	ldr	r1, [sp, #12]
 8017780:	e7d7      	b.n	8017732 <__hexnan+0x2e>
 8017782:	2a29      	cmp	r2, #41	; 0x29
 8017784:	d14a      	bne.n	801781c <__hexnan+0x118>
 8017786:	3102      	adds	r1, #2
 8017788:	f8ca 1000 	str.w	r1, [sl]
 801778c:	f1bb 0f00 	cmp.w	fp, #0
 8017790:	d044      	beq.n	801781c <__hexnan+0x118>
 8017792:	454c      	cmp	r4, r9
 8017794:	d206      	bcs.n	80177a4 <__hexnan+0xa0>
 8017796:	2d07      	cmp	r5, #7
 8017798:	dc04      	bgt.n	80177a4 <__hexnan+0xa0>
 801779a:	462a      	mov	r2, r5
 801779c:	4649      	mov	r1, r9
 801779e:	4620      	mov	r0, r4
 80177a0:	f7ff ff8a 	bl	80176b8 <L_shift>
 80177a4:	4544      	cmp	r4, r8
 80177a6:	d928      	bls.n	80177fa <__hexnan+0xf6>
 80177a8:	4643      	mov	r3, r8
 80177aa:	f854 2b04 	ldr.w	r2, [r4], #4
 80177ae:	f843 2b04 	str.w	r2, [r3], #4
 80177b2:	42a6      	cmp	r6, r4
 80177b4:	d2f9      	bcs.n	80177aa <__hexnan+0xa6>
 80177b6:	2200      	movs	r2, #0
 80177b8:	f843 2b04 	str.w	r2, [r3], #4
 80177bc:	429e      	cmp	r6, r3
 80177be:	d2fb      	bcs.n	80177b8 <__hexnan+0xb4>
 80177c0:	6833      	ldr	r3, [r6, #0]
 80177c2:	b91b      	cbnz	r3, 80177cc <__hexnan+0xc8>
 80177c4:	4546      	cmp	r6, r8
 80177c6:	d127      	bne.n	8017818 <__hexnan+0x114>
 80177c8:	2301      	movs	r3, #1
 80177ca:	6033      	str	r3, [r6, #0]
 80177cc:	2005      	movs	r0, #5
 80177ce:	e026      	b.n	801781e <__hexnan+0x11a>
 80177d0:	3501      	adds	r5, #1
 80177d2:	2d08      	cmp	r5, #8
 80177d4:	f10b 0b01 	add.w	fp, fp, #1
 80177d8:	dd06      	ble.n	80177e8 <__hexnan+0xe4>
 80177da:	4544      	cmp	r4, r8
 80177dc:	d9cf      	bls.n	801777e <__hexnan+0x7a>
 80177de:	2300      	movs	r3, #0
 80177e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80177e4:	2501      	movs	r5, #1
 80177e6:	3c04      	subs	r4, #4
 80177e8:	6822      	ldr	r2, [r4, #0]
 80177ea:	f000 000f 	and.w	r0, r0, #15
 80177ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80177f2:	6020      	str	r0, [r4, #0]
 80177f4:	e7c3      	b.n	801777e <__hexnan+0x7a>
 80177f6:	2508      	movs	r5, #8
 80177f8:	e7c1      	b.n	801777e <__hexnan+0x7a>
 80177fa:	9b01      	ldr	r3, [sp, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d0df      	beq.n	80177c0 <__hexnan+0xbc>
 8017800:	f04f 32ff 	mov.w	r2, #4294967295
 8017804:	f1c3 0320 	rsb	r3, r3, #32
 8017808:	fa22 f303 	lsr.w	r3, r2, r3
 801780c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017810:	401a      	ands	r2, r3
 8017812:	f847 2c04 	str.w	r2, [r7, #-4]
 8017816:	e7d3      	b.n	80177c0 <__hexnan+0xbc>
 8017818:	3e04      	subs	r6, #4
 801781a:	e7d1      	b.n	80177c0 <__hexnan+0xbc>
 801781c:	2004      	movs	r0, #4
 801781e:	b007      	add	sp, #28
 8017820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017824 <__locale_ctype_ptr_l>:
 8017824:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017828:	4770      	bx	lr
	...

0801782c <__locale_ctype_ptr>:
 801782c:	4b04      	ldr	r3, [pc, #16]	; (8017840 <__locale_ctype_ptr+0x14>)
 801782e:	4a05      	ldr	r2, [pc, #20]	; (8017844 <__locale_ctype_ptr+0x18>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	6a1b      	ldr	r3, [r3, #32]
 8017834:	2b00      	cmp	r3, #0
 8017836:	bf08      	it	eq
 8017838:	4613      	moveq	r3, r2
 801783a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801783e:	4770      	bx	lr
 8017840:	2000000c 	.word	0x2000000c
 8017844:	20000070 	.word	0x20000070

08017848 <__localeconv_l>:
 8017848:	30f0      	adds	r0, #240	; 0xf0
 801784a:	4770      	bx	lr

0801784c <_localeconv_r>:
 801784c:	4b04      	ldr	r3, [pc, #16]	; (8017860 <_localeconv_r+0x14>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	6a18      	ldr	r0, [r3, #32]
 8017852:	4b04      	ldr	r3, [pc, #16]	; (8017864 <_localeconv_r+0x18>)
 8017854:	2800      	cmp	r0, #0
 8017856:	bf08      	it	eq
 8017858:	4618      	moveq	r0, r3
 801785a:	30f0      	adds	r0, #240	; 0xf0
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	2000000c 	.word	0x2000000c
 8017864:	20000070 	.word	0x20000070

08017868 <malloc>:
 8017868:	4b02      	ldr	r3, [pc, #8]	; (8017874 <malloc+0xc>)
 801786a:	4601      	mov	r1, r0
 801786c:	6818      	ldr	r0, [r3, #0]
 801786e:	f000 bc71 	b.w	8018154 <_malloc_r>
 8017872:	bf00      	nop
 8017874:	2000000c 	.word	0x2000000c

08017878 <__ascii_mbtowc>:
 8017878:	b082      	sub	sp, #8
 801787a:	b901      	cbnz	r1, 801787e <__ascii_mbtowc+0x6>
 801787c:	a901      	add	r1, sp, #4
 801787e:	b142      	cbz	r2, 8017892 <__ascii_mbtowc+0x1a>
 8017880:	b14b      	cbz	r3, 8017896 <__ascii_mbtowc+0x1e>
 8017882:	7813      	ldrb	r3, [r2, #0]
 8017884:	600b      	str	r3, [r1, #0]
 8017886:	7812      	ldrb	r2, [r2, #0]
 8017888:	1c10      	adds	r0, r2, #0
 801788a:	bf18      	it	ne
 801788c:	2001      	movne	r0, #1
 801788e:	b002      	add	sp, #8
 8017890:	4770      	bx	lr
 8017892:	4610      	mov	r0, r2
 8017894:	e7fb      	b.n	801788e <__ascii_mbtowc+0x16>
 8017896:	f06f 0001 	mvn.w	r0, #1
 801789a:	e7f8      	b.n	801788e <__ascii_mbtowc+0x16>

0801789c <_Balloc>:
 801789c:	b570      	push	{r4, r5, r6, lr}
 801789e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178a0:	4604      	mov	r4, r0
 80178a2:	460e      	mov	r6, r1
 80178a4:	b93d      	cbnz	r5, 80178b6 <_Balloc+0x1a>
 80178a6:	2010      	movs	r0, #16
 80178a8:	f7ff ffde 	bl	8017868 <malloc>
 80178ac:	6260      	str	r0, [r4, #36]	; 0x24
 80178ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80178b2:	6005      	str	r5, [r0, #0]
 80178b4:	60c5      	str	r5, [r0, #12]
 80178b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80178b8:	68eb      	ldr	r3, [r5, #12]
 80178ba:	b183      	cbz	r3, 80178de <_Balloc+0x42>
 80178bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178be:	68db      	ldr	r3, [r3, #12]
 80178c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80178c4:	b9b8      	cbnz	r0, 80178f6 <_Balloc+0x5a>
 80178c6:	2101      	movs	r1, #1
 80178c8:	fa01 f506 	lsl.w	r5, r1, r6
 80178cc:	1d6a      	adds	r2, r5, #5
 80178ce:	0092      	lsls	r2, r2, #2
 80178d0:	4620      	mov	r0, r4
 80178d2:	f000 fbe2 	bl	801809a <_calloc_r>
 80178d6:	b160      	cbz	r0, 80178f2 <_Balloc+0x56>
 80178d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80178dc:	e00e      	b.n	80178fc <_Balloc+0x60>
 80178de:	2221      	movs	r2, #33	; 0x21
 80178e0:	2104      	movs	r1, #4
 80178e2:	4620      	mov	r0, r4
 80178e4:	f000 fbd9 	bl	801809a <_calloc_r>
 80178e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178ea:	60e8      	str	r0, [r5, #12]
 80178ec:	68db      	ldr	r3, [r3, #12]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d1e4      	bne.n	80178bc <_Balloc+0x20>
 80178f2:	2000      	movs	r0, #0
 80178f4:	bd70      	pop	{r4, r5, r6, pc}
 80178f6:	6802      	ldr	r2, [r0, #0]
 80178f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80178fc:	2300      	movs	r3, #0
 80178fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017902:	e7f7      	b.n	80178f4 <_Balloc+0x58>

08017904 <_Bfree>:
 8017904:	b570      	push	{r4, r5, r6, lr}
 8017906:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017908:	4606      	mov	r6, r0
 801790a:	460d      	mov	r5, r1
 801790c:	b93c      	cbnz	r4, 801791e <_Bfree+0x1a>
 801790e:	2010      	movs	r0, #16
 8017910:	f7ff ffaa 	bl	8017868 <malloc>
 8017914:	6270      	str	r0, [r6, #36]	; 0x24
 8017916:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801791a:	6004      	str	r4, [r0, #0]
 801791c:	60c4      	str	r4, [r0, #12]
 801791e:	b13d      	cbz	r5, 8017930 <_Bfree+0x2c>
 8017920:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017922:	686a      	ldr	r2, [r5, #4]
 8017924:	68db      	ldr	r3, [r3, #12]
 8017926:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801792a:	6029      	str	r1, [r5, #0]
 801792c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017930:	bd70      	pop	{r4, r5, r6, pc}

08017932 <__multadd>:
 8017932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017936:	690d      	ldr	r5, [r1, #16]
 8017938:	461f      	mov	r7, r3
 801793a:	4606      	mov	r6, r0
 801793c:	460c      	mov	r4, r1
 801793e:	f101 0c14 	add.w	ip, r1, #20
 8017942:	2300      	movs	r3, #0
 8017944:	f8dc 0000 	ldr.w	r0, [ip]
 8017948:	b281      	uxth	r1, r0
 801794a:	fb02 7101 	mla	r1, r2, r1, r7
 801794e:	0c0f      	lsrs	r7, r1, #16
 8017950:	0c00      	lsrs	r0, r0, #16
 8017952:	fb02 7000 	mla	r0, r2, r0, r7
 8017956:	b289      	uxth	r1, r1
 8017958:	3301      	adds	r3, #1
 801795a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801795e:	429d      	cmp	r5, r3
 8017960:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017964:	f84c 1b04 	str.w	r1, [ip], #4
 8017968:	dcec      	bgt.n	8017944 <__multadd+0x12>
 801796a:	b1d7      	cbz	r7, 80179a2 <__multadd+0x70>
 801796c:	68a3      	ldr	r3, [r4, #8]
 801796e:	42ab      	cmp	r3, r5
 8017970:	dc12      	bgt.n	8017998 <__multadd+0x66>
 8017972:	6861      	ldr	r1, [r4, #4]
 8017974:	4630      	mov	r0, r6
 8017976:	3101      	adds	r1, #1
 8017978:	f7ff ff90 	bl	801789c <_Balloc>
 801797c:	6922      	ldr	r2, [r4, #16]
 801797e:	3202      	adds	r2, #2
 8017980:	f104 010c 	add.w	r1, r4, #12
 8017984:	4680      	mov	r8, r0
 8017986:	0092      	lsls	r2, r2, #2
 8017988:	300c      	adds	r0, #12
 801798a:	f7fd f831 	bl	80149f0 <memcpy>
 801798e:	4621      	mov	r1, r4
 8017990:	4630      	mov	r0, r6
 8017992:	f7ff ffb7 	bl	8017904 <_Bfree>
 8017996:	4644      	mov	r4, r8
 8017998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801799c:	3501      	adds	r5, #1
 801799e:	615f      	str	r7, [r3, #20]
 80179a0:	6125      	str	r5, [r4, #16]
 80179a2:	4620      	mov	r0, r4
 80179a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179a8 <__s2b>:
 80179a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179ac:	460c      	mov	r4, r1
 80179ae:	4615      	mov	r5, r2
 80179b0:	461f      	mov	r7, r3
 80179b2:	2209      	movs	r2, #9
 80179b4:	3308      	adds	r3, #8
 80179b6:	4606      	mov	r6, r0
 80179b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80179bc:	2100      	movs	r1, #0
 80179be:	2201      	movs	r2, #1
 80179c0:	429a      	cmp	r2, r3
 80179c2:	db20      	blt.n	8017a06 <__s2b+0x5e>
 80179c4:	4630      	mov	r0, r6
 80179c6:	f7ff ff69 	bl	801789c <_Balloc>
 80179ca:	9b08      	ldr	r3, [sp, #32]
 80179cc:	6143      	str	r3, [r0, #20]
 80179ce:	2d09      	cmp	r5, #9
 80179d0:	f04f 0301 	mov.w	r3, #1
 80179d4:	6103      	str	r3, [r0, #16]
 80179d6:	dd19      	ble.n	8017a0c <__s2b+0x64>
 80179d8:	f104 0809 	add.w	r8, r4, #9
 80179dc:	46c1      	mov	r9, r8
 80179de:	442c      	add	r4, r5
 80179e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80179e4:	4601      	mov	r1, r0
 80179e6:	3b30      	subs	r3, #48	; 0x30
 80179e8:	220a      	movs	r2, #10
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7ff ffa1 	bl	8017932 <__multadd>
 80179f0:	45a1      	cmp	r9, r4
 80179f2:	d1f5      	bne.n	80179e0 <__s2b+0x38>
 80179f4:	eb08 0405 	add.w	r4, r8, r5
 80179f8:	3c08      	subs	r4, #8
 80179fa:	1b2d      	subs	r5, r5, r4
 80179fc:	1963      	adds	r3, r4, r5
 80179fe:	42bb      	cmp	r3, r7
 8017a00:	db07      	blt.n	8017a12 <__s2b+0x6a>
 8017a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a06:	0052      	lsls	r2, r2, #1
 8017a08:	3101      	adds	r1, #1
 8017a0a:	e7d9      	b.n	80179c0 <__s2b+0x18>
 8017a0c:	340a      	adds	r4, #10
 8017a0e:	2509      	movs	r5, #9
 8017a10:	e7f3      	b.n	80179fa <__s2b+0x52>
 8017a12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017a16:	4601      	mov	r1, r0
 8017a18:	3b30      	subs	r3, #48	; 0x30
 8017a1a:	220a      	movs	r2, #10
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	f7ff ff88 	bl	8017932 <__multadd>
 8017a22:	e7eb      	b.n	80179fc <__s2b+0x54>

08017a24 <__hi0bits>:
 8017a24:	0c02      	lsrs	r2, r0, #16
 8017a26:	0412      	lsls	r2, r2, #16
 8017a28:	4603      	mov	r3, r0
 8017a2a:	b9b2      	cbnz	r2, 8017a5a <__hi0bits+0x36>
 8017a2c:	0403      	lsls	r3, r0, #16
 8017a2e:	2010      	movs	r0, #16
 8017a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017a34:	bf04      	itt	eq
 8017a36:	021b      	lsleq	r3, r3, #8
 8017a38:	3008      	addeq	r0, #8
 8017a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017a3e:	bf04      	itt	eq
 8017a40:	011b      	lsleq	r3, r3, #4
 8017a42:	3004      	addeq	r0, #4
 8017a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017a48:	bf04      	itt	eq
 8017a4a:	009b      	lsleq	r3, r3, #2
 8017a4c:	3002      	addeq	r0, #2
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	db06      	blt.n	8017a60 <__hi0bits+0x3c>
 8017a52:	005b      	lsls	r3, r3, #1
 8017a54:	d503      	bpl.n	8017a5e <__hi0bits+0x3a>
 8017a56:	3001      	adds	r0, #1
 8017a58:	4770      	bx	lr
 8017a5a:	2000      	movs	r0, #0
 8017a5c:	e7e8      	b.n	8017a30 <__hi0bits+0xc>
 8017a5e:	2020      	movs	r0, #32
 8017a60:	4770      	bx	lr

08017a62 <__lo0bits>:
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	f013 0207 	ands.w	r2, r3, #7
 8017a68:	4601      	mov	r1, r0
 8017a6a:	d00b      	beq.n	8017a84 <__lo0bits+0x22>
 8017a6c:	07da      	lsls	r2, r3, #31
 8017a6e:	d423      	bmi.n	8017ab8 <__lo0bits+0x56>
 8017a70:	0798      	lsls	r0, r3, #30
 8017a72:	bf49      	itett	mi
 8017a74:	085b      	lsrmi	r3, r3, #1
 8017a76:	089b      	lsrpl	r3, r3, #2
 8017a78:	2001      	movmi	r0, #1
 8017a7a:	600b      	strmi	r3, [r1, #0]
 8017a7c:	bf5c      	itt	pl
 8017a7e:	600b      	strpl	r3, [r1, #0]
 8017a80:	2002      	movpl	r0, #2
 8017a82:	4770      	bx	lr
 8017a84:	b298      	uxth	r0, r3
 8017a86:	b9a8      	cbnz	r0, 8017ab4 <__lo0bits+0x52>
 8017a88:	0c1b      	lsrs	r3, r3, #16
 8017a8a:	2010      	movs	r0, #16
 8017a8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017a90:	bf04      	itt	eq
 8017a92:	0a1b      	lsreq	r3, r3, #8
 8017a94:	3008      	addeq	r0, #8
 8017a96:	071a      	lsls	r2, r3, #28
 8017a98:	bf04      	itt	eq
 8017a9a:	091b      	lsreq	r3, r3, #4
 8017a9c:	3004      	addeq	r0, #4
 8017a9e:	079a      	lsls	r2, r3, #30
 8017aa0:	bf04      	itt	eq
 8017aa2:	089b      	lsreq	r3, r3, #2
 8017aa4:	3002      	addeq	r0, #2
 8017aa6:	07da      	lsls	r2, r3, #31
 8017aa8:	d402      	bmi.n	8017ab0 <__lo0bits+0x4e>
 8017aaa:	085b      	lsrs	r3, r3, #1
 8017aac:	d006      	beq.n	8017abc <__lo0bits+0x5a>
 8017aae:	3001      	adds	r0, #1
 8017ab0:	600b      	str	r3, [r1, #0]
 8017ab2:	4770      	bx	lr
 8017ab4:	4610      	mov	r0, r2
 8017ab6:	e7e9      	b.n	8017a8c <__lo0bits+0x2a>
 8017ab8:	2000      	movs	r0, #0
 8017aba:	4770      	bx	lr
 8017abc:	2020      	movs	r0, #32
 8017abe:	4770      	bx	lr

08017ac0 <__i2b>:
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	460c      	mov	r4, r1
 8017ac4:	2101      	movs	r1, #1
 8017ac6:	f7ff fee9 	bl	801789c <_Balloc>
 8017aca:	2201      	movs	r2, #1
 8017acc:	6144      	str	r4, [r0, #20]
 8017ace:	6102      	str	r2, [r0, #16]
 8017ad0:	bd10      	pop	{r4, pc}

08017ad2 <__multiply>:
 8017ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad6:	4614      	mov	r4, r2
 8017ad8:	690a      	ldr	r2, [r1, #16]
 8017ada:	6923      	ldr	r3, [r4, #16]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	bfb8      	it	lt
 8017ae0:	460b      	movlt	r3, r1
 8017ae2:	4688      	mov	r8, r1
 8017ae4:	bfbc      	itt	lt
 8017ae6:	46a0      	movlt	r8, r4
 8017ae8:	461c      	movlt	r4, r3
 8017aea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017aee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017af6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017afa:	eb07 0609 	add.w	r6, r7, r9
 8017afe:	42b3      	cmp	r3, r6
 8017b00:	bfb8      	it	lt
 8017b02:	3101      	addlt	r1, #1
 8017b04:	f7ff feca 	bl	801789c <_Balloc>
 8017b08:	f100 0514 	add.w	r5, r0, #20
 8017b0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017b10:	462b      	mov	r3, r5
 8017b12:	2200      	movs	r2, #0
 8017b14:	4573      	cmp	r3, lr
 8017b16:	d316      	bcc.n	8017b46 <__multiply+0x74>
 8017b18:	f104 0214 	add.w	r2, r4, #20
 8017b1c:	f108 0114 	add.w	r1, r8, #20
 8017b20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017b24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	9b00      	ldr	r3, [sp, #0]
 8017b2c:	9201      	str	r2, [sp, #4]
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	d80c      	bhi.n	8017b4c <__multiply+0x7a>
 8017b32:	2e00      	cmp	r6, #0
 8017b34:	dd03      	ble.n	8017b3e <__multiply+0x6c>
 8017b36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d05d      	beq.n	8017bfa <__multiply+0x128>
 8017b3e:	6106      	str	r6, [r0, #16]
 8017b40:	b003      	add	sp, #12
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b46:	f843 2b04 	str.w	r2, [r3], #4
 8017b4a:	e7e3      	b.n	8017b14 <__multiply+0x42>
 8017b4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017b50:	f1bb 0f00 	cmp.w	fp, #0
 8017b54:	d023      	beq.n	8017b9e <__multiply+0xcc>
 8017b56:	4689      	mov	r9, r1
 8017b58:	46ac      	mov	ip, r5
 8017b5a:	f04f 0800 	mov.w	r8, #0
 8017b5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017b62:	f8dc a000 	ldr.w	sl, [ip]
 8017b66:	b2a3      	uxth	r3, r4
 8017b68:	fa1f fa8a 	uxth.w	sl, sl
 8017b6c:	fb0b a303 	mla	r3, fp, r3, sl
 8017b70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017b74:	f8dc 4000 	ldr.w	r4, [ip]
 8017b78:	4443      	add	r3, r8
 8017b7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017b82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017b86:	46e2      	mov	sl, ip
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b8e:	454f      	cmp	r7, r9
 8017b90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b94:	f84a 3b04 	str.w	r3, [sl], #4
 8017b98:	d82b      	bhi.n	8017bf2 <__multiply+0x120>
 8017b9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017b9e:	9b01      	ldr	r3, [sp, #4]
 8017ba0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017ba4:	3204      	adds	r2, #4
 8017ba6:	f1ba 0f00 	cmp.w	sl, #0
 8017baa:	d020      	beq.n	8017bee <__multiply+0x11c>
 8017bac:	682b      	ldr	r3, [r5, #0]
 8017bae:	4689      	mov	r9, r1
 8017bb0:	46a8      	mov	r8, r5
 8017bb2:	f04f 0b00 	mov.w	fp, #0
 8017bb6:	f8b9 c000 	ldrh.w	ip, [r9]
 8017bba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017bbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8017bc2:	445c      	add	r4, fp
 8017bc4:	46c4      	mov	ip, r8
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017bcc:	f84c 3b04 	str.w	r3, [ip], #4
 8017bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8017bd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017bd8:	0c1b      	lsrs	r3, r3, #16
 8017bda:	fb0a b303 	mla	r3, sl, r3, fp
 8017bde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017be2:	454f      	cmp	r7, r9
 8017be4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017be8:	d805      	bhi.n	8017bf6 <__multiply+0x124>
 8017bea:	f8c8 3004 	str.w	r3, [r8, #4]
 8017bee:	3504      	adds	r5, #4
 8017bf0:	e79b      	b.n	8017b2a <__multiply+0x58>
 8017bf2:	46d4      	mov	ip, sl
 8017bf4:	e7b3      	b.n	8017b5e <__multiply+0x8c>
 8017bf6:	46e0      	mov	r8, ip
 8017bf8:	e7dd      	b.n	8017bb6 <__multiply+0xe4>
 8017bfa:	3e01      	subs	r6, #1
 8017bfc:	e799      	b.n	8017b32 <__multiply+0x60>
	...

08017c00 <__pow5mult>:
 8017c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c04:	4615      	mov	r5, r2
 8017c06:	f012 0203 	ands.w	r2, r2, #3
 8017c0a:	4606      	mov	r6, r0
 8017c0c:	460f      	mov	r7, r1
 8017c0e:	d007      	beq.n	8017c20 <__pow5mult+0x20>
 8017c10:	3a01      	subs	r2, #1
 8017c12:	4c21      	ldr	r4, [pc, #132]	; (8017c98 <__pow5mult+0x98>)
 8017c14:	2300      	movs	r3, #0
 8017c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c1a:	f7ff fe8a 	bl	8017932 <__multadd>
 8017c1e:	4607      	mov	r7, r0
 8017c20:	10ad      	asrs	r5, r5, #2
 8017c22:	d035      	beq.n	8017c90 <__pow5mult+0x90>
 8017c24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017c26:	b93c      	cbnz	r4, 8017c38 <__pow5mult+0x38>
 8017c28:	2010      	movs	r0, #16
 8017c2a:	f7ff fe1d 	bl	8017868 <malloc>
 8017c2e:	6270      	str	r0, [r6, #36]	; 0x24
 8017c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c34:	6004      	str	r4, [r0, #0]
 8017c36:	60c4      	str	r4, [r0, #12]
 8017c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c40:	b94c      	cbnz	r4, 8017c56 <__pow5mult+0x56>
 8017c42:	f240 2171 	movw	r1, #625	; 0x271
 8017c46:	4630      	mov	r0, r6
 8017c48:	f7ff ff3a 	bl	8017ac0 <__i2b>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c52:	4604      	mov	r4, r0
 8017c54:	6003      	str	r3, [r0, #0]
 8017c56:	f04f 0800 	mov.w	r8, #0
 8017c5a:	07eb      	lsls	r3, r5, #31
 8017c5c:	d50a      	bpl.n	8017c74 <__pow5mult+0x74>
 8017c5e:	4639      	mov	r1, r7
 8017c60:	4622      	mov	r2, r4
 8017c62:	4630      	mov	r0, r6
 8017c64:	f7ff ff35 	bl	8017ad2 <__multiply>
 8017c68:	4639      	mov	r1, r7
 8017c6a:	4681      	mov	r9, r0
 8017c6c:	4630      	mov	r0, r6
 8017c6e:	f7ff fe49 	bl	8017904 <_Bfree>
 8017c72:	464f      	mov	r7, r9
 8017c74:	106d      	asrs	r5, r5, #1
 8017c76:	d00b      	beq.n	8017c90 <__pow5mult+0x90>
 8017c78:	6820      	ldr	r0, [r4, #0]
 8017c7a:	b938      	cbnz	r0, 8017c8c <__pow5mult+0x8c>
 8017c7c:	4622      	mov	r2, r4
 8017c7e:	4621      	mov	r1, r4
 8017c80:	4630      	mov	r0, r6
 8017c82:	f7ff ff26 	bl	8017ad2 <__multiply>
 8017c86:	6020      	str	r0, [r4, #0]
 8017c88:	f8c0 8000 	str.w	r8, [r0]
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	e7e4      	b.n	8017c5a <__pow5mult+0x5a>
 8017c90:	4638      	mov	r0, r7
 8017c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c96:	bf00      	nop
 8017c98:	080197f8 	.word	0x080197f8

08017c9c <__lshift>:
 8017c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017ca6:	6923      	ldr	r3, [r4, #16]
 8017ca8:	6849      	ldr	r1, [r1, #4]
 8017caa:	eb0a 0903 	add.w	r9, sl, r3
 8017cae:	68a3      	ldr	r3, [r4, #8]
 8017cb0:	4607      	mov	r7, r0
 8017cb2:	4616      	mov	r6, r2
 8017cb4:	f109 0501 	add.w	r5, r9, #1
 8017cb8:	42ab      	cmp	r3, r5
 8017cba:	db32      	blt.n	8017d22 <__lshift+0x86>
 8017cbc:	4638      	mov	r0, r7
 8017cbe:	f7ff fded 	bl	801789c <_Balloc>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	4680      	mov	r8, r0
 8017cc6:	f100 0114 	add.w	r1, r0, #20
 8017cca:	461a      	mov	r2, r3
 8017ccc:	4553      	cmp	r3, sl
 8017cce:	db2b      	blt.n	8017d28 <__lshift+0x8c>
 8017cd0:	6920      	ldr	r0, [r4, #16]
 8017cd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017cd6:	f104 0314 	add.w	r3, r4, #20
 8017cda:	f016 021f 	ands.w	r2, r6, #31
 8017cde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ce2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ce6:	d025      	beq.n	8017d34 <__lshift+0x98>
 8017ce8:	f1c2 0e20 	rsb	lr, r2, #32
 8017cec:	2000      	movs	r0, #0
 8017cee:	681e      	ldr	r6, [r3, #0]
 8017cf0:	468a      	mov	sl, r1
 8017cf2:	4096      	lsls	r6, r2
 8017cf4:	4330      	orrs	r0, r6
 8017cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8017cfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8017cfe:	459c      	cmp	ip, r3
 8017d00:	fa20 f00e 	lsr.w	r0, r0, lr
 8017d04:	d814      	bhi.n	8017d30 <__lshift+0x94>
 8017d06:	6048      	str	r0, [r1, #4]
 8017d08:	b108      	cbz	r0, 8017d0e <__lshift+0x72>
 8017d0a:	f109 0502 	add.w	r5, r9, #2
 8017d0e:	3d01      	subs	r5, #1
 8017d10:	4638      	mov	r0, r7
 8017d12:	f8c8 5010 	str.w	r5, [r8, #16]
 8017d16:	4621      	mov	r1, r4
 8017d18:	f7ff fdf4 	bl	8017904 <_Bfree>
 8017d1c:	4640      	mov	r0, r8
 8017d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d22:	3101      	adds	r1, #1
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	e7c7      	b.n	8017cb8 <__lshift+0x1c>
 8017d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	e7cd      	b.n	8017ccc <__lshift+0x30>
 8017d30:	4651      	mov	r1, sl
 8017d32:	e7dc      	b.n	8017cee <__lshift+0x52>
 8017d34:	3904      	subs	r1, #4
 8017d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d3e:	459c      	cmp	ip, r3
 8017d40:	d8f9      	bhi.n	8017d36 <__lshift+0x9a>
 8017d42:	e7e4      	b.n	8017d0e <__lshift+0x72>

08017d44 <__mcmp>:
 8017d44:	6903      	ldr	r3, [r0, #16]
 8017d46:	690a      	ldr	r2, [r1, #16]
 8017d48:	1a9b      	subs	r3, r3, r2
 8017d4a:	b530      	push	{r4, r5, lr}
 8017d4c:	d10c      	bne.n	8017d68 <__mcmp+0x24>
 8017d4e:	0092      	lsls	r2, r2, #2
 8017d50:	3014      	adds	r0, #20
 8017d52:	3114      	adds	r1, #20
 8017d54:	1884      	adds	r4, r0, r2
 8017d56:	4411      	add	r1, r2
 8017d58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017d5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017d60:	4295      	cmp	r5, r2
 8017d62:	d003      	beq.n	8017d6c <__mcmp+0x28>
 8017d64:	d305      	bcc.n	8017d72 <__mcmp+0x2e>
 8017d66:	2301      	movs	r3, #1
 8017d68:	4618      	mov	r0, r3
 8017d6a:	bd30      	pop	{r4, r5, pc}
 8017d6c:	42a0      	cmp	r0, r4
 8017d6e:	d3f3      	bcc.n	8017d58 <__mcmp+0x14>
 8017d70:	e7fa      	b.n	8017d68 <__mcmp+0x24>
 8017d72:	f04f 33ff 	mov.w	r3, #4294967295
 8017d76:	e7f7      	b.n	8017d68 <__mcmp+0x24>

08017d78 <__mdiff>:
 8017d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d7c:	460d      	mov	r5, r1
 8017d7e:	4607      	mov	r7, r0
 8017d80:	4611      	mov	r1, r2
 8017d82:	4628      	mov	r0, r5
 8017d84:	4614      	mov	r4, r2
 8017d86:	f7ff ffdd 	bl	8017d44 <__mcmp>
 8017d8a:	1e06      	subs	r6, r0, #0
 8017d8c:	d108      	bne.n	8017da0 <__mdiff+0x28>
 8017d8e:	4631      	mov	r1, r6
 8017d90:	4638      	mov	r0, r7
 8017d92:	f7ff fd83 	bl	801789c <_Balloc>
 8017d96:	2301      	movs	r3, #1
 8017d98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017da0:	bfa4      	itt	ge
 8017da2:	4623      	movge	r3, r4
 8017da4:	462c      	movge	r4, r5
 8017da6:	4638      	mov	r0, r7
 8017da8:	6861      	ldr	r1, [r4, #4]
 8017daa:	bfa6      	itte	ge
 8017dac:	461d      	movge	r5, r3
 8017dae:	2600      	movge	r6, #0
 8017db0:	2601      	movlt	r6, #1
 8017db2:	f7ff fd73 	bl	801789c <_Balloc>
 8017db6:	692b      	ldr	r3, [r5, #16]
 8017db8:	60c6      	str	r6, [r0, #12]
 8017dba:	6926      	ldr	r6, [r4, #16]
 8017dbc:	f105 0914 	add.w	r9, r5, #20
 8017dc0:	f104 0214 	add.w	r2, r4, #20
 8017dc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017dc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017dcc:	f100 0514 	add.w	r5, r0, #20
 8017dd0:	f04f 0e00 	mov.w	lr, #0
 8017dd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017dd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017ddc:	fa1e f18a 	uxtah	r1, lr, sl
 8017de0:	b2a3      	uxth	r3, r4
 8017de2:	1ac9      	subs	r1, r1, r3
 8017de4:	0c23      	lsrs	r3, r4, #16
 8017de6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017dea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017dee:	b289      	uxth	r1, r1
 8017df0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017df4:	45c8      	cmp	r8, r9
 8017df6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017dfa:	4694      	mov	ip, r2
 8017dfc:	f845 3b04 	str.w	r3, [r5], #4
 8017e00:	d8e8      	bhi.n	8017dd4 <__mdiff+0x5c>
 8017e02:	45bc      	cmp	ip, r7
 8017e04:	d304      	bcc.n	8017e10 <__mdiff+0x98>
 8017e06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017e0a:	b183      	cbz	r3, 8017e2e <__mdiff+0xb6>
 8017e0c:	6106      	str	r6, [r0, #16]
 8017e0e:	e7c5      	b.n	8017d9c <__mdiff+0x24>
 8017e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017e14:	fa1e f381 	uxtah	r3, lr, r1
 8017e18:	141a      	asrs	r2, r3, #16
 8017e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017e1e:	b29b      	uxth	r3, r3
 8017e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017e28:	f845 3b04 	str.w	r3, [r5], #4
 8017e2c:	e7e9      	b.n	8017e02 <__mdiff+0x8a>
 8017e2e:	3e01      	subs	r6, #1
 8017e30:	e7e9      	b.n	8017e06 <__mdiff+0x8e>
	...

08017e34 <__ulp>:
 8017e34:	4b12      	ldr	r3, [pc, #72]	; (8017e80 <__ulp+0x4c>)
 8017e36:	ee10 2a90 	vmov	r2, s1
 8017e3a:	401a      	ands	r2, r3
 8017e3c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	dd04      	ble.n	8017e4e <__ulp+0x1a>
 8017e44:	2000      	movs	r0, #0
 8017e46:	4619      	mov	r1, r3
 8017e48:	ec41 0b10 	vmov	d0, r0, r1
 8017e4c:	4770      	bx	lr
 8017e4e:	425b      	negs	r3, r3
 8017e50:	151b      	asrs	r3, r3, #20
 8017e52:	2b13      	cmp	r3, #19
 8017e54:	f04f 0000 	mov.w	r0, #0
 8017e58:	f04f 0100 	mov.w	r1, #0
 8017e5c:	dc04      	bgt.n	8017e68 <__ulp+0x34>
 8017e5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017e62:	fa42 f103 	asr.w	r1, r2, r3
 8017e66:	e7ef      	b.n	8017e48 <__ulp+0x14>
 8017e68:	3b14      	subs	r3, #20
 8017e6a:	2b1e      	cmp	r3, #30
 8017e6c:	f04f 0201 	mov.w	r2, #1
 8017e70:	bfda      	itte	le
 8017e72:	f1c3 031f 	rsble	r3, r3, #31
 8017e76:	fa02 f303 	lslle.w	r3, r2, r3
 8017e7a:	4613      	movgt	r3, r2
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	e7e3      	b.n	8017e48 <__ulp+0x14>
 8017e80:	7ff00000 	.word	0x7ff00000

08017e84 <__b2d>:
 8017e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e86:	6905      	ldr	r5, [r0, #16]
 8017e88:	f100 0714 	add.w	r7, r0, #20
 8017e8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017e90:	1f2e      	subs	r6, r5, #4
 8017e92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017e96:	4620      	mov	r0, r4
 8017e98:	f7ff fdc4 	bl	8017a24 <__hi0bits>
 8017e9c:	f1c0 0320 	rsb	r3, r0, #32
 8017ea0:	280a      	cmp	r0, #10
 8017ea2:	600b      	str	r3, [r1, #0]
 8017ea4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017f1c <__b2d+0x98>
 8017ea8:	dc14      	bgt.n	8017ed4 <__b2d+0x50>
 8017eaa:	f1c0 0e0b 	rsb	lr, r0, #11
 8017eae:	fa24 f10e 	lsr.w	r1, r4, lr
 8017eb2:	42b7      	cmp	r7, r6
 8017eb4:	ea41 030c 	orr.w	r3, r1, ip
 8017eb8:	bf34      	ite	cc
 8017eba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017ebe:	2100      	movcs	r1, #0
 8017ec0:	3015      	adds	r0, #21
 8017ec2:	fa04 f000 	lsl.w	r0, r4, r0
 8017ec6:	fa21 f10e 	lsr.w	r1, r1, lr
 8017eca:	ea40 0201 	orr.w	r2, r0, r1
 8017ece:	ec43 2b10 	vmov	d0, r2, r3
 8017ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ed4:	42b7      	cmp	r7, r6
 8017ed6:	bf3a      	itte	cc
 8017ed8:	f1a5 0608 	subcc.w	r6, r5, #8
 8017edc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017ee0:	2100      	movcs	r1, #0
 8017ee2:	380b      	subs	r0, #11
 8017ee4:	d015      	beq.n	8017f12 <__b2d+0x8e>
 8017ee6:	4084      	lsls	r4, r0
 8017ee8:	f1c0 0520 	rsb	r5, r0, #32
 8017eec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017ef0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017ef4:	42be      	cmp	r6, r7
 8017ef6:	fa21 fc05 	lsr.w	ip, r1, r5
 8017efa:	ea44 030c 	orr.w	r3, r4, ip
 8017efe:	bf8c      	ite	hi
 8017f00:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017f04:	2400      	movls	r4, #0
 8017f06:	fa01 f000 	lsl.w	r0, r1, r0
 8017f0a:	40ec      	lsrs	r4, r5
 8017f0c:	ea40 0204 	orr.w	r2, r0, r4
 8017f10:	e7dd      	b.n	8017ece <__b2d+0x4a>
 8017f12:	ea44 030c 	orr.w	r3, r4, ip
 8017f16:	460a      	mov	r2, r1
 8017f18:	e7d9      	b.n	8017ece <__b2d+0x4a>
 8017f1a:	bf00      	nop
 8017f1c:	3ff00000 	.word	0x3ff00000

08017f20 <__d2b>:
 8017f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017f24:	460e      	mov	r6, r1
 8017f26:	2101      	movs	r1, #1
 8017f28:	ec59 8b10 	vmov	r8, r9, d0
 8017f2c:	4615      	mov	r5, r2
 8017f2e:	f7ff fcb5 	bl	801789c <_Balloc>
 8017f32:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017f36:	4607      	mov	r7, r0
 8017f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017f3c:	bb34      	cbnz	r4, 8017f8c <__d2b+0x6c>
 8017f3e:	9301      	str	r3, [sp, #4]
 8017f40:	f1b8 0300 	subs.w	r3, r8, #0
 8017f44:	d027      	beq.n	8017f96 <__d2b+0x76>
 8017f46:	a802      	add	r0, sp, #8
 8017f48:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017f4c:	f7ff fd89 	bl	8017a62 <__lo0bits>
 8017f50:	9900      	ldr	r1, [sp, #0]
 8017f52:	b1f0      	cbz	r0, 8017f92 <__d2b+0x72>
 8017f54:	9a01      	ldr	r2, [sp, #4]
 8017f56:	f1c0 0320 	rsb	r3, r0, #32
 8017f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8017f5e:	430b      	orrs	r3, r1
 8017f60:	40c2      	lsrs	r2, r0
 8017f62:	617b      	str	r3, [r7, #20]
 8017f64:	9201      	str	r2, [sp, #4]
 8017f66:	9b01      	ldr	r3, [sp, #4]
 8017f68:	61bb      	str	r3, [r7, #24]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	bf14      	ite	ne
 8017f6e:	2102      	movne	r1, #2
 8017f70:	2101      	moveq	r1, #1
 8017f72:	6139      	str	r1, [r7, #16]
 8017f74:	b1c4      	cbz	r4, 8017fa8 <__d2b+0x88>
 8017f76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017f7a:	4404      	add	r4, r0
 8017f7c:	6034      	str	r4, [r6, #0]
 8017f7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f82:	6028      	str	r0, [r5, #0]
 8017f84:	4638      	mov	r0, r7
 8017f86:	b003      	add	sp, #12
 8017f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f90:	e7d5      	b.n	8017f3e <__d2b+0x1e>
 8017f92:	6179      	str	r1, [r7, #20]
 8017f94:	e7e7      	b.n	8017f66 <__d2b+0x46>
 8017f96:	a801      	add	r0, sp, #4
 8017f98:	f7ff fd63 	bl	8017a62 <__lo0bits>
 8017f9c:	9b01      	ldr	r3, [sp, #4]
 8017f9e:	617b      	str	r3, [r7, #20]
 8017fa0:	2101      	movs	r1, #1
 8017fa2:	6139      	str	r1, [r7, #16]
 8017fa4:	3020      	adds	r0, #32
 8017fa6:	e7e5      	b.n	8017f74 <__d2b+0x54>
 8017fa8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017fac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017fb0:	6030      	str	r0, [r6, #0]
 8017fb2:	6918      	ldr	r0, [r3, #16]
 8017fb4:	f7ff fd36 	bl	8017a24 <__hi0bits>
 8017fb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017fbc:	e7e1      	b.n	8017f82 <__d2b+0x62>

08017fbe <__ratio>:
 8017fbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc2:	4688      	mov	r8, r1
 8017fc4:	4669      	mov	r1, sp
 8017fc6:	4681      	mov	r9, r0
 8017fc8:	f7ff ff5c 	bl	8017e84 <__b2d>
 8017fcc:	a901      	add	r1, sp, #4
 8017fce:	4640      	mov	r0, r8
 8017fd0:	ec57 6b10 	vmov	r6, r7, d0
 8017fd4:	f7ff ff56 	bl	8017e84 <__b2d>
 8017fd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017fdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017fe0:	eba3 0c02 	sub.w	ip, r3, r2
 8017fe4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017fe8:	1a9b      	subs	r3, r3, r2
 8017fea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017fee:	ec5b ab10 	vmov	sl, fp, d0
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	bfce      	itee	gt
 8017ff6:	463a      	movgt	r2, r7
 8017ff8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017ffc:	465a      	movle	r2, fp
 8017ffe:	4659      	mov	r1, fp
 8018000:	463d      	mov	r5, r7
 8018002:	bfd4      	ite	le
 8018004:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018008:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801800c:	4630      	mov	r0, r6
 801800e:	ee10 2a10 	vmov	r2, s0
 8018012:	460b      	mov	r3, r1
 8018014:	4629      	mov	r1, r5
 8018016:	f7e8 fc31 	bl	800087c <__aeabi_ddiv>
 801801a:	ec41 0b10 	vmov	d0, r0, r1
 801801e:	b003      	add	sp, #12
 8018020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018024 <__copybits>:
 8018024:	3901      	subs	r1, #1
 8018026:	b510      	push	{r4, lr}
 8018028:	1149      	asrs	r1, r1, #5
 801802a:	6914      	ldr	r4, [r2, #16]
 801802c:	3101      	adds	r1, #1
 801802e:	f102 0314 	add.w	r3, r2, #20
 8018032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801803a:	42a3      	cmp	r3, r4
 801803c:	4602      	mov	r2, r0
 801803e:	d303      	bcc.n	8018048 <__copybits+0x24>
 8018040:	2300      	movs	r3, #0
 8018042:	428a      	cmp	r2, r1
 8018044:	d305      	bcc.n	8018052 <__copybits+0x2e>
 8018046:	bd10      	pop	{r4, pc}
 8018048:	f853 2b04 	ldr.w	r2, [r3], #4
 801804c:	f840 2b04 	str.w	r2, [r0], #4
 8018050:	e7f3      	b.n	801803a <__copybits+0x16>
 8018052:	f842 3b04 	str.w	r3, [r2], #4
 8018056:	e7f4      	b.n	8018042 <__copybits+0x1e>

08018058 <__any_on>:
 8018058:	f100 0214 	add.w	r2, r0, #20
 801805c:	6900      	ldr	r0, [r0, #16]
 801805e:	114b      	asrs	r3, r1, #5
 8018060:	4298      	cmp	r0, r3
 8018062:	b510      	push	{r4, lr}
 8018064:	db11      	blt.n	801808a <__any_on+0x32>
 8018066:	dd0a      	ble.n	801807e <__any_on+0x26>
 8018068:	f011 011f 	ands.w	r1, r1, #31
 801806c:	d007      	beq.n	801807e <__any_on+0x26>
 801806e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018072:	fa24 f001 	lsr.w	r0, r4, r1
 8018076:	fa00 f101 	lsl.w	r1, r0, r1
 801807a:	428c      	cmp	r4, r1
 801807c:	d10b      	bne.n	8018096 <__any_on+0x3e>
 801807e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018082:	4293      	cmp	r3, r2
 8018084:	d803      	bhi.n	801808e <__any_on+0x36>
 8018086:	2000      	movs	r0, #0
 8018088:	bd10      	pop	{r4, pc}
 801808a:	4603      	mov	r3, r0
 801808c:	e7f7      	b.n	801807e <__any_on+0x26>
 801808e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018092:	2900      	cmp	r1, #0
 8018094:	d0f5      	beq.n	8018082 <__any_on+0x2a>
 8018096:	2001      	movs	r0, #1
 8018098:	e7f6      	b.n	8018088 <__any_on+0x30>

0801809a <_calloc_r>:
 801809a:	b538      	push	{r3, r4, r5, lr}
 801809c:	fb02 f401 	mul.w	r4, r2, r1
 80180a0:	4621      	mov	r1, r4
 80180a2:	f000 f857 	bl	8018154 <_malloc_r>
 80180a6:	4605      	mov	r5, r0
 80180a8:	b118      	cbz	r0, 80180b2 <_calloc_r+0x18>
 80180aa:	4622      	mov	r2, r4
 80180ac:	2100      	movs	r1, #0
 80180ae:	f7fc fcaa 	bl	8014a06 <memset>
 80180b2:	4628      	mov	r0, r5
 80180b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080180b8 <_free_r>:
 80180b8:	b538      	push	{r3, r4, r5, lr}
 80180ba:	4605      	mov	r5, r0
 80180bc:	2900      	cmp	r1, #0
 80180be:	d045      	beq.n	801814c <_free_r+0x94>
 80180c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180c4:	1f0c      	subs	r4, r1, #4
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	bfb8      	it	lt
 80180ca:	18e4      	addlt	r4, r4, r3
 80180cc:	f000 fe30 	bl	8018d30 <__malloc_lock>
 80180d0:	4a1f      	ldr	r2, [pc, #124]	; (8018150 <_free_r+0x98>)
 80180d2:	6813      	ldr	r3, [r2, #0]
 80180d4:	4610      	mov	r0, r2
 80180d6:	b933      	cbnz	r3, 80180e6 <_free_r+0x2e>
 80180d8:	6063      	str	r3, [r4, #4]
 80180da:	6014      	str	r4, [r2, #0]
 80180dc:	4628      	mov	r0, r5
 80180de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180e2:	f000 be26 	b.w	8018d32 <__malloc_unlock>
 80180e6:	42a3      	cmp	r3, r4
 80180e8:	d90c      	bls.n	8018104 <_free_r+0x4c>
 80180ea:	6821      	ldr	r1, [r4, #0]
 80180ec:	1862      	adds	r2, r4, r1
 80180ee:	4293      	cmp	r3, r2
 80180f0:	bf04      	itt	eq
 80180f2:	681a      	ldreq	r2, [r3, #0]
 80180f4:	685b      	ldreq	r3, [r3, #4]
 80180f6:	6063      	str	r3, [r4, #4]
 80180f8:	bf04      	itt	eq
 80180fa:	1852      	addeq	r2, r2, r1
 80180fc:	6022      	streq	r2, [r4, #0]
 80180fe:	6004      	str	r4, [r0, #0]
 8018100:	e7ec      	b.n	80180dc <_free_r+0x24>
 8018102:	4613      	mov	r3, r2
 8018104:	685a      	ldr	r2, [r3, #4]
 8018106:	b10a      	cbz	r2, 801810c <_free_r+0x54>
 8018108:	42a2      	cmp	r2, r4
 801810a:	d9fa      	bls.n	8018102 <_free_r+0x4a>
 801810c:	6819      	ldr	r1, [r3, #0]
 801810e:	1858      	adds	r0, r3, r1
 8018110:	42a0      	cmp	r0, r4
 8018112:	d10b      	bne.n	801812c <_free_r+0x74>
 8018114:	6820      	ldr	r0, [r4, #0]
 8018116:	4401      	add	r1, r0
 8018118:	1858      	adds	r0, r3, r1
 801811a:	4282      	cmp	r2, r0
 801811c:	6019      	str	r1, [r3, #0]
 801811e:	d1dd      	bne.n	80180dc <_free_r+0x24>
 8018120:	6810      	ldr	r0, [r2, #0]
 8018122:	6852      	ldr	r2, [r2, #4]
 8018124:	605a      	str	r2, [r3, #4]
 8018126:	4401      	add	r1, r0
 8018128:	6019      	str	r1, [r3, #0]
 801812a:	e7d7      	b.n	80180dc <_free_r+0x24>
 801812c:	d902      	bls.n	8018134 <_free_r+0x7c>
 801812e:	230c      	movs	r3, #12
 8018130:	602b      	str	r3, [r5, #0]
 8018132:	e7d3      	b.n	80180dc <_free_r+0x24>
 8018134:	6820      	ldr	r0, [r4, #0]
 8018136:	1821      	adds	r1, r4, r0
 8018138:	428a      	cmp	r2, r1
 801813a:	bf04      	itt	eq
 801813c:	6811      	ldreq	r1, [r2, #0]
 801813e:	6852      	ldreq	r2, [r2, #4]
 8018140:	6062      	str	r2, [r4, #4]
 8018142:	bf04      	itt	eq
 8018144:	1809      	addeq	r1, r1, r0
 8018146:	6021      	streq	r1, [r4, #0]
 8018148:	605c      	str	r4, [r3, #4]
 801814a:	e7c7      	b.n	80180dc <_free_r+0x24>
 801814c:	bd38      	pop	{r3, r4, r5, pc}
 801814e:	bf00      	nop
 8018150:	2003d470 	.word	0x2003d470

08018154 <_malloc_r>:
 8018154:	b570      	push	{r4, r5, r6, lr}
 8018156:	1ccd      	adds	r5, r1, #3
 8018158:	f025 0503 	bic.w	r5, r5, #3
 801815c:	3508      	adds	r5, #8
 801815e:	2d0c      	cmp	r5, #12
 8018160:	bf38      	it	cc
 8018162:	250c      	movcc	r5, #12
 8018164:	2d00      	cmp	r5, #0
 8018166:	4606      	mov	r6, r0
 8018168:	db01      	blt.n	801816e <_malloc_r+0x1a>
 801816a:	42a9      	cmp	r1, r5
 801816c:	d903      	bls.n	8018176 <_malloc_r+0x22>
 801816e:	230c      	movs	r3, #12
 8018170:	6033      	str	r3, [r6, #0]
 8018172:	2000      	movs	r0, #0
 8018174:	bd70      	pop	{r4, r5, r6, pc}
 8018176:	f000 fddb 	bl	8018d30 <__malloc_lock>
 801817a:	4a21      	ldr	r2, [pc, #132]	; (8018200 <_malloc_r+0xac>)
 801817c:	6814      	ldr	r4, [r2, #0]
 801817e:	4621      	mov	r1, r4
 8018180:	b991      	cbnz	r1, 80181a8 <_malloc_r+0x54>
 8018182:	4c20      	ldr	r4, [pc, #128]	; (8018204 <_malloc_r+0xb0>)
 8018184:	6823      	ldr	r3, [r4, #0]
 8018186:	b91b      	cbnz	r3, 8018190 <_malloc_r+0x3c>
 8018188:	4630      	mov	r0, r6
 801818a:	f000 fc91 	bl	8018ab0 <_sbrk_r>
 801818e:	6020      	str	r0, [r4, #0]
 8018190:	4629      	mov	r1, r5
 8018192:	4630      	mov	r0, r6
 8018194:	f000 fc8c 	bl	8018ab0 <_sbrk_r>
 8018198:	1c43      	adds	r3, r0, #1
 801819a:	d124      	bne.n	80181e6 <_malloc_r+0x92>
 801819c:	230c      	movs	r3, #12
 801819e:	6033      	str	r3, [r6, #0]
 80181a0:	4630      	mov	r0, r6
 80181a2:	f000 fdc6 	bl	8018d32 <__malloc_unlock>
 80181a6:	e7e4      	b.n	8018172 <_malloc_r+0x1e>
 80181a8:	680b      	ldr	r3, [r1, #0]
 80181aa:	1b5b      	subs	r3, r3, r5
 80181ac:	d418      	bmi.n	80181e0 <_malloc_r+0x8c>
 80181ae:	2b0b      	cmp	r3, #11
 80181b0:	d90f      	bls.n	80181d2 <_malloc_r+0x7e>
 80181b2:	600b      	str	r3, [r1, #0]
 80181b4:	50cd      	str	r5, [r1, r3]
 80181b6:	18cc      	adds	r4, r1, r3
 80181b8:	4630      	mov	r0, r6
 80181ba:	f000 fdba 	bl	8018d32 <__malloc_unlock>
 80181be:	f104 000b 	add.w	r0, r4, #11
 80181c2:	1d23      	adds	r3, r4, #4
 80181c4:	f020 0007 	bic.w	r0, r0, #7
 80181c8:	1ac3      	subs	r3, r0, r3
 80181ca:	d0d3      	beq.n	8018174 <_malloc_r+0x20>
 80181cc:	425a      	negs	r2, r3
 80181ce:	50e2      	str	r2, [r4, r3]
 80181d0:	e7d0      	b.n	8018174 <_malloc_r+0x20>
 80181d2:	428c      	cmp	r4, r1
 80181d4:	684b      	ldr	r3, [r1, #4]
 80181d6:	bf16      	itet	ne
 80181d8:	6063      	strne	r3, [r4, #4]
 80181da:	6013      	streq	r3, [r2, #0]
 80181dc:	460c      	movne	r4, r1
 80181de:	e7eb      	b.n	80181b8 <_malloc_r+0x64>
 80181e0:	460c      	mov	r4, r1
 80181e2:	6849      	ldr	r1, [r1, #4]
 80181e4:	e7cc      	b.n	8018180 <_malloc_r+0x2c>
 80181e6:	1cc4      	adds	r4, r0, #3
 80181e8:	f024 0403 	bic.w	r4, r4, #3
 80181ec:	42a0      	cmp	r0, r4
 80181ee:	d005      	beq.n	80181fc <_malloc_r+0xa8>
 80181f0:	1a21      	subs	r1, r4, r0
 80181f2:	4630      	mov	r0, r6
 80181f4:	f000 fc5c 	bl	8018ab0 <_sbrk_r>
 80181f8:	3001      	adds	r0, #1
 80181fa:	d0cf      	beq.n	801819c <_malloc_r+0x48>
 80181fc:	6025      	str	r5, [r4, #0]
 80181fe:	e7db      	b.n	80181b8 <_malloc_r+0x64>
 8018200:	2003d470 	.word	0x2003d470
 8018204:	2003d474 	.word	0x2003d474

08018208 <__ssputs_r>:
 8018208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801820c:	688e      	ldr	r6, [r1, #8]
 801820e:	429e      	cmp	r6, r3
 8018210:	4682      	mov	sl, r0
 8018212:	460c      	mov	r4, r1
 8018214:	4690      	mov	r8, r2
 8018216:	4699      	mov	r9, r3
 8018218:	d837      	bhi.n	801828a <__ssputs_r+0x82>
 801821a:	898a      	ldrh	r2, [r1, #12]
 801821c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018220:	d031      	beq.n	8018286 <__ssputs_r+0x7e>
 8018222:	6825      	ldr	r5, [r4, #0]
 8018224:	6909      	ldr	r1, [r1, #16]
 8018226:	1a6f      	subs	r7, r5, r1
 8018228:	6965      	ldr	r5, [r4, #20]
 801822a:	2302      	movs	r3, #2
 801822c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018230:	fb95 f5f3 	sdiv	r5, r5, r3
 8018234:	f109 0301 	add.w	r3, r9, #1
 8018238:	443b      	add	r3, r7
 801823a:	429d      	cmp	r5, r3
 801823c:	bf38      	it	cc
 801823e:	461d      	movcc	r5, r3
 8018240:	0553      	lsls	r3, r2, #21
 8018242:	d530      	bpl.n	80182a6 <__ssputs_r+0x9e>
 8018244:	4629      	mov	r1, r5
 8018246:	f7ff ff85 	bl	8018154 <_malloc_r>
 801824a:	4606      	mov	r6, r0
 801824c:	b950      	cbnz	r0, 8018264 <__ssputs_r+0x5c>
 801824e:	230c      	movs	r3, #12
 8018250:	f8ca 3000 	str.w	r3, [sl]
 8018254:	89a3      	ldrh	r3, [r4, #12]
 8018256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801825a:	81a3      	strh	r3, [r4, #12]
 801825c:	f04f 30ff 	mov.w	r0, #4294967295
 8018260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018264:	463a      	mov	r2, r7
 8018266:	6921      	ldr	r1, [r4, #16]
 8018268:	f7fc fbc2 	bl	80149f0 <memcpy>
 801826c:	89a3      	ldrh	r3, [r4, #12]
 801826e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018276:	81a3      	strh	r3, [r4, #12]
 8018278:	6126      	str	r6, [r4, #16]
 801827a:	6165      	str	r5, [r4, #20]
 801827c:	443e      	add	r6, r7
 801827e:	1bed      	subs	r5, r5, r7
 8018280:	6026      	str	r6, [r4, #0]
 8018282:	60a5      	str	r5, [r4, #8]
 8018284:	464e      	mov	r6, r9
 8018286:	454e      	cmp	r6, r9
 8018288:	d900      	bls.n	801828c <__ssputs_r+0x84>
 801828a:	464e      	mov	r6, r9
 801828c:	4632      	mov	r2, r6
 801828e:	4641      	mov	r1, r8
 8018290:	6820      	ldr	r0, [r4, #0]
 8018292:	f000 fd34 	bl	8018cfe <memmove>
 8018296:	68a3      	ldr	r3, [r4, #8]
 8018298:	1b9b      	subs	r3, r3, r6
 801829a:	60a3      	str	r3, [r4, #8]
 801829c:	6823      	ldr	r3, [r4, #0]
 801829e:	441e      	add	r6, r3
 80182a0:	6026      	str	r6, [r4, #0]
 80182a2:	2000      	movs	r0, #0
 80182a4:	e7dc      	b.n	8018260 <__ssputs_r+0x58>
 80182a6:	462a      	mov	r2, r5
 80182a8:	f000 fd44 	bl	8018d34 <_realloc_r>
 80182ac:	4606      	mov	r6, r0
 80182ae:	2800      	cmp	r0, #0
 80182b0:	d1e2      	bne.n	8018278 <__ssputs_r+0x70>
 80182b2:	6921      	ldr	r1, [r4, #16]
 80182b4:	4650      	mov	r0, sl
 80182b6:	f7ff feff 	bl	80180b8 <_free_r>
 80182ba:	e7c8      	b.n	801824e <__ssputs_r+0x46>

080182bc <_svfiprintf_r>:
 80182bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c0:	461d      	mov	r5, r3
 80182c2:	898b      	ldrh	r3, [r1, #12]
 80182c4:	061f      	lsls	r7, r3, #24
 80182c6:	b09d      	sub	sp, #116	; 0x74
 80182c8:	4680      	mov	r8, r0
 80182ca:	460c      	mov	r4, r1
 80182cc:	4616      	mov	r6, r2
 80182ce:	d50f      	bpl.n	80182f0 <_svfiprintf_r+0x34>
 80182d0:	690b      	ldr	r3, [r1, #16]
 80182d2:	b96b      	cbnz	r3, 80182f0 <_svfiprintf_r+0x34>
 80182d4:	2140      	movs	r1, #64	; 0x40
 80182d6:	f7ff ff3d 	bl	8018154 <_malloc_r>
 80182da:	6020      	str	r0, [r4, #0]
 80182dc:	6120      	str	r0, [r4, #16]
 80182de:	b928      	cbnz	r0, 80182ec <_svfiprintf_r+0x30>
 80182e0:	230c      	movs	r3, #12
 80182e2:	f8c8 3000 	str.w	r3, [r8]
 80182e6:	f04f 30ff 	mov.w	r0, #4294967295
 80182ea:	e0c8      	b.n	801847e <_svfiprintf_r+0x1c2>
 80182ec:	2340      	movs	r3, #64	; 0x40
 80182ee:	6163      	str	r3, [r4, #20]
 80182f0:	2300      	movs	r3, #0
 80182f2:	9309      	str	r3, [sp, #36]	; 0x24
 80182f4:	2320      	movs	r3, #32
 80182f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182fa:	2330      	movs	r3, #48	; 0x30
 80182fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018300:	9503      	str	r5, [sp, #12]
 8018302:	f04f 0b01 	mov.w	fp, #1
 8018306:	4637      	mov	r7, r6
 8018308:	463d      	mov	r5, r7
 801830a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801830e:	b10b      	cbz	r3, 8018314 <_svfiprintf_r+0x58>
 8018310:	2b25      	cmp	r3, #37	; 0x25
 8018312:	d13e      	bne.n	8018392 <_svfiprintf_r+0xd6>
 8018314:	ebb7 0a06 	subs.w	sl, r7, r6
 8018318:	d00b      	beq.n	8018332 <_svfiprintf_r+0x76>
 801831a:	4653      	mov	r3, sl
 801831c:	4632      	mov	r2, r6
 801831e:	4621      	mov	r1, r4
 8018320:	4640      	mov	r0, r8
 8018322:	f7ff ff71 	bl	8018208 <__ssputs_r>
 8018326:	3001      	adds	r0, #1
 8018328:	f000 80a4 	beq.w	8018474 <_svfiprintf_r+0x1b8>
 801832c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801832e:	4453      	add	r3, sl
 8018330:	9309      	str	r3, [sp, #36]	; 0x24
 8018332:	783b      	ldrb	r3, [r7, #0]
 8018334:	2b00      	cmp	r3, #0
 8018336:	f000 809d 	beq.w	8018474 <_svfiprintf_r+0x1b8>
 801833a:	2300      	movs	r3, #0
 801833c:	f04f 32ff 	mov.w	r2, #4294967295
 8018340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018344:	9304      	str	r3, [sp, #16]
 8018346:	9307      	str	r3, [sp, #28]
 8018348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801834c:	931a      	str	r3, [sp, #104]	; 0x68
 801834e:	462f      	mov	r7, r5
 8018350:	2205      	movs	r2, #5
 8018352:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018356:	4850      	ldr	r0, [pc, #320]	; (8018498 <_svfiprintf_r+0x1dc>)
 8018358:	f7e7 ff5a 	bl	8000210 <memchr>
 801835c:	9b04      	ldr	r3, [sp, #16]
 801835e:	b9d0      	cbnz	r0, 8018396 <_svfiprintf_r+0xda>
 8018360:	06d9      	lsls	r1, r3, #27
 8018362:	bf44      	itt	mi
 8018364:	2220      	movmi	r2, #32
 8018366:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801836a:	071a      	lsls	r2, r3, #28
 801836c:	bf44      	itt	mi
 801836e:	222b      	movmi	r2, #43	; 0x2b
 8018370:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018374:	782a      	ldrb	r2, [r5, #0]
 8018376:	2a2a      	cmp	r2, #42	; 0x2a
 8018378:	d015      	beq.n	80183a6 <_svfiprintf_r+0xea>
 801837a:	9a07      	ldr	r2, [sp, #28]
 801837c:	462f      	mov	r7, r5
 801837e:	2000      	movs	r0, #0
 8018380:	250a      	movs	r5, #10
 8018382:	4639      	mov	r1, r7
 8018384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018388:	3b30      	subs	r3, #48	; 0x30
 801838a:	2b09      	cmp	r3, #9
 801838c:	d94d      	bls.n	801842a <_svfiprintf_r+0x16e>
 801838e:	b1b8      	cbz	r0, 80183c0 <_svfiprintf_r+0x104>
 8018390:	e00f      	b.n	80183b2 <_svfiprintf_r+0xf6>
 8018392:	462f      	mov	r7, r5
 8018394:	e7b8      	b.n	8018308 <_svfiprintf_r+0x4c>
 8018396:	4a40      	ldr	r2, [pc, #256]	; (8018498 <_svfiprintf_r+0x1dc>)
 8018398:	1a80      	subs	r0, r0, r2
 801839a:	fa0b f000 	lsl.w	r0, fp, r0
 801839e:	4318      	orrs	r0, r3
 80183a0:	9004      	str	r0, [sp, #16]
 80183a2:	463d      	mov	r5, r7
 80183a4:	e7d3      	b.n	801834e <_svfiprintf_r+0x92>
 80183a6:	9a03      	ldr	r2, [sp, #12]
 80183a8:	1d11      	adds	r1, r2, #4
 80183aa:	6812      	ldr	r2, [r2, #0]
 80183ac:	9103      	str	r1, [sp, #12]
 80183ae:	2a00      	cmp	r2, #0
 80183b0:	db01      	blt.n	80183b6 <_svfiprintf_r+0xfa>
 80183b2:	9207      	str	r2, [sp, #28]
 80183b4:	e004      	b.n	80183c0 <_svfiprintf_r+0x104>
 80183b6:	4252      	negs	r2, r2
 80183b8:	f043 0302 	orr.w	r3, r3, #2
 80183bc:	9207      	str	r2, [sp, #28]
 80183be:	9304      	str	r3, [sp, #16]
 80183c0:	783b      	ldrb	r3, [r7, #0]
 80183c2:	2b2e      	cmp	r3, #46	; 0x2e
 80183c4:	d10c      	bne.n	80183e0 <_svfiprintf_r+0x124>
 80183c6:	787b      	ldrb	r3, [r7, #1]
 80183c8:	2b2a      	cmp	r3, #42	; 0x2a
 80183ca:	d133      	bne.n	8018434 <_svfiprintf_r+0x178>
 80183cc:	9b03      	ldr	r3, [sp, #12]
 80183ce:	1d1a      	adds	r2, r3, #4
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	9203      	str	r2, [sp, #12]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	bfb8      	it	lt
 80183d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80183dc:	3702      	adds	r7, #2
 80183de:	9305      	str	r3, [sp, #20]
 80183e0:	4d2e      	ldr	r5, [pc, #184]	; (801849c <_svfiprintf_r+0x1e0>)
 80183e2:	7839      	ldrb	r1, [r7, #0]
 80183e4:	2203      	movs	r2, #3
 80183e6:	4628      	mov	r0, r5
 80183e8:	f7e7 ff12 	bl	8000210 <memchr>
 80183ec:	b138      	cbz	r0, 80183fe <_svfiprintf_r+0x142>
 80183ee:	2340      	movs	r3, #64	; 0x40
 80183f0:	1b40      	subs	r0, r0, r5
 80183f2:	fa03 f000 	lsl.w	r0, r3, r0
 80183f6:	9b04      	ldr	r3, [sp, #16]
 80183f8:	4303      	orrs	r3, r0
 80183fa:	3701      	adds	r7, #1
 80183fc:	9304      	str	r3, [sp, #16]
 80183fe:	7839      	ldrb	r1, [r7, #0]
 8018400:	4827      	ldr	r0, [pc, #156]	; (80184a0 <_svfiprintf_r+0x1e4>)
 8018402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018406:	2206      	movs	r2, #6
 8018408:	1c7e      	adds	r6, r7, #1
 801840a:	f7e7 ff01 	bl	8000210 <memchr>
 801840e:	2800      	cmp	r0, #0
 8018410:	d038      	beq.n	8018484 <_svfiprintf_r+0x1c8>
 8018412:	4b24      	ldr	r3, [pc, #144]	; (80184a4 <_svfiprintf_r+0x1e8>)
 8018414:	bb13      	cbnz	r3, 801845c <_svfiprintf_r+0x1a0>
 8018416:	9b03      	ldr	r3, [sp, #12]
 8018418:	3307      	adds	r3, #7
 801841a:	f023 0307 	bic.w	r3, r3, #7
 801841e:	3308      	adds	r3, #8
 8018420:	9303      	str	r3, [sp, #12]
 8018422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018424:	444b      	add	r3, r9
 8018426:	9309      	str	r3, [sp, #36]	; 0x24
 8018428:	e76d      	b.n	8018306 <_svfiprintf_r+0x4a>
 801842a:	fb05 3202 	mla	r2, r5, r2, r3
 801842e:	2001      	movs	r0, #1
 8018430:	460f      	mov	r7, r1
 8018432:	e7a6      	b.n	8018382 <_svfiprintf_r+0xc6>
 8018434:	2300      	movs	r3, #0
 8018436:	3701      	adds	r7, #1
 8018438:	9305      	str	r3, [sp, #20]
 801843a:	4619      	mov	r1, r3
 801843c:	250a      	movs	r5, #10
 801843e:	4638      	mov	r0, r7
 8018440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018444:	3a30      	subs	r2, #48	; 0x30
 8018446:	2a09      	cmp	r2, #9
 8018448:	d903      	bls.n	8018452 <_svfiprintf_r+0x196>
 801844a:	2b00      	cmp	r3, #0
 801844c:	d0c8      	beq.n	80183e0 <_svfiprintf_r+0x124>
 801844e:	9105      	str	r1, [sp, #20]
 8018450:	e7c6      	b.n	80183e0 <_svfiprintf_r+0x124>
 8018452:	fb05 2101 	mla	r1, r5, r1, r2
 8018456:	2301      	movs	r3, #1
 8018458:	4607      	mov	r7, r0
 801845a:	e7f0      	b.n	801843e <_svfiprintf_r+0x182>
 801845c:	ab03      	add	r3, sp, #12
 801845e:	9300      	str	r3, [sp, #0]
 8018460:	4622      	mov	r2, r4
 8018462:	4b11      	ldr	r3, [pc, #68]	; (80184a8 <_svfiprintf_r+0x1ec>)
 8018464:	a904      	add	r1, sp, #16
 8018466:	4640      	mov	r0, r8
 8018468:	f7fc fb6a 	bl	8014b40 <_printf_float>
 801846c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018470:	4681      	mov	r9, r0
 8018472:	d1d6      	bne.n	8018422 <_svfiprintf_r+0x166>
 8018474:	89a3      	ldrh	r3, [r4, #12]
 8018476:	065b      	lsls	r3, r3, #25
 8018478:	f53f af35 	bmi.w	80182e6 <_svfiprintf_r+0x2a>
 801847c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801847e:	b01d      	add	sp, #116	; 0x74
 8018480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018484:	ab03      	add	r3, sp, #12
 8018486:	9300      	str	r3, [sp, #0]
 8018488:	4622      	mov	r2, r4
 801848a:	4b07      	ldr	r3, [pc, #28]	; (80184a8 <_svfiprintf_r+0x1ec>)
 801848c:	a904      	add	r1, sp, #16
 801848e:	4640      	mov	r0, r8
 8018490:	f7fc fe0c 	bl	80150ac <_printf_i>
 8018494:	e7ea      	b.n	801846c <_svfiprintf_r+0x1b0>
 8018496:	bf00      	nop
 8018498:	08019804 	.word	0x08019804
 801849c:	0801980a 	.word	0x0801980a
 80184a0:	0801980e 	.word	0x0801980e
 80184a4:	08014b41 	.word	0x08014b41
 80184a8:	08018209 	.word	0x08018209

080184ac <_sungetc_r>:
 80184ac:	b538      	push	{r3, r4, r5, lr}
 80184ae:	1c4b      	adds	r3, r1, #1
 80184b0:	4614      	mov	r4, r2
 80184b2:	d103      	bne.n	80184bc <_sungetc_r+0x10>
 80184b4:	f04f 35ff 	mov.w	r5, #4294967295
 80184b8:	4628      	mov	r0, r5
 80184ba:	bd38      	pop	{r3, r4, r5, pc}
 80184bc:	8993      	ldrh	r3, [r2, #12]
 80184be:	f023 0320 	bic.w	r3, r3, #32
 80184c2:	8193      	strh	r3, [r2, #12]
 80184c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184c6:	6852      	ldr	r2, [r2, #4]
 80184c8:	b2cd      	uxtb	r5, r1
 80184ca:	b18b      	cbz	r3, 80184f0 <_sungetc_r+0x44>
 80184cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80184ce:	4293      	cmp	r3, r2
 80184d0:	dd08      	ble.n	80184e4 <_sungetc_r+0x38>
 80184d2:	6823      	ldr	r3, [r4, #0]
 80184d4:	1e5a      	subs	r2, r3, #1
 80184d6:	6022      	str	r2, [r4, #0]
 80184d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80184dc:	6863      	ldr	r3, [r4, #4]
 80184de:	3301      	adds	r3, #1
 80184e0:	6063      	str	r3, [r4, #4]
 80184e2:	e7e9      	b.n	80184b8 <_sungetc_r+0xc>
 80184e4:	4621      	mov	r1, r4
 80184e6:	f000 fbc3 	bl	8018c70 <__submore>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d0f1      	beq.n	80184d2 <_sungetc_r+0x26>
 80184ee:	e7e1      	b.n	80184b4 <_sungetc_r+0x8>
 80184f0:	6921      	ldr	r1, [r4, #16]
 80184f2:	6823      	ldr	r3, [r4, #0]
 80184f4:	b151      	cbz	r1, 801850c <_sungetc_r+0x60>
 80184f6:	4299      	cmp	r1, r3
 80184f8:	d208      	bcs.n	801850c <_sungetc_r+0x60>
 80184fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80184fe:	42a9      	cmp	r1, r5
 8018500:	d104      	bne.n	801850c <_sungetc_r+0x60>
 8018502:	3b01      	subs	r3, #1
 8018504:	3201      	adds	r2, #1
 8018506:	6023      	str	r3, [r4, #0]
 8018508:	6062      	str	r2, [r4, #4]
 801850a:	e7d5      	b.n	80184b8 <_sungetc_r+0xc>
 801850c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018514:	6363      	str	r3, [r4, #52]	; 0x34
 8018516:	2303      	movs	r3, #3
 8018518:	63a3      	str	r3, [r4, #56]	; 0x38
 801851a:	4623      	mov	r3, r4
 801851c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018520:	6023      	str	r3, [r4, #0]
 8018522:	2301      	movs	r3, #1
 8018524:	e7dc      	b.n	80184e0 <_sungetc_r+0x34>

08018526 <__ssrefill_r>:
 8018526:	b510      	push	{r4, lr}
 8018528:	460c      	mov	r4, r1
 801852a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801852c:	b169      	cbz	r1, 801854a <__ssrefill_r+0x24>
 801852e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018532:	4299      	cmp	r1, r3
 8018534:	d001      	beq.n	801853a <__ssrefill_r+0x14>
 8018536:	f7ff fdbf 	bl	80180b8 <_free_r>
 801853a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801853c:	6063      	str	r3, [r4, #4]
 801853e:	2000      	movs	r0, #0
 8018540:	6360      	str	r0, [r4, #52]	; 0x34
 8018542:	b113      	cbz	r3, 801854a <__ssrefill_r+0x24>
 8018544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018546:	6023      	str	r3, [r4, #0]
 8018548:	bd10      	pop	{r4, pc}
 801854a:	6923      	ldr	r3, [r4, #16]
 801854c:	6023      	str	r3, [r4, #0]
 801854e:	2300      	movs	r3, #0
 8018550:	6063      	str	r3, [r4, #4]
 8018552:	89a3      	ldrh	r3, [r4, #12]
 8018554:	f043 0320 	orr.w	r3, r3, #32
 8018558:	81a3      	strh	r3, [r4, #12]
 801855a:	f04f 30ff 	mov.w	r0, #4294967295
 801855e:	e7f3      	b.n	8018548 <__ssrefill_r+0x22>

08018560 <__ssvfiscanf_r>:
 8018560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018564:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018568:	460c      	mov	r4, r1
 801856a:	2100      	movs	r1, #0
 801856c:	9144      	str	r1, [sp, #272]	; 0x110
 801856e:	9145      	str	r1, [sp, #276]	; 0x114
 8018570:	499f      	ldr	r1, [pc, #636]	; (80187f0 <__ssvfiscanf_r+0x290>)
 8018572:	91a0      	str	r1, [sp, #640]	; 0x280
 8018574:	f10d 0804 	add.w	r8, sp, #4
 8018578:	499e      	ldr	r1, [pc, #632]	; (80187f4 <__ssvfiscanf_r+0x294>)
 801857a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80187f8 <__ssvfiscanf_r+0x298>
 801857e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018582:	4606      	mov	r6, r0
 8018584:	4692      	mov	sl, r2
 8018586:	91a1      	str	r1, [sp, #644]	; 0x284
 8018588:	9300      	str	r3, [sp, #0]
 801858a:	270a      	movs	r7, #10
 801858c:	f89a 3000 	ldrb.w	r3, [sl]
 8018590:	2b00      	cmp	r3, #0
 8018592:	f000 812a 	beq.w	80187ea <__ssvfiscanf_r+0x28a>
 8018596:	4655      	mov	r5, sl
 8018598:	f7ff f948 	bl	801782c <__locale_ctype_ptr>
 801859c:	f815 bb01 	ldrb.w	fp, [r5], #1
 80185a0:	4458      	add	r0, fp
 80185a2:	7843      	ldrb	r3, [r0, #1]
 80185a4:	f013 0308 	ands.w	r3, r3, #8
 80185a8:	d01c      	beq.n	80185e4 <__ssvfiscanf_r+0x84>
 80185aa:	6863      	ldr	r3, [r4, #4]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	dd12      	ble.n	80185d6 <__ssvfiscanf_r+0x76>
 80185b0:	f7ff f93c 	bl	801782c <__locale_ctype_ptr>
 80185b4:	6823      	ldr	r3, [r4, #0]
 80185b6:	781a      	ldrb	r2, [r3, #0]
 80185b8:	4410      	add	r0, r2
 80185ba:	7842      	ldrb	r2, [r0, #1]
 80185bc:	0712      	lsls	r2, r2, #28
 80185be:	d401      	bmi.n	80185c4 <__ssvfiscanf_r+0x64>
 80185c0:	46aa      	mov	sl, r5
 80185c2:	e7e3      	b.n	801858c <__ssvfiscanf_r+0x2c>
 80185c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80185c6:	3201      	adds	r2, #1
 80185c8:	9245      	str	r2, [sp, #276]	; 0x114
 80185ca:	6862      	ldr	r2, [r4, #4]
 80185cc:	3301      	adds	r3, #1
 80185ce:	3a01      	subs	r2, #1
 80185d0:	6062      	str	r2, [r4, #4]
 80185d2:	6023      	str	r3, [r4, #0]
 80185d4:	e7e9      	b.n	80185aa <__ssvfiscanf_r+0x4a>
 80185d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80185d8:	4621      	mov	r1, r4
 80185da:	4630      	mov	r0, r6
 80185dc:	4798      	blx	r3
 80185de:	2800      	cmp	r0, #0
 80185e0:	d0e6      	beq.n	80185b0 <__ssvfiscanf_r+0x50>
 80185e2:	e7ed      	b.n	80185c0 <__ssvfiscanf_r+0x60>
 80185e4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80185e8:	f040 8082 	bne.w	80186f0 <__ssvfiscanf_r+0x190>
 80185ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80185ee:	9341      	str	r3, [sp, #260]	; 0x104
 80185f0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80185f4:	2b2a      	cmp	r3, #42	; 0x2a
 80185f6:	d103      	bne.n	8018600 <__ssvfiscanf_r+0xa0>
 80185f8:	2310      	movs	r3, #16
 80185fa:	9341      	str	r3, [sp, #260]	; 0x104
 80185fc:	f10a 0502 	add.w	r5, sl, #2
 8018600:	46aa      	mov	sl, r5
 8018602:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018606:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801860a:	2a09      	cmp	r2, #9
 801860c:	d922      	bls.n	8018654 <__ssvfiscanf_r+0xf4>
 801860e:	2203      	movs	r2, #3
 8018610:	4879      	ldr	r0, [pc, #484]	; (80187f8 <__ssvfiscanf_r+0x298>)
 8018612:	f7e7 fdfd 	bl	8000210 <memchr>
 8018616:	b138      	cbz	r0, 8018628 <__ssvfiscanf_r+0xc8>
 8018618:	eba0 0309 	sub.w	r3, r0, r9
 801861c:	2001      	movs	r0, #1
 801861e:	4098      	lsls	r0, r3
 8018620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018622:	4318      	orrs	r0, r3
 8018624:	9041      	str	r0, [sp, #260]	; 0x104
 8018626:	46aa      	mov	sl, r5
 8018628:	f89a 3000 	ldrb.w	r3, [sl]
 801862c:	2b67      	cmp	r3, #103	; 0x67
 801862e:	f10a 0501 	add.w	r5, sl, #1
 8018632:	d82b      	bhi.n	801868c <__ssvfiscanf_r+0x12c>
 8018634:	2b65      	cmp	r3, #101	; 0x65
 8018636:	f080 809f 	bcs.w	8018778 <__ssvfiscanf_r+0x218>
 801863a:	2b47      	cmp	r3, #71	; 0x47
 801863c:	d810      	bhi.n	8018660 <__ssvfiscanf_r+0x100>
 801863e:	2b45      	cmp	r3, #69	; 0x45
 8018640:	f080 809a 	bcs.w	8018778 <__ssvfiscanf_r+0x218>
 8018644:	2b00      	cmp	r3, #0
 8018646:	d06c      	beq.n	8018722 <__ssvfiscanf_r+0x1c2>
 8018648:	2b25      	cmp	r3, #37	; 0x25
 801864a:	d051      	beq.n	80186f0 <__ssvfiscanf_r+0x190>
 801864c:	2303      	movs	r3, #3
 801864e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018650:	9742      	str	r7, [sp, #264]	; 0x108
 8018652:	e027      	b.n	80186a4 <__ssvfiscanf_r+0x144>
 8018654:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018656:	fb07 1303 	mla	r3, r7, r3, r1
 801865a:	3b30      	subs	r3, #48	; 0x30
 801865c:	9343      	str	r3, [sp, #268]	; 0x10c
 801865e:	e7cf      	b.n	8018600 <__ssvfiscanf_r+0xa0>
 8018660:	2b5b      	cmp	r3, #91	; 0x5b
 8018662:	d06a      	beq.n	801873a <__ssvfiscanf_r+0x1da>
 8018664:	d80c      	bhi.n	8018680 <__ssvfiscanf_r+0x120>
 8018666:	2b58      	cmp	r3, #88	; 0x58
 8018668:	d1f0      	bne.n	801864c <__ssvfiscanf_r+0xec>
 801866a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801866c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018670:	9241      	str	r2, [sp, #260]	; 0x104
 8018672:	2210      	movs	r2, #16
 8018674:	9242      	str	r2, [sp, #264]	; 0x108
 8018676:	2b6e      	cmp	r3, #110	; 0x6e
 8018678:	bf8c      	ite	hi
 801867a:	2304      	movhi	r3, #4
 801867c:	2303      	movls	r3, #3
 801867e:	e010      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 8018680:	2b63      	cmp	r3, #99	; 0x63
 8018682:	d065      	beq.n	8018750 <__ssvfiscanf_r+0x1f0>
 8018684:	2b64      	cmp	r3, #100	; 0x64
 8018686:	d1e1      	bne.n	801864c <__ssvfiscanf_r+0xec>
 8018688:	9742      	str	r7, [sp, #264]	; 0x108
 801868a:	e7f4      	b.n	8018676 <__ssvfiscanf_r+0x116>
 801868c:	2b70      	cmp	r3, #112	; 0x70
 801868e:	d04b      	beq.n	8018728 <__ssvfiscanf_r+0x1c8>
 8018690:	d826      	bhi.n	80186e0 <__ssvfiscanf_r+0x180>
 8018692:	2b6e      	cmp	r3, #110	; 0x6e
 8018694:	d062      	beq.n	801875c <__ssvfiscanf_r+0x1fc>
 8018696:	d84c      	bhi.n	8018732 <__ssvfiscanf_r+0x1d2>
 8018698:	2b69      	cmp	r3, #105	; 0x69
 801869a:	d1d7      	bne.n	801864c <__ssvfiscanf_r+0xec>
 801869c:	2300      	movs	r3, #0
 801869e:	9342      	str	r3, [sp, #264]	; 0x108
 80186a0:	2303      	movs	r3, #3
 80186a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80186a4:	6863      	ldr	r3, [r4, #4]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	dd68      	ble.n	801877c <__ssvfiscanf_r+0x21c>
 80186aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186ac:	0659      	lsls	r1, r3, #25
 80186ae:	d407      	bmi.n	80186c0 <__ssvfiscanf_r+0x160>
 80186b0:	f7ff f8bc 	bl	801782c <__locale_ctype_ptr>
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	781a      	ldrb	r2, [r3, #0]
 80186b8:	4410      	add	r0, r2
 80186ba:	7842      	ldrb	r2, [r0, #1]
 80186bc:	0712      	lsls	r2, r2, #28
 80186be:	d464      	bmi.n	801878a <__ssvfiscanf_r+0x22a>
 80186c0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80186c2:	2b02      	cmp	r3, #2
 80186c4:	dc73      	bgt.n	80187ae <__ssvfiscanf_r+0x24e>
 80186c6:	466b      	mov	r3, sp
 80186c8:	4622      	mov	r2, r4
 80186ca:	a941      	add	r1, sp, #260	; 0x104
 80186cc:	4630      	mov	r0, r6
 80186ce:	f000 f897 	bl	8018800 <_scanf_chars>
 80186d2:	2801      	cmp	r0, #1
 80186d4:	f000 8089 	beq.w	80187ea <__ssvfiscanf_r+0x28a>
 80186d8:	2802      	cmp	r0, #2
 80186da:	f47f af71 	bne.w	80185c0 <__ssvfiscanf_r+0x60>
 80186de:	e01d      	b.n	801871c <__ssvfiscanf_r+0x1bc>
 80186e0:	2b75      	cmp	r3, #117	; 0x75
 80186e2:	d0d1      	beq.n	8018688 <__ssvfiscanf_r+0x128>
 80186e4:	2b78      	cmp	r3, #120	; 0x78
 80186e6:	d0c0      	beq.n	801866a <__ssvfiscanf_r+0x10a>
 80186e8:	2b73      	cmp	r3, #115	; 0x73
 80186ea:	d1af      	bne.n	801864c <__ssvfiscanf_r+0xec>
 80186ec:	2302      	movs	r3, #2
 80186ee:	e7d8      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 80186f0:	6863      	ldr	r3, [r4, #4]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	dd0c      	ble.n	8018710 <__ssvfiscanf_r+0x1b0>
 80186f6:	6823      	ldr	r3, [r4, #0]
 80186f8:	781a      	ldrb	r2, [r3, #0]
 80186fa:	455a      	cmp	r2, fp
 80186fc:	d175      	bne.n	80187ea <__ssvfiscanf_r+0x28a>
 80186fe:	3301      	adds	r3, #1
 8018700:	6862      	ldr	r2, [r4, #4]
 8018702:	6023      	str	r3, [r4, #0]
 8018704:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018706:	3a01      	subs	r2, #1
 8018708:	3301      	adds	r3, #1
 801870a:	6062      	str	r2, [r4, #4]
 801870c:	9345      	str	r3, [sp, #276]	; 0x114
 801870e:	e757      	b.n	80185c0 <__ssvfiscanf_r+0x60>
 8018710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018712:	4621      	mov	r1, r4
 8018714:	4630      	mov	r0, r6
 8018716:	4798      	blx	r3
 8018718:	2800      	cmp	r0, #0
 801871a:	d0ec      	beq.n	80186f6 <__ssvfiscanf_r+0x196>
 801871c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801871e:	2800      	cmp	r0, #0
 8018720:	d159      	bne.n	80187d6 <__ssvfiscanf_r+0x276>
 8018722:	f04f 30ff 	mov.w	r0, #4294967295
 8018726:	e05c      	b.n	80187e2 <__ssvfiscanf_r+0x282>
 8018728:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801872a:	f042 0220 	orr.w	r2, r2, #32
 801872e:	9241      	str	r2, [sp, #260]	; 0x104
 8018730:	e79b      	b.n	801866a <__ssvfiscanf_r+0x10a>
 8018732:	2308      	movs	r3, #8
 8018734:	9342      	str	r3, [sp, #264]	; 0x108
 8018736:	2304      	movs	r3, #4
 8018738:	e7b3      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 801873a:	4629      	mov	r1, r5
 801873c:	4640      	mov	r0, r8
 801873e:	f000 f9c7 	bl	8018ad0 <__sccl>
 8018742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018748:	9341      	str	r3, [sp, #260]	; 0x104
 801874a:	4605      	mov	r5, r0
 801874c:	2301      	movs	r3, #1
 801874e:	e7a8      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 8018750:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018756:	9341      	str	r3, [sp, #260]	; 0x104
 8018758:	2300      	movs	r3, #0
 801875a:	e7a2      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 801875c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801875e:	06c3      	lsls	r3, r0, #27
 8018760:	f53f af2e 	bmi.w	80185c0 <__ssvfiscanf_r+0x60>
 8018764:	9b00      	ldr	r3, [sp, #0]
 8018766:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018768:	1d19      	adds	r1, r3, #4
 801876a:	9100      	str	r1, [sp, #0]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	07c0      	lsls	r0, r0, #31
 8018770:	bf4c      	ite	mi
 8018772:	801a      	strhmi	r2, [r3, #0]
 8018774:	601a      	strpl	r2, [r3, #0]
 8018776:	e723      	b.n	80185c0 <__ssvfiscanf_r+0x60>
 8018778:	2305      	movs	r3, #5
 801877a:	e792      	b.n	80186a2 <__ssvfiscanf_r+0x142>
 801877c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801877e:	4621      	mov	r1, r4
 8018780:	4630      	mov	r0, r6
 8018782:	4798      	blx	r3
 8018784:	2800      	cmp	r0, #0
 8018786:	d090      	beq.n	80186aa <__ssvfiscanf_r+0x14a>
 8018788:	e7c8      	b.n	801871c <__ssvfiscanf_r+0x1bc>
 801878a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801878c:	3201      	adds	r2, #1
 801878e:	9245      	str	r2, [sp, #276]	; 0x114
 8018790:	6862      	ldr	r2, [r4, #4]
 8018792:	3a01      	subs	r2, #1
 8018794:	2a00      	cmp	r2, #0
 8018796:	6062      	str	r2, [r4, #4]
 8018798:	dd02      	ble.n	80187a0 <__ssvfiscanf_r+0x240>
 801879a:	3301      	adds	r3, #1
 801879c:	6023      	str	r3, [r4, #0]
 801879e:	e787      	b.n	80186b0 <__ssvfiscanf_r+0x150>
 80187a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80187a2:	4621      	mov	r1, r4
 80187a4:	4630      	mov	r0, r6
 80187a6:	4798      	blx	r3
 80187a8:	2800      	cmp	r0, #0
 80187aa:	d081      	beq.n	80186b0 <__ssvfiscanf_r+0x150>
 80187ac:	e7b6      	b.n	801871c <__ssvfiscanf_r+0x1bc>
 80187ae:	2b04      	cmp	r3, #4
 80187b0:	dc06      	bgt.n	80187c0 <__ssvfiscanf_r+0x260>
 80187b2:	466b      	mov	r3, sp
 80187b4:	4622      	mov	r2, r4
 80187b6:	a941      	add	r1, sp, #260	; 0x104
 80187b8:	4630      	mov	r0, r6
 80187ba:	f000 f885 	bl	80188c8 <_scanf_i>
 80187be:	e788      	b.n	80186d2 <__ssvfiscanf_r+0x172>
 80187c0:	4b0e      	ldr	r3, [pc, #56]	; (80187fc <__ssvfiscanf_r+0x29c>)
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f43f aefc 	beq.w	80185c0 <__ssvfiscanf_r+0x60>
 80187c8:	466b      	mov	r3, sp
 80187ca:	4622      	mov	r2, r4
 80187cc:	a941      	add	r1, sp, #260	; 0x104
 80187ce:	4630      	mov	r0, r6
 80187d0:	f7fc fd7e 	bl	80152d0 <_scanf_float>
 80187d4:	e77d      	b.n	80186d2 <__ssvfiscanf_r+0x172>
 80187d6:	89a3      	ldrh	r3, [r4, #12]
 80187d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80187dc:	bf18      	it	ne
 80187de:	f04f 30ff 	movne.w	r0, #4294967295
 80187e2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80187e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 80187ec:	e7f9      	b.n	80187e2 <__ssvfiscanf_r+0x282>
 80187ee:	bf00      	nop
 80187f0:	080184ad 	.word	0x080184ad
 80187f4:	08018527 	.word	0x08018527
 80187f8:	0801980a 	.word	0x0801980a
 80187fc:	080152d1 	.word	0x080152d1

08018800 <_scanf_chars>:
 8018800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018804:	4615      	mov	r5, r2
 8018806:	688a      	ldr	r2, [r1, #8]
 8018808:	4680      	mov	r8, r0
 801880a:	460c      	mov	r4, r1
 801880c:	b932      	cbnz	r2, 801881c <_scanf_chars+0x1c>
 801880e:	698a      	ldr	r2, [r1, #24]
 8018810:	2a00      	cmp	r2, #0
 8018812:	bf14      	ite	ne
 8018814:	f04f 32ff 	movne.w	r2, #4294967295
 8018818:	2201      	moveq	r2, #1
 801881a:	608a      	str	r2, [r1, #8]
 801881c:	6822      	ldr	r2, [r4, #0]
 801881e:	06d1      	lsls	r1, r2, #27
 8018820:	bf5f      	itttt	pl
 8018822:	681a      	ldrpl	r2, [r3, #0]
 8018824:	1d11      	addpl	r1, r2, #4
 8018826:	6019      	strpl	r1, [r3, #0]
 8018828:	6817      	ldrpl	r7, [r2, #0]
 801882a:	2600      	movs	r6, #0
 801882c:	69a3      	ldr	r3, [r4, #24]
 801882e:	b1db      	cbz	r3, 8018868 <_scanf_chars+0x68>
 8018830:	2b01      	cmp	r3, #1
 8018832:	d107      	bne.n	8018844 <_scanf_chars+0x44>
 8018834:	682b      	ldr	r3, [r5, #0]
 8018836:	6962      	ldr	r2, [r4, #20]
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	5cd3      	ldrb	r3, [r2, r3]
 801883c:	b9a3      	cbnz	r3, 8018868 <_scanf_chars+0x68>
 801883e:	2e00      	cmp	r6, #0
 8018840:	d132      	bne.n	80188a8 <_scanf_chars+0xa8>
 8018842:	e006      	b.n	8018852 <_scanf_chars+0x52>
 8018844:	2b02      	cmp	r3, #2
 8018846:	d007      	beq.n	8018858 <_scanf_chars+0x58>
 8018848:	2e00      	cmp	r6, #0
 801884a:	d12d      	bne.n	80188a8 <_scanf_chars+0xa8>
 801884c:	69a3      	ldr	r3, [r4, #24]
 801884e:	2b01      	cmp	r3, #1
 8018850:	d12a      	bne.n	80188a8 <_scanf_chars+0xa8>
 8018852:	2001      	movs	r0, #1
 8018854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018858:	f7fe ffe8 	bl	801782c <__locale_ctype_ptr>
 801885c:	682b      	ldr	r3, [r5, #0]
 801885e:	781b      	ldrb	r3, [r3, #0]
 8018860:	4418      	add	r0, r3
 8018862:	7843      	ldrb	r3, [r0, #1]
 8018864:	071b      	lsls	r3, r3, #28
 8018866:	d4ef      	bmi.n	8018848 <_scanf_chars+0x48>
 8018868:	6823      	ldr	r3, [r4, #0]
 801886a:	06da      	lsls	r2, r3, #27
 801886c:	bf5e      	ittt	pl
 801886e:	682b      	ldrpl	r3, [r5, #0]
 8018870:	781b      	ldrbpl	r3, [r3, #0]
 8018872:	703b      	strbpl	r3, [r7, #0]
 8018874:	682a      	ldr	r2, [r5, #0]
 8018876:	686b      	ldr	r3, [r5, #4]
 8018878:	f102 0201 	add.w	r2, r2, #1
 801887c:	602a      	str	r2, [r5, #0]
 801887e:	68a2      	ldr	r2, [r4, #8]
 8018880:	f103 33ff 	add.w	r3, r3, #4294967295
 8018884:	f102 32ff 	add.w	r2, r2, #4294967295
 8018888:	606b      	str	r3, [r5, #4]
 801888a:	f106 0601 	add.w	r6, r6, #1
 801888e:	bf58      	it	pl
 8018890:	3701      	addpl	r7, #1
 8018892:	60a2      	str	r2, [r4, #8]
 8018894:	b142      	cbz	r2, 80188a8 <_scanf_chars+0xa8>
 8018896:	2b00      	cmp	r3, #0
 8018898:	dcc8      	bgt.n	801882c <_scanf_chars+0x2c>
 801889a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801889e:	4629      	mov	r1, r5
 80188a0:	4640      	mov	r0, r8
 80188a2:	4798      	blx	r3
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d0c1      	beq.n	801882c <_scanf_chars+0x2c>
 80188a8:	6823      	ldr	r3, [r4, #0]
 80188aa:	f013 0310 	ands.w	r3, r3, #16
 80188ae:	d105      	bne.n	80188bc <_scanf_chars+0xbc>
 80188b0:	68e2      	ldr	r2, [r4, #12]
 80188b2:	3201      	adds	r2, #1
 80188b4:	60e2      	str	r2, [r4, #12]
 80188b6:	69a2      	ldr	r2, [r4, #24]
 80188b8:	b102      	cbz	r2, 80188bc <_scanf_chars+0xbc>
 80188ba:	703b      	strb	r3, [r7, #0]
 80188bc:	6923      	ldr	r3, [r4, #16]
 80188be:	441e      	add	r6, r3
 80188c0:	6126      	str	r6, [r4, #16]
 80188c2:	2000      	movs	r0, #0
 80188c4:	e7c6      	b.n	8018854 <_scanf_chars+0x54>
	...

080188c8 <_scanf_i>:
 80188c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188cc:	469a      	mov	sl, r3
 80188ce:	4b74      	ldr	r3, [pc, #464]	; (8018aa0 <_scanf_i+0x1d8>)
 80188d0:	460c      	mov	r4, r1
 80188d2:	4683      	mov	fp, r0
 80188d4:	4616      	mov	r6, r2
 80188d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80188da:	b087      	sub	sp, #28
 80188dc:	ab03      	add	r3, sp, #12
 80188de:	68a7      	ldr	r7, [r4, #8]
 80188e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80188e4:	4b6f      	ldr	r3, [pc, #444]	; (8018aa4 <_scanf_i+0x1dc>)
 80188e6:	69a1      	ldr	r1, [r4, #24]
 80188e8:	4a6f      	ldr	r2, [pc, #444]	; (8018aa8 <_scanf_i+0x1e0>)
 80188ea:	2903      	cmp	r1, #3
 80188ec:	bf08      	it	eq
 80188ee:	461a      	moveq	r2, r3
 80188f0:	1e7b      	subs	r3, r7, #1
 80188f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80188f6:	bf84      	itt	hi
 80188f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80188fc:	60a3      	strhi	r3, [r4, #8]
 80188fe:	6823      	ldr	r3, [r4, #0]
 8018900:	9200      	str	r2, [sp, #0]
 8018902:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018906:	bf88      	it	hi
 8018908:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801890c:	f104 091c 	add.w	r9, r4, #28
 8018910:	6023      	str	r3, [r4, #0]
 8018912:	bf8c      	ite	hi
 8018914:	197f      	addhi	r7, r7, r5
 8018916:	2700      	movls	r7, #0
 8018918:	464b      	mov	r3, r9
 801891a:	f04f 0800 	mov.w	r8, #0
 801891e:	9301      	str	r3, [sp, #4]
 8018920:	6831      	ldr	r1, [r6, #0]
 8018922:	ab03      	add	r3, sp, #12
 8018924:	2202      	movs	r2, #2
 8018926:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801892a:	7809      	ldrb	r1, [r1, #0]
 801892c:	f7e7 fc70 	bl	8000210 <memchr>
 8018930:	9b01      	ldr	r3, [sp, #4]
 8018932:	b330      	cbz	r0, 8018982 <_scanf_i+0xba>
 8018934:	f1b8 0f01 	cmp.w	r8, #1
 8018938:	d15a      	bne.n	80189f0 <_scanf_i+0x128>
 801893a:	6862      	ldr	r2, [r4, #4]
 801893c:	b92a      	cbnz	r2, 801894a <_scanf_i+0x82>
 801893e:	6822      	ldr	r2, [r4, #0]
 8018940:	2108      	movs	r1, #8
 8018942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018946:	6061      	str	r1, [r4, #4]
 8018948:	6022      	str	r2, [r4, #0]
 801894a:	6822      	ldr	r2, [r4, #0]
 801894c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018950:	6022      	str	r2, [r4, #0]
 8018952:	68a2      	ldr	r2, [r4, #8]
 8018954:	1e51      	subs	r1, r2, #1
 8018956:	60a1      	str	r1, [r4, #8]
 8018958:	b19a      	cbz	r2, 8018982 <_scanf_i+0xba>
 801895a:	6832      	ldr	r2, [r6, #0]
 801895c:	1c51      	adds	r1, r2, #1
 801895e:	6031      	str	r1, [r6, #0]
 8018960:	7812      	ldrb	r2, [r2, #0]
 8018962:	701a      	strb	r2, [r3, #0]
 8018964:	1c5d      	adds	r5, r3, #1
 8018966:	6873      	ldr	r3, [r6, #4]
 8018968:	3b01      	subs	r3, #1
 801896a:	2b00      	cmp	r3, #0
 801896c:	6073      	str	r3, [r6, #4]
 801896e:	dc07      	bgt.n	8018980 <_scanf_i+0xb8>
 8018970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018974:	4631      	mov	r1, r6
 8018976:	4658      	mov	r0, fp
 8018978:	4798      	blx	r3
 801897a:	2800      	cmp	r0, #0
 801897c:	f040 8086 	bne.w	8018a8c <_scanf_i+0x1c4>
 8018980:	462b      	mov	r3, r5
 8018982:	f108 0801 	add.w	r8, r8, #1
 8018986:	f1b8 0f03 	cmp.w	r8, #3
 801898a:	d1c8      	bne.n	801891e <_scanf_i+0x56>
 801898c:	6862      	ldr	r2, [r4, #4]
 801898e:	b90a      	cbnz	r2, 8018994 <_scanf_i+0xcc>
 8018990:	220a      	movs	r2, #10
 8018992:	6062      	str	r2, [r4, #4]
 8018994:	6862      	ldr	r2, [r4, #4]
 8018996:	4945      	ldr	r1, [pc, #276]	; (8018aac <_scanf_i+0x1e4>)
 8018998:	6960      	ldr	r0, [r4, #20]
 801899a:	9301      	str	r3, [sp, #4]
 801899c:	1a89      	subs	r1, r1, r2
 801899e:	f000 f897 	bl	8018ad0 <__sccl>
 80189a2:	9b01      	ldr	r3, [sp, #4]
 80189a4:	f04f 0800 	mov.w	r8, #0
 80189a8:	461d      	mov	r5, r3
 80189aa:	68a3      	ldr	r3, [r4, #8]
 80189ac:	6822      	ldr	r2, [r4, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d03a      	beq.n	8018a28 <_scanf_i+0x160>
 80189b2:	6831      	ldr	r1, [r6, #0]
 80189b4:	6960      	ldr	r0, [r4, #20]
 80189b6:	f891 c000 	ldrb.w	ip, [r1]
 80189ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80189be:	2800      	cmp	r0, #0
 80189c0:	d032      	beq.n	8018a28 <_scanf_i+0x160>
 80189c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80189c6:	d121      	bne.n	8018a0c <_scanf_i+0x144>
 80189c8:	0510      	lsls	r0, r2, #20
 80189ca:	d51f      	bpl.n	8018a0c <_scanf_i+0x144>
 80189cc:	f108 0801 	add.w	r8, r8, #1
 80189d0:	b117      	cbz	r7, 80189d8 <_scanf_i+0x110>
 80189d2:	3301      	adds	r3, #1
 80189d4:	3f01      	subs	r7, #1
 80189d6:	60a3      	str	r3, [r4, #8]
 80189d8:	6873      	ldr	r3, [r6, #4]
 80189da:	3b01      	subs	r3, #1
 80189dc:	2b00      	cmp	r3, #0
 80189de:	6073      	str	r3, [r6, #4]
 80189e0:	dd1b      	ble.n	8018a1a <_scanf_i+0x152>
 80189e2:	6833      	ldr	r3, [r6, #0]
 80189e4:	3301      	adds	r3, #1
 80189e6:	6033      	str	r3, [r6, #0]
 80189e8:	68a3      	ldr	r3, [r4, #8]
 80189ea:	3b01      	subs	r3, #1
 80189ec:	60a3      	str	r3, [r4, #8]
 80189ee:	e7dc      	b.n	80189aa <_scanf_i+0xe2>
 80189f0:	f1b8 0f02 	cmp.w	r8, #2
 80189f4:	d1ad      	bne.n	8018952 <_scanf_i+0x8a>
 80189f6:	6822      	ldr	r2, [r4, #0]
 80189f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80189fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018a00:	d1bf      	bne.n	8018982 <_scanf_i+0xba>
 8018a02:	2110      	movs	r1, #16
 8018a04:	6061      	str	r1, [r4, #4]
 8018a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018a0a:	e7a1      	b.n	8018950 <_scanf_i+0x88>
 8018a0c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018a10:	6022      	str	r2, [r4, #0]
 8018a12:	780b      	ldrb	r3, [r1, #0]
 8018a14:	702b      	strb	r3, [r5, #0]
 8018a16:	3501      	adds	r5, #1
 8018a18:	e7de      	b.n	80189d8 <_scanf_i+0x110>
 8018a1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018a1e:	4631      	mov	r1, r6
 8018a20:	4658      	mov	r0, fp
 8018a22:	4798      	blx	r3
 8018a24:	2800      	cmp	r0, #0
 8018a26:	d0df      	beq.n	80189e8 <_scanf_i+0x120>
 8018a28:	6823      	ldr	r3, [r4, #0]
 8018a2a:	05d9      	lsls	r1, r3, #23
 8018a2c:	d50c      	bpl.n	8018a48 <_scanf_i+0x180>
 8018a2e:	454d      	cmp	r5, r9
 8018a30:	d908      	bls.n	8018a44 <_scanf_i+0x17c>
 8018a32:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a3a:	4632      	mov	r2, r6
 8018a3c:	4658      	mov	r0, fp
 8018a3e:	4798      	blx	r3
 8018a40:	1e6f      	subs	r7, r5, #1
 8018a42:	463d      	mov	r5, r7
 8018a44:	454d      	cmp	r5, r9
 8018a46:	d029      	beq.n	8018a9c <_scanf_i+0x1d4>
 8018a48:	6822      	ldr	r2, [r4, #0]
 8018a4a:	f012 0210 	ands.w	r2, r2, #16
 8018a4e:	d113      	bne.n	8018a78 <_scanf_i+0x1b0>
 8018a50:	702a      	strb	r2, [r5, #0]
 8018a52:	6863      	ldr	r3, [r4, #4]
 8018a54:	9e00      	ldr	r6, [sp, #0]
 8018a56:	4649      	mov	r1, r9
 8018a58:	4658      	mov	r0, fp
 8018a5a:	47b0      	blx	r6
 8018a5c:	f8da 3000 	ldr.w	r3, [sl]
 8018a60:	6821      	ldr	r1, [r4, #0]
 8018a62:	1d1a      	adds	r2, r3, #4
 8018a64:	f8ca 2000 	str.w	r2, [sl]
 8018a68:	f011 0f20 	tst.w	r1, #32
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	d010      	beq.n	8018a92 <_scanf_i+0x1ca>
 8018a70:	6018      	str	r0, [r3, #0]
 8018a72:	68e3      	ldr	r3, [r4, #12]
 8018a74:	3301      	adds	r3, #1
 8018a76:	60e3      	str	r3, [r4, #12]
 8018a78:	eba5 0509 	sub.w	r5, r5, r9
 8018a7c:	44a8      	add	r8, r5
 8018a7e:	6925      	ldr	r5, [r4, #16]
 8018a80:	4445      	add	r5, r8
 8018a82:	6125      	str	r5, [r4, #16]
 8018a84:	2000      	movs	r0, #0
 8018a86:	b007      	add	sp, #28
 8018a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a8c:	f04f 0800 	mov.w	r8, #0
 8018a90:	e7ca      	b.n	8018a28 <_scanf_i+0x160>
 8018a92:	07ca      	lsls	r2, r1, #31
 8018a94:	bf4c      	ite	mi
 8018a96:	8018      	strhmi	r0, [r3, #0]
 8018a98:	6018      	strpl	r0, [r3, #0]
 8018a9a:	e7ea      	b.n	8018a72 <_scanf_i+0x1aa>
 8018a9c:	2001      	movs	r0, #1
 8018a9e:	e7f2      	b.n	8018a86 <_scanf_i+0x1be>
 8018aa0:	08019368 	.word	0x08019368
 8018aa4:	080164e9 	.word	0x080164e9
 8018aa8:	08018c4d 	.word	0x08018c4d
 8018aac:	08019825 	.word	0x08019825

08018ab0 <_sbrk_r>:
 8018ab0:	b538      	push	{r3, r4, r5, lr}
 8018ab2:	4c06      	ldr	r4, [pc, #24]	; (8018acc <_sbrk_r+0x1c>)
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	4605      	mov	r5, r0
 8018ab8:	4608      	mov	r0, r1
 8018aba:	6023      	str	r3, [r4, #0]
 8018abc:	f7ee fbe0 	bl	8007280 <_sbrk>
 8018ac0:	1c43      	adds	r3, r0, #1
 8018ac2:	d102      	bne.n	8018aca <_sbrk_r+0x1a>
 8018ac4:	6823      	ldr	r3, [r4, #0]
 8018ac6:	b103      	cbz	r3, 8018aca <_sbrk_r+0x1a>
 8018ac8:	602b      	str	r3, [r5, #0]
 8018aca:	bd38      	pop	{r3, r4, r5, pc}
 8018acc:	20041e0c 	.word	0x20041e0c

08018ad0 <__sccl>:
 8018ad0:	b570      	push	{r4, r5, r6, lr}
 8018ad2:	780b      	ldrb	r3, [r1, #0]
 8018ad4:	2b5e      	cmp	r3, #94	; 0x5e
 8018ad6:	bf13      	iteet	ne
 8018ad8:	1c4a      	addne	r2, r1, #1
 8018ada:	1c8a      	addeq	r2, r1, #2
 8018adc:	784b      	ldrbeq	r3, [r1, #1]
 8018ade:	2100      	movne	r1, #0
 8018ae0:	bf08      	it	eq
 8018ae2:	2101      	moveq	r1, #1
 8018ae4:	1e44      	subs	r4, r0, #1
 8018ae6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018aea:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018aee:	42ac      	cmp	r4, r5
 8018af0:	d1fb      	bne.n	8018aea <__sccl+0x1a>
 8018af2:	b913      	cbnz	r3, 8018afa <__sccl+0x2a>
 8018af4:	3a01      	subs	r2, #1
 8018af6:	4610      	mov	r0, r2
 8018af8:	bd70      	pop	{r4, r5, r6, pc}
 8018afa:	f081 0401 	eor.w	r4, r1, #1
 8018afe:	54c4      	strb	r4, [r0, r3]
 8018b00:	1c51      	adds	r1, r2, #1
 8018b02:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018b06:	2d2d      	cmp	r5, #45	; 0x2d
 8018b08:	f101 36ff 	add.w	r6, r1, #4294967295
 8018b0c:	460a      	mov	r2, r1
 8018b0e:	d006      	beq.n	8018b1e <__sccl+0x4e>
 8018b10:	2d5d      	cmp	r5, #93	; 0x5d
 8018b12:	d0f0      	beq.n	8018af6 <__sccl+0x26>
 8018b14:	b90d      	cbnz	r5, 8018b1a <__sccl+0x4a>
 8018b16:	4632      	mov	r2, r6
 8018b18:	e7ed      	b.n	8018af6 <__sccl+0x26>
 8018b1a:	462b      	mov	r3, r5
 8018b1c:	e7ef      	b.n	8018afe <__sccl+0x2e>
 8018b1e:	780e      	ldrb	r6, [r1, #0]
 8018b20:	2e5d      	cmp	r6, #93	; 0x5d
 8018b22:	d0fa      	beq.n	8018b1a <__sccl+0x4a>
 8018b24:	42b3      	cmp	r3, r6
 8018b26:	dcf8      	bgt.n	8018b1a <__sccl+0x4a>
 8018b28:	3301      	adds	r3, #1
 8018b2a:	429e      	cmp	r6, r3
 8018b2c:	54c4      	strb	r4, [r0, r3]
 8018b2e:	dcfb      	bgt.n	8018b28 <__sccl+0x58>
 8018b30:	3102      	adds	r1, #2
 8018b32:	e7e6      	b.n	8018b02 <__sccl+0x32>

08018b34 <strncmp>:
 8018b34:	b510      	push	{r4, lr}
 8018b36:	b16a      	cbz	r2, 8018b54 <strncmp+0x20>
 8018b38:	3901      	subs	r1, #1
 8018b3a:	1884      	adds	r4, r0, r2
 8018b3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018b40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d103      	bne.n	8018b50 <strncmp+0x1c>
 8018b48:	42a0      	cmp	r0, r4
 8018b4a:	d001      	beq.n	8018b50 <strncmp+0x1c>
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d1f5      	bne.n	8018b3c <strncmp+0x8>
 8018b50:	1a98      	subs	r0, r3, r2
 8018b52:	bd10      	pop	{r4, pc}
 8018b54:	4610      	mov	r0, r2
 8018b56:	e7fc      	b.n	8018b52 <strncmp+0x1e>

08018b58 <_strtoul_l.isra.0>:
 8018b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b5c:	4680      	mov	r8, r0
 8018b5e:	4689      	mov	r9, r1
 8018b60:	4692      	mov	sl, r2
 8018b62:	461e      	mov	r6, r3
 8018b64:	460f      	mov	r7, r1
 8018b66:	463d      	mov	r5, r7
 8018b68:	9808      	ldr	r0, [sp, #32]
 8018b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b6e:	f7fe fe59 	bl	8017824 <__locale_ctype_ptr_l>
 8018b72:	4420      	add	r0, r4
 8018b74:	7843      	ldrb	r3, [r0, #1]
 8018b76:	f013 0308 	ands.w	r3, r3, #8
 8018b7a:	d130      	bne.n	8018bde <_strtoul_l.isra.0+0x86>
 8018b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8018b7e:	d130      	bne.n	8018be2 <_strtoul_l.isra.0+0x8a>
 8018b80:	787c      	ldrb	r4, [r7, #1]
 8018b82:	1cbd      	adds	r5, r7, #2
 8018b84:	2101      	movs	r1, #1
 8018b86:	2e00      	cmp	r6, #0
 8018b88:	d05c      	beq.n	8018c44 <_strtoul_l.isra.0+0xec>
 8018b8a:	2e10      	cmp	r6, #16
 8018b8c:	d109      	bne.n	8018ba2 <_strtoul_l.isra.0+0x4a>
 8018b8e:	2c30      	cmp	r4, #48	; 0x30
 8018b90:	d107      	bne.n	8018ba2 <_strtoul_l.isra.0+0x4a>
 8018b92:	782b      	ldrb	r3, [r5, #0]
 8018b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b98:	2b58      	cmp	r3, #88	; 0x58
 8018b9a:	d14e      	bne.n	8018c3a <_strtoul_l.isra.0+0xe2>
 8018b9c:	786c      	ldrb	r4, [r5, #1]
 8018b9e:	2610      	movs	r6, #16
 8018ba0:	3502      	adds	r5, #2
 8018ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	fbb2 f2f6 	udiv	r2, r2, r6
 8018bac:	fb06 fc02 	mul.w	ip, r6, r2
 8018bb0:	ea6f 0c0c 	mvn.w	ip, ip
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018bba:	2f09      	cmp	r7, #9
 8018bbc:	d817      	bhi.n	8018bee <_strtoul_l.isra.0+0x96>
 8018bbe:	463c      	mov	r4, r7
 8018bc0:	42a6      	cmp	r6, r4
 8018bc2:	dd23      	ble.n	8018c0c <_strtoul_l.isra.0+0xb4>
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	db1e      	blt.n	8018c06 <_strtoul_l.isra.0+0xae>
 8018bc8:	4282      	cmp	r2, r0
 8018bca:	d31c      	bcc.n	8018c06 <_strtoul_l.isra.0+0xae>
 8018bcc:	d101      	bne.n	8018bd2 <_strtoul_l.isra.0+0x7a>
 8018bce:	45a4      	cmp	ip, r4
 8018bd0:	db19      	blt.n	8018c06 <_strtoul_l.isra.0+0xae>
 8018bd2:	fb00 4006 	mla	r0, r0, r6, r4
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018bdc:	e7eb      	b.n	8018bb6 <_strtoul_l.isra.0+0x5e>
 8018bde:	462f      	mov	r7, r5
 8018be0:	e7c1      	b.n	8018b66 <_strtoul_l.isra.0+0xe>
 8018be2:	2c2b      	cmp	r4, #43	; 0x2b
 8018be4:	bf04      	itt	eq
 8018be6:	1cbd      	addeq	r5, r7, #2
 8018be8:	787c      	ldrbeq	r4, [r7, #1]
 8018bea:	4619      	mov	r1, r3
 8018bec:	e7cb      	b.n	8018b86 <_strtoul_l.isra.0+0x2e>
 8018bee:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018bf2:	2f19      	cmp	r7, #25
 8018bf4:	d801      	bhi.n	8018bfa <_strtoul_l.isra.0+0xa2>
 8018bf6:	3c37      	subs	r4, #55	; 0x37
 8018bf8:	e7e2      	b.n	8018bc0 <_strtoul_l.isra.0+0x68>
 8018bfa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018bfe:	2f19      	cmp	r7, #25
 8018c00:	d804      	bhi.n	8018c0c <_strtoul_l.isra.0+0xb4>
 8018c02:	3c57      	subs	r4, #87	; 0x57
 8018c04:	e7dc      	b.n	8018bc0 <_strtoul_l.isra.0+0x68>
 8018c06:	f04f 33ff 	mov.w	r3, #4294967295
 8018c0a:	e7e5      	b.n	8018bd8 <_strtoul_l.isra.0+0x80>
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	da09      	bge.n	8018c24 <_strtoul_l.isra.0+0xcc>
 8018c10:	2322      	movs	r3, #34	; 0x22
 8018c12:	f8c8 3000 	str.w	r3, [r8]
 8018c16:	f04f 30ff 	mov.w	r0, #4294967295
 8018c1a:	f1ba 0f00 	cmp.w	sl, #0
 8018c1e:	d107      	bne.n	8018c30 <_strtoul_l.isra.0+0xd8>
 8018c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c24:	b101      	cbz	r1, 8018c28 <_strtoul_l.isra.0+0xd0>
 8018c26:	4240      	negs	r0, r0
 8018c28:	f1ba 0f00 	cmp.w	sl, #0
 8018c2c:	d0f8      	beq.n	8018c20 <_strtoul_l.isra.0+0xc8>
 8018c2e:	b10b      	cbz	r3, 8018c34 <_strtoul_l.isra.0+0xdc>
 8018c30:	f105 39ff 	add.w	r9, r5, #4294967295
 8018c34:	f8ca 9000 	str.w	r9, [sl]
 8018c38:	e7f2      	b.n	8018c20 <_strtoul_l.isra.0+0xc8>
 8018c3a:	2430      	movs	r4, #48	; 0x30
 8018c3c:	2e00      	cmp	r6, #0
 8018c3e:	d1b0      	bne.n	8018ba2 <_strtoul_l.isra.0+0x4a>
 8018c40:	2608      	movs	r6, #8
 8018c42:	e7ae      	b.n	8018ba2 <_strtoul_l.isra.0+0x4a>
 8018c44:	2c30      	cmp	r4, #48	; 0x30
 8018c46:	d0a4      	beq.n	8018b92 <_strtoul_l.isra.0+0x3a>
 8018c48:	260a      	movs	r6, #10
 8018c4a:	e7aa      	b.n	8018ba2 <_strtoul_l.isra.0+0x4a>

08018c4c <_strtoul_r>:
 8018c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c4e:	4c06      	ldr	r4, [pc, #24]	; (8018c68 <_strtoul_r+0x1c>)
 8018c50:	4d06      	ldr	r5, [pc, #24]	; (8018c6c <_strtoul_r+0x20>)
 8018c52:	6824      	ldr	r4, [r4, #0]
 8018c54:	6a24      	ldr	r4, [r4, #32]
 8018c56:	2c00      	cmp	r4, #0
 8018c58:	bf08      	it	eq
 8018c5a:	462c      	moveq	r4, r5
 8018c5c:	9400      	str	r4, [sp, #0]
 8018c5e:	f7ff ff7b 	bl	8018b58 <_strtoul_l.isra.0>
 8018c62:	b003      	add	sp, #12
 8018c64:	bd30      	pop	{r4, r5, pc}
 8018c66:	bf00      	nop
 8018c68:	2000000c 	.word	0x2000000c
 8018c6c:	20000070 	.word	0x20000070

08018c70 <__submore>:
 8018c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c74:	460c      	mov	r4, r1
 8018c76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c7c:	4299      	cmp	r1, r3
 8018c7e:	d11d      	bne.n	8018cbc <__submore+0x4c>
 8018c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018c84:	f7ff fa66 	bl	8018154 <_malloc_r>
 8018c88:	b918      	cbnz	r0, 8018c92 <__submore+0x22>
 8018c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c96:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8018c9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018ca2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018ca6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018caa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018cae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018cb2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018cb6:	6020      	str	r0, [r4, #0]
 8018cb8:	2000      	movs	r0, #0
 8018cba:	e7e8      	b.n	8018c8e <__submore+0x1e>
 8018cbc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018cbe:	0077      	lsls	r7, r6, #1
 8018cc0:	463a      	mov	r2, r7
 8018cc2:	f000 f837 	bl	8018d34 <_realloc_r>
 8018cc6:	4605      	mov	r5, r0
 8018cc8:	2800      	cmp	r0, #0
 8018cca:	d0de      	beq.n	8018c8a <__submore+0x1a>
 8018ccc:	eb00 0806 	add.w	r8, r0, r6
 8018cd0:	4601      	mov	r1, r0
 8018cd2:	4632      	mov	r2, r6
 8018cd4:	4640      	mov	r0, r8
 8018cd6:	f7fb fe8b 	bl	80149f0 <memcpy>
 8018cda:	f8c4 8000 	str.w	r8, [r4]
 8018cde:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018ce2:	e7e9      	b.n	8018cb8 <__submore+0x48>

08018ce4 <__ascii_wctomb>:
 8018ce4:	b149      	cbz	r1, 8018cfa <__ascii_wctomb+0x16>
 8018ce6:	2aff      	cmp	r2, #255	; 0xff
 8018ce8:	bf85      	ittet	hi
 8018cea:	238a      	movhi	r3, #138	; 0x8a
 8018cec:	6003      	strhi	r3, [r0, #0]
 8018cee:	700a      	strbls	r2, [r1, #0]
 8018cf0:	f04f 30ff 	movhi.w	r0, #4294967295
 8018cf4:	bf98      	it	ls
 8018cf6:	2001      	movls	r0, #1
 8018cf8:	4770      	bx	lr
 8018cfa:	4608      	mov	r0, r1
 8018cfc:	4770      	bx	lr

08018cfe <memmove>:
 8018cfe:	4288      	cmp	r0, r1
 8018d00:	b510      	push	{r4, lr}
 8018d02:	eb01 0302 	add.w	r3, r1, r2
 8018d06:	d807      	bhi.n	8018d18 <memmove+0x1a>
 8018d08:	1e42      	subs	r2, r0, #1
 8018d0a:	4299      	cmp	r1, r3
 8018d0c:	d00a      	beq.n	8018d24 <memmove+0x26>
 8018d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018d16:	e7f8      	b.n	8018d0a <memmove+0xc>
 8018d18:	4283      	cmp	r3, r0
 8018d1a:	d9f5      	bls.n	8018d08 <memmove+0xa>
 8018d1c:	1881      	adds	r1, r0, r2
 8018d1e:	1ad2      	subs	r2, r2, r3
 8018d20:	42d3      	cmn	r3, r2
 8018d22:	d100      	bne.n	8018d26 <memmove+0x28>
 8018d24:	bd10      	pop	{r4, pc}
 8018d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018d2e:	e7f7      	b.n	8018d20 <memmove+0x22>

08018d30 <__malloc_lock>:
 8018d30:	4770      	bx	lr

08018d32 <__malloc_unlock>:
 8018d32:	4770      	bx	lr

08018d34 <_realloc_r>:
 8018d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d36:	4607      	mov	r7, r0
 8018d38:	4614      	mov	r4, r2
 8018d3a:	460e      	mov	r6, r1
 8018d3c:	b921      	cbnz	r1, 8018d48 <_realloc_r+0x14>
 8018d3e:	4611      	mov	r1, r2
 8018d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d44:	f7ff ba06 	b.w	8018154 <_malloc_r>
 8018d48:	b922      	cbnz	r2, 8018d54 <_realloc_r+0x20>
 8018d4a:	f7ff f9b5 	bl	80180b8 <_free_r>
 8018d4e:	4625      	mov	r5, r4
 8018d50:	4628      	mov	r0, r5
 8018d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d54:	f000 f814 	bl	8018d80 <_malloc_usable_size_r>
 8018d58:	42a0      	cmp	r0, r4
 8018d5a:	d20f      	bcs.n	8018d7c <_realloc_r+0x48>
 8018d5c:	4621      	mov	r1, r4
 8018d5e:	4638      	mov	r0, r7
 8018d60:	f7ff f9f8 	bl	8018154 <_malloc_r>
 8018d64:	4605      	mov	r5, r0
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d0f2      	beq.n	8018d50 <_realloc_r+0x1c>
 8018d6a:	4631      	mov	r1, r6
 8018d6c:	4622      	mov	r2, r4
 8018d6e:	f7fb fe3f 	bl	80149f0 <memcpy>
 8018d72:	4631      	mov	r1, r6
 8018d74:	4638      	mov	r0, r7
 8018d76:	f7ff f99f 	bl	80180b8 <_free_r>
 8018d7a:	e7e9      	b.n	8018d50 <_realloc_r+0x1c>
 8018d7c:	4635      	mov	r5, r6
 8018d7e:	e7e7      	b.n	8018d50 <_realloc_r+0x1c>

08018d80 <_malloc_usable_size_r>:
 8018d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d84:	1f18      	subs	r0, r3, #4
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	bfbc      	itt	lt
 8018d8a:	580b      	ldrlt	r3, [r1, r0]
 8018d8c:	18c0      	addlt	r0, r0, r3
 8018d8e:	4770      	bx	lr

08018d90 <_init>:
 8018d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d92:	bf00      	nop
 8018d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d96:	bc08      	pop	{r3}
 8018d98:	469e      	mov	lr, r3
 8018d9a:	4770      	bx	lr

08018d9c <_fini>:
 8018d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d9e:	bf00      	nop
 8018da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018da2:	bc08      	pop	{r3}
 8018da4:	469e      	mov	lr, r3
 8018da6:	4770      	bx	lr
