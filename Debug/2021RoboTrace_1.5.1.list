
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001340c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  080135d0  080135d0  000235d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e84  08013e84  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08013e84  08013e84  00023e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e8c  08013e8c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013e8c  08013e8c  00023e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e94  08013e94  00023e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08013e98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eac  200001dc  08014074  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005088  08014074  00035088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a955  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bd5  00000000  00000000  0005ab61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e10  00000000  00000000  00060738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba0  00000000  00000000  00062548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034496  00000000  00000000  000640e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ed88  00000000  00000000  0009857e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c536  00000000  00000000  000b7306  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c383c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092ec  00000000  00000000  001c38b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080135b4 	.word	0x080135b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080135b4 	.word	0x080135b4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f004 fd62 	bl	8005aa0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002c40 	.word	0x20002c40

08000fe8 <lcd_init>:
void lcd_data(uint8_t data) {
	uint8_t Txdata[2] = { 0x40 , data };
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
}

void lcd_init(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8000fec:	2201      	movs	r2, #1
 8000fee:	2110      	movs	r1, #16
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <lcd_init+0x84>)
 8000ff2:	f004 fbeb 	bl	80057cc <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8000ff6:	2028      	movs	r0, #40	; 0x28
 8000ff8:	f003 f952 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x38);
 8000ffc:	2038      	movs	r0, #56	; 0x38
 8000ffe:	f7ff ffdb 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f003 f94c 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x39);
 8001008:	2039      	movs	r0, #57	; 0x39
 800100a:	f7ff ffd5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f003 f946 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x14);
 8001014:	2014      	movs	r0, #20
 8001016:	f7ff ffcf 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f003 f940 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x70);
 8001020:	2070      	movs	r0, #112	; 0x70
 8001022:	f7ff ffc9 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f003 f93a 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x56);
 800102c:	2056      	movs	r0, #86	; 0x56
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f003 f934 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001038:	206c      	movs	r0, #108	; 0x6c
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800103e:	20c8      	movs	r0, #200	; 0xc8
 8001040:	f003 f92e 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x38);
 8001044:	2038      	movs	r0, #56	; 0x38
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f003 f928 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001050:	200c      	movs	r0, #12
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f003 f922 	bl	80042a0 <HAL_Delay>
	lcd_cmd(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f003 f91c 	bl	80042a0 <HAL_Delay>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020000 	.word	0x40020000

08001070 <_ZN7EncoderC1Ev>:
#include "G_variables.h"

#define MAX_ENCODER_CNT 65535
#define CNT_OFFSET 32768

Encoder::Encoder() : cnt_l_(CNT_OFFSET), cnt_r_(CNT_OFFSET){}
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107e:	801a      	strh	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001086:	805a      	strh	r2, [r3, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80010a0:	213c      	movs	r1, #60	; 0x3c
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <_ZN7Encoder4initEv+0x30>)
 80010a4:	f007 fb5a 	bl	800875c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80010a8:	213c      	movs	r1, #60	; 0x3c
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <_ZN7Encoder4initEv+0x34>)
 80010ac:	f007 fb56 	bl	800875c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_ZN7Encoder4initEv+0x38>)
 80010b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <_ZN7Encoder4initEv+0x3c>)
 80010ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20002e64 	.word	0x20002e64
 80010cc:	20002b78 	.word	0x20002b78
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010400 	.word	0x40010400

080010d8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	cnt_l_ = TIM1 -> CNT;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_ZN7Encoder9updateCntEv+0x28>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
	cnt_r_ = TIM8 -> CNT;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <_ZN7Encoder9updateCntEv+0x2c>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	805a      	strh	r2, [r3, #2]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40010000 	.word	0x40010000
 8001104:	40010400 	.word	0x40010400

08001108 <_ZN7Encoder8clearCntEv>:
	cnt_l = cnt_l_ - CNT_OFFSET;
	cnt_r = CNT_OFFSET - cnt_r_;
}

void Encoder::clearCnt()
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	cnt_r_ = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	805a      	strh	r2, [r3, #2]
	TIM1 -> CNT = CNT_OFFSET;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <_ZN7Encoder8clearCntEv+0x30>)
 800111e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <_ZN7Encoder8clearCntEv+0x34>)
 8001126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40010000 	.word	0x40010000
 800113c:	40010400 	.word	0x40010400

08001140 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(char *p_folder_name, char *p_file_name, short size, int *data, char state){
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 f8cc 	bl	80012f4 <create_path>

	if(state == OVER_WRITE){
 800115c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d108      	bne.n	8001176 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001164:	481e      	ldr	r0, [pc, #120]	; (80011e0 <sd_write_array_int+0xa0>)
 8001166:	f00c fd54 	bl	800dc12 <f_chdir>
		f_unlink(filepath);	//一回消す
 800116a:	481e      	ldr	r0, [pc, #120]	; (80011e4 <sd_write_array_int+0xa4>)
 800116c:	f00c ffbf 	bl	800e0ee <f_unlink>
		f_chdir("..");
 8001170:	481d      	ldr	r0, [pc, #116]	; (80011e8 <sd_write_array_int+0xa8>)
 8001172:	f00c fd4e 	bl	800dc12 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001176:	f000 f8d3 	bl	8001320 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]
 800117e:	e021      	b.n	80011c4 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001180:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <sd_write_array_int+0xac>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <sd_write_array_int+0xb0>)
 8001192:	f00e f9ed 	bl	800f570 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <sd_write_array_int+0xb4>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4619      	mov	r1, r3
 800119c:	4815      	ldr	r0, [pc, #84]	; (80011f4 <sd_write_array_int+0xb4>)
 800119e:	f00c fd82 	bl	800dca6 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80011a2:	4813      	ldr	r0, [pc, #76]	; (80011f0 <sd_write_array_int+0xb0>)
 80011a4:	f7ff f82c 	bl	8000200 <strlen>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <sd_write_array_int+0xb8>)
 80011ac:	4910      	ldr	r1, [pc, #64]	; (80011f0 <sd_write_array_int+0xb0>)
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <sd_write_array_int+0xb4>)
 80011b0:	f00c faf3 	bl	800d79a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80011b4:	f000 f8ce 	bl	8001354 <bufclear>
	for(short i = 0 ; i < size; i++){
 80011b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	82fb      	strh	r3, [r7, #22]
 80011c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbd7      	blt.n	8001180 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <sd_write_array_int+0xb4>)
 80011d2:	f00c fcf4 	bl	800dbbe <f_close>

	return ret;
 80011d6:	7d7b      	ldrb	r3, [r7, #21]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200018fc 	.word	0x200018fc
 80011e4:	200007b8 	.word	0x200007b8
 80011e8:	080135d8 	.word	0x080135d8
 80011ec:	080135dc 	.word	0x080135dc
 80011f0:	200019fc 	.word	0x200019fc
 80011f4:	20001a8c 	.word	0x20001a8c
 80011f8:	20001a7c 	.word	0x20001a7c

080011fc <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(char *p_folder_name, char *p_file_name, short size, int *data){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f86c 	bl	80012f4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800121c:	f000 f880 	bl	8001320 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001220:	e019      	b.n	8001256 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001222:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4913      	ldr	r1, [pc, #76]	; (800127c <sd_read_array_int+0x80>)
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <sd_read_array_int+0x84>)
 8001232:	f00e f9f1 	bl	800f618 <siscanf>
		i++;
 8001236:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001242:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	429a      	cmp	r2, r3
 800124c:	db03      	blt.n	8001256 <sd_read_array_int+0x5a>
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	3b01      	subs	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <sd_read_array_int+0x88>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <sd_read_array_int+0x84>)
 800125c:	f00d f922 	bl	800e4a4 <f_gets>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1dd      	bne.n	8001222 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001266:	f000 f875 	bl	8001354 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <sd_read_array_int+0x88>)
 800126c:	f00c fca7 	bl	800dbbe <f_close>

	return ret;
 8001270:	7d7b      	ldrb	r3, [r7, #21]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	080135e0 	.word	0x080135e0
 8001280:	200019fc 	.word	0x200019fc
 8001284:	20001a8c 	.word	0x20001a8c

08001288 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001292:	2201      	movs	r2, #1
 8001294:	4908      	ldr	r1, [pc, #32]	; (80012b8 <sd_mount+0x30>)
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <sd_mount+0x34>)
 8001298:	f00b ff0e 	bl	800d0b8 <f_mount>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <sd_mount+0x20>
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e001      	b.n	80012ac <sd_mount+0x24>
	else ret = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	080135e4 	.word	0x080135e4
 80012bc:	200008b8 	.word	0x200008b8

080012c0 <sd_unmount>:
//* 役割　：　SDカードをアンマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_unmount(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]

	if(f_mount(NULL, "", 1) == FR_OK) ret = 1;
 80012ca:	2201      	movs	r2, #1
 80012cc:	4908      	ldr	r1, [pc, #32]	; (80012f0 <sd_unmount+0x30>)
 80012ce:	2000      	movs	r0, #0
 80012d0:	f00b fef2 	bl	800d0b8 <f_mount>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <sd_unmount+0x20>
 80012da:	2301      	movs	r3, #1
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e001      	b.n	80012e4 <sd_unmount+0x24>
	else ret = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	080135e4 	.word	0x080135e4

080012f4 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char *p_folder_name, char *p_file_name){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <create_path+0x24>)
 8001302:	f00e f9f8 	bl	800f6f6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <create_path+0x28>)
 800130a:	f00e f9f4 	bl	800f6f6 <strcpy>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200018fc 	.word	0x200018fc
 800131c:	200007b8 	.word	0x200007b8

08001320 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <fopen_folder_and_file+0x24>)
 8001326:	f00c ffa3 	bl	800e270 <f_mkdir>

	f_chdir(dirpath);
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <fopen_folder_and_file+0x24>)
 800132c:	f00c fc71 	bl	800dc12 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001330:	2213      	movs	r2, #19
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <fopen_folder_and_file+0x28>)
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <fopen_folder_and_file+0x2c>)
 8001336:	f00b ff05 	bl	800d144 <f_open>

	f_chdir("..");
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <fopen_folder_and_file+0x30>)
 800133c:	f00c fc69 	bl	800dc12 <f_chdir>


}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200018fc 	.word	0x200018fc
 8001348:	200007b8 	.word	0x200007b8
 800134c:	20001a8c 	.word	0x20001a8c
 8001350:	080135d8 	.word	0x080135d8

08001354 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	e007      	b.n	8001370 <bufclear+0x1c>
		buffer[i] = '\0';
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <bufclear+0x30>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b7f      	cmp	r3, #127	; 0x7f
 8001374:	ddf4      	ble.n	8001360 <bufclear+0xc>
	}
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200019fc 	.word	0x200019fc

08001388 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
{

}
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80013ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b0:	482a      	ldr	r0, [pc, #168]	; (800145c <_ZN8JoyStick8getValueEv+0xbc>)
 80013b2:	f004 f9f3 	bl	800579c <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <_ZN8JoyStick8getValueEv+0x2e>
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80013ce:	2101      	movs	r1, #1
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <_ZN8JoyStick8getValueEv+0xc0>)
 80013d2:	f004 f9e3 	bl	800579c <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <_ZN8JoyStick8getValueEv+0x4e>
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	481a      	ldr	r0, [pc, #104]	; (800145c <_ZN8JoyStick8getValueEv+0xbc>)
 80013f4:	f004 f9d2 	bl	800579c <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf0c      	ite	eq
 80013fe:	2301      	moveq	r3, #1
 8001400:	2300      	movne	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <_ZN8JoyStick8getValueEv+0x70>
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001410:	2104      	movs	r1, #4
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <_ZN8JoyStick8getValueEv+0xc4>)
 8001414:	f004 f9c2 	bl	800579c <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf0c      	ite	eq
 800141e:	2301      	moveq	r3, #1
 8001420:	2300      	movne	r3, #0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <_ZN8JoyStick8getValueEv+0x90>
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	480a      	ldr	r0, [pc, #40]	; (800145c <_ZN8JoyStick8getValueEv+0xbc>)
 8001434:	f004 f9b2 	bl	800579c <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <_ZN8JoyStick8getValueEv+0xb0>
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001450:	89fb      	ldrh	r3, [r7, #14]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40020400 	.word	0x40020400

08001468 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b52      	cmp	r3, #82	; 0x52
 8001478:	d112      	bne.n	80014a0 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001480:	4856      	ldr	r0, [pc, #344]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001482:	f004 f9a3 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148c:	4853      	ldr	r0, [pc, #332]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800148e:	f004 f99d 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001498:	4850      	ldr	r0, [pc, #320]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800149a:	f004 f997 	bl	80057cc <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800149e:	e098      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b47      	cmp	r3, #71	; 0x47
 80014a4:	d112      	bne.n	80014cc <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	484b      	ldr	r0, [pc, #300]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014ae:	f004 f98d 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b8:	4848      	ldr	r0, [pc, #288]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014ba:	f004 f987 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c4:	4845      	ldr	r0, [pc, #276]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014c6:	f004 f981 	bl	80057cc <HAL_GPIO_WritePin>
}
 80014ca:	e082      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b42      	cmp	r3, #66	; 0x42
 80014d0:	d112      	bne.n	80014f8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d8:	4840      	ldr	r0, [pc, #256]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014da:	f004 f977 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e4:	483d      	ldr	r0, [pc, #244]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014e6:	f004 f971 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f0:	483a      	ldr	r0, [pc, #232]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80014f2:	f004 f96b 	bl	80057cc <HAL_GPIO_WritePin>
}
 80014f6:	e06c      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b43      	cmp	r3, #67	; 0x43
 80014fc:	d112      	bne.n	8001524 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4835      	ldr	r0, [pc, #212]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001506:	f004 f961 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001510:	4832      	ldr	r0, [pc, #200]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001512:	f004 f95b 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800151e:	f004 f955 	bl	80057cc <HAL_GPIO_WritePin>
}
 8001522:	e056      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	2b4d      	cmp	r3, #77	; 0x4d
 8001528:	d112      	bne.n	8001550 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001530:	482a      	ldr	r0, [pc, #168]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001532:	f004 f94b 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800153c:	4827      	ldr	r0, [pc, #156]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800153e:	f004 f945 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	4824      	ldr	r0, [pc, #144]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800154a:	f004 f93f 	bl	80057cc <HAL_GPIO_WritePin>
}
 800154e:	e040      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	2b59      	cmp	r3, #89	; 0x59
 8001554:	d112      	bne.n	800157c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800155e:	f004 f935 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001568:	481c      	ldr	r0, [pc, #112]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800156a:	f004 f92f 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001576:	f004 f929 	bl	80057cc <HAL_GPIO_WritePin>
}
 800157a:	e02a      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b57      	cmp	r3, #87	; 0x57
 8001580:	d112      	bne.n	80015a8 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 800158a:	f004 f91f 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 8001596:	f004 f919 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80015a2:	f004 f913 	bl	80057cc <HAL_GPIO_WritePin>
}
 80015a6:	e014      	b.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2b7e      	cmp	r3, #126	; 0x7e
 80015ac:	d111      	bne.n	80015d2 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80015b6:	f004 f909 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80015c2:	f004 f903 	bl	80057cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <_ZN3LED9fullColorEc+0x174>)
 80015ce:	f004 f8fd 	bl	80057cc <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000

080015e0 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
 80015ec:	4613      	mov	r3, r2
 80015ee:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80015f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	4813      	ldr	r0, [pc, #76]	; (800164c <_ZN3LED2LREaa+0x6c>)
 8001600:	f004 f8e4 	bl	80057cc <HAL_GPIO_WritePin>
 8001604:	e009      	b.n	800161a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <_ZN3LED2LREaa+0x6c>)
 8001616:	f004 f8d9 	bl	80057cc <HAL_GPIO_WritePin>

	if(r_status == 1)
 800161a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <_ZN3LED2LREaa+0x6c>)
 800162a:	f004 f8cf 	bl	80057cc <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800162e:	e009      	b.n	8001644 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <_ZN3LED2LREaa+0x6c>)
 8001640:	f004 f8c4 	bl	80057cc <HAL_GPIO_WritePin>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020000 	.word	0x40020000

08001650 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001650:	b580      	push	{r7, lr}
 8001652:	b092      	sub	sp, #72	; 0x48
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe92 	bl	8001388 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	331c      	adds	r3, #28
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
 8001672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001676:	429a      	cmp	r2, r3
 8001678:	d008      	beq.n	800168c <_ZN10LineSensorC1Ev+0x3c>
 800167a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	2200      	movs	r2, #0
 8001682:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001686:	3302      	adds	r3, #2
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
 800168a:	e7f2      	b.n	8001672 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	643b      	str	r3, [r7, #64]	; 0x40
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	3338      	adds	r3, #56	; 0x38
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d009      	beq.n	80016ba <_ZN10LineSensorC1Ev+0x6a>
 80016a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a8:	623b      	str	r3, [r7, #32]
		s = 0;
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80016b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b4:	3304      	adds	r3, #4
 80016b6:	643b      	str	r3, [r7, #64]	; 0x40
 80016b8:	e7f1      	b.n	800169e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3338      	adds	r3, #56	; 0x38
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d009      	beq.n	80016e8 <_ZN10LineSensorC1Ev+0x98>
 80016d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d6:	617b      	str	r3, [r7, #20]
		m = 0;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80016e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e2:	3304      	adds	r3, #4
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e6:	e7f1      	b.n	80016cc <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d009      	beq.n	8001716 <_ZN10LineSensorC1Ev+0xc6>
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800170c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001710:	3304      	adds	r3, #4
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
 8001714:	e7f1      	b.n	80016fa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3748      	adds	r7, #72	; 0x48
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	220e      	movs	r2, #14
 800172c:	4619      	mov	r1, r3
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001730:	f002 fe1c 	bl	800436c <HAL_ADC_Start_DMA>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20002bf8 	.word	0x20002bf8

08001740 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b0d      	cmp	r3, #13
 8001750:	dc2f      	bgt.n	80017b2 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3392      	adds	r3, #146	; 0x92
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	33a0      	adds	r3, #160	; 0xa0
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3304      	adds	r3, #4
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	440b      	add	r3, r1
 800179e:	3306      	adds	r3, #6
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3304      	adds	r3, #4
 80017a6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e7cc      	b.n	800174c <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80017bc:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b09      	cmp	r3, #9
 80017c4:	d902      	bls.n	80017cc <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]


}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	200001f8 	.word	0x200001f8

080017dc <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80017dc:	b490      	push	{r4, r7}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80017ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017ee:	2b0d      	cmp	r3, #13
 80017f0:	f200 8087 	bhi.w	8001902 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80017fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80017fe:	2b09      	cmp	r3, #9
 8001800:	d81c      	bhi.n	800183c <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8001802:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001806:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800180a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4423      	add	r3, r4
 800181a:	3306      	adds	r3, #6
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4403      	add	r3, r0
 8001820:	3304      	adds	r3, #4
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	008b      	lsls	r3, r1, #2
 8001826:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800182a:	440b      	add	r3, r1
 800182c:	3b30      	subs	r3, #48	; 0x30
 800182e:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8001830:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001834:	3301      	adds	r3, #1
 8001836:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800183a:	e7de      	b.n	80017fa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001842:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001846:	2b09      	cmp	r3, #9
 8001848:	d84d      	bhi.n	80018e6 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800184a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800184e:	3301      	adds	r3, #1
 8001850:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001854:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001858:	2b09      	cmp	r3, #9
 800185a:	d83e      	bhi.n	80018da <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800185c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001866:	4413      	add	r3, r2
 8001868:	3b30      	subs	r3, #48	; 0x30
 800186a:	ed93 7a00 	vldr	s14, [r3]
 800186e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001878:	4413      	add	r3, r2
 800187a:	3b30      	subs	r3, #48	; 0x30
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d521      	bpl.n	80018ce <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800188a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001894:	4413      	add	r3, r2
 8001896:	3b30      	subs	r3, #48	; 0x30
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800189c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80018a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018aa:	440a      	add	r2, r1
 80018ac:	3a30      	subs	r2, #48	; 0x30
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018b6:	440b      	add	r3, r1
 80018b8:	3b30      	subs	r3, #48	; 0x30
 80018ba:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80018bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018c6:	4413      	add	r3, r2
 80018c8:	3b30      	subs	r3, #48	; 0x30
 80018ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018cc:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80018ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018d2:	3301      	adds	r3, #1
 80018d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80018d8:	e7bc      	b.n	8001854 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80018da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80018de:	3301      	adds	r3, #1
 80018e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80018e4:	e7ad      	b.n	8001842 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80018e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	33b0      	adds	r3, #176	; 0xb0
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80018f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018fa:	3301      	adds	r3, #1
 80018fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001900:	e773      	b.n	80017ea <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8001902:	bf00      	nop
 8001904:	3738      	adds	r7, #56	; 0x38
 8001906:	46bd      	mov	sp, r7
 8001908:	bc90      	pop	{r4, r7}
 800190a:	4770      	bx	lr

0800190c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b0a9      	sub	sp, #164	; 0xa4
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001914:	2064      	movs	r0, #100	; 0x64
 8001916:	f002 fcc3 	bl	80042a0 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800191a:	2300      	movs	r3, #0
 800191c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001920:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001924:	2b0d      	cmp	r3, #13
 8001926:	d823      	bhi.n	8001970 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8001928:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800192c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	32b0      	adds	r2, #176	; 0xb0
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	440a      	add	r2, r1
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001940:	440b      	add	r3, r1
 8001942:	3b60      	subs	r3, #96	; 0x60
 8001944:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8001946:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800194a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	32b0      	adds	r2, #176	; 0xb0
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	440a      	add	r2, r1
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800195e:	440b      	add	r3, r1
 8001960:	3b98      	subs	r3, #152	; 0x98
 8001962:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001964:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001968:	3301      	adds	r3, #1
 800196a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800196e:	e7d7      	b.n	8001920 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd12 	bl	80013a0 <_ZN8JoyStick8getValueEv>
 800197c:	4603      	mov	r3, r0
 800197e:	2b02      	cmp	r3, #2
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d079      	beq.n	8001a80 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800198c:	2300      	movs	r3, #0
 800198e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001992:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d850      	bhi.n	8001a3c <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 800199a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80019a4:	4413      	add	r3, r2
 80019a6:	3b60      	subs	r3, #96	; 0x60
 80019a8:	ed93 7a00 	vldr	s14, [r3]
 80019ac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	33b0      	adds	r3, #176	; 0xb0
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d50f      	bpl.n	80019e6 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 80019c6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80019ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	32b0      	adds	r2, #176	; 0xb0
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	440a      	add	r2, r1
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80019de:	440b      	add	r3, r1
 80019e0:	3b60      	subs	r3, #96	; 0x60
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e024      	b.n	8001a30 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 80019e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80019f0:	4413      	add	r3, r2
 80019f2:	3b98      	subs	r3, #152	; 0x98
 80019f4:	ed93 7a00 	vldr	s14, [r3]
 80019f8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	33b0      	adds	r3, #176	; 0xb0
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd0e      	ble.n	8001a30 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 8001a12:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001a16:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	32b0      	adds	r2, #176	; 0xb0
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	440a      	add	r2, r1
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3b98      	subs	r3, #152	; 0x98
 8001a2e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001a30:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001a34:	3301      	adds	r3, #1
 8001a36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001a3a:	e7aa      	b.n	8001992 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc0a 	bl	800225c <_ZN12RotarySwitch8getValueEv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fdbb 	bl	80015e0 <_ZN3LED2LREaa>
 8001a6a:	e781      	b.n	8001970 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001a72:	2200      	movs	r2, #0
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fdb1 	bl	80015e0 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 8001a7e:	e777      	b.n	8001970 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8001a80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d016      	beq.n	8001ad4 <_ZN10LineSensor11calibrationEv+0x1c8>
 8001aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 8001aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd5f 	bl	8000578 <__aeabi_f2d>
 8001aba:	4603      	mov	r3, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	4842      	ldr	r0, [pc, #264]	; (8001bcc <_ZN10LineSensor11calibrationEv+0x2c0>)
 8001ac4:	f00d fcbe 	bl	800f444 <iprintf>
	for(const auto &m : max_values){
 8001ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001acc:	3304      	adds	r3, #4
 8001ace:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ad2:	e7e2      	b.n	8001a9a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f00d fccd 	bl	800f474 <putchar>
	for(const auto &m : min_values){
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aee:	3338      	adds	r3, #56	; 0x38
 8001af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d014      	beq.n	8001b26 <_ZN10LineSensor11calibrationEv+0x21a>
 8001afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b00:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 8001b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd36 	bl	8000578 <__aeabi_f2d>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	461a      	mov	r2, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	482d      	ldr	r0, [pc, #180]	; (8001bcc <_ZN10LineSensor11calibrationEv+0x2c0>)
 8001b16:	f00d fc95 	bl	800f444 <iprintf>
	for(const auto &m : min_values){
 8001b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b1e:	3304      	adds	r3, #4
 8001b20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b24:	e7e5      	b.n	8001af2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 8001b26:	200a      	movs	r0, #10
 8001b28:	f00d fca4 	bl	800f474 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001b32:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b36:	2b0d      	cmp	r3, #13
 8001b38:	d826      	bhi.n	8001b88 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8001b3a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001b44:	4413      	add	r3, r2
 8001b46:	3b60      	subs	r3, #96	; 0x60
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001b56:	4413      	add	r3, r2
 8001b58:	3b98      	subs	r3, #152	; 0x98
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b62:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b66:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001bd0 <_ZN10LineSensor11calibrationEv+0x2c4>
 8001b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	3392      	adds	r3, #146	; 0x92
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001b7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001b80:	3301      	adds	r3, #1
 8001b82:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001b86:	e7d4      	b.n	8001b32 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001b8e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b92:	2b0d      	cmp	r3, #13
 8001b94:	d815      	bhi.n	8001bc2 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8001b96:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8001b9a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ba4:	440a      	add	r2, r1
 8001ba6:	3a98      	subs	r2, #152	; 0x98
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	33a0      	adds	r3, #160	; 0xa0
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8001bb6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001bc0:	e7e5      	b.n	8001b8e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8001bc2:	bf00      	nop
 8001bc4:	37a4      	adds	r7, #164	; 0xa4
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	080135e8 	.word	0x080135e8
 8001bd0:	447a0000 	.word	0x447a0000

08001bd4 <_ZN10LineSensor17printSensorValuesEv>:

void LineSensor::printSensorValues()
{
 8001bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd8:	b0b1      	sub	sp, #196	; 0xc4
 8001bda:	af1a      	add	r7, sp, #104	; 0x68
 8001bdc:	6578      	str	r0, [r7, #84]	; 0x54
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fcc7 	bl	8000578 <__aeabi_f2d>
 8001bea:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcbf 	bl	8000578 <__aeabi_f2d>
 8001bfa:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcb7 	bl	8000578 <__aeabi_f2d>
 8001c0a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcaf 	bl	8000578 <__aeabi_f2d>
 8001c1a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fca7 	bl	8000578 <__aeabi_f2d>
 8001c2a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc9f 	bl	8000578 <__aeabi_f2d>
 8001c3a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc97 	bl	8000578 <__aeabi_f2d>
 8001c4a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc8f 	bl	8000578 <__aeabi_f2d>
 8001c5a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc87 	bl	8000578 <__aeabi_f2d>
 8001c6a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc7f 	bl	8000578 <__aeabi_f2d>
 8001c7a:	e9c7 0100 	strd	r0, r1, [r7]
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc77 	bl	8000578 <__aeabi_f2d>
 8001c8a:	4682      	mov	sl, r0
 8001c8c:	468b      	mov	fp, r1
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc6f 	bl	8000578 <__aeabi_f2d>
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	4689      	mov	r9, r1
 8001c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc67 	bl	8000578 <__aeabi_f2d>
 8001caa:	4605      	mov	r5, r0
 8001cac:	460e      	mov	r6, r1
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc5f 	bl	8000578 <__aeabi_f2d>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
 8001cc2:	e9cd 5616 	strd	r5, r6, [sp, #88]	; 0x58
 8001cc6:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8001cca:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8001cce:	ed97 7b00 	vldr	d7, [r7]
 8001cd2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001cd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cda:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001cde:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ce2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001ce6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001cee:	ed97 7b08 	vldr	d7, [r7, #32]
 8001cf2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001cf6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001cfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001cfe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001d02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001d06:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001d0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001d12:	ed8d 7b00 	vstr	d7, [sp]
 8001d16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d1a:	4804      	ldr	r0, [pc, #16]	; (8001d2c <_ZN10LineSensor17printSensorValuesEv+0x158>)
 8001d1c:	f00d fb92 	bl	800f444 <iprintf>

}
 8001d20:	bf00      	nop
 8001d22:	375c      	adds	r7, #92	; 0x5c
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	080135f0 	.word	0x080135f0

08001d30 <_ZN10LineSensor13emergencyStopEv>:

bool LineSensor::emergencyStop()
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3338      	adds	r3, #56	; 0x38
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d012      	beq.n	8001d7c <_ZN10LineSensor13emergencyStopEv+0x4c>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d9c <_ZN10LineSensor13emergencyStopEv+0x6c>
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	db02      	blt.n	8001d74 <_ZN10LineSensor13emergencyStopEv+0x44>
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	3301      	adds	r3, #1
 8001d72:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	3304      	adds	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e7e8      	b.n	8001d4e <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	2b0d      	cmp	r3, #13
 8001d80:	d902      	bls.n	8001d88 <_ZN10LineSensor13emergencyStopEv+0x58>
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
 8001d86:	e001      	b.n	8001d8c <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]

	return flag;
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]

}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	44160000 	.word	0x44160000

08001da0 <_ZN9LineTraceC1EP5MotorP10LineSensor>:
 */

#include "LineTrace.hpp"
#include <stdio.h>

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	761a      	strb	r2, [r3, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
	motor_ = motor;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
}
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8001e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8001e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8001e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8001e54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8001e60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8001e6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8001e78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8001e84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8001e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8001e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e98:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	ee07 3a90 	vmov	s15, r3

}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_ZN9LineTrace3pidEv>:

void LineTrace::pid()
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff97 	bl	8001dec <_ZN9LineTrace9calcErrorEv>
 8001ebe:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ec8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <_ZN9LineTrace3pidEv+0x130>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ee4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	ee17 0a90 	vmov	r0, s15
 8001ef0:	f7fe fb42 	bl	8000578 <__aeabi_f2d>
 8001ef4:	a338      	add	r3, pc, #224	; (adr r3, 8001fd8 <_ZN9LineTrace3pidEv+0x128>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fcbf 	bl	800087c <__aeabi_ddiv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	4618      	mov	r0, r3
 8001f04:	4621      	mov	r1, r4
 8001f06:	f7fe fe87 	bl	8000c18 <__aeabi_d2f>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8001f0e:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <_ZN9LineTrace3pidEv+0x134>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb30 	bl	8000578 <__aeabi_f2d>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	460d      	mov	r5, r1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	ee17 0a90 	vmov	r0, s15
 8001f2e:	f7fe fb23 	bl	8000578 <__aeabi_f2d>
 8001f32:	a329      	add	r3, pc, #164	; (adr r3, 8001fd8 <_ZN9LineTrace3pidEv+0x128>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb76 	bl	8000628 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f9ba 	bl	80002bc <__adddf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f7fe fe62 	bl	8000c18 <__aeabi_d2f>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <_ZN9LineTrace3pidEv+0x134>)
 8001f58:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f60:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <_ZN9LineTrace3pidEv+0x134>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f84:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <_ZN9LineTrace3pidEv+0x134>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681c      	ldr	r4, [r3, #0]
 8001fa6:	6938      	ldr	r0, [r7, #16]
 8001fa8:	f7fe fae6 	bl	8000578 <__aeabi_f2d>
 8001fac:	4605      	mov	r5, r0
 8001fae:	460e      	mov	r6, r1
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7fe fae1 	bl	8000578 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	ec43 2b11 	vmov	d1, r2, r3
 8001fbe:	ec46 5b10 	vmov	d0, r5, r6
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f8d8 	bl	8002178 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_ZN9LineTrace3pidEv+0x130>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	6013      	str	r3, [r2, #0]


}
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fdc:	3f50624d 	.word	0x3f50624d
 8001fe0:	200001fc 	.word	0x200001fc
 8001fe4:	20000200 	.word	0x20000200

08001fe8 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ff4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ff8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	60da      	str	r2, [r3, #12]
	kd_ = kd;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	615a      	str	r2, [r3, #20]

}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	0000      	movs	r0, r0
 800201c:	0000      	movs	r0, r0
	...

08002020 <_ZN9LineTrace4flipEv>:
	normal_ratio_ = ratio;

}

void LineTrace::flip()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e1b      	ldrb	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff3d 	bl	8001eb0 <_ZN9LineTrace3pidEv>
	}
	if(line_sensor_->emergencyStop() == true){
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fe78 	bl	8001d30 <_ZN10LineSensor13emergencyStopEv>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d011      	beq.n	800206a <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002088 <_ZN9LineTrace4flipEv+0x68>
 800204e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002088 <_ZN9LineTrace4flipEv+0x68>
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f890 	bl	8002178 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3308      	adds	r3, #8
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fabc 	bl	80015e0 <_ZN3LED2LREaa>
		led_.LR(0, -1);

	}


}
 8002068:	e007      	b.n	800207a <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3308      	adds	r3, #8
 800206e:	f04f 32ff 	mov.w	r2, #4294967295
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fab3 	bl	80015e0 <_ZN3LED2LREaa>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
	...

08002090 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	805a      	strh	r2, [r3, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <_ZN5Motor4initEv>:

void Motor::init()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80020bc:	2108      	movs	r1, #8
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <_ZN5Motor4initEv+0x20>)
 80020c0:	f006 fa7c 	bl	80085bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80020c4:	210c      	movs	r1, #12
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <_ZN5Motor4initEv+0x20>)
 80020c8:	f006 fa78 	bl	80085bc <HAL_TIM_PWM_Start>

}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20002bb8 	.word	0x20002bb8

080020d8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0d      	bge.n	8002106 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <_ZN5Motor9motorCtrlEv+0x98>)
 80020f2:	f003 fb6b 	bl	80057cc <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	425b      	negs	r3, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	81fb      	strh	r3, [r7, #14]
 8002104:	e00a      	b.n	800211c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <_ZN5Motor9motorCtrlEv+0x98>)
 800210e:	f003 fb5d 	bl	80057cc <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	b29b      	uxth	r3, r3
 800211a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da0d      	bge.n	8002142 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800212c:	4810      	ldr	r0, [pc, #64]	; (8002170 <_ZN5Motor9motorCtrlEv+0x98>)
 800212e:	f003 fb4d 	bl	80057cc <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002138:	b29b      	uxth	r3, r3
 800213a:	425b      	negs	r3, r3
 800213c:	b29b      	uxth	r3, r3
 800213e:	81bb      	strh	r3, [r7, #12]
 8002140:	e00a      	b.n	8002158 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <_ZN5Motor9motorCtrlEv+0x98>)
 800214a:	f003 fb3f 	bl	80057cc <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002154:	b29b      	uxth	r3, r3
 8002156:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002158:	89fa      	ldrh	r2, [r7, #14]
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <_ZN5Motor9motorCtrlEv+0x9c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002160:	89ba      	ldrh	r2, [r7, #12]
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020c00 	.word	0x40020c00
 8002174:	20002bb8 	.word	0x20002bb8

08002178 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6178      	str	r0, [r7, #20]
 8002180:	ed87 0b02 	vstr	d0, [r7, #8]
 8002184:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <_ZN5Motor8setRatioEdd+0xd8>)
 800218e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002192:	f7fe fcd9 	bl	8000b48 <__aeabi_dcmpgt>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <_ZN5Motor8setRatioEdd+0x30>
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	4c2b      	ldr	r4, [pc, #172]	; (8002250 <_ZN5Motor8setRatioEdd+0xd8>)
 80021a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80021a6:	e00e      	b.n	80021c6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <_ZN5Motor8setRatioEdd+0xdc>)
 80021ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021b2:	f7fe fcab 	bl	8000b0c <__aeabi_dcmplt>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <_ZN5Motor8setRatioEdd+0x4e>
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	4c24      	ldr	r4, [pc, #144]	; (8002254 <_ZN5Motor8setRatioEdd+0xdc>)
 80021c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <_ZN5Motor8setRatioEdd+0xd8>)
 80021cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021d0:	f7fe fcba 	bl	8000b48 <__aeabi_dcmpgt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <_ZN5Motor8setRatioEdd+0x6e>
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	4c1c      	ldr	r4, [pc, #112]	; (8002250 <_ZN5Motor8setRatioEdd+0xd8>)
 80021e0:	e9c7 3400 	strd	r3, r4, [r7]
 80021e4:	e00e      	b.n	8002204 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <_ZN5Motor8setRatioEdd+0xdc>)
 80021ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021f0:	f7fe fc8c 	bl	8000b0c <__aeabi_dcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <_ZN5Motor8setRatioEdd+0x8c>
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	4c15      	ldr	r4, [pc, #84]	; (8002254 <_ZN5Motor8setRatioEdd+0xdc>)
 8002200:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <_ZN5Motor8setRatioEdd+0xe0>)
 800220a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800220e:	f7fe fa0b 	bl	8000628 <__aeabi_dmul>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fcb5 	bl	8000b88 <__aeabi_d2iz>
 800221e:	4603      	mov	r3, r0
 8002220:	b21a      	sxth	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <_ZN5Motor8setRatioEdd+0xe0>)
 800222c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002230:	f7fe f9fa 	bl	8000628 <__aeabi_dmul>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	4618      	mov	r0, r3
 800223a:	4621      	mov	r1, r4
 800223c:	f7fe fca4 	bl	8000b88 <__aeabi_d2iz>
 8002240:	4603      	mov	r3, r0
 8002242:	b21a      	sxth	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	805a      	strh	r2, [r3, #2]

}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	3ff00000 	.word	0x3ff00000
 8002254:	bff00000 	.word	0xbff00000
 8002258:	409c2000 	.word	0x409c2000

0800225c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8002268:	2102      	movs	r1, #2
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800226c:	f003 fa96 	bl	800579c <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <_ZN12RotarySwitch8getValueEv+0x2c>
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8002288:	2108      	movs	r1, #8
 800228a:	481a      	ldr	r0, [pc, #104]	; (80022f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800228c:	f003 fa86 	bl	800579c <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80022a8:	2110      	movs	r1, #16
 80022aa:	4812      	ldr	r0, [pc, #72]	; (80022f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80022ac:	f003 fa76 	bl	800579c <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	480a      	ldr	r0, [pc, #40]	; (80022f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80022cc:	f003 fa66 	bl	800579c <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80022e8:	89fb      	ldrh	r3, [r7, #14]

}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40020c00 	.word	0x40020c00

080022f8 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
{

}
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d111      	bne.n	8002346 <_ZN10SideSensor12updateStatusEt+0x36>
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f083 0301 	eor.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e010      	b.n	8002368 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d10d      	bne.n	8002368 <_ZN10SideSensor12updateStatusEt+0x58>
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236e:	d111      	bne.n	8002394 <_ZN10SideSensor12updateStatusEt+0x84>
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8002392:	e011      	b.n	80023b8 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d10d      	bne.n	80023b8 <_ZN10SideSensor12updateStatusEt+0xa8>
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f083 0302 	eor.w	r3, r3, #2
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	20000204 	.word	0x20000204
 80023c8:	20000205 	.word	0x20000205

080023cc <_ZN12VelocityCtrlC1EP5MotorP7Encoder>:
 *      Author: Haruki Shimotori
 */

#include "VelocityCtrl.hpp"

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder) :
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	61da      	str	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30

}
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002452:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002456:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d013      	beq.n	800248a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002462:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002466:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800246a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002472:	e000      	b.n	8002476 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002474:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002476:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f9      	beq.n	8002474 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002480:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800248a:	687b      	ldr	r3, [r7, #4]
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e009      	b.n	80024be <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	60ba      	str	r2, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffc9 	bl	800244a <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	dbf1      	blt.n	80024aa <_write+0x12>
  }
  return len;
 80024c6:	687b      	ldr	r3, [r7, #4]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 fdcb 	bl	8004078 <cppExit>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d109      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x26>
		//tim6_timer++;
		cppFlip1ms();
 80024fe:	f001 fd8f 	bl	8004020 <cppFlip1ms>
		if(tim6_timer >= 100000) tim6_timer = 0;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d902      	bls.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x26>
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM7){
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d109      	bne.n	8002530 <HAL_TIM_PeriodElapsedCallback+0x44>
		//tim7_timer++;
		cppFlip100ns();
 800251c:	f001 fd9c 	bl	8004058 <cppFlip100ns>
		if(tim7_timer >= 100000) tim7_timer = 0;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d902      	bls.n	8002530 <HAL_TIM_PeriodElapsedCallback+0x44>
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
	}
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40001000 	.word	0x40001000
 800253c:	20002d28 	.word	0x20002d28
 8002540:	0001869f 	.word	0x0001869f
 8002544:	40001400 	.word	0x40001400
 8002548:	20002d74 	.word	0x20002d74

0800254c <init>:

}
*/

void init()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af02      	add	r7, sp, #8
	      Error_Handler();
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 65535);
	*/

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002558:	481c      	ldr	r0, [pc, #112]	; (80025cc <init+0x80>)
 800255a:	f003 f937 	bl	80057cc <HAL_GPIO_WritePin>

	//HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
	//HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);

	//Timer intrruptin start
	HAL_TIM_Base_Start_IT(&htim6);
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <init+0x84>)
 8002560:	f005 ffdd 	bl	800851e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002564:	481b      	ldr	r0, [pc, #108]	; (80025d4 <init+0x88>)
 8002566:	f005 ffda 	bl	800851e <HAL_TIM_Base_Start_IT>

	lcd_init();
 800256a:	f7fe fd3d 	bl	8000fe8 <lcd_init>

	if(sd_mount() == 1){
 800256e:	f7fe fe8b 	bl	8001288 <sd_mount>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d103      	bne.n	8002580 <init+0x34>
	  printf("mount success\r\n");
 8002578:	4817      	ldr	r0, [pc, #92]	; (80025d8 <init+0x8c>)
 800257a:	f00c ffeb 	bl	800f554 <puts>
 800257e:	e002      	b.n	8002586 <init+0x3a>
	}
	else{
	  printf("error\r\n");
 8002580:	4816      	ldr	r0, [pc, #88]	; (80025dc <init+0x90>)
 8002582:	f00c ffe7 	bl	800f554 <puts>
	}

	data[0] = 30;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <init+0x94>)
 8002588:	221e      	movs	r2, #30
 800258a:	601a      	str	r2, [r3, #0]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800258c:	2301      	movs	r3, #1
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <init+0x94>)
 8002592:	2201      	movs	r2, #1
 8002594:	4913      	ldr	r1, [pc, #76]	; (80025e4 <init+0x98>)
 8002596:	4814      	ldr	r0, [pc, #80]	; (80025e8 <init+0x9c>)
 8002598:	f7fe fdd2 	bl	8001140 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <init+0xa0>)
 800259e:	2201      	movs	r2, #1
 80025a0:	4910      	ldr	r1, [pc, #64]	; (80025e4 <init+0x98>)
 80025a2:	4811      	ldr	r0, [pc, #68]	; (80025e8 <init+0x9c>)
 80025a4:	f7fe fe2a 	bl	80011fc <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80025a8:	2301      	movs	r3, #1
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <init+0xa0>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	490f      	ldr	r1, [pc, #60]	; (80025f0 <init+0xa4>)
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <init+0x9c>)
 80025b4:	f7fe fdc4 	bl	8001140 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <init+0xa8>)
 80025ba:	f00c ffcb 	bl	800f554 <puts>
	sd_unmount();
 80025be:	f7fe fe7f 	bl	80012c0 <sd_unmount>

	cppInit();
 80025c2:	f001 fd05 	bl	8003fd0 <cppInit>
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	20002e24 	.word	0x20002e24
 80025d4:	20002fcc 	.word	0x20002fcc
 80025d8:	08013628 	.word	0x08013628
 80025dc:	08013638 	.word	0x08013638
 80025e0:	20002e20 	.word	0x20002e20
 80025e4:	08013640 	.word	0x08013640
 80025e8:	0801364c 	.word	0x0801364c
 80025ec:	20002d2c 	.word	0x20002d2c
 80025f0:	08013654 	.word	0x08013654
 80025f4:	08013660 	.word	0x08013660

080025f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025fc:	f001 fdde 	bl	80041bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002600:	f000 f828 	bl	8002654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002604:	f000 fd96 	bl	8003134 <MX_GPIO_Init>
  MX_DMA_Init();
 8002608:	f000 fd64 	bl	80030d4 <MX_DMA_Init>
  MX_I2C2_Init();
 800260c:	f000 f9e6 	bl	80029dc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002610:	f000 fa12 	bl	8002a38 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002614:	f000 fa30 	bl	8002a78 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002618:	f000 fa64 	bl	8002ae4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800261c:	f000 fb6e 	bl	8002cfc <MX_TIM4_Init>
  MX_TIM8_Init();
 8002620:	f000 fc3a 	bl	8002e98 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002624:	f000 fd2c 	bl	8003080 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002628:	f007 ff4c 	bl	800a4c4 <MX_FATFS_Init>
  MX_TIM6_Init();
 800262c:	f000 fbca 	bl	8002dc4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002630:	f000 fbfe 	bl	8002e30 <MX_TIM7_Init>
  MX_I2C1_Init();
 8002634:	f000 f9a4 	bl	8002980 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002638:	f000 fafc 	bl	8002c34 <MX_TIM3_Init>
  MX_TIM10_Init();
 800263c:	f000 fc84 	bl	8002f48 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002640:	f000 fcd0 	bl	8002fe4 <MX_TIM11_Init>
  MX_ADC2_Init();
 8002644:	f000 f894 	bl	8002770 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002648:	f7ff ff80 	bl	800254c <init>


	  //printf("side: %d\n", side);


	  cppLoop();
 800264c:	f001 fd24 	bl	8004098 <cppLoop>
 8002650:	e7fc      	b.n	800264c <main+0x54>
	...

08002654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0a4      	sub	sp, #144	; 0x90
 8002658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800265e:	2234      	movs	r2, #52	; 0x34
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f00c f8a8 	bl	800e7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	223c      	movs	r2, #60	; 0x3c
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f00c f899 	bl	800e7b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <SystemClock_Config+0x114>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <SystemClock_Config+0x114>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <SystemClock_Config+0x114>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <SystemClock_Config+0x118>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <SystemClock_Config+0x118>)
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b2e      	ldr	r3, [pc, #184]	; (800276c <SystemClock_Config+0x118>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026be:	2301      	movs	r3, #1
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c8:	2302      	movs	r3, #2
 80026ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026d2:	2308      	movs	r3, #8
 80026d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026d6:	23b4      	movs	r3, #180	; 0xb4
 80026d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80026e2:	2308      	movs	r3, #8
 80026e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f95a 	bl	80069ac <HAL_RCC_OscConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026fe:	f000 fe6f 	bl	80033e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002702:	f003 fcd5 	bl	80060b0 <HAL_PWREx_EnableOverDrive>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800270c:	f000 fe68 	bl	80033e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002710:	230f      	movs	r3, #15
 8002712:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002714:	2302      	movs	r3, #2
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002718:	2300      	movs	r3, #0
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800271c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002720:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002726:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800272c:	2105      	movs	r1, #5
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fd0e 	bl	8006150 <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800273a:	f000 fe51 	bl	80033e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800273e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002742:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002744:	2300      	movs	r3, #0
 8002746:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002748:	2300      	movs	r3, #0
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f003 feed 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800275c:	f000 fe40 	bl	80033e0 <Error_Handler>
  }
}
 8002760:	bf00      	nop
 8002762:	3790      	adds	r7, #144	; 0x90
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000

08002770 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002776:	463b      	mov	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002782:	4b7c      	ldr	r3, [pc, #496]	; (8002974 <MX_ADC2_Init+0x204>)
 8002784:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <MX_ADC2_Init+0x208>)
 8002786:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002788:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <MX_ADC2_Init+0x204>)
 800278a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <MX_ADC2_Init+0x204>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <MX_ADC2_Init+0x204>)
 8002798:	2201      	movs	r2, #1
 800279a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <MX_ADC2_Init+0x204>)
 800279e:	2201      	movs	r2, #1
 80027a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <MX_ADC2_Init+0x204>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <MX_ADC2_Init+0x204>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027b0:	4b70      	ldr	r3, [pc, #448]	; (8002974 <MX_ADC2_Init+0x204>)
 80027b2:	4a72      	ldr	r2, [pc, #456]	; (800297c <MX_ADC2_Init+0x20c>)
 80027b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <MX_ADC2_Init+0x204>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80027bc:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <MX_ADC2_Init+0x204>)
 80027be:	220e      	movs	r2, #14
 80027c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <MX_ADC2_Init+0x204>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ca:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <MX_ADC2_Init+0x204>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027d0:	4868      	ldr	r0, [pc, #416]	; (8002974 <MX_ADC2_Init+0x204>)
 80027d2:	f001 fd87 	bl	80042e4 <HAL_ADC_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80027dc:	f000 fe00 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027e0:	230a      	movs	r3, #10
 80027e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80027e8:	2306      	movs	r3, #6
 80027ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	4619      	mov	r1, r3
 80027f0:	4860      	ldr	r0, [pc, #384]	; (8002974 <MX_ADC2_Init+0x204>)
 80027f2:	f001 fecb 	bl	800458c <HAL_ADC_ConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80027fc:	f000 fdf0 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002800:	230b      	movs	r3, #11
 8002802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002804:	2302      	movs	r3, #2
 8002806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	4619      	mov	r1, r3
 800280c:	4859      	ldr	r0, [pc, #356]	; (8002974 <MX_ADC2_Init+0x204>)
 800280e:	f001 febd 	bl	800458c <HAL_ADC_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002818:	f000 fde2 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800281c:	230c      	movs	r3, #12
 800281e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002820:	2303      	movs	r3, #3
 8002822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	4852      	ldr	r0, [pc, #328]	; (8002974 <MX_ADC2_Init+0x204>)
 800282a:	f001 feaf 	bl	800458c <HAL_ADC_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002834:	f000 fdd4 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002838:	230d      	movs	r3, #13
 800283a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800283c:	2304      	movs	r3, #4
 800283e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	484b      	ldr	r0, [pc, #300]	; (8002974 <MX_ADC2_Init+0x204>)
 8002846:	f001 fea1 	bl	800458c <HAL_ADC_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002850:	f000 fdc6 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002854:	2300      	movs	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002858:	2305      	movs	r3, #5
 800285a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800285c:	463b      	mov	r3, r7
 800285e:	4619      	mov	r1, r3
 8002860:	4844      	ldr	r0, [pc, #272]	; (8002974 <MX_ADC2_Init+0x204>)
 8002862:	f001 fe93 	bl	800458c <HAL_ADC_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800286c:	f000 fdb8 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002870:	2301      	movs	r3, #1
 8002872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002874:	2306      	movs	r3, #6
 8002876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002878:	463b      	mov	r3, r7
 800287a:	4619      	mov	r1, r3
 800287c:	483d      	ldr	r0, [pc, #244]	; (8002974 <MX_ADC2_Init+0x204>)
 800287e:	f001 fe85 	bl	800458c <HAL_ADC_ConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8002888:	f000 fdaa 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800288c:	2302      	movs	r3, #2
 800288e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002890:	2307      	movs	r3, #7
 8002892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002894:	463b      	mov	r3, r7
 8002896:	4619      	mov	r1, r3
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <MX_ADC2_Init+0x204>)
 800289a:	f001 fe77 	bl	800458c <HAL_ADC_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80028a4:	f000 fd9c 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028a8:	2303      	movs	r3, #3
 80028aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80028ac:	2308      	movs	r3, #8
 80028ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	482f      	ldr	r0, [pc, #188]	; (8002974 <MX_ADC2_Init+0x204>)
 80028b6:	f001 fe69 	bl	800458c <HAL_ADC_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80028c0:	f000 fd8e 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028c4:	2304      	movs	r3, #4
 80028c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80028c8:	2309      	movs	r3, #9
 80028ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028cc:	463b      	mov	r3, r7
 80028ce:	4619      	mov	r1, r3
 80028d0:	4828      	ldr	r0, [pc, #160]	; (8002974 <MX_ADC2_Init+0x204>)
 80028d2:	f001 fe5b 	bl	800458c <HAL_ADC_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80028dc:	f000 fd80 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028e0:	2305      	movs	r3, #5
 80028e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80028e4:	230a      	movs	r3, #10
 80028e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028e8:	463b      	mov	r3, r7
 80028ea:	4619      	mov	r1, r3
 80028ec:	4821      	ldr	r0, [pc, #132]	; (8002974 <MX_ADC2_Init+0x204>)
 80028ee:	f001 fe4d 	bl	800458c <HAL_ADC_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80028f8:	f000 fd72 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028fc:	2306      	movs	r3, #6
 80028fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002900:	230b      	movs	r3, #11
 8002902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002904:	463b      	mov	r3, r7
 8002906:	4619      	mov	r1, r3
 8002908:	481a      	ldr	r0, [pc, #104]	; (8002974 <MX_ADC2_Init+0x204>)
 800290a:	f001 fe3f 	bl	800458c <HAL_ADC_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8002914:	f000 fd64 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002918:	2307      	movs	r3, #7
 800291a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800291c:	230c      	movs	r3, #12
 800291e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002920:	463b      	mov	r3, r7
 8002922:	4619      	mov	r1, r3
 8002924:	4813      	ldr	r0, [pc, #76]	; (8002974 <MX_ADC2_Init+0x204>)
 8002926:	f001 fe31 	bl	800458c <HAL_ADC_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8002930:	f000 fd56 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002934:	2308      	movs	r3, #8
 8002936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002938:	230d      	movs	r3, #13
 800293a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800293c:	463b      	mov	r3, r7
 800293e:	4619      	mov	r1, r3
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <MX_ADC2_Init+0x204>)
 8002942:	f001 fe23 	bl	800458c <HAL_ADC_ConfigChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 800294c:	f000 fd48 	bl	80033e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002950:	2309      	movs	r3, #9
 8002952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002954:	230e      	movs	r3, #14
 8002956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002958:	463b      	mov	r3, r7
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_ADC2_Init+0x204>)
 800295e:	f001 fe15 	bl	800458c <HAL_ADC_ConfigChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8002968:	f000 fd3a 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20002bf8 	.word	0x20002bf8
 8002978:	40012100 	.word	0x40012100
 800297c:	0f000001 	.word	0x0f000001

08002980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <MX_I2C1_Init+0x54>)
 8002988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_I2C1_Init+0x50>)
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <MX_I2C1_Init+0x58>)
 800298e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_I2C1_Init+0x50>)
 800299e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029be:	f002 ff37 	bl	8005830 <HAL_I2C_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029c8:	f000 fd0a 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20002c40 	.word	0x20002c40
 80029d4:	40005400 	.word	0x40005400
 80029d8:	000186a0 	.word	0x000186a0

080029dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_I2C2_Init+0x54>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_I2C2_Init+0x58>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a14:	2280      	movs	r2, #128	; 0x80
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a1a:	f002 ff09 	bl	8005830 <HAL_I2C_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a24:	f000 fcdc 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002cd4 	.word	0x20002cd4
 8002a30:	40005800 	.word	0x40005800
 8002a34:	000186a0 	.word	0x000186a0

08002a38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <MX_SDIO_SD_Init+0x3c>)
 8002a40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <MX_SDIO_SD_Init+0x38>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	20002ea4 	.word	0x20002ea4
 8002a74:	40012c00 	.word	0x40012c00

08002a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <MX_SPI2_Init+0x68>)
 8002a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <MX_SPI2_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ac4:	220a      	movs	r2, #10
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aca:	f005 fc99 	bl	8008400 <HAL_SPI_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ad4:	f000 fc84 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20002b20 	.word	0x20002b20
 8002ae0:	40003800 	.word	0x40003800

08002ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09a      	sub	sp, #104	; 0x68
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f00b fe60 	bl	800e7b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b02:	f107 0320 	add.w	r3, r7, #32
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b16:	463b      	mov	r3, r7
 8002b18:	2220      	movs	r2, #32
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00b fe4b 	bl	800e7b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b22:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b24:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <MX_TIM1_Init+0x14c>)
 8002b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b28:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b48:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b4e:	4837      	ldr	r0, [pc, #220]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b50:	f005 fd09 	bl	8008566 <HAL_TIM_PWM_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b5a:	f000 fc41 	bl	80033e0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b62:	2300      	movs	r3, #0
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b66:	2301      	movs	r3, #1
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b72:	2300      	movs	r3, #0
 8002b74:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b76:	2301      	movs	r3, #1
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b86:	4619      	mov	r1, r3
 8002b88:	4828      	ldr	r0, [pc, #160]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002b8a:	f005 fd55 	bl	8008638 <HAL_TIM_Encoder_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002b94:	f000 fc24 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002ba8:	f006 fa7c 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8002bb2:	f000 fc15 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	; 0x60
 8002bb8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bd2:	f107 0320 	add.w	r3, r7, #32
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4814      	ldr	r0, [pc, #80]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002bdc:	f005 fefe 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002be6:	f000 fbfb 	bl	80033e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4807      	ldr	r0, [pc, #28]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002c0e:	f006 fac5 	bl	800919c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002c18:	f000 fbe2 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c1c:	4803      	ldr	r0, [pc, #12]	; (8002c2c <MX_TIM1_Init+0x148>)
 8002c1e:	f000 ffa1 	bl	8003b64 <HAL_TIM_MspPostInit>

}
 8002c22:	bf00      	nop
 8002c24:	3768      	adds	r7, #104	; 0x68
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20002e64 	.word	0x20002e64
 8002c30:	40010000 	.word	0x40010000

08002c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3a:	f107 0320 	add.w	r3, r7, #32
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]
 8002c52:	615a      	str	r2, [r3, #20]
 8002c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <MX_TIM3_Init+0xc4>)
 8002c5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c76:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c7c:	481d      	ldr	r0, [pc, #116]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c7e:	f005 fc72 	bl	8008566 <HAL_TIM_PWM_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c88:	f000 fbaa 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c94:	f107 0320 	add.w	r3, r7, #32
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4816      	ldr	r0, [pc, #88]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002c9c:	f006 fa02 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002ca6:	f000 fb9b 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002caa:	2360      	movs	r3, #96	; 0x60
 8002cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002cc2:	f005 fe8b 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ccc:	f000 fb88 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002cd8:	f005 fe80 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002ce2:	f000 fb7d 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ce6:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <MX_TIM3_Init+0xc0>)
 8002ce8:	f000 ff3c 	bl	8003b64 <HAL_TIM_MspPostInit>

}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20002d34 	.word	0x20002d34
 8002cf8:	40000400 	.word	0x40000400

08002cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	615a      	str	r2, [r3, #20]
 8002d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <MX_TIM4_Init+0xc4>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d32:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d44:	481d      	ldr	r0, [pc, #116]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d46:	f005 fc0e 	bl	8008566 <HAL_TIM_PWM_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002d50:	f000 fb46 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d5c:	f107 0320 	add.w	r3, r7, #32
 8002d60:	4619      	mov	r1, r3
 8002d62:	4816      	ldr	r0, [pc, #88]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d64:	f006 f99e 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002d6e:	f000 fb37 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d72:	2360      	movs	r3, #96	; 0x60
 8002d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	2208      	movs	r2, #8
 8002d86:	4619      	mov	r1, r3
 8002d88:	480c      	ldr	r0, [pc, #48]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002d8a:	f005 fe27 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002d94:	f000 fb24 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4807      	ldr	r0, [pc, #28]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002da0:	f005 fe1c 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002daa:	f000 fb19 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002dae:	4803      	ldr	r0, [pc, #12]	; (8002dbc <MX_TIM4_Init+0xc0>)
 8002db0:	f000 fed8 	bl	8003b64 <HAL_TIM_MspPostInit>

}
 8002db4:	bf00      	nop
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20002bb8 	.word	0x20002bb8
 8002dc0:	40000800 	.word	0x40000800

08002dc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dca:	463b      	mov	r3, r7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002dd4:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <MX_TIM6_Init+0x68>)
 8002dd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002dda:	2259      	movs	r2, #89	; 0x59
 8002ddc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002df2:	480d      	ldr	r0, [pc, #52]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002df4:	f005 fb68 	bl	80084c8 <HAL_TIM_Base_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002dfe:	f000 faef 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <MX_TIM6_Init+0x64>)
 8002e10:	f006 f948 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e1a:	f000 fae1 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20002e24 	.word	0x20002e24
 8002e2c:	40001000 	.word	0x40001000

08002e30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e36:	463b      	mov	r3, r7
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <MX_TIM7_Init+0x64>)
 8002e42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e46:	2259      	movs	r2, #89	; 0x59
 8002e48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e52:	2264      	movs	r2, #100	; 0x64
 8002e54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e5e:	f005 fb33 	bl	80084c8 <HAL_TIM_Base_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002e68:	f000 faba 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e74:	463b      	mov	r3, r7
 8002e76:	4619      	mov	r1, r3
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_TIM7_Init+0x60>)
 8002e7a:	f006 f913 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002e84:	f000 faac 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20002fcc 	.word	0x20002fcc
 8002e94:	40001400 	.word	0x40001400

08002e98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00b fc86 	bl	800e7b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002eb6:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <MX_TIM8_Init+0xac>)
 8002eb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ecc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480d      	ldr	r0, [pc, #52]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002f0c:	f005 fb94 	bl	8008638 <HAL_TIM_Encoder_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002f16:	f000 fa63 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4806      	ldr	r0, [pc, #24]	; (8002f40 <MX_TIM8_Init+0xa8>)
 8002f28:	f006 f8bc 	bl	80090a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002f32:	f000 fa55 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	3730      	adds	r7, #48	; 0x30
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20002b78 	.word	0x20002b78
 8002f44:	40010400 	.word	0x40010400

08002f48 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	615a      	str	r2, [r3, #20]
 8002f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f62:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <MX_TIM10_Init+0x98>)
 8002f64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f78:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f86:	4815      	ldr	r0, [pc, #84]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f88:	f005 fa9e 	bl	80084c8 <HAL_TIM_Base_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002f92:	f000 fa25 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002f96:	4811      	ldr	r0, [pc, #68]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002f98:	f005 fae5 	bl	8008566 <HAL_TIM_PWM_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002fa2:	f000 fa1d 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fa6:	2360      	movs	r3, #96	; 0x60
 8002fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4807      	ldr	r0, [pc, #28]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002fbe:	f005 fd0d 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002fc8:	f000 fa0a 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002fcc:	4803      	ldr	r0, [pc, #12]	; (8002fdc <MX_TIM10_Init+0x94>)
 8002fce:	f000 fdc9 	bl	8003b64 <HAL_TIM_MspPostInit>

}
 8002fd2:	bf00      	nop
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20002c94 	.word	0x20002c94
 8002fe0:	40014400 	.word	0x40014400

08002fe4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
 8002ff8:	615a      	str	r2, [r3, #20]
 8002ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <MX_TIM11_Init+0x94>)
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <MX_TIM11_Init+0x98>)
 8003000:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <MX_TIM11_Init+0x94>)
 8003004:	2200      	movs	r2, #0
 8003006:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <MX_TIM11_Init+0x94>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <MX_TIM11_Init+0x94>)
 8003010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003014:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <MX_TIM11_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800301c:	4b16      	ldr	r3, [pc, #88]	; (8003078 <MX_TIM11_Init+0x94>)
 800301e:	2200      	movs	r2, #0
 8003020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003022:	4815      	ldr	r0, [pc, #84]	; (8003078 <MX_TIM11_Init+0x94>)
 8003024:	f005 fa50 	bl	80084c8 <HAL_TIM_Base_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800302e:	f000 f9d7 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003032:	4811      	ldr	r0, [pc, #68]	; (8003078 <MX_TIM11_Init+0x94>)
 8003034:	f005 fa97 	bl	8008566 <HAL_TIM_PWM_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800303e:	f000 f9cf 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003042:	2360      	movs	r3, #96	; 0x60
 8003044:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	2200      	movs	r2, #0
 8003056:	4619      	mov	r1, r3
 8003058:	4807      	ldr	r0, [pc, #28]	; (8003078 <MX_TIM11_Init+0x94>)
 800305a:	f005 fcbf 	bl	80089dc <HAL_TIM_PWM_ConfigChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003064:	f000 f9bc 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003068:	4803      	ldr	r0, [pc, #12]	; (8003078 <MX_TIM11_Init+0x94>)
 800306a:	f000 fd7b 	bl	8003b64 <HAL_TIM_MspPostInit>

}
 800306e:	bf00      	nop
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20002d7c 	.word	0x20002d7c
 800307c:	40014800 	.word	0x40014800

08003080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <MX_USART2_UART_Init+0x50>)
 8003088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 800308c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 80030a6:	220c      	movs	r2, #12
 80030a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030b6:	4805      	ldr	r0, [pc, #20]	; (80030cc <MX_USART2_UART_Init+0x4c>)
 80030b8:	f006 f8d6 	bl	8009268 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030c2:	f000 f98d 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20002f2c 	.word	0x20002f2c
 80030d0:	40004400 	.word	0x40004400

080030d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <MX_DMA_Init+0x5c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <MX_DMA_Init+0x5c>)
 80030e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_DMA_Init+0x5c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	203a      	movs	r0, #58	; 0x3a
 80030fc:	f001 fdd1 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003100:	203a      	movs	r0, #58	; 0x3a
 8003102:	f001 fdea 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	203b      	movs	r0, #59	; 0x3b
 800310c:	f001 fdc9 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003110:	203b      	movs	r0, #59	; 0x3b
 8003112:	f001 fde2 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	2045      	movs	r0, #69	; 0x45
 800311c:	f001 fdc1 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003120:	2045      	movs	r0, #69	; 0x45
 8003122:	f001 fdda 	bl	8004cda <HAL_NVIC_EnableIRQ>

}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	4b9c      	ldr	r3, [pc, #624]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a9b      	ldr	r2, [pc, #620]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003154:	f043 0310 	orr.w	r3, r3, #16
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b99      	ldr	r3, [pc, #612]	; (80033c0 <MX_GPIO_Init+0x28c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	4b95      	ldr	r3, [pc, #596]	; (80033c0 <MX_GPIO_Init+0x28c>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a94      	ldr	r2, [pc, #592]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a8d      	ldr	r2, [pc, #564]	; (80033c0 <MX_GPIO_Init+0x28c>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b8b      	ldr	r3, [pc, #556]	; (80033c0 <MX_GPIO_Init+0x28c>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a86      	ldr	r2, [pc, #536]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a7f      	ldr	r2, [pc, #508]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b7d      	ldr	r3, [pc, #500]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a78      	ldr	r2, [pc, #480]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <MX_GPIO_Init+0x28c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031f8:	4872      	ldr	r0, [pc, #456]	; (80033c4 <MX_GPIO_Init+0x290>)
 80031fa:	f002 fae7 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003204:	4870      	ldr	r0, [pc, #448]	; (80033c8 <MX_GPIO_Init+0x294>)
 8003206:	f002 fae1 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003210:	486e      	ldr	r0, [pc, #440]	; (80033cc <MX_GPIO_Init+0x298>)
 8003212:	f002 fadb 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003216:	2200      	movs	r2, #0
 8003218:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800321c:	486c      	ldr	r0, [pc, #432]	; (80033d0 <MX_GPIO_Init+0x29c>)
 800321e:	f002 fad5 	bl	80057cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003222:	2304      	movs	r3, #4
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003226:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <MX_GPIO_Init+0x2a0>)
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4863      	ldr	r0, [pc, #396]	; (80033c4 <MX_GPIO_Init+0x290>)
 8003236:	f002 f907 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800323a:	230f      	movs	r3, #15
 800323c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323e:	2303      	movs	r3, #3
 8003240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	4862      	ldr	r0, [pc, #392]	; (80033d8 <MX_GPIO_Init+0x2a4>)
 800324e:	f002 f8fb 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003252:	23e1      	movs	r3, #225	; 0xe1
 8003254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003256:	2303      	movs	r3, #3
 8003258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	485a      	ldr	r0, [pc, #360]	; (80033d0 <MX_GPIO_Init+0x29c>)
 8003266:	f002 f8ef 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800326a:	2303      	movs	r3, #3
 800326c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	4852      	ldr	r0, [pc, #328]	; (80033c8 <MX_GPIO_Init+0x294>)
 800327e:	f002 f8e3 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003282:	2304      	movs	r3, #4
 8003284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800328a:	2301      	movs	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	4619      	mov	r1, r3
 8003294:	484c      	ldr	r0, [pc, #304]	; (80033c8 <MX_GPIO_Init+0x294>)
 8003296:	f002 f8d7 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800329a:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800329e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a0:	2300      	movs	r3, #0
 80032a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	4619      	mov	r1, r3
 80032ae:	4845      	ldr	r0, [pc, #276]	; (80033c4 <MX_GPIO_Init+0x290>)
 80032b0:	f002 f8ca 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ba:	2301      	movs	r3, #1
 80032bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	483d      	ldr	r0, [pc, #244]	; (80033c4 <MX_GPIO_Init+0x290>)
 80032ce:	f002 f8bb 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	4837      	ldr	r0, [pc, #220]	; (80033c8 <MX_GPIO_Init+0x294>)
 80032ec:	f002 f8ac 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <MX_GPIO_Init+0x2a8>)
 80032f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032fe:	f107 031c 	add.w	r3, r7, #28
 8003302:	4619      	mov	r1, r3
 8003304:	4831      	ldr	r0, [pc, #196]	; (80033cc <MX_GPIO_Init+0x298>)
 8003306:	f002 f89f 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800330a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800330e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	482a      	ldr	r0, [pc, #168]	; (80033cc <MX_GPIO_Init+0x298>)
 8003324:	f002 f890 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	4822      	ldr	r0, [pc, #136]	; (80033cc <MX_GPIO_Init+0x298>)
 8003342:	f002 f881 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003346:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800334a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334c:	2301      	movs	r3, #1
 800334e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	481c      	ldr	r0, [pc, #112]	; (80033d0 <MX_GPIO_Init+0x29c>)
 8003360:	f002 f872 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003372:	f107 031c 	add.w	r3, r7, #28
 8003376:	4619      	mov	r1, r3
 8003378:	4815      	ldr	r0, [pc, #84]	; (80033d0 <MX_GPIO_Init+0x29c>)
 800337a:	f002 f865 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800337e:	239b      	movs	r3, #155	; 0x9b
 8003380:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003386:	2301      	movs	r3, #1
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	480e      	ldr	r0, [pc, #56]	; (80033cc <MX_GPIO_Init+0x298>)
 8003392:	f002 f859 	bl	8005448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	2008      	movs	r0, #8
 800339c:	f001 fc81 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80033a0:	2008      	movs	r0, #8
 80033a2:	f001 fc9a 	bl	8004cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	2017      	movs	r0, #23
 80033ac:	f001 fc79 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033b0:	2017      	movs	r0, #23
 80033b2:	f001 fc92 	bl	8004cda <HAL_NVIC_EnableIRQ>

}
 80033b6:	bf00      	nop
 80033b8:	3730      	adds	r7, #48	; 0x30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40020000 	.word	0x40020000
 80033d4:	10310000 	.word	0x10310000
 80033d8:	40020800 	.word	0x40020800
 80033dc:	10110000 	.word	0x10110000

080033e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <Error_Handler+0x6>

080033e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_MspInit+0x4c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <HAL_MspInit+0x4c>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_MspInit+0x4c>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_MspInit+0x4c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_MspInit+0x4c>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_MspInit+0x4c>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	; 0x30
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <HAL_ADC_MspInit+0x148>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f040 808e 	bne.w	8003578 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	4a47      	ldr	r2, [pc, #284]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 8003466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346a:	6453      	str	r3, [r2, #68]	; 0x44
 800346c:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	4b41      	ldr	r3, [pc, #260]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a40      	ldr	r2, [pc, #256]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4a39      	ldr	r2, [pc, #228]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6313      	str	r3, [r2, #48]	; 0x30
 80034a4:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_ADC_MspInit+0x14c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80034cc:	230f      	movs	r3, #15
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d0:	2303      	movs	r3, #3
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	482a      	ldr	r0, [pc, #168]	; (8003588 <HAL_ADC_MspInit+0x150>)
 80034e0:	f001 ffb2 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034e4:	23ff      	movs	r3, #255	; 0xff
 80034e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e8:	2303      	movs	r3, #3
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	4619      	mov	r1, r3
 80034f6:	4825      	ldr	r0, [pc, #148]	; (800358c <HAL_ADC_MspInit+0x154>)
 80034f8:	f001 ffa6 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034fc:	2303      	movs	r3, #3
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003500:	2303      	movs	r3, #3
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	4619      	mov	r1, r3
 800350e:	4820      	ldr	r0, [pc, #128]	; (8003590 <HAL_ADC_MspInit+0x158>)
 8003510:	f001 ff9a 	bl	8005448 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003516:	4a20      	ldr	r2, [pc, #128]	; (8003598 <HAL_ADC_MspInit+0x160>)
 8003518:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 800351c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003520:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800353c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003544:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003554:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 800355e:	f001 fbd7 	bl	8004d10 <HAL_DMA_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003568:	f7ff ff3a 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_ADC_MspInit+0x15c>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003578:	bf00      	nop
 800357a:	3730      	adds	r7, #48	; 0x30
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40012100 	.word	0x40012100
 8003584:	40023800 	.word	0x40023800
 8003588:	40020800 	.word	0x40020800
 800358c:	40020000 	.word	0x40020000
 8003590:	40020400 	.word	0x40020400
 8003594:	20002f6c 	.word	0x20002f6c
 8003598:	40026440 	.word	0x40026440

0800359c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a32      	ldr	r2, [pc, #200]	; (8003684 <HAL_I2C_MspInit+0xe8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12c      	bne.n	8003618 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_I2C_MspInit+0xec>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a30      	ldr	r2, [pc, #192]	; (8003688 <HAL_I2C_MspInit+0xec>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_I2C_MspInit+0xec>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035da:	23c0      	movs	r3, #192	; 0xc0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035de:	2312      	movs	r3, #18
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e6:	2303      	movs	r3, #3
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ea:	2304      	movs	r3, #4
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	4825      	ldr	r0, [pc, #148]	; (800368c <HAL_I2C_MspInit+0xf0>)
 80035f6:	f001 ff27 	bl	8005448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a21      	ldr	r2, [pc, #132]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_I2C_MspInit+0xec>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003616:	e031      	b.n	800367c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <HAL_I2C_MspInit+0xf4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d12c      	bne.n	800367c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_I2C_MspInit+0xec>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800363e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003644:	2312      	movs	r3, #18
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003650:	2304      	movs	r3, #4
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	4619      	mov	r1, r3
 800365a:	480c      	ldr	r0, [pc, #48]	; (800368c <HAL_I2C_MspInit+0xf0>)
 800365c:	f001 fef4 	bl	8005448 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_I2C_MspInit+0xec>)
 800366a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800366e:	6413      	str	r3, [r2, #64]	; 0x40
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_I2C_MspInit+0xec>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	bf00      	nop
 800367e:	3730      	adds	r7, #48	; 0x30
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40005400 	.word	0x40005400
 8003688:	40023800 	.word	0x40023800
 800368c:	40020400 	.word	0x40020400
 8003690:	40005800 	.word	0x40005800

08003694 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a69      	ldr	r2, [pc, #420]	; (8003858 <HAL_SD_MspInit+0x1c4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f040 80cb 	bne.w	800384e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036c6:	6453      	str	r3, [r2, #68]	; 0x44
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	4b60      	ldr	r3, [pc, #384]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a5f      	ldr	r2, [pc, #380]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
 80036e4:	4b5d      	ldr	r3, [pc, #372]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_SD_MspInit+0x1c8>)
 80036fa:	f043 0308 	orr.w	r3, r3, #8
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <HAL_SD_MspInit+0x1c8>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800370c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003710:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371a:	2303      	movs	r3, #3
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800371e:	230c      	movs	r3, #12
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	484d      	ldr	r0, [pc, #308]	; (8003860 <HAL_SD_MspInit+0x1cc>)
 800372a:	f001 fe8d 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800372e:	2304      	movs	r3, #4
 8003730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800373e:	230c      	movs	r3, #12
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	4619      	mov	r1, r3
 8003748:	4846      	ldr	r0, [pc, #280]	; (8003864 <HAL_SD_MspInit+0x1d0>)
 800374a:	f001 fe7d 	bl	8005448 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800374e:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003750:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_SD_MspInit+0x1d8>)
 8003752:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003754:	4b44      	ldr	r3, [pc, #272]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 800376a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003770:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003776:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003778:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 800377a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800377e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003780:	4b39      	ldr	r3, [pc, #228]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003782:	2220      	movs	r2, #32
 8003784:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003788:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800378c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800378e:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003790:	2204      	movs	r2, #4
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 8003796:	2203      	movs	r2, #3
 8003798:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800379a:	4b33      	ldr	r3, [pc, #204]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 800379c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 80037a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80037aa:	482f      	ldr	r0, [pc, #188]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 80037ac:	f001 fab0 	bl	8004d10 <HAL_DMA_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80037b6:	f7ff fe13 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
 80037c0:	4a29      	ldr	r2, [pc, #164]	; (8003868 <HAL_SD_MspInit+0x1d4>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_SD_MspInit+0x1e0>)
 80037ca:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037da:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ee:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 80037fa:	2220      	movs	r2, #32
 80037fc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 8003800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003804:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 8003808:	2204      	movs	r2, #4
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800380c:	4b18      	ldr	r3, [pc, #96]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 800380e:	2203      	movs	r2, #3
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 8003814:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 800381c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003822:	4813      	ldr	r0, [pc, #76]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 8003824:	f001 fa74 	bl	8004d10 <HAL_DMA_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800382e:	f7ff fdd7 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <HAL_SD_MspInit+0x1dc>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2031      	movs	r0, #49	; 0x31
 8003844:	f001 fa2d 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003848:	2031      	movs	r0, #49	; 0x31
 800384a:	f001 fa46 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800384e:	bf00      	nop
 8003850:	3728      	adds	r7, #40	; 0x28
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40023800 	.word	0x40023800
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	20002abc 	.word	0x20002abc
 800386c:	40026458 	.word	0x40026458
 8003870:	20002dc0 	.word	0x20002dc0
 8003874:	400264a0 	.word	0x400264a0

08003878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_SPI_MspInit+0x84>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d12c      	bne.n	80038f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_SPI_MspInit+0x88>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038e4:	2305      	movs	r3, #5
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	4805      	ldr	r0, [pc, #20]	; (8003904 <HAL_SPI_MspInit+0x8c>)
 80038f0:	f001 fdaa 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80038f4:	bf00      	nop
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40003800 	.word	0x40003800
 8003900:	40023800 	.word	0x40023800
 8003904:	40020400 	.word	0x40020400

08003908 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_TIM_PWM_MspInit+0xd4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12d      	bne.n	8003986 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003962:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003974:	2301      	movs	r3, #1
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	4619      	mov	r1, r3
 800397e:	4819      	ldr	r0, [pc, #100]	; (80039e4 <HAL_TIM_PWM_MspInit+0xdc>)
 8003980:	f001 fd62 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003984:	e026      	b.n	80039d4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <HAL_TIM_PWM_MspInit+0xe0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	693b      	ldr	r3, [r7, #16]
}
 80039ac:	e012      	b.n	80039d4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_TIM_PWM_MspInit+0xe4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_TIM_PWM_MspInit+0xd8>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3730      	adds	r7, #48	; 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800

080039f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_TIM_Base_MspInit+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d116      	bne.n	8003a30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	2036      	movs	r0, #54	; 0x36
 8003a24:	f001 f93d 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a28:	2036      	movs	r0, #54	; 0x36
 8003a2a:	f001 f956 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003a2e:	e042      	b.n	8003ab6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d116      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a44:	f043 0320 	orr.w	r3, r3, #32
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2037      	movs	r0, #55	; 0x37
 8003a5c:	f001 f921 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a60:	2037      	movs	r0, #55	; 0x37
 8003a62:	f001 f93a 	bl	8004cda <HAL_NVIC_EnableIRQ>
}
 8003a66:	e026      	b.n	8003ab6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_TIM_Base_MspInit+0xdc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	e012      	b.n	8003ab6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <HAL_TIM_Base_MspInit+0xe0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40001000 	.word	0x40001000
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40001400 	.word	0x40001400
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_TIM_Encoder_MspInit+0x84>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d12b      	bne.n	8003b4e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6453      	str	r3, [r2, #68]	; 0x44
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_TIM_Encoder_MspInit+0x88>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b2e:	23c0      	movs	r3, #192	; 0xc0
 8003b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	4805      	ldr	r0, [pc, #20]	; (8003b60 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003b4a:	f001 fc7d 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40020800 	.word	0x40020800

08003b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_TIM_MspPostInit+0x190>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d11f      	bne.n	8003bc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a5a      	ldr	r2, [pc, #360]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	484f      	ldr	r0, [pc, #316]	; (8003cfc <HAL_TIM_MspPostInit+0x198>)
 8003bc0:	f001 fc42 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003bc4:	e091      	b.n	8003cea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_TIM_MspPostInit+0x19c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d11e      	bne.n	8003c0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	6313      	str	r3, [r2, #48]	; 0x30
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bec:	2330      	movs	r3, #48	; 0x30
 8003bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	483f      	ldr	r0, [pc, #252]	; (8003d04 <HAL_TIM_MspPostInit+0x1a0>)
 8003c08:	f001 fc1e 	bl	8005448 <HAL_GPIO_Init>
}
 8003c0c:	e06d      	b.n	8003cea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <HAL_TIM_MspPostInit+0x1a4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d11f      	bne.n	8003c58 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c22:	f043 0308 	orr.w	r3, r3, #8
 8003c26:	6313      	str	r3, [r2, #48]	; 0x30
 8003c28:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003c34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c46:	2302      	movs	r3, #2
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	482e      	ldr	r0, [pc, #184]	; (8003d0c <HAL_TIM_MspPostInit+0x1a8>)
 8003c52:	f001 fbf9 	bl	8005448 <HAL_GPIO_Init>
}
 8003c56:	e048      	b.n	8003cea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_TIM_MspPostInit+0x1ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d11f      	bne.n	8003ca2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003c90:	2303      	movs	r3, #3
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	4619      	mov	r1, r3
 8003c9a:	481a      	ldr	r0, [pc, #104]	; (8003d04 <HAL_TIM_MspPostInit+0x1a0>)
 8003c9c:	f001 fbd4 	bl	8005448 <HAL_GPIO_Init>
}
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_TIM_MspPostInit+0x1b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d11e      	bne.n	8003cea <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <HAL_TIM_MspPostInit+0x194>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	f107 031c 	add.w	r3, r7, #28
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4807      	ldr	r0, [pc, #28]	; (8003d04 <HAL_TIM_MspPostInit+0x1a0>)
 8003ce6:	f001 fbaf 	bl	8005448 <HAL_GPIO_Init>
}
 8003cea:	bf00      	nop
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_UART_MspInit+0x84>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d12b      	bne.n	8003d92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d60:	f043 0308 	orr.w	r3, r3, #8
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_UART_MspInit+0x88>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d72:	2360      	movs	r3, #96	; 0x60
 8003d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d82:	2307      	movs	r3, #7
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4805      	ldr	r0, [pc, #20]	; (8003da4 <HAL_UART_MspInit+0x8c>)
 8003d8e:	f001 fb5b 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d92:	bf00      	nop
 8003d94:	3728      	adds	r7, #40	; 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40004400 	.word	0x40004400
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40020c00 	.word	0x40020c00

08003da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <NMI_Handler+0x4>

08003dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <HardFault_Handler+0x4>

08003db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <MemManage_Handler+0x4>

08003dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <BusFault_Handler+0x4>

08003dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <UsageFault_Handler+0x4>

08003dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df4:	f000 fa34 	bl	8004260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003e00:	2004      	movs	r0, #4
 8003e02:	f001 fcfd 	bl	8005800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e12:	f001 fcf5 	bl	8005800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <SDIO_IRQHandler+0x10>)
 8003e22:	f003 fa69 	bl	80072f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20002ea4 	.word	0x20002ea4

08003e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <TIM6_DAC_IRQHandler+0x10>)
 8003e36:	f004 fcc8 	bl	80087ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20002e24 	.word	0x20002e24

08003e44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e48:	4802      	ldr	r0, [pc, #8]	; (8003e54 <TIM7_IRQHandler+0x10>)
 8003e4a:	f004 fcbe 	bl	80087ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20002fcc 	.word	0x20002fcc

08003e58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <DMA2_Stream2_IRQHandler+0x10>)
 8003e5e:	f001 f87f 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20002f6c 	.word	0x20002f6c

08003e6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <DMA2_Stream3_IRQHandler+0x10>)
 8003e72:	f001 f875 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20002abc 	.word	0x20002abc

08003e80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <DMA2_Stream6_IRQHandler+0x10>)
 8003e86:	f001 f86b 	bl	8004f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20002dc0 	.word	0x20002dc0

08003e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e00a      	b.n	8003ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ea6:	f3af 8000 	nop.w
 8003eaa:	4601      	mov	r1, r0
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	60ba      	str	r2, [r7, #8]
 8003eb2:	b2ca      	uxtb	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	dbf0      	blt.n	8003ea6 <_read+0x12>
	}

return len;
 8003ec4:	687b      	ldr	r3, [r7, #4]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <_isatty>:

int _isatty(int file)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f0e:	2301      	movs	r3, #1
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
	return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <_sbrk+0x5c>)
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <_sbrk+0x60>)
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <_sbrk+0x64>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <_sbrk+0x64>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <_sbrk+0x68>)
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <_sbrk+0x64>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d207      	bcs.n	8003f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f68:	f00a fbfc 	bl	800e764 <__errno>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	230c      	movs	r3, #12
 8003f70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	e009      	b.n	8003f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <_sbrk+0x64>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <_sbrk+0x64>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <_sbrk+0x64>)
 8003f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20050000 	.word	0x20050000
 8003f98:	00000400 	.word	0x00000400
 8003f9c:	20000208 	.word	0x20000208
 8003fa0:	20005088 	.word	0x20005088

08003fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <SystemInit+0x28>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <SystemInit+0x28>)
 8003fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <SystemInit+0x28>)
 8003fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <cppInit>:
LineTrace line_trace(&motor, &line_sensor);

float velocity;

void cppInit(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 8003fd4:	480b      	ldr	r0, [pc, #44]	; (8004004 <cppInit+0x34>)
 8003fd6:	f7fd fba3 	bl	8001720 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8003fda:	480b      	ldr	r0, [pc, #44]	; (8004008 <cppInit+0x38>)
 8003fdc:	f7fe f86a 	bl	80020b4 <_ZN5Motor4initEv>
	encoder.init();
 8003fe0:	480a      	ldr	r0, [pc, #40]	; (800400c <cppInit+0x3c>)
 8003fe2:	f7fd f859 	bl	8001098 <_ZN7Encoder4initEv>

	//velocity_ctrl.setVelocityGain(1, 0, 0);

	//line_sensor.updateSensorValues();
	line_sensor.calibration();
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <cppInit+0x34>)
 8003fe8:	f7fd fc90 	bl	800190c <_ZN10LineSensor11calibrationEv>

	line_trace.setGain(0.0005, 0.000003, 0);
 8003fec:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8004010 <cppInit+0x40>
 8003ff0:	eddf 0a08 	vldr	s1, [pc, #32]	; 8004014 <cppInit+0x44>
 8003ff4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004018 <cppInit+0x48>
 8003ff8:	4808      	ldr	r0, [pc, #32]	; (800401c <cppInit+0x4c>)
 8003ffa:	f7fd fff5 	bl	8001fe8 <_ZN9LineTrace7setGainEfff>
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	2000020c 	.word	0x2000020c
 8004008:	20000510 	.word	0x20000510
 800400c:	20000518 	.word	0x20000518
 8004010:	00000000 	.word	0x00000000
 8004014:	3649539c 	.word	0x3649539c
 8004018:	3a03126f 	.word	0x3a03126f
 800401c:	20000550 	.word	0x20000550

08004020 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8004024:	4808      	ldr	r0, [pc, #32]	; (8004048 <cppFlip1ms+0x28>)
 8004026:	f7fd fbd9 	bl	80017dc <_ZN10LineSensor18updateSensorValuesEv>
	encoder.updateCnt();
 800402a:	4808      	ldr	r0, [pc, #32]	; (800404c <cppFlip1ms+0x2c>)
 800402c:	f7fd f854 	bl	80010d8 <_ZN7Encoder9updateCntEv>



	//velocity = velocity_ctrl.flip();
	line_trace.flip();
 8004030:	4807      	ldr	r0, [pc, #28]	; (8004050 <cppFlip1ms+0x30>)
 8004032:	f7fd fff5 	bl	8002020 <_ZN9LineTrace4flipEv>



	motor.motorCtrl();
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <cppFlip1ms+0x34>)
 8004038:	f7fe f84e 	bl	80020d8 <_ZN5Motor9motorCtrlEv>
	encoder.clearCnt();
 800403c:	4803      	ldr	r0, [pc, #12]	; (800404c <cppFlip1ms+0x2c>)
 800403e:	f7fd f863 	bl	8001108 <_ZN7Encoder8clearCntEv>

}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000020c 	.word	0x2000020c
 800404c:	20000518 	.word	0x20000518
 8004050:	20000550 	.word	0x20000550
 8004054:	20000510 	.word	0x20000510

08004058 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800405c:	4804      	ldr	r0, [pc, #16]	; (8004070 <cppFlip100ns+0x18>)
 800405e:	f7fd fb6f 	bl	8001740 <_ZN10LineSensor17storeSensorValuesEv>

	if(rotary_switch.getValue() == 1){
 8004062:	4804      	ldr	r0, [pc, #16]	; (8004074 <cppFlip100ns+0x1c>)
 8004064:	f7fe f8fa 	bl	800225c <_ZN12RotarySwitch8getValueEv>
 8004068:	4603      	mov	r3, r0
 800406a:	2b01      	cmp	r3, #1
	else{
		//line_trace.stop();
		//line_trace.setNormalRatio(0.0);
	}

}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000020c 	.word	0x2000020c
 8004074:	2000050c 	.word	0x2000050c

08004078 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4619      	mov	r1, r3
 8004086:	4803      	ldr	r0, [pc, #12]	; (8004094 <cppExit+0x1c>)
 8004088:	f7fe f942 	bl	8002310 <_ZN10SideSensor12updateStatusEt>
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000504 	.word	0x20000504

08004098 <cppLoop>:

void cppLoop(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	//int16_t enc_l, enc_r;
	//encoder.getCnt(enc_l, enc_r);
	//printf("velo: %d, %d\n", enc_l, enc_r);

	//line_sensor.updateSensorValues();
	line_sensor.printSensorValues();
 800409c:	4810      	ldr	r0, [pc, #64]	; (80040e0 <cppLoop+0x48>)
 800409e:	f7fd fd99 	bl	8001bd4 <_ZN10LineSensor17printSensorValuesEv>

	led.fullColor('C');
 80040a2:	2143      	movs	r1, #67	; 0x43
 80040a4:	480f      	ldr	r0, [pc, #60]	; (80040e4 <cppLoop+0x4c>)
 80040a6:	f7fd f9df 	bl	8001468 <_ZN3LED9fullColorEc>
	led.LR(-1, 1);
 80040aa:	2201      	movs	r2, #1
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	480c      	ldr	r0, [pc, #48]	; (80040e4 <cppLoop+0x4c>)
 80040b2:	f7fd fa95 	bl	80015e0 <_ZN3LED2LREaa>

	HAL_Delay(1000);
 80040b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ba:	f000 f8f1 	bl	80042a0 <HAL_Delay>

	//motor.setRatio(0, -0.5);
	//velocity_ctrl.setOmegaGain(1, 1, 1);
	led.fullColor('Y');
 80040be:	2159      	movs	r1, #89	; 0x59
 80040c0:	4808      	ldr	r0, [pc, #32]	; (80040e4 <cppLoop+0x4c>)
 80040c2:	f7fd f9d1 	bl	8001468 <_ZN3LED9fullColorEc>
	led.LR(-1, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <cppLoop+0x4c>)
 80040ce:	f7fd fa87 	bl	80015e0 <_ZN3LED2LREaa>

	HAL_Delay(1000);
 80040d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d6:	f000 f8e3 	bl	80042a0 <HAL_Delay>

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	2000020c 	.word	0x2000020c
 80040e4:	20000514 	.word	0x20000514

080040e8 <_Z41__static_initialization_and_destruction_0ii>:
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d11d      	bne.n	8004134 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fe:	4293      	cmp	r3, r2
 8004100:	d118      	bne.n	8004134 <_Z41__static_initialization_and_destruction_0ii+0x4c>
LineSensor line_sensor;
 8004102:	480e      	ldr	r0, [pc, #56]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004104:	f7fd faa4 	bl	8001650 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8004108:	480d      	ldr	r0, [pc, #52]	; (8004140 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800410a:	f7fe f8f5 	bl	80022f8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800410e:	480d      	ldr	r0, [pc, #52]	; (8004144 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004110:	f7fd f93a 	bl	8001388 <_ZN8JoyStickC1Ev>
Motor motor;
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004116:	f7fd ffbb 	bl	8002090 <_ZN5MotorC1Ev>
Encoder encoder;
 800411a:	480c      	ldr	r0, [pc, #48]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800411c:	f7fc ffa8 	bl	8001070 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder);
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004122:	4909      	ldr	r1, [pc, #36]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004124:	480a      	ldr	r0, [pc, #40]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004126:	f7fe f951 	bl	80023cc <_ZN12VelocityCtrlC1EP5MotorP7Encoder>
LineTrace line_trace(&motor, &line_sensor);
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800412c:	4906      	ldr	r1, [pc, #24]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800412e:	4809      	ldr	r0, [pc, #36]	; (8004154 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004130:	f7fd fe36 	bl	8001da0 <_ZN9LineTraceC1EP5MotorP10LineSensor>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000020c 	.word	0x2000020c
 8004140:	20000504 	.word	0x20000504
 8004144:	20000508 	.word	0x20000508
 8004148:	20000510 	.word	0x20000510
 800414c:	20000518 	.word	0x20000518
 8004150:	2000051c 	.word	0x2000051c
 8004154:	20000550 	.word	0x20000550

08004158 <_GLOBAL__sub_I_line_sensor>:
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
 800415c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004160:	2001      	movs	r0, #1
 8004162:	f7ff ffc1 	bl	80040e8 <_Z41__static_initialization_and_destruction_0ii>
 8004166:	bd80      	pop	{r7, pc}

08004168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800416c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800416e:	e003      	b.n	8004178 <LoopCopyDataInit>

08004170 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004172:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004174:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004176:	3104      	adds	r1, #4

08004178 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004178:	480b      	ldr	r0, [pc, #44]	; (80041a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800417c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800417e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004180:	d3f6      	bcc.n	8004170 <CopyDataInit>
  ldr  r2, =_sbss
 8004182:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004184:	e002      	b.n	800418c <LoopFillZerobss>

08004186 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004186:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004188:	f842 3b04 	str.w	r3, [r2], #4

0800418c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800418e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004190:	d3f9      	bcc.n	8004186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004192:	f7ff ff07 	bl	8003fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004196:	f00a faeb 	bl	800e770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800419a:	f7fe fa2d 	bl	80025f8 <main>
  bx  lr    
 800419e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041a0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80041a4:	08013e98 	.word	0x08013e98
  ldr  r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041ac:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80041b0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80041b4:	20005088 	.word	0x20005088

080041b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041b8:	e7fe      	b.n	80041b8 <ADC_IRQHandler>
	...

080041bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041c0:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_Init+0x40>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <HAL_Init+0x40>)
 80041c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_Init+0x40>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_Init+0x40>)
 80041d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_Init+0x40>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <HAL_Init+0x40>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e4:	2003      	movs	r0, #3
 80041e6:	f000 fd51 	bl	8004c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f000 f808 	bl	8004200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041f0:	f7ff f8fa 	bl	80033e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00

08004200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <HAL_InitTick+0x54>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_InitTick+0x58>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4619      	mov	r1, r3
 8004212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004216:	fbb3 f3f1 	udiv	r3, r3, r1
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fd69 	bl	8004cf6 <HAL_SYSTICK_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e00e      	b.n	800424c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b0f      	cmp	r3, #15
 8004232:	d80a      	bhi.n	800424a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004234:	2200      	movs	r2, #0
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	f000 fd31 	bl	8004ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004240:	4a06      	ldr	r2, [pc, #24]	; (800425c <HAL_InitTick+0x5c>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e000      	b.n	800424c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000000 	.word	0x20000000
 8004258:	20000008 	.word	0x20000008
 800425c:	20000004 	.word	0x20000004

08004260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_IncTick+0x20>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_IncTick+0x24>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4413      	add	r3, r2
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_IncTick+0x24>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000008 	.word	0x20000008
 8004284:	2000300c 	.word	0x2000300c

08004288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return uwTick;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_GetTick+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	2000300c 	.word	0x2000300c

080042a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a8:	f7ff ffee 	bl	8004288 <HAL_GetTick>
 80042ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d005      	beq.n	80042c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_Delay+0x40>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042c6:	bf00      	nop
 80042c8:	f7ff ffde 	bl	8004288 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d8f7      	bhi.n	80042c8 <HAL_Delay+0x28>
  {
  }
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000008 	.word	0x20000008

080042e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e033      	b.n	8004362 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff f898 	bl	8003438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800432a:	f023 0302 	bic.w	r3, r3, #2
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa5a 	bl	80047f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
 8004352:	e001      	b.n	8004358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_ADC_Start_DMA+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0cc      	b.n	8004524 <HAL_ADC_Start_DMA+0x1b8>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d018      	beq.n	80043d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043b0:	4b5e      	ldr	r3, [pc, #376]	; (800452c <HAL_ADC_Start_DMA+0x1c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5e      	ldr	r2, [pc, #376]	; (8004530 <HAL_ADC_Start_DMA+0x1c4>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0c9a      	lsrs	r2, r3, #18
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043c4:	e002      	b.n	80043cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f9      	bne.n	80043c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 80a0 	bne.w	8004522 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800440c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d106      	bne.n	8004430 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f023 0206 	bic.w	r2, r3, #6
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
 800442e:	e002      	b.n	8004436 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800443e:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_ADC_Start_DMA+0x1c8>)
 8004440:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_ADC_Start_DMA+0x1cc>)
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <HAL_ADC_Start_DMA+0x1d0>)
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	4a3a      	ldr	r2, [pc, #232]	; (8004540 <HAL_ADC_Start_DMA+0x1d4>)
 8004458:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004462:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004472:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004482:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	334c      	adds	r3, #76	; 0x4c
 800448e:	4619      	mov	r1, r3
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f000 fcea 	bl	8004e6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d12a      	bne.n	80044fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <HAL_ADC_Start_DMA+0x1d8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d015      	beq.n	80044da <HAL_ADC_Start_DMA+0x16e>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <HAL_ADC_Start_DMA+0x1dc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_Start_DMA+0x158>
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_ADC_Start_DMA+0x1c8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <HAL_ADC_Start_DMA+0x1e0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d129      	bne.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
 80044ce:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_ADC_Start_DMA+0x1c8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d823      	bhi.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11c      	bne.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e013      	b.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HAL_ADC_Start_DMA+0x1d8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10e      	bne.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004520:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000000 	.word	0x20000000
 8004530:	431bde83 	.word	0x431bde83
 8004534:	40012300 	.word	0x40012300
 8004538:	080049e9 	.word	0x080049e9
 800453c:	08004aa3 	.word	0x08004aa3
 8004540:	08004abf 	.word	0x08004abf
 8004544:	40012000 	.word	0x40012000
 8004548:	40012100 	.word	0x40012100
 800454c:	40012200 	.word	0x40012200

08004550 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x1c>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e113      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x244>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b09      	cmp	r3, #9
 80045b6:	d925      	bls.n	8004604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	3b1e      	subs	r3, #30
 80045ce:	2207      	movs	r2, #7
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43da      	mvns	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	400a      	ands	r2, r1
 80045dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68d9      	ldr	r1, [r3, #12]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	4618      	mov	r0, r3
 80045f0:	4603      	mov	r3, r0
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4403      	add	r3, r0
 80045f6:	3b1e      	subs	r3, #30
 80045f8:	409a      	lsls	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	e022      	b.n	800464a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6919      	ldr	r1, [r3, #16]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	2207      	movs	r2, #7
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	400a      	ands	r2, r1
 8004626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4618      	mov	r0, r3
 800463a:	4603      	mov	r3, r0
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4403      	add	r3, r0
 8004640:	409a      	lsls	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d824      	bhi.n	800469c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	3b05      	subs	r3, #5
 8004664:	221f      	movs	r2, #31
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	400a      	ands	r2, r1
 8004672:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	3b05      	subs	r3, #5
 800468e:	fa00 f203 	lsl.w	r2, r0, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
 800469a:	e04c      	b.n	8004736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d824      	bhi.n	80046ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	3b23      	subs	r3, #35	; 0x23
 80046b6:	221f      	movs	r2, #31
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43da      	mvns	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	400a      	ands	r2, r1
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	3b23      	subs	r3, #35	; 0x23
 80046e0:	fa00 f203 	lsl.w	r2, r0, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
 80046ec:	e023      	b.n	8004736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	3b41      	subs	r3, #65	; 0x41
 8004700:	221f      	movs	r2, #31
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43da      	mvns	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	400a      	ands	r2, r1
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	3b41      	subs	r3, #65	; 0x41
 800472a:	fa00 f203 	lsl.w	r2, r0, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_ADC_ConfigChannel+0x250>)
 8004738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <HAL_ADC_ConfigChannel+0x254>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10f      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x1d8>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b12      	cmp	r3, #18
 800474a:	d10b      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <HAL_ADC_ConfigChannel+0x254>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d12b      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x23a>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <HAL_ADC_ConfigChannel+0x258>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <HAL_ADC_ConfigChannel+0x1f4>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b11      	cmp	r3, #17
 800477e:	d122      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <HAL_ADC_ConfigChannel+0x258>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d111      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <HAL_ADC_ConfigChannel+0x25c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a11      	ldr	r2, [pc, #68]	; (80047ec <HAL_ADC_ConfigChannel+0x260>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	0c9a      	lsrs	r2, r3, #18
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047b8:	e002      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f9      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40012300 	.word	0x40012300
 80047e0:	40012000 	.word	0x40012000
 80047e4:	10000012 	.word	0x10000012
 80047e8:	20000000 	.word	0x20000000
 80047ec:	431bde83 	.word	0x431bde83

080047f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047f8:	4b79      	ldr	r3, [pc, #484]	; (80049e0 <ADC_Init+0x1f0>)
 80047fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	021a      	lsls	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6899      	ldr	r1, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <ADC_Init+0x1f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6899      	ldr	r1, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	e00f      	b.n	80048ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0202 	bic.w	r2, r2, #2
 80048fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	7e1b      	ldrb	r3, [r3, #24]
 8004908:	005a      	lsls	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800493a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	3b01      	subs	r3, #1
 8004948:	035a      	lsls	r2, r3, #13
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e007      	b.n	8004964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	3b01      	subs	r3, #1
 8004980:	051a      	lsls	r2, r3, #20
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a6:	025a      	lsls	r2, r3, #9
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6899      	ldr	r1, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	029a      	lsls	r2, r3, #10
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40012300 	.word	0x40012300
 80049e4:	0f000001 	.word	0x0f000001

080049e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13c      	bne.n	8004a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d12b      	bne.n	8004a74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d127      	bne.n	8004a74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d006      	beq.n	8004a40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d119      	bne.n	8004a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0220 	bic.w	r2, r2, #32
 8004a4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fd6b 	bl	8004550 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a7a:	e00e      	b.n	8004a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff fd75 	bl	8004578 <HAL_ADC_ErrorCallback>
}
 8004a8e:	e004      	b.n	8004a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fd57 	bl	8004564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fd4a 	bl	8004578 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <__NVIC_SetPriorityGrouping>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	60d3      	str	r3, [r2, #12]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_GetPriorityGrouping>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <__NVIC_GetPriorityGrouping+0x18>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	f003 0307 	and.w	r3, r3, #7
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_EnableIRQ>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db0b      	blt.n	8004b7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	4907      	ldr	r1, [pc, #28]	; (8004b88 <__NVIC_EnableIRQ+0x38>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2001      	movs	r0, #1
 8004b72:	fa00 f202 	lsl.w	r2, r0, r2
 8004b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	; (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	; 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <SysTick_Config>:
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c58:	d301      	bcc.n	8004c5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00f      	b.n	8004c7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <SysTick_Config+0x40>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c66:	210f      	movs	r1, #15
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	f7ff ff8e 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <SysTick_Config+0x40>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <SysTick_Config+0x40>)
 8004c78:	2207      	movs	r2, #7
 8004c7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010

08004c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff29 	bl	8004aec <__NVIC_SetPriorityGrouping>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb4:	f7ff ff3e 	bl	8004b34 <__NVIC_GetPriorityGrouping>
 8004cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7ff ff8e 	bl	8004be0 <NVIC_EncodePriority>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff5d 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff31 	bl	8004b50 <__NVIC_EnableIRQ>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ffa2 	bl	8004c48 <SysTick_Config>
 8004d04:	4603      	mov	r3, r0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d1c:	f7ff fab4 	bl	8004288 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e099      	b.n	8004e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4c:	e00f      	b.n	8004d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d4e:	f7ff fa9b 	bl	8004288 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d908      	bls.n	8004d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2203      	movs	r2, #3
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e078      	b.n	8004e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e8      	bne.n	8004d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <HAL_DMA_Init+0x158>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d107      	bne.n	8004dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d117      	bne.n	8004e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa9d 	bl	8005354 <DMA_CheckFifoParam>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e016      	b.n	8004e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa54 	bl	80052e8 <DMA_CalcBaseAndBitshift>
 8004e40:	4603      	mov	r3, r0
 8004e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	223f      	movs	r2, #63	; 0x3f
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	f010803f 	.word	0xf010803f

08004e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_DMA_Start_IT+0x26>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e040      	b.n	8004f14 <HAL_DMA_Start_IT+0xa8>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d12f      	bne.n	8004f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f9e6 	bl	800528c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	223f      	movs	r2, #63	; 0x3f
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0216 	orr.w	r2, r2, #22
 8004eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e005      	b.n	8004f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e00c      	b.n	8004f54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f6c:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <HAL_DMA_IRQHandler+0x258>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a92      	ldr	r2, [pc, #584]	; (80051bc <HAL_DMA_IRQHandler+0x25c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0a9b      	lsrs	r3, r3, #10
 8004f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01a      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d013      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	2208      	movs	r2, #8
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d012      	beq.n	8005002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	2201      	movs	r2, #1
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	2204      	movs	r2, #4
 8005008:	409a      	lsls	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4013      	ands	r3, r2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d012      	beq.n	8005038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	2204      	movs	r2, #4
 8005026:	409a      	lsls	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f043 0204 	orr.w	r2, r3, #4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2210      	movs	r2, #16
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d043      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03c      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	2210      	movs	r2, #16
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d024      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
 800508e:	e01f      	b.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e016      	b.n	80050d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0208 	bic.w	r2, r2, #8
 80050be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	2220      	movs	r2, #32
 80050d6:	409a      	lsls	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 808e 	beq.w	80051fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8086 	beq.w	80051fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	2220      	movs	r2, #32
 80050f8:	409a      	lsls	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b05      	cmp	r3, #5
 8005108:	d136      	bne.n	8005178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0216 	bic.w	r2, r2, #22
 8005118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <HAL_DMA_IRQHandler+0x1da>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0208 	bic.w	r2, r2, #8
 8005148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	223f      	movs	r2, #63	; 0x3f
 8005150:	409a      	lsls	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d07d      	beq.n	800526a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
        }
        return;
 8005176:	e078      	b.n	800526a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01c      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d108      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	2b00      	cmp	r3, #0
 800519a:	d030      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
 80051a4:	e02b      	b.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d027      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e022      	b.n	80051fe <HAL_DMA_IRQHandler+0x29e>
 80051b8:	20000000 	.word	0x20000000
 80051bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10f      	bne.n	80051ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0210 	bic.w	r2, r2, #16
 80051dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d032      	beq.n	800526c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d022      	beq.n	8005258 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2205      	movs	r2, #5
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	3301      	adds	r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d307      	bcc.n	8005246 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f2      	bne.n	800522a <HAL_DMA_IRQHandler+0x2ca>
 8005244:	e000      	b.n	8005248 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005246:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
 8005268:	e000      	b.n	800526c <HAL_DMA_IRQHandler+0x30c>
        return;
 800526a:	bf00      	nop
    }
  }
}
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b10      	subs	r3, #16
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <DMA_CalcBaseAndBitshift+0x64>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d909      	bls.n	800532a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	; 0x58
 8005328:	e007      	b.n	800533a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	aaaaaaab 	.word	0xaaaaaaab
 8005350:	080136ec 	.word	0x080136ec

08005354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d855      	bhi.n	8005420 <DMA_CheckFifoParam+0xcc>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x28>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005421 	.word	0x08005421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d045      	beq.n	8005424 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e042      	b.n	8005424 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d13f      	bne.n	8005428 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e03c      	b.n	8005428 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d121      	bne.n	80053fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d836      	bhi.n	800542c <DMA_CheckFifoParam+0xd8>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x70>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053db 	.word	0x080053db
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053ed 	.word	0x080053ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e02f      	b.n	800543a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d024      	beq.n	8005430 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e021      	b.n	8005430 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f4:	d11e      	bne.n	8005434 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fa:	e01b      	b.n	8005434 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <DMA_CheckFifoParam+0xb4>
 8005402:	2b03      	cmp	r3, #3
 8005404:	d003      	beq.n	800540e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005406:	e018      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e015      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e00b      	b.n	8005438 <DMA_CheckFifoParam+0xe4>
      break;
 8005420:	bf00      	nop
 8005422:	e00a      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005424:	bf00      	nop
 8005426:	e008      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005428:	bf00      	nop
 800542a:	e006      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 800542c:	bf00      	nop
 800542e:	e004      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005430:	bf00      	nop
 8005432:	e002      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;   
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005438:	bf00      	nop
    }
  } 
  
  return status; 
 800543a:	7bfb      	ldrb	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	; 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e177      	b.n	8005754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005464:	2201      	movs	r2, #1
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	429a      	cmp	r2, r3
 800547e:	f040 8166 	bne.w	800574e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d00b      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d007      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005496:	2b11      	cmp	r3, #17
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b12      	cmp	r3, #18
 80054a0:	d130      	bne.n	8005504 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d8:	2201      	movs	r2, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0201 	and.w	r2, r3, #1
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	2203      	movs	r2, #3
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0xfc>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b12      	cmp	r3, #18
 8005542:	d123      	bne.n	800558c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	08da      	lsrs	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3208      	adds	r2, #8
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	220f      	movs	r2, #15
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	08da      	lsrs	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3208      	adds	r2, #8
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0203 	and.w	r2, r3, #3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80c0 	beq.w	800574e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	4b65      	ldr	r3, [pc, #404]	; (8005768 <HAL_GPIO_Init+0x320>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	4a64      	ldr	r2, [pc, #400]	; (8005768 <HAL_GPIO_Init+0x320>)
 80055d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055dc:	6453      	str	r3, [r2, #68]	; 0x44
 80055de:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_GPIO_Init+0x320>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ea:	4a60      	ldr	r2, [pc, #384]	; (800576c <HAL_GPIO_Init+0x324>)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	3302      	adds	r3, #2
 80055f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	220f      	movs	r2, #15
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a57      	ldr	r2, [pc, #348]	; (8005770 <HAL_GPIO_Init+0x328>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d037      	beq.n	8005686 <HAL_GPIO_Init+0x23e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a56      	ldr	r2, [pc, #344]	; (8005774 <HAL_GPIO_Init+0x32c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d031      	beq.n	8005682 <HAL_GPIO_Init+0x23a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a55      	ldr	r2, [pc, #340]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02b      	beq.n	800567e <HAL_GPIO_Init+0x236>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a54      	ldr	r2, [pc, #336]	; (800577c <HAL_GPIO_Init+0x334>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d025      	beq.n	800567a <HAL_GPIO_Init+0x232>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a53      	ldr	r2, [pc, #332]	; (8005780 <HAL_GPIO_Init+0x338>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01f      	beq.n	8005676 <HAL_GPIO_Init+0x22e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a52      	ldr	r2, [pc, #328]	; (8005784 <HAL_GPIO_Init+0x33c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d019      	beq.n	8005672 <HAL_GPIO_Init+0x22a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a51      	ldr	r2, [pc, #324]	; (8005788 <HAL_GPIO_Init+0x340>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_GPIO_Init+0x226>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a50      	ldr	r2, [pc, #320]	; (800578c <HAL_GPIO_Init+0x344>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00d      	beq.n	800566a <HAL_GPIO_Init+0x222>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a4f      	ldr	r2, [pc, #316]	; (8005790 <HAL_GPIO_Init+0x348>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <HAL_GPIO_Init+0x21e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a4e      	ldr	r2, [pc, #312]	; (8005794 <HAL_GPIO_Init+0x34c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <HAL_GPIO_Init+0x21a>
 800565e:	2309      	movs	r3, #9
 8005660:	e012      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005662:	230a      	movs	r3, #10
 8005664:	e010      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005666:	2308      	movs	r3, #8
 8005668:	e00e      	b.n	8005688 <HAL_GPIO_Init+0x240>
 800566a:	2307      	movs	r3, #7
 800566c:	e00c      	b.n	8005688 <HAL_GPIO_Init+0x240>
 800566e:	2306      	movs	r3, #6
 8005670:	e00a      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005672:	2305      	movs	r3, #5
 8005674:	e008      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005676:	2304      	movs	r3, #4
 8005678:	e006      	b.n	8005688 <HAL_GPIO_Init+0x240>
 800567a:	2303      	movs	r3, #3
 800567c:	e004      	b.n	8005688 <HAL_GPIO_Init+0x240>
 800567e:	2302      	movs	r3, #2
 8005680:	e002      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_GPIO_Init+0x240>
 8005686:	2300      	movs	r3, #0
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	f002 0203 	and.w	r2, r2, #3
 800568e:	0092      	lsls	r2, r2, #2
 8005690:	4093      	lsls	r3, r2
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005698:	4934      	ldr	r1, [pc, #208]	; (800576c <HAL_GPIO_Init+0x324>)
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	3302      	adds	r3, #2
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056a6:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056ca:	4a33      	ldr	r2, [pc, #204]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056d0:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056f4:	4a28      	ldr	r2, [pc, #160]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056fa:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_GPIO_Init+0x350>)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005724:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <HAL_GPIO_Init+0x350>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	43db      	mvns	r3, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4013      	ands	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <HAL_GPIO_Init+0x350>)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3301      	adds	r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	f67f ae84 	bls.w	8005464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3724      	adds	r7, #36	; 0x24
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40023800 	.word	0x40023800
 800576c:	40013800 	.word	0x40013800
 8005770:	40020000 	.word	0x40020000
 8005774:	40020400 	.word	0x40020400
 8005778:	40020800 	.word	0x40020800
 800577c:	40020c00 	.word	0x40020c00
 8005780:	40021000 	.word	0x40021000
 8005784:	40021400 	.word	0x40021400
 8005788:	40021800 	.word	0x40021800
 800578c:	40021c00 	.word	0x40021c00
 8005790:	40022000 	.word	0x40022000
 8005794:	40022400 	.word	0x40022400
 8005798:	40013c00 	.word	0x40013c00

0800579c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	887b      	ldrh	r3, [r7, #2]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
 80057b8:	e001      	b.n	80057be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
 80057d8:	4613      	mov	r3, r2
 80057da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057dc:	787b      	ldrb	r3, [r7, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057e8:	e003      	b.n	80057f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	041a      	lsls	r2, r3, #16
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	619a      	str	r2, [r3, #24]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005816:	4a05      	ldr	r2, [pc, #20]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fc fe56 	bl	80024d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40013c00 	.word	0x40013c00

08005830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e11f      	b.n	8005a82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fd fea0 	bl	800359c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	; 0x24
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005894:	f000 fe24 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 8005898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4a7b      	ldr	r2, [pc, #492]	; (8005a8c <HAL_I2C_Init+0x25c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d807      	bhi.n	80058b4 <HAL_I2C_Init+0x84>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <HAL_I2C_Init+0x260>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	bf94      	ite	ls
 80058ac:	2301      	movls	r3, #1
 80058ae:	2300      	movhi	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e006      	b.n	80058c2 <HAL_I2C_Init+0x92>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a77      	ldr	r2, [pc, #476]	; (8005a94 <HAL_I2C_Init+0x264>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bf94      	ite	ls
 80058bc:	2301      	movls	r3, #1
 80058be:	2300      	movhi	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0db      	b.n	8005a82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a72      	ldr	r2, [pc, #456]	; (8005a98 <HAL_I2C_Init+0x268>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	0c9b      	lsrs	r3, r3, #18
 80058d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a64      	ldr	r2, [pc, #400]	; (8005a8c <HAL_I2C_Init+0x25c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d802      	bhi.n	8005904 <HAL_I2C_Init+0xd4>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	e009      	b.n	8005918 <HAL_I2C_Init+0xe8>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <HAL_I2C_Init+0x26c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	099b      	lsrs	r3, r3, #6
 8005916:	3301      	adds	r3, #1
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	430b      	orrs	r3, r1
 800591e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800592a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4956      	ldr	r1, [pc, #344]	; (8005a8c <HAL_I2C_Init+0x25c>)
 8005934:	428b      	cmp	r3, r1
 8005936:	d80d      	bhi.n	8005954 <HAL_I2C_Init+0x124>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1e59      	subs	r1, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fbb1 f3f3 	udiv	r3, r1, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b04      	cmp	r3, #4
 800594e:	bf38      	it	cc
 8005950:	2304      	movcc	r3, #4
 8005952:	e04f      	b.n	80059f4 <HAL_I2C_Init+0x1c4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <HAL_I2C_Init+0x150>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e58      	subs	r0, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	440b      	add	r3, r1
 800596a:	fbb0 f3f3 	udiv	r3, r0, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e012      	b.n	80059a6 <HAL_I2C_Init+0x176>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1e58      	subs	r0, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	0099      	lsls	r1, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	fbb0 f3f3 	udiv	r3, r0, r3
 8005996:	3301      	adds	r3, #1
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Init+0x17e>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e022      	b.n	80059f4 <HAL_I2C_Init+0x1c4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10e      	bne.n	80059d4 <HAL_I2C_Init+0x1a4>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1e58      	subs	r0, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6859      	ldr	r1, [r3, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	440b      	add	r3, r1
 80059c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d2:	e00f      	b.n	80059f4 <HAL_I2C_Init+0x1c4>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1e58      	subs	r0, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	0099      	lsls	r1, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ea:	3301      	adds	r3, #1
 80059ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	6809      	ldr	r1, [r1, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6911      	ldr	r1, [r2, #16]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	4311      	orrs	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	000186a0 	.word	0x000186a0
 8005a90:	001e847f 	.word	0x001e847f
 8005a94:	003d08ff 	.word	0x003d08ff
 8005a98:	431bde83 	.word	0x431bde83
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	460b      	mov	r3, r1
 8005aae:	817b      	strh	r3, [r7, #10]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ab4:	f7fe fbe8 	bl	8004288 <HAL_GetTick>
 8005ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	f040 80e0 	bne.w	8005c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2319      	movs	r3, #25
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4970      	ldr	r1, [pc, #448]	; (8005c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f964 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0d3      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_I2C_Master_Transmit+0x50>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e0cc      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d007      	beq.n	8005b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2210      	movs	r2, #16
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	893a      	ldrh	r2, [r7, #8]
 8005b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a50      	ldr	r2, [pc, #320]	; (8005c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b58:	8979      	ldrh	r1, [r7, #10]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f89c 	bl	8005c9c <I2C_MasterRequestWrite>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e08d      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b84:	e066      	b.n	8005c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	6a39      	ldr	r1, [r7, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f9de 	bl	8005f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d107      	bne.n	8005bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e06b      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d11b      	bne.n	8005c28 <HAL_I2C_Master_Transmit+0x188>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d017      	beq.n	8005c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	6a39      	ldr	r1, [r7, #32]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f9ce 	bl	8005fce <I2C_WaitOnBTFFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d107      	bne.n	8005c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e01a      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d194      	bne.n	8005b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	00100002 	.word	0x00100002
 8005c98:	ffff0000 	.word	0xffff0000

08005c9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d006      	beq.n	8005cc6 <I2C_MasterRequestWrite+0x2a>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d003      	beq.n	8005cc6 <I2C_MasterRequestWrite+0x2a>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cc4:	d108      	bne.n	8005cd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e00b      	b.n	8005cf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b12      	cmp	r3, #18
 8005cde:	d107      	bne.n	8005cf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f84f 	bl	8005da0 <I2C_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00d      	beq.n	8005d24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d16:	d103      	bne.n	8005d20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e035      	b.n	8005d90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d2c:	d108      	bne.n	8005d40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d2e:	897b      	ldrh	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d3c:	611a      	str	r2, [r3, #16]
 8005d3e:	e01b      	b.n	8005d78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d40:	897b      	ldrh	r3, [r7, #10]
 8005d42:	11db      	asrs	r3, r3, #7
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0306 	and.w	r3, r3, #6
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f063 030f 	orn	r3, r3, #15
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	490e      	ldr	r1, [pc, #56]	; (8005d98 <I2C_MasterRequestWrite+0xfc>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f875 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e010      	b.n	8005d90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d6e:	897b      	ldrh	r3, [r7, #10]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4907      	ldr	r1, [pc, #28]	; (8005d9c <I2C_MasterRequestWrite+0x100>)
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f865 	bl	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	00010008 	.word	0x00010008
 8005d9c:	00010002 	.word	0x00010002

08005da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db0:	e025      	b.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d021      	beq.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fe fa65 	bl	8004288 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d116      	bne.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e023      	b.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10d      	bne.n	8005e24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	43da      	mvns	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	e00c      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d0b6      	beq.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e5c:	e051      	b.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6c:	d123      	bne.n	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f043 0204 	orr.w	r2, r3, #4
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e046      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d021      	beq.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fe f9e3 	bl	8004288 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d116      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e020      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	0c1b      	lsrs	r3, r3, #16
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10c      	bne.n	8005f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e00b      	b.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4013      	ands	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d18d      	bne.n	8005e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f58:	e02d      	b.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f878 	bl	8006050 <I2C_IsAcknowledgeFailed>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e02d      	b.n	8005fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d021      	beq.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fe f989 	bl	8004288 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e007      	b.n	8005fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d1ca      	bne.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fda:	e02d      	b.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f837 	bl	8006050 <I2C_IsAcknowledgeFailed>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e02d      	b.n	8006048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d021      	beq.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff4:	f7fe f948 	bl	8004288 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d116      	bne.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e007      	b.n	8006048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d1ca      	bne.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006066:	d11b      	bne.n	80060a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f043 0204 	orr.w	r2, r3, #4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_PWREx_EnableOverDrive+0x90>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <HAL_PWREx_EnableOverDrive+0x90>)
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_PWREx_EnableOverDrive+0x90>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060d6:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <HAL_PWREx_EnableOverDrive+0x94>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060dc:	f7fe f8d4 	bl	8004288 <HAL_GetTick>
 80060e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060e2:	e009      	b.n	80060f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060e4:	f7fe f8d0 	bl	8004288 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060f2:	d901      	bls.n	80060f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e01f      	b.n	8006138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <HAL_PWREx_EnableOverDrive+0x98>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d1ee      	bne.n	80060e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800610c:	f7fe f8bc 	bl	8004288 <HAL_GetTick>
 8006110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006112:	e009      	b.n	8006128 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006114:	f7fe f8b8 	bl	8004288 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006122:	d901      	bls.n	8006128 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e007      	b.n	8006138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006128:	4b07      	ldr	r3, [pc, #28]	; (8006148 <HAL_PWREx_EnableOverDrive+0x98>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006134:	d1ee      	bne.n	8006114 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40023800 	.word	0x40023800
 8006144:	420e0040 	.word	0x420e0040
 8006148:	40007000 	.word	0x40007000
 800614c:	420e0044 	.word	0x420e0044

08006150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0cc      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d90c      	bls.n	800618c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b65      	ldr	r3, [pc, #404]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b63      	ldr	r3, [pc, #396]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0b8      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d020      	beq.n	80061da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a4:	4b59      	ldr	r3, [pc, #356]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4a58      	ldr	r2, [pc, #352]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061bc:	4b53      	ldr	r3, [pc, #332]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a52      	ldr	r2, [pc, #328]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c8:	4b50      	ldr	r3, [pc, #320]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	494d      	ldr	r1, [pc, #308]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d044      	beq.n	8006270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ee:	4b47      	ldr	r3, [pc, #284]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d119      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d003      	beq.n	800620e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620a:	2b03      	cmp	r3, #3
 800620c:	d107      	bne.n	800621e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620e:	4b3f      	ldr	r3, [pc, #252]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e06f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621e:	4b3b      	ldr	r3, [pc, #236]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e067      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f023 0203 	bic.w	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4934      	ldr	r1, [pc, #208]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	4313      	orrs	r3, r2
 800623e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006240:	f7fe f822 	bl	8004288 <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	e00a      	b.n	800625e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f7fe f81e 	bl	8004288 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e04f      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	4b2b      	ldr	r3, [pc, #172]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 020c 	and.w	r2, r3, #12
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	429a      	cmp	r2, r3
 800626e:	d1eb      	bne.n	8006248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d20c      	bcs.n	8006298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b20      	ldr	r3, [pc, #128]	; (8006308 <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e032      	b.n	80062fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4916      	ldr	r1, [pc, #88]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	490e      	ldr	r1, [pc, #56]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062d6:	f000 f821 	bl	800631c <HAL_RCC_GetSysClockFreq>
 80062da:	4601      	mov	r1, r0
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	fa21 f303 	lsr.w	r3, r1, r3
 80062ee:	4a09      	ldr	r2, [pc, #36]	; (8006314 <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd ff82 	bl	8004200 <HAL_InitTick>

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40023c00 	.word	0x40023c00
 800630c:	40023800 	.word	0x40023800
 8006310:	080136d4 	.word	0x080136d4
 8006314:	20000000 	.word	0x20000000
 8006318:	20000004 	.word	0x20000004

0800631c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800631c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	2300      	movs	r3, #0
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006332:	4b63      	ldr	r3, [pc, #396]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b04      	cmp	r3, #4
 800633c:	d007      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0x32>
 800633e:	2b08      	cmp	r3, #8
 8006340:	d008      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x38>
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 80b4 	bne.w	80064b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006348:	4b5e      	ldr	r3, [pc, #376]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800634a:	60bb      	str	r3, [r7, #8]
       break;
 800634c:	e0b3      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800634e:	4b5d      	ldr	r3, [pc, #372]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006350:	60bb      	str	r3, [r7, #8]
      break;
 8006352:	e0b0      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006354:	4b5a      	ldr	r3, [pc, #360]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800635c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800635e:	4b58      	ldr	r3, [pc, #352]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d04a      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800636a:	4b55      	ldr	r3, [pc, #340]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	099b      	lsrs	r3, r3, #6
 8006370:	f04f 0400 	mov.w	r4, #0
 8006374:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	ea03 0501 	and.w	r5, r3, r1
 8006380:	ea04 0602 	and.w	r6, r4, r2
 8006384:	4629      	mov	r1, r5
 8006386:	4632      	mov	r2, r6
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	f04f 0400 	mov.w	r4, #0
 8006390:	0154      	lsls	r4, r2, #5
 8006392:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006396:	014b      	lsls	r3, r1, #5
 8006398:	4619      	mov	r1, r3
 800639a:	4622      	mov	r2, r4
 800639c:	1b49      	subs	r1, r1, r5
 800639e:	eb62 0206 	sbc.w	r2, r2, r6
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f04f 0400 	mov.w	r4, #0
 80063aa:	0194      	lsls	r4, r2, #6
 80063ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063b0:	018b      	lsls	r3, r1, #6
 80063b2:	1a5b      	subs	r3, r3, r1
 80063b4:	eb64 0402 	sbc.w	r4, r4, r2
 80063b8:	f04f 0100 	mov.w	r1, #0
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	00e2      	lsls	r2, r4, #3
 80063c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063c6:	00d9      	lsls	r1, r3, #3
 80063c8:	460b      	mov	r3, r1
 80063ca:	4614      	mov	r4, r2
 80063cc:	195b      	adds	r3, r3, r5
 80063ce:	eb44 0406 	adc.w	r4, r4, r6
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	02a2      	lsls	r2, r4, #10
 80063dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063e0:	0299      	lsls	r1, r3, #10
 80063e2:	460b      	mov	r3, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	4621      	mov	r1, r4
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f04f 0400 	mov.w	r4, #0
 80063f0:	461a      	mov	r2, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	f7fa fc60 	bl	8000cb8 <__aeabi_uldivmod>
 80063f8:	4603      	mov	r3, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e049      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006400:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	099b      	lsrs	r3, r3, #6
 8006406:	f04f 0400 	mov.w	r4, #0
 800640a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	ea03 0501 	and.w	r5, r3, r1
 8006416:	ea04 0602 	and.w	r6, r4, r2
 800641a:	4629      	mov	r1, r5
 800641c:	4632      	mov	r2, r6
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 0400 	mov.w	r4, #0
 8006426:	0154      	lsls	r4, r2, #5
 8006428:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800642c:	014b      	lsls	r3, r1, #5
 800642e:	4619      	mov	r1, r3
 8006430:	4622      	mov	r2, r4
 8006432:	1b49      	subs	r1, r1, r5
 8006434:	eb62 0206 	sbc.w	r2, r2, r6
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	f04f 0400 	mov.w	r4, #0
 8006440:	0194      	lsls	r4, r2, #6
 8006442:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006446:	018b      	lsls	r3, r1, #6
 8006448:	1a5b      	subs	r3, r3, r1
 800644a:	eb64 0402 	sbc.w	r4, r4, r2
 800644e:	f04f 0100 	mov.w	r1, #0
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	00e2      	lsls	r2, r4, #3
 8006458:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800645c:	00d9      	lsls	r1, r3, #3
 800645e:	460b      	mov	r3, r1
 8006460:	4614      	mov	r4, r2
 8006462:	195b      	adds	r3, r3, r5
 8006464:	eb44 0406 	adc.w	r4, r4, r6
 8006468:	f04f 0100 	mov.w	r1, #0
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	02a2      	lsls	r2, r4, #10
 8006472:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006476:	0299      	lsls	r1, r3, #10
 8006478:	460b      	mov	r3, r1
 800647a:	4614      	mov	r4, r2
 800647c:	4618      	mov	r0, r3
 800647e:	4621      	mov	r1, r4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f04f 0400 	mov.w	r4, #0
 8006486:	461a      	mov	r2, r3
 8006488:	4623      	mov	r3, r4
 800648a:	f7fa fc15 	bl	8000cb8 <__aeabi_uldivmod>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	3301      	adds	r3, #1
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	60bb      	str	r3, [r7, #8]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80064b2:	60bb      	str	r3, [r7, #8]
      break;
 80064b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b6:	68bb      	ldr	r3, [r7, #8]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	00f42400 	.word	0x00f42400

080064c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ce:	681b      	ldr	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000000 	.word	0x20000000

080064e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064e4:	f7ff fff0 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 80064e8:	4601      	mov	r1, r0
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	0a9b      	lsrs	r3, r3, #10
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	4a03      	ldr	r2, [pc, #12]	; (8006504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f6:	5cd3      	ldrb	r3, [r2, r3]
 80064f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40023800 	.word	0x40023800
 8006504:	080136e4 	.word	0x080136e4

08006508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800650c:	f7ff ffdc 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 8006510:	4601      	mov	r1, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0b5b      	lsrs	r3, r3, #13
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4a03      	ldr	r2, [pc, #12]	; (800652c <HAL_RCC_GetPCLK2Freq+0x24>)
 800651e:	5cd3      	ldrb	r3, [r2, r3]
 8006520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40023800 	.word	0x40023800
 800652c:	080136e4 	.word	0x080136e4

08006530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006558:	4b66      	ldr	r3, [pc, #408]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800655a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800655e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006566:	4963      	ldr	r1, [pc, #396]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800657a:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800657c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006580:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	495a      	ldr	r1, [pc, #360]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d075      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065b4:	4b50      	ldr	r3, [pc, #320]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ba:	f7fd fe65 	bl	8004288 <HAL_GetTick>
 80065be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065c2:	f7fd fe61 	bl	8004288 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e1dc      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d4:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f0      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	019a      	lsls	r2, r3, #6
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	071b      	lsls	r3, r3, #28
 80065f8:	493e      	ldr	r1, [pc, #248]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800660c:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800660e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006612:	0f1b      	lsrs	r3, r3, #28
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	019a      	lsls	r2, r3, #6
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	061b      	lsls	r3, r3, #24
 8006626:	431a      	orrs	r2, r3
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	071b      	lsls	r3, r3, #28
 800662c:	4931      	ldr	r1, [pc, #196]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006634:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663a:	f023 021f 	bic.w	r2, r3, #31
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	3b01      	subs	r3, #1
 8006644:	492b      	ldr	r1, [pc, #172]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00d      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	019a      	lsls	r2, r3, #6
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	061b      	lsls	r3, r3, #24
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	071b      	lsls	r3, r3, #28
 800666c:	4921      	ldr	r1, [pc, #132]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006674:	4b20      	ldr	r3, [pc, #128]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667a:	f7fd fe05 	bl	8004288 <HAL_GetTick>
 800667e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006682:	f7fd fe01 	bl	8004288 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e17c      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006694:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d112      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80ce 	beq.w	8006862 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ce:	f040 80c8 	bne.w	8006862 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066d8:	f7fd fdd6 	bl	8004288 <HAL_GetTick>
 80066dc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066de:	e00f      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066e0:	f7fd fdd2 	bl	8004288 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d908      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e14d      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800
 80066f8:	42470068 	.word	0x42470068
 80066fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006700:	4ba5      	ldr	r3, [pc, #660]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670c:	d0e8      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02e      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800671a:	4b9f      	ldr	r3, [pc, #636]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	3301      	adds	r3, #1
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800672c:	4b9a      	ldr	r3, [pc, #616]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	0f1b      	lsrs	r3, r3, #28
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	019a      	lsls	r2, r3, #6
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	4990      	ldr	r1, [pc, #576]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800675e:	4b8e      	ldr	r3, [pc, #568]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006764:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	3b01      	subs	r3, #1
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	4989      	ldr	r1, [pc, #548]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02c      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006784:	4b84      	ldr	r3, [pc, #528]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	3301      	adds	r3, #1
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006796:	4b80      	ldr	r3, [pc, #512]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	019a      	lsls	r2, r3, #6
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	3b01      	subs	r3, #1
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	431a      	orrs	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	061b      	lsls	r3, r3, #24
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	071b      	lsls	r3, r3, #28
 80067c0:	4975      	ldr	r1, [pc, #468]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067c8:	4b73      	ldr	r3, [pc, #460]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	4970      	ldr	r1, [pc, #448]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d024      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80067ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f2:	d11f      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067f4:	4b68      	ldr	r3, [pc, #416]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	0e1b      	lsrs	r3, r3, #24
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006802:	4b65      	ldr	r3, [pc, #404]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006808:	0f1b      	lsrs	r3, r3, #28
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	019a      	lsls	r2, r3, #6
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	431a      	orrs	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	431a      	orrs	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	071b      	lsls	r3, r3, #28
 800682c:	495a      	ldr	r1, [pc, #360]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006834:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800683a:	f7fd fd25 	bl	8004288 <HAL_GetTick>
 800683e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006840:	e008      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006842:	f7fd fd21 	bl	8004288 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e09c      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006854:	4b50      	ldr	r3, [pc, #320]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006860:	d1ef      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8083 	beq.w	8006976 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006870:	2300      	movs	r3, #0
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	4a47      	ldr	r2, [pc, #284]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800687a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687e:	6413      	str	r3, [r2, #64]	; 0x40
 8006880:	4b45      	ldr	r3, [pc, #276]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800688c:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a43      	ldr	r2, [pc, #268]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006896:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006898:	f7fd fcf6 	bl	8004288 <HAL_GetTick>
 800689c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068a0:	f7fd fcf2 	bl	8004288 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e06d      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068be:	4b36      	ldr	r3, [pc, #216]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d02f      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d028      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068dc:	4b2e      	ldr	r3, [pc, #184]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068e6:	4b2f      	ldr	r3, [pc, #188]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068ec:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068f2:	4a29      	ldr	r2, [pc, #164]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068f8:	4b27      	ldr	r3, [pc, #156]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d114      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006904:	f7fd fcc0 	bl	8004288 <HAL_GetTick>
 8006908:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fd fcbc 	bl	8004288 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	; 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e035      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ee      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693a:	d10d      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800693c:	4b16      	ldr	r3, [pc, #88]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	4911      	ldr	r1, [pc, #68]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4a0e      	ldr	r2, [pc, #56]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800695e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006970:	4909      	ldr	r1, [pc, #36]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006972:	4313      	orrs	r3, r2
 8006974:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800698a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800
 800699c:	42470070 	.word	0x42470070
 80069a0:	40007000 	.word	0x40007000
 80069a4:	42470e40 	.word	0x42470e40
 80069a8:	424711e0 	.word	0x424711e0

080069ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d075      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069c4:	4ba2      	ldr	r3, [pc, #648]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d00c      	beq.n	80069ea <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069d0:	4b9f      	ldr	r3, [pc, #636]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d112      	bne.n	8006a02 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069dc:	4b9c      	ldr	r3, [pc, #624]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e8:	d10b      	bne.n	8006a02 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ea:	4b99      	ldr	r3, [pc, #612]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d05b      	beq.n	8006aae <HAL_RCC_OscConfig+0x102>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d157      	bne.n	8006aae <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e20b      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0a:	d106      	bne.n	8006a1a <HAL_RCC_OscConfig+0x6e>
 8006a0c:	4b90      	ldr	r3, [pc, #576]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a8f      	ldr	r2, [pc, #572]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e01d      	b.n	8006a56 <HAL_RCC_OscConfig+0xaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a22:	d10c      	bne.n	8006a3e <HAL_RCC_OscConfig+0x92>
 8006a24:	4b8a      	ldr	r3, [pc, #552]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a89      	ldr	r2, [pc, #548]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	4b87      	ldr	r3, [pc, #540]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a86      	ldr	r2, [pc, #536]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e00b      	b.n	8006a56 <HAL_RCC_OscConfig+0xaa>
 8006a3e:	4b84      	ldr	r3, [pc, #528]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a83      	ldr	r2, [pc, #524]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b81      	ldr	r3, [pc, #516]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a80      	ldr	r2, [pc, #512]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d013      	beq.n	8006a86 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5e:	f7fd fc13 	bl	8004288 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a66:	f7fd fc0f 	bl	8004288 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b64      	cmp	r3, #100	; 0x64
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e1d0      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a78:	4b75      	ldr	r3, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <HAL_RCC_OscConfig+0xba>
 8006a84:	e014      	b.n	8006ab0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a86:	f7fd fbff 	bl	8004288 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a8e:	f7fd fbfb 	bl	8004288 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e1bc      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa0:	4b6b      	ldr	r3, [pc, #428]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f0      	bne.n	8006a8e <HAL_RCC_OscConfig+0xe2>
 8006aac:	e000      	b.n	8006ab0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d063      	beq.n	8006b84 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006abc:	4b64      	ldr	r3, [pc, #400]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac8:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11c      	bne.n	8006b0e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad4:	4b5e      	ldr	r3, [pc, #376]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d116      	bne.n	8006b0e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae0:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_RCC_OscConfig+0x14c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e190      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af8:	4b55      	ldr	r3, [pc, #340]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	4952      	ldr	r1, [pc, #328]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0c:	e03a      	b.n	8006b84 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d020      	beq.n	8006b58 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b16:	4b4f      	ldr	r3, [pc, #316]	; (8006c54 <HAL_RCC_OscConfig+0x2a8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fd fbb4 	bl	8004288 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b24:	f7fd fbb0 	bl	8004288 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e171      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b36:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b42:	4b43      	ldr	r3, [pc, #268]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	493f      	ldr	r1, [pc, #252]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
 8006b56:	e015      	b.n	8006b84 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b58:	4b3e      	ldr	r3, [pc, #248]	; (8006c54 <HAL_RCC_OscConfig+0x2a8>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fd fb93 	bl	8004288 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b66:	f7fd fb8f 	bl	8004288 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e150      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b78:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d030      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d016      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b98:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9e:	f7fd fb73 	bl	8004288 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba6:	f7fd fb6f 	bl	8004288 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e130      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x1fa>
 8006bc4:	e015      	b.n	8006bf2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bcc:	f7fd fb5c 	bl	8004288 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd4:	f7fd fb58 	bl	8004288 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e119      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be6:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 809f 	beq.w	8006d3e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c00:	2300      	movs	r3, #0
 8006c02:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c04:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10f      	bne.n	8006c30 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_OscConfig+0x2a4>)
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_RCC_OscConfig+0x2b0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d120      	bne.n	8006c7e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <HAL_RCC_OscConfig+0x2b0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <HAL_RCC_OscConfig+0x2b0>)
 8006c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c48:	f7fd fb1e 	bl	8004288 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4e:	e010      	b.n	8006c72 <HAL_RCC_OscConfig+0x2c6>
 8006c50:	40023800 	.word	0x40023800
 8006c54:	42470000 	.word	0x42470000
 8006c58:	42470e80 	.word	0x42470e80
 8006c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c60:	f7fd fb12 	bl	8004288 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e0d3      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c72:	4b6c      	ldr	r3, [pc, #432]	; (8006e24 <HAL_RCC_OscConfig+0x478>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d106      	bne.n	8006c94 <HAL_RCC_OscConfig+0x2e8>
 8006c86:	4b68      	ldr	r3, [pc, #416]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	4a67      	ldr	r2, [pc, #412]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6713      	str	r3, [r2, #112]	; 0x70
 8006c92:	e01c      	b.n	8006cce <HAL_RCC_OscConfig+0x322>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d10c      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x30a>
 8006c9c:	4b62      	ldr	r3, [pc, #392]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	4a61      	ldr	r2, [pc, #388]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006ca2:	f043 0304 	orr.w	r3, r3, #4
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca8:	4b5f      	ldr	r3, [pc, #380]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	4a5e      	ldr	r2, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb4:	e00b      	b.n	8006cce <HAL_RCC_OscConfig+0x322>
 8006cb6:	4b5c      	ldr	r3, [pc, #368]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	4a5b      	ldr	r2, [pc, #364]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc2:	4b59      	ldr	r3, [pc, #356]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	4a58      	ldr	r2, [pc, #352]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cc8:	f023 0304 	bic.w	r3, r3, #4
 8006ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fd fad7 	bl	8004288 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fd fad3 	bl	8004288 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e092      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf4:	4b4c      	ldr	r3, [pc, #304]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ee      	beq.n	8006cde <HAL_RCC_OscConfig+0x332>
 8006d00:	e014      	b.n	8006d2c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d02:	f7fd fac1 	bl	8004288 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fd fabd 	bl	8004288 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e07c      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d20:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1ee      	bne.n	8006d0a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d105      	bne.n	8006d3e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d32:	4b3d      	ldr	r3, [pc, #244]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	4a3c      	ldr	r2, [pc, #240]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d068      	beq.n	8006e18 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d46:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d060      	beq.n	8006e14 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d145      	bne.n	8006de6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5a:	4b34      	ldr	r3, [pc, #208]	; (8006e2c <HAL_RCC_OscConfig+0x480>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fd fa92 	bl	8004288 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fd fa8e 	bl	8004288 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e04f      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	019b      	lsls	r3, r3, #6
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	071b      	lsls	r3, r3, #28
 8006db2:	491d      	ldr	r1, [pc, #116]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <HAL_RCC_OscConfig+0x480>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fd fa63 	bl	8004288 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc6:	f7fd fa5f 	bl	8004288 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e020      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd8:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x41a>
 8006de4:	e018      	b.n	8006e18 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <HAL_RCC_OscConfig+0x480>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fd fa4c 	bl	8004288 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fd fa48 	bl	8004288 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e009      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <HAL_RCC_OscConfig+0x47c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x448>
 8006e12:	e001      	b.n	8006e18 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40007000 	.word	0x40007000
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	42470060 	.word	0x42470060

08006e30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e022      	b.n	8006e88 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d105      	bne.n	8006e5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fc fc1d 	bl	8003694 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2203      	movs	r2, #3
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f814 	bl	8006e90 <HAL_SD_InitCard>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e00a      	b.n	8006e88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e90:	b5b0      	push	{r4, r5, r7, lr}
 8006e92:	b08e      	sub	sp, #56	; 0x38
 8006e94:	af04      	add	r7, sp, #16
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006eac:	2376      	movs	r3, #118	; 0x76
 8006eae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681d      	ldr	r5, [r3, #0]
 8006eb4:	466c      	mov	r4, sp
 8006eb6:	f107 0314 	add.w	r3, r7, #20
 8006eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f002 fd97 	bl	80099fc <SDIO_Init>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e031      	b.n	8006f44 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_SD_InitCard+0xbc>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f002 fdcf 	bl	8009a8e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006ef0:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <HAL_SD_InitCard+0xbc>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 ffc6 	bl	8007e88 <SD_PowerON>
 8006efc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e013      	b.n	8006f44 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fee5 	bl	8007cec <SD_InitCard>
 8006f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3728      	adds	r7, #40	; 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f4c:	422580a0 	.word	0x422580a0

08006f50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d107      	bne.n	8006f78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0c7      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	f040 80c0 	bne.w	8007106 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d907      	bls.n	8006faa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0ae      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2203      	movs	r2, #3
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	4a50      	ldr	r2, [pc, #320]	; (8007110 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	4a4f      	ldr	r2, [pc, #316]	; (8007114 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8006fd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	2200      	movs	r2, #0
 8006fe0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3380      	adds	r3, #128	; 0x80
 8006fec:	4619      	mov	r1, r3
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	025b      	lsls	r3, r3, #9
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	f7fd ff39 	bl	8004e6c <HAL_DMA_Start_IT>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d017      	beq.n	8007030 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800700e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a40      	ldr	r2, [pc, #256]	; (8007118 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e06b      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007030:	4b3a      	ldr	r3, [pc, #232]	; (800711c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007032:	2201      	movs	r2, #1
 8007034:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	2b01      	cmp	r3, #1
 800703c:	d002      	beq.n	8007044 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	025b      	lsls	r3, r3, #9
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800704c:	4618      	mov	r0, r3
 800704e:	f002 fdb1 	bl	8009bb4 <SDMMC_CmdBlockLength>
 8007052:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00f      	beq.n	800707a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2e      	ldr	r2, [pc, #184]	; (8007118 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e046      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800707a:	f04f 33ff 	mov.w	r3, #4294967295
 800707e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	025b      	lsls	r3, r3, #9
 8007084:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007086:	2390      	movs	r3, #144	; 0x90
 8007088:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800708a:	2302      	movs	r3, #2
 800708c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800708e:	2300      	movs	r3, #0
 8007090:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007092:	2301      	movs	r3, #1
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f107 0210 	add.w	r2, r7, #16
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f002 fd5b 	bl	8009b5c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d90a      	bls.n	80070c2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2282      	movs	r2, #130	; 0x82
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 fdbf 	bl	8009c3c <SDMMC_CmdReadMultiBlock>
 80070be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80070c0:	e009      	b.n	80070d6 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2281      	movs	r2, #129	; 0x81
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 fd92 	bl	8009bf8 <SDMMC_CmdReadSingleBlock>
 80070d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e002      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	3730      	adds	r7, #48	; 0x30
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	08007afb 	.word	0x08007afb
 8007114:	08007b6d 	.word	0x08007b6d
 8007118:	004005ff 	.word	0x004005ff
 800711c:	4225858c 	.word	0x4225858c

08007120 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08c      	sub	sp, #48	; 0x30
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d107      	bne.n	8007148 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0ca      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	f040 80c3 	bne.w	80072dc <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800715c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	441a      	add	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007166:	429a      	cmp	r2, r3
 8007168:	d907      	bls.n	800717a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0b1      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2203      	movs	r2, #3
 800717e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 021a 	orr.w	r2, r2, #26
 8007198:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	4a52      	ldr	r2, [pc, #328]	; (80072e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	4a51      	ldr	r2, [pc, #324]	; (80072ec <HAL_SD_WriteBlocks_DMA+0x1cc>)
 80071a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	2200      	movs	r2, #0
 80071b0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d002      	beq.n	80071c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	025b      	lsls	r3, r3, #9
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 fcf3 	bl	8009bb4 <SDMMC_CmdBlockLength>
 80071ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00f      	beq.n	80071f6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a45      	ldr	r2, [pc, #276]	; (80072f0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	431a      	orrs	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e073      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d90a      	bls.n	8007212 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	22a0      	movs	r2, #160	; 0xa0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007208:	4618      	mov	r0, r3
 800720a:	f002 fd5b 	bl	8009cc4 <SDMMC_CmdWriteMultiBlock>
 800720e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007210:	e009      	b.n	8007226 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2290      	movs	r2, #144	; 0x90
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800721e:	4618      	mov	r0, r3
 8007220:	f002 fd2e 	bl	8009c80 <SDMMC_CmdWriteSingleBlock>
 8007224:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	431a      	orrs	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e045      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007252:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007254:	2201      	movs	r2, #1
 8007256:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3380      	adds	r3, #128	; 0x80
 8007264:	461a      	mov	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	025b      	lsls	r3, r3, #9
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	f7fd fdfe 	bl	8004e6c <HAL_DMA_Start_IT>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01a      	beq.n	80072ac <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 021a 	bic.w	r2, r2, #26
 8007284:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e018      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072ac:	f04f 33ff 	mov.w	r3, #4294967295
 80072b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	025b      	lsls	r3, r3, #9
 80072b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80072b8:	2390      	movs	r3, #144	; 0x90
 80072ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f107 0210 	add.w	r2, r7, #16
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f002 fc42 	bl	8009b5c <SDIO_ConfigData>

      return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3730      	adds	r7, #48	; 0x30
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	08007ad1 	.word	0x08007ad1
 80072ec:	08007b6d 	.word	0x08007b6d
 80072f0:	004005ff 	.word	0x004005ff
 80072f4:	4225858c 	.word	0x4225858c

080072f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <HAL_SD_IRQHandler+0x2e>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 ffc8 	bl	80082b4 <SD_Read_IT>
 8007324:	e155      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 808f 	beq.w	8007454 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800734e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007352:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0201 	bic.w	r2, r2, #1
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d039      	beq.n	80073e2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_SD_IRQHandler+0x8a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d011      	beq.n	80073a6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f002 fcbe 	bl	8009d08 <SDMMC_CmdStopTransfer>
 800738c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f91f 	bl	80075e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <HAL_SD_IRQHandler+0xda>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f003 f91c 	bl	800a610 <HAL_SD_RxCpltCallback>
 80073d8:	e0fb      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f003 f90e 	bl	800a5fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80073e0:	e0f7      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80f2 	beq.w	80075d2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d011      	beq.n	800741c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f002 fc83 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007402:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f8e4 	bl	80075e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 80d5 	bne.w	80075d2 <HAL_SD_IRQHandler+0x2da>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 80cf 	bne.w	80075d2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0208 	bic.w	r2, r2, #8
 8007442:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f003 f8d5 	bl	800a5fc <HAL_SD_TxCpltCallback>
}
 8007452:	e0be      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <HAL_SD_IRQHandler+0x17c>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 ff72 	bl	8008356 <SD_Write_IT>
 8007472:	e0ae      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80a7 	beq.w	80075d2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	f043 0202 	orr.w	r2, r3, #2
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	f043 0208 	orr.w	r2, r3, #8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	f043 0210 	orr.w	r2, r3, #16
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007504:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f002 fbfc 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007510:	4602      	mov	r2, r0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f855 	bl	80075e4 <HAL_SD_ErrorCallback>
}
 800753a:	e04a      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d045      	beq.n	80075d2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_SD_IRQHandler+0x262>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d011      	beq.n	800757e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <HAL_SD_IRQHandler+0x2e4>)
 8007560:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	4618      	mov	r0, r3
 8007568:	f7fd fcd8 	bl	8004f1c <HAL_DMA_Abort_IT>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02f      	beq.n	80075d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb4a 	bl	8007c10 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800757c:	e029      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_SD_IRQHandler+0x29a>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d011      	beq.n	80075b6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <HAL_SD_IRQHandler+0x2e8>)
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd fcbc 	bl	8004f1c <HAL_DMA_Abort_IT>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d013      	beq.n	80075d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fb65 	bl	8007c7e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075b4:	e00d      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f003 f80c 	bl	800a5e8 <HAL_SD_AbortCallback>
}
 80075d0:	e7ff      	b.n	80075d2 <HAL_SD_IRQHandler+0x2da>
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	08007c11 	.word	0x08007c11
 80075e0:	08007c7f 	.word	0x08007c7f

080075e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007606:	0f9b      	lsrs	r3, r3, #30
 8007608:	b2da      	uxtb	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007612:	0e9b      	lsrs	r3, r3, #26
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	b2da      	uxtb	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	b2da      	uxtb	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007636:	0c1b      	lsrs	r3, r3, #16
 8007638:	b2da      	uxtb	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	b2da      	uxtb	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007658:	0d1b      	lsrs	r3, r3, #20
 800765a:	b29a      	uxth	r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	b2da      	uxtb	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007676:	0bdb      	lsrs	r3, r3, #15
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	b2da      	uxtb	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007688:	0b9b      	lsrs	r3, r3, #14
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769a:	0b5b      	lsrs	r3, r3, #13
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ac:	0b1b      	lsrs	r3, r3, #12
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d163      	bne.n	8007790 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076cc:	009a      	lsls	r2, r3, #2
 80076ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076d2:	4013      	ands	r3, r2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076d8:	0f92      	lsrs	r2, r2, #30
 80076da:	431a      	orrs	r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e4:	0edb      	lsrs	r3, r3, #27
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007708:	0d5b      	lsrs	r3, r3, #21
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	b2da      	uxtb	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771a:	0c9b      	lsrs	r3, r3, #18
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	b2da      	uxtb	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800772c:	0bdb      	lsrs	r3, r3, #15
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	b2da      	uxtb	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	7e1b      	ldrb	r3, [r3, #24]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	3302      	adds	r3, #2
 8007750:	2201      	movs	r2, #1
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800775a:	fb02 f203 	mul.w	r2, r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	7a1b      	ldrb	r3, [r3, #8]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	2201      	movs	r2, #1
 800776e:	409a      	lsls	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800777c:	0a52      	lsrs	r2, r2, #9
 800777e:	fb02 f203 	mul.w	r2, r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800778c:	661a      	str	r2, [r3, #96]	; 0x60
 800778e:	e031      	b.n	80077f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	2b01      	cmp	r3, #1
 8007796:	d11d      	bne.n	80077d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	431a      	orrs	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	3301      	adds	r3, #1
 80077b4:	029a      	lsls	r2, r3, #10
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	661a      	str	r2, [r3, #96]	; 0x60
 80077d2:	e00f      	b.n	80077f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a58      	ldr	r2, [pc, #352]	; (800793c <HAL_SD_GetCardCSD+0x344>)
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e09d      	b.n	8007930 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f8:	0b9b      	lsrs	r3, r3, #14
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	b2da      	uxtb	r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780a:	09db      	lsrs	r3, r3, #7
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	b2da      	uxtb	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	b2da      	uxtb	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	0fdb      	lsrs	r3, r3, #31
 800782e:	b2da      	uxtb	r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	0f5b      	lsrs	r3, r3, #29
 800783a:	b2db      	uxtb	r3, r3
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	b2da      	uxtb	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	0e9b      	lsrs	r3, r3, #26
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	b2da      	uxtb	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	0d9b      	lsrs	r3, r3, #22
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	b2da      	uxtb	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	0d5b      	lsrs	r3, r3, #21
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	0bdb      	lsrs	r3, r3, #15
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	0b9b      	lsrs	r3, r3, #14
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	0b5b      	lsrs	r3, r3, #13
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	0b1b      	lsrs	r3, r3, #12
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	0a9b      	lsrs	r3, r3, #10
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	b2da      	uxtb	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791e:	b2da      	uxtb	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	004005ff 	.word	0x004005ff

08007940 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007998:	b5b0      	push	{r4, r5, r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af04      	add	r7, sp, #16
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2203      	movs	r2, #3
 80079a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d02e      	beq.n	8007a10 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d106      	bne.n	80079c8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
 80079c6:	e029      	b.n	8007a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ce:	d10a      	bne.n	80079e6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fb0f 	bl	8007ff4 <SD_WideBus_Enable>
 80079d6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
 80079e4:	e01a      	b.n	8007a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb4c 	bl	800808a <SD_WideBus_Disable>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
 8007a00:	e00c      	b.n	8007a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a0e:	e005      	b.n	8007a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d009      	beq.n	8007a38 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e024      	b.n	8007a82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681d      	ldr	r5, [r3, #0]
 8007a5e:	466c      	mov	r4, sp
 8007a60:	f107 0318 	add.w	r3, r7, #24
 8007a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a72:	4628      	mov	r0, r5
 8007a74:	f001 ffc2 	bl	80099fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3728      	adds	r7, #40	; 0x28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bdb0      	pop	{r4, r5, r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	004005ff 	.word	0x004005ff

08007a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa7e 	bl	8007fa4 <SD_SendStatus>
 8007aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	0a5b      	lsrs	r3, r3, #9
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007ac6:	693b      	ldr	r3, [r7, #16]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	2b82      	cmp	r3, #130	; 0x82
 8007b0e:	d111      	bne.n	8007b34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 f8f7 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007b1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff fd58 	bl	80075e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0208 	bic.w	r2, r2, #8
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f002 fd57 	bl	800a610 <HAL_SD_RxCpltCallback>
#endif
}
 8007b62:	bf00      	nop
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fd fb7a 	bl	8005274 <HAL_DMA_GetError>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d03e      	beq.n	8007c04 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d002      	beq.n	8007ba2 <SD_DMAError+0x36>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d12d      	bne.n	8007bfe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <SD_DMAError+0xa0>)
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007bb8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff62 	bl	8007a90 <HAL_SD_GetCardState>
 8007bcc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b06      	cmp	r3, #6
 8007bd2:	d002      	beq.n	8007bda <SD_DMAError+0x6e>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d10a      	bne.n	8007bf0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f002 f892 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007be4:	4602      	mov	r2, r0
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	431a      	orrs	r2, r3
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f7ff fcf0 	bl	80075e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007c04:	bf00      	nop
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	004005ff 	.word	0x004005ff

08007c10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ff31 	bl	8007a90 <HAL_SD_GetCardState>
 8007c2e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b06      	cmp	r3, #6
 8007c42:	d002      	beq.n	8007c4a <SD_DMATxAbort+0x3a>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d10a      	bne.n	8007c60 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 f85a 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007c54:	4602      	mov	r2, r0
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f002 fcbd 	bl	800a5e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c6e:	e002      	b.n	8007c76 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fcb7 	bl	80075e4 <HAL_SD_ErrorCallback>
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff fefa 	bl	8007a90 <HAL_SD_GetCardState>
 8007c9c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	d002      	beq.n	8007cb8 <SD_DMARxAbort+0x3a>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b05      	cmp	r3, #5
 8007cb6:	d10a      	bne.n	8007cce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f002 f823 	bl	8009d08 <SDMMC_CmdStopTransfer>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d103      	bne.n	8007cde <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f002 fc86 	bl	800a5e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007cdc:	e002      	b.n	8007ce4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fc80 	bl	80075e4 <HAL_SD_ErrorCallback>
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007cec:	b5b0      	push	{r4, r5, r7, lr}
 8007cee:	b094      	sub	sp, #80	; 0x50
 8007cf0:	af04      	add	r7, sp, #16
 8007cf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fed5 	bl	8009aac <SDIO_GetPowerState>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d0c:	e0b7      	b.n	8007e7e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d02f      	beq.n	8007d76 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f002 f8fe 	bl	8009f1c <SDMMC_CmdSendCID>
 8007d20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <SD_InitCard+0x40>
    {
      return errorstate;
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	e0a8      	b.n	8007e7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 feff 	bl	8009b36 <SDIO_GetResponse>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2104      	movs	r1, #4
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 fef6 	bl	8009b36 <SDIO_GetResponse>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2108      	movs	r1, #8
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 feed 	bl	8009b36 <SDIO_GetResponse>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	210c      	movs	r1, #12
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fee4 	bl	8009b36 <SDIO_GetResponse>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d00d      	beq.n	8007d9a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f107 020e 	add.w	r2, r7, #14
 8007d86:	4611      	mov	r1, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f002 f904 	bl	8009f96 <SDMMC_CmdSetRelAdd>
 8007d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <SD_InitCard+0xae>
    {
      return errorstate;
 8007d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d98:	e071      	b.n	8007e7e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d036      	beq.n	8007e10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007da2:	89fb      	ldrh	r3, [r7, #14]
 8007da4:	461a      	mov	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	041b      	lsls	r3, r3, #16
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f002 f8ce 	bl	8009f58 <SDMMC_CmdSendCSD>
 8007dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	e05a      	b.n	8007e7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 feb1 	bl	8009b36 <SDIO_GetResponse>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2104      	movs	r1, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fea8 	bl	8009b36 <SDIO_GetResponse>
 8007de6:	4602      	mov	r2, r0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2108      	movs	r1, #8
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fe9f 	bl	8009b36 <SDIO_GetResponse>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	210c      	movs	r1, #12
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fe96 	bl	8009b36 <SDIO_GetResponse>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2104      	movs	r1, #4
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fe8d 	bl	8009b36 <SDIO_GetResponse>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	0d1a      	lsrs	r2, r3, #20
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fbe4 	bl	80075f8 <HAL_SD_GetCardCSD>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e3a:	e020      	b.n	8007e7e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6819      	ldr	r1, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	f04f 0400 	mov.w	r4, #0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	4608      	mov	r0, r1
 8007e50:	f001 ff7c 	bl	8009d4c <SDMMC_CmdSelDesel>
 8007e54:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <SD_InitCard+0x174>
  {
    return errorstate;
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5e:	e00e      	b.n	8007e7e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681d      	ldr	r5, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	466c      	mov	r4, sp
 8007e68:	f103 0210 	add.w	r2, r3, #16
 8007e6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e72:	3304      	adds	r3, #4
 8007e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e76:	4628      	mov	r0, r5
 8007e78:	f001 fdc0 	bl	80099fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3740      	adds	r7, #64	; 0x40
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007e88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 ff76 	bl	8009d92 <SDMMC_CmdGoIdleState>
 8007ea6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	e072      	b.n	8007f98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 ff89 	bl	8009dce <SDMMC_CmdOperCond>
 8007ebc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 ff5f 	bl	8009d92 <SDMMC_CmdGoIdleState>
 8007ed4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	e05b      	b.n	8007f98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d137      	bne.n	8007f5e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 ff89 	bl	8009e0c <SDMMC_CmdAppCommand>
 8007efa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d02d      	beq.n	8007f5e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f06:	e047      	b.n	8007f98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 ff7c 	bl	8009e0c <SDMMC_CmdAppCommand>
 8007f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_PowerON+0x98>
    {
      return errorstate;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e03b      	b.n	8007f98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	491e      	ldr	r1, [pc, #120]	; (8007fa0 <SD_PowerON+0x118>)
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 ff92 	bl	8009e50 <SDMMC_CmdAppOperCommand>
 8007f2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f38:	e02e      	b.n	8007f98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fdf8 	bl	8009b36 <SDIO_GetResponse>
 8007f46:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	0fdb      	lsrs	r3, r3, #31
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <SD_PowerON+0xcc>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <SD_PowerON+0xce>
 8007f54:	2300      	movs	r3, #0
 8007f56:	613b      	str	r3, [r7, #16]

    count++;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d802      	bhi.n	8007f6e <SD_PowerON+0xe6>
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0cc      	beq.n	8007f08 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d902      	bls.n	8007f7e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f7c:	e00c      	b.n	8007f98 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f8e:	e002      	b.n	8007f96 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	c1100000 	.word	0xc1100000

08007fa4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fb8:	e018      	b.n	8007fec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	041b      	lsls	r3, r3, #16
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f002 f806 	bl	8009fd8 <SDMMC_CmdSendStatus>
 8007fcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	e009      	b.n	8007fec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fda9 	bl	8009b36 <SDIO_GetResponse>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	2300      	movs	r3, #0
 8008002:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fd93 	bl	8009b36 <SDIO_GetResponse>
 8008010:	4603      	mov	r3, r0
 8008012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800801a:	d102      	bne.n	8008022 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800801c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008020:	e02f      	b.n	8008082 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008022:	f107 030c 	add.w	r3, r7, #12
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f879 	bl	8008120 <SD_FindSCR>
 800802e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	e023      	b.n	8008082 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01c      	beq.n	800807e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f001 fedb 	bl	8009e0c <SDMMC_CmdAppCommand>
 8008056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	e00f      	b.n	8008082 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2102      	movs	r1, #2
 8008068:	4618      	mov	r0, r3
 800806a:	f001 ff14 	bl	8009e96 <SDMMC_CmdBusWidth>
 800806e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e003      	b.n	8008082 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800807a:	2300      	movs	r3, #0
 800807c:	e001      	b.n	8008082 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800807e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fd48 	bl	8009b36 <SDIO_GetResponse>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b0:	d102      	bne.n	80080b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080b6:	e02f      	b.n	8008118 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f82e 	bl	8008120 <SD_FindSCR>
 80080c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	e023      	b.n	8008118 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01c      	beq.n	8008114 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f001 fe90 	bl	8009e0c <SDMMC_CmdAppCommand>
 80080ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	e00f      	b.n	8008118 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fec9 	bl	8009e96 <SDMMC_CmdBusWidth>
 8008104:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	e003      	b.n	8008118 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008110:	2300      	movs	r3, #0
 8008112:	e001      	b.n	8008118 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008114:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008120:	b590      	push	{r4, r7, lr}
 8008122:	b08f      	sub	sp, #60	; 0x3c
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800812a:	f7fc f8ad 	bl	8004288 <HAL_GetTick>
 800812e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008134:	2300      	movs	r3, #0
 8008136:	60bb      	str	r3, [r7, #8]
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2108      	movs	r1, #8
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fd34 	bl	8009bb4 <SDMMC_CmdBlockLength>
 800814c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	e0a9      	b.n	80082ac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f001 fe51 	bl	8009e0c <SDMMC_CmdAppCommand>
 800816a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	e09a      	b.n	80082ac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800817c:	2308      	movs	r3, #8
 800817e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008180:	2330      	movs	r3, #48	; 0x30
 8008182:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008184:	2302      	movs	r3, #2
 8008186:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008188:	2300      	movs	r3, #0
 800818a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800818c:	2301      	movs	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f107 0210 	add.w	r2, r7, #16
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fcde 	bl	8009b5c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 fe98 	bl	8009eda <SDMMC_CmdSendSCR>
 80081aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d022      	beq.n	80081f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	e07a      	b.n	80082ac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00e      	beq.n	80081e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6819      	ldr	r1, [r3, #0]
 80081c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	18d4      	adds	r4, r2, r3
 80081d2:	4608      	mov	r0, r1
 80081d4:	f001 fc3d 	bl	8009a52 <SDIO_ReadFIFO>
 80081d8:	4603      	mov	r3, r0
 80081da:	6023      	str	r3, [r4, #0]
      index++;
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	3301      	adds	r3, #1
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081e2:	f7fc f851 	bl	8004288 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f0:	d102      	bne.n	80081f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081f6:	e059      	b.n	80082ac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fe:	f240 432a 	movw	r3, #1066	; 0x42a
 8008202:	4013      	ands	r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0d6      	beq.n	80081b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2208      	movs	r2, #8
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800821e:	2308      	movs	r3, #8
 8008220:	e044      	b.n	80082ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2202      	movs	r2, #2
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008238:	2302      	movs	r3, #2
 800823a:	e037      	b.n	80082ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2220      	movs	r2, #32
 8008250:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008252:	2320      	movs	r3, #32
 8008254:	e02a      	b.n	80082ac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f240 523a 	movw	r2, #1338	; 0x53a
 800825e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	061a      	lsls	r2, r3, #24
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800826c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008276:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	601a      	str	r2, [r3, #0]
    scr++;
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	3304      	adds	r3, #4
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	061a      	lsls	r2, r3, #24
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008294:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800829e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	0e1b      	lsrs	r3, r3, #24
 80082a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	373c      	adds	r7, #60	; 0x3c
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d03f      	beq.n	800834e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	e033      	b.n	800833c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 fbba 	bl	8009a52 <SDIO_ReadFIFO>
 80082de:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	0a1b      	lsrs	r3, r3, #8
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3b01      	subs	r3, #1
 8008308:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	0c1b      	lsrs	r3, r3, #16
 800830e:	b2da      	uxtb	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	3b01      	subs	r3, #1
 800831e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	0e1b      	lsrs	r3, r3, #24
 8008324:	b2da      	uxtb	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	3b01      	subs	r3, #1
 8008334:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	3301      	adds	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b07      	cmp	r3, #7
 8008340:	d9c8      	bls.n	80082d4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800834e:	bf00      	nop
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d043      	beq.n	80083f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e037      	b.n	80083e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3b01      	subs	r3, #1
 8008386:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	021a      	lsls	r2, r3, #8
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	3b01      	subs	r3, #1
 800839e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	041a      	lsls	r2, r3, #16
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	061a      	lsls	r2, r3, #24
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f107 0208 	add.w	r2, r7, #8
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 fb46 	bl	8009a6c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	3301      	adds	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	d9c4      	bls.n	8008376 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e056      	b.n	80084c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7fb fa23 	bl	8003878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008448:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	ea42 0103 	orr.w	r1, r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	0c1b      	lsrs	r3, r3, #16
 8008490:	f003 0104 	and.w	r1, r3, #4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69da      	ldr	r2, [r3, #28]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e01d      	b.n	8008516 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fb fa7e 	bl	80039f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f000 fb56 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b06      	cmp	r3, #6
 8008546:	d007      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e01d      	b.n	80085b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7fb f9bb 	bl	8003908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f000 fb07 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2201      	movs	r2, #1
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fd42 	bl	8009058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a15      	ldr	r2, [pc, #84]	; (8008630 <HAL_TIM_PWM_Start+0x74>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d004      	beq.n	80085e8 <HAL_TIM_PWM_Start+0x2c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a14      	ldr	r2, [pc, #80]	; (8008634 <HAL_TIM_PWM_Start+0x78>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d101      	bne.n	80085ec <HAL_TIM_PWM_Start+0x30>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <HAL_TIM_PWM_Start+0x32>
 80085ec:	2300      	movs	r3, #0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b06      	cmp	r3, #6
 8008612:	d007      	beq.n	8008624 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40010000 	.word	0x40010000
 8008634:	40010400 	.word	0x40010400

08008638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e083      	b.n	8008754 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fb fa37 	bl	8003ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2202      	movs	r2, #2
 800866a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867c:	f023 0307 	bic.w	r3, r3, #7
 8008680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f000 fa93 	bl	8008bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	4313      	orrs	r3, r2
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80086d8:	f023 030c 	bic.w	r3, r3, #12
 80086dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4313      	orrs	r3, r2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	031b      	lsls	r3, r3, #12
 8008708:	4313      	orrs	r3, r2
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008716:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	4313      	orrs	r3, r2
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_TIM_Encoder_Start+0x16>
 800876c:	2b04      	cmp	r3, #4
 800876e:	d008      	beq.n	8008782 <HAL_TIM_Encoder_Start+0x26>
 8008770:	e00f      	b.n	8008792 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2201      	movs	r2, #1
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fc6c 	bl	8009058 <TIM_CCxChannelCmd>
      break;
 8008780:	e016      	b.n	80087b0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2201      	movs	r2, #1
 8008788:	2104      	movs	r1, #4
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fc64 	bl	8009058 <TIM_CCxChannelCmd>
      break;
 8008790:	e00e      	b.n	80087b0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fc5c 	bl	8009058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2201      	movs	r2, #1
 80087a6:	2104      	movs	r1, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fc55 	bl	8009058 <TIM_CCxChannelCmd>
      break;
 80087ae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 0201 	orr.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d122      	bne.n	8008826 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d11b      	bne.n	8008826 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f06f 0202 	mvn.w	r2, #2
 80087f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f9b5 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 8008812:	e005      	b.n	8008820 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9a7 	bl	8008b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9b8 	bl	8008b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d122      	bne.n	800887a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	d11b      	bne.n	800887a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f06f 0204 	mvn.w	r2, #4
 800884a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f98b 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 8008866:	e005      	b.n	8008874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f97d 	bl	8008b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f98e 	bl	8008b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b08      	cmp	r3, #8
 8008886:	d122      	bne.n	80088ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b08      	cmp	r3, #8
 8008894:	d11b      	bne.n	80088ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f06f 0208 	mvn.w	r2, #8
 800889e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2204      	movs	r2, #4
 80088a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f961 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 80088ba:	e005      	b.n	80088c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f953 	bl	8008b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f964 	bl	8008b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d122      	bne.n	8008922 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b10      	cmp	r3, #16
 80088e8:	d11b      	bne.n	8008922 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f06f 0210 	mvn.w	r2, #16
 80088f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2208      	movs	r2, #8
 80088f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f937 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 800890e:	e005      	b.n	800891c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f929 	bl	8008b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f93a 	bl	8008b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b01      	cmp	r3, #1
 800892e:	d10e      	bne.n	800894e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b01      	cmp	r3, #1
 800893c:	d107      	bne.n	800894e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f06f 0201 	mvn.w	r2, #1
 8008946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7f9 fdcf 	bl	80024ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d10e      	bne.n	800897a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d107      	bne.n	800897a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc6d 	bl	8009254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	d10e      	bne.n	80089a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d107      	bne.n	80089a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800899e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f8ff 	bl	8008ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d10e      	bne.n	80089d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b20      	cmp	r3, #32
 80089c0:	d107      	bne.n	80089d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f06f 0220 	mvn.w	r2, #32
 80089ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc37 	bl	8009240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80089f2:	2302      	movs	r3, #2
 80089f4:	e0b4      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x184>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2202      	movs	r2, #2
 8008a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b0c      	cmp	r3, #12
 8008a0a:	f200 809f 	bhi.w	8008b4c <HAL_TIM_PWM_ConfigChannel+0x170>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008a49 	.word	0x08008a49
 8008a18:	08008b4d 	.word	0x08008b4d
 8008a1c:	08008b4d 	.word	0x08008b4d
 8008a20:	08008b4d 	.word	0x08008b4d
 8008a24:	08008a89 	.word	0x08008a89
 8008a28:	08008b4d 	.word	0x08008b4d
 8008a2c:	08008b4d 	.word	0x08008b4d
 8008a30:	08008b4d 	.word	0x08008b4d
 8008a34:	08008acb 	.word	0x08008acb
 8008a38:	08008b4d 	.word	0x08008b4d
 8008a3c:	08008b4d 	.word	0x08008b4d
 8008a40:	08008b4d 	.word	0x08008b4d
 8008a44:	08008b0b 	.word	0x08008b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f952 	bl	8008cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0208 	orr.w	r2, r2, #8
 8008a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0204 	bic.w	r2, r2, #4
 8008a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6999      	ldr	r1, [r3, #24]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	619a      	str	r2, [r3, #24]
      break;
 8008a86:	e062      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f9a2 	bl	8008dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6999      	ldr	r1, [r3, #24]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	021a      	lsls	r2, r3, #8
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	619a      	str	r2, [r3, #24]
      break;
 8008ac8:	e041      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f9f7 	bl	8008ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69da      	ldr	r2, [r3, #28]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0208 	orr.w	r2, r2, #8
 8008ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0204 	bic.w	r2, r2, #4
 8008af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69d9      	ldr	r1, [r3, #28]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	61da      	str	r2, [r3, #28]
      break;
 8008b08:	e021      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fa4b 	bl	8008fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69da      	ldr	r2, [r3, #28]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69d9      	ldr	r1, [r3, #28]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	021a      	lsls	r2, r3, #8
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	61da      	str	r2, [r3, #28]
      break;
 8008b4a:	e000      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008b4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a3d      	ldr	r2, [pc, #244]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a3c      	ldr	r2, [pc, #240]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a3b      	ldr	r2, [pc, #236]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a3a      	ldr	r2, [pc, #232]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d108      	bne.n	8008c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d02b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c18:	d027      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a2c      	ldr	r2, [pc, #176]	; (8008cd0 <TIM_Base_SetConfig+0x118>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d023      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2b      	ldr	r2, [pc, #172]	; (8008cd4 <TIM_Base_SetConfig+0x11c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d01f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <TIM_Base_SetConfig+0x120>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d017      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a28      	ldr	r2, [pc, #160]	; (8008ce0 <TIM_Base_SetConfig+0x128>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <TIM_Base_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00f      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a26      	ldr	r2, [pc, #152]	; (8008ce8 <TIM_Base_SetConfig+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00b      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <TIM_Base_SetConfig+0x134>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <TIM_Base_SetConfig+0x138>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a23      	ldr	r2, [pc, #140]	; (8008cf4 <TIM_Base_SetConfig+0x13c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d108      	bne.n	8008c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <TIM_Base_SetConfig+0x114>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_Base_SetConfig+0xf8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <TIM_Base_SetConfig+0x124>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d103      	bne.n	8008cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	615a      	str	r2, [r3, #20]
}
 8008cbe:	bf00      	nop
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40000400 	.word	0x40000400
 8008cd4:	40000800 	.word	0x40000800
 8008cd8:	40000c00 	.word	0x40000c00
 8008cdc:	40010400 	.word	0x40010400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	40001800 	.word	0x40001800
 8008cf0:	40001c00 	.word	0x40001c00
 8008cf4:	40002000 	.word	0x40002000

08008cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 0302 	bic.w	r3, r3, #2
 8008d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a20      	ldr	r2, [pc, #128]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC1_SetConfig+0x64>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d10c      	bne.n	8008d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0308 	bic.w	r3, r3, #8
 8008d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f023 0304 	bic.w	r3, r3, #4
 8008d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <TIM_OC1_SetConfig+0xd8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC1_SetConfig+0x8e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <TIM_OC1_SetConfig+0xdc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d111      	bne.n	8008daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0210 	bic.w	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f023 0320 	bic.w	r3, r3, #32
 8008e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a22      	ldr	r2, [pc, #136]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_OC2_SetConfig+0x68>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a21      	ldr	r2, [pc, #132]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10d      	bne.n	8008e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a17      	ldr	r2, [pc, #92]	; (8008ebc <TIM_OC2_SetConfig+0xe4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC2_SetConfig+0x94>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <TIM_OC2_SetConfig+0xe8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d113      	bne.n	8008e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	40010400 	.word	0x40010400

08008ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a21      	ldr	r2, [pc, #132]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d003      	beq.n	8008f2a <TIM_OC3_SetConfig+0x66>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d10d      	bne.n	8008f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <TIM_OC3_SetConfig+0xe0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d003      	beq.n	8008f56 <TIM_OC3_SetConfig+0x92>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a15      	ldr	r2, [pc, #84]	; (8008fa8 <TIM_OC3_SetConfig+0xe4>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d113      	bne.n	8008f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	621a      	str	r2, [r3, #32]
}
 8008f98:	bf00      	nop
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40010400 	.word	0x40010400

08008fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	4313      	orrs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a12      	ldr	r2, [pc, #72]	; (8009050 <TIM_OC4_SetConfig+0xa4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d003      	beq.n	8009014 <TIM_OC4_SetConfig+0x68>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a11      	ldr	r2, [pc, #68]	; (8009054 <TIM_OC4_SetConfig+0xa8>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d109      	bne.n	8009028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800901a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	019b      	lsls	r3, r3, #6
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	2201      	movs	r2, #1
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a1a      	ldr	r2, [r3, #32]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	43db      	mvns	r3, r3
 800907a:	401a      	ands	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a1a      	ldr	r2, [r3, #32]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	fa01 f303 	lsl.w	r3, r1, r3
 8009090:	431a      	orrs	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e05a      	b.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a21      	ldr	r2, [pc, #132]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d022      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009108:	d01d      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d018      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a1b      	ldr	r2, [pc, #108]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d013      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a1a      	ldr	r2, [pc, #104]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00e      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a18      	ldr	r2, [pc, #96]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a17      	ldr	r2, [pc, #92]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d004      	beq.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a15      	ldr	r2, [pc, #84]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d10c      	bne.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800914c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	4313      	orrs	r3, r2
 8009156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40010000 	.word	0x40010000
 8009184:	40000400 	.word	0x40000400
 8009188:	40000800 	.word	0x40000800
 800918c:	40000c00 	.word	0x40000c00
 8009190:	40010400 	.word	0x40010400
 8009194:	40014000 	.word	0x40014000
 8009198:	40001800 	.word	0x40001800

0800919c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e03d      	b.n	8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e03f      	b.n	80092fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fa fd42 	bl	8003d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2224      	movs	r2, #36	; 0x24
 8009298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f829 	bl	8009304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691a      	ldr	r2, [r3, #16]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009346:	f023 030c 	bic.w	r3, r3, #12
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6812      	ldr	r2, [r2, #0]
 800934e:	68f9      	ldr	r1, [r7, #12]
 8009350:	430b      	orrs	r3, r1
 8009352:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009372:	f040 818b 	bne.w	800968c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4ac1      	ldr	r2, [pc, #772]	; (8009680 <UART_SetConfig+0x37c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d005      	beq.n	800938c <UART_SetConfig+0x88>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4abf      	ldr	r2, [pc, #764]	; (8009684 <UART_SetConfig+0x380>)
 8009386:	4293      	cmp	r3, r2
 8009388:	f040 80bd 	bne.w	8009506 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800938c:	f7fd f8bc 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 8009390:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	461d      	mov	r5, r3
 8009396:	f04f 0600 	mov.w	r6, #0
 800939a:	46a8      	mov	r8, r5
 800939c:	46b1      	mov	r9, r6
 800939e:	eb18 0308 	adds.w	r3, r8, r8
 80093a2:	eb49 0409 	adc.w	r4, r9, r9
 80093a6:	4698      	mov	r8, r3
 80093a8:	46a1      	mov	r9, r4
 80093aa:	eb18 0805 	adds.w	r8, r8, r5
 80093ae:	eb49 0906 	adc.w	r9, r9, r6
 80093b2:	f04f 0100 	mov.w	r1, #0
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093c6:	4688      	mov	r8, r1
 80093c8:	4691      	mov	r9, r2
 80093ca:	eb18 0005 	adds.w	r0, r8, r5
 80093ce:	eb49 0106 	adc.w	r1, r9, r6
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	461d      	mov	r5, r3
 80093d8:	f04f 0600 	mov.w	r6, #0
 80093dc:	196b      	adds	r3, r5, r5
 80093de:	eb46 0406 	adc.w	r4, r6, r6
 80093e2:	461a      	mov	r2, r3
 80093e4:	4623      	mov	r3, r4
 80093e6:	f7f7 fc67 	bl	8000cb8 <__aeabi_uldivmod>
 80093ea:	4603      	mov	r3, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	461a      	mov	r2, r3
 80093f0:	4ba5      	ldr	r3, [pc, #660]	; (8009688 <UART_SetConfig+0x384>)
 80093f2:	fba3 2302 	umull	r2, r3, r3, r2
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	461d      	mov	r5, r3
 8009400:	f04f 0600 	mov.w	r6, #0
 8009404:	46a9      	mov	r9, r5
 8009406:	46b2      	mov	sl, r6
 8009408:	eb19 0309 	adds.w	r3, r9, r9
 800940c:	eb4a 040a 	adc.w	r4, sl, sl
 8009410:	4699      	mov	r9, r3
 8009412:	46a2      	mov	sl, r4
 8009414:	eb19 0905 	adds.w	r9, r9, r5
 8009418:	eb4a 0a06 	adc.w	sl, sl, r6
 800941c:	f04f 0100 	mov.w	r1, #0
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800942c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009430:	4689      	mov	r9, r1
 8009432:	4692      	mov	sl, r2
 8009434:	eb19 0005 	adds.w	r0, r9, r5
 8009438:	eb4a 0106 	adc.w	r1, sl, r6
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	461d      	mov	r5, r3
 8009442:	f04f 0600 	mov.w	r6, #0
 8009446:	196b      	adds	r3, r5, r5
 8009448:	eb46 0406 	adc.w	r4, r6, r6
 800944c:	461a      	mov	r2, r3
 800944e:	4623      	mov	r3, r4
 8009450:	f7f7 fc32 	bl	8000cb8 <__aeabi_uldivmod>
 8009454:	4603      	mov	r3, r0
 8009456:	460c      	mov	r4, r1
 8009458:	461a      	mov	r2, r3
 800945a:	4b8b      	ldr	r3, [pc, #556]	; (8009688 <UART_SetConfig+0x384>)
 800945c:	fba3 1302 	umull	r1, r3, r3, r2
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	2164      	movs	r1, #100	; 0x64
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	3332      	adds	r3, #50	; 0x32
 800946e:	4a86      	ldr	r2, [pc, #536]	; (8009688 <UART_SetConfig+0x384>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800947c:	4498      	add	r8, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	461d      	mov	r5, r3
 8009482:	f04f 0600 	mov.w	r6, #0
 8009486:	46a9      	mov	r9, r5
 8009488:	46b2      	mov	sl, r6
 800948a:	eb19 0309 	adds.w	r3, r9, r9
 800948e:	eb4a 040a 	adc.w	r4, sl, sl
 8009492:	4699      	mov	r9, r3
 8009494:	46a2      	mov	sl, r4
 8009496:	eb19 0905 	adds.w	r9, r9, r5
 800949a:	eb4a 0a06 	adc.w	sl, sl, r6
 800949e:	f04f 0100 	mov.w	r1, #0
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094b2:	4689      	mov	r9, r1
 80094b4:	4692      	mov	sl, r2
 80094b6:	eb19 0005 	adds.w	r0, r9, r5
 80094ba:	eb4a 0106 	adc.w	r1, sl, r6
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	461d      	mov	r5, r3
 80094c4:	f04f 0600 	mov.w	r6, #0
 80094c8:	196b      	adds	r3, r5, r5
 80094ca:	eb46 0406 	adc.w	r4, r6, r6
 80094ce:	461a      	mov	r2, r3
 80094d0:	4623      	mov	r3, r4
 80094d2:	f7f7 fbf1 	bl	8000cb8 <__aeabi_uldivmod>
 80094d6:	4603      	mov	r3, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	461a      	mov	r2, r3
 80094dc:	4b6a      	ldr	r3, [pc, #424]	; (8009688 <UART_SetConfig+0x384>)
 80094de:	fba3 1302 	umull	r1, r3, r3, r2
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	2164      	movs	r1, #100	; 0x64
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	3332      	adds	r3, #50	; 0x32
 80094f0:	4a65      	ldr	r2, [pc, #404]	; (8009688 <UART_SetConfig+0x384>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	f003 0207 	and.w	r2, r3, #7
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4442      	add	r2, r8
 8009502:	609a      	str	r2, [r3, #8]
 8009504:	e26f      	b.n	80099e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009506:	f7fc ffeb 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 800950a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	461d      	mov	r5, r3
 8009510:	f04f 0600 	mov.w	r6, #0
 8009514:	46a8      	mov	r8, r5
 8009516:	46b1      	mov	r9, r6
 8009518:	eb18 0308 	adds.w	r3, r8, r8
 800951c:	eb49 0409 	adc.w	r4, r9, r9
 8009520:	4698      	mov	r8, r3
 8009522:	46a1      	mov	r9, r4
 8009524:	eb18 0805 	adds.w	r8, r8, r5
 8009528:	eb49 0906 	adc.w	r9, r9, r6
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009538:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800953c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009540:	4688      	mov	r8, r1
 8009542:	4691      	mov	r9, r2
 8009544:	eb18 0005 	adds.w	r0, r8, r5
 8009548:	eb49 0106 	adc.w	r1, r9, r6
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	461d      	mov	r5, r3
 8009552:	f04f 0600 	mov.w	r6, #0
 8009556:	196b      	adds	r3, r5, r5
 8009558:	eb46 0406 	adc.w	r4, r6, r6
 800955c:	461a      	mov	r2, r3
 800955e:	4623      	mov	r3, r4
 8009560:	f7f7 fbaa 	bl	8000cb8 <__aeabi_uldivmod>
 8009564:	4603      	mov	r3, r0
 8009566:	460c      	mov	r4, r1
 8009568:	461a      	mov	r2, r3
 800956a:	4b47      	ldr	r3, [pc, #284]	; (8009688 <UART_SetConfig+0x384>)
 800956c:	fba3 2302 	umull	r2, r3, r3, r2
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	461d      	mov	r5, r3
 800957a:	f04f 0600 	mov.w	r6, #0
 800957e:	46a9      	mov	r9, r5
 8009580:	46b2      	mov	sl, r6
 8009582:	eb19 0309 	adds.w	r3, r9, r9
 8009586:	eb4a 040a 	adc.w	r4, sl, sl
 800958a:	4699      	mov	r9, r3
 800958c:	46a2      	mov	sl, r4
 800958e:	eb19 0905 	adds.w	r9, r9, r5
 8009592:	eb4a 0a06 	adc.w	sl, sl, r6
 8009596:	f04f 0100 	mov.w	r1, #0
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095aa:	4689      	mov	r9, r1
 80095ac:	4692      	mov	sl, r2
 80095ae:	eb19 0005 	adds.w	r0, r9, r5
 80095b2:	eb4a 0106 	adc.w	r1, sl, r6
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	461d      	mov	r5, r3
 80095bc:	f04f 0600 	mov.w	r6, #0
 80095c0:	196b      	adds	r3, r5, r5
 80095c2:	eb46 0406 	adc.w	r4, r6, r6
 80095c6:	461a      	mov	r2, r3
 80095c8:	4623      	mov	r3, r4
 80095ca:	f7f7 fb75 	bl	8000cb8 <__aeabi_uldivmod>
 80095ce:	4603      	mov	r3, r0
 80095d0:	460c      	mov	r4, r1
 80095d2:	461a      	mov	r2, r3
 80095d4:	4b2c      	ldr	r3, [pc, #176]	; (8009688 <UART_SetConfig+0x384>)
 80095d6:	fba3 1302 	umull	r1, r3, r3, r2
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	2164      	movs	r1, #100	; 0x64
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	3332      	adds	r3, #50	; 0x32
 80095e8:	4a27      	ldr	r2, [pc, #156]	; (8009688 <UART_SetConfig+0x384>)
 80095ea:	fba2 2303 	umull	r2, r3, r2, r3
 80095ee:	095b      	lsrs	r3, r3, #5
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095f6:	4498      	add	r8, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	461d      	mov	r5, r3
 80095fc:	f04f 0600 	mov.w	r6, #0
 8009600:	46a9      	mov	r9, r5
 8009602:	46b2      	mov	sl, r6
 8009604:	eb19 0309 	adds.w	r3, r9, r9
 8009608:	eb4a 040a 	adc.w	r4, sl, sl
 800960c:	4699      	mov	r9, r3
 800960e:	46a2      	mov	sl, r4
 8009610:	eb19 0905 	adds.w	r9, r9, r5
 8009614:	eb4a 0a06 	adc.w	sl, sl, r6
 8009618:	f04f 0100 	mov.w	r1, #0
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800962c:	4689      	mov	r9, r1
 800962e:	4692      	mov	sl, r2
 8009630:	eb19 0005 	adds.w	r0, r9, r5
 8009634:	eb4a 0106 	adc.w	r1, sl, r6
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	461d      	mov	r5, r3
 800963e:	f04f 0600 	mov.w	r6, #0
 8009642:	196b      	adds	r3, r5, r5
 8009644:	eb46 0406 	adc.w	r4, r6, r6
 8009648:	461a      	mov	r2, r3
 800964a:	4623      	mov	r3, r4
 800964c:	f7f7 fb34 	bl	8000cb8 <__aeabi_uldivmod>
 8009650:	4603      	mov	r3, r0
 8009652:	460c      	mov	r4, r1
 8009654:	461a      	mov	r2, r3
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <UART_SetConfig+0x384>)
 8009658:	fba3 1302 	umull	r1, r3, r3, r2
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	2164      	movs	r1, #100	; 0x64
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	3332      	adds	r3, #50	; 0x32
 800966a:	4a07      	ldr	r2, [pc, #28]	; (8009688 <UART_SetConfig+0x384>)
 800966c:	fba2 2303 	umull	r2, r3, r2, r3
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	f003 0207 	and.w	r2, r3, #7
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4442      	add	r2, r8
 800967c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800967e:	e1b2      	b.n	80099e6 <UART_SetConfig+0x6e2>
 8009680:	40011000 	.word	0x40011000
 8009684:	40011400 	.word	0x40011400
 8009688:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4ad7      	ldr	r2, [pc, #860]	; (80099f0 <UART_SetConfig+0x6ec>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d005      	beq.n	80096a2 <UART_SetConfig+0x39e>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4ad6      	ldr	r2, [pc, #856]	; (80099f4 <UART_SetConfig+0x6f0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	f040 80d1 	bne.w	8009844 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80096a2:	f7fc ff31 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 80096a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	469a      	mov	sl, r3
 80096ac:	f04f 0b00 	mov.w	fp, #0
 80096b0:	46d0      	mov	r8, sl
 80096b2:	46d9      	mov	r9, fp
 80096b4:	eb18 0308 	adds.w	r3, r8, r8
 80096b8:	eb49 0409 	adc.w	r4, r9, r9
 80096bc:	4698      	mov	r8, r3
 80096be:	46a1      	mov	r9, r4
 80096c0:	eb18 080a 	adds.w	r8, r8, sl
 80096c4:	eb49 090b 	adc.w	r9, r9, fp
 80096c8:	f04f 0100 	mov.w	r1, #0
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096dc:	4688      	mov	r8, r1
 80096de:	4691      	mov	r9, r2
 80096e0:	eb1a 0508 	adds.w	r5, sl, r8
 80096e4:	eb4b 0609 	adc.w	r6, fp, r9
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	4619      	mov	r1, r3
 80096ee:	f04f 0200 	mov.w	r2, #0
 80096f2:	f04f 0300 	mov.w	r3, #0
 80096f6:	f04f 0400 	mov.w	r4, #0
 80096fa:	0094      	lsls	r4, r2, #2
 80096fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009700:	008b      	lsls	r3, r1, #2
 8009702:	461a      	mov	r2, r3
 8009704:	4623      	mov	r3, r4
 8009706:	4628      	mov	r0, r5
 8009708:	4631      	mov	r1, r6
 800970a:	f7f7 fad5 	bl	8000cb8 <__aeabi_uldivmod>
 800970e:	4603      	mov	r3, r0
 8009710:	460c      	mov	r4, r1
 8009712:	461a      	mov	r2, r3
 8009714:	4bb8      	ldr	r3, [pc, #736]	; (80099f8 <UART_SetConfig+0x6f4>)
 8009716:	fba3 2302 	umull	r2, r3, r3, r2
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	469b      	mov	fp, r3
 8009724:	f04f 0c00 	mov.w	ip, #0
 8009728:	46d9      	mov	r9, fp
 800972a:	46e2      	mov	sl, ip
 800972c:	eb19 0309 	adds.w	r3, r9, r9
 8009730:	eb4a 040a 	adc.w	r4, sl, sl
 8009734:	4699      	mov	r9, r3
 8009736:	46a2      	mov	sl, r4
 8009738:	eb19 090b 	adds.w	r9, r9, fp
 800973c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009740:	f04f 0100 	mov.w	r1, #0
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800974c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009754:	4689      	mov	r9, r1
 8009756:	4692      	mov	sl, r2
 8009758:	eb1b 0509 	adds.w	r5, fp, r9
 800975c:	eb4c 060a 	adc.w	r6, ip, sl
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4619      	mov	r1, r3
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	f04f 0300 	mov.w	r3, #0
 800976e:	f04f 0400 	mov.w	r4, #0
 8009772:	0094      	lsls	r4, r2, #2
 8009774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009778:	008b      	lsls	r3, r1, #2
 800977a:	461a      	mov	r2, r3
 800977c:	4623      	mov	r3, r4
 800977e:	4628      	mov	r0, r5
 8009780:	4631      	mov	r1, r6
 8009782:	f7f7 fa99 	bl	8000cb8 <__aeabi_uldivmod>
 8009786:	4603      	mov	r3, r0
 8009788:	460c      	mov	r4, r1
 800978a:	461a      	mov	r2, r3
 800978c:	4b9a      	ldr	r3, [pc, #616]	; (80099f8 <UART_SetConfig+0x6f4>)
 800978e:	fba3 1302 	umull	r1, r3, r3, r2
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	2164      	movs	r1, #100	; 0x64
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	3332      	adds	r3, #50	; 0x32
 80097a0:	4a95      	ldr	r2, [pc, #596]	; (80099f8 <UART_SetConfig+0x6f4>)
 80097a2:	fba2 2303 	umull	r2, r3, r2, r3
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097ac:	4498      	add	r8, r3
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	469b      	mov	fp, r3
 80097b2:	f04f 0c00 	mov.w	ip, #0
 80097b6:	46d9      	mov	r9, fp
 80097b8:	46e2      	mov	sl, ip
 80097ba:	eb19 0309 	adds.w	r3, r9, r9
 80097be:	eb4a 040a 	adc.w	r4, sl, sl
 80097c2:	4699      	mov	r9, r3
 80097c4:	46a2      	mov	sl, r4
 80097c6:	eb19 090b 	adds.w	r9, r9, fp
 80097ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097ce:	f04f 0100 	mov.w	r1, #0
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097e2:	4689      	mov	r9, r1
 80097e4:	4692      	mov	sl, r2
 80097e6:	eb1b 0509 	adds.w	r5, fp, r9
 80097ea:	eb4c 060a 	adc.w	r6, ip, sl
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	f04f 0300 	mov.w	r3, #0
 80097fc:	f04f 0400 	mov.w	r4, #0
 8009800:	0094      	lsls	r4, r2, #2
 8009802:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009806:	008b      	lsls	r3, r1, #2
 8009808:	461a      	mov	r2, r3
 800980a:	4623      	mov	r3, r4
 800980c:	4628      	mov	r0, r5
 800980e:	4631      	mov	r1, r6
 8009810:	f7f7 fa52 	bl	8000cb8 <__aeabi_uldivmod>
 8009814:	4603      	mov	r3, r0
 8009816:	460c      	mov	r4, r1
 8009818:	461a      	mov	r2, r3
 800981a:	4b77      	ldr	r3, [pc, #476]	; (80099f8 <UART_SetConfig+0x6f4>)
 800981c:	fba3 1302 	umull	r1, r3, r3, r2
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	2164      	movs	r1, #100	; 0x64
 8009824:	fb01 f303 	mul.w	r3, r1, r3
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	3332      	adds	r3, #50	; 0x32
 800982e:	4a72      	ldr	r2, [pc, #456]	; (80099f8 <UART_SetConfig+0x6f4>)
 8009830:	fba2 2303 	umull	r2, r3, r2, r3
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	f003 020f 	and.w	r2, r3, #15
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4442      	add	r2, r8
 8009840:	609a      	str	r2, [r3, #8]
 8009842:	e0d0      	b.n	80099e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009844:	f7fc fe4c 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 8009848:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	469a      	mov	sl, r3
 800984e:	f04f 0b00 	mov.w	fp, #0
 8009852:	46d0      	mov	r8, sl
 8009854:	46d9      	mov	r9, fp
 8009856:	eb18 0308 	adds.w	r3, r8, r8
 800985a:	eb49 0409 	adc.w	r4, r9, r9
 800985e:	4698      	mov	r8, r3
 8009860:	46a1      	mov	r9, r4
 8009862:	eb18 080a 	adds.w	r8, r8, sl
 8009866:	eb49 090b 	adc.w	r9, r9, fp
 800986a:	f04f 0100 	mov.w	r1, #0
 800986e:	f04f 0200 	mov.w	r2, #0
 8009872:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009876:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800987a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800987e:	4688      	mov	r8, r1
 8009880:	4691      	mov	r9, r2
 8009882:	eb1a 0508 	adds.w	r5, sl, r8
 8009886:	eb4b 0609 	adc.w	r6, fp, r9
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4619      	mov	r1, r3
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	f04f 0400 	mov.w	r4, #0
 800989c:	0094      	lsls	r4, r2, #2
 800989e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098a2:	008b      	lsls	r3, r1, #2
 80098a4:	461a      	mov	r2, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	4631      	mov	r1, r6
 80098ac:	f7f7 fa04 	bl	8000cb8 <__aeabi_uldivmod>
 80098b0:	4603      	mov	r3, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b50      	ldr	r3, [pc, #320]	; (80099f8 <UART_SetConfig+0x6f4>)
 80098b8:	fba3 2302 	umull	r2, r3, r3, r2
 80098bc:	095b      	lsrs	r3, r3, #5
 80098be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	469b      	mov	fp, r3
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	46d9      	mov	r9, fp
 80098cc:	46e2      	mov	sl, ip
 80098ce:	eb19 0309 	adds.w	r3, r9, r9
 80098d2:	eb4a 040a 	adc.w	r4, sl, sl
 80098d6:	4699      	mov	r9, r3
 80098d8:	46a2      	mov	sl, r4
 80098da:	eb19 090b 	adds.w	r9, r9, fp
 80098de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098e2:	f04f 0100 	mov.w	r1, #0
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098f6:	4689      	mov	r9, r1
 80098f8:	4692      	mov	sl, r2
 80098fa:	eb1b 0509 	adds.w	r5, fp, r9
 80098fe:	eb4c 060a 	adc.w	r6, ip, sl
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4619      	mov	r1, r3
 8009908:	f04f 0200 	mov.w	r2, #0
 800990c:	f04f 0300 	mov.w	r3, #0
 8009910:	f04f 0400 	mov.w	r4, #0
 8009914:	0094      	lsls	r4, r2, #2
 8009916:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800991a:	008b      	lsls	r3, r1, #2
 800991c:	461a      	mov	r2, r3
 800991e:	4623      	mov	r3, r4
 8009920:	4628      	mov	r0, r5
 8009922:	4631      	mov	r1, r6
 8009924:	f7f7 f9c8 	bl	8000cb8 <__aeabi_uldivmod>
 8009928:	4603      	mov	r3, r0
 800992a:	460c      	mov	r4, r1
 800992c:	461a      	mov	r2, r3
 800992e:	4b32      	ldr	r3, [pc, #200]	; (80099f8 <UART_SetConfig+0x6f4>)
 8009930:	fba3 1302 	umull	r1, r3, r3, r2
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	2164      	movs	r1, #100	; 0x64
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	3332      	adds	r3, #50	; 0x32
 8009942:	4a2d      	ldr	r2, [pc, #180]	; (80099f8 <UART_SetConfig+0x6f4>)
 8009944:	fba2 2303 	umull	r2, r3, r2, r3
 8009948:	095b      	lsrs	r3, r3, #5
 800994a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800994e:	4498      	add	r8, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	469b      	mov	fp, r3
 8009954:	f04f 0c00 	mov.w	ip, #0
 8009958:	46d9      	mov	r9, fp
 800995a:	46e2      	mov	sl, ip
 800995c:	eb19 0309 	adds.w	r3, r9, r9
 8009960:	eb4a 040a 	adc.w	r4, sl, sl
 8009964:	4699      	mov	r9, r3
 8009966:	46a2      	mov	sl, r4
 8009968:	eb19 090b 	adds.w	r9, r9, fp
 800996c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009970:	f04f 0100 	mov.w	r1, #0
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800997c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009984:	4689      	mov	r9, r1
 8009986:	4692      	mov	sl, r2
 8009988:	eb1b 0509 	adds.w	r5, fp, r9
 800998c:	eb4c 060a 	adc.w	r6, ip, sl
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	4619      	mov	r1, r3
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	f04f 0400 	mov.w	r4, #0
 80099a2:	0094      	lsls	r4, r2, #2
 80099a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80099a8:	008b      	lsls	r3, r1, #2
 80099aa:	461a      	mov	r2, r3
 80099ac:	4623      	mov	r3, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	4631      	mov	r1, r6
 80099b2:	f7f7 f981 	bl	8000cb8 <__aeabi_uldivmod>
 80099b6:	4603      	mov	r3, r0
 80099b8:	460c      	mov	r4, r1
 80099ba:	461a      	mov	r2, r3
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <UART_SetConfig+0x6f4>)
 80099be:	fba3 1302 	umull	r1, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2164      	movs	r1, #100	; 0x64
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	3332      	adds	r3, #50	; 0x32
 80099d0:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <UART_SetConfig+0x6f4>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4442      	add	r2, r8
 80099e2:	609a      	str	r2, [r3, #8]
}
 80099e4:	e7ff      	b.n	80099e6 <UART_SetConfig+0x6e2>
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	40011000 	.word	0x40011000
 80099f4:	40011400 	.word	0x40011400
 80099f8:	51eb851f 	.word	0x51eb851f

080099fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80099fc:	b084      	sub	sp, #16
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	f107 001c 	add.w	r0, r7, #28
 8009a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009a12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009a14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009a16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009a1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009a1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009a22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009a26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	b004      	add	sp, #16
 8009a50:	4770      	bx	lr

08009a52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2203      	movs	r2, #3
 8009a9a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009a9c:	2002      	movs	r0, #2
 8009a9e:	f7fa fbff 	bl	80042a0 <HAL_Delay>
  
  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0303 	and.w	r3, r3, #3
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ae6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009aec:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009af2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009b02:	f023 030f 	bic.w	r3, r3, #15
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	b2db      	uxtb	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3314      	adds	r3, #20
 8009b44:	461a      	mov	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	4413      	add	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
}  
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	685a      	ldr	r2, [r3, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b82:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009b88:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009b8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0

}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009bc2:	2310      	movs	r3, #16
 8009bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bc6:	2340      	movs	r3, #64	; 0x40
 8009bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bd4:	f107 0308 	add.w	r3, r7, #8
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff ff74 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be4:	2110      	movs	r1, #16
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fa40 	bl	800a06c <SDMMC_GetCmdResp1>
 8009bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bee:	69fb      	ldr	r3, [r7, #28]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3720      	adds	r7, #32
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009c06:	2311      	movs	r3, #17
 8009c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c0a:	2340      	movs	r3, #64	; 0x40
 8009c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c18:	f107 0308 	add.w	r3, r7, #8
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff ff52 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c28:	2111      	movs	r1, #17
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa1e 	bl	800a06c <SDMMC_GetCmdResp1>
 8009c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c32:	69fb      	ldr	r3, [r7, #28]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3720      	adds	r7, #32
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c4a:	2312      	movs	r3, #18
 8009c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff ff30 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	2112      	movs	r1, #18
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f9fc 	bl	800a06c <SDMMC_GetCmdResp1>
 8009c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c76:	69fb      	ldr	r3, [r7, #28]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009c8e:	2318      	movs	r3, #24
 8009c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c92:	2340      	movs	r3, #64	; 0x40
 8009c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ca0:	f107 0308 	add.w	r3, r7, #8
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff ff0e 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb0:	2118      	movs	r1, #24
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9da 	bl	800a06c <SDMMC_GetCmdResp1>
 8009cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cba:	69fb      	ldr	r3, [r7, #28]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009cd2:	2319      	movs	r3, #25
 8009cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cd6:	2340      	movs	r3, #64	; 0x40
 8009cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ce2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ce4:	f107 0308 	add.w	r3, r7, #8
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff feec 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf4:	2119      	movs	r1, #25
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f9b8 	bl	800a06c <SDMMC_GetCmdResp1>
 8009cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cfe:	69fb      	ldr	r3, [r7, #28]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3720      	adds	r7, #32
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009d14:	230c      	movs	r3, #12
 8009d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d18:	2340      	movs	r3, #64	; 0x40
 8009d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d26:	f107 0308 	add.w	r3, r7, #8
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff fecb 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009d32:	4a05      	ldr	r2, [pc, #20]	; (8009d48 <SDMMC_CmdStopTransfer+0x40>)
 8009d34:	210c      	movs	r1, #12
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f998 	bl	800a06c <SDMMC_GetCmdResp1>
 8009d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3720      	adds	r7, #32
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	05f5e100 	.word	0x05f5e100

08009d4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08a      	sub	sp, #40	; 0x28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009d5c:	2307      	movs	r3, #7
 8009d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d60:	2340      	movs	r3, #64	; 0x40
 8009d62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d6e:	f107 0310 	add.w	r3, r7, #16
 8009d72:	4619      	mov	r1, r3
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff fea7 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7e:	2107      	movs	r1, #7
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f973 	bl	800a06c <SDMMC_GetCmdResp1>
 8009d86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3728      	adds	r7, #40	; 0x28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b088      	sub	sp, #32
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009da2:	2300      	movs	r3, #0
 8009da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009da6:	2300      	movs	r3, #0
 8009da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009db0:	f107 0308 	add.w	r3, r7, #8
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fe86 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f92d 	bl	800a01c <SDMMC_GetCmdError>
 8009dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b088      	sub	sp, #32
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009dd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ddc:	2308      	movs	r3, #8
 8009dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff fe67 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fb16 	bl	800a42c <SDMMC_GetCmdResp7>
 8009e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e02:	69fb      	ldr	r3, [r7, #28]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009e1a:	2337      	movs	r3, #55	; 0x37
 8009e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fe48 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	2137      	movs	r1, #55	; 0x37
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f914 	bl	800a06c <SDMMC_GetCmdResp1>
 8009e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e46:	69fb      	ldr	r3, [r7, #28]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009e66:	2329      	movs	r3, #41	; 0x29
 8009e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e6a:	2340      	movs	r3, #64	; 0x40
 8009e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fe22 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa23 	bl	800a2d0 <SDMMC_GetCmdResp3>
 8009e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ea4:	2306      	movs	r3, #6
 8009ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ea8:	2340      	movs	r3, #64	; 0x40
 8009eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff fe03 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec6:	2106      	movs	r1, #6
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8cf 	bl	800a06c <SDMMC_GetCmdResp1>
 8009ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b088      	sub	sp, #32
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009ee6:	2333      	movs	r3, #51	; 0x33
 8009ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eea:	2340      	movs	r3, #64	; 0x40
 8009eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ef8:	f107 0308 	add.w	r3, r7, #8
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fde2 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f08:	2133      	movs	r1, #51	; 0x33
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8ae 	bl	800a06c <SDMMC_GetCmdResp1>
 8009f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f12:	69fb      	ldr	r3, [r7, #28]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3720      	adds	r7, #32
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009f2c:	23c0      	movs	r3, #192	; 0xc0
 8009f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f30:	2300      	movs	r3, #0
 8009f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f3a:	f107 0308 	add.w	r3, r7, #8
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff fdc1 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f97c 	bl	800a244 <SDMMC_GetCmdResp2>
 8009f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f4e:	69fb      	ldr	r3, [r7, #28]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3720      	adds	r7, #32
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f66:	2309      	movs	r3, #9
 8009f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009f6a:	23c0      	movs	r3, #192	; 0xc0
 8009f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff fda2 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f95d 	bl	800a244 <SDMMC_GetCmdResp2>
 8009f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b088      	sub	sp, #32
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fa8:	2340      	movs	r3, #64	; 0x40
 8009faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fac:	2300      	movs	r3, #0
 8009fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fb6:	f107 0308 	add.w	r3, r7, #8
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff fd83 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	2103      	movs	r1, #3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9bc 	bl	800a344 <SDMMC_GetCmdResp6>
 8009fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fce:	69fb      	ldr	r3, [r7, #28]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009fe6:	230d      	movs	r3, #13
 8009fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fea:	2340      	movs	r3, #64	; 0x40
 8009fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff fd62 	bl	8009ac8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a004:	f241 3288 	movw	r2, #5000	; 0x1388
 800a008:	210d      	movs	r1, #13
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f82e 	bl	800a06c <SDMMC_GetCmdResp1>
 800a010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a012:	69fb      	ldr	r3, [r7, #28]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a01c:	b490      	push	{r4, r7}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a024:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <SDMMC_GetCmdError+0x48>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a0f      	ldr	r2, [pc, #60]	; (800a068 <SDMMC_GetCmdError+0x4c>)
 800a02a:	fba2 2303 	umull	r2, r3, r2, r3
 800a02e:	0a5b      	lsrs	r3, r3, #9
 800a030:	f241 3288 	movw	r2, #5000	; 0x1388
 800a034:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a038:	4623      	mov	r3, r4
 800a03a:	1e5c      	subs	r4, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a044:	e009      	b.n	800a05a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f2      	beq.n	800a038 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	22c5      	movs	r2, #197	; 0xc5
 800a056:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bc90      	pop	{r4, r7}
 800a062:	4770      	bx	lr
 800a064:	20000000 	.word	0x20000000
 800a068:	10624dd3 	.word	0x10624dd3

0800a06c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	460b      	mov	r3, r1
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a07a:	4b6f      	ldr	r3, [pc, #444]	; (800a238 <SDMMC_GetCmdResp1+0x1cc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a6f      	ldr	r2, [pc, #444]	; (800a23c <SDMMC_GetCmdResp1+0x1d0>)
 800a080:	fba2 2303 	umull	r2, r3, r2, r3
 800a084:	0a5b      	lsrs	r3, r3, #9
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a08c:	4623      	mov	r3, r4
 800a08e:	1e5c      	subs	r4, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a098:	e0c9      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f0      	beq.n	800a08c <SDMMC_GetCmdResp1+0x20>
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1eb      	bne.n	800a08c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2204      	movs	r2, #4
 800a0c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0c6:	2304      	movs	r3, #4
 800a0c8:	e0b1      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d004      	beq.n	800a0e0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0a6      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	22c5      	movs	r2, #197	; 0xc5
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fd18 	bl	8009b1c <SDIO_GetCommandResponse>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d001      	beq.n	800a0fa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e099      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fd1a 	bl	8009b36 <SDIO_GetResponse>
 800a102:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4b4e      	ldr	r3, [pc, #312]	; (800a240 <SDMMC_GetCmdResp1+0x1d4>)
 800a108:	4013      	ands	r3, r2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a10e:	2300      	movs	r3, #0
 800a110:	e08d      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	da02      	bge.n	800a11e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a11c:	e087      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	e080      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	e079      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a148:	e071      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a158:	e069      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a168:	e061      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a178:	e059      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a188:	e051      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a198:	e049      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a1a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1a8:	e041      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a1b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b8:	e039      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a1c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a1c8:	e031      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a1d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1d8:	e029      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a1e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1e8:	e021      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a1f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1f8:	e019      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a208:	e011      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a218:	e009      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a228:	e001      	b.n	800a22e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a22a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}
 800a236:	bf00      	nop
 800a238:	20000000 	.word	0x20000000
 800a23c:	10624dd3 	.word	0x10624dd3
 800a240:	fdffe008 	.word	0xfdffe008

0800a244 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a244:	b490      	push	{r4, r7}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a24c:	4b1e      	ldr	r3, [pc, #120]	; (800a2c8 <SDMMC_GetCmdResp2+0x84>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1e      	ldr	r2, [pc, #120]	; (800a2cc <SDMMC_GetCmdResp2+0x88>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	0a5b      	lsrs	r3, r3, #9
 800a258:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a260:	4623      	mov	r3, r4
 800a262:	1e5c      	subs	r4, r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a26c:	e026      	b.n	800a2bc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a272:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <SDMMC_GetCmdResp2+0x1c>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1eb      	bne.n	800a260 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2204      	movs	r2, #4
 800a298:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a29a:	2304      	movs	r3, #4
 800a29c:	e00e      	b.n	800a2bc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d004      	beq.n	800a2b4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e003      	b.n	800a2bc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	22c5      	movs	r2, #197	; 0xc5
 800a2b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bc90      	pop	{r4, r7}
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	20000000 	.word	0x20000000
 800a2cc:	10624dd3 	.word	0x10624dd3

0800a2d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a2d0:	b490      	push	{r4, r7}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2d8:	4b18      	ldr	r3, [pc, #96]	; (800a33c <SDMMC_GetCmdResp3+0x6c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a18      	ldr	r2, [pc, #96]	; (800a340 <SDMMC_GetCmdResp3+0x70>)
 800a2de:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e2:	0a5b      	lsrs	r3, r3, #9
 800a2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	1e5c      	subs	r4, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2f8:	e01b      	b.n	800a332 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f0      	beq.n	800a2ec <SDMMC_GetCmdResp3+0x1c>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1eb      	bne.n	800a2ec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2204      	movs	r2, #4
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a326:	2304      	movs	r3, #4
 800a328:	e003      	b.n	800a332 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	22c5      	movs	r2, #197	; 0xc5
 800a32e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bc90      	pop	{r4, r7}
 800a33a:	4770      	bx	lr
 800a33c:	20000000 	.word	0x20000000
 800a340:	10624dd3 	.word	0x10624dd3

0800a344 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a344:	b590      	push	{r4, r7, lr}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	460b      	mov	r3, r1
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a352:	4b34      	ldr	r3, [pc, #208]	; (800a424 <SDMMC_GetCmdResp6+0xe0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a34      	ldr	r2, [pc, #208]	; (800a428 <SDMMC_GetCmdResp6+0xe4>)
 800a358:	fba2 2303 	umull	r2, r3, r2, r3
 800a35c:	0a5b      	lsrs	r3, r3, #9
 800a35e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a362:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a366:	4623      	mov	r3, r4
 800a368:	1e5c      	subs	r4, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a36e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a372:	e052      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a378:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0f0      	beq.n	800a366 <SDMMC_GetCmdResp6+0x22>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1eb      	bne.n	800a366 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2204      	movs	r2, #4
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	e03a      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e02f      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fbae 	bl	8009b1c <SDIO_GetCommandResponse>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d001      	beq.n	800a3ce <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e025      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	22c5      	movs	r2, #197	; 0xc5
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff fbad 	bl	8009b36 <SDIO_GetResponse>
 800a3dc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e011      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a404:	e009      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a414:	e001      	b.n	800a41a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	bf00      	nop
 800a424:	20000000 	.word	0x20000000
 800a428:	10624dd3 	.word	0x10624dd3

0800a42c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a42c:	b490      	push	{r4, r7}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a434:	4b21      	ldr	r3, [pc, #132]	; (800a4bc <SDMMC_GetCmdResp7+0x90>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a21      	ldr	r2, [pc, #132]	; (800a4c0 <SDMMC_GetCmdResp7+0x94>)
 800a43a:	fba2 2303 	umull	r2, r3, r2, r3
 800a43e:	0a5b      	lsrs	r3, r3, #9
 800a440:	f241 3288 	movw	r2, #5000	; 0x1388
 800a444:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a448:	4623      	mov	r3, r4
 800a44a:	1e5c      	subs	r4, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a454:	e02c      	b.n	800a4b0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a462:	2b00      	cmp	r3, #0
 800a464:	d0f0      	beq.n	800a448 <SDMMC_GetCmdResp7+0x1c>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1eb      	bne.n	800a448 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d004      	beq.n	800a486 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2204      	movs	r2, #4
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a482:	2304      	movs	r3, #4
 800a484:	e014      	b.n	800a4b0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a498:	2301      	movs	r3, #1
 800a49a:	e009      	b.n	800a4b0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2240      	movs	r2, #64	; 0x40
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a4ae:	2300      	movs	r3, #0
  
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc90      	pop	{r4, r7}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20000000 	.word	0x20000000
 800a4c0:	10624dd3 	.word	0x10624dd3

0800a4c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a4c8:	4904      	ldr	r1, [pc, #16]	; (800a4dc <MX_FATFS_Init+0x18>)
 800a4ca:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <MX_FATFS_Init+0x1c>)
 800a4cc:	f004 f874 	bl	800e5b8 <FATFS_LinkDriver>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <MX_FATFS_Init+0x20>)
 800a4d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a4d8:	bf00      	nop
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20003014 	.word	0x20003014
 800a4e0:	080136f4 	.word	0x080136f4
 800a4e4:	20003010 	.word	0x20003010

0800a4e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a502:	f000 f896 	bl	800a632 <BSP_SD_IsDetected>
 800a506:	4603      	mov	r3, r0
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d001      	beq.n	800a510 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e012      	b.n	800a536 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a510:	480b      	ldr	r0, [pc, #44]	; (800a540 <BSP_SD_Init+0x48>)
 800a512:	f7fc fc8d 	bl	8006e30 <HAL_SD_Init>
 800a516:	4603      	mov	r3, r0
 800a518:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d109      	bne.n	800a534 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a524:	4806      	ldr	r0, [pc, #24]	; (800a540 <BSP_SD_Init+0x48>)
 800a526:	f7fd fa37 	bl	8007998 <HAL_SD_ConfigWideBusOperation>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a534:	79fb      	ldrb	r3, [r7, #7]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20002ea4 	.word	0x20002ea4

0800a544 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	68f9      	ldr	r1, [r7, #12]
 800a55a:	4806      	ldr	r0, [pc, #24]	; (800a574 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a55c:	f7fc fcf8 	bl	8006f50 <HAL_SD_ReadBlocks_DMA>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20002ea4 	.word	0x20002ea4

0800a578 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	68f9      	ldr	r1, [r7, #12]
 800a58e:	4806      	ldr	r0, [pc, #24]	; (800a5a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a590:	f7fc fdc6 	bl	8007120 <HAL_SD_WriteBlocks_DMA>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20002ea4 	.word	0x20002ea4

0800a5ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a5b0:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <BSP_SD_GetCardState+0x1c>)
 800a5b2:	f7fd fa6d 	bl	8007a90 <HAL_SD_GetCardState>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	bf14      	ite	ne
 800a5bc:	2301      	movne	r3, #1
 800a5be:	2300      	moveq	r3, #0
 800a5c0:	b2db      	uxtb	r3, r3
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20002ea4 	.word	0x20002ea4

0800a5cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	4803      	ldr	r0, [pc, #12]	; (800a5e4 <BSP_SD_GetCardInfo+0x18>)
 800a5d8:	f7fd f9b2 	bl	8007940 <HAL_SD_GetCardInfo>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20002ea4 	.word	0x20002ea4

0800a5e8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a5f0:	f000 f818 	bl	800a624 <BSP_SD_AbortCallback>
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a604:	f000 f9a8 	bl	800a958 <BSP_SD_WriteCpltCallback>
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a618:	f000 f9aa 	bl	800a970 <BSP_SD_ReadCpltCallback>
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0

}
 800a628:	bf00      	nop
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a638:	2301      	movs	r3, #1
 800a63a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a63c:	f000 f80c 	bl	800a658 <BSP_PlatformIsDetected>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a646:	2300      	movs	r3, #0
 800a648:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	b2db      	uxtb	r3, r3
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a65e:	2301      	movs	r3, #1
 800a660:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a666:	4806      	ldr	r0, [pc, #24]	; (800a680 <BSP_PlatformIsDetected+0x28>)
 800a668:	f7fb f898 	bl	800579c <HAL_GPIO_ReadPin>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a672:	2300      	movs	r3, #0
 800a674:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a676:	79fb      	ldrb	r3, [r7, #7]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	40020000 	.word	0x40020000

0800a684 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a68c:	f7f9 fdfc 	bl	8004288 <HAL_GetTick>
 800a690:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a692:	e006      	b.n	800a6a2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a694:	f7ff ff8a 	bl	800a5ac <BSP_SD_GetCardState>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e009      	b.n	800a6b6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a6a2:	f7f9 fdf1 	bl	8004288 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d8f0      	bhi.n	800a694 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <SD_CheckStatus+0x38>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a6d0:	f7ff ff6c 	bl	800a5ac <BSP_SD_GetCardState>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d107      	bne.n	800a6ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a6da:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <SD_CheckStatus+0x38>)
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	4b04      	ldr	r3, [pc, #16]	; (800a6f8 <SD_CheckStatus+0x38>)
 800a6e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a6ea:	4b03      	ldr	r3, [pc, #12]	; (800a6f8 <SD_CheckStatus+0x38>)
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b2db      	uxtb	r3, r3
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000009 	.word	0x20000009

0800a6fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a706:	f7ff fef7 	bl	800a4f8 <BSP_SD_Init>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d107      	bne.n	800a720 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff ffd4 	bl	800a6c0 <SD_CheckStatus>
 800a718:	4603      	mov	r3, r0
 800a71a:	461a      	mov	r2, r3
 800a71c:	4b04      	ldr	r3, [pc, #16]	; (800a730 <SD_initialize+0x34>)
 800a71e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a720:	4b03      	ldr	r3, [pc, #12]	; (800a730 <SD_initialize+0x34>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	b2db      	uxtb	r3, r3
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000009 	.word	0x20000009

0800a734 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff ffbd 	bl	800a6c0 <SD_CheckStatus>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	603b      	str	r3, [r7, #0]
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a764:	f247 5030 	movw	r0, #30000	; 0x7530
 800a768:	f7ff ff8c 	bl	800a684 <SD_CheckStatusWithTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da01      	bge.n	800a776 <SD_read+0x26>
  {
    return res;
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	e03b      	b.n	800a7ee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	68b8      	ldr	r0, [r7, #8]
 800a77c:	f7ff fee2 	bl	800a544 <BSP_SD_ReadBlocks_DMA>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d132      	bne.n	800a7ec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a786:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <SD_read+0xa8>)
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a78c:	f7f9 fd7c 	bl	8004288 <HAL_GetTick>
 800a790:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a792:	bf00      	nop
 800a794:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <SD_read+0xa8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d108      	bne.n	800a7ae <SD_read+0x5e>
 800a79c:	f7f9 fd74 	bl	8004288 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d9f2      	bls.n	800a794 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800a7ae:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <SD_read+0xa8>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	75fb      	strb	r3, [r7, #23]
 800a7ba:	e017      	b.n	800a7ec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a7bc:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <SD_read+0xa8>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a7c2:	f7f9 fd61 	bl	8004288 <HAL_GetTick>
 800a7c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a7c8:	e007      	b.n	800a7da <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7ca:	f7ff feef 	bl	800a5ac <BSP_SD_GetCardState>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <SD_read+0x8a>
          {
            res = RES_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a7d8:	e008      	b.n	800a7ec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a7da:	f7f9 fd55 	bl	8004288 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d9ee      	bls.n	800a7ca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000574 	.word	0x20000574

0800a7fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	4603      	mov	r3, r0
 800a80a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a810:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <SD_write+0xa8>)
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a816:	f247 5030 	movw	r0, #30000	; 0x7530
 800a81a:	f7ff ff33 	bl	800a684 <SD_CheckStatusWithTimeout>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	da01      	bge.n	800a828 <SD_write+0x2c>
  {
    return res;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	e038      	b.n	800a89a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	68b8      	ldr	r0, [r7, #8]
 800a82e:	f7ff fea3 	bl	800a578 <BSP_SD_WriteBlocks_DMA>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d12f      	bne.n	800a898 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a838:	f7f9 fd26 	bl	8004288 <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a83e:	bf00      	nop
 800a840:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <SD_write+0xa8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d108      	bne.n	800a85a <SD_write+0x5e>
 800a848:	f7f9 fd1e 	bl	8004288 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	f247 522f 	movw	r2, #29999	; 0x752f
 800a856:	4293      	cmp	r3, r2
 800a858:	d9f2      	bls.n	800a840 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800a85a:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <SD_write+0xa8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	75fb      	strb	r3, [r7, #23]
 800a866:	e017      	b.n	800a898 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a868:	4b0e      	ldr	r3, [pc, #56]	; (800a8a4 <SD_write+0xa8>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a86e:	f7f9 fd0b 	bl	8004288 <HAL_GetTick>
 800a872:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a874:	e007      	b.n	800a886 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a876:	f7ff fe99 	bl	800a5ac <BSP_SD_GetCardState>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d102      	bne.n	800a886 <SD_write+0x8a>
          {
            res = RES_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	75fb      	strb	r3, [r7, #23]
            break;
 800a884:	e008      	b.n	800a898 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a886:	f7f9 fcff 	bl	8004288 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	f247 522f 	movw	r2, #29999	; 0x752f
 800a894:	4293      	cmp	r3, r2
 800a896:	d9ee      	bls.n	800a876 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000570 	.word	0x20000570

0800a8a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08c      	sub	sp, #48	; 0x30
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	603a      	str	r2, [r7, #0]
 800a8b2:	71fb      	strb	r3, [r7, #7]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8be:	4b25      	ldr	r3, [pc, #148]	; (800a954 <SD_ioctl+0xac>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <SD_ioctl+0x28>
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e03c      	b.n	800a94a <SD_ioctl+0xa2>

  switch (cmd)
 800a8d0:	79bb      	ldrb	r3, [r7, #6]
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d834      	bhi.n	800a940 <SD_ioctl+0x98>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <SD_ioctl+0x34>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a8ed 	.word	0x0800a8ed
 800a8e0:	0800a8f5 	.word	0x0800a8f5
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a927 	.word	0x0800a927
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a8f2:	e028      	b.n	800a946 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fe67 	bl	800a5cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a90a:	e01c      	b.n	800a946 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fe5b 	bl	800a5cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	b29a      	uxth	r2, r3
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a924:	e00f      	b.n	800a946 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fe4e 	bl	800a5cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	0a5a      	lsrs	r2, r3, #9
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a93e:	e002      	b.n	800a946 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a940:	2304      	movs	r3, #4
 800a942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3730      	adds	r7, #48	; 0x30
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000009 	.word	0x20000009

0800a958 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <BSP_SD_WriteCpltCallback+0x14>)
 800a95e:	2201      	movs	r2, #1
 800a960:	601a      	str	r2, [r3, #0]
}
 800a962:	bf00      	nop
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20000570 	.word	0x20000570

0800a970 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a974:	4b03      	ldr	r3, [pc, #12]	; (800a984 <BSP_SD_ReadCpltCallback+0x14>)
 800a976:	2201      	movs	r2, #1
 800a978:	601a      	str	r2, [r3, #0]
}
 800a97a:	bf00      	nop
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20000574 	.word	0x20000574

0800a988 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <disk_status+0x30>)
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	79fa      	ldrb	r2, [r7, #7]
 800a9a0:	4905      	ldr	r1, [pc, #20]	; (800a9b8 <disk_status+0x30>)
 800a9a2:	440a      	add	r2, r1
 800a9a4:	7a12      	ldrb	r2, [r2, #8]
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	4798      	blx	r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	200007a0 	.word	0x200007a0

0800a9bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	4a0d      	ldr	r2, [pc, #52]	; (800aa04 <disk_initialize+0x48>)
 800a9ce:	5cd3      	ldrb	r3, [r2, r3]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d111      	bne.n	800a9f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	4a0b      	ldr	r2, [pc, #44]	; (800aa04 <disk_initialize+0x48>)
 800a9d8:	2101      	movs	r1, #1
 800a9da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <disk_initialize+0x48>)
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	79fa      	ldrb	r2, [r7, #7]
 800a9ea:	4906      	ldr	r1, [pc, #24]	; (800aa04 <disk_initialize+0x48>)
 800a9ec:	440a      	add	r2, r1
 800a9ee:	7a12      	ldrb	r2, [r2, #8]
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	200007a0 	.word	0x200007a0

0800aa08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa08:	b590      	push	{r4, r7, lr}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	4a0a      	ldr	r2, [pc, #40]	; (800aa44 <disk_read+0x3c>)
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	689c      	ldr	r4, [r3, #8]
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4a07      	ldr	r2, [pc, #28]	; (800aa44 <disk_read+0x3c>)
 800aa28:	4413      	add	r3, r2
 800aa2a:	7a18      	ldrb	r0, [r3, #8]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	47a0      	blx	r4
 800aa34:	4603      	mov	r3, r0
 800aa36:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	371c      	adds	r7, #28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd90      	pop	{r4, r7, pc}
 800aa42:	bf00      	nop
 800aa44:	200007a0 	.word	0x200007a0

0800aa48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	; (800aa84 <disk_write+0x3c>)
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	68dc      	ldr	r4, [r3, #12]
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	4a07      	ldr	r2, [pc, #28]	; (800aa84 <disk_write+0x3c>)
 800aa68:	4413      	add	r3, r2
 800aa6a:	7a18      	ldrb	r0, [r3, #8]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	47a0      	blx	r4
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd90      	pop	{r4, r7, pc}
 800aa82:	bf00      	nop
 800aa84:	200007a0 	.word	0x200007a0

0800aa88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	603a      	str	r2, [r7, #0]
 800aa92:	71fb      	strb	r3, [r7, #7]
 800aa94:	460b      	mov	r3, r1
 800aa96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <disk_ioctl+0x38>)
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	79fa      	ldrb	r2, [r7, #7]
 800aaa6:	4906      	ldr	r1, [pc, #24]	; (800aac0 <disk_ioctl+0x38>)
 800aaa8:	440a      	add	r2, r1
 800aaaa:	7a10      	ldrb	r0, [r2, #8]
 800aaac:	79b9      	ldrb	r1, [r7, #6]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4798      	blx	r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]
  return res;
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	200007a0 	.word	0x200007a0

0800aac4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3301      	adds	r3, #1
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aad4:	89fb      	ldrh	r3, [r7, #14]
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	b21a      	sxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b21b      	sxth	r3, r3
 800aae0:	4313      	orrs	r3, r2
 800aae2:	b21b      	sxth	r3, r3
 800aae4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aae6:	89fb      	ldrh	r3, [r7, #14]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3303      	adds	r3, #3
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	3202      	adds	r2, #2
 800ab0c:	7812      	ldrb	r2, [r2, #0]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	3201      	adds	r2, #1
 800ab1a:	7812      	ldrb	r2, [r2, #0]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7812      	ldrb	r2, [r2, #0]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	887a      	ldrh	r2, [r7, #2]
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	887b      	ldrh	r3, [r7, #2]
 800ab54:	0a1b      	lsrs	r3, r3, #8
 800ab56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	887a      	ldrh	r2, [r7, #2]
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	0a1b      	lsrs	r3, r3, #8
 800ab8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	b2d2      	uxtb	r2, r2
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	0a1b      	lsrs	r3, r3, #8
 800abae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	607a      	str	r2, [r7, #4]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00d      	beq.n	800abfe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	1c53      	adds	r3, r2, #1
 800abe6:	613b      	str	r3, [r7, #16]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	1c59      	adds	r1, r3, #1
 800abec:	6179      	str	r1, [r7, #20]
 800abee:	7812      	ldrb	r2, [r2, #0]
 800abf0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1f1      	bne.n	800abe2 <mem_cpy+0x1a>
	}
}
 800abfe:	bf00      	nop
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac0a:	b480      	push	{r7}
 800ac0c:	b087      	sub	sp, #28
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	617a      	str	r2, [r7, #20]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1f3      	bne.n	800ac1a <mem_set+0x10>
}
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac3e:	b480      	push	{r7}
 800ac40:	b089      	sub	sp, #36	; 0x24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	61fa      	str	r2, [r7, #28]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	61ba      	str	r2, [r7, #24]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	1acb      	subs	r3, r1, r3
 800ac6a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	607b      	str	r3, [r7, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <mem_cmp+0x40>
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0eb      	beq.n	800ac56 <mem_cmp+0x18>

	return r;
 800ac7e:	697b      	ldr	r3, [r7, #20]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3724      	adds	r7, #36	; 0x24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac96:	e002      	b.n	800ac9e <chk_chr+0x12>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <chk_chr+0x26>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	4293      	cmp	r3, r2
 800acb0:	d1f2      	bne.n	800ac98 <chk_chr+0xc>
	return *str;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	781b      	ldrb	r3, [r3, #0]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
	...

0800acc4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acce:	2300      	movs	r3, #0
 800acd0:	60bb      	str	r3, [r7, #8]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	e029      	b.n	800ad2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800acd8:	4a27      	ldr	r2, [pc, #156]	; (800ad78 <chk_lock+0xb4>)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	011b      	lsls	r3, r3, #4
 800acde:	4413      	add	r3, r2
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01d      	beq.n	800ad22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ace6:	4a24      	ldr	r2, [pc, #144]	; (800ad78 <chk_lock+0xb4>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	011b      	lsls	r3, r3, #4
 800acec:	4413      	add	r3, r2
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d116      	bne.n	800ad26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800acf8:	4a1f      	ldr	r2, [pc, #124]	; (800ad78 <chk_lock+0xb4>)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	4413      	add	r3, r2
 800ad00:	3304      	adds	r3, #4
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d10c      	bne.n	800ad26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad0c:	4a1a      	ldr	r2, [pc, #104]	; (800ad78 <chk_lock+0xb4>)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	4413      	add	r3, r2
 800ad14:	3308      	adds	r3, #8
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d102      	bne.n	800ad26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad20:	e007      	b.n	800ad32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ad22:	2301      	movs	r3, #1
 800ad24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d9d2      	bls.n	800acd8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d109      	bne.n	800ad4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d102      	bne.n	800ad44 <chk_lock+0x80>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d101      	bne.n	800ad48 <chk_lock+0x84>
 800ad44:	2300      	movs	r3, #0
 800ad46:	e010      	b.n	800ad6a <chk_lock+0xa6>
 800ad48:	2312      	movs	r3, #18
 800ad4a:	e00e      	b.n	800ad6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d108      	bne.n	800ad64 <chk_lock+0xa0>
 800ad52:	4a09      	ldr	r2, [pc, #36]	; (800ad78 <chk_lock+0xb4>)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	011b      	lsls	r3, r3, #4
 800ad58:	4413      	add	r3, r2
 800ad5a:	330c      	adds	r3, #12
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad62:	d101      	bne.n	800ad68 <chk_lock+0xa4>
 800ad64:	2310      	movs	r3, #16
 800ad66:	e000      	b.n	800ad6a <chk_lock+0xa6>
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	20000580 	.word	0x20000580

0800ad7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad82:	2300      	movs	r3, #0
 800ad84:	607b      	str	r3, [r7, #4]
 800ad86:	e002      	b.n	800ad8e <enq_lock+0x12>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	607b      	str	r3, [r7, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d806      	bhi.n	800ada2 <enq_lock+0x26>
 800ad94:	4a09      	ldr	r2, [pc, #36]	; (800adbc <enq_lock+0x40>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	4413      	add	r3, r2
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f2      	bne.n	800ad88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	bf14      	ite	ne
 800ada8:	2301      	movne	r3, #1
 800adaa:	2300      	moveq	r3, #0
 800adac:	b2db      	uxtb	r3, r3
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000580 	.word	0x20000580

0800adc0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adca:	2300      	movs	r3, #0
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e01f      	b.n	800ae10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800add0:	4a41      	ldr	r2, [pc, #260]	; (800aed8 <inc_lock+0x118>)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	011b      	lsls	r3, r3, #4
 800add6:	4413      	add	r3, r2
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d113      	bne.n	800ae0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ade2:	4a3d      	ldr	r2, [pc, #244]	; (800aed8 <inc_lock+0x118>)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	4413      	add	r3, r2
 800adea:	3304      	adds	r3, #4
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d109      	bne.n	800ae0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800adf6:	4a38      	ldr	r2, [pc, #224]	; (800aed8 <inc_lock+0x118>)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	4413      	add	r3, r2
 800adfe:	3308      	adds	r3, #8
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d006      	beq.n	800ae18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d9dc      	bls.n	800add0 <inc_lock+0x10>
 800ae16:	e000      	b.n	800ae1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d132      	bne.n	800ae86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	e002      	b.n	800ae2c <inc_lock+0x6c>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d806      	bhi.n	800ae40 <inc_lock+0x80>
 800ae32:	4a29      	ldr	r2, [pc, #164]	; (800aed8 <inc_lock+0x118>)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	4413      	add	r3, r2
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1f2      	bne.n	800ae26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d101      	bne.n	800ae4a <inc_lock+0x8a>
 800ae46:	2300      	movs	r3, #0
 800ae48:	e040      	b.n	800aecc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4922      	ldr	r1, [pc, #136]	; (800aed8 <inc_lock+0x118>)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	011b      	lsls	r3, r3, #4
 800ae54:	440b      	add	r3, r1
 800ae56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	491e      	ldr	r1, [pc, #120]	; (800aed8 <inc_lock+0x118>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	440b      	add	r3, r1
 800ae64:	3304      	adds	r3, #4
 800ae66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	695a      	ldr	r2, [r3, #20]
 800ae6c:	491a      	ldr	r1, [pc, #104]	; (800aed8 <inc_lock+0x118>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	440b      	add	r3, r1
 800ae74:	3308      	adds	r3, #8
 800ae76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae78:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <inc_lock+0x118>)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	4413      	add	r3, r2
 800ae80:	330c      	adds	r3, #12
 800ae82:	2200      	movs	r2, #0
 800ae84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <inc_lock+0xe0>
 800ae8c:	4a12      	ldr	r2, [pc, #72]	; (800aed8 <inc_lock+0x118>)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	4413      	add	r3, r2
 800ae94:	330c      	adds	r3, #12
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <inc_lock+0xe0>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e015      	b.n	800aecc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d108      	bne.n	800aeb8 <inc_lock+0xf8>
 800aea6:	4a0c      	ldr	r2, [pc, #48]	; (800aed8 <inc_lock+0x118>)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	4413      	add	r3, r2
 800aeae:	330c      	adds	r3, #12
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	e001      	b.n	800aebc <inc_lock+0xfc>
 800aeb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aebc:	4906      	ldr	r1, [pc, #24]	; (800aed8 <inc_lock+0x118>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	440b      	add	r3, r1
 800aec4:	330c      	adds	r3, #12
 800aec6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	3301      	adds	r3, #1
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000580 	.word	0x20000580

0800aedc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	607b      	str	r3, [r7, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d825      	bhi.n	800af3c <dec_lock+0x60>
		n = Files[i].ctr;
 800aef0:	4a17      	ldr	r2, [pc, #92]	; (800af50 <dec_lock+0x74>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	4413      	add	r3, r2
 800aef8:	330c      	adds	r3, #12
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aefe:	89fb      	ldrh	r3, [r7, #14]
 800af00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af04:	d101      	bne.n	800af0a <dec_lock+0x2e>
 800af06:	2300      	movs	r3, #0
 800af08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af0a:	89fb      	ldrh	r3, [r7, #14]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <dec_lock+0x3a>
 800af10:	89fb      	ldrh	r3, [r7, #14]
 800af12:	3b01      	subs	r3, #1
 800af14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af16:	4a0e      	ldr	r2, [pc, #56]	; (800af50 <dec_lock+0x74>)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	4413      	add	r3, r2
 800af1e:	330c      	adds	r3, #12
 800af20:	89fa      	ldrh	r2, [r7, #14]
 800af22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800af24:	89fb      	ldrh	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <dec_lock+0x5a>
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <dec_lock+0x74>)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	737b      	strb	r3, [r7, #13]
 800af3a:	e001      	b.n	800af40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800af3c:	2302      	movs	r3, #2
 800af3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800af40:	7b7b      	ldrb	r3, [r7, #13]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20000580 	.word	0x20000580

0800af54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e010      	b.n	800af84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af62:	4a0d      	ldr	r2, [pc, #52]	; (800af98 <clear_lock+0x44>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	4413      	add	r3, r2
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d105      	bne.n	800af7e <clear_lock+0x2a>
 800af72:	4a09      	ldr	r2, [pc, #36]	; (800af98 <clear_lock+0x44>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	4413      	add	r3, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d9eb      	bls.n	800af62 <clear_lock+0xe>
	}
}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	20000580 	.word	0x20000580

0800af9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	78db      	ldrb	r3, [r3, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d034      	beq.n	800b01a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7858      	ldrb	r0, [r3, #1]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800afc0:	2301      	movs	r3, #1
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	f7ff fd40 	bl	800aa48 <disk_write>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800afce:	2301      	movs	r3, #1
 800afd0:	73fb      	strb	r3, [r7, #15]
 800afd2:	e022      	b.n	800b01a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	1ad2      	subs	r2, r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d217      	bcs.n	800b01a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	789b      	ldrb	r3, [r3, #2]
 800afee:	613b      	str	r3, [r7, #16]
 800aff0:	e010      	b.n	800b014 <sync_window+0x78>
					wsect += fs->fsize;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	4413      	add	r3, r2
 800affa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7858      	ldrb	r0, [r3, #1]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b006:	2301      	movs	r3, #1
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	f7ff fd1d 	bl	800aa48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3b01      	subs	r3, #1
 800b012:	613b      	str	r3, [r7, #16]
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d8eb      	bhi.n	800aff2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d01b      	beq.n	800b074 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ffad 	bl	800af9c <sync_window>
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d113      	bne.n	800b074 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	7858      	ldrb	r0, [r3, #1]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b056:	2301      	movs	r3, #1
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	f7ff fcd5 	bl	800aa08 <disk_read>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b064:	f04f 33ff 	mov.w	r3, #4294967295
 800b068:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff87 	bl	800af9c <sync_window>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d159      	bne.n	800b14c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b03      	cmp	r3, #3
 800b09e:	d149      	bne.n	800b134 <sync_fs+0xb4>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	791b      	ldrb	r3, [r3, #4]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d145      	bne.n	800b134 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	899b      	ldrh	r3, [r3, #12]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f7ff fda8 	bl	800ac0a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	333c      	adds	r3, #60	; 0x3c
 800b0be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff fd37 	bl	800ab3a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	333c      	adds	r3, #60	; 0x3c
 800b0d0:	4921      	ldr	r1, [pc, #132]	; (800b158 <sync_fs+0xd8>)
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff fd4c 	bl	800ab70 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	333c      	adds	r3, #60	; 0x3c
 800b0dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b0e0:	491e      	ldr	r1, [pc, #120]	; (800b15c <sync_fs+0xdc>)
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fd44 	bl	800ab70 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	333c      	adds	r3, #60	; 0x3c
 800b0ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f7ff fd3a 	bl	800ab70 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	333c      	adds	r3, #60	; 0x3c
 800b100:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	4619      	mov	r1, r3
 800b10a:	4610      	mov	r0, r2
 800b10c:	f7ff fd30 	bl	800ab70 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7858      	ldrb	r0, [r3, #1]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b128:	2301      	movs	r3, #1
 800b12a:	f7ff fc8d 	bl	800aa48 <disk_write>
			fs->fsi_flag = 0;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2200      	movs	r2, #0
 800b13a:	2100      	movs	r1, #0
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fca3 	bl	800aa88 <disk_ioctl>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <sync_fs+0xcc>
 800b148:	2301      	movs	r3, #1
 800b14a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	41615252 	.word	0x41615252
 800b15c:	61417272 	.word	0x61417272

0800b160 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	3b02      	subs	r3, #2
 800b16e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a1b      	ldr	r3, [r3, #32]
 800b174:	3b02      	subs	r3, #2
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d301      	bcc.n	800b180 <clust2sect+0x20>
 800b17c:	2300      	movs	r3, #0
 800b17e:	e008      	b.n	800b192 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	895b      	ldrh	r3, [r3, #10]
 800b184:	461a      	mov	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	fb03 f202 	mul.w	r2, r3, r2
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b190:	4413      	add	r3, r2
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d904      	bls.n	800b1be <get_fat+0x20>
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d302      	bcc.n	800b1c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e0b7      	b.n	800b334 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d05a      	beq.n	800b288 <get_fat+0xea>
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d07d      	beq.n	800b2d2 <get_fat+0x134>
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	f040 80a2 	bne.w	800b320 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	085b      	lsrs	r3, r3, #1
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f7ff ff10 	bl	800b024 <move_window>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	f040 808d 	bne.w	800b326 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	60fa      	str	r2, [r7, #12]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	8992      	ldrh	r2, [r2, #12]
 800b216:	fbb3 f1f2 	udiv	r1, r3, r2
 800b21a:	fb02 f201 	mul.w	r2, r2, r1
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4413      	add	r3, r2
 800b224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b228:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	899b      	ldrh	r3, [r3, #12]
 800b232:	4619      	mov	r1, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	fbb3 f3f1 	udiv	r3, r3, r1
 800b23a:	4413      	add	r3, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	6938      	ldr	r0, [r7, #16]
 800b240:	f7ff fef0 	bl	800b024 <move_window>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d16f      	bne.n	800b32a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	899b      	ldrh	r3, [r3, #12]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	fbb3 f1f2 	udiv	r1, r3, r2
 800b256:	fb02 f201 	mul.w	r2, r2, r1
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4413      	add	r3, r2
 800b260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b264:	021b      	lsls	r3, r3, #8
 800b266:	461a      	mov	r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <get_fat+0xe0>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	091b      	lsrs	r3, r3, #4
 800b27c:	e002      	b.n	800b284 <get_fat+0xe6>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b284:	617b      	str	r3, [r7, #20]
			break;
 800b286:	e055      	b.n	800b334 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	899b      	ldrh	r3, [r3, #12]
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	b29b      	uxth	r3, r3
 800b294:	4619      	mov	r1, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	fbb3 f3f1 	udiv	r3, r3, r1
 800b29c:	4413      	add	r3, r2
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6938      	ldr	r0, [r7, #16]
 800b2a2:	f7ff febf 	bl	800b024 <move_window>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d140      	bne.n	800b32e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	8992      	ldrh	r2, [r2, #12]
 800b2ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2be:	fb02 f200 	mul.w	r2, r2, r0
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fbfc 	bl	800aac4 <ld_word>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	617b      	str	r3, [r7, #20]
			break;
 800b2d0:	e030      	b.n	800b334 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	899b      	ldrh	r3, [r3, #12]
 800b2da:	089b      	lsrs	r3, r3, #2
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	4619      	mov	r1, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2e6:	4413      	add	r3, r2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6938      	ldr	r0, [r7, #16]
 800b2ec:	f7ff fe9a 	bl	800b024 <move_window>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d11d      	bne.n	800b332 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	8992      	ldrh	r2, [r2, #12]
 800b304:	fbb3 f0f2 	udiv	r0, r3, r2
 800b308:	fb02 f200 	mul.w	r2, r2, r0
 800b30c:	1a9b      	subs	r3, r3, r2
 800b30e:	440b      	add	r3, r1
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff fbef 	bl	800aaf4 <ld_dword>
 800b316:	4603      	mov	r3, r0
 800b318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b31c:	617b      	str	r3, [r7, #20]
			break;
 800b31e:	e009      	b.n	800b334 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b320:	2301      	movs	r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e006      	b.n	800b334 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b326:	bf00      	nop
 800b328:	e004      	b.n	800b334 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b32a:	bf00      	nop
 800b32c:	e002      	b.n	800b334 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b32e:	bf00      	nop
 800b330:	e000      	b.n	800b334 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b332:	bf00      	nop
		}
	}

	return val;
 800b334:	697b      	ldr	r3, [r7, #20]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b33e:	b590      	push	{r4, r7, lr}
 800b340:	b089      	sub	sp, #36	; 0x24
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b34a:	2302      	movs	r3, #2
 800b34c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b01      	cmp	r3, #1
 800b352:	f240 8106 	bls.w	800b562 <put_fat+0x224>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	f080 8100 	bcs.w	800b562 <put_fat+0x224>
		switch (fs->fs_type) {
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b02      	cmp	r3, #2
 800b368:	f000 8088 	beq.w	800b47c <put_fat+0x13e>
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	f000 80b0 	beq.w	800b4d2 <put_fat+0x194>
 800b372:	2b01      	cmp	r3, #1
 800b374:	f040 80f5 	bne.w	800b562 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	4413      	add	r3, r2
 800b384:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	899b      	ldrh	r3, [r3, #12]
 800b38e:	4619      	mov	r1, r3
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	fbb3 f3f1 	udiv	r3, r3, r1
 800b396:	4413      	add	r3, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fe42 	bl	800b024 <move_window>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3a4:	7ffb      	ldrb	r3, [r7, #31]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f040 80d4 	bne.w	800b554 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	61ba      	str	r2, [r7, #24]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	8992      	ldrh	r2, [r2, #12]
 800b3bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3c0:	fb02 f200 	mul.w	r2, r2, r0
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	440b      	add	r3, r1
 800b3c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00d      	beq.n	800b3f0 <put_fat+0xb2>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	b25b      	sxtb	r3, r3
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	b25a      	sxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	b25b      	sxtb	r3, r3
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	b25b      	sxtb	r3, r3
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	e001      	b.n	800b3f4 <put_fat+0xb6>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	899b      	ldrh	r3, [r3, #12]
 800b406:	4619      	mov	r1, r3
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b40e:	4413      	add	r3, r2
 800b410:	4619      	mov	r1, r3
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f7ff fe06 	bl	800b024 <move_window>
 800b418:	4603      	mov	r3, r0
 800b41a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b41c:	7ffb      	ldrb	r3, [r7, #31]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f040 809a 	bne.w	800b558 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	899b      	ldrh	r3, [r3, #12]
 800b42e:	461a      	mov	r2, r3
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	fbb3 f0f2 	udiv	r0, r3, r2
 800b436:	fb02 f200 	mul.w	r2, r2, r0
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	440b      	add	r3, r1
 800b43e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <put_fat+0x114>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	091b      	lsrs	r3, r3, #4
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	e00e      	b.n	800b470 <put_fat+0x132>
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b25b      	sxtb	r3, r3
 800b458:	f023 030f 	bic.w	r3, r3, #15
 800b45c:	b25a      	sxtb	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	0a1b      	lsrs	r3, r3, #8
 800b462:	b25b      	sxtb	r3, r3
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	b25b      	sxtb	r3, r3
 800b46a:	4313      	orrs	r3, r2
 800b46c:	b25b      	sxtb	r3, r3
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2201      	movs	r2, #1
 800b478:	70da      	strb	r2, [r3, #3]
			break;
 800b47a:	e072      	b.n	800b562 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	899b      	ldrh	r3, [r3, #12]
 800b484:	085b      	lsrs	r3, r3, #1
 800b486:	b29b      	uxth	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b490:	4413      	add	r3, r2
 800b492:	4619      	mov	r1, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fdc5 	bl	800b024 <move_window>
 800b49a:	4603      	mov	r3, r0
 800b49c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b49e:	7ffb      	ldrb	r3, [r7, #31]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d15b      	bne.n	800b55c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	8992      	ldrh	r2, [r2, #12]
 800b4b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4b6:	fb02 f200 	mul.w	r2, r2, r0
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	440b      	add	r3, r1
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	b292      	uxth	r2, r2
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fb38 	bl	800ab3a <st_word>
			fs->wflag = 1;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	70da      	strb	r2, [r3, #3]
			break;
 800b4d0:	e047      	b.n	800b562 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	899b      	ldrh	r3, [r3, #12]
 800b4da:	089b      	lsrs	r3, r3, #2
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	4619      	mov	r1, r3
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4e6:	4413      	add	r3, r2
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fd9a 	bl	800b024 <move_window>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4f4:	7ffb      	ldrb	r3, [r7, #31]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d132      	bne.n	800b560 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	8992      	ldrh	r2, [r2, #12]
 800b50e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b512:	fb02 f200 	mul.w	r2, r2, r0
 800b516:	1a9b      	subs	r3, r3, r2
 800b518:	440b      	add	r3, r1
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff faea 	bl	800aaf4 <ld_dword>
 800b520:	4603      	mov	r3, r0
 800b522:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b526:	4323      	orrs	r3, r4
 800b528:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	8992      	ldrh	r2, [r2, #12]
 800b538:	fbb3 f0f2 	udiv	r0, r3, r2
 800b53c:	fb02 f200 	mul.w	r2, r2, r0
 800b540:	1a9b      	subs	r3, r3, r2
 800b542:	440b      	add	r3, r1
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff fb12 	bl	800ab70 <st_dword>
			fs->wflag = 1;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2201      	movs	r2, #1
 800b550:	70da      	strb	r2, [r3, #3]
			break;
 800b552:	e006      	b.n	800b562 <put_fat+0x224>
			if (res != FR_OK) break;
 800b554:	bf00      	nop
 800b556:	e004      	b.n	800b562 <put_fat+0x224>
			if (res != FR_OK) break;
 800b558:	bf00      	nop
 800b55a:	e002      	b.n	800b562 <put_fat+0x224>
			if (res != FR_OK) break;
 800b55c:	bf00      	nop
 800b55e:	e000      	b.n	800b562 <put_fat+0x224>
			if (res != FR_OK) break;
 800b560:	bf00      	nop
		}
	}
	return res;
 800b562:	7ffb      	ldrb	r3, [r7, #31]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3724      	adds	r7, #36	; 0x24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd90      	pop	{r4, r7, pc}

0800b56c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d904      	bls.n	800b592 <remove_chain+0x26>
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d301      	bcc.n	800b596 <remove_chain+0x2a>
 800b592:	2302      	movs	r3, #2
 800b594:	e04b      	b.n	800b62e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00c      	beq.n	800b5b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b59c:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	69b8      	ldr	r0, [r7, #24]
 800b5a4:	f7ff fecb 	bl	800b33e <put_fat>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b5ac:	7ffb      	ldrb	r3, [r7, #31]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <remove_chain+0x4a>
 800b5b2:	7ffb      	ldrb	r3, [r7, #31]
 800b5b4:	e03b      	b.n	800b62e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fdf0 	bl	800b19e <get_fat>
 800b5be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d031      	beq.n	800b62a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <remove_chain+0x64>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e02e      	b.n	800b62e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d6:	d101      	bne.n	800b5dc <remove_chain+0x70>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e028      	b.n	800b62e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5dc:	2200      	movs	r2, #0
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	69b8      	ldr	r0, [r7, #24]
 800b5e2:	f7ff feac 	bl	800b33e <put_fat>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5ea:	7ffb      	ldrb	r3, [r7, #31]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <remove_chain+0x88>
 800b5f0:	7ffb      	ldrb	r3, [r7, #31]
 800b5f2:	e01c      	b.n	800b62e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	699a      	ldr	r2, [r3, #24]
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	3b02      	subs	r3, #2
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d20b      	bcs.n	800b61a <remove_chain+0xae>
			fs->free_clst++;
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	791b      	ldrb	r3, [r3, #4]
 800b610:	f043 0301 	orr.w	r3, r3, #1
 800b614:	b2da      	uxtb	r2, r3
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	6a1b      	ldr	r3, [r3, #32]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3c6      	bcc.n	800b5b6 <remove_chain+0x4a>
 800b628:	e000      	b.n	800b62c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b62a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b088      	sub	sp, #32
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10d      	bne.n	800b668 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <create_chain+0x2c>
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d31b      	bcc.n	800b69a <create_chain+0x64>
 800b662:	2301      	movs	r3, #1
 800b664:	61bb      	str	r3, [r7, #24]
 800b666:	e018      	b.n	800b69a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fd97 	bl	800b19e <get_fat>
 800b670:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d801      	bhi.n	800b67c <create_chain+0x46>
 800b678:	2301      	movs	r3, #1
 800b67a:	e070      	b.n	800b75e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d101      	bne.n	800b688 <create_chain+0x52>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	e06a      	b.n	800b75e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d201      	bcs.n	800b696 <create_chain+0x60>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	e063      	b.n	800b75e <create_chain+0x128>
		scl = clst;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d307      	bcc.n	800b6be <create_chain+0x88>
				ncl = 2;
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d901      	bls.n	800b6be <create_chain+0x88>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e04f      	b.n	800b75e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6be:	69f9      	ldr	r1, [r7, #28]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fd6c 	bl	800b19e <get_fat>
 800b6c6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00e      	beq.n	800b6ec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d003      	beq.n	800b6dc <create_chain+0xa6>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d101      	bne.n	800b6e0 <create_chain+0xaa>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e03e      	b.n	800b75e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d1da      	bne.n	800b69e <create_chain+0x68>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e038      	b.n	800b75e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6ec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	69f9      	ldr	r1, [r7, #28]
 800b6f4:	6938      	ldr	r0, [r7, #16]
 800b6f6:	f7ff fe22 	bl	800b33e <put_fat>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <create_chain+0xe2>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d006      	beq.n	800b718 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6938      	ldr	r0, [r7, #16]
 800b710:	f7ff fe15 	bl	800b33e <put_fat>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d116      	bne.n	800b74c <create_chain+0x116>
		fs->last_clst = ncl;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	699a      	ldr	r2, [r3, #24]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	3b02      	subs	r3, #2
 800b72e:	429a      	cmp	r2, r3
 800b730:	d804      	bhi.n	800b73c <create_chain+0x106>
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	1e5a      	subs	r2, r3, #1
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	791b      	ldrb	r3, [r3, #4]
 800b740:	f043 0301 	orr.w	r3, r3, #1
 800b744:	b2da      	uxtb	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	711a      	strb	r2, [r3, #4]
 800b74a:	e007      	b.n	800b75c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d102      	bne.n	800b758 <create_chain+0x122>
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
 800b756:	e000      	b.n	800b75a <create_chain+0x124>
 800b758:	2301      	movs	r3, #1
 800b75a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b75c:	69fb      	ldr	r3, [r7, #28]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b766:	b480      	push	{r7}
 800b768:	b087      	sub	sp, #28
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77a:	3304      	adds	r3, #4
 800b77c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	899b      	ldrh	r3, [r3, #12]
 800b782:	461a      	mov	r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	fbb3 f3f2 	udiv	r3, r3, r2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	8952      	ldrh	r2, [r2, #10]
 800b78e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b792:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	1d1a      	adds	r2, r3, #4
 800b798:	613a      	str	r2, [r7, #16]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <clmt_clust+0x42>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e010      	b.n	800b7ca <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d307      	bcc.n	800b7c0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7be:	e7e9      	b.n	800b794 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b7c0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	4413      	add	r3, r2
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b086      	sub	sp, #24
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7ec:	d204      	bcs.n	800b7f8 <dir_sdi+0x22>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	f003 031f 	and.w	r3, r3, #31
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	e071      	b.n	800b8e0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <dir_sdi+0x46>
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d902      	bls.n	800b81c <dir_sdi+0x46>
		clst = fs->dirbase;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10c      	bne.n	800b83c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	095b      	lsrs	r3, r3, #5
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	8912      	ldrh	r2, [r2, #8]
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d301      	bcc.n	800b832 <dir_sdi+0x5c>
 800b82e:	2302      	movs	r3, #2
 800b830:	e056      	b.n	800b8e0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	61da      	str	r2, [r3, #28]
 800b83a:	e02d      	b.n	800b898 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	895b      	ldrh	r3, [r3, #10]
 800b840:	461a      	mov	r2, r3
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	899b      	ldrh	r3, [r3, #12]
 800b846:	fb03 f302 	mul.w	r3, r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b84c:	e019      	b.n	800b882 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6979      	ldr	r1, [r7, #20]
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fca3 	bl	800b19e <get_fat>
 800b858:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b860:	d101      	bne.n	800b866 <dir_sdi+0x90>
 800b862:	2301      	movs	r3, #1
 800b864:	e03c      	b.n	800b8e0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d904      	bls.n	800b876 <dir_sdi+0xa0>
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	429a      	cmp	r2, r3
 800b874:	d301      	bcc.n	800b87a <dir_sdi+0xa4>
 800b876:	2302      	movs	r3, #2
 800b878:	e032      	b.n	800b8e0 <dir_sdi+0x10a>
			ofs -= csz;
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	429a      	cmp	r2, r3
 800b888:	d2e1      	bcs.n	800b84e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b88a:	6979      	ldr	r1, [r7, #20]
 800b88c:	6938      	ldr	r0, [r7, #16]
 800b88e:	f7ff fc67 	bl	800b160 <clust2sect>
 800b892:	4602      	mov	r2, r0
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	69db      	ldr	r3, [r3, #28]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <dir_sdi+0xd4>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e01a      	b.n	800b8e0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69da      	ldr	r2, [r3, #28]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	899b      	ldrh	r3, [r3, #12]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8ba:	441a      	add	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	899b      	ldrh	r3, [r3, #12]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8d2:	fb02 f200 	mul.w	r2, r2, r0
 800b8d6:	1a9b      	subs	r3, r3, r2
 800b8d8:	18ca      	adds	r2, r1, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	3320      	adds	r3, #32
 800b8fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <dir_next+0x28>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b90e:	d301      	bcc.n	800b914 <dir_next+0x2c>
 800b910:	2304      	movs	r3, #4
 800b912:	e0bb      	b.n	800ba8c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	899b      	ldrh	r3, [r3, #12]
 800b918:	461a      	mov	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b920:	fb02 f201 	mul.w	r2, r2, r1
 800b924:	1a9b      	subs	r3, r3, r2
 800b926:	2b00      	cmp	r3, #0
 800b928:	f040 809d 	bne.w	800ba66 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10b      	bne.n	800b956 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	8912      	ldrh	r2, [r2, #8]
 800b946:	4293      	cmp	r3, r2
 800b948:	f0c0 808d 	bcc.w	800ba66 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	61da      	str	r2, [r3, #28]
 800b952:	2304      	movs	r3, #4
 800b954:	e09a      	b.n	800ba8c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	899b      	ldrh	r3, [r3, #12]
 800b95a:	461a      	mov	r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	8952      	ldrh	r2, [r2, #10]
 800b966:	3a01      	subs	r2, #1
 800b968:	4013      	ands	r3, r2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d17b      	bne.n	800ba66 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f7ff fc11 	bl	800b19e <get_fat>
 800b97c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d801      	bhi.n	800b988 <dir_next+0xa0>
 800b984:	2302      	movs	r3, #2
 800b986:	e081      	b.n	800ba8c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d101      	bne.n	800b994 <dir_next+0xac>
 800b990:	2301      	movs	r3, #1
 800b992:	e07b      	b.n	800ba8c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d359      	bcc.n	800ba52 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d104      	bne.n	800b9ae <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	61da      	str	r2, [r3, #28]
 800b9aa:	2304      	movs	r3, #4
 800b9ac:	e06e      	b.n	800ba8c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f7ff fe3d 	bl	800b636 <create_chain>
 800b9bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <dir_next+0xe0>
 800b9c4:	2307      	movs	r3, #7
 800b9c6:	e061      	b.n	800ba8c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d101      	bne.n	800b9d2 <dir_next+0xea>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e05c      	b.n	800ba8c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d8:	d101      	bne.n	800b9de <dir_next+0xf6>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e056      	b.n	800ba8c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fadc 	bl	800af9c <sync_window>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <dir_next+0x106>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e04e      	b.n	800ba8c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	899b      	ldrh	r3, [r3, #12]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	f7ff f905 	bl	800ac0a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba00:	2300      	movs	r3, #0
 800ba02:	613b      	str	r3, [r7, #16]
 800ba04:	6979      	ldr	r1, [r7, #20]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fbaa 	bl	800b160 <clust2sect>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	639a      	str	r2, [r3, #56]	; 0x38
 800ba12:	e012      	b.n	800ba3a <dir_next+0x152>
						fs->wflag = 1;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff fabe 	bl	800af9c <sync_window>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <dir_next+0x142>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e030      	b.n	800ba8c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	895b      	ldrh	r3, [r3, #10]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d3e6      	bcc.n	800ba14 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	1ad2      	subs	r2, r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba58:	6979      	ldr	r1, [r7, #20]
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff fb80 	bl	800b160 <clust2sect>
 800ba60:	4602      	mov	r2, r0
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	461a      	mov	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba7e:	fb02 f200 	mul.w	r2, r2, r0
 800ba82:	1a9b      	subs	r3, r3, r2
 800ba84:	18ca      	adds	r2, r1, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff fe95 	bl	800b7d6 <dir_sdi>
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d12b      	bne.n	800bb0e <dir_alloc+0x7a>
		n = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	4619      	mov	r1, r3
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f7ff faaf 	bl	800b024 <move_window>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d11d      	bne.n	800bb0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2be5      	cmp	r3, #229	; 0xe5
 800bad8:	d004      	beq.n	800bae4 <dir_alloc+0x50>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d107      	bne.n	800baf4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	3301      	adds	r3, #1
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d102      	bne.n	800baf8 <dir_alloc+0x64>
 800baf2:	e00c      	b.n	800bb0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800baf4:	2300      	movs	r3, #0
 800baf6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800baf8:	2101      	movs	r1, #1
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff fef4 	bl	800b8e8 <dir_next>
 800bb00:	4603      	mov	r3, r0
 800bb02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0d7      	beq.n	800baba <dir_alloc+0x26>
 800bb0a:	e000      	b.n	800bb0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d101      	bne.n	800bb18 <dir_alloc+0x84>
 800bb14:	2307      	movs	r3, #7
 800bb16:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	331a      	adds	r3, #26
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fe ffc7 	bl	800aac4 <ld_word>
 800bb36:	4603      	mov	r3, r0
 800bb38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d109      	bne.n	800bb56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	3314      	adds	r3, #20
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe ffbc 	bl	800aac4 <ld_word>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	041b      	lsls	r3, r3, #16
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb56:	68fb      	ldr	r3, [r7, #12]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	331a      	adds	r3, #26
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	b292      	uxth	r2, r2
 800bb74:	4611      	mov	r1, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe ffdf 	bl	800ab3a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d109      	bne.n	800bb98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f103 0214 	add.w	r2, r3, #20
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	0c1b      	lsrs	r3, r3, #16
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4619      	mov	r1, r3
 800bb92:	4610      	mov	r0, r2
 800bb94:	f7fe ffd1 	bl	800ab3a <st_word>
	}
}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bba0:	b590      	push	{r4, r7, lr}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	331a      	adds	r3, #26
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe ff88 	bl	800aac4 <ld_word>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <cmp_lfn+0x1e>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e059      	b.n	800bc72 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbc6:	1e5a      	subs	r2, r3, #1
 800bbc8:	4613      	mov	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	81fb      	strh	r3, [r7, #14]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	e033      	b.n	800bc46 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bbde:	4a27      	ldr	r2, [pc, #156]	; (800bc7c <cmp_lfn+0xdc>)
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	4413      	add	r3, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe ff69 	bl	800aac4 <ld_word>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bbf6:	89fb      	ldrh	r3, [r7, #14]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01a      	beq.n	800bc32 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2bfe      	cmp	r3, #254	; 0xfe
 800bc00:	d812      	bhi.n	800bc28 <cmp_lfn+0x88>
 800bc02:	89bb      	ldrh	r3, [r7, #12]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f002 fd23 	bl	800e650 <ff_wtoupper>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	461c      	mov	r4, r3
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	1c5a      	adds	r2, r3, #1
 800bc12:	617a      	str	r2, [r7, #20]
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	4413      	add	r3, r2
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f002 fd17 	bl	800e650 <ff_wtoupper>
 800bc22:	4603      	mov	r3, r0
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d001      	beq.n	800bc2c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e022      	b.n	800bc72 <cmp_lfn+0xd2>
			}
			wc = uc;
 800bc2c:	89bb      	ldrh	r3, [r7, #12]
 800bc2e:	81fb      	strh	r3, [r7, #14]
 800bc30:	e006      	b.n	800bc40 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bc32:	89bb      	ldrh	r3, [r7, #12]
 800bc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d001      	beq.n	800bc40 <cmp_lfn+0xa0>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e018      	b.n	800bc72 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	3301      	adds	r3, #1
 800bc44:	613b      	str	r3, [r7, #16]
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	2b0c      	cmp	r3, #12
 800bc4a:	d9c8      	bls.n	800bbde <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00b      	beq.n	800bc70 <cmp_lfn+0xd0>
 800bc58:	89fb      	ldrh	r3, [r7, #14]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d008      	beq.n	800bc70 <cmp_lfn+0xd0>
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	4413      	add	r3, r2
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <cmp_lfn+0xd0>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e000      	b.n	800bc72 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bc70:	2301      	movs	r3, #1
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd90      	pop	{r4, r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	08013788 	.word	0x08013788

0800bc80 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	331a      	adds	r3, #26
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe ff18 	bl	800aac4 <ld_word>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <pick_lfn+0x1e>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e04d      	b.n	800bd3a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bca6:	1e5a      	subs	r2, r3, #1
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	81fb      	strh	r3, [r7, #14]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	613b      	str	r3, [r7, #16]
 800bcbc:	e028      	b.n	800bd10 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bcbe:	4a21      	ldr	r2, [pc, #132]	; (800bd44 <pick_lfn+0xc4>)
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	4413      	add	r3, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fef9 	bl	800aac4 <ld_word>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bcd6:	89fb      	ldrh	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00f      	beq.n	800bcfc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2bfe      	cmp	r3, #254	; 0xfe
 800bce0:	d901      	bls.n	800bce6 <pick_lfn+0x66>
 800bce2:	2300      	movs	r3, #0
 800bce4:	e029      	b.n	800bd3a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bce6:	89bb      	ldrh	r3, [r7, #12]
 800bce8:	81fb      	strh	r3, [r7, #14]
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	617a      	str	r2, [r7, #20]
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	89fa      	ldrh	r2, [r7, #14]
 800bcf8:	801a      	strh	r2, [r3, #0]
 800bcfa:	e006      	b.n	800bd0a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bcfc:	89bb      	ldrh	r3, [r7, #12]
 800bcfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d001      	beq.n	800bd0a <pick_lfn+0x8a>
 800bd06:	2300      	movs	r3, #0
 800bd08:	e017      	b.n	800bd3a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	613b      	str	r3, [r7, #16]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2b0c      	cmp	r3, #12
 800bd14:	d9d3      	bls.n	800bcbe <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2bfe      	cmp	r3, #254	; 0xfe
 800bd26:	d901      	bls.n	800bd2c <pick_lfn+0xac>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e006      	b.n	800bd3a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	2200      	movs	r2, #0
 800bd36:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bd38:	2301      	movs	r3, #1
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	08013788 	.word	0x08013788

0800bd48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	460b      	mov	r3, r1
 800bd58:	71fb      	strb	r3, [r7, #7]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	330d      	adds	r3, #13
 800bd62:	79ba      	ldrb	r2, [r7, #6]
 800bd64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	330b      	adds	r3, #11
 800bd6a:	220f      	movs	r2, #15
 800bd6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	330c      	adds	r3, #12
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	331a      	adds	r3, #26
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fedc 	bl	800ab3a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	4613      	mov	r3, r2
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	82fb      	strh	r3, [r7, #22]
 800bd96:	2300      	movs	r3, #0
 800bd98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd9a:	8afb      	ldrh	r3, [r7, #22]
 800bd9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d007      	beq.n	800bdb4 <put_lfn+0x6c>
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	61fa      	str	r2, [r7, #28]
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4413      	add	r3, r2
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bdb4:	4a17      	ldr	r2, [pc, #92]	; (800be14 <put_lfn+0xcc>)
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	4413      	add	r3, r2
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	8afa      	ldrh	r2, [r7, #22]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe feb7 	bl	800ab3a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bdcc:	8afb      	ldrh	r3, [r7, #22]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <put_lfn+0x90>
 800bdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	3301      	adds	r3, #1
 800bddc:	61bb      	str	r3, [r7, #24]
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b0c      	cmp	r3, #12
 800bde2:	d9da      	bls.n	800bd9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d006      	beq.n	800bdfc <put_lfn+0xb4>
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <put_lfn+0xbc>
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	79fa      	ldrb	r2, [r7, #7]
 800be08:	701a      	strb	r2, [r3, #0]
}
 800be0a:	bf00      	nop
 800be0c:	3720      	adds	r7, #32
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	08013788 	.word	0x08013788

0800be18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08c      	sub	sp, #48	; 0x30
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800be26:	220b      	movs	r2, #11
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7fe fecc 	bl	800abc8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b05      	cmp	r3, #5
 800be34:	d92b      	bls.n	800be8e <gen_numname+0x76>
		sr = seq;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800be3a:	e022      	b.n	800be82 <gen_numname+0x6a>
			wc = *lfn++;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	1c9a      	adds	r2, r3, #2
 800be40:	607a      	str	r2, [r7, #4]
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800be46:	2300      	movs	r3, #0
 800be48:	62bb      	str	r3, [r7, #40]	; 0x28
 800be4a:	e017      	b.n	800be7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	005a      	lsls	r2, r3, #1
 800be50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	4413      	add	r3, r2
 800be58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800be5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be5c:	085b      	lsrs	r3, r3, #1
 800be5e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <gen_numname+0x5e>
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800be70:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800be74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	3301      	adds	r3, #1
 800be7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	2b0f      	cmp	r3, #15
 800be80:	d9e4      	bls.n	800be4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1d8      	bne.n	800be3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800be8e:	2307      	movs	r3, #7
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	f003 030f 	and.w	r3, r3, #15
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	3330      	adds	r3, #48	; 0x30
 800be9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bea6:	2b39      	cmp	r3, #57	; 0x39
 800bea8:	d904      	bls.n	800beb4 <gen_numname+0x9c>
 800beaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beae:	3307      	adds	r3, #7
 800beb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	1e5a      	subs	r2, r3, #1
 800beb8:	62ba      	str	r2, [r7, #40]	; 0x28
 800beba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bebe:	4413      	add	r3, r2
 800bec0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bec4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	091b      	lsrs	r3, r3, #4
 800becc:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1de      	bne.n	800be92 <gen_numname+0x7a>
	ns[i] = '~';
 800bed4:	f107 0214 	add.w	r2, r7, #20
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	4413      	add	r3, r2
 800bedc:	227e      	movs	r2, #126	; 0x7e
 800bede:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bee0:	2300      	movs	r3, #0
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
 800bee4:	e002      	b.n	800beec <gen_numname+0xd4>
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	3301      	adds	r3, #1
 800beea:	627b      	str	r3, [r7, #36]	; 0x24
 800beec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d205      	bcs.n	800bf00 <gen_numname+0xe8>
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	4413      	add	r3, r2
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b20      	cmp	r3, #32
 800befe:	d1f2      	bne.n	800bee6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	2b07      	cmp	r3, #7
 800bf04:	d808      	bhi.n	800bf18 <gen_numname+0x100>
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	62ba      	str	r2, [r7, #40]	; 0x28
 800bf0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bf10:	4413      	add	r3, r2
 800bf12:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bf16:	e000      	b.n	800bf1a <gen_numname+0x102>
 800bf18:	2120      	movs	r1, #32
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	627a      	str	r2, [r7, #36]	; 0x24
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4413      	add	r3, r2
 800bf24:	460a      	mov	r2, r1
 800bf26:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	2b07      	cmp	r3, #7
 800bf2c:	d9e8      	bls.n	800bf00 <gen_numname+0xe8>
}
 800bf2e:	bf00      	nop
 800bf30:	3730      	adds	r7, #48	; 0x30
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bf42:	230b      	movs	r3, #11
 800bf44:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	0852      	lsrs	r2, r2, #1
 800bf4c:	01db      	lsls	r3, r3, #7
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	1c59      	adds	r1, r3, #1
 800bf56:	6079      	str	r1, [r7, #4]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	60bb      	str	r3, [r7, #8]
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1ed      	bne.n	800bf46 <sum_sfn+0x10>
	return sum;
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bf82:	2304      	movs	r3, #4
 800bf84:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bf8c:	23ff      	movs	r3, #255	; 0xff
 800bf8e:	757b      	strb	r3, [r7, #21]
 800bf90:	23ff      	movs	r3, #255	; 0xff
 800bf92:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bf94:	e081      	b.n	800c09a <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	69db      	ldr	r3, [r3, #28]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6938      	ldr	r0, [r7, #16]
 800bf9e:	f7ff f841 	bl	800b024 <move_window>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d17c      	bne.n	800c0a6 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bfb4:	7dbb      	ldrb	r3, [r7, #22]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bfba:	2304      	movs	r3, #4
 800bfbc:	75fb      	strb	r3, [r7, #23]
 800bfbe:	e077      	b.n	800c0b0 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	330b      	adds	r3, #11
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bfd4:	7dbb      	ldrb	r3, [r7, #22]
 800bfd6:	2be5      	cmp	r3, #229	; 0xe5
 800bfd8:	d00e      	beq.n	800bff8 <dir_read+0x80>
 800bfda:	7dbb      	ldrb	r3, [r7, #22]
 800bfdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bfde:	d00b      	beq.n	800bff8 <dir_read+0x80>
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	f023 0320 	bic.w	r3, r3, #32
 800bfe6:	2b08      	cmp	r3, #8
 800bfe8:	bf0c      	ite	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	2300      	movne	r3, #0
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	461a      	mov	r2, r3
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d002      	beq.n	800bffe <dir_read+0x86>
				ord = 0xFF;
 800bff8:	23ff      	movs	r3, #255	; 0xff
 800bffa:	757b      	strb	r3, [r7, #21]
 800bffc:	e044      	b.n	800c088 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b0f      	cmp	r3, #15
 800c002:	d12f      	bne.n	800c064 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c004:	7dbb      	ldrb	r3, [r7, #22]
 800c006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00d      	beq.n	800c02a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	7b5b      	ldrb	r3, [r3, #13]
 800c014:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c016:	7dbb      	ldrb	r3, [r7, #22]
 800c018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c01c:	75bb      	strb	r3, [r7, #22]
 800c01e:	7dbb      	ldrb	r3, [r7, #22]
 800c020:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	695a      	ldr	r2, [r3, #20]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c02a:	7dba      	ldrb	r2, [r7, #22]
 800c02c:	7d7b      	ldrb	r3, [r7, #21]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d115      	bne.n	800c05e <dir_read+0xe6>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	330d      	adds	r3, #13
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	7d3a      	ldrb	r2, [r7, #20]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d10e      	bne.n	800c05e <dir_read+0xe6>
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	691a      	ldr	r2, [r3, #16]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7ff fe18 	bl	800bc80 <pick_lfn>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d003      	beq.n	800c05e <dir_read+0xe6>
 800c056:	7d7b      	ldrb	r3, [r7, #21]
 800c058:	3b01      	subs	r3, #1
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	e000      	b.n	800c060 <dir_read+0xe8>
 800c05e:	23ff      	movs	r3, #255	; 0xff
 800c060:	757b      	strb	r3, [r7, #21]
 800c062:	e011      	b.n	800c088 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c064:	7d7b      	ldrb	r3, [r7, #21]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d109      	bne.n	800c07e <dir_read+0x106>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff ff61 	bl	800bf36 <sum_sfn>
 800c074:	4603      	mov	r3, r0
 800c076:	461a      	mov	r2, r3
 800c078:	7d3b      	ldrb	r3, [r7, #20]
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d015      	beq.n	800c0aa <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f04f 32ff 	mov.w	r2, #4294967295
 800c084:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800c086:	e010      	b.n	800c0aa <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c088:	2100      	movs	r1, #0
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fc2c 	bl	800b8e8 <dir_next>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d109      	bne.n	800c0ae <dir_read+0x136>
	while (dp->sect) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f47f af79 	bne.w	800bf96 <dir_read+0x1e>
 800c0a4:	e004      	b.n	800c0b0 <dir_read+0x138>
		if (res != FR_OK) break;
 800c0a6:	bf00      	nop
 800c0a8:	e002      	b.n	800c0b0 <dir_read+0x138>
					break;
 800c0aa:	bf00      	nop
 800c0ac:	e000      	b.n	800c0b0 <dir_read+0x138>
		if (res != FR_OK) break;
 800c0ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <dir_read+0x144>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	61da      	str	r2, [r3, #28]
	return res;
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fb7d 	bl	800b7d6 <dir_sdi>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <dir_find+0x24>
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
 800c0e8:	e0a9      	b.n	800c23e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0ea:	23ff      	movs	r3, #255	; 0xff
 800c0ec:	753b      	strb	r3, [r7, #20]
 800c0ee:	7d3b      	ldrb	r3, [r7, #20]
 800c0f0:	757b      	strb	r3, [r7, #21]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6938      	ldr	r0, [r7, #16]
 800c102:	f7fe ff8f 	bl	800b024 <move_window>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 8090 	bne.w	800c232 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c11a:	7dbb      	ldrb	r3, [r7, #22]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <dir_find+0x60>
 800c120:	2304      	movs	r3, #4
 800c122:	75fb      	strb	r3, [r7, #23]
 800c124:	e08a      	b.n	800c23c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	330b      	adds	r3, #11
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c132:	73fb      	strb	r3, [r7, #15]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7bfa      	ldrb	r2, [r7, #15]
 800c138:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c13a:	7dbb      	ldrb	r3, [r7, #22]
 800c13c:	2be5      	cmp	r3, #229	; 0xe5
 800c13e:	d007      	beq.n	800c150 <dir_find+0x8a>
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	f003 0308 	and.w	r3, r3, #8
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <dir_find+0x98>
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	2b0f      	cmp	r3, #15
 800c14e:	d006      	beq.n	800c15e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c150:	23ff      	movs	r3, #255	; 0xff
 800c152:	757b      	strb	r3, [r7, #21]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f04f 32ff 	mov.w	r2, #4294967295
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30
 800c15c:	e05e      	b.n	800c21c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	2b0f      	cmp	r3, #15
 800c162:	d136      	bne.n	800c1d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d154      	bne.n	800c21c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c172:	7dbb      	ldrb	r3, [r7, #22]
 800c174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00d      	beq.n	800c198 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	7b5b      	ldrb	r3, [r3, #13]
 800c182:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c184:	7dbb      	ldrb	r3, [r7, #22]
 800c186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18a:	75bb      	strb	r3, [r7, #22]
 800c18c:	7dbb      	ldrb	r3, [r7, #22]
 800c18e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	695a      	ldr	r2, [r3, #20]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c198:	7dba      	ldrb	r2, [r7, #22]
 800c19a:	7d7b      	ldrb	r3, [r7, #21]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d115      	bne.n	800c1cc <dir_find+0x106>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	330d      	adds	r3, #13
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	7d3a      	ldrb	r2, [r7, #20]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d10e      	bne.n	800c1cc <dir_find+0x106>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	691a      	ldr	r2, [r3, #16]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	f7ff fcf1 	bl	800bba0 <cmp_lfn>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d003      	beq.n	800c1cc <dir_find+0x106>
 800c1c4:	7d7b      	ldrb	r3, [r7, #21]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	e000      	b.n	800c1ce <dir_find+0x108>
 800c1cc:	23ff      	movs	r3, #255	; 0xff
 800c1ce:	757b      	strb	r3, [r7, #21]
 800c1d0:	e024      	b.n	800c21c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1d2:	7d7b      	ldrb	r3, [r7, #21]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d109      	bne.n	800c1ec <dir_find+0x126>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a1b      	ldr	r3, [r3, #32]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff feaa 	bl	800bf36 <sum_sfn>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	7d3b      	ldrb	r3, [r7, #20]
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d024      	beq.n	800c236 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <dir_find+0x14a>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a18      	ldr	r0, [r3, #32]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3324      	adds	r3, #36	; 0x24
 800c202:	220b      	movs	r2, #11
 800c204:	4619      	mov	r1, r3
 800c206:	f7fe fd1a 	bl	800ac3e <mem_cmp>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d014      	beq.n	800c23a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c210:	23ff      	movs	r3, #255	; 0xff
 800c212:	757b      	strb	r3, [r7, #21]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f04f 32ff 	mov.w	r2, #4294967295
 800c21a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c21c:	2100      	movs	r1, #0
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff fb62 	bl	800b8e8 <dir_next>
 800c224:	4603      	mov	r3, r0
 800c226:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c228:	7dfb      	ldrb	r3, [r7, #23]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f43f af65 	beq.w	800c0fa <dir_find+0x34>
 800c230:	e004      	b.n	800c23c <dir_find+0x176>
		if (res != FR_OK) break;
 800c232:	bf00      	nop
 800c234:	e002      	b.n	800c23c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c236:	bf00      	nop
 800c238:	e000      	b.n	800c23c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c23a:	bf00      	nop

	return res;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	; 0x30
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c25c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <dir_register+0x20>
 800c264:	2306      	movs	r3, #6
 800c266:	e0e0      	b.n	800c42a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c268:	2300      	movs	r3, #0
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
 800c26c:	e002      	b.n	800c274 <dir_register+0x2c>
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	3301      	adds	r3, #1
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	691a      	ldr	r2, [r3, #16]
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	4413      	add	r3, r2
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1f4      	bne.n	800c26e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c28a:	f107 030c 	add.w	r3, r7, #12
 800c28e:	220c      	movs	r2, #12
 800c290:	4618      	mov	r0, r3
 800c292:	f7fe fc99 	bl	800abc8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d032      	beq.n	800c306 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2240      	movs	r2, #64	; 0x40
 800c2a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ac:	e016      	b.n	800c2dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	691a      	ldr	r2, [r3, #16]
 800c2b8:	f107 010c 	add.w	r1, r7, #12
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	f7ff fdab 	bl	800be18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff feff 	bl	800c0c6 <dir_find>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c2ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	3301      	adds	r3, #1
 800c2da:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	2b63      	cmp	r3, #99	; 0x63
 800c2e0:	d9e5      	bls.n	800c2ae <dir_register+0x66>
 800c2e2:	e000      	b.n	800c2e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c2e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	2b64      	cmp	r3, #100	; 0x64
 800c2ea:	d101      	bne.n	800c2f0 <dir_register+0xa8>
 800c2ec:	2307      	movs	r3, #7
 800c2ee:	e09c      	b.n	800c42a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c2f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2f4:	2b04      	cmp	r3, #4
 800c2f6:	d002      	beq.n	800c2fe <dir_register+0xb6>
 800c2f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2fc:	e095      	b.n	800c42a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c2fe:	7dfa      	ldrb	r2, [r7, #23]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	f003 0302 	and.w	r3, r3, #2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d007      	beq.n	800c320 <dir_register+0xd8>
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	330c      	adds	r3, #12
 800c314:	4a47      	ldr	r2, [pc, #284]	; (800c434 <dir_register+0x1ec>)
 800c316:	fba2 2303 	umull	r2, r3, r2, r3
 800c31a:	089b      	lsrs	r3, r3, #2
 800c31c:	3301      	adds	r3, #1
 800c31e:	e000      	b.n	800c322 <dir_register+0xda>
 800c320:	2301      	movs	r3, #1
 800c322:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c324:	6a39      	ldr	r1, [r7, #32]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fbb4 	bl	800ba94 <dir_alloc>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c336:	2b00      	cmp	r3, #0
 800c338:	d148      	bne.n	800c3cc <dir_register+0x184>
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	623b      	str	r3, [r7, #32]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d042      	beq.n	800c3cc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	695a      	ldr	r2, [r3, #20]
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	015b      	lsls	r3, r3, #5
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff fa3f 	bl	800b7d6 <dir_sdi>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c362:	2b00      	cmp	r3, #0
 800c364:	d132      	bne.n	800c3cc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3324      	adds	r3, #36	; 0x24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff fde3 	bl	800bf36 <sum_sfn>
 800c370:	4603      	mov	r3, r0
 800c372:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	4619      	mov	r1, r3
 800c37a:	69f8      	ldr	r0, [r7, #28]
 800c37c:	f7fe fe52 	bl	800b024 <move_window>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d11d      	bne.n	800c3ca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	6918      	ldr	r0, [r3, #16]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a19      	ldr	r1, [r3, #32]
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	7efb      	ldrb	r3, [r7, #27]
 800c39c:	f7ff fcd4 	bl	800bd48 <put_lfn>
				fs->wflag = 1;
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff fa9d 	bl	800b8e8 <dir_next>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d107      	bne.n	800c3cc <dir_register+0x184>
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	623b      	str	r3, [r7, #32]
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1d5      	bne.n	800c374 <dir_register+0x12c>
 800c3c8:	e000      	b.n	800c3cc <dir_register+0x184>
				if (res != FR_OK) break;
 800c3ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d128      	bne.n	800c426 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	69f8      	ldr	r0, [r7, #28]
 800c3dc:	f7fe fe22 	bl	800b024 <move_window>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11b      	bne.n	800c426 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	2220      	movs	r2, #32
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fc07 	bl	800ac0a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a18      	ldr	r0, [r3, #32]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3324      	adds	r3, #36	; 0x24
 800c404:	220b      	movs	r2, #11
 800c406:	4619      	mov	r1, r3
 800c408:	f7fe fbde 	bl	800abc8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	330c      	adds	r3, #12
 800c418:	f002 0218 	and.w	r2, r2, #24
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	2201      	movs	r2, #1
 800c424:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3730      	adds	r7, #48	; 0x30
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	4ec4ec4f 	.word	0x4ec4ec4f

0800c438 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c454:	d007      	beq.n	800c466 <dir_remove+0x2e>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff f9ba 	bl	800b7d6 <dir_sdi>
 800c462:	4603      	mov	r3, r0
 800c464:	e000      	b.n	800c468 <dir_remove+0x30>
 800c466:	2300      	movs	r3, #0
 800c468:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d128      	bne.n	800c4c2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	4619      	mov	r1, r3
 800c476:	6938      	ldr	r0, [r7, #16]
 800c478:	f7fe fdd4 	bl	800b024 <move_window>
 800c47c:	4603      	mov	r3, r0
 800c47e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d115      	bne.n	800c4b2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	22e5      	movs	r2, #229	; 0xe5
 800c48c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2201      	movs	r2, #1
 800c492:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d90b      	bls.n	800c4b6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800c49e:	2100      	movs	r1, #0
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff fa21 	bl	800b8e8 <dir_next>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d0df      	beq.n	800c470 <dir_remove+0x38>
 800c4b0:	e002      	b.n	800c4b8 <dir_remove+0x80>
			if (res != FR_OK) break;
 800c4b2:	bf00      	nop
 800c4b4:	e000      	b.n	800c4b8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c4b6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d101      	bne.n	800c4c2 <dir_remove+0x8a>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08a      	sub	sp, #40	; 0x28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	61ba      	str	r2, [r7, #24]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c4fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4fc:	2b1f      	cmp	r3, #31
 800c4fe:	d940      	bls.n	800c582 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c502:	2b2f      	cmp	r3, #47	; 0x2f
 800c504:	d006      	beq.n	800c514 <create_name+0x48>
 800c506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c508:	2b5c      	cmp	r3, #92	; 0x5c
 800c50a:	d110      	bne.n	800c52e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c50c:	e002      	b.n	800c514 <create_name+0x48>
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	3301      	adds	r3, #1
 800c512:	61bb      	str	r3, [r7, #24]
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	4413      	add	r3, r2
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b2f      	cmp	r3, #47	; 0x2f
 800c51e:	d0f6      	beq.n	800c50e <create_name+0x42>
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	4413      	add	r3, r2
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b5c      	cmp	r3, #92	; 0x5c
 800c52a:	d0f0      	beq.n	800c50e <create_name+0x42>
			break;
 800c52c:	e02a      	b.n	800c584 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2bfe      	cmp	r3, #254	; 0xfe
 800c532:	d901      	bls.n	800c538 <create_name+0x6c>
 800c534:	2306      	movs	r3, #6
 800c536:	e1c9      	b.n	800c8cc <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c540:	2101      	movs	r1, #1
 800c542:	4618      	mov	r0, r3
 800c544:	f002 f848 	bl	800e5d8 <ff_convert>
 800c548:	4603      	mov	r3, r0
 800c54a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <create_name+0x8a>
 800c552:	2306      	movs	r3, #6
 800c554:	e1ba      	b.n	800c8cc <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c558:	2b7f      	cmp	r3, #127	; 0x7f
 800c55a:	d809      	bhi.n	800c570 <create_name+0xa4>
 800c55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c55e:	4619      	mov	r1, r3
 800c560:	48a5      	ldr	r0, [pc, #660]	; (800c7f8 <create_name+0x32c>)
 800c562:	f7fe fb93 	bl	800ac8c <chk_chr>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <create_name+0xa4>
 800c56c:	2306      	movs	r3, #6
 800c56e:	e1ad      	b.n	800c8cc <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	617a      	str	r2, [r7, #20]
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c57e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c580:	e7b4      	b.n	800c4ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c582:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	441a      	add	r2, r3
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c58e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c590:	2b1f      	cmp	r3, #31
 800c592:	d801      	bhi.n	800c598 <create_name+0xcc>
 800c594:	2304      	movs	r3, #4
 800c596:	e000      	b.n	800c59a <create_name+0xce>
 800c598:	2300      	movs	r3, #0
 800c59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d109      	bne.n	800c5b8 <create_name+0xec>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c5b6:	d016      	beq.n	800c5e6 <create_name+0x11a>
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d14e      	bne.n	800c65c <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c5d0:	d144      	bne.n	800c65c <create_name+0x190>
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5d8:	3b02      	subs	r3, #2
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e4:	d13a      	bne.n	800c65c <create_name+0x190>
		lfn[di] = 0;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	623b      	str	r3, [r7, #32]
 800c5f6:	e00f      	b.n	800c618 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c5f8:	6a3a      	ldr	r2, [r7, #32]
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d201      	bcs.n	800c604 <create_name+0x138>
 800c600:	212e      	movs	r1, #46	; 0x2e
 800c602:	e000      	b.n	800c606 <create_name+0x13a>
 800c604:	2120      	movs	r1, #32
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	4413      	add	r3, r2
 800c60c:	3324      	adds	r3, #36	; 0x24
 800c60e:	460a      	mov	r2, r1
 800c610:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c612:	6a3b      	ldr	r3, [r7, #32]
 800c614:	3301      	adds	r3, #1
 800c616:	623b      	str	r3, [r7, #32]
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2b0a      	cmp	r3, #10
 800c61c:	d9ec      	bls.n	800c5f8 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c622:	f043 0320 	orr.w	r3, r3, #32
 800c626:	b2d9      	uxtb	r1, r3
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	4413      	add	r3, r2
 800c62e:	3324      	adds	r3, #36	; 0x24
 800c630:	460a      	mov	r2, r1
 800c632:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	e149      	b.n	800c8cc <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c63e:	3b01      	subs	r3, #1
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	4413      	add	r3, r2
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c64a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d002      	beq.n	800c656 <create_name+0x18a>
 800c650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c652:	2b2e      	cmp	r3, #46	; 0x2e
 800c654:	d106      	bne.n	800c664 <create_name+0x198>
		di--;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	3b01      	subs	r3, #1
 800c65a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ea      	bne.n	800c638 <create_name+0x16c>
 800c662:	e000      	b.n	800c666 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800c664:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <create_name+0x1b0>
 800c678:	2306      	movs	r3, #6
 800c67a:	e127      	b.n	800c8cc <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	3324      	adds	r3, #36	; 0x24
 800c680:	220b      	movs	r2, #11
 800c682:	2120      	movs	r1, #32
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe fac0 	bl	800ac0a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c68a:	2300      	movs	r3, #0
 800c68c:	61bb      	str	r3, [r7, #24]
 800c68e:	e002      	b.n	800c696 <create_name+0x1ca>
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	3301      	adds	r3, #1
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	4413      	add	r3, r2
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	2b20      	cmp	r3, #32
 800c6a2:	d0f5      	beq.n	800c690 <create_name+0x1c4>
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b0:	d0ee      	beq.n	800c690 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <create_name+0x200>
 800c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6bc:	f043 0303 	orr.w	r3, r3, #3
 800c6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c6c4:	e002      	b.n	800c6cc <create_name+0x200>
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <create_name+0x21a>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4413      	add	r3, r2
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e4:	d1ef      	bne.n	800c6c6 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	623b      	str	r3, [r7, #32]
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	61ba      	str	r2, [r7, #24]
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	4413      	add	r3, r2
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 8096 	beq.w	800c838 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c70c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c70e:	2b20      	cmp	r3, #32
 800c710:	d006      	beq.n	800c720 <create_name+0x254>
 800c712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c714:	2b2e      	cmp	r3, #46	; 0x2e
 800c716:	d10a      	bne.n	800c72e <create_name+0x262>
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d006      	beq.n	800c72e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800c720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c724:	f043 0303 	orr.w	r3, r3, #3
 800c728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c72c:	e083      	b.n	800c836 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c72e:	6a3a      	ldr	r2, [r7, #32]
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	429a      	cmp	r2, r3
 800c734:	d203      	bcs.n	800c73e <create_name+0x272>
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d123      	bne.n	800c786 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	2b0b      	cmp	r3, #11
 800c742:	d106      	bne.n	800c752 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c748:	f043 0303 	orr.w	r3, r3, #3
 800c74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c750:	e075      	b.n	800c83e <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c752:	69ba      	ldr	r2, [r7, #24]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	429a      	cmp	r2, r3
 800c758:	d005      	beq.n	800c766 <create_name+0x29a>
 800c75a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c75e:	f043 0303 	orr.w	r3, r3, #3
 800c762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d866      	bhi.n	800c83c <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	61bb      	str	r3, [r7, #24]
 800c772:	2308      	movs	r3, #8
 800c774:	623b      	str	r3, [r7, #32]
 800c776:	230b      	movs	r3, #11
 800c778:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c77a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c784:	e057      	b.n	800c836 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c788:	2b7f      	cmp	r3, #127	; 0x7f
 800c78a:	d914      	bls.n	800c7b6 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f001 ff21 	bl	800e5d8 <ff_convert>
 800c796:	4603      	mov	r3, r0
 800c798:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d004      	beq.n	800c7aa <create_name+0x2de>
 800c7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7a2:	3b80      	subs	r3, #128	; 0x80
 800c7a4:	4a15      	ldr	r2, [pc, #84]	; (800c7fc <create_name+0x330>)
 800c7a6:	5cd3      	ldrb	r3, [r2, r3]
 800c7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ae:	f043 0302 	orr.w	r3, r3, #2
 800c7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d007      	beq.n	800c7cc <create_name+0x300>
 800c7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7be:	4619      	mov	r1, r3
 800c7c0:	480f      	ldr	r0, [pc, #60]	; (800c800 <create_name+0x334>)
 800c7c2:	f7fe fa63 	bl	800ac8c <chk_chr>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d008      	beq.n	800c7de <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c7cc:	235f      	movs	r3, #95	; 0x5f
 800c7ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d4:	f043 0303 	orr.w	r3, r3, #3
 800c7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7dc:	e021      	b.n	800c822 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7e0:	2b40      	cmp	r3, #64	; 0x40
 800c7e2:	d90f      	bls.n	800c804 <create_name+0x338>
 800c7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7e6:	2b5a      	cmp	r3, #90	; 0x5a
 800c7e8:	d80c      	bhi.n	800c804 <create_name+0x338>
					b |= 2;
 800c7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7ee:	f043 0302 	orr.w	r3, r3, #2
 800c7f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7f6:	e014      	b.n	800c822 <create_name+0x356>
 800c7f8:	08013680 	.word	0x08013680
 800c7fc:	08013708 	.word	0x08013708
 800c800:	0801368c 	.word	0x0801368c
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c806:	2b60      	cmp	r3, #96	; 0x60
 800c808:	d90b      	bls.n	800c822 <create_name+0x356>
 800c80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c80c:	2b7a      	cmp	r3, #122	; 0x7a
 800c80e:	d808      	bhi.n	800c822 <create_name+0x356>
						b |= 1; w -= 0x20;
 800c810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c81e:	3b20      	subs	r3, #32
 800c820:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	623a      	str	r2, [r7, #32]
 800c828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c82a:	b2d1      	uxtb	r1, r2
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	4413      	add	r3, r2
 800c830:	460a      	mov	r2, r1
 800c832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c836:	e75d      	b.n	800c6f4 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800c838:	bf00      	nop
 800c83a:	e000      	b.n	800c83e <create_name+0x372>
			if (si > di) break;			/* No extension */
 800c83c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c844:	2be5      	cmp	r3, #229	; 0xe5
 800c846:	d103      	bne.n	800c850 <create_name+0x384>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2205      	movs	r2, #5
 800c84c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	2b08      	cmp	r3, #8
 800c854:	d104      	bne.n	800c860 <create_name+0x394>
 800c856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c864:	f003 030c 	and.w	r3, r3, #12
 800c868:	2b0c      	cmp	r3, #12
 800c86a:	d005      	beq.n	800c878 <create_name+0x3ac>
 800c86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c870:	f003 0303 	and.w	r3, r3, #3
 800c874:	2b03      	cmp	r3, #3
 800c876:	d105      	bne.n	800c884 <create_name+0x3b8>
 800c878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c87c:	f043 0302 	orr.w	r3, r3, #2
 800c880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d117      	bne.n	800c8c0 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c894:	f003 0303 	and.w	r3, r3, #3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d105      	bne.n	800c8a8 <create_name+0x3dc>
 800c89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a0:	f043 0310 	orr.w	r3, r3, #16
 800c8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c8a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8ac:	f003 030c 	and.w	r3, r3, #12
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d105      	bne.n	800c8c0 <create_name+0x3f4>
 800c8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b8:	f043 0308 	orr.w	r3, r3, #8
 800c8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c8c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c8ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3728      	adds	r7, #40	; 0x28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c8ee:	d00b      	beq.n	800c908 <follow_path+0x34>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c8f6:	d007      	beq.n	800c908 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	69da      	ldr	r2, [r3, #28]
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	609a      	str	r2, [r3, #8]
 800c900:	e00d      	b.n	800c91e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	603b      	str	r3, [r7, #0]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b2f      	cmp	r3, #47	; 0x2f
 800c90e:	d0f8      	beq.n	800c902 <follow_path+0x2e>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b5c      	cmp	r3, #92	; 0x5c
 800c916:	d0f4      	beq.n	800c902 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	2200      	movs	r2, #0
 800c91c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b1f      	cmp	r3, #31
 800c924:	d80a      	bhi.n	800c93c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2280      	movs	r2, #128	; 0x80
 800c92a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7fe ff50 	bl	800b7d6 <dir_sdi>
 800c936:	4603      	mov	r3, r0
 800c938:	75fb      	strb	r3, [r7, #23]
 800c93a:	e05b      	b.n	800c9f4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c93c:	463b      	mov	r3, r7
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff fdc3 	bl	800c4cc <create_name>
 800c946:	4603      	mov	r3, r0
 800c948:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d14c      	bne.n	800c9ea <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fbb8 	bl	800c0c6 <dir_find>
 800c956:	4603      	mov	r3, r0
 800c958:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c960:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d01b      	beq.n	800c9a0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d13f      	bne.n	800c9ee <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800c96e:	7afb      	ldrb	r3, [r7, #11]
 800c970:	f003 0320 	and.w	r3, r3, #32
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c978:	7afb      	ldrb	r3, [r7, #11]
 800c97a:	f003 0304 	and.w	r3, r3, #4
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d031      	beq.n	800c9e6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2280      	movs	r2, #128	; 0x80
 800c986:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800c98e:	e02e      	b.n	800c9ee <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c990:	7afb      	ldrb	r3, [r7, #11]
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	2b00      	cmp	r3, #0
 800c998:	d129      	bne.n	800c9ee <follow_path+0x11a>
 800c99a:	2305      	movs	r3, #5
 800c99c:	75fb      	strb	r3, [r7, #23]
				break;
 800c99e:	e026      	b.n	800c9ee <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9a0:	7afb      	ldrb	r3, [r7, #11]
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d123      	bne.n	800c9f2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	799b      	ldrb	r3, [r3, #6]
 800c9ae:	f003 0310 	and.w	r3, r3, #16
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800c9b6:	2305      	movs	r3, #5
 800c9b8:	75fb      	strb	r3, [r7, #23]
 800c9ba:	e01b      	b.n	800c9f4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	8992      	ldrh	r2, [r2, #12]
 800c9ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9ce:	fb02 f200 	mul.w	r2, r2, r0
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	440b      	add	r3, r1
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff f8a2 	bl	800bb22 <ld_clust>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	e7aa      	b.n	800c93c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c9e6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9e8:	e7a8      	b.n	800c93c <follow_path+0x68>
			if (res != FR_OK) break;
 800c9ea:	bf00      	nop
 800c9ec:	e002      	b.n	800c9f4 <follow_path+0x120>
				break;
 800c9ee:	bf00      	nop
 800c9f0:	e000      	b.n	800c9f4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9f2:	bf00      	nop
			}
		}
	}

	return res;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b087      	sub	sp, #28
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ca06:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d031      	beq.n	800ca78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	e002      	b.n	800ca22 <get_ldnumber+0x24>
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b1f      	cmp	r3, #31
 800ca28:	d903      	bls.n	800ca32 <get_ldnumber+0x34>
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b3a      	cmp	r3, #58	; 0x3a
 800ca30:	d1f4      	bne.n	800ca1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b3a      	cmp	r3, #58	; 0x3a
 800ca38:	d11c      	bne.n	800ca74 <get_ldnumber+0x76>
			tp = *path;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	60fa      	str	r2, [r7, #12]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	3b30      	subs	r3, #48	; 0x30
 800ca4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b09      	cmp	r3, #9
 800ca50:	d80e      	bhi.n	800ca70 <get_ldnumber+0x72>
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d10a      	bne.n	800ca70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d107      	bne.n	800ca70 <get_ldnumber+0x72>
					vol = (int)i;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	3301      	adds	r3, #1
 800ca68:	617b      	str	r3, [r7, #20]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	e002      	b.n	800ca7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca74:	2300      	movs	r3, #0
 800ca76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca78:	693b      	ldr	r3, [r7, #16]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	371c      	adds	r7, #28
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
	...

0800ca88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	70da      	strb	r2, [r3, #3]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7fe fabe 	bl	800b024 <move_window>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <check_fs+0x2a>
 800caae:	2304      	movs	r3, #4
 800cab0:	e038      	b.n	800cb24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	333c      	adds	r3, #60	; 0x3c
 800cab6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe f802 	bl	800aac4 <ld_word>
 800cac0:	4603      	mov	r3, r0
 800cac2:	461a      	mov	r2, r3
 800cac4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cac8:	429a      	cmp	r2, r3
 800caca:	d001      	beq.n	800cad0 <check_fs+0x48>
 800cacc:	2303      	movs	r3, #3
 800cace:	e029      	b.n	800cb24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cad6:	2be9      	cmp	r3, #233	; 0xe9
 800cad8:	d009      	beq.n	800caee <check_fs+0x66>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cae0:	2beb      	cmp	r3, #235	; 0xeb
 800cae2:	d11e      	bne.n	800cb22 <check_fs+0x9a>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caea:	2b90      	cmp	r3, #144	; 0x90
 800caec:	d119      	bne.n	800cb22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	333c      	adds	r3, #60	; 0x3c
 800caf2:	3336      	adds	r3, #54	; 0x36
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fd fffd 	bl	800aaf4 <ld_dword>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb00:	4a0a      	ldr	r2, [pc, #40]	; (800cb2c <check_fs+0xa4>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d101      	bne.n	800cb0a <check_fs+0x82>
 800cb06:	2300      	movs	r3, #0
 800cb08:	e00c      	b.n	800cb24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	333c      	adds	r3, #60	; 0x3c
 800cb0e:	3352      	adds	r3, #82	; 0x52
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fd ffef 	bl	800aaf4 <ld_dword>
 800cb16:	4602      	mov	r2, r0
 800cb18:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <check_fs+0xa8>)
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d101      	bne.n	800cb22 <check_fs+0x9a>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e000      	b.n	800cb24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb22:	2302      	movs	r3, #2
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	00544146 	.word	0x00544146
 800cb30:	33544146 	.word	0x33544146

0800cb34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b096      	sub	sp, #88	; 0x58
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	2200      	movs	r2, #0
 800cb46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff ff58 	bl	800c9fe <get_ldnumber>
 800cb4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	da01      	bge.n	800cb5a <find_volume+0x26>
 800cb56:	230b      	movs	r3, #11
 800cb58:	e26b      	b.n	800d032 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb5a:	4ab0      	ldr	r2, [pc, #704]	; (800ce1c <find_volume+0x2e8>)
 800cb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d101      	bne.n	800cb6e <find_volume+0x3a>
 800cb6a:	230c      	movs	r3, #12
 800cb6c:	e261      	b.n	800d032 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb74:	79fb      	ldrb	r3, [r7, #7]
 800cb76:	f023 0301 	bic.w	r3, r3, #1
 800cb7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d01a      	beq.n	800cbba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	785b      	ldrb	r3, [r3, #1]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fd fefd 	bl	800a988 <disk_status>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10c      	bne.n	800cbba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d007      	beq.n	800cbb6 <find_volume+0x82>
 800cba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d001      	beq.n	800cbb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cbb2:	230a      	movs	r3, #10
 800cbb4:	e23d      	b.n	800d032 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e23b      	b.n	800d032 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc2:	b2da      	uxtb	r2, r3
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fd fef5 	bl	800a9bc <disk_initialize>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e224      	b.n	800d032 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbe8:	79fb      	ldrb	r3, [r7, #7]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d007      	beq.n	800cbfe <find_volume+0xca>
 800cbee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cbfa:	230a      	movs	r3, #10
 800cbfc:	e219      	b.n	800d032 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	7858      	ldrb	r0, [r3, #1]
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	330c      	adds	r3, #12
 800cc06:	461a      	mov	r2, r3
 800cc08:	2102      	movs	r1, #2
 800cc0a:	f7fd ff3d 	bl	800aa88 <disk_ioctl>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <find_volume+0xe4>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e20c      	b.n	800d032 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	899b      	ldrh	r3, [r3, #12]
 800cc1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc20:	d80d      	bhi.n	800cc3e <find_volume+0x10a>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	899b      	ldrh	r3, [r3, #12]
 800cc26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc2a:	d308      	bcc.n	800cc3e <find_volume+0x10a>
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	899b      	ldrh	r3, [r3, #12]
 800cc30:	461a      	mov	r2, r3
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	899b      	ldrh	r3, [r3, #12]
 800cc36:	3b01      	subs	r3, #1
 800cc38:	4013      	ands	r3, r2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <find_volume+0x10e>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e1f7      	b.n	800d032 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc4a:	f7ff ff1d 	bl	800ca88 <check_fs>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d14b      	bne.n	800ccf4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	643b      	str	r3, [r7, #64]	; 0x40
 800cc60:	e01f      	b.n	800cca2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800cc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc70:	4413      	add	r3, r2
 800cc72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc76:	3304      	adds	r3, #4
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d006      	beq.n	800cc8c <find_volume+0x158>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	3308      	adds	r3, #8
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd ff36 	bl	800aaf4 <ld_dword>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	e000      	b.n	800cc8e <find_volume+0x15a>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cc96:	440b      	add	r3, r1
 800cc98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9e:	3301      	adds	r3, #1
 800cca0:	643b      	str	r3, [r7, #64]	; 0x40
 800cca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca4:	2b03      	cmp	r3, #3
 800cca6:	d9dc      	bls.n	800cc62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cca8:	2300      	movs	r3, #0
 800ccaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ccac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <find_volume+0x184>
 800ccb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ccb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ccc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <find_volume+0x1a6>
 800ccce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccd2:	f7ff fed9 	bl	800ca88 <check_fs>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	e000      	b.n	800ccdc <find_volume+0x1a8>
 800ccda:	2303      	movs	r3, #3
 800ccdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d905      	bls.n	800ccf4 <find_volume+0x1c0>
 800cce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccea:	3301      	adds	r3, #1
 800ccec:	643b      	str	r3, [r7, #64]	; 0x40
 800ccee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d9e1      	bls.n	800ccb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ccf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d101      	bne.n	800cd00 <find_volume+0x1cc>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e198      	b.n	800d032 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d901      	bls.n	800cd0c <find_volume+0x1d8>
 800cd08:	230d      	movs	r3, #13
 800cd0a:	e192      	b.n	800d032 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	333c      	adds	r3, #60	; 0x3c
 800cd10:	330b      	adds	r3, #11
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fd fed6 	bl	800aac4 <ld_word>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1e:	899b      	ldrh	r3, [r3, #12]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d001      	beq.n	800cd28 <find_volume+0x1f4>
 800cd24:	230d      	movs	r3, #13
 800cd26:	e184      	b.n	800d032 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	333c      	adds	r3, #60	; 0x3c
 800cd2c:	3316      	adds	r3, #22
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd fec8 	bl	800aac4 <ld_word>
 800cd34:	4603      	mov	r3, r0
 800cd36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <find_volume+0x218>
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	333c      	adds	r3, #60	; 0x3c
 800cd42:	3324      	adds	r3, #36	; 0x24
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fd fed5 	bl	800aaf4 <ld_dword>
 800cd4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd50:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	789b      	ldrb	r3, [r3, #2]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d005      	beq.n	800cd70 <find_volume+0x23c>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	789b      	ldrb	r3, [r3, #2]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d001      	beq.n	800cd70 <find_volume+0x23c>
 800cd6c:	230d      	movs	r3, #13
 800cd6e:	e160      	b.n	800d032 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	789b      	ldrb	r3, [r3, #2]
 800cd74:	461a      	mov	r2, r3
 800cd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd78:	fb02 f303 	mul.w	r3, r2, r3
 800cd7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	895b      	ldrh	r3, [r3, #10]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d008      	beq.n	800cda4 <find_volume+0x270>
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	895b      	ldrh	r3, [r3, #10]
 800cd96:	461a      	mov	r2, r3
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	895b      	ldrh	r3, [r3, #10]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <find_volume+0x274>
 800cda4:	230d      	movs	r3, #13
 800cda6:	e144      	b.n	800d032 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	333c      	adds	r3, #60	; 0x3c
 800cdac:	3311      	adds	r3, #17
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fd fe88 	bl	800aac4 <ld_word>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	891b      	ldrh	r3, [r3, #8]
 800cdc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc2:	8992      	ldrh	r2, [r2, #12]
 800cdc4:	0952      	lsrs	r2, r2, #5
 800cdc6:	b292      	uxth	r2, r2
 800cdc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdcc:	fb02 f201 	mul.w	r2, r2, r1
 800cdd0:	1a9b      	subs	r3, r3, r2
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <find_volume+0x2a8>
 800cdd8:	230d      	movs	r3, #13
 800cdda:	e12a      	b.n	800d032 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	333c      	adds	r3, #60	; 0x3c
 800cde0:	3313      	adds	r3, #19
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fd fe6e 	bl	800aac4 <ld_word>
 800cde8:	4603      	mov	r3, r0
 800cdea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cdec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <find_volume+0x2cc>
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	333c      	adds	r3, #60	; 0x3c
 800cdf6:	3320      	adds	r3, #32
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd fe7b 	bl	800aaf4 <ld_dword>
 800cdfe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	333c      	adds	r3, #60	; 0x3c
 800ce04:	330e      	adds	r3, #14
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fd fe5c 	bl	800aac4 <ld_word>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d104      	bne.n	800ce20 <find_volume+0x2ec>
 800ce16:	230d      	movs	r3, #13
 800ce18:	e10b      	b.n	800d032 <find_volume+0x4fe>
 800ce1a:	bf00      	nop
 800ce1c:	20000578 	.word	0x20000578

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce24:	4413      	add	r3, r2
 800ce26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce28:	8911      	ldrh	r1, [r2, #8]
 800ce2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce2c:	8992      	ldrh	r2, [r2, #12]
 800ce2e:	0952      	lsrs	r2, r2, #5
 800ce30:	b292      	uxth	r2, r2
 800ce32:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce36:	b292      	uxth	r2, r2
 800ce38:	4413      	add	r3, r2
 800ce3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d201      	bcs.n	800ce48 <find_volume+0x314>
 800ce44:	230d      	movs	r3, #13
 800ce46:	e0f4      	b.n	800d032 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce50:	8952      	ldrh	r2, [r2, #10]
 800ce52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <find_volume+0x32e>
 800ce5e:	230d      	movs	r3, #13
 800ce60:	e0e7      	b.n	800d032 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800ce62:	2303      	movs	r3, #3
 800ce64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d802      	bhi.n	800ce78 <find_volume+0x344>
 800ce72:	2302      	movs	r3, #2
 800ce74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d802      	bhi.n	800ce88 <find_volume+0x354>
 800ce82:	2301      	movs	r3, #1
 800ce84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	1c9a      	adds	r2, r3, #2
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce94:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce9a:	441a      	add	r2, r3
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800cea0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	441a      	add	r2, r3
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800ceaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d11e      	bne.n	800cef0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	333c      	adds	r3, #60	; 0x3c
 800ceb6:	332a      	adds	r3, #42	; 0x2a
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fd fe03 	bl	800aac4 <ld_word>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <find_volume+0x394>
 800cec4:	230d      	movs	r3, #13
 800cec6:	e0b4      	b.n	800d032 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	891b      	ldrh	r3, [r3, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <find_volume+0x3a0>
 800ced0:	230d      	movs	r3, #13
 800ced2:	e0ae      	b.n	800d032 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced6:	333c      	adds	r3, #60	; 0x3c
 800ced8:	332c      	adds	r3, #44	; 0x2c
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fd fe0a 	bl	800aaf4 <ld_dword>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	647b      	str	r3, [r7, #68]	; 0x44
 800ceee:	e01f      	b.n	800cf30 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	891b      	ldrh	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <find_volume+0x3c8>
 800cef8:	230d      	movs	r3, #13
 800cefa:	e09a      	b.n	800d032 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf02:	441a      	add	r2, r3
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d103      	bne.n	800cf18 <find_volume+0x3e4>
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	e00a      	b.n	800cf2e <find_volume+0x3fa>
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	6a1a      	ldr	r2, [r3, #32]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4413      	add	r3, r2
 800cf22:	085a      	lsrs	r2, r3, #1
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	6a1b      	ldr	r3, [r3, #32]
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	899b      	ldrh	r3, [r3, #12]
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf3c:	440b      	add	r3, r1
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf42:	8989      	ldrh	r1, [r1, #12]
 800cf44:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d201      	bcs.n	800cf50 <find_volume+0x41c>
 800cf4c:	230d      	movs	r3, #13
 800cf4e:	e070      	b.n	800d032 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	f04f 32ff 	mov.w	r2, #4294967295
 800cf56:	619a      	str	r2, [r3, #24]
 800cf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	2280      	movs	r2, #128	; 0x80
 800cf64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d149      	bne.n	800d002 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf70:	333c      	adds	r3, #60	; 0x3c
 800cf72:	3330      	adds	r3, #48	; 0x30
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fd fda5 	bl	800aac4 <ld_word>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d140      	bne.n	800d002 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf82:	3301      	adds	r3, #1
 800cf84:	4619      	mov	r1, r3
 800cf86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf88:	f7fe f84c 	bl	800b024 <move_window>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d137      	bne.n	800d002 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	2200      	movs	r2, #0
 800cf96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	333c      	adds	r3, #60	; 0x3c
 800cf9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd fd8f 	bl	800aac4 <ld_word>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d127      	bne.n	800d002 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	333c      	adds	r3, #60	; 0x3c
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fd fd9c 	bl	800aaf4 <ld_dword>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <find_volume+0x508>)
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d11e      	bne.n	800d002 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	333c      	adds	r3, #60	; 0x3c
 800cfc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fd fd91 	bl	800aaf4 <ld_dword>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	4b1a      	ldr	r3, [pc, #104]	; (800d040 <find_volume+0x50c>)
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d113      	bne.n	800d002 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfdc:	333c      	adds	r3, #60	; 0x3c
 800cfde:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fd fd86 	bl	800aaf4 <ld_dword>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	333c      	adds	r3, #60	; 0x3c
 800cff2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fd fd7c 	bl	800aaf4 <ld_dword>
 800cffc:	4602      	mov	r2, r0
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d004:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d008:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d00a:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <find_volume+0x510>)
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	3301      	adds	r3, #1
 800d010:	b29a      	uxth	r2, r3
 800d012:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <find_volume+0x510>)
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <find_volume+0x510>)
 800d018:	881a      	ldrh	r2, [r3, #0]
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	4a09      	ldr	r2, [pc, #36]	; (800d048 <find_volume+0x514>)
 800d022:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	2200      	movs	r2, #0
 800d028:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d02a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d02c:	f7fd ff92 	bl	800af54 <clear_lock>
#endif
	return FR_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3758      	adds	r7, #88	; 0x58
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	41615252 	.word	0x41615252
 800d040:	61417272 	.word	0x61417272
 800d044:	2000057c 	.word	0x2000057c
 800d048:	200005a0 	.word	0x200005a0

0800d04c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d056:	2309      	movs	r3, #9
 800d058:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d01c      	beq.n	800d09a <validate+0x4e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d018      	beq.n	800d09a <validate+0x4e>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d013      	beq.n	800d09a <validate+0x4e>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	889a      	ldrh	r2, [r3, #4]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	88db      	ldrh	r3, [r3, #6]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d10c      	bne.n	800d09a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	4618      	mov	r0, r3
 800d088:	f7fd fc7e 	bl	800a988 <disk_status>
 800d08c:	4603      	mov	r3, r0
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <validate+0x4e>
			res = FR_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <validate+0x5a>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	e000      	b.n	800d0a8 <validate+0x5c>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	6013      	str	r3, [r2, #0]
	return res;
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0ca:	f107 0310 	add.w	r3, r7, #16
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7ff fc95 	bl	800c9fe <get_ldnumber>
 800d0d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da01      	bge.n	800d0e0 <f_mount+0x28>
 800d0dc:	230b      	movs	r3, #11
 800d0de:	e02b      	b.n	800d138 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d0e0:	4a17      	ldr	r2, [pc, #92]	; (800d140 <f_mount+0x88>)
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d0f0:	69b8      	ldr	r0, [r7, #24]
 800d0f2:	f7fd ff2f 	bl	800af54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	490d      	ldr	r1, [pc, #52]	; (800d140 <f_mount+0x88>)
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <f_mount+0x66>
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d001      	beq.n	800d122 <f_mount+0x6a>
 800d11e:	2300      	movs	r3, #0
 800d120:	e00a      	b.n	800d138 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d122:	f107 010c 	add.w	r1, r7, #12
 800d126:	f107 0308 	add.w	r3, r7, #8
 800d12a:	2200      	movs	r2, #0
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff fd01 	bl	800cb34 <find_volume>
 800d132:	4603      	mov	r3, r0
 800d134:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d136:	7dfb      	ldrb	r3, [r7, #23]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3720      	adds	r7, #32
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	20000578 	.word	0x20000578

0800d144 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b09a      	sub	sp, #104	; 0x68
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	4613      	mov	r3, r2
 800d150:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <f_open+0x18>
 800d158:	2309      	movs	r3, #9
 800d15a:	e1bb      	b.n	800d4d4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d162:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d164:	79fa      	ldrb	r2, [r7, #7]
 800d166:	f107 0114 	add.w	r1, r7, #20
 800d16a:	f107 0308 	add.w	r3, r7, #8
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fce0 	bl	800cb34 <find_volume>
 800d174:	4603      	mov	r3, r0
 800d176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d17a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f040 819f 	bne.w	800d4c2 <f_open+0x37e>
		dj.obj.fs = fs;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	f107 0318 	add.w	r3, r7, #24
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fb9f 	bl	800c8d4 <follow_path>
 800d196:	4603      	mov	r3, r0
 800d198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d19c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d11a      	bne.n	800d1da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d1a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d1a8:	b25b      	sxtb	r3, r3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	da03      	bge.n	800d1b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d1ae:	2306      	movs	r3, #6
 800d1b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d1b4:	e011      	b.n	800d1da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1b6:	79fb      	ldrb	r3, [r7, #7]
 800d1b8:	f023 0301 	bic.w	r3, r3, #1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bf14      	ite	ne
 800d1c0:	2301      	movne	r3, #1
 800d1c2:	2300      	moveq	r3, #0
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f107 0318 	add.w	r3, r7, #24
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fd fd78 	bl	800acc4 <chk_lock>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	f003 031c 	and.w	r3, r3, #28
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d07f      	beq.n	800d2e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d017      	beq.n	800d21c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d1ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	d10e      	bne.n	800d212 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d1f4:	f7fd fdc2 	bl	800ad7c <enq_lock>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <f_open+0xc8>
 800d1fe:	f107 0318 	add.w	r3, r7, #24
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff f820 	bl	800c248 <dir_register>
 800d208:	4603      	mov	r3, r0
 800d20a:	e000      	b.n	800d20e <f_open+0xca>
 800d20c:	2312      	movs	r3, #18
 800d20e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	f043 0308 	orr.w	r3, r3, #8
 800d218:	71fb      	strb	r3, [r7, #7]
 800d21a:	e010      	b.n	800d23e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d21c:	7fbb      	ldrb	r3, [r7, #30]
 800d21e:	f003 0311 	and.w	r3, r3, #17
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <f_open+0xea>
					res = FR_DENIED;
 800d226:	2307      	movs	r3, #7
 800d228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d22c:	e007      	b.n	800d23e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	f003 0304 	and.w	r3, r3, #4
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <f_open+0xfa>
 800d238:	2308      	movs	r3, #8
 800d23a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d23e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d242:	2b00      	cmp	r3, #0
 800d244:	d168      	bne.n	800d318 <f_open+0x1d4>
 800d246:	79fb      	ldrb	r3, [r7, #7]
 800d248:	f003 0308 	and.w	r3, r3, #8
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d063      	beq.n	800d318 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d250:	f7fd f94a 	bl	800a4e8 <get_fattime>
 800d254:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	330e      	adds	r3, #14
 800d25a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fd fc87 	bl	800ab70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d264:	3316      	adds	r3, #22
 800d266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fd fc81 	bl	800ab70 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	330b      	adds	r3, #11
 800d272:	2220      	movs	r2, #32
 800d274:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fc50 	bl	800bb22 <ld_clust>
 800d282:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d288:	2200      	movs	r2, #0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fc68 	bl	800bb60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	331c      	adds	r3, #28
 800d294:	2100      	movs	r1, #0
 800d296:	4618      	mov	r0, r3
 800d298:	f7fd fc6a 	bl	800ab70 <st_dword>
					fs->wflag = 1;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d037      	beq.n	800d318 <f_open+0x1d4>
						dw = fs->winsect;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ac:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d2ae:	f107 0318 	add.w	r3, r7, #24
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe f958 	bl	800b56c <remove_chain>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d2c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d126      	bne.n	800d318 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fd fea8 	bl	800b024 <move_window>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2de:	3a01      	subs	r2, #1
 800d2e0:	615a      	str	r2, [r3, #20]
 800d2e2:	e019      	b.n	800d318 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d2e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d115      	bne.n	800d318 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d2ec:	7fbb      	ldrb	r3, [r7, #30]
 800d2ee:	f003 0310 	and.w	r3, r3, #16
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <f_open+0x1ba>
					res = FR_NO_FILE;
 800d2f6:	2304      	movs	r3, #4
 800d2f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2fc:	e00c      	b.n	800d318 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d007      	beq.n	800d318 <f_open+0x1d4>
 800d308:	7fbb      	ldrb	r3, [r7, #30]
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <f_open+0x1d4>
						res = FR_DENIED;
 800d312:	2307      	movs	r3, #7
 800d314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d318:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d128      	bne.n	800d372 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	f003 0308 	and.w	r3, r3, #8
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d330:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	f023 0301 	bic.w	r3, r3, #1
 800d346:	2b00      	cmp	r3, #0
 800d348:	bf14      	ite	ne
 800d34a:	2301      	movne	r3, #1
 800d34c:	2300      	moveq	r3, #0
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	461a      	mov	r2, r3
 800d352:	f107 0318 	add.w	r3, r7, #24
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fd fd31 	bl	800adc0 <inc_lock>
 800d35e:	4602      	mov	r2, r0
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <f_open+0x22e>
 800d36c:	2302      	movs	r3, #2
 800d36e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d376:	2b00      	cmp	r3, #0
 800d378:	f040 80a3 	bne.w	800d4c2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d380:	4611      	mov	r1, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fbcd 	bl	800bb22 <ld_clust>
 800d388:	4602      	mov	r2, r0
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	331c      	adds	r3, #28
 800d392:	4618      	mov	r0, r3
 800d394:	f7fd fbae 	bl	800aaf4 <ld_dword>
 800d398:	4602      	mov	r2, r0
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	88da      	ldrh	r2, [r3, #6]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	79fa      	ldrb	r2, [r7, #7]
 800d3b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3330      	adds	r3, #48	; 0x30
 800d3ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd fc18 	bl	800ac0a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	f003 0320 	and.w	r3, r3, #32
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d06e      	beq.n	800d4c2 <f_open+0x37e>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d06a      	beq.n	800d4c2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	895b      	ldrh	r3, [r3, #10]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	899b      	ldrh	r3, [r3, #12]
 800d3fe:	fb03 f302 	mul.w	r3, r3, r2
 800d402:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d410:	e016      	b.n	800d440 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd fec1 	bl	800b19e <get_fat>
 800d41c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d41e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d420:	2b01      	cmp	r3, #1
 800d422:	d802      	bhi.n	800d42a <f_open+0x2e6>
 800d424:	2302      	movs	r3, #2
 800d426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d42a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d430:	d102      	bne.n	800d438 <f_open+0x2f4>
 800d432:	2301      	movs	r3, #1
 800d434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d444:	2b00      	cmp	r3, #0
 800d446:	d103      	bne.n	800d450 <f_open+0x30c>
 800d448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d8e0      	bhi.n	800d412 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d454:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d456:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d131      	bne.n	800d4c2 <f_open+0x37e>
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	899b      	ldrh	r3, [r3, #12]
 800d462:	461a      	mov	r2, r3
 800d464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d466:	fbb3 f1f2 	udiv	r1, r3, r2
 800d46a:	fb02 f201 	mul.w	r2, r2, r1
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	2b00      	cmp	r3, #0
 800d472:	d026      	beq.n	800d4c2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fd fe71 	bl	800b160 <clust2sect>
 800d47e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <f_open+0x34a>
						res = FR_INT_ERR;
 800d486:	2302      	movs	r3, #2
 800d488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d48c:	e019      	b.n	800d4c2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	899b      	ldrh	r3, [r3, #12]
 800d492:	461a      	mov	r2, r3
 800d494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d496:	fbb3 f2f2 	udiv	r2, r3, r2
 800d49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d49c:	441a      	add	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	7858      	ldrb	r0, [r3, #1]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6a1a      	ldr	r2, [r3, #32]
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	f7fd faa9 	bl	800aa08 <disk_read>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <f_open+0x37e>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d4c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <f_open+0x38c>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d4d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3768      	adds	r7, #104	; 0x68
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08e      	sub	sp, #56	; 0x38
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
 800d4e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f107 0214 	add.w	r2, r7, #20
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff fda5 	bl	800d04c <validate>
 800d502:	4603      	mov	r3, r0
 800d504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d107      	bne.n	800d520 <f_read+0x44>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	7d5b      	ldrb	r3, [r3, #21]
 800d514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <f_read+0x4a>
 800d520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d524:	e135      	b.n	800d792 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	7d1b      	ldrb	r3, [r3, #20]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <f_read+0x5a>
 800d532:	2307      	movs	r3, #7
 800d534:	e12d      	b.n	800d792 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68da      	ldr	r2, [r3, #12]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	429a      	cmp	r2, r3
 800d548:	f240 811e 	bls.w	800d788 <f_read+0x2ac>
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d550:	e11a      	b.n	800d788 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	8992      	ldrh	r2, [r2, #12]
 800d55a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d55e:	fb02 f201 	mul.w	r2, r2, r1
 800d562:	1a9b      	subs	r3, r3, r2
 800d564:	2b00      	cmp	r3, #0
 800d566:	f040 80d5 	bne.w	800d714 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	8992      	ldrh	r2, [r2, #12]
 800d572:	fbb3 f3f2 	udiv	r3, r3, r2
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	8952      	ldrh	r2, [r2, #10]
 800d57a:	3a01      	subs	r2, #1
 800d57c:	4013      	ands	r3, r2
 800d57e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d12f      	bne.n	800d5e6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d103      	bne.n	800d596 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	633b      	str	r3, [r7, #48]	; 0x30
 800d594:	e013      	b.n	800d5be <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	699b      	ldr	r3, [r3, #24]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7fe f8de 	bl	800b766 <clmt_clust>
 800d5aa:	6338      	str	r0, [r7, #48]	; 0x30
 800d5ac:	e007      	b.n	800d5be <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	69db      	ldr	r3, [r3, #28]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f7fd fdf1 	bl	800b19e <get_fat>
 800d5bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d804      	bhi.n	800d5ce <f_read+0xf2>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	755a      	strb	r2, [r3, #21]
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	e0e1      	b.n	800d792 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d4:	d104      	bne.n	800d5e0 <f_read+0x104>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	755a      	strb	r2, [r3, #21]
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e0d8      	b.n	800d792 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	69db      	ldr	r3, [r3, #28]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	f7fd fdb6 	bl	800b160 <clust2sect>
 800d5f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d104      	bne.n	800d606 <f_read+0x12a>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2202      	movs	r2, #2
 800d600:	755a      	strb	r2, [r3, #21]
 800d602:	2302      	movs	r3, #2
 800d604:	e0c5      	b.n	800d792 <f_read+0x2b6>
			sect += csect;
 800d606:	69ba      	ldr	r2, [r7, #24]
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	4413      	add	r3, r2
 800d60c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	899b      	ldrh	r3, [r3, #12]
 800d612:	461a      	mov	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	fbb3 f3f2 	udiv	r3, r3, r2
 800d61a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d041      	beq.n	800d6a6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d622:	69fa      	ldr	r2, [r7, #28]
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	4413      	add	r3, r2
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	8952      	ldrh	r2, [r2, #10]
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d905      	bls.n	800d63c <f_read+0x160>
					cc = fs->csize - csect;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	895b      	ldrh	r3, [r3, #10]
 800d634:	461a      	mov	r2, r3
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	7858      	ldrb	r0, [r3, #1]
 800d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d642:	69ba      	ldr	r2, [r7, #24]
 800d644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d646:	f7fd f9df 	bl	800aa08 <disk_read>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d004      	beq.n	800d65a <f_read+0x17e>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2201      	movs	r2, #1
 800d654:	755a      	strb	r2, [r3, #21]
 800d656:	2301      	movs	r3, #1
 800d658:	e09b      	b.n	800d792 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	7d1b      	ldrb	r3, [r3, #20]
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	2b00      	cmp	r3, #0
 800d662:	da18      	bge.n	800d696 <f_read+0x1ba>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a1a      	ldr	r2, [r3, #32]
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d66e:	429a      	cmp	r2, r3
 800d670:	d911      	bls.n	800d696 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6a1a      	ldr	r2, [r3, #32]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	697a      	ldr	r2, [r7, #20]
 800d67c:	8992      	ldrh	r2, [r2, #12]
 800d67e:	fb02 f303 	mul.w	r3, r2, r3
 800d682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d684:	18d0      	adds	r0, r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	899b      	ldrh	r3, [r3, #12]
 800d690:	461a      	mov	r2, r3
 800d692:	f7fd fa99 	bl	800abc8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	461a      	mov	r2, r3
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69e:	fb02 f303 	mul.w	r3, r2, r3
 800d6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d6a4:	e05c      	b.n	800d760 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a1b      	ldr	r3, [r3, #32]
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d02e      	beq.n	800d70e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	7d1b      	ldrb	r3, [r3, #20]
 800d6b4:	b25b      	sxtb	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	da18      	bge.n	800d6ec <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	7858      	ldrb	r0, [r3, #1]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6a1a      	ldr	r2, [r3, #32]
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f7fd f9bd 	bl	800aa48 <disk_write>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <f_read+0x202>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	755a      	strb	r2, [r3, #21]
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e059      	b.n	800d792 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	7d1b      	ldrb	r3, [r3, #20]
 800d6e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	7858      	ldrb	r0, [r3, #1]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	69ba      	ldr	r2, [r7, #24]
 800d6fa:	f7fd f985 	bl	800aa08 <disk_read>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d004      	beq.n	800d70e <f_read+0x232>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2201      	movs	r2, #1
 800d708:	755a      	strb	r2, [r3, #21]
 800d70a:	2301      	movs	r3, #1
 800d70c:	e041      	b.n	800d792 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	899b      	ldrh	r3, [r3, #12]
 800d718:	4618      	mov	r0, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	8992      	ldrh	r2, [r2, #12]
 800d722:	fbb3 f1f2 	udiv	r1, r3, r2
 800d726:	fb02 f201 	mul.w	r2, r2, r1
 800d72a:	1a9b      	subs	r3, r3, r2
 800d72c:	1ac3      	subs	r3, r0, r3
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	429a      	cmp	r2, r3
 800d736:	d901      	bls.n	800d73c <f_read+0x260>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	8992      	ldrh	r2, [r2, #12]
 800d74a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d74e:	fb02 f200 	mul.w	r2, r2, r0
 800d752:	1a9b      	subs	r3, r3, r2
 800d754:	440b      	add	r3, r1
 800d756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d758:	4619      	mov	r1, r3
 800d75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d75c:	f7fd fa34 	bl	800abc8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	4413      	add	r3, r2
 800d766:	627b      	str	r3, [r7, #36]	; 0x24
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	699a      	ldr	r2, [r3, #24]
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	441a      	add	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	619a      	str	r2, [r3, #24]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	441a      	add	r2, r3
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f47f aee1 	bne.w	800d552 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3738      	adds	r7, #56	; 0x38
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b08c      	sub	sp, #48	; 0x30
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	607a      	str	r2, [r7, #4]
 800d7a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f107 0210 	add.w	r2, r7, #16
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fc46 	bl	800d04c <validate>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d7c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d107      	bne.n	800d7de <f_write+0x44>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	7d5b      	ldrb	r3, [r3, #21]
 800d7d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <f_write+0x4a>
 800d7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e2:	e16a      	b.n	800daba <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	7d1b      	ldrb	r3, [r3, #20]
 800d7e8:	f003 0302 	and.w	r3, r3, #2
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d101      	bne.n	800d7f4 <f_write+0x5a>
 800d7f0:	2307      	movs	r3, #7
 800d7f2:	e162      	b.n	800daba <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	699a      	ldr	r2, [r3, #24]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	441a      	add	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	429a      	cmp	r2, r3
 800d802:	f080 814c 	bcs.w	800da9e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	43db      	mvns	r3, r3
 800d80c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d80e:	e146      	b.n	800da9e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	8992      	ldrh	r2, [r2, #12]
 800d818:	fbb3 f1f2 	udiv	r1, r3, r2
 800d81c:	fb02 f201 	mul.w	r2, r2, r1
 800d820:	1a9b      	subs	r3, r3, r2
 800d822:	2b00      	cmp	r3, #0
 800d824:	f040 80f1 	bne.w	800da0a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	8992      	ldrh	r2, [r2, #12]
 800d830:	fbb3 f3f2 	udiv	r3, r3, r2
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	8952      	ldrh	r2, [r2, #10]
 800d838:	3a01      	subs	r2, #1
 800d83a:	4013      	ands	r3, r2
 800d83c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d143      	bne.n	800d8cc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	699b      	ldr	r3, [r3, #24]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10c      	bne.n	800d866 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11a      	bne.n	800d88e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2100      	movs	r1, #0
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fd feea 	bl	800b636 <create_chain>
 800d862:	62b8      	str	r0, [r7, #40]	; 0x28
 800d864:	e013      	b.n	800d88e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d007      	beq.n	800d87e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	4619      	mov	r1, r3
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f7fd ff76 	bl	800b766 <clmt_clust>
 800d87a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d87c:	e007      	b.n	800d88e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	69db      	ldr	r3, [r3, #28]
 800d884:	4619      	mov	r1, r3
 800d886:	4610      	mov	r0, r2
 800d888:	f7fd fed5 	bl	800b636 <create_chain>
 800d88c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 8109 	beq.w	800daa8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d104      	bne.n	800d8a6 <f_write+0x10c>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	755a      	strb	r2, [r3, #21]
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	e109      	b.n	800daba <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d104      	bne.n	800d8b8 <f_write+0x11e>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	755a      	strb	r2, [r3, #21]
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e100      	b.n	800daba <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8bc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d102      	bne.n	800d8cc <f_write+0x132>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
 800d8d0:	b25b      	sxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	da18      	bge.n	800d908 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	7858      	ldrb	r0, [r3, #1]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6a1a      	ldr	r2, [r3, #32]
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	f7fd f8af 	bl	800aa48 <disk_write>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d004      	beq.n	800d8fa <f_write+0x160>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	755a      	strb	r2, [r3, #21]
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e0df      	b.n	800daba <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	7d1b      	ldrb	r3, [r3, #20]
 800d8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d902:	b2da      	uxtb	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	4619      	mov	r1, r3
 800d910:	4610      	mov	r0, r2
 800d912:	f7fd fc25 	bl	800b160 <clust2sect>
 800d916:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d104      	bne.n	800d928 <f_write+0x18e>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2202      	movs	r2, #2
 800d922:	755a      	strb	r2, [r3, #21]
 800d924:	2302      	movs	r3, #2
 800d926:	e0c8      	b.n	800daba <f_write+0x320>
			sect += csect;
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	4413      	add	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	899b      	ldrh	r3, [r3, #12]
 800d934:	461a      	mov	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	fbb3 f3f2 	udiv	r3, r3, r2
 800d93c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d043      	beq.n	800d9cc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	4413      	add	r3, r2
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	8952      	ldrh	r2, [r2, #10]
 800d94e:	4293      	cmp	r3, r2
 800d950:	d905      	bls.n	800d95e <f_write+0x1c4>
					cc = fs->csize - csect;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	895b      	ldrh	r3, [r3, #10]
 800d956:	461a      	mov	r2, r3
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	7858      	ldrb	r0, [r3, #1]
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	69f9      	ldr	r1, [r7, #28]
 800d968:	f7fd f86e 	bl	800aa48 <disk_write>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d004      	beq.n	800d97c <f_write+0x1e2>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2201      	movs	r2, #1
 800d976:	755a      	strb	r2, [r3, #21]
 800d978:	2301      	movs	r3, #1
 800d97a:	e09e      	b.n	800daba <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6a1a      	ldr	r2, [r3, #32]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	6a3a      	ldr	r2, [r7, #32]
 800d986:	429a      	cmp	r2, r3
 800d988:	d918      	bls.n	800d9bc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6a1a      	ldr	r2, [r3, #32]
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	8992      	ldrh	r2, [r2, #12]
 800d99c:	fb02 f303 	mul.w	r3, r2, r3
 800d9a0:	69fa      	ldr	r2, [r7, #28]
 800d9a2:	18d1      	adds	r1, r2, r3
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	899b      	ldrh	r3, [r3, #12]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	f7fd f90d 	bl	800abc8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	7d1b      	ldrb	r3, [r3, #20]
 800d9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	899b      	ldrh	r3, [r3, #12]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	fb02 f303 	mul.w	r3, r2, r3
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d9ca:	e04b      	b.n	800da64 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d016      	beq.n	800da04 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	699a      	ldr	r2, [r3, #24]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d210      	bcs.n	800da04 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	7858      	ldrb	r0, [r3, #1]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	f7fd f80a 	bl	800aa08 <disk_read>
 800d9f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	755a      	strb	r2, [r3, #21]
 800da00:	2301      	movs	r3, #1
 800da02:	e05a      	b.n	800daba <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	899b      	ldrh	r3, [r3, #12]
 800da0e:	4618      	mov	r0, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	8992      	ldrh	r2, [r2, #12]
 800da18:	fbb3 f1f2 	udiv	r1, r3, r2
 800da1c:	fb02 f201 	mul.w	r2, r2, r1
 800da20:	1a9b      	subs	r3, r3, r2
 800da22:	1ac3      	subs	r3, r0, r3
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800da26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d901      	bls.n	800da32 <f_write+0x298>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	8992      	ldrh	r2, [r2, #12]
 800da40:	fbb3 f0f2 	udiv	r0, r3, r2
 800da44:	fb02 f200 	mul.w	r2, r2, r0
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	440b      	add	r3, r1
 800da4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da4e:	69f9      	ldr	r1, [r7, #28]
 800da50:	4618      	mov	r0, r3
 800da52:	f7fd f8b9 	bl	800abc8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	7d1b      	ldrb	r3, [r3, #20]
 800da5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800da64:	69fa      	ldr	r2, [r7, #28]
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	4413      	add	r3, r2
 800da6a:	61fb      	str	r3, [r7, #28]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	699a      	ldr	r2, [r3, #24]
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	441a      	add	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	619a      	str	r2, [r3, #24]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	68da      	ldr	r2, [r3, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	429a      	cmp	r2, r3
 800da82:	bf38      	it	cc
 800da84:	461a      	movcc	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	60da      	str	r2, [r3, #12]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	441a      	add	r2, r3
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f47f aeb5 	bne.w	800d810 <f_write+0x76>
 800daa6:	e000      	b.n	800daaa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800daa8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	7d1b      	ldrb	r3, [r3, #20]
 800daae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3730      	adds	r7, #48	; 0x30
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b086      	sub	sp, #24
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f107 0208 	add.w	r2, r7, #8
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff faba 	bl	800d04c <validate>
 800dad8:	4603      	mov	r3, r0
 800dada:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d168      	bne.n	800dbb4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7d1b      	ldrb	r3, [r3, #20]
 800dae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daea:	2b00      	cmp	r3, #0
 800daec:	d062      	beq.n	800dbb4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7d1b      	ldrb	r3, [r3, #20]
 800daf2:	b25b      	sxtb	r3, r3
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	da15      	bge.n	800db24 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	7858      	ldrb	r0, [r3, #1]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a1a      	ldr	r2, [r3, #32]
 800db06:	2301      	movs	r3, #1
 800db08:	f7fc ff9e 	bl	800aa48 <disk_write>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <f_sync+0x54>
 800db12:	2301      	movs	r3, #1
 800db14:	e04f      	b.n	800dbb6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	7d1b      	ldrb	r3, [r3, #20]
 800db1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db24:	f7fc fce0 	bl	800a4e8 <get_fattime>
 800db28:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fd fa76 	bl	800b024 <move_window>
 800db38:	4603      	mov	r3, r0
 800db3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d138      	bne.n	800dbb4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	330b      	adds	r3, #11
 800db4c:	781a      	ldrb	r2, [r3, #0]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	330b      	adds	r3, #11
 800db52:	f042 0220 	orr.w	r2, r2, #32
 800db56:	b2d2      	uxtb	r2, r2
 800db58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6818      	ldr	r0, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	461a      	mov	r2, r3
 800db64:	68f9      	ldr	r1, [r7, #12]
 800db66:	f7fd fffb 	bl	800bb60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f103 021c 	add.w	r2, r3, #28
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	4619      	mov	r1, r3
 800db76:	4610      	mov	r0, r2
 800db78:	f7fc fffa 	bl	800ab70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3316      	adds	r3, #22
 800db80:	6939      	ldr	r1, [r7, #16]
 800db82:	4618      	mov	r0, r3
 800db84:	f7fc fff4 	bl	800ab70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3312      	adds	r3, #18
 800db8c:	2100      	movs	r1, #0
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fc ffd3 	bl	800ab3a <st_word>
					fs->wflag = 1;
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2201      	movs	r2, #1
 800db98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fd fa6f 	bl	800b080 <sync_fs>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	7d1b      	ldrb	r3, [r3, #20]
 800dbaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dbb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff ff7b 	bl	800dac2 <f_sync>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d118      	bne.n	800dc08 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f107 0208 	add.w	r2, r7, #8
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff fa34 	bl	800d04c <validate>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10c      	bne.n	800dc08 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	691b      	ldr	r3, [r3, #16]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fd f972 	bl	800aedc <dec_lock>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800dc12:	b590      	push	{r4, r7, lr}
 800dc14:	b093      	sub	sp, #76	; 0x4c
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800dc1a:	f107 010c 	add.w	r1, r7, #12
 800dc1e:	1d3b      	adds	r3, r7, #4
 800dc20:	2200      	movs	r2, #0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe ff86 	bl	800cb34 <find_volume>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800dc2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d131      	bne.n	800dc9a <f_chdir+0x88>
		dj.obj.fs = fs;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	f107 0310 	add.w	r3, r7, #16
 800dc40:	4611      	mov	r1, r2
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fe46 	bl	800c8d4 <follow_path>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800dc4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d11a      	bne.n	800dc8c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dc56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc5a:	b25b      	sxtb	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	da03      	bge.n	800dc68 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	69ba      	ldr	r2, [r7, #24]
 800dc64:	61da      	str	r2, [r3, #28]
 800dc66:	e011      	b.n	800dc8c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800dc68:	7dbb      	ldrb	r3, [r7, #22]
 800dc6a:	f003 0310 	and.w	r3, r3, #16
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d009      	beq.n	800dc86 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc76:	68fc      	ldr	r4, [r7, #12]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd ff51 	bl	800bb22 <ld_clust>
 800dc80:	4603      	mov	r3, r0
 800dc82:	61e3      	str	r3, [r4, #28]
 800dc84:	e002      	b.n	800dc8c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800dc86:	2305      	movs	r3, #5
 800dc88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dc8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	d102      	bne.n	800dc9a <f_chdir+0x88>
 800dc94:	2305      	movs	r3, #5
 800dc96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800dc9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	374c      	adds	r7, #76	; 0x4c
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd90      	pop	{r4, r7, pc}

0800dca6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b090      	sub	sp, #64	; 0x40
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f107 0208 	add.w	r2, r7, #8
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff f9c7 	bl	800d04c <validate>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dcc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d103      	bne.n	800dcd4 <f_lseek+0x2e>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	7d5b      	ldrb	r3, [r3, #21]
 800dcd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dcd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <f_lseek+0x3c>
 800dcdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dce0:	e201      	b.n	800e0e6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f000 80d9 	beq.w	800de9e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf2:	d15a      	bne.n	800ddaa <f_lseek+0x104>
			tbl = fp->cltbl;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	1d1a      	adds	r2, r3, #4
 800dcfe:	627a      	str	r2, [r7, #36]	; 0x24
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	2302      	movs	r3, #2
 800dd06:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d03a      	beq.n	800dd8a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd16:	613b      	str	r3, [r7, #16]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	3302      	adds	r3, #2
 800dd20:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd24:	60fb      	str	r3, [r7, #12]
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	3301      	adds	r3, #1
 800dd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd fa34 	bl	800b19e <get_fat>
 800dd36:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d804      	bhi.n	800dd48 <f_lseek+0xa2>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2202      	movs	r2, #2
 800dd42:	755a      	strb	r2, [r3, #21]
 800dd44:	2302      	movs	r3, #2
 800dd46:	e1ce      	b.n	800e0e6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4e:	d104      	bne.n	800dd5a <f_lseek+0xb4>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	755a      	strb	r2, [r3, #21]
 800dd56:	2301      	movs	r3, #1
 800dd58:	e1c5      	b.n	800e0e6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d0de      	beq.n	800dd22 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d809      	bhi.n	800dd80 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	1d1a      	adds	r2, r3, #4
 800dd70:	627a      	str	r2, [r7, #36]	; 0x24
 800dd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	1d1a      	adds	r2, r3, #4
 800dd7a:	627a      	str	r2, [r7, #36]	; 0x24
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	6a1b      	ldr	r3, [r3, #32]
 800dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d3c4      	bcc.n	800dd14 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd90:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d803      	bhi.n	800dda2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	e19f      	b.n	800e0e2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dda2:	2311      	movs	r3, #17
 800dda4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dda8:	e19b      	b.n	800e0e2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d902      	bls.n	800ddba <f_lseek+0x114>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 818d 	beq.w	800e0e2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7fd fcc9 	bl	800b766 <clmt_clust>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	69db      	ldr	r3, [r3, #28]
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7fd f9bc 	bl	800b160 <clust2sect>
 800dde8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d104      	bne.n	800ddfa <f_lseek+0x154>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	755a      	strb	r2, [r3, #21]
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	e175      	b.n	800e0e6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	8992      	ldrh	r2, [r2, #12]
 800de02:	fbb3 f3f2 	udiv	r3, r3, r2
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	8952      	ldrh	r2, [r2, #10]
 800de0a:	3a01      	subs	r2, #1
 800de0c:	4013      	ands	r3, r2
 800de0e:	69ba      	ldr	r2, [r7, #24]
 800de10:	4413      	add	r3, r2
 800de12:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	8992      	ldrh	r2, [r2, #12]
 800de1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800de20:	fb02 f201 	mul.w	r2, r2, r1
 800de24:	1a9b      	subs	r3, r3, r2
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 815b 	beq.w	800e0e2 <f_lseek+0x43c>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a1b      	ldr	r3, [r3, #32]
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	429a      	cmp	r2, r3
 800de34:	f000 8155 	beq.w	800e0e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7d1b      	ldrb	r3, [r3, #20]
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da18      	bge.n	800de74 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	7858      	ldrb	r0, [r3, #1]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a1a      	ldr	r2, [r3, #32]
 800de50:	2301      	movs	r3, #1
 800de52:	f7fc fdf9 	bl	800aa48 <disk_write>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <f_lseek+0x1c0>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	755a      	strb	r2, [r3, #21]
 800de62:	2301      	movs	r3, #1
 800de64:	e13f      	b.n	800e0e6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7d1b      	ldrb	r3, [r3, #20]
 800de6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	7858      	ldrb	r0, [r3, #1]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de7e:	2301      	movs	r3, #1
 800de80:	69ba      	ldr	r2, [r7, #24]
 800de82:	f7fc fdc1 	bl	800aa08 <disk_read>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d004      	beq.n	800de96 <f_lseek+0x1f0>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	755a      	strb	r2, [r3, #21]
 800de92:	2301      	movs	r3, #1
 800de94:	e127      	b.n	800e0e6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	621a      	str	r2, [r3, #32]
 800de9c:	e121      	b.n	800e0e2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d908      	bls.n	800deba <f_lseek+0x214>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	f003 0302 	and.w	r3, r3, #2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	637b      	str	r3, [r7, #52]	; 0x34
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dec8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 80b5 	beq.w	800e03c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	895b      	ldrh	r3, [r3, #10]
 800ded6:	461a      	mov	r2, r3
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	899b      	ldrh	r3, [r3, #12]
 800dedc:	fb03 f302 	mul.w	r3, r3, r2
 800dee0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d01b      	beq.n	800df20 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	1e5a      	subs	r2, r3, #1
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	fbb2 f2f3 	udiv	r2, r2, r3
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	1e59      	subs	r1, r3, #1
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800defc:	429a      	cmp	r2, r3
 800defe:	d30f      	bcc.n	800df20 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	1e5a      	subs	r2, r3, #1
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	425b      	negs	r3, r3
 800df08:	401a      	ands	r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	69db      	ldr	r3, [r3, #28]
 800df1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800df1e:	e022      	b.n	800df66 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800df26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d119      	bne.n	800df60 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2100      	movs	r1, #0
 800df30:	4618      	mov	r0, r3
 800df32:	f7fd fb80 	bl	800b636 <create_chain>
 800df36:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d104      	bne.n	800df48 <f_lseek+0x2a2>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2202      	movs	r2, #2
 800df42:	755a      	strb	r2, [r3, #21]
 800df44:	2302      	movs	r3, #2
 800df46:	e0ce      	b.n	800e0e6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4e:	d104      	bne.n	800df5a <f_lseek+0x2b4>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	755a      	strb	r2, [r3, #21]
 800df56:	2301      	movs	r3, #1
 800df58:	e0c5      	b.n	800e0e6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df64:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d067      	beq.n	800e03c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800df6c:	e03a      	b.n	800dfe4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	699a      	ldr	r2, [r3, #24]
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	441a      	add	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	7d1b      	ldrb	r3, [r3, #20]
 800df86:	f003 0302 	and.w	r3, r3, #2
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00b      	beq.n	800dfa6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df92:	4618      	mov	r0, r3
 800df94:	f7fd fb4f 	bl	800b636 <create_chain>
 800df98:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d108      	bne.n	800dfb2 <f_lseek+0x30c>
							ofs = 0; break;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	603b      	str	r3, [r7, #0]
 800dfa4:	e022      	b.n	800dfec <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fd f8f7 	bl	800b19e <get_fat>
 800dfb0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb8:	d104      	bne.n	800dfc4 <f_lseek+0x31e>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	755a      	strb	r2, [r3, #21]
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e090      	b.n	800e0e6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d904      	bls.n	800dfd4 <f_lseek+0x32e>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d304      	bcc.n	800dfde <f_lseek+0x338>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	755a      	strb	r2, [r3, #21]
 800dfda:	2302      	movs	r3, #2
 800dfdc:	e083      	b.n	800e0e6 <f_lseek+0x440>
					fp->clust = clst;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfe2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dfe4:	683a      	ldr	r2, [r7, #0]
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d8c0      	bhi.n	800df6e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	699a      	ldr	r2, [r3, #24]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	441a      	add	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	899b      	ldrh	r3, [r3, #12]
 800dffc:	461a      	mov	r2, r3
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	fbb3 f1f2 	udiv	r1, r3, r2
 800e004:	fb02 f201 	mul.w	r2, r2, r1
 800e008:	1a9b      	subs	r3, r3, r2
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d016      	beq.n	800e03c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e012:	4618      	mov	r0, r3
 800e014:	f7fd f8a4 	bl	800b160 <clust2sect>
 800e018:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d104      	bne.n	800e02a <f_lseek+0x384>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2202      	movs	r2, #2
 800e024:	755a      	strb	r2, [r3, #21]
 800e026:	2302      	movs	r3, #2
 800e028:	e05d      	b.n	800e0e6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	899b      	ldrh	r3, [r3, #12]
 800e02e:	461a      	mov	r2, r3
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	fbb3 f3f2 	udiv	r3, r3, r2
 800e036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e038:	4413      	add	r3, r2
 800e03a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	699a      	ldr	r2, [r3, #24]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	429a      	cmp	r2, r3
 800e046:	d90a      	bls.n	800e05e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699a      	ldr	r2, [r3, #24]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7d1b      	ldrb	r3, [r3, #20]
 800e054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	8992      	ldrh	r2, [r2, #12]
 800e066:	fbb3 f1f2 	udiv	r1, r3, r2
 800e06a:	fb02 f201 	mul.w	r2, r2, r1
 800e06e:	1a9b      	subs	r3, r3, r2
 800e070:	2b00      	cmp	r3, #0
 800e072:	d036      	beq.n	800e0e2 <f_lseek+0x43c>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d031      	beq.n	800e0e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	7d1b      	ldrb	r3, [r3, #20]
 800e082:	b25b      	sxtb	r3, r3
 800e084:	2b00      	cmp	r3, #0
 800e086:	da18      	bge.n	800e0ba <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	7858      	ldrb	r0, [r3, #1]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a1a      	ldr	r2, [r3, #32]
 800e096:	2301      	movs	r3, #1
 800e098:	f7fc fcd6 	bl	800aa48 <disk_write>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d004      	beq.n	800e0ac <f_lseek+0x406>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	755a      	strb	r2, [r3, #21]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e01c      	b.n	800e0e6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	7d1b      	ldrb	r3, [r3, #20]
 800e0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	7858      	ldrb	r0, [r3, #1]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0c8:	f7fc fc9e 	bl	800aa08 <disk_read>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d004      	beq.n	800e0dc <f_lseek+0x436>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	755a      	strb	r2, [r3, #21]
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e004      	b.n	800e0e6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0e0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e0e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3740      	adds	r7, #64	; 0x40
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b0a0      	sub	sp, #128	; 0x80
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e0fa:	f107 010c 	add.w	r1, r7, #12
 800e0fe:	1d3b      	adds	r3, r7, #4
 800e100:	2202      	movs	r2, #2
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe fd16 	bl	800cb34 <find_volume>
 800e108:	4603      	mov	r3, r0
 800e10a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800e112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e116:	2b00      	cmp	r3, #0
 800e118:	f040 80a4 	bne.w	800e264 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fbd5 	bl	800c8d4 <follow_path>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800e130:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e134:	2b00      	cmp	r3, #0
 800e136:	d108      	bne.n	800e14a <f_unlink+0x5c>
 800e138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e13c:	f003 0320 	and.w	r3, r3, #32
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800e144:	2306      	movs	r3, #6
 800e146:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800e14a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d108      	bne.n	800e164 <f_unlink+0x76>
 800e152:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e156:	2102      	movs	r1, #2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fc fdb3 	bl	800acc4 <chk_lock>
 800e15e:	4603      	mov	r3, r0
 800e160:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800e164:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d17b      	bne.n	800e264 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e16c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e170:	b25b      	sxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	da03      	bge.n	800e17e <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800e176:	2306      	movs	r3, #6
 800e178:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e17c:	e008      	b.n	800e190 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800e17e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800e18a:	2307      	movs	r3, #7
 800e18c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800e190:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e194:	2b00      	cmp	r3, #0
 800e196:	d13d      	bne.n	800e214 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fd fcbf 	bl	800bb22 <ld_clust>
 800e1a4:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800e1a6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800e1aa:	f003 0310 	and.w	r3, r3, #16
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d030      	beq.n	800e214 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d103      	bne.n	800e1c4 <f_unlink+0xd6>
						res = FR_DENIED;
 800e1bc:	2307      	movs	r3, #7
 800e1be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e1c2:	e027      	b.n	800e214 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800e1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1ca:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800e1cc:	f107 0310 	add.w	r3, r7, #16
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fd faff 	bl	800b7d6 <dir_sdi>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800e1de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d116      	bne.n	800e214 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800e1e6:	f107 0310 	add.w	r3, r7, #16
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fd fec3 	bl	800bf78 <dir_read>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800e1f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <f_unlink+0x118>
 800e200:	2307      	movs	r3, #7
 800e202:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800e206:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d102      	bne.n	800e214 <f_unlink+0x126>
 800e20e:	2300      	movs	r3, #0
 800e210:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800e214:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d123      	bne.n	800e264 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800e21c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe f909 	bl	800c438 <dir_remove>
 800e226:	4603      	mov	r3, r0
 800e228:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800e22c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10c      	bne.n	800e24e <f_unlink+0x160>
 800e234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e236:	2b00      	cmp	r3, #0
 800e238:	d009      	beq.n	800e24e <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800e23a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e23e:	2200      	movs	r2, #0
 800e240:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e242:	4618      	mov	r0, r3
 800e244:	f7fd f992 	bl	800b56c <remove_chain>
 800e248:	4603      	mov	r3, r0
 800e24a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800e24e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <f_unlink+0x176>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fc ff11 	bl	800b080 <sync_fs>
 800e25e:	4603      	mov	r3, r0
 800e260:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e264:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3780      	adds	r7, #128	; 0x80
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b098      	sub	sp, #96	; 0x60
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e278:	f107 010c 	add.w	r1, r7, #12
 800e27c:	1d3b      	adds	r3, r7, #4
 800e27e:	2202      	movs	r2, #2
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe fc57 	bl	800cb34 <find_volume>
 800e286:	4603      	mov	r3, r0
 800e288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800e290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e294:	2b00      	cmp	r3, #0
 800e296:	f040 80ff 	bne.w	800e498 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	f107 0310 	add.w	r3, r7, #16
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fb16 	bl	800c8d4 <follow_path>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e2ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d102      	bne.n	800e2bc <f_mkdir+0x4c>
 800e2b6:	2308      	movs	r3, #8
 800e2b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800e2bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2c0:	2b04      	cmp	r3, #4
 800e2c2:	d108      	bne.n	800e2d6 <f_mkdir+0x66>
 800e2c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2c8:	f003 0320 	and.w	r3, r3, #32
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800e2d0:	2306      	movs	r3, #6
 800e2d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2da:	2b04      	cmp	r3, #4
 800e2dc:	f040 80dc 	bne.w	800e498 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e2e0:	f107 0310 	add.w	r3, r7, #16
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fd f9a5 	bl	800b636 <create_chain>
 800e2ec:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	895b      	ldrh	r3, [r3, #10]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	899b      	ldrh	r3, [r3, #12]
 800e2f8:	fb03 f302 	mul.w	r3, r3, r2
 800e2fc:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d102      	bne.n	800e310 <f_mkdir+0xa0>
 800e30a:	2307      	movs	r3, #7
 800e30c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800e310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e312:	2b01      	cmp	r3, #1
 800e314:	d102      	bne.n	800e31c <f_mkdir+0xac>
 800e316:	2302      	movs	r3, #2
 800e318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e322:	d102      	bne.n	800e32a <f_mkdir+0xba>
 800e324:	2301      	movs	r3, #1
 800e326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e32a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <f_mkdir+0xd0>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4618      	mov	r0, r3
 800e336:	f7fc fe31 	bl	800af9c <sync_window>
 800e33a:	4603      	mov	r3, r0
 800e33c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800e340:	f7fc f8d2 	bl	800a4e8 <get_fattime>
 800e344:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800e346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d16c      	bne.n	800e428 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e352:	4618      	mov	r0, r3
 800e354:	f7fc ff04 	bl	800b160 <clust2sect>
 800e358:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	333c      	adds	r3, #60	; 0x3c
 800e35e:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	899b      	ldrh	r3, [r3, #12]
 800e364:	461a      	mov	r2, r3
 800e366:	2100      	movs	r1, #0
 800e368:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e36a:	f7fc fc4e 	bl	800ac0a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800e36e:	220b      	movs	r2, #11
 800e370:	2120      	movs	r1, #32
 800e372:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e374:	f7fc fc49 	bl	800ac0a <mem_set>
					dir[DIR_Name] = '.';
 800e378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e37a:	222e      	movs	r2, #46	; 0x2e
 800e37c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800e37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e380:	330b      	adds	r3, #11
 800e382:	2210      	movs	r2, #16
 800e384:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800e386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e388:	3316      	adds	r3, #22
 800e38a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fc fbef 	bl	800ab70 <st_dword>
					st_clust(fs, dir, dcl);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fd fbe1 	bl	800bb60 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800e39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a0:	3320      	adds	r3, #32
 800e3a2:	2220      	movs	r2, #32
 800e3a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fc fc0e 	bl	800abc8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800e3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3ae:	3321      	adds	r3, #33	; 0x21
 800e3b0:	222e      	movs	r2, #46	; 0x2e
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d106      	bne.n	800e3ce <f_mkdir+0x15e>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d101      	bne.n	800e3ce <f_mkdir+0x15e>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d2:	3320      	adds	r3, #32
 800e3d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	f7fd fbc2 	bl	800bb60 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	895b      	ldrh	r3, [r3, #10]
 800e3e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3e2:	e01c      	b.n	800e41e <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800e3e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	657a      	str	r2, [r7, #84]	; 0x54
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fdd0 	bl	800af9c <sync_window>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800e402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10d      	bne.n	800e426 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	899b      	ldrh	r3, [r3, #12]
 800e40e:	461a      	mov	r2, r3
 800e410:	2100      	movs	r1, #0
 800e412:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e414:	f7fc fbf9 	bl	800ac0a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e41a:	3b01      	subs	r3, #1
 800e41c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e41e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1df      	bne.n	800e3e4 <f_mkdir+0x174>
 800e424:	e000      	b.n	800e428 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800e426:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800e428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d107      	bne.n	800e440 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800e430:	f107 0310 	add.w	r3, r7, #16
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd ff07 	bl	800c248 <dir_register>
 800e43a:	4603      	mov	r3, r0
 800e43c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800e440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e444:	2b00      	cmp	r3, #0
 800e446:	d120      	bne.n	800e48a <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800e448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44a:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800e44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e44e:	3316      	adds	r3, #22
 800e450:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e452:	4618      	mov	r0, r3
 800e454:	f7fc fb8c 	bl	800ab70 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e45c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fd fb7e 	bl	800bb60 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800e464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e466:	330b      	adds	r3, #11
 800e468:	2210      	movs	r2, #16
 800e46a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2201      	movs	r2, #1
 800e470:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800e472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e476:	2b00      	cmp	r3, #0
 800e478:	d10e      	bne.n	800e498 <f_mkdir+0x228>
					res = sync_fs(fs);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fc fdff 	bl	800b080 <sync_fs>
 800e482:	4603      	mov	r3, r0
 800e484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e488:	e006      	b.n	800e498 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800e48a:	f107 0310 	add.w	r3, r7, #16
 800e48e:	2200      	movs	r2, #0
 800e490:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd f86a 	bl	800b56c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3760      	adds	r7, #96	; 0x60
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b088      	sub	sp, #32
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e4b8:	e01b      	b.n	800e4f2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e4ba:	f107 0310 	add.w	r3, r7, #16
 800e4be:	f107 0114 	add.w	r1, r7, #20
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7ff f809 	bl	800d4dc <f_read>
		if (rc != 1) break;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d116      	bne.n	800e4fe <f_gets+0x5a>
		c = s[0];
 800e4d0:	7d3b      	ldrb	r3, [r7, #20]
 800e4d2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b0d      	cmp	r3, #13
 800e4d8:	d100      	bne.n	800e4dc <f_gets+0x38>
 800e4da:	e00a      	b.n	800e4f2 <f_gets+0x4e>
		*p++ = c;
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	61ba      	str	r2, [r7, #24]
 800e4e2:	7dfa      	ldrb	r2, [r7, #23]
 800e4e4:	701a      	strb	r2, [r3, #0]
		n++;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
 800e4ee:	2b0a      	cmp	r3, #10
 800e4f0:	d007      	beq.n	800e502 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	dbde      	blt.n	800e4ba <f_gets+0x16>
 800e4fc:	e002      	b.n	800e504 <f_gets+0x60>
		if (rc != 1) break;
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e502:	bf00      	nop
	}
	*p = 0;
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	2200      	movs	r2, #0
 800e508:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <f_gets+0x70>
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	e000      	b.n	800e516 <f_gets+0x72>
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3720      	adds	r7, #32
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e52e:	2301      	movs	r3, #1
 800e530:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e536:	4b1f      	ldr	r3, [pc, #124]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e538:	7a5b      	ldrb	r3, [r3, #9]
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d131      	bne.n	800e5a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e540:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e542:	7a5b      	ldrb	r3, [r3, #9]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	461a      	mov	r2, r3
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e54a:	2100      	movs	r1, #0
 800e54c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e54e:	4b19      	ldr	r3, [pc, #100]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e550:	7a5b      	ldrb	r3, [r3, #9]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	4a17      	ldr	r2, [pc, #92]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e55e:	4b15      	ldr	r3, [pc, #84]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e560:	7a5b      	ldrb	r3, [r3, #9]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	461a      	mov	r2, r3
 800e566:	4b13      	ldr	r3, [pc, #76]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e568:	4413      	add	r3, r2
 800e56a:	79fa      	ldrb	r2, [r7, #7]
 800e56c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e56e:	4b11      	ldr	r3, [pc, #68]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e570:	7a5b      	ldrb	r3, [r3, #9]
 800e572:	b2db      	uxtb	r3, r3
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	b2d1      	uxtb	r1, r2
 800e578:	4a0e      	ldr	r2, [pc, #56]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e57a:	7251      	strb	r1, [r2, #9]
 800e57c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e57e:	7dbb      	ldrb	r3, [r7, #22]
 800e580:	3330      	adds	r3, #48	; 0x30
 800e582:	b2da      	uxtb	r2, r3
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	3301      	adds	r3, #1
 800e58c:	223a      	movs	r2, #58	; 0x3a
 800e58e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3302      	adds	r3, #2
 800e594:	222f      	movs	r2, #47	; 0x2f
 800e596:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	3303      	adds	r3, #3
 800e59c:	2200      	movs	r2, #0
 800e59e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	371c      	adds	r7, #28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	200007a0 	.word	0x200007a0

0800e5b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff ffaa 	bl	800e520 <FATFS_LinkDriverEx>
 800e5cc:	4603      	mov	r3, r0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e5e8:	d802      	bhi.n	800e5f0 <ff_convert+0x18>
		c = chr;
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
 800e5ec:	81fb      	strh	r3, [r7, #14]
 800e5ee:	e025      	b.n	800e63c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00b      	beq.n	800e60e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e5f6:	88fb      	ldrh	r3, [r7, #6]
 800e5f8:	2bff      	cmp	r3, #255	; 0xff
 800e5fa:	d805      	bhi.n	800e608 <ff_convert+0x30>
 800e5fc:	88fb      	ldrh	r3, [r7, #6]
 800e5fe:	3b80      	subs	r3, #128	; 0x80
 800e600:	4a12      	ldr	r2, [pc, #72]	; (800e64c <ff_convert+0x74>)
 800e602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e606:	e000      	b.n	800e60a <ff_convert+0x32>
 800e608:	2300      	movs	r3, #0
 800e60a:	81fb      	strh	r3, [r7, #14]
 800e60c:	e016      	b.n	800e63c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e60e:	2300      	movs	r3, #0
 800e610:	81fb      	strh	r3, [r7, #14]
 800e612:	e009      	b.n	800e628 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e614:	89fb      	ldrh	r3, [r7, #14]
 800e616:	4a0d      	ldr	r2, [pc, #52]	; (800e64c <ff_convert+0x74>)
 800e618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e61c:	88fa      	ldrh	r2, [r7, #6]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d006      	beq.n	800e630 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e622:	89fb      	ldrh	r3, [r7, #14]
 800e624:	3301      	adds	r3, #1
 800e626:	81fb      	strh	r3, [r7, #14]
 800e628:	89fb      	ldrh	r3, [r7, #14]
 800e62a:	2b7f      	cmp	r3, #127	; 0x7f
 800e62c:	d9f2      	bls.n	800e614 <ff_convert+0x3c>
 800e62e:	e000      	b.n	800e632 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e630:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e632:	89fb      	ldrh	r3, [r7, #14]
 800e634:	3380      	adds	r3, #128	; 0x80
 800e636:	b29b      	uxth	r3, r3
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e63c:	89fb      	ldrh	r3, [r7, #14]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	08013798 	.word	0x08013798

0800e650 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e660:	d201      	bcs.n	800e666 <ff_wtoupper+0x16>
 800e662:	4b3e      	ldr	r3, [pc, #248]	; (800e75c <ff_wtoupper+0x10c>)
 800e664:	e000      	b.n	800e668 <ff_wtoupper+0x18>
 800e666:	4b3e      	ldr	r3, [pc, #248]	; (800e760 <ff_wtoupper+0x110>)
 800e668:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	1c9a      	adds	r2, r3, #2
 800e66e:	617a      	str	r2, [r7, #20]
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e674:	8a7b      	ldrh	r3, [r7, #18]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d068      	beq.n	800e74c <ff_wtoupper+0xfc>
 800e67a:	88fa      	ldrh	r2, [r7, #6]
 800e67c:	8a7b      	ldrh	r3, [r7, #18]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d364      	bcc.n	800e74c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	1c9a      	adds	r2, r3, #2
 800e686:	617a      	str	r2, [r7, #20]
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	823b      	strh	r3, [r7, #16]
 800e68c:	8a3b      	ldrh	r3, [r7, #16]
 800e68e:	0a1b      	lsrs	r3, r3, #8
 800e690:	81fb      	strh	r3, [r7, #14]
 800e692:	8a3b      	ldrh	r3, [r7, #16]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e698:	88fa      	ldrh	r2, [r7, #6]
 800e69a:	8a79      	ldrh	r1, [r7, #18]
 800e69c:	8a3b      	ldrh	r3, [r7, #16]
 800e69e:	440b      	add	r3, r1
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	da49      	bge.n	800e738 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e6a4:	89fb      	ldrh	r3, [r7, #14]
 800e6a6:	2b08      	cmp	r3, #8
 800e6a8:	d84f      	bhi.n	800e74a <ff_wtoupper+0xfa>
 800e6aa:	a201      	add	r2, pc, #4	; (adr r2, 800e6b0 <ff_wtoupper+0x60>)
 800e6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b0:	0800e6d5 	.word	0x0800e6d5
 800e6b4:	0800e6e7 	.word	0x0800e6e7
 800e6b8:	0800e6fd 	.word	0x0800e6fd
 800e6bc:	0800e705 	.word	0x0800e705
 800e6c0:	0800e70d 	.word	0x0800e70d
 800e6c4:	0800e715 	.word	0x0800e715
 800e6c8:	0800e71d 	.word	0x0800e71d
 800e6cc:	0800e725 	.word	0x0800e725
 800e6d0:	0800e72d 	.word	0x0800e72d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e6d4:	88fa      	ldrh	r2, [r7, #6]
 800e6d6:	8a7b      	ldrh	r3, [r7, #18]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	697a      	ldr	r2, [r7, #20]
 800e6de:	4413      	add	r3, r2
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	80fb      	strh	r3, [r7, #6]
 800e6e4:	e027      	b.n	800e736 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e6e6:	88fa      	ldrh	r2, [r7, #6]
 800e6e8:	8a7b      	ldrh	r3, [r7, #18]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	88fa      	ldrh	r2, [r7, #6]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	80fb      	strh	r3, [r7, #6]
 800e6fa:	e01c      	b.n	800e736 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	3b10      	subs	r3, #16
 800e700:	80fb      	strh	r3, [r7, #6]
 800e702:	e018      	b.n	800e736 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	3b20      	subs	r3, #32
 800e708:	80fb      	strh	r3, [r7, #6]
 800e70a:	e014      	b.n	800e736 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	3b30      	subs	r3, #48	; 0x30
 800e710:	80fb      	strh	r3, [r7, #6]
 800e712:	e010      	b.n	800e736 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e714:	88fb      	ldrh	r3, [r7, #6]
 800e716:	3b1a      	subs	r3, #26
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	e00c      	b.n	800e736 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e71c:	88fb      	ldrh	r3, [r7, #6]
 800e71e:	3308      	adds	r3, #8
 800e720:	80fb      	strh	r3, [r7, #6]
 800e722:	e008      	b.n	800e736 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e724:	88fb      	ldrh	r3, [r7, #6]
 800e726:	3b50      	subs	r3, #80	; 0x50
 800e728:	80fb      	strh	r3, [r7, #6]
 800e72a:	e004      	b.n	800e736 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e732:	80fb      	strh	r3, [r7, #6]
 800e734:	bf00      	nop
			}
			break;
 800e736:	e008      	b.n	800e74a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e738:	89fb      	ldrh	r3, [r7, #14]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d195      	bne.n	800e66a <ff_wtoupper+0x1a>
 800e73e:	8a3b      	ldrh	r3, [r7, #16]
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	4413      	add	r3, r2
 800e746:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e748:	e78f      	b.n	800e66a <ff_wtoupper+0x1a>
			break;
 800e74a:	bf00      	nop
	}

	return chr;
 800e74c:	88fb      	ldrh	r3, [r7, #6]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	371c      	adds	r7, #28
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	08013898 	.word	0x08013898
 800e760:	08013a8c 	.word	0x08013a8c

0800e764 <__errno>:
 800e764:	4b01      	ldr	r3, [pc, #4]	; (800e76c <__errno+0x8>)
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	2000000c 	.word	0x2000000c

0800e770 <__libc_init_array>:
 800e770:	b570      	push	{r4, r5, r6, lr}
 800e772:	4e0d      	ldr	r6, [pc, #52]	; (800e7a8 <__libc_init_array+0x38>)
 800e774:	4c0d      	ldr	r4, [pc, #52]	; (800e7ac <__libc_init_array+0x3c>)
 800e776:	1ba4      	subs	r4, r4, r6
 800e778:	10a4      	asrs	r4, r4, #2
 800e77a:	2500      	movs	r5, #0
 800e77c:	42a5      	cmp	r5, r4
 800e77e:	d109      	bne.n	800e794 <__libc_init_array+0x24>
 800e780:	4e0b      	ldr	r6, [pc, #44]	; (800e7b0 <__libc_init_array+0x40>)
 800e782:	4c0c      	ldr	r4, [pc, #48]	; (800e7b4 <__libc_init_array+0x44>)
 800e784:	f004 ff16 	bl	80135b4 <_init>
 800e788:	1ba4      	subs	r4, r4, r6
 800e78a:	10a4      	asrs	r4, r4, #2
 800e78c:	2500      	movs	r5, #0
 800e78e:	42a5      	cmp	r5, r4
 800e790:	d105      	bne.n	800e79e <__libc_init_array+0x2e>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e798:	4798      	blx	r3
 800e79a:	3501      	adds	r5, #1
 800e79c:	e7ee      	b.n	800e77c <__libc_init_array+0xc>
 800e79e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e7a2:	4798      	blx	r3
 800e7a4:	3501      	adds	r5, #1
 800e7a6:	e7f2      	b.n	800e78e <__libc_init_array+0x1e>
 800e7a8:	08013e8c 	.word	0x08013e8c
 800e7ac:	08013e8c 	.word	0x08013e8c
 800e7b0:	08013e8c 	.word	0x08013e8c
 800e7b4:	08013e94 	.word	0x08013e94

0800e7b8 <memset>:
 800e7b8:	4402      	add	r2, r0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d100      	bne.n	800e7c2 <memset+0xa>
 800e7c0:	4770      	bx	lr
 800e7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c6:	e7f9      	b.n	800e7bc <memset+0x4>

0800e7c8 <__cvt>:
 800e7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7cc:	ec55 4b10 	vmov	r4, r5, d0
 800e7d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e7d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	460e      	mov	r6, r1
 800e7da:	4691      	mov	r9, r2
 800e7dc:	4619      	mov	r1, r3
 800e7de:	bfb8      	it	lt
 800e7e0:	4622      	movlt	r2, r4
 800e7e2:	462b      	mov	r3, r5
 800e7e4:	f027 0720 	bic.w	r7, r7, #32
 800e7e8:	bfbb      	ittet	lt
 800e7ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7ee:	461d      	movlt	r5, r3
 800e7f0:	2300      	movge	r3, #0
 800e7f2:	232d      	movlt	r3, #45	; 0x2d
 800e7f4:	bfb8      	it	lt
 800e7f6:	4614      	movlt	r4, r2
 800e7f8:	2f46      	cmp	r7, #70	; 0x46
 800e7fa:	700b      	strb	r3, [r1, #0]
 800e7fc:	d004      	beq.n	800e808 <__cvt+0x40>
 800e7fe:	2f45      	cmp	r7, #69	; 0x45
 800e800:	d100      	bne.n	800e804 <__cvt+0x3c>
 800e802:	3601      	adds	r6, #1
 800e804:	2102      	movs	r1, #2
 800e806:	e000      	b.n	800e80a <__cvt+0x42>
 800e808:	2103      	movs	r1, #3
 800e80a:	ab03      	add	r3, sp, #12
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	ab02      	add	r3, sp, #8
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	4632      	mov	r2, r6
 800e814:	4653      	mov	r3, sl
 800e816:	ec45 4b10 	vmov	d0, r4, r5
 800e81a:	f001 ff91 	bl	8010740 <_dtoa_r>
 800e81e:	2f47      	cmp	r7, #71	; 0x47
 800e820:	4680      	mov	r8, r0
 800e822:	d102      	bne.n	800e82a <__cvt+0x62>
 800e824:	f019 0f01 	tst.w	r9, #1
 800e828:	d026      	beq.n	800e878 <__cvt+0xb0>
 800e82a:	2f46      	cmp	r7, #70	; 0x46
 800e82c:	eb08 0906 	add.w	r9, r8, r6
 800e830:	d111      	bne.n	800e856 <__cvt+0x8e>
 800e832:	f898 3000 	ldrb.w	r3, [r8]
 800e836:	2b30      	cmp	r3, #48	; 0x30
 800e838:	d10a      	bne.n	800e850 <__cvt+0x88>
 800e83a:	2200      	movs	r2, #0
 800e83c:	2300      	movs	r3, #0
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f2 f959 	bl	8000af8 <__aeabi_dcmpeq>
 800e846:	b918      	cbnz	r0, 800e850 <__cvt+0x88>
 800e848:	f1c6 0601 	rsb	r6, r6, #1
 800e84c:	f8ca 6000 	str.w	r6, [sl]
 800e850:	f8da 3000 	ldr.w	r3, [sl]
 800e854:	4499      	add	r9, r3
 800e856:	2200      	movs	r2, #0
 800e858:	2300      	movs	r3, #0
 800e85a:	4620      	mov	r0, r4
 800e85c:	4629      	mov	r1, r5
 800e85e:	f7f2 f94b 	bl	8000af8 <__aeabi_dcmpeq>
 800e862:	b938      	cbnz	r0, 800e874 <__cvt+0xac>
 800e864:	2230      	movs	r2, #48	; 0x30
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	454b      	cmp	r3, r9
 800e86a:	d205      	bcs.n	800e878 <__cvt+0xb0>
 800e86c:	1c59      	adds	r1, r3, #1
 800e86e:	9103      	str	r1, [sp, #12]
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	e7f8      	b.n	800e866 <__cvt+0x9e>
 800e874:	f8cd 900c 	str.w	r9, [sp, #12]
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e87c:	eba3 0308 	sub.w	r3, r3, r8
 800e880:	4640      	mov	r0, r8
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	b004      	add	sp, #16
 800e886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e88a <__exponent>:
 800e88a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e88c:	2900      	cmp	r1, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	bfba      	itte	lt
 800e892:	4249      	neglt	r1, r1
 800e894:	232d      	movlt	r3, #45	; 0x2d
 800e896:	232b      	movge	r3, #43	; 0x2b
 800e898:	2909      	cmp	r1, #9
 800e89a:	f804 2b02 	strb.w	r2, [r4], #2
 800e89e:	7043      	strb	r3, [r0, #1]
 800e8a0:	dd20      	ble.n	800e8e4 <__exponent+0x5a>
 800e8a2:	f10d 0307 	add.w	r3, sp, #7
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	260a      	movs	r6, #10
 800e8aa:	fb91 f5f6 	sdiv	r5, r1, r6
 800e8ae:	fb06 1115 	mls	r1, r6, r5, r1
 800e8b2:	3130      	adds	r1, #48	; 0x30
 800e8b4:	2d09      	cmp	r5, #9
 800e8b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e8ba:	f103 32ff 	add.w	r2, r3, #4294967295
 800e8be:	4629      	mov	r1, r5
 800e8c0:	dc09      	bgt.n	800e8d6 <__exponent+0x4c>
 800e8c2:	3130      	adds	r1, #48	; 0x30
 800e8c4:	3b02      	subs	r3, #2
 800e8c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e8ca:	42bb      	cmp	r3, r7
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	d304      	bcc.n	800e8da <__exponent+0x50>
 800e8d0:	1a10      	subs	r0, r2, r0
 800e8d2:	b003      	add	sp, #12
 800e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	e7e7      	b.n	800e8aa <__exponent+0x20>
 800e8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8de:	f804 2b01 	strb.w	r2, [r4], #1
 800e8e2:	e7f2      	b.n	800e8ca <__exponent+0x40>
 800e8e4:	2330      	movs	r3, #48	; 0x30
 800e8e6:	4419      	add	r1, r3
 800e8e8:	7083      	strb	r3, [r0, #2]
 800e8ea:	1d02      	adds	r2, r0, #4
 800e8ec:	70c1      	strb	r1, [r0, #3]
 800e8ee:	e7ef      	b.n	800e8d0 <__exponent+0x46>

0800e8f0 <_printf_float>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	b08d      	sub	sp, #52	; 0x34
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e8fc:	4616      	mov	r6, r2
 800e8fe:	461f      	mov	r7, r3
 800e900:	4605      	mov	r5, r0
 800e902:	f003 f989 	bl	8011c18 <_localeconv_r>
 800e906:	6803      	ldr	r3, [r0, #0]
 800e908:	9304      	str	r3, [sp, #16]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f1 fc78 	bl	8000200 <strlen>
 800e910:	2300      	movs	r3, #0
 800e912:	930a      	str	r3, [sp, #40]	; 0x28
 800e914:	f8d8 3000 	ldr.w	r3, [r8]
 800e918:	9005      	str	r0, [sp, #20]
 800e91a:	3307      	adds	r3, #7
 800e91c:	f023 0307 	bic.w	r3, r3, #7
 800e920:	f103 0208 	add.w	r2, r3, #8
 800e924:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e928:	f8d4 b000 	ldr.w	fp, [r4]
 800e92c:	f8c8 2000 	str.w	r2, [r8]
 800e930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e934:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e938:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e93c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e940:	9307      	str	r3, [sp, #28]
 800e942:	f8cd 8018 	str.w	r8, [sp, #24]
 800e946:	f04f 32ff 	mov.w	r2, #4294967295
 800e94a:	4ba7      	ldr	r3, [pc, #668]	; (800ebe8 <_printf_float+0x2f8>)
 800e94c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e950:	f7f2 f904 	bl	8000b5c <__aeabi_dcmpun>
 800e954:	bb70      	cbnz	r0, 800e9b4 <_printf_float+0xc4>
 800e956:	f04f 32ff 	mov.w	r2, #4294967295
 800e95a:	4ba3      	ldr	r3, [pc, #652]	; (800ebe8 <_printf_float+0x2f8>)
 800e95c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e960:	f7f2 f8de 	bl	8000b20 <__aeabi_dcmple>
 800e964:	bb30      	cbnz	r0, 800e9b4 <_printf_float+0xc4>
 800e966:	2200      	movs	r2, #0
 800e968:	2300      	movs	r3, #0
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f2 f8cd 	bl	8000b0c <__aeabi_dcmplt>
 800e972:	b110      	cbz	r0, 800e97a <_printf_float+0x8a>
 800e974:	232d      	movs	r3, #45	; 0x2d
 800e976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e97a:	4a9c      	ldr	r2, [pc, #624]	; (800ebec <_printf_float+0x2fc>)
 800e97c:	4b9c      	ldr	r3, [pc, #624]	; (800ebf0 <_printf_float+0x300>)
 800e97e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e982:	bf8c      	ite	hi
 800e984:	4690      	movhi	r8, r2
 800e986:	4698      	movls	r8, r3
 800e988:	2303      	movs	r3, #3
 800e98a:	f02b 0204 	bic.w	r2, fp, #4
 800e98e:	6123      	str	r3, [r4, #16]
 800e990:	6022      	str	r2, [r4, #0]
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	9700      	str	r7, [sp, #0]
 800e998:	4633      	mov	r3, r6
 800e99a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e99c:	4621      	mov	r1, r4
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 f9e6 	bl	800ed70 <_printf_common>
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f040 808d 	bne.w	800eac4 <_printf_float+0x1d4>
 800e9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ae:	b00d      	add	sp, #52	; 0x34
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	4642      	mov	r2, r8
 800e9b6:	464b      	mov	r3, r9
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	f7f2 f8ce 	bl	8000b5c <__aeabi_dcmpun>
 800e9c0:	b110      	cbz	r0, 800e9c8 <_printf_float+0xd8>
 800e9c2:	4a8c      	ldr	r2, [pc, #560]	; (800ebf4 <_printf_float+0x304>)
 800e9c4:	4b8c      	ldr	r3, [pc, #560]	; (800ebf8 <_printf_float+0x308>)
 800e9c6:	e7da      	b.n	800e97e <_printf_float+0x8e>
 800e9c8:	6861      	ldr	r1, [r4, #4]
 800e9ca:	1c4b      	adds	r3, r1, #1
 800e9cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e9d0:	a80a      	add	r0, sp, #40	; 0x28
 800e9d2:	d13e      	bne.n	800ea52 <_printf_float+0x162>
 800e9d4:	2306      	movs	r3, #6
 800e9d6:	6063      	str	r3, [r4, #4]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e9de:	ab09      	add	r3, sp, #36	; 0x24
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	ec49 8b10 	vmov	d0, r8, r9
 800e9e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e9ea:	6022      	str	r2, [r4, #0]
 800e9ec:	f8cd a004 	str.w	sl, [sp, #4]
 800e9f0:	6861      	ldr	r1, [r4, #4]
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f7ff fee8 	bl	800e7c8 <__cvt>
 800e9f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e9fc:	2b47      	cmp	r3, #71	; 0x47
 800e9fe:	4680      	mov	r8, r0
 800ea00:	d109      	bne.n	800ea16 <_printf_float+0x126>
 800ea02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea04:	1cd8      	adds	r0, r3, #3
 800ea06:	db02      	blt.n	800ea0e <_printf_float+0x11e>
 800ea08:	6862      	ldr	r2, [r4, #4]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	dd47      	ble.n	800ea9e <_printf_float+0x1ae>
 800ea0e:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea12:	fa5f fa8a 	uxtb.w	sl, sl
 800ea16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ea1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea1c:	d824      	bhi.n	800ea68 <_printf_float+0x178>
 800ea1e:	3901      	subs	r1, #1
 800ea20:	4652      	mov	r2, sl
 800ea22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea26:	9109      	str	r1, [sp, #36]	; 0x24
 800ea28:	f7ff ff2f 	bl	800e88a <__exponent>
 800ea2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea2e:	1813      	adds	r3, r2, r0
 800ea30:	2a01      	cmp	r2, #1
 800ea32:	4681      	mov	r9, r0
 800ea34:	6123      	str	r3, [r4, #16]
 800ea36:	dc02      	bgt.n	800ea3e <_printf_float+0x14e>
 800ea38:	6822      	ldr	r2, [r4, #0]
 800ea3a:	07d1      	lsls	r1, r2, #31
 800ea3c:	d501      	bpl.n	800ea42 <_printf_float+0x152>
 800ea3e:	3301      	adds	r3, #1
 800ea40:	6123      	str	r3, [r4, #16]
 800ea42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0a5      	beq.n	800e996 <_printf_float+0xa6>
 800ea4a:	232d      	movs	r3, #45	; 0x2d
 800ea4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea50:	e7a1      	b.n	800e996 <_printf_float+0xa6>
 800ea52:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ea56:	f000 8177 	beq.w	800ed48 <_printf_float+0x458>
 800ea5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ea5e:	d1bb      	bne.n	800e9d8 <_printf_float+0xe8>
 800ea60:	2900      	cmp	r1, #0
 800ea62:	d1b9      	bne.n	800e9d8 <_printf_float+0xe8>
 800ea64:	2301      	movs	r3, #1
 800ea66:	e7b6      	b.n	800e9d6 <_printf_float+0xe6>
 800ea68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ea6c:	d119      	bne.n	800eaa2 <_printf_float+0x1b2>
 800ea6e:	2900      	cmp	r1, #0
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	dd0c      	ble.n	800ea8e <_printf_float+0x19e>
 800ea74:	6121      	str	r1, [r4, #16]
 800ea76:	b913      	cbnz	r3, 800ea7e <_printf_float+0x18e>
 800ea78:	6822      	ldr	r2, [r4, #0]
 800ea7a:	07d2      	lsls	r2, r2, #31
 800ea7c:	d502      	bpl.n	800ea84 <_printf_float+0x194>
 800ea7e:	3301      	adds	r3, #1
 800ea80:	440b      	add	r3, r1
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea86:	65a3      	str	r3, [r4, #88]	; 0x58
 800ea88:	f04f 0900 	mov.w	r9, #0
 800ea8c:	e7d9      	b.n	800ea42 <_printf_float+0x152>
 800ea8e:	b913      	cbnz	r3, 800ea96 <_printf_float+0x1a6>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	07d0      	lsls	r0, r2, #31
 800ea94:	d501      	bpl.n	800ea9a <_printf_float+0x1aa>
 800ea96:	3302      	adds	r3, #2
 800ea98:	e7f3      	b.n	800ea82 <_printf_float+0x192>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e7f1      	b.n	800ea82 <_printf_float+0x192>
 800ea9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800eaa2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	db05      	blt.n	800eab6 <_printf_float+0x1c6>
 800eaaa:	6822      	ldr	r2, [r4, #0]
 800eaac:	6123      	str	r3, [r4, #16]
 800eaae:	07d1      	lsls	r1, r2, #31
 800eab0:	d5e8      	bpl.n	800ea84 <_printf_float+0x194>
 800eab2:	3301      	adds	r3, #1
 800eab4:	e7e5      	b.n	800ea82 <_printf_float+0x192>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	bfd4      	ite	le
 800eaba:	f1c3 0302 	rsble	r3, r3, #2
 800eabe:	2301      	movgt	r3, #1
 800eac0:	4413      	add	r3, r2
 800eac2:	e7de      	b.n	800ea82 <_printf_float+0x192>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	055a      	lsls	r2, r3, #21
 800eac8:	d407      	bmi.n	800eada <_printf_float+0x1ea>
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	4642      	mov	r2, r8
 800eace:	4631      	mov	r1, r6
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	d12b      	bne.n	800eb30 <_printf_float+0x240>
 800ead8:	e767      	b.n	800e9aa <_printf_float+0xba>
 800eada:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eade:	f240 80dc 	bls.w	800ec9a <_printf_float+0x3aa>
 800eae2:	2200      	movs	r2, #0
 800eae4:	2300      	movs	r3, #0
 800eae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaea:	f7f2 f805 	bl	8000af8 <__aeabi_dcmpeq>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d033      	beq.n	800eb5a <_printf_float+0x26a>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4a41      	ldr	r2, [pc, #260]	; (800ebfc <_printf_float+0x30c>)
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b8      	blx	r7
 800eafc:	3001      	adds	r0, #1
 800eafe:	f43f af54 	beq.w	800e9aa <_printf_float+0xba>
 800eb02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb06:	429a      	cmp	r2, r3
 800eb08:	db02      	blt.n	800eb10 <_printf_float+0x220>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	07d8      	lsls	r0, r3, #31
 800eb0e:	d50f      	bpl.n	800eb30 <_printf_float+0x240>
 800eb10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb14:	4631      	mov	r1, r6
 800eb16:	4628      	mov	r0, r5
 800eb18:	47b8      	blx	r7
 800eb1a:	3001      	adds	r0, #1
 800eb1c:	f43f af45 	beq.w	800e9aa <_printf_float+0xba>
 800eb20:	f04f 0800 	mov.w	r8, #0
 800eb24:	f104 091a 	add.w	r9, r4, #26
 800eb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	4543      	cmp	r3, r8
 800eb2e:	dc09      	bgt.n	800eb44 <_printf_float+0x254>
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	079b      	lsls	r3, r3, #30
 800eb34:	f100 8103 	bmi.w	800ed3e <_printf_float+0x44e>
 800eb38:	68e0      	ldr	r0, [r4, #12]
 800eb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb3c:	4298      	cmp	r0, r3
 800eb3e:	bfb8      	it	lt
 800eb40:	4618      	movlt	r0, r3
 800eb42:	e734      	b.n	800e9ae <_printf_float+0xbe>
 800eb44:	2301      	movs	r3, #1
 800eb46:	464a      	mov	r2, r9
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f43f af2b 	beq.w	800e9aa <_printf_float+0xba>
 800eb54:	f108 0801 	add.w	r8, r8, #1
 800eb58:	e7e6      	b.n	800eb28 <_printf_float+0x238>
 800eb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	dc2b      	bgt.n	800ebb8 <_printf_float+0x2c8>
 800eb60:	2301      	movs	r3, #1
 800eb62:	4a26      	ldr	r2, [pc, #152]	; (800ebfc <_printf_float+0x30c>)
 800eb64:	4631      	mov	r1, r6
 800eb66:	4628      	mov	r0, r5
 800eb68:	47b8      	blx	r7
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	f43f af1d 	beq.w	800e9aa <_printf_float+0xba>
 800eb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb72:	b923      	cbnz	r3, 800eb7e <_printf_float+0x28e>
 800eb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb76:	b913      	cbnz	r3, 800eb7e <_printf_float+0x28e>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	07d9      	lsls	r1, r3, #31
 800eb7c:	d5d8      	bpl.n	800eb30 <_printf_float+0x240>
 800eb7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb82:	4631      	mov	r1, r6
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b8      	blx	r7
 800eb88:	3001      	adds	r0, #1
 800eb8a:	f43f af0e 	beq.w	800e9aa <_printf_float+0xba>
 800eb8e:	f04f 0900 	mov.w	r9, #0
 800eb92:	f104 0a1a 	add.w	sl, r4, #26
 800eb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb98:	425b      	negs	r3, r3
 800eb9a:	454b      	cmp	r3, r9
 800eb9c:	dc01      	bgt.n	800eba2 <_printf_float+0x2b2>
 800eb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba0:	e794      	b.n	800eacc <_printf_float+0x1dc>
 800eba2:	2301      	movs	r3, #1
 800eba4:	4652      	mov	r2, sl
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b8      	blx	r7
 800ebac:	3001      	adds	r0, #1
 800ebae:	f43f aefc 	beq.w	800e9aa <_printf_float+0xba>
 800ebb2:	f109 0901 	add.w	r9, r9, #1
 800ebb6:	e7ee      	b.n	800eb96 <_printf_float+0x2a6>
 800ebb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	bfa8      	it	ge
 800ebc0:	461a      	movge	r2, r3
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	4691      	mov	r9, r2
 800ebc6:	dd07      	ble.n	800ebd8 <_printf_float+0x2e8>
 800ebc8:	4613      	mov	r3, r2
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4642      	mov	r2, r8
 800ebce:	4628      	mov	r0, r5
 800ebd0:	47b8      	blx	r7
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	f43f aee9 	beq.w	800e9aa <_printf_float+0xba>
 800ebd8:	f104 031a 	add.w	r3, r4, #26
 800ebdc:	f04f 0b00 	mov.w	fp, #0
 800ebe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebe4:	9306      	str	r3, [sp, #24]
 800ebe6:	e015      	b.n	800ec14 <_printf_float+0x324>
 800ebe8:	7fefffff 	.word	0x7fefffff
 800ebec:	08013b50 	.word	0x08013b50
 800ebf0:	08013b4c 	.word	0x08013b4c
 800ebf4:	08013b58 	.word	0x08013b58
 800ebf8:	08013b54 	.word	0x08013b54
 800ebfc:	08013d7b 	.word	0x08013d7b
 800ec00:	2301      	movs	r3, #1
 800ec02:	9a06      	ldr	r2, [sp, #24]
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	f43f aecd 	beq.w	800e9aa <_printf_float+0xba>
 800ec10:	f10b 0b01 	add.w	fp, fp, #1
 800ec14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ec18:	ebaa 0309 	sub.w	r3, sl, r9
 800ec1c:	455b      	cmp	r3, fp
 800ec1e:	dcef      	bgt.n	800ec00 <_printf_float+0x310>
 800ec20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec24:	429a      	cmp	r2, r3
 800ec26:	44d0      	add	r8, sl
 800ec28:	db15      	blt.n	800ec56 <_printf_float+0x366>
 800ec2a:	6823      	ldr	r3, [r4, #0]
 800ec2c:	07da      	lsls	r2, r3, #31
 800ec2e:	d412      	bmi.n	800ec56 <_printf_float+0x366>
 800ec30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec34:	eba3 020a 	sub.w	r2, r3, sl
 800ec38:	eba3 0a01 	sub.w	sl, r3, r1
 800ec3c:	4592      	cmp	sl, r2
 800ec3e:	bfa8      	it	ge
 800ec40:	4692      	movge	sl, r2
 800ec42:	f1ba 0f00 	cmp.w	sl, #0
 800ec46:	dc0e      	bgt.n	800ec66 <_printf_float+0x376>
 800ec48:	f04f 0800 	mov.w	r8, #0
 800ec4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec50:	f104 091a 	add.w	r9, r4, #26
 800ec54:	e019      	b.n	800ec8a <_printf_float+0x39a>
 800ec56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b8      	blx	r7
 800ec60:	3001      	adds	r0, #1
 800ec62:	d1e5      	bne.n	800ec30 <_printf_float+0x340>
 800ec64:	e6a1      	b.n	800e9aa <_printf_float+0xba>
 800ec66:	4653      	mov	r3, sl
 800ec68:	4642      	mov	r2, r8
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d1e9      	bne.n	800ec48 <_printf_float+0x358>
 800ec74:	e699      	b.n	800e9aa <_printf_float+0xba>
 800ec76:	2301      	movs	r3, #1
 800ec78:	464a      	mov	r2, r9
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae92 	beq.w	800e9aa <_printf_float+0xba>
 800ec86:	f108 0801 	add.w	r8, r8, #1
 800ec8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec8e:	1a9b      	subs	r3, r3, r2
 800ec90:	eba3 030a 	sub.w	r3, r3, sl
 800ec94:	4543      	cmp	r3, r8
 800ec96:	dcee      	bgt.n	800ec76 <_printf_float+0x386>
 800ec98:	e74a      	b.n	800eb30 <_printf_float+0x240>
 800ec9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec9c:	2a01      	cmp	r2, #1
 800ec9e:	dc01      	bgt.n	800eca4 <_printf_float+0x3b4>
 800eca0:	07db      	lsls	r3, r3, #31
 800eca2:	d53a      	bpl.n	800ed1a <_printf_float+0x42a>
 800eca4:	2301      	movs	r3, #1
 800eca6:	4642      	mov	r2, r8
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f ae7b 	beq.w	800e9aa <_printf_float+0xba>
 800ecb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	47b8      	blx	r7
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f108 0801 	add.w	r8, r8, #1
 800ecc4:	f43f ae71 	beq.w	800e9aa <_printf_float+0xba>
 800ecc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecca:	2200      	movs	r2, #0
 800eccc:	f103 3aff 	add.w	sl, r3, #4294967295
 800ecd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f7f1 ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 800ecda:	b9c8      	cbnz	r0, 800ed10 <_printf_float+0x420>
 800ecdc:	4653      	mov	r3, sl
 800ecde:	4642      	mov	r2, r8
 800ece0:	4631      	mov	r1, r6
 800ece2:	4628      	mov	r0, r5
 800ece4:	47b8      	blx	r7
 800ece6:	3001      	adds	r0, #1
 800ece8:	d10e      	bne.n	800ed08 <_printf_float+0x418>
 800ecea:	e65e      	b.n	800e9aa <_printf_float+0xba>
 800ecec:	2301      	movs	r3, #1
 800ecee:	4652      	mov	r2, sl
 800ecf0:	4631      	mov	r1, r6
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	47b8      	blx	r7
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	f43f ae57 	beq.w	800e9aa <_printf_float+0xba>
 800ecfc:	f108 0801 	add.w	r8, r8, #1
 800ed00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed02:	3b01      	subs	r3, #1
 800ed04:	4543      	cmp	r3, r8
 800ed06:	dcf1      	bgt.n	800ecec <_printf_float+0x3fc>
 800ed08:	464b      	mov	r3, r9
 800ed0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed0e:	e6de      	b.n	800eace <_printf_float+0x1de>
 800ed10:	f04f 0800 	mov.w	r8, #0
 800ed14:	f104 0a1a 	add.w	sl, r4, #26
 800ed18:	e7f2      	b.n	800ed00 <_printf_float+0x410>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e7df      	b.n	800ecde <_printf_float+0x3ee>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	464a      	mov	r2, r9
 800ed22:	4631      	mov	r1, r6
 800ed24:	4628      	mov	r0, r5
 800ed26:	47b8      	blx	r7
 800ed28:	3001      	adds	r0, #1
 800ed2a:	f43f ae3e 	beq.w	800e9aa <_printf_float+0xba>
 800ed2e:	f108 0801 	add.w	r8, r8, #1
 800ed32:	68e3      	ldr	r3, [r4, #12]
 800ed34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed36:	1a9b      	subs	r3, r3, r2
 800ed38:	4543      	cmp	r3, r8
 800ed3a:	dcf0      	bgt.n	800ed1e <_printf_float+0x42e>
 800ed3c:	e6fc      	b.n	800eb38 <_printf_float+0x248>
 800ed3e:	f04f 0800 	mov.w	r8, #0
 800ed42:	f104 0919 	add.w	r9, r4, #25
 800ed46:	e7f4      	b.n	800ed32 <_printf_float+0x442>
 800ed48:	2900      	cmp	r1, #0
 800ed4a:	f43f ae8b 	beq.w	800ea64 <_printf_float+0x174>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ed54:	ab09      	add	r3, sp, #36	; 0x24
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	ec49 8b10 	vmov	d0, r8, r9
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	f8cd a004 	str.w	sl, [sp, #4]
 800ed62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7ff fd2e 	bl	800e7c8 <__cvt>
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	e648      	b.n	800ea02 <_printf_float+0x112>

0800ed70 <_printf_common>:
 800ed70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	4691      	mov	r9, r2
 800ed76:	461f      	mov	r7, r3
 800ed78:	688a      	ldr	r2, [r1, #8]
 800ed7a:	690b      	ldr	r3, [r1, #16]
 800ed7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed80:	4293      	cmp	r3, r2
 800ed82:	bfb8      	it	lt
 800ed84:	4613      	movlt	r3, r2
 800ed86:	f8c9 3000 	str.w	r3, [r9]
 800ed8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460c      	mov	r4, r1
 800ed92:	b112      	cbz	r2, 800ed9a <_printf_common+0x2a>
 800ed94:	3301      	adds	r3, #1
 800ed96:	f8c9 3000 	str.w	r3, [r9]
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	0699      	lsls	r1, r3, #26
 800ed9e:	bf42      	ittt	mi
 800eda0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eda4:	3302      	addmi	r3, #2
 800eda6:	f8c9 3000 	strmi.w	r3, [r9]
 800edaa:	6825      	ldr	r5, [r4, #0]
 800edac:	f015 0506 	ands.w	r5, r5, #6
 800edb0:	d107      	bne.n	800edc2 <_printf_common+0x52>
 800edb2:	f104 0a19 	add.w	sl, r4, #25
 800edb6:	68e3      	ldr	r3, [r4, #12]
 800edb8:	f8d9 2000 	ldr.w	r2, [r9]
 800edbc:	1a9b      	subs	r3, r3, r2
 800edbe:	42ab      	cmp	r3, r5
 800edc0:	dc28      	bgt.n	800ee14 <_printf_common+0xa4>
 800edc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800edc6:	6822      	ldr	r2, [r4, #0]
 800edc8:	3300      	adds	r3, #0
 800edca:	bf18      	it	ne
 800edcc:	2301      	movne	r3, #1
 800edce:	0692      	lsls	r2, r2, #26
 800edd0:	d42d      	bmi.n	800ee2e <_printf_common+0xbe>
 800edd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edd6:	4639      	mov	r1, r7
 800edd8:	4630      	mov	r0, r6
 800edda:	47c0      	blx	r8
 800eddc:	3001      	adds	r0, #1
 800edde:	d020      	beq.n	800ee22 <_printf_common+0xb2>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	68e5      	ldr	r5, [r4, #12]
 800ede4:	f8d9 2000 	ldr.w	r2, [r9]
 800ede8:	f003 0306 	and.w	r3, r3, #6
 800edec:	2b04      	cmp	r3, #4
 800edee:	bf08      	it	eq
 800edf0:	1aad      	subeq	r5, r5, r2
 800edf2:	68a3      	ldr	r3, [r4, #8]
 800edf4:	6922      	ldr	r2, [r4, #16]
 800edf6:	bf0c      	ite	eq
 800edf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edfc:	2500      	movne	r5, #0
 800edfe:	4293      	cmp	r3, r2
 800ee00:	bfc4      	itt	gt
 800ee02:	1a9b      	subgt	r3, r3, r2
 800ee04:	18ed      	addgt	r5, r5, r3
 800ee06:	f04f 0900 	mov.w	r9, #0
 800ee0a:	341a      	adds	r4, #26
 800ee0c:	454d      	cmp	r5, r9
 800ee0e:	d11a      	bne.n	800ee46 <_printf_common+0xd6>
 800ee10:	2000      	movs	r0, #0
 800ee12:	e008      	b.n	800ee26 <_printf_common+0xb6>
 800ee14:	2301      	movs	r3, #1
 800ee16:	4652      	mov	r2, sl
 800ee18:	4639      	mov	r1, r7
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	47c0      	blx	r8
 800ee1e:	3001      	adds	r0, #1
 800ee20:	d103      	bne.n	800ee2a <_printf_common+0xba>
 800ee22:	f04f 30ff 	mov.w	r0, #4294967295
 800ee26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2a:	3501      	adds	r5, #1
 800ee2c:	e7c3      	b.n	800edb6 <_printf_common+0x46>
 800ee2e:	18e1      	adds	r1, r4, r3
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	2030      	movs	r0, #48	; 0x30
 800ee34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee38:	4422      	add	r2, r4
 800ee3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee42:	3302      	adds	r3, #2
 800ee44:	e7c5      	b.n	800edd2 <_printf_common+0x62>
 800ee46:	2301      	movs	r3, #1
 800ee48:	4622      	mov	r2, r4
 800ee4a:	4639      	mov	r1, r7
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	47c0      	blx	r8
 800ee50:	3001      	adds	r0, #1
 800ee52:	d0e6      	beq.n	800ee22 <_printf_common+0xb2>
 800ee54:	f109 0901 	add.w	r9, r9, #1
 800ee58:	e7d8      	b.n	800ee0c <_printf_common+0x9c>
	...

0800ee5c <_printf_i>:
 800ee5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ee64:	460c      	mov	r4, r1
 800ee66:	7e09      	ldrb	r1, [r1, #24]
 800ee68:	b085      	sub	sp, #20
 800ee6a:	296e      	cmp	r1, #110	; 0x6e
 800ee6c:	4617      	mov	r7, r2
 800ee6e:	4606      	mov	r6, r0
 800ee70:	4698      	mov	r8, r3
 800ee72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee74:	f000 80b3 	beq.w	800efde <_printf_i+0x182>
 800ee78:	d822      	bhi.n	800eec0 <_printf_i+0x64>
 800ee7a:	2963      	cmp	r1, #99	; 0x63
 800ee7c:	d036      	beq.n	800eeec <_printf_i+0x90>
 800ee7e:	d80a      	bhi.n	800ee96 <_printf_i+0x3a>
 800ee80:	2900      	cmp	r1, #0
 800ee82:	f000 80b9 	beq.w	800eff8 <_printf_i+0x19c>
 800ee86:	2958      	cmp	r1, #88	; 0x58
 800ee88:	f000 8083 	beq.w	800ef92 <_printf_i+0x136>
 800ee8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ee94:	e032      	b.n	800eefc <_printf_i+0xa0>
 800ee96:	2964      	cmp	r1, #100	; 0x64
 800ee98:	d001      	beq.n	800ee9e <_printf_i+0x42>
 800ee9a:	2969      	cmp	r1, #105	; 0x69
 800ee9c:	d1f6      	bne.n	800ee8c <_printf_i+0x30>
 800ee9e:	6820      	ldr	r0, [r4, #0]
 800eea0:	6813      	ldr	r3, [r2, #0]
 800eea2:	0605      	lsls	r5, r0, #24
 800eea4:	f103 0104 	add.w	r1, r3, #4
 800eea8:	d52a      	bpl.n	800ef00 <_printf_i+0xa4>
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6011      	str	r1, [r2, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	da03      	bge.n	800eeba <_printf_i+0x5e>
 800eeb2:	222d      	movs	r2, #45	; 0x2d
 800eeb4:	425b      	negs	r3, r3
 800eeb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eeba:	486f      	ldr	r0, [pc, #444]	; (800f078 <_printf_i+0x21c>)
 800eebc:	220a      	movs	r2, #10
 800eebe:	e039      	b.n	800ef34 <_printf_i+0xd8>
 800eec0:	2973      	cmp	r1, #115	; 0x73
 800eec2:	f000 809d 	beq.w	800f000 <_printf_i+0x1a4>
 800eec6:	d808      	bhi.n	800eeda <_printf_i+0x7e>
 800eec8:	296f      	cmp	r1, #111	; 0x6f
 800eeca:	d020      	beq.n	800ef0e <_printf_i+0xb2>
 800eecc:	2970      	cmp	r1, #112	; 0x70
 800eece:	d1dd      	bne.n	800ee8c <_printf_i+0x30>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	f043 0320 	orr.w	r3, r3, #32
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	e003      	b.n	800eee2 <_printf_i+0x86>
 800eeda:	2975      	cmp	r1, #117	; 0x75
 800eedc:	d017      	beq.n	800ef0e <_printf_i+0xb2>
 800eede:	2978      	cmp	r1, #120	; 0x78
 800eee0:	d1d4      	bne.n	800ee8c <_printf_i+0x30>
 800eee2:	2378      	movs	r3, #120	; 0x78
 800eee4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eee8:	4864      	ldr	r0, [pc, #400]	; (800f07c <_printf_i+0x220>)
 800eeea:	e055      	b.n	800ef98 <_printf_i+0x13c>
 800eeec:	6813      	ldr	r3, [r2, #0]
 800eeee:	1d19      	adds	r1, r3, #4
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6011      	str	r1, [r2, #0]
 800eef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eefc:	2301      	movs	r3, #1
 800eefe:	e08c      	b.n	800f01a <_printf_i+0x1be>
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	6011      	str	r1, [r2, #0]
 800ef04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef08:	bf18      	it	ne
 800ef0a:	b21b      	sxthne	r3, r3
 800ef0c:	e7cf      	b.n	800eeae <_printf_i+0x52>
 800ef0e:	6813      	ldr	r3, [r2, #0]
 800ef10:	6825      	ldr	r5, [r4, #0]
 800ef12:	1d18      	adds	r0, r3, #4
 800ef14:	6010      	str	r0, [r2, #0]
 800ef16:	0628      	lsls	r0, r5, #24
 800ef18:	d501      	bpl.n	800ef1e <_printf_i+0xc2>
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	e002      	b.n	800ef24 <_printf_i+0xc8>
 800ef1e:	0668      	lsls	r0, r5, #25
 800ef20:	d5fb      	bpl.n	800ef1a <_printf_i+0xbe>
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	4854      	ldr	r0, [pc, #336]	; (800f078 <_printf_i+0x21c>)
 800ef26:	296f      	cmp	r1, #111	; 0x6f
 800ef28:	bf14      	ite	ne
 800ef2a:	220a      	movne	r2, #10
 800ef2c:	2208      	moveq	r2, #8
 800ef2e:	2100      	movs	r1, #0
 800ef30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef34:	6865      	ldr	r5, [r4, #4]
 800ef36:	60a5      	str	r5, [r4, #8]
 800ef38:	2d00      	cmp	r5, #0
 800ef3a:	f2c0 8095 	blt.w	800f068 <_printf_i+0x20c>
 800ef3e:	6821      	ldr	r1, [r4, #0]
 800ef40:	f021 0104 	bic.w	r1, r1, #4
 800ef44:	6021      	str	r1, [r4, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d13d      	bne.n	800efc6 <_printf_i+0x16a>
 800ef4a:	2d00      	cmp	r5, #0
 800ef4c:	f040 808e 	bne.w	800f06c <_printf_i+0x210>
 800ef50:	4665      	mov	r5, ip
 800ef52:	2a08      	cmp	r2, #8
 800ef54:	d10b      	bne.n	800ef6e <_printf_i+0x112>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	07db      	lsls	r3, r3, #31
 800ef5a:	d508      	bpl.n	800ef6e <_printf_i+0x112>
 800ef5c:	6923      	ldr	r3, [r4, #16]
 800ef5e:	6862      	ldr	r2, [r4, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	bfde      	ittt	le
 800ef64:	2330      	movle	r3, #48	; 0x30
 800ef66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef6e:	ebac 0305 	sub.w	r3, ip, r5
 800ef72:	6123      	str	r3, [r4, #16]
 800ef74:	f8cd 8000 	str.w	r8, [sp]
 800ef78:	463b      	mov	r3, r7
 800ef7a:	aa03      	add	r2, sp, #12
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	4630      	mov	r0, r6
 800ef80:	f7ff fef6 	bl	800ed70 <_printf_common>
 800ef84:	3001      	adds	r0, #1
 800ef86:	d14d      	bne.n	800f024 <_printf_i+0x1c8>
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8c:	b005      	add	sp, #20
 800ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef92:	4839      	ldr	r0, [pc, #228]	; (800f078 <_printf_i+0x21c>)
 800ef94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ef98:	6813      	ldr	r3, [r2, #0]
 800ef9a:	6821      	ldr	r1, [r4, #0]
 800ef9c:	1d1d      	adds	r5, r3, #4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6015      	str	r5, [r2, #0]
 800efa2:	060a      	lsls	r2, r1, #24
 800efa4:	d50b      	bpl.n	800efbe <_printf_i+0x162>
 800efa6:	07ca      	lsls	r2, r1, #31
 800efa8:	bf44      	itt	mi
 800efaa:	f041 0120 	orrmi.w	r1, r1, #32
 800efae:	6021      	strmi	r1, [r4, #0]
 800efb0:	b91b      	cbnz	r3, 800efba <_printf_i+0x15e>
 800efb2:	6822      	ldr	r2, [r4, #0]
 800efb4:	f022 0220 	bic.w	r2, r2, #32
 800efb8:	6022      	str	r2, [r4, #0]
 800efba:	2210      	movs	r2, #16
 800efbc:	e7b7      	b.n	800ef2e <_printf_i+0xd2>
 800efbe:	064d      	lsls	r5, r1, #25
 800efc0:	bf48      	it	mi
 800efc2:	b29b      	uxthmi	r3, r3
 800efc4:	e7ef      	b.n	800efa6 <_printf_i+0x14a>
 800efc6:	4665      	mov	r5, ip
 800efc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800efcc:	fb02 3311 	mls	r3, r2, r1, r3
 800efd0:	5cc3      	ldrb	r3, [r0, r3]
 800efd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800efd6:	460b      	mov	r3, r1
 800efd8:	2900      	cmp	r1, #0
 800efda:	d1f5      	bne.n	800efc8 <_printf_i+0x16c>
 800efdc:	e7b9      	b.n	800ef52 <_printf_i+0xf6>
 800efde:	6813      	ldr	r3, [r2, #0]
 800efe0:	6825      	ldr	r5, [r4, #0]
 800efe2:	6961      	ldr	r1, [r4, #20]
 800efe4:	1d18      	adds	r0, r3, #4
 800efe6:	6010      	str	r0, [r2, #0]
 800efe8:	0628      	lsls	r0, r5, #24
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	d501      	bpl.n	800eff2 <_printf_i+0x196>
 800efee:	6019      	str	r1, [r3, #0]
 800eff0:	e002      	b.n	800eff8 <_printf_i+0x19c>
 800eff2:	066a      	lsls	r2, r5, #25
 800eff4:	d5fb      	bpl.n	800efee <_printf_i+0x192>
 800eff6:	8019      	strh	r1, [r3, #0]
 800eff8:	2300      	movs	r3, #0
 800effa:	6123      	str	r3, [r4, #16]
 800effc:	4665      	mov	r5, ip
 800effe:	e7b9      	b.n	800ef74 <_printf_i+0x118>
 800f000:	6813      	ldr	r3, [r2, #0]
 800f002:	1d19      	adds	r1, r3, #4
 800f004:	6011      	str	r1, [r2, #0]
 800f006:	681d      	ldr	r5, [r3, #0]
 800f008:	6862      	ldr	r2, [r4, #4]
 800f00a:	2100      	movs	r1, #0
 800f00c:	4628      	mov	r0, r5
 800f00e:	f7f1 f8ff 	bl	8000210 <memchr>
 800f012:	b108      	cbz	r0, 800f018 <_printf_i+0x1bc>
 800f014:	1b40      	subs	r0, r0, r5
 800f016:	6060      	str	r0, [r4, #4]
 800f018:	6863      	ldr	r3, [r4, #4]
 800f01a:	6123      	str	r3, [r4, #16]
 800f01c:	2300      	movs	r3, #0
 800f01e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f022:	e7a7      	b.n	800ef74 <_printf_i+0x118>
 800f024:	6923      	ldr	r3, [r4, #16]
 800f026:	462a      	mov	r2, r5
 800f028:	4639      	mov	r1, r7
 800f02a:	4630      	mov	r0, r6
 800f02c:	47c0      	blx	r8
 800f02e:	3001      	adds	r0, #1
 800f030:	d0aa      	beq.n	800ef88 <_printf_i+0x12c>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	079b      	lsls	r3, r3, #30
 800f036:	d413      	bmi.n	800f060 <_printf_i+0x204>
 800f038:	68e0      	ldr	r0, [r4, #12]
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	4298      	cmp	r0, r3
 800f03e:	bfb8      	it	lt
 800f040:	4618      	movlt	r0, r3
 800f042:	e7a3      	b.n	800ef8c <_printf_i+0x130>
 800f044:	2301      	movs	r3, #1
 800f046:	464a      	mov	r2, r9
 800f048:	4639      	mov	r1, r7
 800f04a:	4630      	mov	r0, r6
 800f04c:	47c0      	blx	r8
 800f04e:	3001      	adds	r0, #1
 800f050:	d09a      	beq.n	800ef88 <_printf_i+0x12c>
 800f052:	3501      	adds	r5, #1
 800f054:	68e3      	ldr	r3, [r4, #12]
 800f056:	9a03      	ldr	r2, [sp, #12]
 800f058:	1a9b      	subs	r3, r3, r2
 800f05a:	42ab      	cmp	r3, r5
 800f05c:	dcf2      	bgt.n	800f044 <_printf_i+0x1e8>
 800f05e:	e7eb      	b.n	800f038 <_printf_i+0x1dc>
 800f060:	2500      	movs	r5, #0
 800f062:	f104 0919 	add.w	r9, r4, #25
 800f066:	e7f5      	b.n	800f054 <_printf_i+0x1f8>
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1ac      	bne.n	800efc6 <_printf_i+0x16a>
 800f06c:	7803      	ldrb	r3, [r0, #0]
 800f06e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f072:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f076:	e76c      	b.n	800ef52 <_printf_i+0xf6>
 800f078:	08013b5c 	.word	0x08013b5c
 800f07c:	08013b6d 	.word	0x08013b6d

0800f080 <_scanf_float>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	469a      	mov	sl, r3
 800f086:	688b      	ldr	r3, [r1, #8]
 800f088:	4616      	mov	r6, r2
 800f08a:	1e5a      	subs	r2, r3, #1
 800f08c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f090:	b087      	sub	sp, #28
 800f092:	bf83      	ittte	hi
 800f094:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800f098:	189b      	addhi	r3, r3, r2
 800f09a:	9301      	strhi	r3, [sp, #4]
 800f09c:	2300      	movls	r3, #0
 800f09e:	bf86      	itte	hi
 800f0a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f0a4:	608b      	strhi	r3, [r1, #8]
 800f0a6:	9301      	strls	r3, [sp, #4]
 800f0a8:	680b      	ldr	r3, [r1, #0]
 800f0aa:	4688      	mov	r8, r1
 800f0ac:	f04f 0b00 	mov.w	fp, #0
 800f0b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f0b4:	f848 3b1c 	str.w	r3, [r8], #28
 800f0b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800f0bc:	4607      	mov	r7, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4645      	mov	r5, r8
 800f0c2:	465a      	mov	r2, fp
 800f0c4:	46d9      	mov	r9, fp
 800f0c6:	f8cd b008 	str.w	fp, [sp, #8]
 800f0ca:	68a1      	ldr	r1, [r4, #8]
 800f0cc:	b181      	cbz	r1, 800f0f0 <_scanf_float+0x70>
 800f0ce:	6833      	ldr	r3, [r6, #0]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	2b49      	cmp	r3, #73	; 0x49
 800f0d4:	d071      	beq.n	800f1ba <_scanf_float+0x13a>
 800f0d6:	d84d      	bhi.n	800f174 <_scanf_float+0xf4>
 800f0d8:	2b39      	cmp	r3, #57	; 0x39
 800f0da:	d840      	bhi.n	800f15e <_scanf_float+0xde>
 800f0dc:	2b31      	cmp	r3, #49	; 0x31
 800f0de:	f080 8088 	bcs.w	800f1f2 <_scanf_float+0x172>
 800f0e2:	2b2d      	cmp	r3, #45	; 0x2d
 800f0e4:	f000 8090 	beq.w	800f208 <_scanf_float+0x188>
 800f0e8:	d815      	bhi.n	800f116 <_scanf_float+0x96>
 800f0ea:	2b2b      	cmp	r3, #43	; 0x2b
 800f0ec:	f000 808c 	beq.w	800f208 <_scanf_float+0x188>
 800f0f0:	f1b9 0f00 	cmp.w	r9, #0
 800f0f4:	d003      	beq.n	800f0fe <_scanf_float+0x7e>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0fc:	6023      	str	r3, [r4, #0]
 800f0fe:	3a01      	subs	r2, #1
 800f100:	2a01      	cmp	r2, #1
 800f102:	f200 80ea 	bhi.w	800f2da <_scanf_float+0x25a>
 800f106:	4545      	cmp	r5, r8
 800f108:	f200 80dc 	bhi.w	800f2c4 <_scanf_float+0x244>
 800f10c:	2601      	movs	r6, #1
 800f10e:	4630      	mov	r0, r6
 800f110:	b007      	add	sp, #28
 800f112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f116:	2b2e      	cmp	r3, #46	; 0x2e
 800f118:	f000 809f 	beq.w	800f25a <_scanf_float+0x1da>
 800f11c:	2b30      	cmp	r3, #48	; 0x30
 800f11e:	d1e7      	bne.n	800f0f0 <_scanf_float+0x70>
 800f120:	6820      	ldr	r0, [r4, #0]
 800f122:	f410 7f80 	tst.w	r0, #256	; 0x100
 800f126:	d064      	beq.n	800f1f2 <_scanf_float+0x172>
 800f128:	9b01      	ldr	r3, [sp, #4]
 800f12a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800f12e:	6020      	str	r0, [r4, #0]
 800f130:	f109 0901 	add.w	r9, r9, #1
 800f134:	b11b      	cbz	r3, 800f13e <_scanf_float+0xbe>
 800f136:	3b01      	subs	r3, #1
 800f138:	3101      	adds	r1, #1
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	60a1      	str	r1, [r4, #8]
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	3b01      	subs	r3, #1
 800f142:	60a3      	str	r3, [r4, #8]
 800f144:	6923      	ldr	r3, [r4, #16]
 800f146:	3301      	adds	r3, #1
 800f148:	6123      	str	r3, [r4, #16]
 800f14a:	6873      	ldr	r3, [r6, #4]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	6073      	str	r3, [r6, #4]
 800f152:	f340 80ac 	ble.w	800f2ae <_scanf_float+0x22e>
 800f156:	6833      	ldr	r3, [r6, #0]
 800f158:	3301      	adds	r3, #1
 800f15a:	6033      	str	r3, [r6, #0]
 800f15c:	e7b5      	b.n	800f0ca <_scanf_float+0x4a>
 800f15e:	2b45      	cmp	r3, #69	; 0x45
 800f160:	f000 8085 	beq.w	800f26e <_scanf_float+0x1ee>
 800f164:	2b46      	cmp	r3, #70	; 0x46
 800f166:	d06a      	beq.n	800f23e <_scanf_float+0x1be>
 800f168:	2b41      	cmp	r3, #65	; 0x41
 800f16a:	d1c1      	bne.n	800f0f0 <_scanf_float+0x70>
 800f16c:	2a01      	cmp	r2, #1
 800f16e:	d1bf      	bne.n	800f0f0 <_scanf_float+0x70>
 800f170:	2202      	movs	r2, #2
 800f172:	e046      	b.n	800f202 <_scanf_float+0x182>
 800f174:	2b65      	cmp	r3, #101	; 0x65
 800f176:	d07a      	beq.n	800f26e <_scanf_float+0x1ee>
 800f178:	d818      	bhi.n	800f1ac <_scanf_float+0x12c>
 800f17a:	2b54      	cmp	r3, #84	; 0x54
 800f17c:	d066      	beq.n	800f24c <_scanf_float+0x1cc>
 800f17e:	d811      	bhi.n	800f1a4 <_scanf_float+0x124>
 800f180:	2b4e      	cmp	r3, #78	; 0x4e
 800f182:	d1b5      	bne.n	800f0f0 <_scanf_float+0x70>
 800f184:	2a00      	cmp	r2, #0
 800f186:	d146      	bne.n	800f216 <_scanf_float+0x196>
 800f188:	f1b9 0f00 	cmp.w	r9, #0
 800f18c:	d145      	bne.n	800f21a <_scanf_float+0x19a>
 800f18e:	6821      	ldr	r1, [r4, #0]
 800f190:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f194:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f198:	d13f      	bne.n	800f21a <_scanf_float+0x19a>
 800f19a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f19e:	6021      	str	r1, [r4, #0]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	e02e      	b.n	800f202 <_scanf_float+0x182>
 800f1a4:	2b59      	cmp	r3, #89	; 0x59
 800f1a6:	d01e      	beq.n	800f1e6 <_scanf_float+0x166>
 800f1a8:	2b61      	cmp	r3, #97	; 0x61
 800f1aa:	e7de      	b.n	800f16a <_scanf_float+0xea>
 800f1ac:	2b6e      	cmp	r3, #110	; 0x6e
 800f1ae:	d0e9      	beq.n	800f184 <_scanf_float+0x104>
 800f1b0:	d815      	bhi.n	800f1de <_scanf_float+0x15e>
 800f1b2:	2b66      	cmp	r3, #102	; 0x66
 800f1b4:	d043      	beq.n	800f23e <_scanf_float+0x1be>
 800f1b6:	2b69      	cmp	r3, #105	; 0x69
 800f1b8:	d19a      	bne.n	800f0f0 <_scanf_float+0x70>
 800f1ba:	f1bb 0f00 	cmp.w	fp, #0
 800f1be:	d138      	bne.n	800f232 <_scanf_float+0x1b2>
 800f1c0:	f1b9 0f00 	cmp.w	r9, #0
 800f1c4:	d197      	bne.n	800f0f6 <_scanf_float+0x76>
 800f1c6:	6821      	ldr	r1, [r4, #0]
 800f1c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f1cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f1d0:	d195      	bne.n	800f0fe <_scanf_float+0x7e>
 800f1d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f1d6:	6021      	str	r1, [r4, #0]
 800f1d8:	f04f 0b01 	mov.w	fp, #1
 800f1dc:	e011      	b.n	800f202 <_scanf_float+0x182>
 800f1de:	2b74      	cmp	r3, #116	; 0x74
 800f1e0:	d034      	beq.n	800f24c <_scanf_float+0x1cc>
 800f1e2:	2b79      	cmp	r3, #121	; 0x79
 800f1e4:	d184      	bne.n	800f0f0 <_scanf_float+0x70>
 800f1e6:	f1bb 0f07 	cmp.w	fp, #7
 800f1ea:	d181      	bne.n	800f0f0 <_scanf_float+0x70>
 800f1ec:	f04f 0b08 	mov.w	fp, #8
 800f1f0:	e007      	b.n	800f202 <_scanf_float+0x182>
 800f1f2:	eb12 0f0b 	cmn.w	r2, fp
 800f1f6:	f47f af7b 	bne.w	800f0f0 <_scanf_float+0x70>
 800f1fa:	6821      	ldr	r1, [r4, #0]
 800f1fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800f200:	6021      	str	r1, [r4, #0]
 800f202:	702b      	strb	r3, [r5, #0]
 800f204:	3501      	adds	r5, #1
 800f206:	e79a      	b.n	800f13e <_scanf_float+0xbe>
 800f208:	6821      	ldr	r1, [r4, #0]
 800f20a:	0608      	lsls	r0, r1, #24
 800f20c:	f57f af70 	bpl.w	800f0f0 <_scanf_float+0x70>
 800f210:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f214:	e7f4      	b.n	800f200 <_scanf_float+0x180>
 800f216:	2a02      	cmp	r2, #2
 800f218:	d047      	beq.n	800f2aa <_scanf_float+0x22a>
 800f21a:	f1bb 0f01 	cmp.w	fp, #1
 800f21e:	d003      	beq.n	800f228 <_scanf_float+0x1a8>
 800f220:	f1bb 0f04 	cmp.w	fp, #4
 800f224:	f47f af64 	bne.w	800f0f0 <_scanf_float+0x70>
 800f228:	f10b 0b01 	add.w	fp, fp, #1
 800f22c:	fa5f fb8b 	uxtb.w	fp, fp
 800f230:	e7e7      	b.n	800f202 <_scanf_float+0x182>
 800f232:	f1bb 0f03 	cmp.w	fp, #3
 800f236:	d0f7      	beq.n	800f228 <_scanf_float+0x1a8>
 800f238:	f1bb 0f05 	cmp.w	fp, #5
 800f23c:	e7f2      	b.n	800f224 <_scanf_float+0x1a4>
 800f23e:	f1bb 0f02 	cmp.w	fp, #2
 800f242:	f47f af55 	bne.w	800f0f0 <_scanf_float+0x70>
 800f246:	f04f 0b03 	mov.w	fp, #3
 800f24a:	e7da      	b.n	800f202 <_scanf_float+0x182>
 800f24c:	f1bb 0f06 	cmp.w	fp, #6
 800f250:	f47f af4e 	bne.w	800f0f0 <_scanf_float+0x70>
 800f254:	f04f 0b07 	mov.w	fp, #7
 800f258:	e7d3      	b.n	800f202 <_scanf_float+0x182>
 800f25a:	6821      	ldr	r1, [r4, #0]
 800f25c:	0588      	lsls	r0, r1, #22
 800f25e:	f57f af47 	bpl.w	800f0f0 <_scanf_float+0x70>
 800f262:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f266:	6021      	str	r1, [r4, #0]
 800f268:	f8cd 9008 	str.w	r9, [sp, #8]
 800f26c:	e7c9      	b.n	800f202 <_scanf_float+0x182>
 800f26e:	6821      	ldr	r1, [r4, #0]
 800f270:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f274:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f278:	d006      	beq.n	800f288 <_scanf_float+0x208>
 800f27a:	0548      	lsls	r0, r1, #21
 800f27c:	f57f af38 	bpl.w	800f0f0 <_scanf_float+0x70>
 800f280:	f1b9 0f00 	cmp.w	r9, #0
 800f284:	f43f af3b 	beq.w	800f0fe <_scanf_float+0x7e>
 800f288:	0588      	lsls	r0, r1, #22
 800f28a:	bf58      	it	pl
 800f28c:	9802      	ldrpl	r0, [sp, #8]
 800f28e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f292:	bf58      	it	pl
 800f294:	eba9 0000 	subpl.w	r0, r9, r0
 800f298:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f29c:	bf58      	it	pl
 800f29e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f2a2:	6021      	str	r1, [r4, #0]
 800f2a4:	f04f 0900 	mov.w	r9, #0
 800f2a8:	e7ab      	b.n	800f202 <_scanf_float+0x182>
 800f2aa:	2203      	movs	r2, #3
 800f2ac:	e7a9      	b.n	800f202 <_scanf_float+0x182>
 800f2ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f2b2:	9205      	str	r2, [sp, #20]
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	4798      	blx	r3
 800f2ba:	9a05      	ldr	r2, [sp, #20]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f43f af04 	beq.w	800f0ca <_scanf_float+0x4a>
 800f2c2:	e715      	b.n	800f0f0 <_scanf_float+0x70>
 800f2c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f2cc:	4632      	mov	r2, r6
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	4798      	blx	r3
 800f2d2:	6923      	ldr	r3, [r4, #16]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	6123      	str	r3, [r4, #16]
 800f2d8:	e715      	b.n	800f106 <_scanf_float+0x86>
 800f2da:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f2de:	2b06      	cmp	r3, #6
 800f2e0:	d80a      	bhi.n	800f2f8 <_scanf_float+0x278>
 800f2e2:	f1bb 0f02 	cmp.w	fp, #2
 800f2e6:	d968      	bls.n	800f3ba <_scanf_float+0x33a>
 800f2e8:	f1ab 0b03 	sub.w	fp, fp, #3
 800f2ec:	fa5f fb8b 	uxtb.w	fp, fp
 800f2f0:	eba5 0b0b 	sub.w	fp, r5, fp
 800f2f4:	455d      	cmp	r5, fp
 800f2f6:	d14b      	bne.n	800f390 <_scanf_float+0x310>
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	05da      	lsls	r2, r3, #23
 800f2fc:	d51f      	bpl.n	800f33e <_scanf_float+0x2be>
 800f2fe:	055b      	lsls	r3, r3, #21
 800f300:	d468      	bmi.n	800f3d4 <_scanf_float+0x354>
 800f302:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	2965      	cmp	r1, #101	; 0x65
 800f30a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f30e:	f105 3bff 	add.w	fp, r5, #4294967295
 800f312:	6123      	str	r3, [r4, #16]
 800f314:	d00d      	beq.n	800f332 <_scanf_float+0x2b2>
 800f316:	2945      	cmp	r1, #69	; 0x45
 800f318:	d00b      	beq.n	800f332 <_scanf_float+0x2b2>
 800f31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f31e:	4632      	mov	r2, r6
 800f320:	4638      	mov	r0, r7
 800f322:	4798      	blx	r3
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	f1a5 0b02 	sub.w	fp, r5, #2
 800f330:	6123      	str	r3, [r4, #16]
 800f332:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f336:	4632      	mov	r2, r6
 800f338:	4638      	mov	r0, r7
 800f33a:	4798      	blx	r3
 800f33c:	465d      	mov	r5, fp
 800f33e:	6826      	ldr	r6, [r4, #0]
 800f340:	f016 0610 	ands.w	r6, r6, #16
 800f344:	d17a      	bne.n	800f43c <_scanf_float+0x3bc>
 800f346:	702e      	strb	r6, [r5, #0]
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f34e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f352:	d142      	bne.n	800f3da <_scanf_float+0x35a>
 800f354:	9b02      	ldr	r3, [sp, #8]
 800f356:	eba9 0303 	sub.w	r3, r9, r3
 800f35a:	425a      	negs	r2, r3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d149      	bne.n	800f3f4 <_scanf_float+0x374>
 800f360:	2200      	movs	r2, #0
 800f362:	4641      	mov	r1, r8
 800f364:	4638      	mov	r0, r7
 800f366:	f000 ffdf 	bl	8010328 <_strtod_r>
 800f36a:	6825      	ldr	r5, [r4, #0]
 800f36c:	f8da 3000 	ldr.w	r3, [sl]
 800f370:	f015 0f02 	tst.w	r5, #2
 800f374:	f103 0204 	add.w	r2, r3, #4
 800f378:	ec59 8b10 	vmov	r8, r9, d0
 800f37c:	f8ca 2000 	str.w	r2, [sl]
 800f380:	d043      	beq.n	800f40a <_scanf_float+0x38a>
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	e9c3 8900 	strd	r8, r9, [r3]
 800f388:	68e3      	ldr	r3, [r4, #12]
 800f38a:	3301      	adds	r3, #1
 800f38c:	60e3      	str	r3, [r4, #12]
 800f38e:	e6be      	b.n	800f10e <_scanf_float+0x8e>
 800f390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f394:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f398:	4632      	mov	r2, r6
 800f39a:	4638      	mov	r0, r7
 800f39c:	4798      	blx	r3
 800f39e:	6923      	ldr	r3, [r4, #16]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	e7a6      	b.n	800f2f4 <_scanf_float+0x274>
 800f3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f3ae:	4632      	mov	r2, r6
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	4798      	blx	r3
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	6123      	str	r3, [r4, #16]
 800f3ba:	4545      	cmp	r5, r8
 800f3bc:	d8f3      	bhi.n	800f3a6 <_scanf_float+0x326>
 800f3be:	e6a5      	b.n	800f10c <_scanf_float+0x8c>
 800f3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f3c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	4638      	mov	r0, r7
 800f3cc:	4798      	blx	r3
 800f3ce:	6923      	ldr	r3, [r4, #16]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	6123      	str	r3, [r4, #16]
 800f3d4:	4545      	cmp	r5, r8
 800f3d6:	d8f3      	bhi.n	800f3c0 <_scanf_float+0x340>
 800f3d8:	e698      	b.n	800f10c <_scanf_float+0x8c>
 800f3da:	9b03      	ldr	r3, [sp, #12]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d0bf      	beq.n	800f360 <_scanf_float+0x2e0>
 800f3e0:	9904      	ldr	r1, [sp, #16]
 800f3e2:	230a      	movs	r3, #10
 800f3e4:	4632      	mov	r2, r6
 800f3e6:	3101      	adds	r1, #1
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f001 f829 	bl	8010440 <_strtol_r>
 800f3ee:	9b03      	ldr	r3, [sp, #12]
 800f3f0:	9d04      	ldr	r5, [sp, #16]
 800f3f2:	1ac2      	subs	r2, r0, r3
 800f3f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f3f8:	429d      	cmp	r5, r3
 800f3fa:	bf28      	it	cs
 800f3fc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f400:	490f      	ldr	r1, [pc, #60]	; (800f440 <_scanf_float+0x3c0>)
 800f402:	4628      	mov	r0, r5
 800f404:	f000 f8e8 	bl	800f5d8 <siprintf>
 800f408:	e7aa      	b.n	800f360 <_scanf_float+0x2e0>
 800f40a:	f015 0504 	ands.w	r5, r5, #4
 800f40e:	d1b8      	bne.n	800f382 <_scanf_float+0x302>
 800f410:	681f      	ldr	r7, [r3, #0]
 800f412:	ee10 2a10 	vmov	r2, s0
 800f416:	464b      	mov	r3, r9
 800f418:	ee10 0a10 	vmov	r0, s0
 800f41c:	4649      	mov	r1, r9
 800f41e:	f7f1 fb9d 	bl	8000b5c <__aeabi_dcmpun>
 800f422:	b128      	cbz	r0, 800f430 <_scanf_float+0x3b0>
 800f424:	4628      	mov	r0, r5
 800f426:	f000 f89d 	bl	800f564 <nanf>
 800f42a:	ed87 0a00 	vstr	s0, [r7]
 800f42e:	e7ab      	b.n	800f388 <_scanf_float+0x308>
 800f430:	4640      	mov	r0, r8
 800f432:	4649      	mov	r1, r9
 800f434:	f7f1 fbf0 	bl	8000c18 <__aeabi_d2f>
 800f438:	6038      	str	r0, [r7, #0]
 800f43a:	e7a5      	b.n	800f388 <_scanf_float+0x308>
 800f43c:	2600      	movs	r6, #0
 800f43e:	e666      	b.n	800f10e <_scanf_float+0x8e>
 800f440:	08013b7e 	.word	0x08013b7e

0800f444 <iprintf>:
 800f444:	b40f      	push	{r0, r1, r2, r3}
 800f446:	4b0a      	ldr	r3, [pc, #40]	; (800f470 <iprintf+0x2c>)
 800f448:	b513      	push	{r0, r1, r4, lr}
 800f44a:	681c      	ldr	r4, [r3, #0]
 800f44c:	b124      	cbz	r4, 800f458 <iprintf+0x14>
 800f44e:	69a3      	ldr	r3, [r4, #24]
 800f450:	b913      	cbnz	r3, 800f458 <iprintf+0x14>
 800f452:	4620      	mov	r0, r4
 800f454:	f002 f81c 	bl	8011490 <__sinit>
 800f458:	ab05      	add	r3, sp, #20
 800f45a:	9a04      	ldr	r2, [sp, #16]
 800f45c:	68a1      	ldr	r1, [r4, #8]
 800f45e:	9301      	str	r3, [sp, #4]
 800f460:	4620      	mov	r0, r4
 800f462:	f003 fc5d 	bl	8012d20 <_vfiprintf_r>
 800f466:	b002      	add	sp, #8
 800f468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f46c:	b004      	add	sp, #16
 800f46e:	4770      	bx	lr
 800f470:	2000000c 	.word	0x2000000c

0800f474 <putchar>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4b08      	ldr	r3, [pc, #32]	; (800f498 <putchar+0x24>)
 800f478:	681c      	ldr	r4, [r3, #0]
 800f47a:	4605      	mov	r5, r0
 800f47c:	b124      	cbz	r4, 800f488 <putchar+0x14>
 800f47e:	69a3      	ldr	r3, [r4, #24]
 800f480:	b913      	cbnz	r3, 800f488 <putchar+0x14>
 800f482:	4620      	mov	r0, r4
 800f484:	f002 f804 	bl	8011490 <__sinit>
 800f488:	68a2      	ldr	r2, [r4, #8]
 800f48a:	4629      	mov	r1, r5
 800f48c:	4620      	mov	r0, r4
 800f48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f492:	f003 beb3 	b.w	80131fc <_putc_r>
 800f496:	bf00      	nop
 800f498:	2000000c 	.word	0x2000000c

0800f49c <_puts_r>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	460e      	mov	r6, r1
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	b118      	cbz	r0, 800f4ac <_puts_r+0x10>
 800f4a4:	6983      	ldr	r3, [r0, #24]
 800f4a6:	b90b      	cbnz	r3, 800f4ac <_puts_r+0x10>
 800f4a8:	f001 fff2 	bl	8011490 <__sinit>
 800f4ac:	69ab      	ldr	r3, [r5, #24]
 800f4ae:	68ac      	ldr	r4, [r5, #8]
 800f4b0:	b913      	cbnz	r3, 800f4b8 <_puts_r+0x1c>
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f001 ffec 	bl	8011490 <__sinit>
 800f4b8:	4b23      	ldr	r3, [pc, #140]	; (800f548 <_puts_r+0xac>)
 800f4ba:	429c      	cmp	r4, r3
 800f4bc:	d117      	bne.n	800f4ee <_puts_r+0x52>
 800f4be:	686c      	ldr	r4, [r5, #4]
 800f4c0:	89a3      	ldrh	r3, [r4, #12]
 800f4c2:	071b      	lsls	r3, r3, #28
 800f4c4:	d51d      	bpl.n	800f502 <_puts_r+0x66>
 800f4c6:	6923      	ldr	r3, [r4, #16]
 800f4c8:	b1db      	cbz	r3, 800f502 <_puts_r+0x66>
 800f4ca:	3e01      	subs	r6, #1
 800f4cc:	68a3      	ldr	r3, [r4, #8]
 800f4ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	60a3      	str	r3, [r4, #8]
 800f4d6:	b9e9      	cbnz	r1, 800f514 <_puts_r+0x78>
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	da2e      	bge.n	800f53a <_puts_r+0x9e>
 800f4dc:	4622      	mov	r2, r4
 800f4de:	210a      	movs	r1, #10
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 ffbf 	bl	8010464 <__swbuf_r>
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	d011      	beq.n	800f50e <_puts_r+0x72>
 800f4ea:	200a      	movs	r0, #10
 800f4ec:	e011      	b.n	800f512 <_puts_r+0x76>
 800f4ee:	4b17      	ldr	r3, [pc, #92]	; (800f54c <_puts_r+0xb0>)
 800f4f0:	429c      	cmp	r4, r3
 800f4f2:	d101      	bne.n	800f4f8 <_puts_r+0x5c>
 800f4f4:	68ac      	ldr	r4, [r5, #8]
 800f4f6:	e7e3      	b.n	800f4c0 <_puts_r+0x24>
 800f4f8:	4b15      	ldr	r3, [pc, #84]	; (800f550 <_puts_r+0xb4>)
 800f4fa:	429c      	cmp	r4, r3
 800f4fc:	bf08      	it	eq
 800f4fe:	68ec      	ldreq	r4, [r5, #12]
 800f500:	e7de      	b.n	800f4c0 <_puts_r+0x24>
 800f502:	4621      	mov	r1, r4
 800f504:	4628      	mov	r0, r5
 800f506:	f001 f811 	bl	801052c <__swsetup_r>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d0dd      	beq.n	800f4ca <_puts_r+0x2e>
 800f50e:	f04f 30ff 	mov.w	r0, #4294967295
 800f512:	bd70      	pop	{r4, r5, r6, pc}
 800f514:	2b00      	cmp	r3, #0
 800f516:	da04      	bge.n	800f522 <_puts_r+0x86>
 800f518:	69a2      	ldr	r2, [r4, #24]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	dc06      	bgt.n	800f52c <_puts_r+0x90>
 800f51e:	290a      	cmp	r1, #10
 800f520:	d004      	beq.n	800f52c <_puts_r+0x90>
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	1c5a      	adds	r2, r3, #1
 800f526:	6022      	str	r2, [r4, #0]
 800f528:	7019      	strb	r1, [r3, #0]
 800f52a:	e7cf      	b.n	800f4cc <_puts_r+0x30>
 800f52c:	4622      	mov	r2, r4
 800f52e:	4628      	mov	r0, r5
 800f530:	f000 ff98 	bl	8010464 <__swbuf_r>
 800f534:	3001      	adds	r0, #1
 800f536:	d1c9      	bne.n	800f4cc <_puts_r+0x30>
 800f538:	e7e9      	b.n	800f50e <_puts_r+0x72>
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	200a      	movs	r0, #10
 800f53e:	1c5a      	adds	r2, r3, #1
 800f540:	6022      	str	r2, [r4, #0]
 800f542:	7018      	strb	r0, [r3, #0]
 800f544:	e7e5      	b.n	800f512 <_puts_r+0x76>
 800f546:	bf00      	nop
 800f548:	08013c08 	.word	0x08013c08
 800f54c:	08013c28 	.word	0x08013c28
 800f550:	08013be8 	.word	0x08013be8

0800f554 <puts>:
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <puts+0xc>)
 800f556:	4601      	mov	r1, r0
 800f558:	6818      	ldr	r0, [r3, #0]
 800f55a:	f7ff bf9f 	b.w	800f49c <_puts_r>
 800f55e:	bf00      	nop
 800f560:	2000000c 	.word	0x2000000c

0800f564 <nanf>:
 800f564:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f56c <nanf+0x8>
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	7fc00000 	.word	0x7fc00000

0800f570 <sniprintf>:
 800f570:	b40c      	push	{r2, r3}
 800f572:	b530      	push	{r4, r5, lr}
 800f574:	4b17      	ldr	r3, [pc, #92]	; (800f5d4 <sniprintf+0x64>)
 800f576:	1e0c      	subs	r4, r1, #0
 800f578:	b09d      	sub	sp, #116	; 0x74
 800f57a:	681d      	ldr	r5, [r3, #0]
 800f57c:	da08      	bge.n	800f590 <sniprintf+0x20>
 800f57e:	238b      	movs	r3, #139	; 0x8b
 800f580:	602b      	str	r3, [r5, #0]
 800f582:	f04f 30ff 	mov.w	r0, #4294967295
 800f586:	b01d      	add	sp, #116	; 0x74
 800f588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f58c:	b002      	add	sp, #8
 800f58e:	4770      	bx	lr
 800f590:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f594:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f598:	bf14      	ite	ne
 800f59a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f59e:	4623      	moveq	r3, r4
 800f5a0:	9304      	str	r3, [sp, #16]
 800f5a2:	9307      	str	r3, [sp, #28]
 800f5a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5a8:	9002      	str	r0, [sp, #8]
 800f5aa:	9006      	str	r0, [sp, #24]
 800f5ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f5b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f5b2:	ab21      	add	r3, sp, #132	; 0x84
 800f5b4:	a902      	add	r1, sp, #8
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	f003 f8e5 	bl	8012788 <_svfiprintf_r>
 800f5be:	1c43      	adds	r3, r0, #1
 800f5c0:	bfbc      	itt	lt
 800f5c2:	238b      	movlt	r3, #139	; 0x8b
 800f5c4:	602b      	strlt	r3, [r5, #0]
 800f5c6:	2c00      	cmp	r4, #0
 800f5c8:	d0dd      	beq.n	800f586 <sniprintf+0x16>
 800f5ca:	9b02      	ldr	r3, [sp, #8]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e7d9      	b.n	800f586 <sniprintf+0x16>
 800f5d2:	bf00      	nop
 800f5d4:	2000000c 	.word	0x2000000c

0800f5d8 <siprintf>:
 800f5d8:	b40e      	push	{r1, r2, r3}
 800f5da:	b500      	push	{lr}
 800f5dc:	b09c      	sub	sp, #112	; 0x70
 800f5de:	ab1d      	add	r3, sp, #116	; 0x74
 800f5e0:	9002      	str	r0, [sp, #8]
 800f5e2:	9006      	str	r0, [sp, #24]
 800f5e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5e8:	4809      	ldr	r0, [pc, #36]	; (800f610 <siprintf+0x38>)
 800f5ea:	9107      	str	r1, [sp, #28]
 800f5ec:	9104      	str	r1, [sp, #16]
 800f5ee:	4909      	ldr	r1, [pc, #36]	; (800f614 <siprintf+0x3c>)
 800f5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5f4:	9105      	str	r1, [sp, #20]
 800f5f6:	6800      	ldr	r0, [r0, #0]
 800f5f8:	9301      	str	r3, [sp, #4]
 800f5fa:	a902      	add	r1, sp, #8
 800f5fc:	f003 f8c4 	bl	8012788 <_svfiprintf_r>
 800f600:	9b02      	ldr	r3, [sp, #8]
 800f602:	2200      	movs	r2, #0
 800f604:	701a      	strb	r2, [r3, #0]
 800f606:	b01c      	add	sp, #112	; 0x70
 800f608:	f85d eb04 	ldr.w	lr, [sp], #4
 800f60c:	b003      	add	sp, #12
 800f60e:	4770      	bx	lr
 800f610:	2000000c 	.word	0x2000000c
 800f614:	ffff0208 	.word	0xffff0208

0800f618 <siscanf>:
 800f618:	b40e      	push	{r1, r2, r3}
 800f61a:	b530      	push	{r4, r5, lr}
 800f61c:	b09c      	sub	sp, #112	; 0x70
 800f61e:	ac1f      	add	r4, sp, #124	; 0x7c
 800f620:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f624:	f854 5b04 	ldr.w	r5, [r4], #4
 800f628:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f62c:	9002      	str	r0, [sp, #8]
 800f62e:	9006      	str	r0, [sp, #24]
 800f630:	f7f0 fde6 	bl	8000200 <strlen>
 800f634:	4b0b      	ldr	r3, [pc, #44]	; (800f664 <siscanf+0x4c>)
 800f636:	9003      	str	r0, [sp, #12]
 800f638:	9007      	str	r0, [sp, #28]
 800f63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f63c:	480a      	ldr	r0, [pc, #40]	; (800f668 <siscanf+0x50>)
 800f63e:	9401      	str	r4, [sp, #4]
 800f640:	2300      	movs	r3, #0
 800f642:	930f      	str	r3, [sp, #60]	; 0x3c
 800f644:	9314      	str	r3, [sp, #80]	; 0x50
 800f646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f64a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f64e:	462a      	mov	r2, r5
 800f650:	4623      	mov	r3, r4
 800f652:	a902      	add	r1, sp, #8
 800f654:	6800      	ldr	r0, [r0, #0]
 800f656:	f003 f9e9 	bl	8012a2c <__ssvfiscanf_r>
 800f65a:	b01c      	add	sp, #112	; 0x70
 800f65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f660:	b003      	add	sp, #12
 800f662:	4770      	bx	lr
 800f664:	0800f68f 	.word	0x0800f68f
 800f668:	2000000c 	.word	0x2000000c

0800f66c <__sread>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	460c      	mov	r4, r1
 800f670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f674:	f003 fdf8 	bl	8013268 <_read_r>
 800f678:	2800      	cmp	r0, #0
 800f67a:	bfab      	itete	ge
 800f67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f67e:	89a3      	ldrhlt	r3, [r4, #12]
 800f680:	181b      	addge	r3, r3, r0
 800f682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f686:	bfac      	ite	ge
 800f688:	6563      	strge	r3, [r4, #84]	; 0x54
 800f68a:	81a3      	strhlt	r3, [r4, #12]
 800f68c:	bd10      	pop	{r4, pc}

0800f68e <__seofread>:
 800f68e:	2000      	movs	r0, #0
 800f690:	4770      	bx	lr

0800f692 <__swrite>:
 800f692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f696:	461f      	mov	r7, r3
 800f698:	898b      	ldrh	r3, [r1, #12]
 800f69a:	05db      	lsls	r3, r3, #23
 800f69c:	4605      	mov	r5, r0
 800f69e:	460c      	mov	r4, r1
 800f6a0:	4616      	mov	r6, r2
 800f6a2:	d505      	bpl.n	800f6b0 <__swrite+0x1e>
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ac:	f002 fac2 	bl	8011c34 <_lseek_r>
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6ba:	81a3      	strh	r3, [r4, #12]
 800f6bc:	4632      	mov	r2, r6
 800f6be:	463b      	mov	r3, r7
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c6:	f000 bf1f 	b.w	8010508 <_write_r>

0800f6ca <__sseek>:
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d2:	f002 faaf 	bl	8011c34 <_lseek_r>
 800f6d6:	1c43      	adds	r3, r0, #1
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	bf15      	itete	ne
 800f6dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6e6:	81a3      	strheq	r3, [r4, #12]
 800f6e8:	bf18      	it	ne
 800f6ea:	81a3      	strhne	r3, [r4, #12]
 800f6ec:	bd10      	pop	{r4, pc}

0800f6ee <__sclose>:
 800f6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f2:	f000 bf89 	b.w	8010608 <_close_r>

0800f6f6 <strcpy>:
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6fc:	f803 2b01 	strb.w	r2, [r3], #1
 800f700:	2a00      	cmp	r2, #0
 800f702:	d1f9      	bne.n	800f6f8 <strcpy+0x2>
 800f704:	4770      	bx	lr

0800f706 <sulp>:
 800f706:	b570      	push	{r4, r5, r6, lr}
 800f708:	4604      	mov	r4, r0
 800f70a:	460d      	mov	r5, r1
 800f70c:	ec45 4b10 	vmov	d0, r4, r5
 800f710:	4616      	mov	r6, r2
 800f712:	f002 fdf5 	bl	8012300 <__ulp>
 800f716:	ec51 0b10 	vmov	r0, r1, d0
 800f71a:	b17e      	cbz	r6, 800f73c <sulp+0x36>
 800f71c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f724:	2b00      	cmp	r3, #0
 800f726:	dd09      	ble.n	800f73c <sulp+0x36>
 800f728:	051b      	lsls	r3, r3, #20
 800f72a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f72e:	2400      	movs	r4, #0
 800f730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f734:	4622      	mov	r2, r4
 800f736:	462b      	mov	r3, r5
 800f738:	f7f0 ff76 	bl	8000628 <__aeabi_dmul>
 800f73c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f740 <_strtod_l>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	461f      	mov	r7, r3
 800f746:	b0a1      	sub	sp, #132	; 0x84
 800f748:	2300      	movs	r3, #0
 800f74a:	4681      	mov	r9, r0
 800f74c:	4638      	mov	r0, r7
 800f74e:	460e      	mov	r6, r1
 800f750:	9217      	str	r2, [sp, #92]	; 0x5c
 800f752:	931c      	str	r3, [sp, #112]	; 0x70
 800f754:	f002 fa5e 	bl	8011c14 <__localeconv_l>
 800f758:	4680      	mov	r8, r0
 800f75a:	6800      	ldr	r0, [r0, #0]
 800f75c:	f7f0 fd50 	bl	8000200 <strlen>
 800f760:	f04f 0a00 	mov.w	sl, #0
 800f764:	4604      	mov	r4, r0
 800f766:	f04f 0b00 	mov.w	fp, #0
 800f76a:	961b      	str	r6, [sp, #108]	; 0x6c
 800f76c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f76e:	781a      	ldrb	r2, [r3, #0]
 800f770:	2a0d      	cmp	r2, #13
 800f772:	d832      	bhi.n	800f7da <_strtod_l+0x9a>
 800f774:	2a09      	cmp	r2, #9
 800f776:	d236      	bcs.n	800f7e6 <_strtod_l+0xa6>
 800f778:	2a00      	cmp	r2, #0
 800f77a:	d03e      	beq.n	800f7fa <_strtod_l+0xba>
 800f77c:	2300      	movs	r3, #0
 800f77e:	930d      	str	r3, [sp, #52]	; 0x34
 800f780:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f782:	782b      	ldrb	r3, [r5, #0]
 800f784:	2b30      	cmp	r3, #48	; 0x30
 800f786:	f040 80ac 	bne.w	800f8e2 <_strtod_l+0x1a2>
 800f78a:	786b      	ldrb	r3, [r5, #1]
 800f78c:	2b58      	cmp	r3, #88	; 0x58
 800f78e:	d001      	beq.n	800f794 <_strtod_l+0x54>
 800f790:	2b78      	cmp	r3, #120	; 0x78
 800f792:	d167      	bne.n	800f864 <_strtod_l+0x124>
 800f794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f796:	9301      	str	r3, [sp, #4]
 800f798:	ab1c      	add	r3, sp, #112	; 0x70
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	9702      	str	r7, [sp, #8]
 800f79e:	ab1d      	add	r3, sp, #116	; 0x74
 800f7a0:	4a88      	ldr	r2, [pc, #544]	; (800f9c4 <_strtod_l+0x284>)
 800f7a2:	a91b      	add	r1, sp, #108	; 0x6c
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	f001 ff4c 	bl	8011642 <__gethex>
 800f7aa:	f010 0407 	ands.w	r4, r0, #7
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	d005      	beq.n	800f7be <_strtod_l+0x7e>
 800f7b2:	2c06      	cmp	r4, #6
 800f7b4:	d12b      	bne.n	800f80e <_strtod_l+0xce>
 800f7b6:	3501      	adds	r5, #1
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	951b      	str	r5, [sp, #108]	; 0x6c
 800f7bc:	930d      	str	r3, [sp, #52]	; 0x34
 800f7be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f040 859a 	bne.w	80102fa <_strtod_l+0xbba>
 800f7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7c8:	b1e3      	cbz	r3, 800f804 <_strtod_l+0xc4>
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f7d0:	ec43 2b10 	vmov	d0, r2, r3
 800f7d4:	b021      	add	sp, #132	; 0x84
 800f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7da:	2a2b      	cmp	r2, #43	; 0x2b
 800f7dc:	d015      	beq.n	800f80a <_strtod_l+0xca>
 800f7de:	2a2d      	cmp	r2, #45	; 0x2d
 800f7e0:	d004      	beq.n	800f7ec <_strtod_l+0xac>
 800f7e2:	2a20      	cmp	r2, #32
 800f7e4:	d1ca      	bne.n	800f77c <_strtod_l+0x3c>
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800f7ea:	e7bf      	b.n	800f76c <_strtod_l+0x2c>
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	920d      	str	r2, [sp, #52]	; 0x34
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800f7f4:	785b      	ldrb	r3, [r3, #1]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1c2      	bne.n	800f780 <_strtod_l+0x40>
 800f7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7fc:	961b      	str	r6, [sp, #108]	; 0x6c
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f040 8579 	bne.w	80102f6 <_strtod_l+0xbb6>
 800f804:	4652      	mov	r2, sl
 800f806:	465b      	mov	r3, fp
 800f808:	e7e2      	b.n	800f7d0 <_strtod_l+0x90>
 800f80a:	2200      	movs	r2, #0
 800f80c:	e7ef      	b.n	800f7ee <_strtod_l+0xae>
 800f80e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f810:	b13a      	cbz	r2, 800f822 <_strtod_l+0xe2>
 800f812:	2135      	movs	r1, #53	; 0x35
 800f814:	a81e      	add	r0, sp, #120	; 0x78
 800f816:	f002 fe6b 	bl	80124f0 <__copybits>
 800f81a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f81c:	4648      	mov	r0, r9
 800f81e:	f002 fad8 	bl	8011dd2 <_Bfree>
 800f822:	3c01      	subs	r4, #1
 800f824:	2c04      	cmp	r4, #4
 800f826:	d806      	bhi.n	800f836 <_strtod_l+0xf6>
 800f828:	e8df f004 	tbb	[pc, r4]
 800f82c:	1714030a 	.word	0x1714030a
 800f830:	0a          	.byte	0x0a
 800f831:	00          	.byte	0x00
 800f832:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f836:	0730      	lsls	r0, r6, #28
 800f838:	d5c1      	bpl.n	800f7be <_strtod_l+0x7e>
 800f83a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f83e:	e7be      	b.n	800f7be <_strtod_l+0x7e>
 800f840:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f846:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f84a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f84e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f852:	e7f0      	b.n	800f836 <_strtod_l+0xf6>
 800f854:	f8df b170 	ldr.w	fp, [pc, #368]	; 800f9c8 <_strtod_l+0x288>
 800f858:	e7ed      	b.n	800f836 <_strtod_l+0xf6>
 800f85a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f85e:	f04f 3aff 	mov.w	sl, #4294967295
 800f862:	e7e8      	b.n	800f836 <_strtod_l+0xf6>
 800f864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	921b      	str	r2, [sp, #108]	; 0x6c
 800f86a:	785b      	ldrb	r3, [r3, #1]
 800f86c:	2b30      	cmp	r3, #48	; 0x30
 800f86e:	d0f9      	beq.n	800f864 <_strtod_l+0x124>
 800f870:	2b00      	cmp	r3, #0
 800f872:	d0a4      	beq.n	800f7be <_strtod_l+0x7e>
 800f874:	2301      	movs	r3, #1
 800f876:	2500      	movs	r5, #0
 800f878:	9306      	str	r3, [sp, #24]
 800f87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f87c:	9308      	str	r3, [sp, #32]
 800f87e:	9507      	str	r5, [sp, #28]
 800f880:	9505      	str	r5, [sp, #20]
 800f882:	220a      	movs	r2, #10
 800f884:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f886:	7807      	ldrb	r7, [r0, #0]
 800f888:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f88c:	b2d9      	uxtb	r1, r3
 800f88e:	2909      	cmp	r1, #9
 800f890:	d929      	bls.n	800f8e6 <_strtod_l+0x1a6>
 800f892:	4622      	mov	r2, r4
 800f894:	f8d8 1000 	ldr.w	r1, [r8]
 800f898:	f003 fd3a 	bl	8013310 <strncmp>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d031      	beq.n	800f904 <_strtod_l+0x1c4>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	9c05      	ldr	r4, [sp, #20]
 800f8a4:	9004      	str	r0, [sp, #16]
 800f8a6:	463b      	mov	r3, r7
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	2b65      	cmp	r3, #101	; 0x65
 800f8ac:	d001      	beq.n	800f8b2 <_strtod_l+0x172>
 800f8ae:	2b45      	cmp	r3, #69	; 0x45
 800f8b0:	d114      	bne.n	800f8dc <_strtod_l+0x19c>
 800f8b2:	b924      	cbnz	r4, 800f8be <_strtod_l+0x17e>
 800f8b4:	b910      	cbnz	r0, 800f8bc <_strtod_l+0x17c>
 800f8b6:	9b06      	ldr	r3, [sp, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d09e      	beq.n	800f7fa <_strtod_l+0xba>
 800f8bc:	2400      	movs	r4, #0
 800f8be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f8c0:	1c73      	adds	r3, r6, #1
 800f8c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800f8c4:	7873      	ldrb	r3, [r6, #1]
 800f8c6:	2b2b      	cmp	r3, #43	; 0x2b
 800f8c8:	d078      	beq.n	800f9bc <_strtod_l+0x27c>
 800f8ca:	2b2d      	cmp	r3, #45	; 0x2d
 800f8cc:	d070      	beq.n	800f9b0 <_strtod_l+0x270>
 800f8ce:	f04f 0c00 	mov.w	ip, #0
 800f8d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f8d6:	2f09      	cmp	r7, #9
 800f8d8:	d97c      	bls.n	800f9d4 <_strtod_l+0x294>
 800f8da:	961b      	str	r6, [sp, #108]	; 0x6c
 800f8dc:	f04f 0e00 	mov.w	lr, #0
 800f8e0:	e09a      	b.n	800fa18 <_strtod_l+0x2d8>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	e7c7      	b.n	800f876 <_strtod_l+0x136>
 800f8e6:	9905      	ldr	r1, [sp, #20]
 800f8e8:	2908      	cmp	r1, #8
 800f8ea:	bfdd      	ittte	le
 800f8ec:	9907      	ldrle	r1, [sp, #28]
 800f8ee:	fb02 3301 	mlale	r3, r2, r1, r3
 800f8f2:	9307      	strle	r3, [sp, #28]
 800f8f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	3001      	adds	r0, #1
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	9305      	str	r3, [sp, #20]
 800f900:	901b      	str	r0, [sp, #108]	; 0x6c
 800f902:	e7bf      	b.n	800f884 <_strtod_l+0x144>
 800f904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f906:	191a      	adds	r2, r3, r4
 800f908:	921b      	str	r2, [sp, #108]	; 0x6c
 800f90a:	9a05      	ldr	r2, [sp, #20]
 800f90c:	5d1b      	ldrb	r3, [r3, r4]
 800f90e:	2a00      	cmp	r2, #0
 800f910:	d037      	beq.n	800f982 <_strtod_l+0x242>
 800f912:	9c05      	ldr	r4, [sp, #20]
 800f914:	4602      	mov	r2, r0
 800f916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f91a:	2909      	cmp	r1, #9
 800f91c:	d913      	bls.n	800f946 <_strtod_l+0x206>
 800f91e:	2101      	movs	r1, #1
 800f920:	9104      	str	r1, [sp, #16]
 800f922:	e7c2      	b.n	800f8aa <_strtod_l+0x16a>
 800f924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	921b      	str	r2, [sp, #108]	; 0x6c
 800f92a:	785b      	ldrb	r3, [r3, #1]
 800f92c:	3001      	adds	r0, #1
 800f92e:	2b30      	cmp	r3, #48	; 0x30
 800f930:	d0f8      	beq.n	800f924 <_strtod_l+0x1e4>
 800f932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f936:	2a08      	cmp	r2, #8
 800f938:	f200 84e4 	bhi.w	8010304 <_strtod_l+0xbc4>
 800f93c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f93e:	9208      	str	r2, [sp, #32]
 800f940:	4602      	mov	r2, r0
 800f942:	2000      	movs	r0, #0
 800f944:	4604      	mov	r4, r0
 800f946:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800f94a:	f100 0101 	add.w	r1, r0, #1
 800f94e:	d012      	beq.n	800f976 <_strtod_l+0x236>
 800f950:	440a      	add	r2, r1
 800f952:	eb00 0c04 	add.w	ip, r0, r4
 800f956:	4621      	mov	r1, r4
 800f958:	270a      	movs	r7, #10
 800f95a:	458c      	cmp	ip, r1
 800f95c:	d113      	bne.n	800f986 <_strtod_l+0x246>
 800f95e:	1821      	adds	r1, r4, r0
 800f960:	2908      	cmp	r1, #8
 800f962:	f104 0401 	add.w	r4, r4, #1
 800f966:	4404      	add	r4, r0
 800f968:	dc19      	bgt.n	800f99e <_strtod_l+0x25e>
 800f96a:	9b07      	ldr	r3, [sp, #28]
 800f96c:	210a      	movs	r1, #10
 800f96e:	fb01 e303 	mla	r3, r1, r3, lr
 800f972:	9307      	str	r3, [sp, #28]
 800f974:	2100      	movs	r1, #0
 800f976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f978:	1c58      	adds	r0, r3, #1
 800f97a:	901b      	str	r0, [sp, #108]	; 0x6c
 800f97c:	785b      	ldrb	r3, [r3, #1]
 800f97e:	4608      	mov	r0, r1
 800f980:	e7c9      	b.n	800f916 <_strtod_l+0x1d6>
 800f982:	9805      	ldr	r0, [sp, #20]
 800f984:	e7d3      	b.n	800f92e <_strtod_l+0x1ee>
 800f986:	2908      	cmp	r1, #8
 800f988:	f101 0101 	add.w	r1, r1, #1
 800f98c:	dc03      	bgt.n	800f996 <_strtod_l+0x256>
 800f98e:	9b07      	ldr	r3, [sp, #28]
 800f990:	437b      	muls	r3, r7
 800f992:	9307      	str	r3, [sp, #28]
 800f994:	e7e1      	b.n	800f95a <_strtod_l+0x21a>
 800f996:	2910      	cmp	r1, #16
 800f998:	bfd8      	it	le
 800f99a:	437d      	mulle	r5, r7
 800f99c:	e7dd      	b.n	800f95a <_strtod_l+0x21a>
 800f99e:	2c10      	cmp	r4, #16
 800f9a0:	bfdc      	itt	le
 800f9a2:	210a      	movle	r1, #10
 800f9a4:	fb01 e505 	mlale	r5, r1, r5, lr
 800f9a8:	e7e4      	b.n	800f974 <_strtod_l+0x234>
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	9304      	str	r3, [sp, #16]
 800f9ae:	e781      	b.n	800f8b4 <_strtod_l+0x174>
 800f9b0:	f04f 0c01 	mov.w	ip, #1
 800f9b4:	1cb3      	adds	r3, r6, #2
 800f9b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800f9b8:	78b3      	ldrb	r3, [r6, #2]
 800f9ba:	e78a      	b.n	800f8d2 <_strtod_l+0x192>
 800f9bc:	f04f 0c00 	mov.w	ip, #0
 800f9c0:	e7f8      	b.n	800f9b4 <_strtod_l+0x274>
 800f9c2:	bf00      	nop
 800f9c4:	08013b84 	.word	0x08013b84
 800f9c8:	7ff00000 	.word	0x7ff00000
 800f9cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9ce:	1c5f      	adds	r7, r3, #1
 800f9d0:	971b      	str	r7, [sp, #108]	; 0x6c
 800f9d2:	785b      	ldrb	r3, [r3, #1]
 800f9d4:	2b30      	cmp	r3, #48	; 0x30
 800f9d6:	d0f9      	beq.n	800f9cc <_strtod_l+0x28c>
 800f9d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800f9dc:	2f08      	cmp	r7, #8
 800f9de:	f63f af7d 	bhi.w	800f8dc <_strtod_l+0x19c>
 800f9e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f9e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800f9ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9ec:	1c5f      	adds	r7, r3, #1
 800f9ee:	971b      	str	r7, [sp, #108]	; 0x6c
 800f9f0:	785b      	ldrb	r3, [r3, #1]
 800f9f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800f9f6:	f1b8 0f09 	cmp.w	r8, #9
 800f9fa:	d937      	bls.n	800fa6c <_strtod_l+0x32c>
 800f9fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f9fe:	1a7f      	subs	r7, r7, r1
 800fa00:	2f08      	cmp	r7, #8
 800fa02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fa06:	dc37      	bgt.n	800fa78 <_strtod_l+0x338>
 800fa08:	45be      	cmp	lr, r7
 800fa0a:	bfa8      	it	ge
 800fa0c:	46be      	movge	lr, r7
 800fa0e:	f1bc 0f00 	cmp.w	ip, #0
 800fa12:	d001      	beq.n	800fa18 <_strtod_l+0x2d8>
 800fa14:	f1ce 0e00 	rsb	lr, lr, #0
 800fa18:	2c00      	cmp	r4, #0
 800fa1a:	d151      	bne.n	800fac0 <_strtod_l+0x380>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	f47f aece 	bne.w	800f7be <_strtod_l+0x7e>
 800fa22:	9a06      	ldr	r2, [sp, #24]
 800fa24:	2a00      	cmp	r2, #0
 800fa26:	f47f aeca 	bne.w	800f7be <_strtod_l+0x7e>
 800fa2a:	9a04      	ldr	r2, [sp, #16]
 800fa2c:	2a00      	cmp	r2, #0
 800fa2e:	f47f aee4 	bne.w	800f7fa <_strtod_l+0xba>
 800fa32:	2b4e      	cmp	r3, #78	; 0x4e
 800fa34:	d027      	beq.n	800fa86 <_strtod_l+0x346>
 800fa36:	dc21      	bgt.n	800fa7c <_strtod_l+0x33c>
 800fa38:	2b49      	cmp	r3, #73	; 0x49
 800fa3a:	f47f aede 	bne.w	800f7fa <_strtod_l+0xba>
 800fa3e:	49a0      	ldr	r1, [pc, #640]	; (800fcc0 <_strtod_l+0x580>)
 800fa40:	a81b      	add	r0, sp, #108	; 0x6c
 800fa42:	f002 f831 	bl	8011aa8 <__match>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f43f aed7 	beq.w	800f7fa <_strtod_l+0xba>
 800fa4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa4e:	499d      	ldr	r1, [pc, #628]	; (800fcc4 <_strtod_l+0x584>)
 800fa50:	3b01      	subs	r3, #1
 800fa52:	a81b      	add	r0, sp, #108	; 0x6c
 800fa54:	931b      	str	r3, [sp, #108]	; 0x6c
 800fa56:	f002 f827 	bl	8011aa8 <__match>
 800fa5a:	b910      	cbnz	r0, 800fa62 <_strtod_l+0x322>
 800fa5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa5e:	3301      	adds	r3, #1
 800fa60:	931b      	str	r3, [sp, #108]	; 0x6c
 800fa62:	f8df b274 	ldr.w	fp, [pc, #628]	; 800fcd8 <_strtod_l+0x598>
 800fa66:	f04f 0a00 	mov.w	sl, #0
 800fa6a:	e6a8      	b.n	800f7be <_strtod_l+0x7e>
 800fa6c:	210a      	movs	r1, #10
 800fa6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fa72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fa76:	e7b8      	b.n	800f9ea <_strtod_l+0x2aa>
 800fa78:	46be      	mov	lr, r7
 800fa7a:	e7c8      	b.n	800fa0e <_strtod_l+0x2ce>
 800fa7c:	2b69      	cmp	r3, #105	; 0x69
 800fa7e:	d0de      	beq.n	800fa3e <_strtod_l+0x2fe>
 800fa80:	2b6e      	cmp	r3, #110	; 0x6e
 800fa82:	f47f aeba 	bne.w	800f7fa <_strtod_l+0xba>
 800fa86:	4990      	ldr	r1, [pc, #576]	; (800fcc8 <_strtod_l+0x588>)
 800fa88:	a81b      	add	r0, sp, #108	; 0x6c
 800fa8a:	f002 f80d 	bl	8011aa8 <__match>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	f43f aeb3 	beq.w	800f7fa <_strtod_l+0xba>
 800fa94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	2b28      	cmp	r3, #40	; 0x28
 800fa9a:	d10e      	bne.n	800faba <_strtod_l+0x37a>
 800fa9c:	aa1e      	add	r2, sp, #120	; 0x78
 800fa9e:	498b      	ldr	r1, [pc, #556]	; (800fccc <_strtod_l+0x58c>)
 800faa0:	a81b      	add	r0, sp, #108	; 0x6c
 800faa2:	f002 f815 	bl	8011ad0 <__hexnan>
 800faa6:	2805      	cmp	r0, #5
 800faa8:	d107      	bne.n	800faba <_strtod_l+0x37a>
 800faaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800faac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fab0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fab4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fab8:	e681      	b.n	800f7be <_strtod_l+0x7e>
 800faba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800fce0 <_strtod_l+0x5a0>
 800fabe:	e7d2      	b.n	800fa66 <_strtod_l+0x326>
 800fac0:	ebae 0302 	sub.w	r3, lr, r2
 800fac4:	9306      	str	r3, [sp, #24]
 800fac6:	9b05      	ldr	r3, [sp, #20]
 800fac8:	9807      	ldr	r0, [sp, #28]
 800faca:	2b00      	cmp	r3, #0
 800facc:	bf08      	it	eq
 800face:	4623      	moveq	r3, r4
 800fad0:	2c10      	cmp	r4, #16
 800fad2:	9305      	str	r3, [sp, #20]
 800fad4:	46a0      	mov	r8, r4
 800fad6:	bfa8      	it	ge
 800fad8:	f04f 0810 	movge.w	r8, #16
 800fadc:	f7f0 fd2a 	bl	8000534 <__aeabi_ui2d>
 800fae0:	2c09      	cmp	r4, #9
 800fae2:	4682      	mov	sl, r0
 800fae4:	468b      	mov	fp, r1
 800fae6:	dc13      	bgt.n	800fb10 <_strtod_l+0x3d0>
 800fae8:	9b06      	ldr	r3, [sp, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f43f ae67 	beq.w	800f7be <_strtod_l+0x7e>
 800faf0:	9b06      	ldr	r3, [sp, #24]
 800faf2:	dd7a      	ble.n	800fbea <_strtod_l+0x4aa>
 800faf4:	2b16      	cmp	r3, #22
 800faf6:	dc61      	bgt.n	800fbbc <_strtod_l+0x47c>
 800faf8:	4a75      	ldr	r2, [pc, #468]	; (800fcd0 <_strtod_l+0x590>)
 800fafa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fafe:	e9de 0100 	ldrd	r0, r1, [lr]
 800fb02:	4652      	mov	r2, sl
 800fb04:	465b      	mov	r3, fp
 800fb06:	f7f0 fd8f 	bl	8000628 <__aeabi_dmul>
 800fb0a:	4682      	mov	sl, r0
 800fb0c:	468b      	mov	fp, r1
 800fb0e:	e656      	b.n	800f7be <_strtod_l+0x7e>
 800fb10:	4b6f      	ldr	r3, [pc, #444]	; (800fcd0 <_strtod_l+0x590>)
 800fb12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fb16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb1a:	f7f0 fd85 	bl	8000628 <__aeabi_dmul>
 800fb1e:	4606      	mov	r6, r0
 800fb20:	4628      	mov	r0, r5
 800fb22:	460f      	mov	r7, r1
 800fb24:	f7f0 fd06 	bl	8000534 <__aeabi_ui2d>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	4639      	mov	r1, r7
 800fb30:	f7f0 fbc4 	bl	80002bc <__adddf3>
 800fb34:	2c0f      	cmp	r4, #15
 800fb36:	4682      	mov	sl, r0
 800fb38:	468b      	mov	fp, r1
 800fb3a:	ddd5      	ble.n	800fae8 <_strtod_l+0x3a8>
 800fb3c:	9b06      	ldr	r3, [sp, #24]
 800fb3e:	eba4 0808 	sub.w	r8, r4, r8
 800fb42:	4498      	add	r8, r3
 800fb44:	f1b8 0f00 	cmp.w	r8, #0
 800fb48:	f340 8096 	ble.w	800fc78 <_strtod_l+0x538>
 800fb4c:	f018 030f 	ands.w	r3, r8, #15
 800fb50:	d00a      	beq.n	800fb68 <_strtod_l+0x428>
 800fb52:	495f      	ldr	r1, [pc, #380]	; (800fcd0 <_strtod_l+0x590>)
 800fb54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fb58:	4652      	mov	r2, sl
 800fb5a:	465b      	mov	r3, fp
 800fb5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb60:	f7f0 fd62 	bl	8000628 <__aeabi_dmul>
 800fb64:	4682      	mov	sl, r0
 800fb66:	468b      	mov	fp, r1
 800fb68:	f038 080f 	bics.w	r8, r8, #15
 800fb6c:	d073      	beq.n	800fc56 <_strtod_l+0x516>
 800fb6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fb72:	dd47      	ble.n	800fc04 <_strtod_l+0x4c4>
 800fb74:	2400      	movs	r4, #0
 800fb76:	46a0      	mov	r8, r4
 800fb78:	9407      	str	r4, [sp, #28]
 800fb7a:	9405      	str	r4, [sp, #20]
 800fb7c:	2322      	movs	r3, #34	; 0x22
 800fb7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800fcd8 <_strtod_l+0x598>
 800fb82:	f8c9 3000 	str.w	r3, [r9]
 800fb86:	f04f 0a00 	mov.w	sl, #0
 800fb8a:	9b07      	ldr	r3, [sp, #28]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f43f ae16 	beq.w	800f7be <_strtod_l+0x7e>
 800fb92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fb94:	4648      	mov	r0, r9
 800fb96:	f002 f91c 	bl	8011dd2 <_Bfree>
 800fb9a:	9905      	ldr	r1, [sp, #20]
 800fb9c:	4648      	mov	r0, r9
 800fb9e:	f002 f918 	bl	8011dd2 <_Bfree>
 800fba2:	4641      	mov	r1, r8
 800fba4:	4648      	mov	r0, r9
 800fba6:	f002 f914 	bl	8011dd2 <_Bfree>
 800fbaa:	9907      	ldr	r1, [sp, #28]
 800fbac:	4648      	mov	r0, r9
 800fbae:	f002 f910 	bl	8011dd2 <_Bfree>
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4648      	mov	r0, r9
 800fbb6:	f002 f90c 	bl	8011dd2 <_Bfree>
 800fbba:	e600      	b.n	800f7be <_strtod_l+0x7e>
 800fbbc:	9a06      	ldr	r2, [sp, #24]
 800fbbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	dbba      	blt.n	800fb3c <_strtod_l+0x3fc>
 800fbc6:	4d42      	ldr	r5, [pc, #264]	; (800fcd0 <_strtod_l+0x590>)
 800fbc8:	f1c4 040f 	rsb	r4, r4, #15
 800fbcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	465b      	mov	r3, fp
 800fbd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd8:	f7f0 fd26 	bl	8000628 <__aeabi_dmul>
 800fbdc:	9b06      	ldr	r3, [sp, #24]
 800fbde:	1b1c      	subs	r4, r3, r4
 800fbe0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fbe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbe8:	e78d      	b.n	800fb06 <_strtod_l+0x3c6>
 800fbea:	f113 0f16 	cmn.w	r3, #22
 800fbee:	dba5      	blt.n	800fb3c <_strtod_l+0x3fc>
 800fbf0:	4a37      	ldr	r2, [pc, #220]	; (800fcd0 <_strtod_l+0x590>)
 800fbf2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800fbf6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800fbfa:	4650      	mov	r0, sl
 800fbfc:	4659      	mov	r1, fp
 800fbfe:	f7f0 fe3d 	bl	800087c <__aeabi_ddiv>
 800fc02:	e782      	b.n	800fb0a <_strtod_l+0x3ca>
 800fc04:	2300      	movs	r3, #0
 800fc06:	4e33      	ldr	r6, [pc, #204]	; (800fcd4 <_strtod_l+0x594>)
 800fc08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fc0c:	4650      	mov	r0, sl
 800fc0e:	4659      	mov	r1, fp
 800fc10:	461d      	mov	r5, r3
 800fc12:	f1b8 0f01 	cmp.w	r8, #1
 800fc16:	dc21      	bgt.n	800fc5c <_strtod_l+0x51c>
 800fc18:	b10b      	cbz	r3, 800fc1e <_strtod_l+0x4de>
 800fc1a:	4682      	mov	sl, r0
 800fc1c:	468b      	mov	fp, r1
 800fc1e:	4b2d      	ldr	r3, [pc, #180]	; (800fcd4 <_strtod_l+0x594>)
 800fc20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fc24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fc28:	4652      	mov	r2, sl
 800fc2a:	465b      	mov	r3, fp
 800fc2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fc30:	f7f0 fcfa 	bl	8000628 <__aeabi_dmul>
 800fc34:	4b28      	ldr	r3, [pc, #160]	; (800fcd8 <_strtod_l+0x598>)
 800fc36:	460a      	mov	r2, r1
 800fc38:	400b      	ands	r3, r1
 800fc3a:	4928      	ldr	r1, [pc, #160]	; (800fcdc <_strtod_l+0x59c>)
 800fc3c:	428b      	cmp	r3, r1
 800fc3e:	4682      	mov	sl, r0
 800fc40:	d898      	bhi.n	800fb74 <_strtod_l+0x434>
 800fc42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fc46:	428b      	cmp	r3, r1
 800fc48:	bf86      	itte	hi
 800fc4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fce4 <_strtod_l+0x5a4>
 800fc4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800fc52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fc56:	2300      	movs	r3, #0
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	e077      	b.n	800fd4c <_strtod_l+0x60c>
 800fc5c:	f018 0f01 	tst.w	r8, #1
 800fc60:	d006      	beq.n	800fc70 <_strtod_l+0x530>
 800fc62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	f7f0 fcdd 	bl	8000628 <__aeabi_dmul>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	3501      	adds	r5, #1
 800fc72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fc76:	e7cc      	b.n	800fc12 <_strtod_l+0x4d2>
 800fc78:	d0ed      	beq.n	800fc56 <_strtod_l+0x516>
 800fc7a:	f1c8 0800 	rsb	r8, r8, #0
 800fc7e:	f018 020f 	ands.w	r2, r8, #15
 800fc82:	d00a      	beq.n	800fc9a <_strtod_l+0x55a>
 800fc84:	4b12      	ldr	r3, [pc, #72]	; (800fcd0 <_strtod_l+0x590>)
 800fc86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc8a:	4650      	mov	r0, sl
 800fc8c:	4659      	mov	r1, fp
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	f7f0 fdf3 	bl	800087c <__aeabi_ddiv>
 800fc96:	4682      	mov	sl, r0
 800fc98:	468b      	mov	fp, r1
 800fc9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fc9e:	d0da      	beq.n	800fc56 <_strtod_l+0x516>
 800fca0:	f1b8 0f1f 	cmp.w	r8, #31
 800fca4:	dd20      	ble.n	800fce8 <_strtod_l+0x5a8>
 800fca6:	2400      	movs	r4, #0
 800fca8:	46a0      	mov	r8, r4
 800fcaa:	9407      	str	r4, [sp, #28]
 800fcac:	9405      	str	r4, [sp, #20]
 800fcae:	2322      	movs	r3, #34	; 0x22
 800fcb0:	f04f 0a00 	mov.w	sl, #0
 800fcb4:	f04f 0b00 	mov.w	fp, #0
 800fcb8:	f8c9 3000 	str.w	r3, [r9]
 800fcbc:	e765      	b.n	800fb8a <_strtod_l+0x44a>
 800fcbe:	bf00      	nop
 800fcc0:	08013b51 	.word	0x08013b51
 800fcc4:	08013bdb 	.word	0x08013bdb
 800fcc8:	08013b59 	.word	0x08013b59
 800fccc:	08013b98 	.word	0x08013b98
 800fcd0:	08013c80 	.word	0x08013c80
 800fcd4:	08013c58 	.word	0x08013c58
 800fcd8:	7ff00000 	.word	0x7ff00000
 800fcdc:	7ca00000 	.word	0x7ca00000
 800fce0:	fff80000 	.word	0xfff80000
 800fce4:	7fefffff 	.word	0x7fefffff
 800fce8:	f018 0310 	ands.w	r3, r8, #16
 800fcec:	bf18      	it	ne
 800fcee:	236a      	movne	r3, #106	; 0x6a
 800fcf0:	4da0      	ldr	r5, [pc, #640]	; (800ff74 <_strtod_l+0x834>)
 800fcf2:	9304      	str	r3, [sp, #16]
 800fcf4:	4650      	mov	r0, sl
 800fcf6:	4659      	mov	r1, fp
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f1b8 0f00 	cmp.w	r8, #0
 800fcfe:	f300 810a 	bgt.w	800ff16 <_strtod_l+0x7d6>
 800fd02:	b10b      	cbz	r3, 800fd08 <_strtod_l+0x5c8>
 800fd04:	4682      	mov	sl, r0
 800fd06:	468b      	mov	fp, r1
 800fd08:	9b04      	ldr	r3, [sp, #16]
 800fd0a:	b1bb      	cbz	r3, 800fd3c <_strtod_l+0x5fc>
 800fd0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fd10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	4659      	mov	r1, fp
 800fd18:	dd10      	ble.n	800fd3c <_strtod_l+0x5fc>
 800fd1a:	2b1f      	cmp	r3, #31
 800fd1c:	f340 8107 	ble.w	800ff2e <_strtod_l+0x7ee>
 800fd20:	2b34      	cmp	r3, #52	; 0x34
 800fd22:	bfde      	ittt	le
 800fd24:	3b20      	suble	r3, #32
 800fd26:	f04f 32ff 	movle.w	r2, #4294967295
 800fd2a:	fa02 f303 	lslle.w	r3, r2, r3
 800fd2e:	f04f 0a00 	mov.w	sl, #0
 800fd32:	bfcc      	ite	gt
 800fd34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fd38:	ea03 0b01 	andle.w	fp, r3, r1
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 fed8 	bl	8000af8 <__aeabi_dcmpeq>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d1ac      	bne.n	800fca6 <_strtod_l+0x566>
 800fd4c:	9b07      	ldr	r3, [sp, #28]
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	9a05      	ldr	r2, [sp, #20]
 800fd52:	9908      	ldr	r1, [sp, #32]
 800fd54:	4623      	mov	r3, r4
 800fd56:	4648      	mov	r0, r9
 800fd58:	f002 f88d 	bl	8011e76 <__s2b>
 800fd5c:	9007      	str	r0, [sp, #28]
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	f43f af08 	beq.w	800fb74 <_strtod_l+0x434>
 800fd64:	9a06      	ldr	r2, [sp, #24]
 800fd66:	9b06      	ldr	r3, [sp, #24]
 800fd68:	2a00      	cmp	r2, #0
 800fd6a:	f1c3 0300 	rsb	r3, r3, #0
 800fd6e:	bfa8      	it	ge
 800fd70:	2300      	movge	r3, #0
 800fd72:	930e      	str	r3, [sp, #56]	; 0x38
 800fd74:	2400      	movs	r4, #0
 800fd76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fd7a:	9316      	str	r3, [sp, #88]	; 0x58
 800fd7c:	46a0      	mov	r8, r4
 800fd7e:	9b07      	ldr	r3, [sp, #28]
 800fd80:	4648      	mov	r0, r9
 800fd82:	6859      	ldr	r1, [r3, #4]
 800fd84:	f001 fff1 	bl	8011d6a <_Balloc>
 800fd88:	9005      	str	r0, [sp, #20]
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f43f aef6 	beq.w	800fb7c <_strtod_l+0x43c>
 800fd90:	9b07      	ldr	r3, [sp, #28]
 800fd92:	691a      	ldr	r2, [r3, #16]
 800fd94:	3202      	adds	r2, #2
 800fd96:	f103 010c 	add.w	r1, r3, #12
 800fd9a:	0092      	lsls	r2, r2, #2
 800fd9c:	300c      	adds	r0, #12
 800fd9e:	f001 ffd9 	bl	8011d54 <memcpy>
 800fda2:	aa1e      	add	r2, sp, #120	; 0x78
 800fda4:	a91d      	add	r1, sp, #116	; 0x74
 800fda6:	ec4b ab10 	vmov	d0, sl, fp
 800fdaa:	4648      	mov	r0, r9
 800fdac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800fdb0:	f002 fb1c 	bl	80123ec <__d2b>
 800fdb4:	901c      	str	r0, [sp, #112]	; 0x70
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	f43f aee0 	beq.w	800fb7c <_strtod_l+0x43c>
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	4648      	mov	r0, r9
 800fdc0:	f002 f8e5 	bl	8011f8e <__i2b>
 800fdc4:	4680      	mov	r8, r0
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f43f aed8 	beq.w	800fb7c <_strtod_l+0x43c>
 800fdcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fdce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fdd0:	2e00      	cmp	r6, #0
 800fdd2:	bfab      	itete	ge
 800fdd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800fdd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fdd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800fdda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800fddc:	bfac      	ite	ge
 800fdde:	18f7      	addge	r7, r6, r3
 800fde0:	1b9d      	sublt	r5, r3, r6
 800fde2:	9b04      	ldr	r3, [sp, #16]
 800fde4:	1af6      	subs	r6, r6, r3
 800fde6:	4416      	add	r6, r2
 800fde8:	4b63      	ldr	r3, [pc, #396]	; (800ff78 <_strtod_l+0x838>)
 800fdea:	3e01      	subs	r6, #1
 800fdec:	429e      	cmp	r6, r3
 800fdee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fdf2:	f280 80af 	bge.w	800ff54 <_strtod_l+0x814>
 800fdf6:	1b9b      	subs	r3, r3, r6
 800fdf8:	2b1f      	cmp	r3, #31
 800fdfa:	eba2 0203 	sub.w	r2, r2, r3
 800fdfe:	f04f 0101 	mov.w	r1, #1
 800fe02:	f300 809b 	bgt.w	800ff3c <_strtod_l+0x7fc>
 800fe06:	fa01 f303 	lsl.w	r3, r1, r3
 800fe0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe10:	18be      	adds	r6, r7, r2
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	42b7      	cmp	r7, r6
 800fe16:	4415      	add	r5, r2
 800fe18:	441d      	add	r5, r3
 800fe1a:	463b      	mov	r3, r7
 800fe1c:	bfa8      	it	ge
 800fe1e:	4633      	movge	r3, r6
 800fe20:	42ab      	cmp	r3, r5
 800fe22:	bfa8      	it	ge
 800fe24:	462b      	movge	r3, r5
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	bfc2      	ittt	gt
 800fe2a:	1af6      	subgt	r6, r6, r3
 800fe2c:	1aed      	subgt	r5, r5, r3
 800fe2e:	1aff      	subgt	r7, r7, r3
 800fe30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe32:	b1bb      	cbz	r3, 800fe64 <_strtod_l+0x724>
 800fe34:	4641      	mov	r1, r8
 800fe36:	461a      	mov	r2, r3
 800fe38:	4648      	mov	r0, r9
 800fe3a:	f002 f947 	bl	80120cc <__pow5mult>
 800fe3e:	4680      	mov	r8, r0
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f43f ae9b 	beq.w	800fb7c <_strtod_l+0x43c>
 800fe46:	4601      	mov	r1, r0
 800fe48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fe4a:	4648      	mov	r0, r9
 800fe4c:	f002 f8a8 	bl	8011fa0 <__multiply>
 800fe50:	900c      	str	r0, [sp, #48]	; 0x30
 800fe52:	2800      	cmp	r0, #0
 800fe54:	f43f ae92 	beq.w	800fb7c <_strtod_l+0x43c>
 800fe58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fe5a:	4648      	mov	r0, r9
 800fe5c:	f001 ffb9 	bl	8011dd2 <_Bfree>
 800fe60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe62:	931c      	str	r3, [sp, #112]	; 0x70
 800fe64:	2e00      	cmp	r6, #0
 800fe66:	dc7a      	bgt.n	800ff5e <_strtod_l+0x81e>
 800fe68:	9b06      	ldr	r3, [sp, #24]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	dd08      	ble.n	800fe80 <_strtod_l+0x740>
 800fe6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fe70:	9905      	ldr	r1, [sp, #20]
 800fe72:	4648      	mov	r0, r9
 800fe74:	f002 f92a 	bl	80120cc <__pow5mult>
 800fe78:	9005      	str	r0, [sp, #20]
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	f43f ae7e 	beq.w	800fb7c <_strtod_l+0x43c>
 800fe80:	2d00      	cmp	r5, #0
 800fe82:	dd08      	ble.n	800fe96 <_strtod_l+0x756>
 800fe84:	462a      	mov	r2, r5
 800fe86:	9905      	ldr	r1, [sp, #20]
 800fe88:	4648      	mov	r0, r9
 800fe8a:	f002 f96d 	bl	8012168 <__lshift>
 800fe8e:	9005      	str	r0, [sp, #20]
 800fe90:	2800      	cmp	r0, #0
 800fe92:	f43f ae73 	beq.w	800fb7c <_strtod_l+0x43c>
 800fe96:	2f00      	cmp	r7, #0
 800fe98:	dd08      	ble.n	800feac <_strtod_l+0x76c>
 800fe9a:	4641      	mov	r1, r8
 800fe9c:	463a      	mov	r2, r7
 800fe9e:	4648      	mov	r0, r9
 800fea0:	f002 f962 	bl	8012168 <__lshift>
 800fea4:	4680      	mov	r8, r0
 800fea6:	2800      	cmp	r0, #0
 800fea8:	f43f ae68 	beq.w	800fb7c <_strtod_l+0x43c>
 800feac:	9a05      	ldr	r2, [sp, #20]
 800feae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800feb0:	4648      	mov	r0, r9
 800feb2:	f002 f9c7 	bl	8012244 <__mdiff>
 800feb6:	4604      	mov	r4, r0
 800feb8:	2800      	cmp	r0, #0
 800feba:	f43f ae5f 	beq.w	800fb7c <_strtod_l+0x43c>
 800febe:	68c3      	ldr	r3, [r0, #12]
 800fec0:	930c      	str	r3, [sp, #48]	; 0x30
 800fec2:	2300      	movs	r3, #0
 800fec4:	60c3      	str	r3, [r0, #12]
 800fec6:	4641      	mov	r1, r8
 800fec8:	f002 f9a2 	bl	8012210 <__mcmp>
 800fecc:	2800      	cmp	r0, #0
 800fece:	da55      	bge.n	800ff7c <_strtod_l+0x83c>
 800fed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fed2:	b9e3      	cbnz	r3, 800ff0e <_strtod_l+0x7ce>
 800fed4:	f1ba 0f00 	cmp.w	sl, #0
 800fed8:	d119      	bne.n	800ff0e <_strtod_l+0x7ce>
 800feda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fede:	b9b3      	cbnz	r3, 800ff0e <_strtod_l+0x7ce>
 800fee0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fee4:	0d1b      	lsrs	r3, r3, #20
 800fee6:	051b      	lsls	r3, r3, #20
 800fee8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800feec:	d90f      	bls.n	800ff0e <_strtod_l+0x7ce>
 800feee:	6963      	ldr	r3, [r4, #20]
 800fef0:	b913      	cbnz	r3, 800fef8 <_strtod_l+0x7b8>
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	dd0a      	ble.n	800ff0e <_strtod_l+0x7ce>
 800fef8:	4621      	mov	r1, r4
 800fefa:	2201      	movs	r2, #1
 800fefc:	4648      	mov	r0, r9
 800fefe:	f002 f933 	bl	8012168 <__lshift>
 800ff02:	4641      	mov	r1, r8
 800ff04:	4604      	mov	r4, r0
 800ff06:	f002 f983 	bl	8012210 <__mcmp>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	dc67      	bgt.n	800ffde <_strtod_l+0x89e>
 800ff0e:	9b04      	ldr	r3, [sp, #16]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d171      	bne.n	800fff8 <_strtod_l+0x8b8>
 800ff14:	e63d      	b.n	800fb92 <_strtod_l+0x452>
 800ff16:	f018 0f01 	tst.w	r8, #1
 800ff1a:	d004      	beq.n	800ff26 <_strtod_l+0x7e6>
 800ff1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff20:	f7f0 fb82 	bl	8000628 <__aeabi_dmul>
 800ff24:	2301      	movs	r3, #1
 800ff26:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff2a:	3508      	adds	r5, #8
 800ff2c:	e6e5      	b.n	800fcfa <_strtod_l+0x5ba>
 800ff2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff32:	fa02 f303 	lsl.w	r3, r2, r3
 800ff36:	ea03 0a0a 	and.w	sl, r3, sl
 800ff3a:	e6ff      	b.n	800fd3c <_strtod_l+0x5fc>
 800ff3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ff40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ff44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ff48:	36e2      	adds	r6, #226	; 0xe2
 800ff4a:	fa01 f306 	lsl.w	r3, r1, r6
 800ff4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff50:	910f      	str	r1, [sp, #60]	; 0x3c
 800ff52:	e75d      	b.n	800fe10 <_strtod_l+0x6d0>
 800ff54:	2300      	movs	r3, #0
 800ff56:	930a      	str	r3, [sp, #40]	; 0x28
 800ff58:	2301      	movs	r3, #1
 800ff5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff5c:	e758      	b.n	800fe10 <_strtod_l+0x6d0>
 800ff5e:	4632      	mov	r2, r6
 800ff60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ff62:	4648      	mov	r0, r9
 800ff64:	f002 f900 	bl	8012168 <__lshift>
 800ff68:	901c      	str	r0, [sp, #112]	; 0x70
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	f47f af7c 	bne.w	800fe68 <_strtod_l+0x728>
 800ff70:	e604      	b.n	800fb7c <_strtod_l+0x43c>
 800ff72:	bf00      	nop
 800ff74:	08013bb0 	.word	0x08013bb0
 800ff78:	fffffc02 	.word	0xfffffc02
 800ff7c:	465d      	mov	r5, fp
 800ff7e:	f040 8086 	bne.w	801008e <_strtod_l+0x94e>
 800ff82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff88:	b32a      	cbz	r2, 800ffd6 <_strtod_l+0x896>
 800ff8a:	4aaf      	ldr	r2, [pc, #700]	; (8010248 <_strtod_l+0xb08>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d153      	bne.n	8010038 <_strtod_l+0x8f8>
 800ff90:	9b04      	ldr	r3, [sp, #16]
 800ff92:	4650      	mov	r0, sl
 800ff94:	b1d3      	cbz	r3, 800ffcc <_strtod_l+0x88c>
 800ff96:	4aad      	ldr	r2, [pc, #692]	; (801024c <_strtod_l+0xb0c>)
 800ff98:	402a      	ands	r2, r5
 800ff9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ff9e:	f04f 31ff 	mov.w	r1, #4294967295
 800ffa2:	d816      	bhi.n	800ffd2 <_strtod_l+0x892>
 800ffa4:	0d12      	lsrs	r2, r2, #20
 800ffa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ffaa:	fa01 f303 	lsl.w	r3, r1, r3
 800ffae:	4298      	cmp	r0, r3
 800ffb0:	d142      	bne.n	8010038 <_strtod_l+0x8f8>
 800ffb2:	4ba7      	ldr	r3, [pc, #668]	; (8010250 <_strtod_l+0xb10>)
 800ffb4:	429d      	cmp	r5, r3
 800ffb6:	d102      	bne.n	800ffbe <_strtod_l+0x87e>
 800ffb8:	3001      	adds	r0, #1
 800ffba:	f43f addf 	beq.w	800fb7c <_strtod_l+0x43c>
 800ffbe:	4ba3      	ldr	r3, [pc, #652]	; (801024c <_strtod_l+0xb0c>)
 800ffc0:	402b      	ands	r3, r5
 800ffc2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ffc6:	f04f 0a00 	mov.w	sl, #0
 800ffca:	e7a0      	b.n	800ff0e <_strtod_l+0x7ce>
 800ffcc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd0:	e7ed      	b.n	800ffae <_strtod_l+0x86e>
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	e7eb      	b.n	800ffae <_strtod_l+0x86e>
 800ffd6:	bb7b      	cbnz	r3, 8010038 <_strtod_l+0x8f8>
 800ffd8:	f1ba 0f00 	cmp.w	sl, #0
 800ffdc:	d12c      	bne.n	8010038 <_strtod_l+0x8f8>
 800ffde:	9904      	ldr	r1, [sp, #16]
 800ffe0:	4a9a      	ldr	r2, [pc, #616]	; (801024c <_strtod_l+0xb0c>)
 800ffe2:	465b      	mov	r3, fp
 800ffe4:	b1f1      	cbz	r1, 8010024 <_strtod_l+0x8e4>
 800ffe6:	ea02 010b 	and.w	r1, r2, fp
 800ffea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ffee:	dc19      	bgt.n	8010024 <_strtod_l+0x8e4>
 800fff0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fff4:	f77f ae5b 	ble.w	800fcae <_strtod_l+0x56e>
 800fff8:	4a96      	ldr	r2, [pc, #600]	; (8010254 <_strtod_l+0xb14>)
 800fffa:	2300      	movs	r3, #0
 800fffc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010000:	4650      	mov	r0, sl
 8010002:	4659      	mov	r1, fp
 8010004:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010008:	f7f0 fb0e 	bl	8000628 <__aeabi_dmul>
 801000c:	4682      	mov	sl, r0
 801000e:	468b      	mov	fp, r1
 8010010:	2900      	cmp	r1, #0
 8010012:	f47f adbe 	bne.w	800fb92 <_strtod_l+0x452>
 8010016:	2800      	cmp	r0, #0
 8010018:	f47f adbb 	bne.w	800fb92 <_strtod_l+0x452>
 801001c:	2322      	movs	r3, #34	; 0x22
 801001e:	f8c9 3000 	str.w	r3, [r9]
 8010022:	e5b6      	b.n	800fb92 <_strtod_l+0x452>
 8010024:	4013      	ands	r3, r2
 8010026:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801002a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801002e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010032:	f04f 3aff 	mov.w	sl, #4294967295
 8010036:	e76a      	b.n	800ff0e <_strtod_l+0x7ce>
 8010038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801003a:	b193      	cbz	r3, 8010062 <_strtod_l+0x922>
 801003c:	422b      	tst	r3, r5
 801003e:	f43f af66 	beq.w	800ff0e <_strtod_l+0x7ce>
 8010042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010044:	9a04      	ldr	r2, [sp, #16]
 8010046:	4650      	mov	r0, sl
 8010048:	4659      	mov	r1, fp
 801004a:	b173      	cbz	r3, 801006a <_strtod_l+0x92a>
 801004c:	f7ff fb5b 	bl	800f706 <sulp>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010058:	f7f0 f930 	bl	80002bc <__adddf3>
 801005c:	4682      	mov	sl, r0
 801005e:	468b      	mov	fp, r1
 8010060:	e755      	b.n	800ff0e <_strtod_l+0x7ce>
 8010062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010064:	ea13 0f0a 	tst.w	r3, sl
 8010068:	e7e9      	b.n	801003e <_strtod_l+0x8fe>
 801006a:	f7ff fb4c 	bl	800f706 <sulp>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010076:	f7f0 f91f 	bl	80002b8 <__aeabi_dsub>
 801007a:	2200      	movs	r2, #0
 801007c:	2300      	movs	r3, #0
 801007e:	4682      	mov	sl, r0
 8010080:	468b      	mov	fp, r1
 8010082:	f7f0 fd39 	bl	8000af8 <__aeabi_dcmpeq>
 8010086:	2800      	cmp	r0, #0
 8010088:	f47f ae11 	bne.w	800fcae <_strtod_l+0x56e>
 801008c:	e73f      	b.n	800ff0e <_strtod_l+0x7ce>
 801008e:	4641      	mov	r1, r8
 8010090:	4620      	mov	r0, r4
 8010092:	f002 f9fa 	bl	801248a <__ratio>
 8010096:	ec57 6b10 	vmov	r6, r7, d0
 801009a:	2200      	movs	r2, #0
 801009c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80100a0:	ee10 0a10 	vmov	r0, s0
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 fd3b 	bl	8000b20 <__aeabi_dcmple>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d077      	beq.n	801019e <_strtod_l+0xa5e>
 80100ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d04a      	beq.n	801014a <_strtod_l+0xa0a>
 80100b4:	4b68      	ldr	r3, [pc, #416]	; (8010258 <_strtod_l+0xb18>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80100bc:	4f66      	ldr	r7, [pc, #408]	; (8010258 <_strtod_l+0xb18>)
 80100be:	2600      	movs	r6, #0
 80100c0:	4b62      	ldr	r3, [pc, #392]	; (801024c <_strtod_l+0xb0c>)
 80100c2:	402b      	ands	r3, r5
 80100c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80100c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80100c8:	4b64      	ldr	r3, [pc, #400]	; (801025c <_strtod_l+0xb1c>)
 80100ca:	429a      	cmp	r2, r3
 80100cc:	f040 80ce 	bne.w	801026c <_strtod_l+0xb2c>
 80100d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80100d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80100dc:	ec4b ab10 	vmov	d0, sl, fp
 80100e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80100e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80100e8:	f002 f90a 	bl	8012300 <__ulp>
 80100ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100f0:	ec53 2b10 	vmov	r2, r3, d0
 80100f4:	f7f0 fa98 	bl	8000628 <__aeabi_dmul>
 80100f8:	4652      	mov	r2, sl
 80100fa:	465b      	mov	r3, fp
 80100fc:	f7f0 f8de 	bl	80002bc <__adddf3>
 8010100:	460b      	mov	r3, r1
 8010102:	4952      	ldr	r1, [pc, #328]	; (801024c <_strtod_l+0xb0c>)
 8010104:	4a56      	ldr	r2, [pc, #344]	; (8010260 <_strtod_l+0xb20>)
 8010106:	4019      	ands	r1, r3
 8010108:	4291      	cmp	r1, r2
 801010a:	4682      	mov	sl, r0
 801010c:	d95b      	bls.n	80101c6 <_strtod_l+0xa86>
 801010e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010110:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010114:	4293      	cmp	r3, r2
 8010116:	d103      	bne.n	8010120 <_strtod_l+0x9e0>
 8010118:	9b08      	ldr	r3, [sp, #32]
 801011a:	3301      	adds	r3, #1
 801011c:	f43f ad2e 	beq.w	800fb7c <_strtod_l+0x43c>
 8010120:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010250 <_strtod_l+0xb10>
 8010124:	f04f 3aff 	mov.w	sl, #4294967295
 8010128:	991c      	ldr	r1, [sp, #112]	; 0x70
 801012a:	4648      	mov	r0, r9
 801012c:	f001 fe51 	bl	8011dd2 <_Bfree>
 8010130:	9905      	ldr	r1, [sp, #20]
 8010132:	4648      	mov	r0, r9
 8010134:	f001 fe4d 	bl	8011dd2 <_Bfree>
 8010138:	4641      	mov	r1, r8
 801013a:	4648      	mov	r0, r9
 801013c:	f001 fe49 	bl	8011dd2 <_Bfree>
 8010140:	4621      	mov	r1, r4
 8010142:	4648      	mov	r0, r9
 8010144:	f001 fe45 	bl	8011dd2 <_Bfree>
 8010148:	e619      	b.n	800fd7e <_strtod_l+0x63e>
 801014a:	f1ba 0f00 	cmp.w	sl, #0
 801014e:	d11a      	bne.n	8010186 <_strtod_l+0xa46>
 8010150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010154:	b9eb      	cbnz	r3, 8010192 <_strtod_l+0xa52>
 8010156:	2200      	movs	r2, #0
 8010158:	4b3f      	ldr	r3, [pc, #252]	; (8010258 <_strtod_l+0xb18>)
 801015a:	4630      	mov	r0, r6
 801015c:	4639      	mov	r1, r7
 801015e:	f7f0 fcd5 	bl	8000b0c <__aeabi_dcmplt>
 8010162:	b9c8      	cbnz	r0, 8010198 <_strtod_l+0xa58>
 8010164:	4630      	mov	r0, r6
 8010166:	4639      	mov	r1, r7
 8010168:	2200      	movs	r2, #0
 801016a:	4b3e      	ldr	r3, [pc, #248]	; (8010264 <_strtod_l+0xb24>)
 801016c:	f7f0 fa5c 	bl	8000628 <__aeabi_dmul>
 8010170:	4606      	mov	r6, r0
 8010172:	460f      	mov	r7, r1
 8010174:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010178:	9618      	str	r6, [sp, #96]	; 0x60
 801017a:	9319      	str	r3, [sp, #100]	; 0x64
 801017c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010180:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010184:	e79c      	b.n	80100c0 <_strtod_l+0x980>
 8010186:	f1ba 0f01 	cmp.w	sl, #1
 801018a:	d102      	bne.n	8010192 <_strtod_l+0xa52>
 801018c:	2d00      	cmp	r5, #0
 801018e:	f43f ad8e 	beq.w	800fcae <_strtod_l+0x56e>
 8010192:	2200      	movs	r2, #0
 8010194:	4b34      	ldr	r3, [pc, #208]	; (8010268 <_strtod_l+0xb28>)
 8010196:	e78f      	b.n	80100b8 <_strtod_l+0x978>
 8010198:	2600      	movs	r6, #0
 801019a:	4f32      	ldr	r7, [pc, #200]	; (8010264 <_strtod_l+0xb24>)
 801019c:	e7ea      	b.n	8010174 <_strtod_l+0xa34>
 801019e:	4b31      	ldr	r3, [pc, #196]	; (8010264 <_strtod_l+0xb24>)
 80101a0:	4630      	mov	r0, r6
 80101a2:	4639      	mov	r1, r7
 80101a4:	2200      	movs	r2, #0
 80101a6:	f7f0 fa3f 	bl	8000628 <__aeabi_dmul>
 80101aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101ac:	4606      	mov	r6, r0
 80101ae:	460f      	mov	r7, r1
 80101b0:	b933      	cbnz	r3, 80101c0 <_strtod_l+0xa80>
 80101b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101b6:	9010      	str	r0, [sp, #64]	; 0x40
 80101b8:	9311      	str	r3, [sp, #68]	; 0x44
 80101ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80101be:	e7df      	b.n	8010180 <_strtod_l+0xa40>
 80101c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80101c4:	e7f9      	b.n	80101ba <_strtod_l+0xa7a>
 80101c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80101ca:	9b04      	ldr	r3, [sp, #16]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1ab      	bne.n	8010128 <_strtod_l+0x9e8>
 80101d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101d4:	0d1b      	lsrs	r3, r3, #20
 80101d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101d8:	051b      	lsls	r3, r3, #20
 80101da:	429a      	cmp	r2, r3
 80101dc:	465d      	mov	r5, fp
 80101de:	d1a3      	bne.n	8010128 <_strtod_l+0x9e8>
 80101e0:	4639      	mov	r1, r7
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7f0 fcd0 	bl	8000b88 <__aeabi_d2iz>
 80101e8:	f7f0 f9b4 	bl	8000554 <__aeabi_i2d>
 80101ec:	460b      	mov	r3, r1
 80101ee:	4602      	mov	r2, r0
 80101f0:	4639      	mov	r1, r7
 80101f2:	4630      	mov	r0, r6
 80101f4:	f7f0 f860 	bl	80002b8 <__aeabi_dsub>
 80101f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101fa:	4606      	mov	r6, r0
 80101fc:	460f      	mov	r7, r1
 80101fe:	b933      	cbnz	r3, 801020e <_strtod_l+0xace>
 8010200:	f1ba 0f00 	cmp.w	sl, #0
 8010204:	d103      	bne.n	801020e <_strtod_l+0xace>
 8010206:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801020a:	2d00      	cmp	r5, #0
 801020c:	d06d      	beq.n	80102ea <_strtod_l+0xbaa>
 801020e:	a30a      	add	r3, pc, #40	; (adr r3, 8010238 <_strtod_l+0xaf8>)
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	4630      	mov	r0, r6
 8010216:	4639      	mov	r1, r7
 8010218:	f7f0 fc78 	bl	8000b0c <__aeabi_dcmplt>
 801021c:	2800      	cmp	r0, #0
 801021e:	f47f acb8 	bne.w	800fb92 <_strtod_l+0x452>
 8010222:	a307      	add	r3, pc, #28	; (adr r3, 8010240 <_strtod_l+0xb00>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	4630      	mov	r0, r6
 801022a:	4639      	mov	r1, r7
 801022c:	f7f0 fc8c 	bl	8000b48 <__aeabi_dcmpgt>
 8010230:	2800      	cmp	r0, #0
 8010232:	f43f af79 	beq.w	8010128 <_strtod_l+0x9e8>
 8010236:	e4ac      	b.n	800fb92 <_strtod_l+0x452>
 8010238:	94a03595 	.word	0x94a03595
 801023c:	3fdfffff 	.word	0x3fdfffff
 8010240:	35afe535 	.word	0x35afe535
 8010244:	3fe00000 	.word	0x3fe00000
 8010248:	000fffff 	.word	0x000fffff
 801024c:	7ff00000 	.word	0x7ff00000
 8010250:	7fefffff 	.word	0x7fefffff
 8010254:	39500000 	.word	0x39500000
 8010258:	3ff00000 	.word	0x3ff00000
 801025c:	7fe00000 	.word	0x7fe00000
 8010260:	7c9fffff 	.word	0x7c9fffff
 8010264:	3fe00000 	.word	0x3fe00000
 8010268:	bff00000 	.word	0xbff00000
 801026c:	9b04      	ldr	r3, [sp, #16]
 801026e:	b333      	cbz	r3, 80102be <_strtod_l+0xb7e>
 8010270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010272:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010276:	d822      	bhi.n	80102be <_strtod_l+0xb7e>
 8010278:	a327      	add	r3, pc, #156	; (adr r3, 8010318 <_strtod_l+0xbd8>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	4630      	mov	r0, r6
 8010280:	4639      	mov	r1, r7
 8010282:	f7f0 fc4d 	bl	8000b20 <__aeabi_dcmple>
 8010286:	b1a0      	cbz	r0, 80102b2 <_strtod_l+0xb72>
 8010288:	4639      	mov	r1, r7
 801028a:	4630      	mov	r0, r6
 801028c:	f7f0 fca4 	bl	8000bd8 <__aeabi_d2uiz>
 8010290:	2800      	cmp	r0, #0
 8010292:	bf08      	it	eq
 8010294:	2001      	moveq	r0, #1
 8010296:	f7f0 f94d 	bl	8000534 <__aeabi_ui2d>
 801029a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	bb03      	cbnz	r3, 80102e4 <_strtod_l+0xba4>
 80102a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102a6:	9012      	str	r0, [sp, #72]	; 0x48
 80102a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80102aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80102ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80102b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80102be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80102c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80102c6:	f002 f81b 	bl	8012300 <__ulp>
 80102ca:	4650      	mov	r0, sl
 80102cc:	ec53 2b10 	vmov	r2, r3, d0
 80102d0:	4659      	mov	r1, fp
 80102d2:	f7f0 f9a9 	bl	8000628 <__aeabi_dmul>
 80102d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80102da:	f7ef ffef 	bl	80002bc <__adddf3>
 80102de:	4682      	mov	sl, r0
 80102e0:	468b      	mov	fp, r1
 80102e2:	e772      	b.n	80101ca <_strtod_l+0xa8a>
 80102e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80102e8:	e7df      	b.n	80102aa <_strtod_l+0xb6a>
 80102ea:	a30d      	add	r3, pc, #52	; (adr r3, 8010320 <_strtod_l+0xbe0>)
 80102ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f0:	f7f0 fc0c 	bl	8000b0c <__aeabi_dcmplt>
 80102f4:	e79c      	b.n	8010230 <_strtod_l+0xaf0>
 80102f6:	2300      	movs	r3, #0
 80102f8:	930d      	str	r3, [sp, #52]	; 0x34
 80102fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80102fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102fe:	6013      	str	r3, [r2, #0]
 8010300:	f7ff ba61 	b.w	800f7c6 <_strtod_l+0x86>
 8010304:	2b65      	cmp	r3, #101	; 0x65
 8010306:	f04f 0200 	mov.w	r2, #0
 801030a:	f43f ab4e 	beq.w	800f9aa <_strtod_l+0x26a>
 801030e:	2101      	movs	r1, #1
 8010310:	4614      	mov	r4, r2
 8010312:	9104      	str	r1, [sp, #16]
 8010314:	f7ff bacb 	b.w	800f8ae <_strtod_l+0x16e>
 8010318:	ffc00000 	.word	0xffc00000
 801031c:	41dfffff 	.word	0x41dfffff
 8010320:	94a03595 	.word	0x94a03595
 8010324:	3fcfffff 	.word	0x3fcfffff

08010328 <_strtod_r>:
 8010328:	4b05      	ldr	r3, [pc, #20]	; (8010340 <_strtod_r+0x18>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	b410      	push	{r4}
 801032e:	6a1b      	ldr	r3, [r3, #32]
 8010330:	4c04      	ldr	r4, [pc, #16]	; (8010344 <_strtod_r+0x1c>)
 8010332:	2b00      	cmp	r3, #0
 8010334:	bf08      	it	eq
 8010336:	4623      	moveq	r3, r4
 8010338:	f85d 4b04 	ldr.w	r4, [sp], #4
 801033c:	f7ff ba00 	b.w	800f740 <_strtod_l>
 8010340:	2000000c 	.word	0x2000000c
 8010344:	20000070 	.word	0x20000070

08010348 <_strtol_l.isra.0>:
 8010348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801034c:	4680      	mov	r8, r0
 801034e:	4689      	mov	r9, r1
 8010350:	4692      	mov	sl, r2
 8010352:	461e      	mov	r6, r3
 8010354:	460f      	mov	r7, r1
 8010356:	463d      	mov	r5, r7
 8010358:	9808      	ldr	r0, [sp, #32]
 801035a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801035e:	f001 fc47 	bl	8011bf0 <__locale_ctype_ptr_l>
 8010362:	4420      	add	r0, r4
 8010364:	7843      	ldrb	r3, [r0, #1]
 8010366:	f013 0308 	ands.w	r3, r3, #8
 801036a:	d132      	bne.n	80103d2 <_strtol_l.isra.0+0x8a>
 801036c:	2c2d      	cmp	r4, #45	; 0x2d
 801036e:	d132      	bne.n	80103d6 <_strtol_l.isra.0+0x8e>
 8010370:	787c      	ldrb	r4, [r7, #1]
 8010372:	1cbd      	adds	r5, r7, #2
 8010374:	2201      	movs	r2, #1
 8010376:	2e00      	cmp	r6, #0
 8010378:	d05d      	beq.n	8010436 <_strtol_l.isra.0+0xee>
 801037a:	2e10      	cmp	r6, #16
 801037c:	d109      	bne.n	8010392 <_strtol_l.isra.0+0x4a>
 801037e:	2c30      	cmp	r4, #48	; 0x30
 8010380:	d107      	bne.n	8010392 <_strtol_l.isra.0+0x4a>
 8010382:	782b      	ldrb	r3, [r5, #0]
 8010384:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010388:	2b58      	cmp	r3, #88	; 0x58
 801038a:	d14f      	bne.n	801042c <_strtol_l.isra.0+0xe4>
 801038c:	786c      	ldrb	r4, [r5, #1]
 801038e:	2610      	movs	r6, #16
 8010390:	3502      	adds	r5, #2
 8010392:	2a00      	cmp	r2, #0
 8010394:	bf14      	ite	ne
 8010396:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801039a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801039e:	2700      	movs	r7, #0
 80103a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80103a4:	4638      	mov	r0, r7
 80103a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80103aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80103ae:	2b09      	cmp	r3, #9
 80103b0:	d817      	bhi.n	80103e2 <_strtol_l.isra.0+0x9a>
 80103b2:	461c      	mov	r4, r3
 80103b4:	42a6      	cmp	r6, r4
 80103b6:	dd23      	ble.n	8010400 <_strtol_l.isra.0+0xb8>
 80103b8:	1c7b      	adds	r3, r7, #1
 80103ba:	d007      	beq.n	80103cc <_strtol_l.isra.0+0x84>
 80103bc:	4584      	cmp	ip, r0
 80103be:	d31c      	bcc.n	80103fa <_strtol_l.isra.0+0xb2>
 80103c0:	d101      	bne.n	80103c6 <_strtol_l.isra.0+0x7e>
 80103c2:	45a6      	cmp	lr, r4
 80103c4:	db19      	blt.n	80103fa <_strtol_l.isra.0+0xb2>
 80103c6:	fb00 4006 	mla	r0, r0, r6, r4
 80103ca:	2701      	movs	r7, #1
 80103cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103d0:	e7eb      	b.n	80103aa <_strtol_l.isra.0+0x62>
 80103d2:	462f      	mov	r7, r5
 80103d4:	e7bf      	b.n	8010356 <_strtol_l.isra.0+0xe>
 80103d6:	2c2b      	cmp	r4, #43	; 0x2b
 80103d8:	bf04      	itt	eq
 80103da:	1cbd      	addeq	r5, r7, #2
 80103dc:	787c      	ldrbeq	r4, [r7, #1]
 80103de:	461a      	mov	r2, r3
 80103e0:	e7c9      	b.n	8010376 <_strtol_l.isra.0+0x2e>
 80103e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80103e6:	2b19      	cmp	r3, #25
 80103e8:	d801      	bhi.n	80103ee <_strtol_l.isra.0+0xa6>
 80103ea:	3c37      	subs	r4, #55	; 0x37
 80103ec:	e7e2      	b.n	80103b4 <_strtol_l.isra.0+0x6c>
 80103ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80103f2:	2b19      	cmp	r3, #25
 80103f4:	d804      	bhi.n	8010400 <_strtol_l.isra.0+0xb8>
 80103f6:	3c57      	subs	r4, #87	; 0x57
 80103f8:	e7dc      	b.n	80103b4 <_strtol_l.isra.0+0x6c>
 80103fa:	f04f 37ff 	mov.w	r7, #4294967295
 80103fe:	e7e5      	b.n	80103cc <_strtol_l.isra.0+0x84>
 8010400:	1c7b      	adds	r3, r7, #1
 8010402:	d108      	bne.n	8010416 <_strtol_l.isra.0+0xce>
 8010404:	2322      	movs	r3, #34	; 0x22
 8010406:	f8c8 3000 	str.w	r3, [r8]
 801040a:	4608      	mov	r0, r1
 801040c:	f1ba 0f00 	cmp.w	sl, #0
 8010410:	d107      	bne.n	8010422 <_strtol_l.isra.0+0xda>
 8010412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010416:	b102      	cbz	r2, 801041a <_strtol_l.isra.0+0xd2>
 8010418:	4240      	negs	r0, r0
 801041a:	f1ba 0f00 	cmp.w	sl, #0
 801041e:	d0f8      	beq.n	8010412 <_strtol_l.isra.0+0xca>
 8010420:	b10f      	cbz	r7, 8010426 <_strtol_l.isra.0+0xde>
 8010422:	f105 39ff 	add.w	r9, r5, #4294967295
 8010426:	f8ca 9000 	str.w	r9, [sl]
 801042a:	e7f2      	b.n	8010412 <_strtol_l.isra.0+0xca>
 801042c:	2430      	movs	r4, #48	; 0x30
 801042e:	2e00      	cmp	r6, #0
 8010430:	d1af      	bne.n	8010392 <_strtol_l.isra.0+0x4a>
 8010432:	2608      	movs	r6, #8
 8010434:	e7ad      	b.n	8010392 <_strtol_l.isra.0+0x4a>
 8010436:	2c30      	cmp	r4, #48	; 0x30
 8010438:	d0a3      	beq.n	8010382 <_strtol_l.isra.0+0x3a>
 801043a:	260a      	movs	r6, #10
 801043c:	e7a9      	b.n	8010392 <_strtol_l.isra.0+0x4a>
	...

08010440 <_strtol_r>:
 8010440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010442:	4c06      	ldr	r4, [pc, #24]	; (801045c <_strtol_r+0x1c>)
 8010444:	4d06      	ldr	r5, [pc, #24]	; (8010460 <_strtol_r+0x20>)
 8010446:	6824      	ldr	r4, [r4, #0]
 8010448:	6a24      	ldr	r4, [r4, #32]
 801044a:	2c00      	cmp	r4, #0
 801044c:	bf08      	it	eq
 801044e:	462c      	moveq	r4, r5
 8010450:	9400      	str	r4, [sp, #0]
 8010452:	f7ff ff79 	bl	8010348 <_strtol_l.isra.0>
 8010456:	b003      	add	sp, #12
 8010458:	bd30      	pop	{r4, r5, pc}
 801045a:	bf00      	nop
 801045c:	2000000c 	.word	0x2000000c
 8010460:	20000070 	.word	0x20000070

08010464 <__swbuf_r>:
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	460e      	mov	r6, r1
 8010468:	4614      	mov	r4, r2
 801046a:	4605      	mov	r5, r0
 801046c:	b118      	cbz	r0, 8010476 <__swbuf_r+0x12>
 801046e:	6983      	ldr	r3, [r0, #24]
 8010470:	b90b      	cbnz	r3, 8010476 <__swbuf_r+0x12>
 8010472:	f001 f80d 	bl	8011490 <__sinit>
 8010476:	4b21      	ldr	r3, [pc, #132]	; (80104fc <__swbuf_r+0x98>)
 8010478:	429c      	cmp	r4, r3
 801047a:	d12a      	bne.n	80104d2 <__swbuf_r+0x6e>
 801047c:	686c      	ldr	r4, [r5, #4]
 801047e:	69a3      	ldr	r3, [r4, #24]
 8010480:	60a3      	str	r3, [r4, #8]
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	071a      	lsls	r2, r3, #28
 8010486:	d52e      	bpl.n	80104e6 <__swbuf_r+0x82>
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	b363      	cbz	r3, 80104e6 <__swbuf_r+0x82>
 801048c:	6923      	ldr	r3, [r4, #16]
 801048e:	6820      	ldr	r0, [r4, #0]
 8010490:	1ac0      	subs	r0, r0, r3
 8010492:	6963      	ldr	r3, [r4, #20]
 8010494:	b2f6      	uxtb	r6, r6
 8010496:	4283      	cmp	r3, r0
 8010498:	4637      	mov	r7, r6
 801049a:	dc04      	bgt.n	80104a6 <__swbuf_r+0x42>
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 ff8c 	bl	80113bc <_fflush_r>
 80104a4:	bb28      	cbnz	r0, 80104f2 <__swbuf_r+0x8e>
 80104a6:	68a3      	ldr	r3, [r4, #8]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	60a3      	str	r3, [r4, #8]
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	6022      	str	r2, [r4, #0]
 80104b2:	701e      	strb	r6, [r3, #0]
 80104b4:	6963      	ldr	r3, [r4, #20]
 80104b6:	3001      	adds	r0, #1
 80104b8:	4283      	cmp	r3, r0
 80104ba:	d004      	beq.n	80104c6 <__swbuf_r+0x62>
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	07db      	lsls	r3, r3, #31
 80104c0:	d519      	bpl.n	80104f6 <__swbuf_r+0x92>
 80104c2:	2e0a      	cmp	r6, #10
 80104c4:	d117      	bne.n	80104f6 <__swbuf_r+0x92>
 80104c6:	4621      	mov	r1, r4
 80104c8:	4628      	mov	r0, r5
 80104ca:	f000 ff77 	bl	80113bc <_fflush_r>
 80104ce:	b190      	cbz	r0, 80104f6 <__swbuf_r+0x92>
 80104d0:	e00f      	b.n	80104f2 <__swbuf_r+0x8e>
 80104d2:	4b0b      	ldr	r3, [pc, #44]	; (8010500 <__swbuf_r+0x9c>)
 80104d4:	429c      	cmp	r4, r3
 80104d6:	d101      	bne.n	80104dc <__swbuf_r+0x78>
 80104d8:	68ac      	ldr	r4, [r5, #8]
 80104da:	e7d0      	b.n	801047e <__swbuf_r+0x1a>
 80104dc:	4b09      	ldr	r3, [pc, #36]	; (8010504 <__swbuf_r+0xa0>)
 80104de:	429c      	cmp	r4, r3
 80104e0:	bf08      	it	eq
 80104e2:	68ec      	ldreq	r4, [r5, #12]
 80104e4:	e7cb      	b.n	801047e <__swbuf_r+0x1a>
 80104e6:	4621      	mov	r1, r4
 80104e8:	4628      	mov	r0, r5
 80104ea:	f000 f81f 	bl	801052c <__swsetup_r>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	d0cc      	beq.n	801048c <__swbuf_r+0x28>
 80104f2:	f04f 37ff 	mov.w	r7, #4294967295
 80104f6:	4638      	mov	r0, r7
 80104f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	08013c08 	.word	0x08013c08
 8010500:	08013c28 	.word	0x08013c28
 8010504:	08013be8 	.word	0x08013be8

08010508 <_write_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4c07      	ldr	r4, [pc, #28]	; (8010528 <_write_r+0x20>)
 801050c:	4605      	mov	r5, r0
 801050e:	4608      	mov	r0, r1
 8010510:	4611      	mov	r1, r2
 8010512:	2200      	movs	r2, #0
 8010514:	6022      	str	r2, [r4, #0]
 8010516:	461a      	mov	r2, r3
 8010518:	f7f1 ffbe 	bl	8002498 <_write>
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	d102      	bne.n	8010526 <_write_r+0x1e>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	b103      	cbz	r3, 8010526 <_write_r+0x1e>
 8010524:	602b      	str	r3, [r5, #0]
 8010526:	bd38      	pop	{r3, r4, r5, pc}
 8010528:	20005084 	.word	0x20005084

0801052c <__swsetup_r>:
 801052c:	4b32      	ldr	r3, [pc, #200]	; (80105f8 <__swsetup_r+0xcc>)
 801052e:	b570      	push	{r4, r5, r6, lr}
 8010530:	681d      	ldr	r5, [r3, #0]
 8010532:	4606      	mov	r6, r0
 8010534:	460c      	mov	r4, r1
 8010536:	b125      	cbz	r5, 8010542 <__swsetup_r+0x16>
 8010538:	69ab      	ldr	r3, [r5, #24]
 801053a:	b913      	cbnz	r3, 8010542 <__swsetup_r+0x16>
 801053c:	4628      	mov	r0, r5
 801053e:	f000 ffa7 	bl	8011490 <__sinit>
 8010542:	4b2e      	ldr	r3, [pc, #184]	; (80105fc <__swsetup_r+0xd0>)
 8010544:	429c      	cmp	r4, r3
 8010546:	d10f      	bne.n	8010568 <__swsetup_r+0x3c>
 8010548:	686c      	ldr	r4, [r5, #4]
 801054a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801054e:	b29a      	uxth	r2, r3
 8010550:	0715      	lsls	r5, r2, #28
 8010552:	d42c      	bmi.n	80105ae <__swsetup_r+0x82>
 8010554:	06d0      	lsls	r0, r2, #27
 8010556:	d411      	bmi.n	801057c <__swsetup_r+0x50>
 8010558:	2209      	movs	r2, #9
 801055a:	6032      	str	r2, [r6, #0]
 801055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010560:	81a3      	strh	r3, [r4, #12]
 8010562:	f04f 30ff 	mov.w	r0, #4294967295
 8010566:	e03e      	b.n	80105e6 <__swsetup_r+0xba>
 8010568:	4b25      	ldr	r3, [pc, #148]	; (8010600 <__swsetup_r+0xd4>)
 801056a:	429c      	cmp	r4, r3
 801056c:	d101      	bne.n	8010572 <__swsetup_r+0x46>
 801056e:	68ac      	ldr	r4, [r5, #8]
 8010570:	e7eb      	b.n	801054a <__swsetup_r+0x1e>
 8010572:	4b24      	ldr	r3, [pc, #144]	; (8010604 <__swsetup_r+0xd8>)
 8010574:	429c      	cmp	r4, r3
 8010576:	bf08      	it	eq
 8010578:	68ec      	ldreq	r4, [r5, #12]
 801057a:	e7e6      	b.n	801054a <__swsetup_r+0x1e>
 801057c:	0751      	lsls	r1, r2, #29
 801057e:	d512      	bpl.n	80105a6 <__swsetup_r+0x7a>
 8010580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010582:	b141      	cbz	r1, 8010596 <__swsetup_r+0x6a>
 8010584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010588:	4299      	cmp	r1, r3
 801058a:	d002      	beq.n	8010592 <__swsetup_r+0x66>
 801058c:	4630      	mov	r0, r6
 801058e:	f001 fff9 	bl	8012584 <_free_r>
 8010592:	2300      	movs	r3, #0
 8010594:	6363      	str	r3, [r4, #52]	; 0x34
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	2300      	movs	r3, #0
 80105a0:	6063      	str	r3, [r4, #4]
 80105a2:	6923      	ldr	r3, [r4, #16]
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	89a3      	ldrh	r3, [r4, #12]
 80105a8:	f043 0308 	orr.w	r3, r3, #8
 80105ac:	81a3      	strh	r3, [r4, #12]
 80105ae:	6923      	ldr	r3, [r4, #16]
 80105b0:	b94b      	cbnz	r3, 80105c6 <__swsetup_r+0x9a>
 80105b2:	89a3      	ldrh	r3, [r4, #12]
 80105b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105bc:	d003      	beq.n	80105c6 <__swsetup_r+0x9a>
 80105be:	4621      	mov	r1, r4
 80105c0:	4630      	mov	r0, r6
 80105c2:	f001 fb6d 	bl	8011ca0 <__smakebuf_r>
 80105c6:	89a2      	ldrh	r2, [r4, #12]
 80105c8:	f012 0301 	ands.w	r3, r2, #1
 80105cc:	d00c      	beq.n	80105e8 <__swsetup_r+0xbc>
 80105ce:	2300      	movs	r3, #0
 80105d0:	60a3      	str	r3, [r4, #8]
 80105d2:	6963      	ldr	r3, [r4, #20]
 80105d4:	425b      	negs	r3, r3
 80105d6:	61a3      	str	r3, [r4, #24]
 80105d8:	6923      	ldr	r3, [r4, #16]
 80105da:	b953      	cbnz	r3, 80105f2 <__swsetup_r+0xc6>
 80105dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80105e4:	d1ba      	bne.n	801055c <__swsetup_r+0x30>
 80105e6:	bd70      	pop	{r4, r5, r6, pc}
 80105e8:	0792      	lsls	r2, r2, #30
 80105ea:	bf58      	it	pl
 80105ec:	6963      	ldrpl	r3, [r4, #20]
 80105ee:	60a3      	str	r3, [r4, #8]
 80105f0:	e7f2      	b.n	80105d8 <__swsetup_r+0xac>
 80105f2:	2000      	movs	r0, #0
 80105f4:	e7f7      	b.n	80105e6 <__swsetup_r+0xba>
 80105f6:	bf00      	nop
 80105f8:	2000000c 	.word	0x2000000c
 80105fc:	08013c08 	.word	0x08013c08
 8010600:	08013c28 	.word	0x08013c28
 8010604:	08013be8 	.word	0x08013be8

08010608 <_close_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4c06      	ldr	r4, [pc, #24]	; (8010624 <_close_r+0x1c>)
 801060c:	2300      	movs	r3, #0
 801060e:	4605      	mov	r5, r0
 8010610:	4608      	mov	r0, r1
 8010612:	6023      	str	r3, [r4, #0]
 8010614:	f7f3 fc5b 	bl	8003ece <_close>
 8010618:	1c43      	adds	r3, r0, #1
 801061a:	d102      	bne.n	8010622 <_close_r+0x1a>
 801061c:	6823      	ldr	r3, [r4, #0]
 801061e:	b103      	cbz	r3, 8010622 <_close_r+0x1a>
 8010620:	602b      	str	r3, [r5, #0]
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	20005084 	.word	0x20005084

08010628 <quorem>:
 8010628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801062c:	6903      	ldr	r3, [r0, #16]
 801062e:	690c      	ldr	r4, [r1, #16]
 8010630:	42a3      	cmp	r3, r4
 8010632:	4680      	mov	r8, r0
 8010634:	f2c0 8082 	blt.w	801073c <quorem+0x114>
 8010638:	3c01      	subs	r4, #1
 801063a:	f101 0714 	add.w	r7, r1, #20
 801063e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010642:	f100 0614 	add.w	r6, r0, #20
 8010646:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801064a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801064e:	eb06 030c 	add.w	r3, r6, ip
 8010652:	3501      	adds	r5, #1
 8010654:	eb07 090c 	add.w	r9, r7, ip
 8010658:	9301      	str	r3, [sp, #4]
 801065a:	fbb0 f5f5 	udiv	r5, r0, r5
 801065e:	b395      	cbz	r5, 80106c6 <quorem+0x9e>
 8010660:	f04f 0a00 	mov.w	sl, #0
 8010664:	4638      	mov	r0, r7
 8010666:	46b6      	mov	lr, r6
 8010668:	46d3      	mov	fp, sl
 801066a:	f850 2b04 	ldr.w	r2, [r0], #4
 801066e:	b293      	uxth	r3, r2
 8010670:	fb05 a303 	mla	r3, r5, r3, sl
 8010674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010678:	b29b      	uxth	r3, r3
 801067a:	ebab 0303 	sub.w	r3, fp, r3
 801067e:	0c12      	lsrs	r2, r2, #16
 8010680:	f8de b000 	ldr.w	fp, [lr]
 8010684:	fb05 a202 	mla	r2, r5, r2, sl
 8010688:	fa13 f38b 	uxtah	r3, r3, fp
 801068c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010690:	fa1f fb82 	uxth.w	fp, r2
 8010694:	f8de 2000 	ldr.w	r2, [lr]
 8010698:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801069c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106a6:	4581      	cmp	r9, r0
 80106a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80106ac:	f84e 3b04 	str.w	r3, [lr], #4
 80106b0:	d2db      	bcs.n	801066a <quorem+0x42>
 80106b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80106b6:	b933      	cbnz	r3, 80106c6 <quorem+0x9e>
 80106b8:	9b01      	ldr	r3, [sp, #4]
 80106ba:	3b04      	subs	r3, #4
 80106bc:	429e      	cmp	r6, r3
 80106be:	461a      	mov	r2, r3
 80106c0:	d330      	bcc.n	8010724 <quorem+0xfc>
 80106c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80106c6:	4640      	mov	r0, r8
 80106c8:	f001 fda2 	bl	8012210 <__mcmp>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	db25      	blt.n	801071c <quorem+0xf4>
 80106d0:	3501      	adds	r5, #1
 80106d2:	4630      	mov	r0, r6
 80106d4:	f04f 0c00 	mov.w	ip, #0
 80106d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80106dc:	f8d0 e000 	ldr.w	lr, [r0]
 80106e0:	b293      	uxth	r3, r2
 80106e2:	ebac 0303 	sub.w	r3, ip, r3
 80106e6:	0c12      	lsrs	r2, r2, #16
 80106e8:	fa13 f38e 	uxtah	r3, r3, lr
 80106ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106fa:	45b9      	cmp	r9, r7
 80106fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010700:	f840 3b04 	str.w	r3, [r0], #4
 8010704:	d2e8      	bcs.n	80106d8 <quorem+0xb0>
 8010706:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801070a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801070e:	b92a      	cbnz	r2, 801071c <quorem+0xf4>
 8010710:	3b04      	subs	r3, #4
 8010712:	429e      	cmp	r6, r3
 8010714:	461a      	mov	r2, r3
 8010716:	d30b      	bcc.n	8010730 <quorem+0x108>
 8010718:	f8c8 4010 	str.w	r4, [r8, #16]
 801071c:	4628      	mov	r0, r5
 801071e:	b003      	add	sp, #12
 8010720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010724:	6812      	ldr	r2, [r2, #0]
 8010726:	3b04      	subs	r3, #4
 8010728:	2a00      	cmp	r2, #0
 801072a:	d1ca      	bne.n	80106c2 <quorem+0x9a>
 801072c:	3c01      	subs	r4, #1
 801072e:	e7c5      	b.n	80106bc <quorem+0x94>
 8010730:	6812      	ldr	r2, [r2, #0]
 8010732:	3b04      	subs	r3, #4
 8010734:	2a00      	cmp	r2, #0
 8010736:	d1ef      	bne.n	8010718 <quorem+0xf0>
 8010738:	3c01      	subs	r4, #1
 801073a:	e7ea      	b.n	8010712 <quorem+0xea>
 801073c:	2000      	movs	r0, #0
 801073e:	e7ee      	b.n	801071e <quorem+0xf6>

08010740 <_dtoa_r>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	ec57 6b10 	vmov	r6, r7, d0
 8010748:	b097      	sub	sp, #92	; 0x5c
 801074a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801074c:	9106      	str	r1, [sp, #24]
 801074e:	4604      	mov	r4, r0
 8010750:	920b      	str	r2, [sp, #44]	; 0x2c
 8010752:	9312      	str	r3, [sp, #72]	; 0x48
 8010754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010758:	e9cd 6700 	strd	r6, r7, [sp]
 801075c:	b93d      	cbnz	r5, 801076e <_dtoa_r+0x2e>
 801075e:	2010      	movs	r0, #16
 8010760:	f001 fade 	bl	8011d20 <malloc>
 8010764:	6260      	str	r0, [r4, #36]	; 0x24
 8010766:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801076a:	6005      	str	r5, [r0, #0]
 801076c:	60c5      	str	r5, [r0, #12]
 801076e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010770:	6819      	ldr	r1, [r3, #0]
 8010772:	b151      	cbz	r1, 801078a <_dtoa_r+0x4a>
 8010774:	685a      	ldr	r2, [r3, #4]
 8010776:	604a      	str	r2, [r1, #4]
 8010778:	2301      	movs	r3, #1
 801077a:	4093      	lsls	r3, r2
 801077c:	608b      	str	r3, [r1, #8]
 801077e:	4620      	mov	r0, r4
 8010780:	f001 fb27 	bl	8011dd2 <_Bfree>
 8010784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010786:	2200      	movs	r2, #0
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	1e3b      	subs	r3, r7, #0
 801078c:	bfbb      	ittet	lt
 801078e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010792:	9301      	strlt	r3, [sp, #4]
 8010794:	2300      	movge	r3, #0
 8010796:	2201      	movlt	r2, #1
 8010798:	bfac      	ite	ge
 801079a:	f8c8 3000 	strge.w	r3, [r8]
 801079e:	f8c8 2000 	strlt.w	r2, [r8]
 80107a2:	4baf      	ldr	r3, [pc, #700]	; (8010a60 <_dtoa_r+0x320>)
 80107a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80107a8:	ea33 0308 	bics.w	r3, r3, r8
 80107ac:	d114      	bne.n	80107d8 <_dtoa_r+0x98>
 80107ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80107b4:	6013      	str	r3, [r2, #0]
 80107b6:	9b00      	ldr	r3, [sp, #0]
 80107b8:	b923      	cbnz	r3, 80107c4 <_dtoa_r+0x84>
 80107ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80107be:	2800      	cmp	r0, #0
 80107c0:	f000 8542 	beq.w	8011248 <_dtoa_r+0xb08>
 80107c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010a74 <_dtoa_r+0x334>
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 8544 	beq.w	8011258 <_dtoa_r+0xb18>
 80107d0:	f10b 0303 	add.w	r3, fp, #3
 80107d4:	f000 bd3e 	b.w	8011254 <_dtoa_r+0xb14>
 80107d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80107dc:	2200      	movs	r2, #0
 80107de:	2300      	movs	r3, #0
 80107e0:	4630      	mov	r0, r6
 80107e2:	4639      	mov	r1, r7
 80107e4:	f7f0 f988 	bl	8000af8 <__aeabi_dcmpeq>
 80107e8:	4681      	mov	r9, r0
 80107ea:	b168      	cbz	r0, 8010808 <_dtoa_r+0xc8>
 80107ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107ee:	2301      	movs	r3, #1
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f000 8524 	beq.w	8011242 <_dtoa_r+0xb02>
 80107fa:	4b9a      	ldr	r3, [pc, #616]	; (8010a64 <_dtoa_r+0x324>)
 80107fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	f000 bd28 	b.w	8011258 <_dtoa_r+0xb18>
 8010808:	aa14      	add	r2, sp, #80	; 0x50
 801080a:	a915      	add	r1, sp, #84	; 0x54
 801080c:	ec47 6b10 	vmov	d0, r6, r7
 8010810:	4620      	mov	r0, r4
 8010812:	f001 fdeb 	bl	80123ec <__d2b>
 8010816:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801081a:	9004      	str	r0, [sp, #16]
 801081c:	2d00      	cmp	r5, #0
 801081e:	d07c      	beq.n	801091a <_dtoa_r+0x1da>
 8010820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010824:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010828:	46b2      	mov	sl, r6
 801082a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801082e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010832:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010836:	2200      	movs	r2, #0
 8010838:	4b8b      	ldr	r3, [pc, #556]	; (8010a68 <_dtoa_r+0x328>)
 801083a:	4650      	mov	r0, sl
 801083c:	4659      	mov	r1, fp
 801083e:	f7ef fd3b 	bl	80002b8 <__aeabi_dsub>
 8010842:	a381      	add	r3, pc, #516	; (adr r3, 8010a48 <_dtoa_r+0x308>)
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	f7ef feee 	bl	8000628 <__aeabi_dmul>
 801084c:	a380      	add	r3, pc, #512	; (adr r3, 8010a50 <_dtoa_r+0x310>)
 801084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010852:	f7ef fd33 	bl	80002bc <__adddf3>
 8010856:	4606      	mov	r6, r0
 8010858:	4628      	mov	r0, r5
 801085a:	460f      	mov	r7, r1
 801085c:	f7ef fe7a 	bl	8000554 <__aeabi_i2d>
 8010860:	a37d      	add	r3, pc, #500	; (adr r3, 8010a58 <_dtoa_r+0x318>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7ef fedf 	bl	8000628 <__aeabi_dmul>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4630      	mov	r0, r6
 8010870:	4639      	mov	r1, r7
 8010872:	f7ef fd23 	bl	80002bc <__adddf3>
 8010876:	4606      	mov	r6, r0
 8010878:	460f      	mov	r7, r1
 801087a:	f7f0 f985 	bl	8000b88 <__aeabi_d2iz>
 801087e:	2200      	movs	r2, #0
 8010880:	4682      	mov	sl, r0
 8010882:	2300      	movs	r3, #0
 8010884:	4630      	mov	r0, r6
 8010886:	4639      	mov	r1, r7
 8010888:	f7f0 f940 	bl	8000b0c <__aeabi_dcmplt>
 801088c:	b148      	cbz	r0, 80108a2 <_dtoa_r+0x162>
 801088e:	4650      	mov	r0, sl
 8010890:	f7ef fe60 	bl	8000554 <__aeabi_i2d>
 8010894:	4632      	mov	r2, r6
 8010896:	463b      	mov	r3, r7
 8010898:	f7f0 f92e 	bl	8000af8 <__aeabi_dcmpeq>
 801089c:	b908      	cbnz	r0, 80108a2 <_dtoa_r+0x162>
 801089e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108a2:	f1ba 0f16 	cmp.w	sl, #22
 80108a6:	d859      	bhi.n	801095c <_dtoa_r+0x21c>
 80108a8:	4970      	ldr	r1, [pc, #448]	; (8010a6c <_dtoa_r+0x32c>)
 80108aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80108ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108b6:	f7f0 f947 	bl	8000b48 <__aeabi_dcmpgt>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d050      	beq.n	8010960 <_dtoa_r+0x220>
 80108be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108c2:	2300      	movs	r3, #0
 80108c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80108c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108c8:	1b5d      	subs	r5, r3, r5
 80108ca:	f1b5 0801 	subs.w	r8, r5, #1
 80108ce:	bf49      	itett	mi
 80108d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80108d4:	2300      	movpl	r3, #0
 80108d6:	9305      	strmi	r3, [sp, #20]
 80108d8:	f04f 0800 	movmi.w	r8, #0
 80108dc:	bf58      	it	pl
 80108de:	9305      	strpl	r3, [sp, #20]
 80108e0:	f1ba 0f00 	cmp.w	sl, #0
 80108e4:	db3e      	blt.n	8010964 <_dtoa_r+0x224>
 80108e6:	2300      	movs	r3, #0
 80108e8:	44d0      	add	r8, sl
 80108ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80108ee:	9307      	str	r3, [sp, #28]
 80108f0:	9b06      	ldr	r3, [sp, #24]
 80108f2:	2b09      	cmp	r3, #9
 80108f4:	f200 8090 	bhi.w	8010a18 <_dtoa_r+0x2d8>
 80108f8:	2b05      	cmp	r3, #5
 80108fa:	bfc4      	itt	gt
 80108fc:	3b04      	subgt	r3, #4
 80108fe:	9306      	strgt	r3, [sp, #24]
 8010900:	9b06      	ldr	r3, [sp, #24]
 8010902:	f1a3 0302 	sub.w	r3, r3, #2
 8010906:	bfcc      	ite	gt
 8010908:	2500      	movgt	r5, #0
 801090a:	2501      	movle	r5, #1
 801090c:	2b03      	cmp	r3, #3
 801090e:	f200 808f 	bhi.w	8010a30 <_dtoa_r+0x2f0>
 8010912:	e8df f003 	tbb	[pc, r3]
 8010916:	7f7d      	.short	0x7f7d
 8010918:	7131      	.short	0x7131
 801091a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801091e:	441d      	add	r5, r3
 8010920:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010924:	2820      	cmp	r0, #32
 8010926:	dd13      	ble.n	8010950 <_dtoa_r+0x210>
 8010928:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801092c:	9b00      	ldr	r3, [sp, #0]
 801092e:	fa08 f800 	lsl.w	r8, r8, r0
 8010932:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010936:	fa23 f000 	lsr.w	r0, r3, r0
 801093a:	ea48 0000 	orr.w	r0, r8, r0
 801093e:	f7ef fdf9 	bl	8000534 <__aeabi_ui2d>
 8010942:	2301      	movs	r3, #1
 8010944:	4682      	mov	sl, r0
 8010946:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801094a:	3d01      	subs	r5, #1
 801094c:	9313      	str	r3, [sp, #76]	; 0x4c
 801094e:	e772      	b.n	8010836 <_dtoa_r+0xf6>
 8010950:	9b00      	ldr	r3, [sp, #0]
 8010952:	f1c0 0020 	rsb	r0, r0, #32
 8010956:	fa03 f000 	lsl.w	r0, r3, r0
 801095a:	e7f0      	b.n	801093e <_dtoa_r+0x1fe>
 801095c:	2301      	movs	r3, #1
 801095e:	e7b1      	b.n	80108c4 <_dtoa_r+0x184>
 8010960:	900f      	str	r0, [sp, #60]	; 0x3c
 8010962:	e7b0      	b.n	80108c6 <_dtoa_r+0x186>
 8010964:	9b05      	ldr	r3, [sp, #20]
 8010966:	eba3 030a 	sub.w	r3, r3, sl
 801096a:	9305      	str	r3, [sp, #20]
 801096c:	f1ca 0300 	rsb	r3, sl, #0
 8010970:	9307      	str	r3, [sp, #28]
 8010972:	2300      	movs	r3, #0
 8010974:	930e      	str	r3, [sp, #56]	; 0x38
 8010976:	e7bb      	b.n	80108f0 <_dtoa_r+0x1b0>
 8010978:	2301      	movs	r3, #1
 801097a:	930a      	str	r3, [sp, #40]	; 0x28
 801097c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd59      	ble.n	8010a36 <_dtoa_r+0x2f6>
 8010982:	9302      	str	r3, [sp, #8]
 8010984:	4699      	mov	r9, r3
 8010986:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010988:	2200      	movs	r2, #0
 801098a:	6072      	str	r2, [r6, #4]
 801098c:	2204      	movs	r2, #4
 801098e:	f102 0014 	add.w	r0, r2, #20
 8010992:	4298      	cmp	r0, r3
 8010994:	6871      	ldr	r1, [r6, #4]
 8010996:	d953      	bls.n	8010a40 <_dtoa_r+0x300>
 8010998:	4620      	mov	r0, r4
 801099a:	f001 f9e6 	bl	8011d6a <_Balloc>
 801099e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109a0:	6030      	str	r0, [r6, #0]
 80109a2:	f1b9 0f0e 	cmp.w	r9, #14
 80109a6:	f8d3 b000 	ldr.w	fp, [r3]
 80109aa:	f200 80e6 	bhi.w	8010b7a <_dtoa_r+0x43a>
 80109ae:	2d00      	cmp	r5, #0
 80109b0:	f000 80e3 	beq.w	8010b7a <_dtoa_r+0x43a>
 80109b4:	ed9d 7b00 	vldr	d7, [sp]
 80109b8:	f1ba 0f00 	cmp.w	sl, #0
 80109bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80109c0:	dd74      	ble.n	8010aac <_dtoa_r+0x36c>
 80109c2:	4a2a      	ldr	r2, [pc, #168]	; (8010a6c <_dtoa_r+0x32c>)
 80109c4:	f00a 030f 	and.w	r3, sl, #15
 80109c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109cc:	ed93 7b00 	vldr	d7, [r3]
 80109d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80109d4:	06f0      	lsls	r0, r6, #27
 80109d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80109da:	d565      	bpl.n	8010aa8 <_dtoa_r+0x368>
 80109dc:	4b24      	ldr	r3, [pc, #144]	; (8010a70 <_dtoa_r+0x330>)
 80109de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80109e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109e6:	f7ef ff49 	bl	800087c <__aeabi_ddiv>
 80109ea:	e9cd 0100 	strd	r0, r1, [sp]
 80109ee:	f006 060f 	and.w	r6, r6, #15
 80109f2:	2503      	movs	r5, #3
 80109f4:	4f1e      	ldr	r7, [pc, #120]	; (8010a70 <_dtoa_r+0x330>)
 80109f6:	e04c      	b.n	8010a92 <_dtoa_r+0x352>
 80109f8:	2301      	movs	r3, #1
 80109fa:	930a      	str	r3, [sp, #40]	; 0x28
 80109fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109fe:	4453      	add	r3, sl
 8010a00:	f103 0901 	add.w	r9, r3, #1
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	464b      	mov	r3, r9
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	bfb8      	it	lt
 8010a0c:	2301      	movlt	r3, #1
 8010a0e:	e7ba      	b.n	8010986 <_dtoa_r+0x246>
 8010a10:	2300      	movs	r3, #0
 8010a12:	e7b2      	b.n	801097a <_dtoa_r+0x23a>
 8010a14:	2300      	movs	r3, #0
 8010a16:	e7f0      	b.n	80109fa <_dtoa_r+0x2ba>
 8010a18:	2501      	movs	r5, #1
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	9306      	str	r3, [sp, #24]
 8010a1e:	950a      	str	r5, [sp, #40]	; 0x28
 8010a20:	f04f 33ff 	mov.w	r3, #4294967295
 8010a24:	9302      	str	r3, [sp, #8]
 8010a26:	4699      	mov	r9, r3
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2312      	movs	r3, #18
 8010a2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a2e:	e7aa      	b.n	8010986 <_dtoa_r+0x246>
 8010a30:	2301      	movs	r3, #1
 8010a32:	930a      	str	r3, [sp, #40]	; 0x28
 8010a34:	e7f4      	b.n	8010a20 <_dtoa_r+0x2e0>
 8010a36:	2301      	movs	r3, #1
 8010a38:	9302      	str	r3, [sp, #8]
 8010a3a:	4699      	mov	r9, r3
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	e7f5      	b.n	8010a2c <_dtoa_r+0x2ec>
 8010a40:	3101      	adds	r1, #1
 8010a42:	6071      	str	r1, [r6, #4]
 8010a44:	0052      	lsls	r2, r2, #1
 8010a46:	e7a2      	b.n	801098e <_dtoa_r+0x24e>
 8010a48:	636f4361 	.word	0x636f4361
 8010a4c:	3fd287a7 	.word	0x3fd287a7
 8010a50:	8b60c8b3 	.word	0x8b60c8b3
 8010a54:	3fc68a28 	.word	0x3fc68a28
 8010a58:	509f79fb 	.word	0x509f79fb
 8010a5c:	3fd34413 	.word	0x3fd34413
 8010a60:	7ff00000 	.word	0x7ff00000
 8010a64:	08013d7c 	.word	0x08013d7c
 8010a68:	3ff80000 	.word	0x3ff80000
 8010a6c:	08013c80 	.word	0x08013c80
 8010a70:	08013c58 	.word	0x08013c58
 8010a74:	08013be1 	.word	0x08013be1
 8010a78:	07f1      	lsls	r1, r6, #31
 8010a7a:	d508      	bpl.n	8010a8e <_dtoa_r+0x34e>
 8010a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a84:	f7ef fdd0 	bl	8000628 <__aeabi_dmul>
 8010a88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a8c:	3501      	adds	r5, #1
 8010a8e:	1076      	asrs	r6, r6, #1
 8010a90:	3708      	adds	r7, #8
 8010a92:	2e00      	cmp	r6, #0
 8010a94:	d1f0      	bne.n	8010a78 <_dtoa_r+0x338>
 8010a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a9e:	f7ef feed 	bl	800087c <__aeabi_ddiv>
 8010aa2:	e9cd 0100 	strd	r0, r1, [sp]
 8010aa6:	e01a      	b.n	8010ade <_dtoa_r+0x39e>
 8010aa8:	2502      	movs	r5, #2
 8010aaa:	e7a3      	b.n	80109f4 <_dtoa_r+0x2b4>
 8010aac:	f000 80a0 	beq.w	8010bf0 <_dtoa_r+0x4b0>
 8010ab0:	f1ca 0600 	rsb	r6, sl, #0
 8010ab4:	4b9f      	ldr	r3, [pc, #636]	; (8010d34 <_dtoa_r+0x5f4>)
 8010ab6:	4fa0      	ldr	r7, [pc, #640]	; (8010d38 <_dtoa_r+0x5f8>)
 8010ab8:	f006 020f 	and.w	r2, r6, #15
 8010abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010ac8:	f7ef fdae 	bl	8000628 <__aeabi_dmul>
 8010acc:	e9cd 0100 	strd	r0, r1, [sp]
 8010ad0:	1136      	asrs	r6, r6, #4
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	2502      	movs	r5, #2
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	d17f      	bne.n	8010bda <_dtoa_r+0x49a>
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d1e1      	bne.n	8010aa2 <_dtoa_r+0x362>
 8010ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 8087 	beq.w	8010bf4 <_dtoa_r+0x4b4>
 8010ae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010aea:	2200      	movs	r2, #0
 8010aec:	4b93      	ldr	r3, [pc, #588]	; (8010d3c <_dtoa_r+0x5fc>)
 8010aee:	4630      	mov	r0, r6
 8010af0:	4639      	mov	r1, r7
 8010af2:	f7f0 f80b 	bl	8000b0c <__aeabi_dcmplt>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d07c      	beq.n	8010bf4 <_dtoa_r+0x4b4>
 8010afa:	f1b9 0f00 	cmp.w	r9, #0
 8010afe:	d079      	beq.n	8010bf4 <_dtoa_r+0x4b4>
 8010b00:	9b02      	ldr	r3, [sp, #8]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	dd35      	ble.n	8010b72 <_dtoa_r+0x432>
 8010b06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010b0a:	9308      	str	r3, [sp, #32]
 8010b0c:	4639      	mov	r1, r7
 8010b0e:	2200      	movs	r2, #0
 8010b10:	4b8b      	ldr	r3, [pc, #556]	; (8010d40 <_dtoa_r+0x600>)
 8010b12:	4630      	mov	r0, r6
 8010b14:	f7ef fd88 	bl	8000628 <__aeabi_dmul>
 8010b18:	e9cd 0100 	strd	r0, r1, [sp]
 8010b1c:	9f02      	ldr	r7, [sp, #8]
 8010b1e:	3501      	adds	r5, #1
 8010b20:	4628      	mov	r0, r5
 8010b22:	f7ef fd17 	bl	8000554 <__aeabi_i2d>
 8010b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b2a:	f7ef fd7d 	bl	8000628 <__aeabi_dmul>
 8010b2e:	2200      	movs	r2, #0
 8010b30:	4b84      	ldr	r3, [pc, #528]	; (8010d44 <_dtoa_r+0x604>)
 8010b32:	f7ef fbc3 	bl	80002bc <__adddf3>
 8010b36:	4605      	mov	r5, r0
 8010b38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010b3c:	2f00      	cmp	r7, #0
 8010b3e:	d15d      	bne.n	8010bfc <_dtoa_r+0x4bc>
 8010b40:	2200      	movs	r2, #0
 8010b42:	4b81      	ldr	r3, [pc, #516]	; (8010d48 <_dtoa_r+0x608>)
 8010b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b48:	f7ef fbb6 	bl	80002b8 <__aeabi_dsub>
 8010b4c:	462a      	mov	r2, r5
 8010b4e:	4633      	mov	r3, r6
 8010b50:	e9cd 0100 	strd	r0, r1, [sp]
 8010b54:	f7ef fff8 	bl	8000b48 <__aeabi_dcmpgt>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	f040 8288 	bne.w	801106e <_dtoa_r+0x92e>
 8010b5e:	462a      	mov	r2, r5
 8010b60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b68:	f7ef ffd0 	bl	8000b0c <__aeabi_dcmplt>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	f040 827c 	bne.w	801106a <_dtoa_r+0x92a>
 8010b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b76:	e9cd 2300 	strd	r2, r3, [sp]
 8010b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	f2c0 8150 	blt.w	8010e22 <_dtoa_r+0x6e2>
 8010b82:	f1ba 0f0e 	cmp.w	sl, #14
 8010b86:	f300 814c 	bgt.w	8010e22 <_dtoa_r+0x6e2>
 8010b8a:	4b6a      	ldr	r3, [pc, #424]	; (8010d34 <_dtoa_r+0x5f4>)
 8010b8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b90:	ed93 7b00 	vldr	d7, [r3]
 8010b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b9c:	f280 80d8 	bge.w	8010d50 <_dtoa_r+0x610>
 8010ba0:	f1b9 0f00 	cmp.w	r9, #0
 8010ba4:	f300 80d4 	bgt.w	8010d50 <_dtoa_r+0x610>
 8010ba8:	f040 825e 	bne.w	8011068 <_dtoa_r+0x928>
 8010bac:	2200      	movs	r2, #0
 8010bae:	4b66      	ldr	r3, [pc, #408]	; (8010d48 <_dtoa_r+0x608>)
 8010bb0:	ec51 0b17 	vmov	r0, r1, d7
 8010bb4:	f7ef fd38 	bl	8000628 <__aeabi_dmul>
 8010bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bbc:	f7ef ffba 	bl	8000b34 <__aeabi_dcmpge>
 8010bc0:	464f      	mov	r7, r9
 8010bc2:	464e      	mov	r6, r9
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	f040 8234 	bne.w	8011032 <_dtoa_r+0x8f2>
 8010bca:	2331      	movs	r3, #49	; 0x31
 8010bcc:	f10b 0501 	add.w	r5, fp, #1
 8010bd0:	f88b 3000 	strb.w	r3, [fp]
 8010bd4:	f10a 0a01 	add.w	sl, sl, #1
 8010bd8:	e22f      	b.n	801103a <_dtoa_r+0x8fa>
 8010bda:	07f2      	lsls	r2, r6, #31
 8010bdc:	d505      	bpl.n	8010bea <_dtoa_r+0x4aa>
 8010bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010be2:	f7ef fd21 	bl	8000628 <__aeabi_dmul>
 8010be6:	3501      	adds	r5, #1
 8010be8:	2301      	movs	r3, #1
 8010bea:	1076      	asrs	r6, r6, #1
 8010bec:	3708      	adds	r7, #8
 8010bee:	e772      	b.n	8010ad6 <_dtoa_r+0x396>
 8010bf0:	2502      	movs	r5, #2
 8010bf2:	e774      	b.n	8010ade <_dtoa_r+0x39e>
 8010bf4:	f8cd a020 	str.w	sl, [sp, #32]
 8010bf8:	464f      	mov	r7, r9
 8010bfa:	e791      	b.n	8010b20 <_dtoa_r+0x3e0>
 8010bfc:	4b4d      	ldr	r3, [pc, #308]	; (8010d34 <_dtoa_r+0x5f4>)
 8010bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d047      	beq.n	8010c9c <_dtoa_r+0x55c>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	2000      	movs	r0, #0
 8010c12:	494e      	ldr	r1, [pc, #312]	; (8010d4c <_dtoa_r+0x60c>)
 8010c14:	f7ef fe32 	bl	800087c <__aeabi_ddiv>
 8010c18:	462a      	mov	r2, r5
 8010c1a:	4633      	mov	r3, r6
 8010c1c:	f7ef fb4c 	bl	80002b8 <__aeabi_dsub>
 8010c20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c24:	465d      	mov	r5, fp
 8010c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c2a:	f7ef ffad 	bl	8000b88 <__aeabi_d2iz>
 8010c2e:	4606      	mov	r6, r0
 8010c30:	f7ef fc90 	bl	8000554 <__aeabi_i2d>
 8010c34:	4602      	mov	r2, r0
 8010c36:	460b      	mov	r3, r1
 8010c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c3c:	f7ef fb3c 	bl	80002b8 <__aeabi_dsub>
 8010c40:	3630      	adds	r6, #48	; 0x30
 8010c42:	f805 6b01 	strb.w	r6, [r5], #1
 8010c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8010c4e:	f7ef ff5d 	bl	8000b0c <__aeabi_dcmplt>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d163      	bne.n	8010d1e <_dtoa_r+0x5de>
 8010c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	4937      	ldr	r1, [pc, #220]	; (8010d3c <_dtoa_r+0x5fc>)
 8010c5e:	f7ef fb2b 	bl	80002b8 <__aeabi_dsub>
 8010c62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c66:	f7ef ff51 	bl	8000b0c <__aeabi_dcmplt>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	f040 80b7 	bne.w	8010dde <_dtoa_r+0x69e>
 8010c70:	eba5 030b 	sub.w	r3, r5, fp
 8010c74:	429f      	cmp	r7, r3
 8010c76:	f77f af7c 	ble.w	8010b72 <_dtoa_r+0x432>
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	4b30      	ldr	r3, [pc, #192]	; (8010d40 <_dtoa_r+0x600>)
 8010c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c82:	f7ef fcd1 	bl	8000628 <__aeabi_dmul>
 8010c86:	2200      	movs	r2, #0
 8010c88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c8c:	4b2c      	ldr	r3, [pc, #176]	; (8010d40 <_dtoa_r+0x600>)
 8010c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c92:	f7ef fcc9 	bl	8000628 <__aeabi_dmul>
 8010c96:	e9cd 0100 	strd	r0, r1, [sp]
 8010c9a:	e7c4      	b.n	8010c26 <_dtoa_r+0x4e6>
 8010c9c:	462a      	mov	r2, r5
 8010c9e:	4633      	mov	r3, r6
 8010ca0:	f7ef fcc2 	bl	8000628 <__aeabi_dmul>
 8010ca4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010ca8:	eb0b 0507 	add.w	r5, fp, r7
 8010cac:	465e      	mov	r6, fp
 8010cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cb2:	f7ef ff69 	bl	8000b88 <__aeabi_d2iz>
 8010cb6:	4607      	mov	r7, r0
 8010cb8:	f7ef fc4c 	bl	8000554 <__aeabi_i2d>
 8010cbc:	3730      	adds	r7, #48	; 0x30
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cc6:	f7ef faf7 	bl	80002b8 <__aeabi_dsub>
 8010cca:	f806 7b01 	strb.w	r7, [r6], #1
 8010cce:	42ae      	cmp	r6, r5
 8010cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8010cd4:	f04f 0200 	mov.w	r2, #0
 8010cd8:	d126      	bne.n	8010d28 <_dtoa_r+0x5e8>
 8010cda:	4b1c      	ldr	r3, [pc, #112]	; (8010d4c <_dtoa_r+0x60c>)
 8010cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ce0:	f7ef faec 	bl	80002bc <__adddf3>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cec:	f7ef ff2c 	bl	8000b48 <__aeabi_dcmpgt>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d174      	bne.n	8010dde <_dtoa_r+0x69e>
 8010cf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	4914      	ldr	r1, [pc, #80]	; (8010d4c <_dtoa_r+0x60c>)
 8010cfc:	f7ef fadc 	bl	80002b8 <__aeabi_dsub>
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d08:	f7ef ff00 	bl	8000b0c <__aeabi_dcmplt>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	f43f af30 	beq.w	8010b72 <_dtoa_r+0x432>
 8010d12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d16:	2b30      	cmp	r3, #48	; 0x30
 8010d18:	f105 32ff 	add.w	r2, r5, #4294967295
 8010d1c:	d002      	beq.n	8010d24 <_dtoa_r+0x5e4>
 8010d1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d22:	e04a      	b.n	8010dba <_dtoa_r+0x67a>
 8010d24:	4615      	mov	r5, r2
 8010d26:	e7f4      	b.n	8010d12 <_dtoa_r+0x5d2>
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <_dtoa_r+0x600>)
 8010d2a:	f7ef fc7d 	bl	8000628 <__aeabi_dmul>
 8010d2e:	e9cd 0100 	strd	r0, r1, [sp]
 8010d32:	e7bc      	b.n	8010cae <_dtoa_r+0x56e>
 8010d34:	08013c80 	.word	0x08013c80
 8010d38:	08013c58 	.word	0x08013c58
 8010d3c:	3ff00000 	.word	0x3ff00000
 8010d40:	40240000 	.word	0x40240000
 8010d44:	401c0000 	.word	0x401c0000
 8010d48:	40140000 	.word	0x40140000
 8010d4c:	3fe00000 	.word	0x3fe00000
 8010d50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d54:	465d      	mov	r5, fp
 8010d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	4639      	mov	r1, r7
 8010d5e:	f7ef fd8d 	bl	800087c <__aeabi_ddiv>
 8010d62:	f7ef ff11 	bl	8000b88 <__aeabi_d2iz>
 8010d66:	4680      	mov	r8, r0
 8010d68:	f7ef fbf4 	bl	8000554 <__aeabi_i2d>
 8010d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d70:	f7ef fc5a 	bl	8000628 <__aeabi_dmul>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	4630      	mov	r0, r6
 8010d7a:	4639      	mov	r1, r7
 8010d7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010d80:	f7ef fa9a 	bl	80002b8 <__aeabi_dsub>
 8010d84:	f805 6b01 	strb.w	r6, [r5], #1
 8010d88:	eba5 060b 	sub.w	r6, r5, fp
 8010d8c:	45b1      	cmp	r9, r6
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	d139      	bne.n	8010e08 <_dtoa_r+0x6c8>
 8010d94:	f7ef fa92 	bl	80002bc <__adddf3>
 8010d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	460f      	mov	r7, r1
 8010da0:	f7ef fed2 	bl	8000b48 <__aeabi_dcmpgt>
 8010da4:	b9c8      	cbnz	r0, 8010dda <_dtoa_r+0x69a>
 8010da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010daa:	4630      	mov	r0, r6
 8010dac:	4639      	mov	r1, r7
 8010dae:	f7ef fea3 	bl	8000af8 <__aeabi_dcmpeq>
 8010db2:	b110      	cbz	r0, 8010dba <_dtoa_r+0x67a>
 8010db4:	f018 0f01 	tst.w	r8, #1
 8010db8:	d10f      	bne.n	8010dda <_dtoa_r+0x69a>
 8010dba:	9904      	ldr	r1, [sp, #16]
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f001 f808 	bl	8011dd2 <_Bfree>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010dc6:	702b      	strb	r3, [r5, #0]
 8010dc8:	f10a 0301 	add.w	r3, sl, #1
 8010dcc:	6013      	str	r3, [r2, #0]
 8010dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 8241 	beq.w	8011258 <_dtoa_r+0xb18>
 8010dd6:	601d      	str	r5, [r3, #0]
 8010dd8:	e23e      	b.n	8011258 <_dtoa_r+0xb18>
 8010dda:	f8cd a020 	str.w	sl, [sp, #32]
 8010dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010de2:	2a39      	cmp	r2, #57	; 0x39
 8010de4:	f105 33ff 	add.w	r3, r5, #4294967295
 8010de8:	d108      	bne.n	8010dfc <_dtoa_r+0x6bc>
 8010dea:	459b      	cmp	fp, r3
 8010dec:	d10a      	bne.n	8010e04 <_dtoa_r+0x6c4>
 8010dee:	9b08      	ldr	r3, [sp, #32]
 8010df0:	3301      	adds	r3, #1
 8010df2:	9308      	str	r3, [sp, #32]
 8010df4:	2330      	movs	r3, #48	; 0x30
 8010df6:	f88b 3000 	strb.w	r3, [fp]
 8010dfa:	465b      	mov	r3, fp
 8010dfc:	781a      	ldrb	r2, [r3, #0]
 8010dfe:	3201      	adds	r2, #1
 8010e00:	701a      	strb	r2, [r3, #0]
 8010e02:	e78c      	b.n	8010d1e <_dtoa_r+0x5de>
 8010e04:	461d      	mov	r5, r3
 8010e06:	e7ea      	b.n	8010dde <_dtoa_r+0x69e>
 8010e08:	2200      	movs	r2, #0
 8010e0a:	4b9b      	ldr	r3, [pc, #620]	; (8011078 <_dtoa_r+0x938>)
 8010e0c:	f7ef fc0c 	bl	8000628 <__aeabi_dmul>
 8010e10:	2200      	movs	r2, #0
 8010e12:	2300      	movs	r3, #0
 8010e14:	4606      	mov	r6, r0
 8010e16:	460f      	mov	r7, r1
 8010e18:	f7ef fe6e 	bl	8000af8 <__aeabi_dcmpeq>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d09a      	beq.n	8010d56 <_dtoa_r+0x616>
 8010e20:	e7cb      	b.n	8010dba <_dtoa_r+0x67a>
 8010e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	f000 808b 	beq.w	8010f40 <_dtoa_r+0x800>
 8010e2a:	9a06      	ldr	r2, [sp, #24]
 8010e2c:	2a01      	cmp	r2, #1
 8010e2e:	dc6e      	bgt.n	8010f0e <_dtoa_r+0x7ce>
 8010e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e32:	2a00      	cmp	r2, #0
 8010e34:	d067      	beq.n	8010f06 <_dtoa_r+0x7c6>
 8010e36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e3a:	9f07      	ldr	r7, [sp, #28]
 8010e3c:	9d05      	ldr	r5, [sp, #20]
 8010e3e:	9a05      	ldr	r2, [sp, #20]
 8010e40:	2101      	movs	r1, #1
 8010e42:	441a      	add	r2, r3
 8010e44:	4620      	mov	r0, r4
 8010e46:	9205      	str	r2, [sp, #20]
 8010e48:	4498      	add	r8, r3
 8010e4a:	f001 f8a0 	bl	8011f8e <__i2b>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	dd0c      	ble.n	8010e6e <_dtoa_r+0x72e>
 8010e54:	f1b8 0f00 	cmp.w	r8, #0
 8010e58:	dd09      	ble.n	8010e6e <_dtoa_r+0x72e>
 8010e5a:	4545      	cmp	r5, r8
 8010e5c:	9a05      	ldr	r2, [sp, #20]
 8010e5e:	462b      	mov	r3, r5
 8010e60:	bfa8      	it	ge
 8010e62:	4643      	movge	r3, r8
 8010e64:	1ad2      	subs	r2, r2, r3
 8010e66:	9205      	str	r2, [sp, #20]
 8010e68:	1aed      	subs	r5, r5, r3
 8010e6a:	eba8 0803 	sub.w	r8, r8, r3
 8010e6e:	9b07      	ldr	r3, [sp, #28]
 8010e70:	b1eb      	cbz	r3, 8010eae <_dtoa_r+0x76e>
 8010e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d067      	beq.n	8010f48 <_dtoa_r+0x808>
 8010e78:	b18f      	cbz	r7, 8010e9e <_dtoa_r+0x75e>
 8010e7a:	4631      	mov	r1, r6
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f001 f924 	bl	80120cc <__pow5mult>
 8010e84:	9a04      	ldr	r2, [sp, #16]
 8010e86:	4601      	mov	r1, r0
 8010e88:	4606      	mov	r6, r0
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f001 f888 	bl	8011fa0 <__multiply>
 8010e90:	9904      	ldr	r1, [sp, #16]
 8010e92:	9008      	str	r0, [sp, #32]
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 ff9c 	bl	8011dd2 <_Bfree>
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	9304      	str	r3, [sp, #16]
 8010e9e:	9b07      	ldr	r3, [sp, #28]
 8010ea0:	1bda      	subs	r2, r3, r7
 8010ea2:	d004      	beq.n	8010eae <_dtoa_r+0x76e>
 8010ea4:	9904      	ldr	r1, [sp, #16]
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f001 f910 	bl	80120cc <__pow5mult>
 8010eac:	9004      	str	r0, [sp, #16]
 8010eae:	2101      	movs	r1, #1
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f001 f86c 	bl	8011f8e <__i2b>
 8010eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010eb8:	4607      	mov	r7, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 81d0 	beq.w	8011260 <_dtoa_r+0xb20>
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	4601      	mov	r1, r0
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f001 f901 	bl	80120cc <__pow5mult>
 8010eca:	9b06      	ldr	r3, [sp, #24]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	4607      	mov	r7, r0
 8010ed0:	dc40      	bgt.n	8010f54 <_dtoa_r+0x814>
 8010ed2:	9b00      	ldr	r3, [sp, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d139      	bne.n	8010f4c <_dtoa_r+0x80c>
 8010ed8:	9b01      	ldr	r3, [sp, #4]
 8010eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d136      	bne.n	8010f50 <_dtoa_r+0x810>
 8010ee2:	9b01      	ldr	r3, [sp, #4]
 8010ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ee8:	0d1b      	lsrs	r3, r3, #20
 8010eea:	051b      	lsls	r3, r3, #20
 8010eec:	b12b      	cbz	r3, 8010efa <_dtoa_r+0x7ba>
 8010eee:	9b05      	ldr	r3, [sp, #20]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	9305      	str	r3, [sp, #20]
 8010ef4:	f108 0801 	add.w	r8, r8, #1
 8010ef8:	2301      	movs	r3, #1
 8010efa:	9307      	str	r3, [sp, #28]
 8010efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d12a      	bne.n	8010f58 <_dtoa_r+0x818>
 8010f02:	2001      	movs	r0, #1
 8010f04:	e030      	b.n	8010f68 <_dtoa_r+0x828>
 8010f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f0c:	e795      	b.n	8010e3a <_dtoa_r+0x6fa>
 8010f0e:	9b07      	ldr	r3, [sp, #28]
 8010f10:	f109 37ff 	add.w	r7, r9, #4294967295
 8010f14:	42bb      	cmp	r3, r7
 8010f16:	bfbf      	itttt	lt
 8010f18:	9b07      	ldrlt	r3, [sp, #28]
 8010f1a:	9707      	strlt	r7, [sp, #28]
 8010f1c:	1afa      	sublt	r2, r7, r3
 8010f1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010f20:	bfbb      	ittet	lt
 8010f22:	189b      	addlt	r3, r3, r2
 8010f24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f26:	1bdf      	subge	r7, r3, r7
 8010f28:	2700      	movlt	r7, #0
 8010f2a:	f1b9 0f00 	cmp.w	r9, #0
 8010f2e:	bfb5      	itete	lt
 8010f30:	9b05      	ldrlt	r3, [sp, #20]
 8010f32:	9d05      	ldrge	r5, [sp, #20]
 8010f34:	eba3 0509 	sublt.w	r5, r3, r9
 8010f38:	464b      	movge	r3, r9
 8010f3a:	bfb8      	it	lt
 8010f3c:	2300      	movlt	r3, #0
 8010f3e:	e77e      	b.n	8010e3e <_dtoa_r+0x6fe>
 8010f40:	9f07      	ldr	r7, [sp, #28]
 8010f42:	9d05      	ldr	r5, [sp, #20]
 8010f44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010f46:	e783      	b.n	8010e50 <_dtoa_r+0x710>
 8010f48:	9a07      	ldr	r2, [sp, #28]
 8010f4a:	e7ab      	b.n	8010ea4 <_dtoa_r+0x764>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e7d4      	b.n	8010efa <_dtoa_r+0x7ba>
 8010f50:	9b00      	ldr	r3, [sp, #0]
 8010f52:	e7d2      	b.n	8010efa <_dtoa_r+0x7ba>
 8010f54:	2300      	movs	r3, #0
 8010f56:	9307      	str	r3, [sp, #28]
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010f5e:	6918      	ldr	r0, [r3, #16]
 8010f60:	f000 ffc7 	bl	8011ef2 <__hi0bits>
 8010f64:	f1c0 0020 	rsb	r0, r0, #32
 8010f68:	4440      	add	r0, r8
 8010f6a:	f010 001f 	ands.w	r0, r0, #31
 8010f6e:	d047      	beq.n	8011000 <_dtoa_r+0x8c0>
 8010f70:	f1c0 0320 	rsb	r3, r0, #32
 8010f74:	2b04      	cmp	r3, #4
 8010f76:	dd3b      	ble.n	8010ff0 <_dtoa_r+0x8b0>
 8010f78:	9b05      	ldr	r3, [sp, #20]
 8010f7a:	f1c0 001c 	rsb	r0, r0, #28
 8010f7e:	4403      	add	r3, r0
 8010f80:	9305      	str	r3, [sp, #20]
 8010f82:	4405      	add	r5, r0
 8010f84:	4480      	add	r8, r0
 8010f86:	9b05      	ldr	r3, [sp, #20]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	dd05      	ble.n	8010f98 <_dtoa_r+0x858>
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	9904      	ldr	r1, [sp, #16]
 8010f90:	4620      	mov	r0, r4
 8010f92:	f001 f8e9 	bl	8012168 <__lshift>
 8010f96:	9004      	str	r0, [sp, #16]
 8010f98:	f1b8 0f00 	cmp.w	r8, #0
 8010f9c:	dd05      	ble.n	8010faa <_dtoa_r+0x86a>
 8010f9e:	4639      	mov	r1, r7
 8010fa0:	4642      	mov	r2, r8
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f001 f8e0 	bl	8012168 <__lshift>
 8010fa8:	4607      	mov	r7, r0
 8010faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fac:	b353      	cbz	r3, 8011004 <_dtoa_r+0x8c4>
 8010fae:	4639      	mov	r1, r7
 8010fb0:	9804      	ldr	r0, [sp, #16]
 8010fb2:	f001 f92d 	bl	8012210 <__mcmp>
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	da24      	bge.n	8011004 <_dtoa_r+0x8c4>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	220a      	movs	r2, #10
 8010fbe:	9904      	ldr	r1, [sp, #16]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 ff1d 	bl	8011e00 <__multadd>
 8010fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fc8:	9004      	str	r0, [sp, #16]
 8010fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f000 814d 	beq.w	801126e <_dtoa_r+0xb2e>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4631      	mov	r1, r6
 8010fd8:	220a      	movs	r2, #10
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f000 ff10 	bl	8011e00 <__multadd>
 8010fe0:	9b02      	ldr	r3, [sp, #8]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	4606      	mov	r6, r0
 8010fe6:	dc4f      	bgt.n	8011088 <_dtoa_r+0x948>
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	dd4c      	ble.n	8011088 <_dtoa_r+0x948>
 8010fee:	e011      	b.n	8011014 <_dtoa_r+0x8d4>
 8010ff0:	d0c9      	beq.n	8010f86 <_dtoa_r+0x846>
 8010ff2:	9a05      	ldr	r2, [sp, #20]
 8010ff4:	331c      	adds	r3, #28
 8010ff6:	441a      	add	r2, r3
 8010ff8:	9205      	str	r2, [sp, #20]
 8010ffa:	441d      	add	r5, r3
 8010ffc:	4498      	add	r8, r3
 8010ffe:	e7c2      	b.n	8010f86 <_dtoa_r+0x846>
 8011000:	4603      	mov	r3, r0
 8011002:	e7f6      	b.n	8010ff2 <_dtoa_r+0x8b2>
 8011004:	f1b9 0f00 	cmp.w	r9, #0
 8011008:	dc38      	bgt.n	801107c <_dtoa_r+0x93c>
 801100a:	9b06      	ldr	r3, [sp, #24]
 801100c:	2b02      	cmp	r3, #2
 801100e:	dd35      	ble.n	801107c <_dtoa_r+0x93c>
 8011010:	f8cd 9008 	str.w	r9, [sp, #8]
 8011014:	9b02      	ldr	r3, [sp, #8]
 8011016:	b963      	cbnz	r3, 8011032 <_dtoa_r+0x8f2>
 8011018:	4639      	mov	r1, r7
 801101a:	2205      	movs	r2, #5
 801101c:	4620      	mov	r0, r4
 801101e:	f000 feef 	bl	8011e00 <__multadd>
 8011022:	4601      	mov	r1, r0
 8011024:	4607      	mov	r7, r0
 8011026:	9804      	ldr	r0, [sp, #16]
 8011028:	f001 f8f2 	bl	8012210 <__mcmp>
 801102c:	2800      	cmp	r0, #0
 801102e:	f73f adcc 	bgt.w	8010bca <_dtoa_r+0x48a>
 8011032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011034:	465d      	mov	r5, fp
 8011036:	ea6f 0a03 	mvn.w	sl, r3
 801103a:	f04f 0900 	mov.w	r9, #0
 801103e:	4639      	mov	r1, r7
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fec6 	bl	8011dd2 <_Bfree>
 8011046:	2e00      	cmp	r6, #0
 8011048:	f43f aeb7 	beq.w	8010dba <_dtoa_r+0x67a>
 801104c:	f1b9 0f00 	cmp.w	r9, #0
 8011050:	d005      	beq.n	801105e <_dtoa_r+0x91e>
 8011052:	45b1      	cmp	r9, r6
 8011054:	d003      	beq.n	801105e <_dtoa_r+0x91e>
 8011056:	4649      	mov	r1, r9
 8011058:	4620      	mov	r0, r4
 801105a:	f000 feba 	bl	8011dd2 <_Bfree>
 801105e:	4631      	mov	r1, r6
 8011060:	4620      	mov	r0, r4
 8011062:	f000 feb6 	bl	8011dd2 <_Bfree>
 8011066:	e6a8      	b.n	8010dba <_dtoa_r+0x67a>
 8011068:	2700      	movs	r7, #0
 801106a:	463e      	mov	r6, r7
 801106c:	e7e1      	b.n	8011032 <_dtoa_r+0x8f2>
 801106e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011072:	463e      	mov	r6, r7
 8011074:	e5a9      	b.n	8010bca <_dtoa_r+0x48a>
 8011076:	bf00      	nop
 8011078:	40240000 	.word	0x40240000
 801107c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801107e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011082:	2b00      	cmp	r3, #0
 8011084:	f000 80fa 	beq.w	801127c <_dtoa_r+0xb3c>
 8011088:	2d00      	cmp	r5, #0
 801108a:	dd05      	ble.n	8011098 <_dtoa_r+0x958>
 801108c:	4631      	mov	r1, r6
 801108e:	462a      	mov	r2, r5
 8011090:	4620      	mov	r0, r4
 8011092:	f001 f869 	bl	8012168 <__lshift>
 8011096:	4606      	mov	r6, r0
 8011098:	9b07      	ldr	r3, [sp, #28]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d04c      	beq.n	8011138 <_dtoa_r+0x9f8>
 801109e:	6871      	ldr	r1, [r6, #4]
 80110a0:	4620      	mov	r0, r4
 80110a2:	f000 fe62 	bl	8011d6a <_Balloc>
 80110a6:	6932      	ldr	r2, [r6, #16]
 80110a8:	3202      	adds	r2, #2
 80110aa:	4605      	mov	r5, r0
 80110ac:	0092      	lsls	r2, r2, #2
 80110ae:	f106 010c 	add.w	r1, r6, #12
 80110b2:	300c      	adds	r0, #12
 80110b4:	f000 fe4e 	bl	8011d54 <memcpy>
 80110b8:	2201      	movs	r2, #1
 80110ba:	4629      	mov	r1, r5
 80110bc:	4620      	mov	r0, r4
 80110be:	f001 f853 	bl	8012168 <__lshift>
 80110c2:	9b00      	ldr	r3, [sp, #0]
 80110c4:	f8cd b014 	str.w	fp, [sp, #20]
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	46b1      	mov	r9, r6
 80110ce:	9307      	str	r3, [sp, #28]
 80110d0:	4606      	mov	r6, r0
 80110d2:	4639      	mov	r1, r7
 80110d4:	9804      	ldr	r0, [sp, #16]
 80110d6:	f7ff faa7 	bl	8010628 <quorem>
 80110da:	4649      	mov	r1, r9
 80110dc:	4605      	mov	r5, r0
 80110de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80110e2:	9804      	ldr	r0, [sp, #16]
 80110e4:	f001 f894 	bl	8012210 <__mcmp>
 80110e8:	4632      	mov	r2, r6
 80110ea:	9000      	str	r0, [sp, #0]
 80110ec:	4639      	mov	r1, r7
 80110ee:	4620      	mov	r0, r4
 80110f0:	f001 f8a8 	bl	8012244 <__mdiff>
 80110f4:	68c3      	ldr	r3, [r0, #12]
 80110f6:	4602      	mov	r2, r0
 80110f8:	bb03      	cbnz	r3, 801113c <_dtoa_r+0x9fc>
 80110fa:	4601      	mov	r1, r0
 80110fc:	9008      	str	r0, [sp, #32]
 80110fe:	9804      	ldr	r0, [sp, #16]
 8011100:	f001 f886 	bl	8012210 <__mcmp>
 8011104:	9a08      	ldr	r2, [sp, #32]
 8011106:	4603      	mov	r3, r0
 8011108:	4611      	mov	r1, r2
 801110a:	4620      	mov	r0, r4
 801110c:	9308      	str	r3, [sp, #32]
 801110e:	f000 fe60 	bl	8011dd2 <_Bfree>
 8011112:	9b08      	ldr	r3, [sp, #32]
 8011114:	b9a3      	cbnz	r3, 8011140 <_dtoa_r+0xa00>
 8011116:	9a06      	ldr	r2, [sp, #24]
 8011118:	b992      	cbnz	r2, 8011140 <_dtoa_r+0xa00>
 801111a:	9a07      	ldr	r2, [sp, #28]
 801111c:	b982      	cbnz	r2, 8011140 <_dtoa_r+0xa00>
 801111e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011122:	d029      	beq.n	8011178 <_dtoa_r+0xa38>
 8011124:	9b00      	ldr	r3, [sp, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	dd01      	ble.n	801112e <_dtoa_r+0x9ee>
 801112a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801112e:	9b05      	ldr	r3, [sp, #20]
 8011130:	1c5d      	adds	r5, r3, #1
 8011132:	f883 8000 	strb.w	r8, [r3]
 8011136:	e782      	b.n	801103e <_dtoa_r+0x8fe>
 8011138:	4630      	mov	r0, r6
 801113a:	e7c2      	b.n	80110c2 <_dtoa_r+0x982>
 801113c:	2301      	movs	r3, #1
 801113e:	e7e3      	b.n	8011108 <_dtoa_r+0x9c8>
 8011140:	9a00      	ldr	r2, [sp, #0]
 8011142:	2a00      	cmp	r2, #0
 8011144:	db04      	blt.n	8011150 <_dtoa_r+0xa10>
 8011146:	d125      	bne.n	8011194 <_dtoa_r+0xa54>
 8011148:	9a06      	ldr	r2, [sp, #24]
 801114a:	bb1a      	cbnz	r2, 8011194 <_dtoa_r+0xa54>
 801114c:	9a07      	ldr	r2, [sp, #28]
 801114e:	bb0a      	cbnz	r2, 8011194 <_dtoa_r+0xa54>
 8011150:	2b00      	cmp	r3, #0
 8011152:	ddec      	ble.n	801112e <_dtoa_r+0x9ee>
 8011154:	2201      	movs	r2, #1
 8011156:	9904      	ldr	r1, [sp, #16]
 8011158:	4620      	mov	r0, r4
 801115a:	f001 f805 	bl	8012168 <__lshift>
 801115e:	4639      	mov	r1, r7
 8011160:	9004      	str	r0, [sp, #16]
 8011162:	f001 f855 	bl	8012210 <__mcmp>
 8011166:	2800      	cmp	r0, #0
 8011168:	dc03      	bgt.n	8011172 <_dtoa_r+0xa32>
 801116a:	d1e0      	bne.n	801112e <_dtoa_r+0x9ee>
 801116c:	f018 0f01 	tst.w	r8, #1
 8011170:	d0dd      	beq.n	801112e <_dtoa_r+0x9ee>
 8011172:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011176:	d1d8      	bne.n	801112a <_dtoa_r+0x9ea>
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	9a05      	ldr	r2, [sp, #20]
 801117c:	1c5d      	adds	r5, r3, #1
 801117e:	2339      	movs	r3, #57	; 0x39
 8011180:	7013      	strb	r3, [r2, #0]
 8011182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011186:	2b39      	cmp	r3, #57	; 0x39
 8011188:	f105 32ff 	add.w	r2, r5, #4294967295
 801118c:	d04f      	beq.n	801122e <_dtoa_r+0xaee>
 801118e:	3301      	adds	r3, #1
 8011190:	7013      	strb	r3, [r2, #0]
 8011192:	e754      	b.n	801103e <_dtoa_r+0x8fe>
 8011194:	9a05      	ldr	r2, [sp, #20]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f102 0501 	add.w	r5, r2, #1
 801119c:	dd06      	ble.n	80111ac <_dtoa_r+0xa6c>
 801119e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80111a2:	d0e9      	beq.n	8011178 <_dtoa_r+0xa38>
 80111a4:	f108 0801 	add.w	r8, r8, #1
 80111a8:	9b05      	ldr	r3, [sp, #20]
 80111aa:	e7c2      	b.n	8011132 <_dtoa_r+0x9f2>
 80111ac:	9a02      	ldr	r2, [sp, #8]
 80111ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80111b2:	eba5 030b 	sub.w	r3, r5, fp
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d021      	beq.n	80111fe <_dtoa_r+0xabe>
 80111ba:	2300      	movs	r3, #0
 80111bc:	220a      	movs	r2, #10
 80111be:	9904      	ldr	r1, [sp, #16]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 fe1d 	bl	8011e00 <__multadd>
 80111c6:	45b1      	cmp	r9, r6
 80111c8:	9004      	str	r0, [sp, #16]
 80111ca:	f04f 0300 	mov.w	r3, #0
 80111ce:	f04f 020a 	mov.w	r2, #10
 80111d2:	4649      	mov	r1, r9
 80111d4:	4620      	mov	r0, r4
 80111d6:	d105      	bne.n	80111e4 <_dtoa_r+0xaa4>
 80111d8:	f000 fe12 	bl	8011e00 <__multadd>
 80111dc:	4681      	mov	r9, r0
 80111de:	4606      	mov	r6, r0
 80111e0:	9505      	str	r5, [sp, #20]
 80111e2:	e776      	b.n	80110d2 <_dtoa_r+0x992>
 80111e4:	f000 fe0c 	bl	8011e00 <__multadd>
 80111e8:	4631      	mov	r1, r6
 80111ea:	4681      	mov	r9, r0
 80111ec:	2300      	movs	r3, #0
 80111ee:	220a      	movs	r2, #10
 80111f0:	4620      	mov	r0, r4
 80111f2:	f000 fe05 	bl	8011e00 <__multadd>
 80111f6:	4606      	mov	r6, r0
 80111f8:	e7f2      	b.n	80111e0 <_dtoa_r+0xaa0>
 80111fa:	f04f 0900 	mov.w	r9, #0
 80111fe:	2201      	movs	r2, #1
 8011200:	9904      	ldr	r1, [sp, #16]
 8011202:	4620      	mov	r0, r4
 8011204:	f000 ffb0 	bl	8012168 <__lshift>
 8011208:	4639      	mov	r1, r7
 801120a:	9004      	str	r0, [sp, #16]
 801120c:	f001 f800 	bl	8012210 <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	dcb6      	bgt.n	8011182 <_dtoa_r+0xa42>
 8011214:	d102      	bne.n	801121c <_dtoa_r+0xadc>
 8011216:	f018 0f01 	tst.w	r8, #1
 801121a:	d1b2      	bne.n	8011182 <_dtoa_r+0xa42>
 801121c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011220:	2b30      	cmp	r3, #48	; 0x30
 8011222:	f105 32ff 	add.w	r2, r5, #4294967295
 8011226:	f47f af0a 	bne.w	801103e <_dtoa_r+0x8fe>
 801122a:	4615      	mov	r5, r2
 801122c:	e7f6      	b.n	801121c <_dtoa_r+0xadc>
 801122e:	4593      	cmp	fp, r2
 8011230:	d105      	bne.n	801123e <_dtoa_r+0xafe>
 8011232:	2331      	movs	r3, #49	; 0x31
 8011234:	f10a 0a01 	add.w	sl, sl, #1
 8011238:	f88b 3000 	strb.w	r3, [fp]
 801123c:	e6ff      	b.n	801103e <_dtoa_r+0x8fe>
 801123e:	4615      	mov	r5, r2
 8011240:	e79f      	b.n	8011182 <_dtoa_r+0xa42>
 8011242:	f8df b064 	ldr.w	fp, [pc, #100]	; 80112a8 <_dtoa_r+0xb68>
 8011246:	e007      	b.n	8011258 <_dtoa_r+0xb18>
 8011248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801124a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80112ac <_dtoa_r+0xb6c>
 801124e:	b11b      	cbz	r3, 8011258 <_dtoa_r+0xb18>
 8011250:	f10b 0308 	add.w	r3, fp, #8
 8011254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	4658      	mov	r0, fp
 801125a:	b017      	add	sp, #92	; 0x5c
 801125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011260:	9b06      	ldr	r3, [sp, #24]
 8011262:	2b01      	cmp	r3, #1
 8011264:	f77f ae35 	ble.w	8010ed2 <_dtoa_r+0x792>
 8011268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801126a:	9307      	str	r3, [sp, #28]
 801126c:	e649      	b.n	8010f02 <_dtoa_r+0x7c2>
 801126e:	9b02      	ldr	r3, [sp, #8]
 8011270:	2b00      	cmp	r3, #0
 8011272:	dc03      	bgt.n	801127c <_dtoa_r+0xb3c>
 8011274:	9b06      	ldr	r3, [sp, #24]
 8011276:	2b02      	cmp	r3, #2
 8011278:	f73f aecc 	bgt.w	8011014 <_dtoa_r+0x8d4>
 801127c:	465d      	mov	r5, fp
 801127e:	4639      	mov	r1, r7
 8011280:	9804      	ldr	r0, [sp, #16]
 8011282:	f7ff f9d1 	bl	8010628 <quorem>
 8011286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801128a:	f805 8b01 	strb.w	r8, [r5], #1
 801128e:	9a02      	ldr	r2, [sp, #8]
 8011290:	eba5 030b 	sub.w	r3, r5, fp
 8011294:	429a      	cmp	r2, r3
 8011296:	ddb0      	ble.n	80111fa <_dtoa_r+0xaba>
 8011298:	2300      	movs	r3, #0
 801129a:	220a      	movs	r2, #10
 801129c:	9904      	ldr	r1, [sp, #16]
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 fdae 	bl	8011e00 <__multadd>
 80112a4:	9004      	str	r0, [sp, #16]
 80112a6:	e7ea      	b.n	801127e <_dtoa_r+0xb3e>
 80112a8:	08013d7b 	.word	0x08013d7b
 80112ac:	08013bd8 	.word	0x08013bd8

080112b0 <__sflush_r>:
 80112b0:	898a      	ldrh	r2, [r1, #12]
 80112b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112b6:	4605      	mov	r5, r0
 80112b8:	0710      	lsls	r0, r2, #28
 80112ba:	460c      	mov	r4, r1
 80112bc:	d458      	bmi.n	8011370 <__sflush_r+0xc0>
 80112be:	684b      	ldr	r3, [r1, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	dc05      	bgt.n	80112d0 <__sflush_r+0x20>
 80112c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	dc02      	bgt.n	80112d0 <__sflush_r+0x20>
 80112ca:	2000      	movs	r0, #0
 80112cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112d2:	2e00      	cmp	r6, #0
 80112d4:	d0f9      	beq.n	80112ca <__sflush_r+0x1a>
 80112d6:	2300      	movs	r3, #0
 80112d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112dc:	682f      	ldr	r7, [r5, #0]
 80112de:	6a21      	ldr	r1, [r4, #32]
 80112e0:	602b      	str	r3, [r5, #0]
 80112e2:	d032      	beq.n	801134a <__sflush_r+0x9a>
 80112e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112e6:	89a3      	ldrh	r3, [r4, #12]
 80112e8:	075a      	lsls	r2, r3, #29
 80112ea:	d505      	bpl.n	80112f8 <__sflush_r+0x48>
 80112ec:	6863      	ldr	r3, [r4, #4]
 80112ee:	1ac0      	subs	r0, r0, r3
 80112f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112f2:	b10b      	cbz	r3, 80112f8 <__sflush_r+0x48>
 80112f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112f6:	1ac0      	subs	r0, r0, r3
 80112f8:	2300      	movs	r3, #0
 80112fa:	4602      	mov	r2, r0
 80112fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112fe:	6a21      	ldr	r1, [r4, #32]
 8011300:	4628      	mov	r0, r5
 8011302:	47b0      	blx	r6
 8011304:	1c43      	adds	r3, r0, #1
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	d106      	bne.n	8011318 <__sflush_r+0x68>
 801130a:	6829      	ldr	r1, [r5, #0]
 801130c:	291d      	cmp	r1, #29
 801130e:	d848      	bhi.n	80113a2 <__sflush_r+0xf2>
 8011310:	4a29      	ldr	r2, [pc, #164]	; (80113b8 <__sflush_r+0x108>)
 8011312:	40ca      	lsrs	r2, r1
 8011314:	07d6      	lsls	r6, r2, #31
 8011316:	d544      	bpl.n	80113a2 <__sflush_r+0xf2>
 8011318:	2200      	movs	r2, #0
 801131a:	6062      	str	r2, [r4, #4]
 801131c:	04d9      	lsls	r1, r3, #19
 801131e:	6922      	ldr	r2, [r4, #16]
 8011320:	6022      	str	r2, [r4, #0]
 8011322:	d504      	bpl.n	801132e <__sflush_r+0x7e>
 8011324:	1c42      	adds	r2, r0, #1
 8011326:	d101      	bne.n	801132c <__sflush_r+0x7c>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	b903      	cbnz	r3, 801132e <__sflush_r+0x7e>
 801132c:	6560      	str	r0, [r4, #84]	; 0x54
 801132e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011330:	602f      	str	r7, [r5, #0]
 8011332:	2900      	cmp	r1, #0
 8011334:	d0c9      	beq.n	80112ca <__sflush_r+0x1a>
 8011336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801133a:	4299      	cmp	r1, r3
 801133c:	d002      	beq.n	8011344 <__sflush_r+0x94>
 801133e:	4628      	mov	r0, r5
 8011340:	f001 f920 	bl	8012584 <_free_r>
 8011344:	2000      	movs	r0, #0
 8011346:	6360      	str	r0, [r4, #52]	; 0x34
 8011348:	e7c0      	b.n	80112cc <__sflush_r+0x1c>
 801134a:	2301      	movs	r3, #1
 801134c:	4628      	mov	r0, r5
 801134e:	47b0      	blx	r6
 8011350:	1c41      	adds	r1, r0, #1
 8011352:	d1c8      	bne.n	80112e6 <__sflush_r+0x36>
 8011354:	682b      	ldr	r3, [r5, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0c5      	beq.n	80112e6 <__sflush_r+0x36>
 801135a:	2b1d      	cmp	r3, #29
 801135c:	d001      	beq.n	8011362 <__sflush_r+0xb2>
 801135e:	2b16      	cmp	r3, #22
 8011360:	d101      	bne.n	8011366 <__sflush_r+0xb6>
 8011362:	602f      	str	r7, [r5, #0]
 8011364:	e7b1      	b.n	80112ca <__sflush_r+0x1a>
 8011366:	89a3      	ldrh	r3, [r4, #12]
 8011368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801136c:	81a3      	strh	r3, [r4, #12]
 801136e:	e7ad      	b.n	80112cc <__sflush_r+0x1c>
 8011370:	690f      	ldr	r7, [r1, #16]
 8011372:	2f00      	cmp	r7, #0
 8011374:	d0a9      	beq.n	80112ca <__sflush_r+0x1a>
 8011376:	0793      	lsls	r3, r2, #30
 8011378:	680e      	ldr	r6, [r1, #0]
 801137a:	bf08      	it	eq
 801137c:	694b      	ldreq	r3, [r1, #20]
 801137e:	600f      	str	r7, [r1, #0]
 8011380:	bf18      	it	ne
 8011382:	2300      	movne	r3, #0
 8011384:	eba6 0807 	sub.w	r8, r6, r7
 8011388:	608b      	str	r3, [r1, #8]
 801138a:	f1b8 0f00 	cmp.w	r8, #0
 801138e:	dd9c      	ble.n	80112ca <__sflush_r+0x1a>
 8011390:	4643      	mov	r3, r8
 8011392:	463a      	mov	r2, r7
 8011394:	6a21      	ldr	r1, [r4, #32]
 8011396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011398:	4628      	mov	r0, r5
 801139a:	47b0      	blx	r6
 801139c:	2800      	cmp	r0, #0
 801139e:	dc06      	bgt.n	80113ae <__sflush_r+0xfe>
 80113a0:	89a3      	ldrh	r3, [r4, #12]
 80113a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113a6:	81a3      	strh	r3, [r4, #12]
 80113a8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ac:	e78e      	b.n	80112cc <__sflush_r+0x1c>
 80113ae:	4407      	add	r7, r0
 80113b0:	eba8 0800 	sub.w	r8, r8, r0
 80113b4:	e7e9      	b.n	801138a <__sflush_r+0xda>
 80113b6:	bf00      	nop
 80113b8:	20400001 	.word	0x20400001

080113bc <_fflush_r>:
 80113bc:	b538      	push	{r3, r4, r5, lr}
 80113be:	690b      	ldr	r3, [r1, #16]
 80113c0:	4605      	mov	r5, r0
 80113c2:	460c      	mov	r4, r1
 80113c4:	b1db      	cbz	r3, 80113fe <_fflush_r+0x42>
 80113c6:	b118      	cbz	r0, 80113d0 <_fflush_r+0x14>
 80113c8:	6983      	ldr	r3, [r0, #24]
 80113ca:	b90b      	cbnz	r3, 80113d0 <_fflush_r+0x14>
 80113cc:	f000 f860 	bl	8011490 <__sinit>
 80113d0:	4b0c      	ldr	r3, [pc, #48]	; (8011404 <_fflush_r+0x48>)
 80113d2:	429c      	cmp	r4, r3
 80113d4:	d109      	bne.n	80113ea <_fflush_r+0x2e>
 80113d6:	686c      	ldr	r4, [r5, #4]
 80113d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113dc:	b17b      	cbz	r3, 80113fe <_fflush_r+0x42>
 80113de:	4621      	mov	r1, r4
 80113e0:	4628      	mov	r0, r5
 80113e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113e6:	f7ff bf63 	b.w	80112b0 <__sflush_r>
 80113ea:	4b07      	ldr	r3, [pc, #28]	; (8011408 <_fflush_r+0x4c>)
 80113ec:	429c      	cmp	r4, r3
 80113ee:	d101      	bne.n	80113f4 <_fflush_r+0x38>
 80113f0:	68ac      	ldr	r4, [r5, #8]
 80113f2:	e7f1      	b.n	80113d8 <_fflush_r+0x1c>
 80113f4:	4b05      	ldr	r3, [pc, #20]	; (801140c <_fflush_r+0x50>)
 80113f6:	429c      	cmp	r4, r3
 80113f8:	bf08      	it	eq
 80113fa:	68ec      	ldreq	r4, [r5, #12]
 80113fc:	e7ec      	b.n	80113d8 <_fflush_r+0x1c>
 80113fe:	2000      	movs	r0, #0
 8011400:	bd38      	pop	{r3, r4, r5, pc}
 8011402:	bf00      	nop
 8011404:	08013c08 	.word	0x08013c08
 8011408:	08013c28 	.word	0x08013c28
 801140c:	08013be8 	.word	0x08013be8

08011410 <std>:
 8011410:	2300      	movs	r3, #0
 8011412:	b510      	push	{r4, lr}
 8011414:	4604      	mov	r4, r0
 8011416:	e9c0 3300 	strd	r3, r3, [r0]
 801141a:	6083      	str	r3, [r0, #8]
 801141c:	8181      	strh	r1, [r0, #12]
 801141e:	6643      	str	r3, [r0, #100]	; 0x64
 8011420:	81c2      	strh	r2, [r0, #14]
 8011422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011426:	6183      	str	r3, [r0, #24]
 8011428:	4619      	mov	r1, r3
 801142a:	2208      	movs	r2, #8
 801142c:	305c      	adds	r0, #92	; 0x5c
 801142e:	f7fd f9c3 	bl	800e7b8 <memset>
 8011432:	4b05      	ldr	r3, [pc, #20]	; (8011448 <std+0x38>)
 8011434:	6263      	str	r3, [r4, #36]	; 0x24
 8011436:	4b05      	ldr	r3, [pc, #20]	; (801144c <std+0x3c>)
 8011438:	62a3      	str	r3, [r4, #40]	; 0x28
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <std+0x40>)
 801143c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801143e:	4b05      	ldr	r3, [pc, #20]	; (8011454 <std+0x44>)
 8011440:	6224      	str	r4, [r4, #32]
 8011442:	6323      	str	r3, [r4, #48]	; 0x30
 8011444:	bd10      	pop	{r4, pc}
 8011446:	bf00      	nop
 8011448:	0800f66d 	.word	0x0800f66d
 801144c:	0800f693 	.word	0x0800f693
 8011450:	0800f6cb 	.word	0x0800f6cb
 8011454:	0800f6ef 	.word	0x0800f6ef

08011458 <_cleanup_r>:
 8011458:	4901      	ldr	r1, [pc, #4]	; (8011460 <_cleanup_r+0x8>)
 801145a:	f000 b885 	b.w	8011568 <_fwalk_reent>
 801145e:	bf00      	nop
 8011460:	080113bd 	.word	0x080113bd

08011464 <__sfmoreglue>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	1e4a      	subs	r2, r1, #1
 8011468:	2568      	movs	r5, #104	; 0x68
 801146a:	4355      	muls	r5, r2
 801146c:	460e      	mov	r6, r1
 801146e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011472:	f001 f8d5 	bl	8012620 <_malloc_r>
 8011476:	4604      	mov	r4, r0
 8011478:	b140      	cbz	r0, 801148c <__sfmoreglue+0x28>
 801147a:	2100      	movs	r1, #0
 801147c:	e9c0 1600 	strd	r1, r6, [r0]
 8011480:	300c      	adds	r0, #12
 8011482:	60a0      	str	r0, [r4, #8]
 8011484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011488:	f7fd f996 	bl	800e7b8 <memset>
 801148c:	4620      	mov	r0, r4
 801148e:	bd70      	pop	{r4, r5, r6, pc}

08011490 <__sinit>:
 8011490:	6983      	ldr	r3, [r0, #24]
 8011492:	b510      	push	{r4, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	bb33      	cbnz	r3, 80114e6 <__sinit+0x56>
 8011498:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801149c:	6503      	str	r3, [r0, #80]	; 0x50
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <__sinit+0x58>)
 80114a0:	4a12      	ldr	r2, [pc, #72]	; (80114ec <__sinit+0x5c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6282      	str	r2, [r0, #40]	; 0x28
 80114a6:	4298      	cmp	r0, r3
 80114a8:	bf04      	itt	eq
 80114aa:	2301      	moveq	r3, #1
 80114ac:	6183      	streq	r3, [r0, #24]
 80114ae:	f000 f81f 	bl	80114f0 <__sfp>
 80114b2:	6060      	str	r0, [r4, #4]
 80114b4:	4620      	mov	r0, r4
 80114b6:	f000 f81b 	bl	80114f0 <__sfp>
 80114ba:	60a0      	str	r0, [r4, #8]
 80114bc:	4620      	mov	r0, r4
 80114be:	f000 f817 	bl	80114f0 <__sfp>
 80114c2:	2200      	movs	r2, #0
 80114c4:	60e0      	str	r0, [r4, #12]
 80114c6:	2104      	movs	r1, #4
 80114c8:	6860      	ldr	r0, [r4, #4]
 80114ca:	f7ff ffa1 	bl	8011410 <std>
 80114ce:	2201      	movs	r2, #1
 80114d0:	2109      	movs	r1, #9
 80114d2:	68a0      	ldr	r0, [r4, #8]
 80114d4:	f7ff ff9c 	bl	8011410 <std>
 80114d8:	2202      	movs	r2, #2
 80114da:	2112      	movs	r1, #18
 80114dc:	68e0      	ldr	r0, [r4, #12]
 80114de:	f7ff ff97 	bl	8011410 <std>
 80114e2:	2301      	movs	r3, #1
 80114e4:	61a3      	str	r3, [r4, #24]
 80114e6:	bd10      	pop	{r4, pc}
 80114e8:	08013b48 	.word	0x08013b48
 80114ec:	08011459 	.word	0x08011459

080114f0 <__sfp>:
 80114f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f2:	4b1b      	ldr	r3, [pc, #108]	; (8011560 <__sfp+0x70>)
 80114f4:	681e      	ldr	r6, [r3, #0]
 80114f6:	69b3      	ldr	r3, [r6, #24]
 80114f8:	4607      	mov	r7, r0
 80114fa:	b913      	cbnz	r3, 8011502 <__sfp+0x12>
 80114fc:	4630      	mov	r0, r6
 80114fe:	f7ff ffc7 	bl	8011490 <__sinit>
 8011502:	3648      	adds	r6, #72	; 0x48
 8011504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011508:	3b01      	subs	r3, #1
 801150a:	d503      	bpl.n	8011514 <__sfp+0x24>
 801150c:	6833      	ldr	r3, [r6, #0]
 801150e:	b133      	cbz	r3, 801151e <__sfp+0x2e>
 8011510:	6836      	ldr	r6, [r6, #0]
 8011512:	e7f7      	b.n	8011504 <__sfp+0x14>
 8011514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011518:	b16d      	cbz	r5, 8011536 <__sfp+0x46>
 801151a:	3468      	adds	r4, #104	; 0x68
 801151c:	e7f4      	b.n	8011508 <__sfp+0x18>
 801151e:	2104      	movs	r1, #4
 8011520:	4638      	mov	r0, r7
 8011522:	f7ff ff9f 	bl	8011464 <__sfmoreglue>
 8011526:	6030      	str	r0, [r6, #0]
 8011528:	2800      	cmp	r0, #0
 801152a:	d1f1      	bne.n	8011510 <__sfp+0x20>
 801152c:	230c      	movs	r3, #12
 801152e:	603b      	str	r3, [r7, #0]
 8011530:	4604      	mov	r4, r0
 8011532:	4620      	mov	r0, r4
 8011534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011536:	4b0b      	ldr	r3, [pc, #44]	; (8011564 <__sfp+0x74>)
 8011538:	6665      	str	r5, [r4, #100]	; 0x64
 801153a:	e9c4 5500 	strd	r5, r5, [r4]
 801153e:	60a5      	str	r5, [r4, #8]
 8011540:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011544:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011548:	2208      	movs	r2, #8
 801154a:	4629      	mov	r1, r5
 801154c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011550:	f7fd f932 	bl	800e7b8 <memset>
 8011554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801155c:	e7e9      	b.n	8011532 <__sfp+0x42>
 801155e:	bf00      	nop
 8011560:	08013b48 	.word	0x08013b48
 8011564:	ffff0001 	.word	0xffff0001

08011568 <_fwalk_reent>:
 8011568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801156c:	4680      	mov	r8, r0
 801156e:	4689      	mov	r9, r1
 8011570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011574:	2600      	movs	r6, #0
 8011576:	b914      	cbnz	r4, 801157e <_fwalk_reent+0x16>
 8011578:	4630      	mov	r0, r6
 801157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011582:	3f01      	subs	r7, #1
 8011584:	d501      	bpl.n	801158a <_fwalk_reent+0x22>
 8011586:	6824      	ldr	r4, [r4, #0]
 8011588:	e7f5      	b.n	8011576 <_fwalk_reent+0xe>
 801158a:	89ab      	ldrh	r3, [r5, #12]
 801158c:	2b01      	cmp	r3, #1
 801158e:	d907      	bls.n	80115a0 <_fwalk_reent+0x38>
 8011590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011594:	3301      	adds	r3, #1
 8011596:	d003      	beq.n	80115a0 <_fwalk_reent+0x38>
 8011598:	4629      	mov	r1, r5
 801159a:	4640      	mov	r0, r8
 801159c:	47c8      	blx	r9
 801159e:	4306      	orrs	r6, r0
 80115a0:	3568      	adds	r5, #104	; 0x68
 80115a2:	e7ee      	b.n	8011582 <_fwalk_reent+0x1a>

080115a4 <rshift>:
 80115a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a6:	6906      	ldr	r6, [r0, #16]
 80115a8:	114b      	asrs	r3, r1, #5
 80115aa:	429e      	cmp	r6, r3
 80115ac:	f100 0414 	add.w	r4, r0, #20
 80115b0:	dd30      	ble.n	8011614 <rshift+0x70>
 80115b2:	f011 011f 	ands.w	r1, r1, #31
 80115b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80115ba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80115be:	d108      	bne.n	80115d2 <rshift+0x2e>
 80115c0:	4621      	mov	r1, r4
 80115c2:	42b2      	cmp	r2, r6
 80115c4:	460b      	mov	r3, r1
 80115c6:	d211      	bcs.n	80115ec <rshift+0x48>
 80115c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80115cc:	f841 3b04 	str.w	r3, [r1], #4
 80115d0:	e7f7      	b.n	80115c2 <rshift+0x1e>
 80115d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80115d6:	f1c1 0c20 	rsb	ip, r1, #32
 80115da:	40cd      	lsrs	r5, r1
 80115dc:	3204      	adds	r2, #4
 80115de:	4623      	mov	r3, r4
 80115e0:	42b2      	cmp	r2, r6
 80115e2:	4617      	mov	r7, r2
 80115e4:	d30c      	bcc.n	8011600 <rshift+0x5c>
 80115e6:	601d      	str	r5, [r3, #0]
 80115e8:	b105      	cbz	r5, 80115ec <rshift+0x48>
 80115ea:	3304      	adds	r3, #4
 80115ec:	1b1a      	subs	r2, r3, r4
 80115ee:	42a3      	cmp	r3, r4
 80115f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115f4:	bf08      	it	eq
 80115f6:	2300      	moveq	r3, #0
 80115f8:	6102      	str	r2, [r0, #16]
 80115fa:	bf08      	it	eq
 80115fc:	6143      	streq	r3, [r0, #20]
 80115fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011600:	683f      	ldr	r7, [r7, #0]
 8011602:	fa07 f70c 	lsl.w	r7, r7, ip
 8011606:	433d      	orrs	r5, r7
 8011608:	f843 5b04 	str.w	r5, [r3], #4
 801160c:	f852 5b04 	ldr.w	r5, [r2], #4
 8011610:	40cd      	lsrs	r5, r1
 8011612:	e7e5      	b.n	80115e0 <rshift+0x3c>
 8011614:	4623      	mov	r3, r4
 8011616:	e7e9      	b.n	80115ec <rshift+0x48>

08011618 <__hexdig_fun>:
 8011618:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801161c:	2b09      	cmp	r3, #9
 801161e:	d802      	bhi.n	8011626 <__hexdig_fun+0xe>
 8011620:	3820      	subs	r0, #32
 8011622:	b2c0      	uxtb	r0, r0
 8011624:	4770      	bx	lr
 8011626:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801162a:	2b05      	cmp	r3, #5
 801162c:	d801      	bhi.n	8011632 <__hexdig_fun+0x1a>
 801162e:	3847      	subs	r0, #71	; 0x47
 8011630:	e7f7      	b.n	8011622 <__hexdig_fun+0xa>
 8011632:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011636:	2b05      	cmp	r3, #5
 8011638:	d801      	bhi.n	801163e <__hexdig_fun+0x26>
 801163a:	3827      	subs	r0, #39	; 0x27
 801163c:	e7f1      	b.n	8011622 <__hexdig_fun+0xa>
 801163e:	2000      	movs	r0, #0
 8011640:	4770      	bx	lr

08011642 <__gethex>:
 8011642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011646:	b08b      	sub	sp, #44	; 0x2c
 8011648:	468a      	mov	sl, r1
 801164a:	9002      	str	r0, [sp, #8]
 801164c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801164e:	9306      	str	r3, [sp, #24]
 8011650:	4690      	mov	r8, r2
 8011652:	f000 fadf 	bl	8011c14 <__localeconv_l>
 8011656:	6803      	ldr	r3, [r0, #0]
 8011658:	9303      	str	r3, [sp, #12]
 801165a:	4618      	mov	r0, r3
 801165c:	f7ee fdd0 	bl	8000200 <strlen>
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	9001      	str	r0, [sp, #4]
 8011664:	4403      	add	r3, r0
 8011666:	f04f 0b00 	mov.w	fp, #0
 801166a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801166e:	9307      	str	r3, [sp, #28]
 8011670:	f8da 3000 	ldr.w	r3, [sl]
 8011674:	3302      	adds	r3, #2
 8011676:	461f      	mov	r7, r3
 8011678:	f813 0b01 	ldrb.w	r0, [r3], #1
 801167c:	2830      	cmp	r0, #48	; 0x30
 801167e:	d06c      	beq.n	801175a <__gethex+0x118>
 8011680:	f7ff ffca 	bl	8011618 <__hexdig_fun>
 8011684:	4604      	mov	r4, r0
 8011686:	2800      	cmp	r0, #0
 8011688:	d16a      	bne.n	8011760 <__gethex+0x11e>
 801168a:	9a01      	ldr	r2, [sp, #4]
 801168c:	9903      	ldr	r1, [sp, #12]
 801168e:	4638      	mov	r0, r7
 8011690:	f001 fe3e 	bl	8013310 <strncmp>
 8011694:	2800      	cmp	r0, #0
 8011696:	d166      	bne.n	8011766 <__gethex+0x124>
 8011698:	9b01      	ldr	r3, [sp, #4]
 801169a:	5cf8      	ldrb	r0, [r7, r3]
 801169c:	18fe      	adds	r6, r7, r3
 801169e:	f7ff ffbb 	bl	8011618 <__hexdig_fun>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d062      	beq.n	801176c <__gethex+0x12a>
 80116a6:	4633      	mov	r3, r6
 80116a8:	7818      	ldrb	r0, [r3, #0]
 80116aa:	2830      	cmp	r0, #48	; 0x30
 80116ac:	461f      	mov	r7, r3
 80116ae:	f103 0301 	add.w	r3, r3, #1
 80116b2:	d0f9      	beq.n	80116a8 <__gethex+0x66>
 80116b4:	f7ff ffb0 	bl	8011618 <__hexdig_fun>
 80116b8:	fab0 f580 	clz	r5, r0
 80116bc:	096d      	lsrs	r5, r5, #5
 80116be:	4634      	mov	r4, r6
 80116c0:	f04f 0b01 	mov.w	fp, #1
 80116c4:	463a      	mov	r2, r7
 80116c6:	4616      	mov	r6, r2
 80116c8:	3201      	adds	r2, #1
 80116ca:	7830      	ldrb	r0, [r6, #0]
 80116cc:	f7ff ffa4 	bl	8011618 <__hexdig_fun>
 80116d0:	2800      	cmp	r0, #0
 80116d2:	d1f8      	bne.n	80116c6 <__gethex+0x84>
 80116d4:	9a01      	ldr	r2, [sp, #4]
 80116d6:	9903      	ldr	r1, [sp, #12]
 80116d8:	4630      	mov	r0, r6
 80116da:	f001 fe19 	bl	8013310 <strncmp>
 80116de:	b950      	cbnz	r0, 80116f6 <__gethex+0xb4>
 80116e0:	b954      	cbnz	r4, 80116f8 <__gethex+0xb6>
 80116e2:	9b01      	ldr	r3, [sp, #4]
 80116e4:	18f4      	adds	r4, r6, r3
 80116e6:	4622      	mov	r2, r4
 80116e8:	4616      	mov	r6, r2
 80116ea:	3201      	adds	r2, #1
 80116ec:	7830      	ldrb	r0, [r6, #0]
 80116ee:	f7ff ff93 	bl	8011618 <__hexdig_fun>
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d1f8      	bne.n	80116e8 <__gethex+0xa6>
 80116f6:	b10c      	cbz	r4, 80116fc <__gethex+0xba>
 80116f8:	1ba4      	subs	r4, r4, r6
 80116fa:	00a4      	lsls	r4, r4, #2
 80116fc:	7833      	ldrb	r3, [r6, #0]
 80116fe:	2b50      	cmp	r3, #80	; 0x50
 8011700:	d001      	beq.n	8011706 <__gethex+0xc4>
 8011702:	2b70      	cmp	r3, #112	; 0x70
 8011704:	d140      	bne.n	8011788 <__gethex+0x146>
 8011706:	7873      	ldrb	r3, [r6, #1]
 8011708:	2b2b      	cmp	r3, #43	; 0x2b
 801170a:	d031      	beq.n	8011770 <__gethex+0x12e>
 801170c:	2b2d      	cmp	r3, #45	; 0x2d
 801170e:	d033      	beq.n	8011778 <__gethex+0x136>
 8011710:	1c71      	adds	r1, r6, #1
 8011712:	f04f 0900 	mov.w	r9, #0
 8011716:	7808      	ldrb	r0, [r1, #0]
 8011718:	f7ff ff7e 	bl	8011618 <__hexdig_fun>
 801171c:	1e43      	subs	r3, r0, #1
 801171e:	b2db      	uxtb	r3, r3
 8011720:	2b18      	cmp	r3, #24
 8011722:	d831      	bhi.n	8011788 <__gethex+0x146>
 8011724:	f1a0 0210 	sub.w	r2, r0, #16
 8011728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801172c:	f7ff ff74 	bl	8011618 <__hexdig_fun>
 8011730:	1e43      	subs	r3, r0, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b18      	cmp	r3, #24
 8011736:	d922      	bls.n	801177e <__gethex+0x13c>
 8011738:	f1b9 0f00 	cmp.w	r9, #0
 801173c:	d000      	beq.n	8011740 <__gethex+0xfe>
 801173e:	4252      	negs	r2, r2
 8011740:	4414      	add	r4, r2
 8011742:	f8ca 1000 	str.w	r1, [sl]
 8011746:	b30d      	cbz	r5, 801178c <__gethex+0x14a>
 8011748:	f1bb 0f00 	cmp.w	fp, #0
 801174c:	bf0c      	ite	eq
 801174e:	2706      	moveq	r7, #6
 8011750:	2700      	movne	r7, #0
 8011752:	4638      	mov	r0, r7
 8011754:	b00b      	add	sp, #44	; 0x2c
 8011756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801175a:	f10b 0b01 	add.w	fp, fp, #1
 801175e:	e78a      	b.n	8011676 <__gethex+0x34>
 8011760:	2500      	movs	r5, #0
 8011762:	462c      	mov	r4, r5
 8011764:	e7ae      	b.n	80116c4 <__gethex+0x82>
 8011766:	463e      	mov	r6, r7
 8011768:	2501      	movs	r5, #1
 801176a:	e7c7      	b.n	80116fc <__gethex+0xba>
 801176c:	4604      	mov	r4, r0
 801176e:	e7fb      	b.n	8011768 <__gethex+0x126>
 8011770:	f04f 0900 	mov.w	r9, #0
 8011774:	1cb1      	adds	r1, r6, #2
 8011776:	e7ce      	b.n	8011716 <__gethex+0xd4>
 8011778:	f04f 0901 	mov.w	r9, #1
 801177c:	e7fa      	b.n	8011774 <__gethex+0x132>
 801177e:	230a      	movs	r3, #10
 8011780:	fb03 0202 	mla	r2, r3, r2, r0
 8011784:	3a10      	subs	r2, #16
 8011786:	e7cf      	b.n	8011728 <__gethex+0xe6>
 8011788:	4631      	mov	r1, r6
 801178a:	e7da      	b.n	8011742 <__gethex+0x100>
 801178c:	1bf3      	subs	r3, r6, r7
 801178e:	3b01      	subs	r3, #1
 8011790:	4629      	mov	r1, r5
 8011792:	2b07      	cmp	r3, #7
 8011794:	dc49      	bgt.n	801182a <__gethex+0x1e8>
 8011796:	9802      	ldr	r0, [sp, #8]
 8011798:	f000 fae7 	bl	8011d6a <_Balloc>
 801179c:	9b01      	ldr	r3, [sp, #4]
 801179e:	f100 0914 	add.w	r9, r0, #20
 80117a2:	f04f 0b00 	mov.w	fp, #0
 80117a6:	f1c3 0301 	rsb	r3, r3, #1
 80117aa:	4605      	mov	r5, r0
 80117ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80117b0:	46da      	mov	sl, fp
 80117b2:	9308      	str	r3, [sp, #32]
 80117b4:	42b7      	cmp	r7, r6
 80117b6:	d33b      	bcc.n	8011830 <__gethex+0x1ee>
 80117b8:	9804      	ldr	r0, [sp, #16]
 80117ba:	f840 ab04 	str.w	sl, [r0], #4
 80117be:	eba0 0009 	sub.w	r0, r0, r9
 80117c2:	1080      	asrs	r0, r0, #2
 80117c4:	6128      	str	r0, [r5, #16]
 80117c6:	0147      	lsls	r7, r0, #5
 80117c8:	4650      	mov	r0, sl
 80117ca:	f000 fb92 	bl	8011ef2 <__hi0bits>
 80117ce:	f8d8 6000 	ldr.w	r6, [r8]
 80117d2:	1a3f      	subs	r7, r7, r0
 80117d4:	42b7      	cmp	r7, r6
 80117d6:	dd64      	ble.n	80118a2 <__gethex+0x260>
 80117d8:	1bbf      	subs	r7, r7, r6
 80117da:	4639      	mov	r1, r7
 80117dc:	4628      	mov	r0, r5
 80117de:	f000 fea1 	bl	8012524 <__any_on>
 80117e2:	4682      	mov	sl, r0
 80117e4:	b178      	cbz	r0, 8011806 <__gethex+0x1c4>
 80117e6:	1e7b      	subs	r3, r7, #1
 80117e8:	1159      	asrs	r1, r3, #5
 80117ea:	f003 021f 	and.w	r2, r3, #31
 80117ee:	f04f 0a01 	mov.w	sl, #1
 80117f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80117f6:	fa0a f202 	lsl.w	r2, sl, r2
 80117fa:	420a      	tst	r2, r1
 80117fc:	d003      	beq.n	8011806 <__gethex+0x1c4>
 80117fe:	4553      	cmp	r3, sl
 8011800:	dc46      	bgt.n	8011890 <__gethex+0x24e>
 8011802:	f04f 0a02 	mov.w	sl, #2
 8011806:	4639      	mov	r1, r7
 8011808:	4628      	mov	r0, r5
 801180a:	f7ff fecb 	bl	80115a4 <rshift>
 801180e:	443c      	add	r4, r7
 8011810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011814:	42a3      	cmp	r3, r4
 8011816:	da52      	bge.n	80118be <__gethex+0x27c>
 8011818:	4629      	mov	r1, r5
 801181a:	9802      	ldr	r0, [sp, #8]
 801181c:	f000 fad9 	bl	8011dd2 <_Bfree>
 8011820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011822:	2300      	movs	r3, #0
 8011824:	6013      	str	r3, [r2, #0]
 8011826:	27a3      	movs	r7, #163	; 0xa3
 8011828:	e793      	b.n	8011752 <__gethex+0x110>
 801182a:	3101      	adds	r1, #1
 801182c:	105b      	asrs	r3, r3, #1
 801182e:	e7b0      	b.n	8011792 <__gethex+0x150>
 8011830:	1e73      	subs	r3, r6, #1
 8011832:	9305      	str	r3, [sp, #20]
 8011834:	9a07      	ldr	r2, [sp, #28]
 8011836:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801183a:	4293      	cmp	r3, r2
 801183c:	d018      	beq.n	8011870 <__gethex+0x22e>
 801183e:	f1bb 0f20 	cmp.w	fp, #32
 8011842:	d107      	bne.n	8011854 <__gethex+0x212>
 8011844:	9b04      	ldr	r3, [sp, #16]
 8011846:	f8c3 a000 	str.w	sl, [r3]
 801184a:	3304      	adds	r3, #4
 801184c:	f04f 0a00 	mov.w	sl, #0
 8011850:	9304      	str	r3, [sp, #16]
 8011852:	46d3      	mov	fp, sl
 8011854:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011858:	f7ff fede 	bl	8011618 <__hexdig_fun>
 801185c:	f000 000f 	and.w	r0, r0, #15
 8011860:	fa00 f00b 	lsl.w	r0, r0, fp
 8011864:	ea4a 0a00 	orr.w	sl, sl, r0
 8011868:	f10b 0b04 	add.w	fp, fp, #4
 801186c:	9b05      	ldr	r3, [sp, #20]
 801186e:	e00d      	b.n	801188c <__gethex+0x24a>
 8011870:	9b05      	ldr	r3, [sp, #20]
 8011872:	9a08      	ldr	r2, [sp, #32]
 8011874:	4413      	add	r3, r2
 8011876:	42bb      	cmp	r3, r7
 8011878:	d3e1      	bcc.n	801183e <__gethex+0x1fc>
 801187a:	4618      	mov	r0, r3
 801187c:	9a01      	ldr	r2, [sp, #4]
 801187e:	9903      	ldr	r1, [sp, #12]
 8011880:	9309      	str	r3, [sp, #36]	; 0x24
 8011882:	f001 fd45 	bl	8013310 <strncmp>
 8011886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011888:	2800      	cmp	r0, #0
 801188a:	d1d8      	bne.n	801183e <__gethex+0x1fc>
 801188c:	461e      	mov	r6, r3
 801188e:	e791      	b.n	80117b4 <__gethex+0x172>
 8011890:	1eb9      	subs	r1, r7, #2
 8011892:	4628      	mov	r0, r5
 8011894:	f000 fe46 	bl	8012524 <__any_on>
 8011898:	2800      	cmp	r0, #0
 801189a:	d0b2      	beq.n	8011802 <__gethex+0x1c0>
 801189c:	f04f 0a03 	mov.w	sl, #3
 80118a0:	e7b1      	b.n	8011806 <__gethex+0x1c4>
 80118a2:	da09      	bge.n	80118b8 <__gethex+0x276>
 80118a4:	1bf7      	subs	r7, r6, r7
 80118a6:	4629      	mov	r1, r5
 80118a8:	463a      	mov	r2, r7
 80118aa:	9802      	ldr	r0, [sp, #8]
 80118ac:	f000 fc5c 	bl	8012168 <__lshift>
 80118b0:	1be4      	subs	r4, r4, r7
 80118b2:	4605      	mov	r5, r0
 80118b4:	f100 0914 	add.w	r9, r0, #20
 80118b8:	f04f 0a00 	mov.w	sl, #0
 80118bc:	e7a8      	b.n	8011810 <__gethex+0x1ce>
 80118be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80118c2:	42a0      	cmp	r0, r4
 80118c4:	dd6a      	ble.n	801199c <__gethex+0x35a>
 80118c6:	1b04      	subs	r4, r0, r4
 80118c8:	42a6      	cmp	r6, r4
 80118ca:	dc2e      	bgt.n	801192a <__gethex+0x2e8>
 80118cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	d022      	beq.n	801191a <__gethex+0x2d8>
 80118d4:	2b03      	cmp	r3, #3
 80118d6:	d024      	beq.n	8011922 <__gethex+0x2e0>
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d115      	bne.n	8011908 <__gethex+0x2c6>
 80118dc:	42a6      	cmp	r6, r4
 80118de:	d113      	bne.n	8011908 <__gethex+0x2c6>
 80118e0:	2e01      	cmp	r6, #1
 80118e2:	dc0b      	bgt.n	80118fc <__gethex+0x2ba>
 80118e4:	9a06      	ldr	r2, [sp, #24]
 80118e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80118ea:	6013      	str	r3, [r2, #0]
 80118ec:	2301      	movs	r3, #1
 80118ee:	612b      	str	r3, [r5, #16]
 80118f0:	f8c9 3000 	str.w	r3, [r9]
 80118f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118f6:	2762      	movs	r7, #98	; 0x62
 80118f8:	601d      	str	r5, [r3, #0]
 80118fa:	e72a      	b.n	8011752 <__gethex+0x110>
 80118fc:	1e71      	subs	r1, r6, #1
 80118fe:	4628      	mov	r0, r5
 8011900:	f000 fe10 	bl	8012524 <__any_on>
 8011904:	2800      	cmp	r0, #0
 8011906:	d1ed      	bne.n	80118e4 <__gethex+0x2a2>
 8011908:	4629      	mov	r1, r5
 801190a:	9802      	ldr	r0, [sp, #8]
 801190c:	f000 fa61 	bl	8011dd2 <_Bfree>
 8011910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011912:	2300      	movs	r3, #0
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	2750      	movs	r7, #80	; 0x50
 8011918:	e71b      	b.n	8011752 <__gethex+0x110>
 801191a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801191c:	2b00      	cmp	r3, #0
 801191e:	d0e1      	beq.n	80118e4 <__gethex+0x2a2>
 8011920:	e7f2      	b.n	8011908 <__gethex+0x2c6>
 8011922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1dd      	bne.n	80118e4 <__gethex+0x2a2>
 8011928:	e7ee      	b.n	8011908 <__gethex+0x2c6>
 801192a:	1e67      	subs	r7, r4, #1
 801192c:	f1ba 0f00 	cmp.w	sl, #0
 8011930:	d131      	bne.n	8011996 <__gethex+0x354>
 8011932:	b127      	cbz	r7, 801193e <__gethex+0x2fc>
 8011934:	4639      	mov	r1, r7
 8011936:	4628      	mov	r0, r5
 8011938:	f000 fdf4 	bl	8012524 <__any_on>
 801193c:	4682      	mov	sl, r0
 801193e:	117a      	asrs	r2, r7, #5
 8011940:	2301      	movs	r3, #1
 8011942:	f007 071f 	and.w	r7, r7, #31
 8011946:	fa03 f707 	lsl.w	r7, r3, r7
 801194a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801194e:	4621      	mov	r1, r4
 8011950:	421f      	tst	r7, r3
 8011952:	4628      	mov	r0, r5
 8011954:	bf18      	it	ne
 8011956:	f04a 0a02 	orrne.w	sl, sl, #2
 801195a:	1b36      	subs	r6, r6, r4
 801195c:	f7ff fe22 	bl	80115a4 <rshift>
 8011960:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011964:	2702      	movs	r7, #2
 8011966:	f1ba 0f00 	cmp.w	sl, #0
 801196a:	d048      	beq.n	80119fe <__gethex+0x3bc>
 801196c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011970:	2b02      	cmp	r3, #2
 8011972:	d015      	beq.n	80119a0 <__gethex+0x35e>
 8011974:	2b03      	cmp	r3, #3
 8011976:	d017      	beq.n	80119a8 <__gethex+0x366>
 8011978:	2b01      	cmp	r3, #1
 801197a:	d109      	bne.n	8011990 <__gethex+0x34e>
 801197c:	f01a 0f02 	tst.w	sl, #2
 8011980:	d006      	beq.n	8011990 <__gethex+0x34e>
 8011982:	f8d9 3000 	ldr.w	r3, [r9]
 8011986:	ea4a 0a03 	orr.w	sl, sl, r3
 801198a:	f01a 0f01 	tst.w	sl, #1
 801198e:	d10e      	bne.n	80119ae <__gethex+0x36c>
 8011990:	f047 0710 	orr.w	r7, r7, #16
 8011994:	e033      	b.n	80119fe <__gethex+0x3bc>
 8011996:	f04f 0a01 	mov.w	sl, #1
 801199a:	e7d0      	b.n	801193e <__gethex+0x2fc>
 801199c:	2701      	movs	r7, #1
 801199e:	e7e2      	b.n	8011966 <__gethex+0x324>
 80119a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119a2:	f1c3 0301 	rsb	r3, r3, #1
 80119a6:	9315      	str	r3, [sp, #84]	; 0x54
 80119a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d0f0      	beq.n	8011990 <__gethex+0x34e>
 80119ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80119b2:	f105 0314 	add.w	r3, r5, #20
 80119b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80119ba:	eb03 010a 	add.w	r1, r3, sl
 80119be:	f04f 0c00 	mov.w	ip, #0
 80119c2:	4618      	mov	r0, r3
 80119c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80119cc:	d01c      	beq.n	8011a08 <__gethex+0x3c6>
 80119ce:	3201      	adds	r2, #1
 80119d0:	6002      	str	r2, [r0, #0]
 80119d2:	2f02      	cmp	r7, #2
 80119d4:	f105 0314 	add.w	r3, r5, #20
 80119d8:	d138      	bne.n	8011a4c <__gethex+0x40a>
 80119da:	f8d8 2000 	ldr.w	r2, [r8]
 80119de:	3a01      	subs	r2, #1
 80119e0:	42b2      	cmp	r2, r6
 80119e2:	d10a      	bne.n	80119fa <__gethex+0x3b8>
 80119e4:	1171      	asrs	r1, r6, #5
 80119e6:	2201      	movs	r2, #1
 80119e8:	f006 061f 	and.w	r6, r6, #31
 80119ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119f0:	fa02 f606 	lsl.w	r6, r2, r6
 80119f4:	421e      	tst	r6, r3
 80119f6:	bf18      	it	ne
 80119f8:	4617      	movne	r7, r2
 80119fa:	f047 0720 	orr.w	r7, r7, #32
 80119fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a00:	601d      	str	r5, [r3, #0]
 8011a02:	9b06      	ldr	r3, [sp, #24]
 8011a04:	601c      	str	r4, [r3, #0]
 8011a06:	e6a4      	b.n	8011752 <__gethex+0x110>
 8011a08:	4299      	cmp	r1, r3
 8011a0a:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a0e:	d8d8      	bhi.n	80119c2 <__gethex+0x380>
 8011a10:	68ab      	ldr	r3, [r5, #8]
 8011a12:	4599      	cmp	r9, r3
 8011a14:	db12      	blt.n	8011a3c <__gethex+0x3fa>
 8011a16:	6869      	ldr	r1, [r5, #4]
 8011a18:	9802      	ldr	r0, [sp, #8]
 8011a1a:	3101      	adds	r1, #1
 8011a1c:	f000 f9a5 	bl	8011d6a <_Balloc>
 8011a20:	692a      	ldr	r2, [r5, #16]
 8011a22:	3202      	adds	r2, #2
 8011a24:	f105 010c 	add.w	r1, r5, #12
 8011a28:	4683      	mov	fp, r0
 8011a2a:	0092      	lsls	r2, r2, #2
 8011a2c:	300c      	adds	r0, #12
 8011a2e:	f000 f991 	bl	8011d54 <memcpy>
 8011a32:	4629      	mov	r1, r5
 8011a34:	9802      	ldr	r0, [sp, #8]
 8011a36:	f000 f9cc 	bl	8011dd2 <_Bfree>
 8011a3a:	465d      	mov	r5, fp
 8011a3c:	692b      	ldr	r3, [r5, #16]
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a44:	612a      	str	r2, [r5, #16]
 8011a46:	2201      	movs	r2, #1
 8011a48:	615a      	str	r2, [r3, #20]
 8011a4a:	e7c2      	b.n	80119d2 <__gethex+0x390>
 8011a4c:	692a      	ldr	r2, [r5, #16]
 8011a4e:	454a      	cmp	r2, r9
 8011a50:	dd0b      	ble.n	8011a6a <__gethex+0x428>
 8011a52:	2101      	movs	r1, #1
 8011a54:	4628      	mov	r0, r5
 8011a56:	f7ff fda5 	bl	80115a4 <rshift>
 8011a5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a5e:	3401      	adds	r4, #1
 8011a60:	42a3      	cmp	r3, r4
 8011a62:	f6ff aed9 	blt.w	8011818 <__gethex+0x1d6>
 8011a66:	2701      	movs	r7, #1
 8011a68:	e7c7      	b.n	80119fa <__gethex+0x3b8>
 8011a6a:	f016 061f 	ands.w	r6, r6, #31
 8011a6e:	d0fa      	beq.n	8011a66 <__gethex+0x424>
 8011a70:	449a      	add	sl, r3
 8011a72:	f1c6 0620 	rsb	r6, r6, #32
 8011a76:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011a7a:	f000 fa3a 	bl	8011ef2 <__hi0bits>
 8011a7e:	42b0      	cmp	r0, r6
 8011a80:	dbe7      	blt.n	8011a52 <__gethex+0x410>
 8011a82:	e7f0      	b.n	8011a66 <__gethex+0x424>

08011a84 <L_shift>:
 8011a84:	f1c2 0208 	rsb	r2, r2, #8
 8011a88:	0092      	lsls	r2, r2, #2
 8011a8a:	b570      	push	{r4, r5, r6, lr}
 8011a8c:	f1c2 0620 	rsb	r6, r2, #32
 8011a90:	6843      	ldr	r3, [r0, #4]
 8011a92:	6804      	ldr	r4, [r0, #0]
 8011a94:	fa03 f506 	lsl.w	r5, r3, r6
 8011a98:	432c      	orrs	r4, r5
 8011a9a:	40d3      	lsrs	r3, r2
 8011a9c:	6004      	str	r4, [r0, #0]
 8011a9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011aa2:	4288      	cmp	r0, r1
 8011aa4:	d3f4      	bcc.n	8011a90 <L_shift+0xc>
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}

08011aa8 <__match>:
 8011aa8:	b530      	push	{r4, r5, lr}
 8011aaa:	6803      	ldr	r3, [r0, #0]
 8011aac:	3301      	adds	r3, #1
 8011aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ab2:	b914      	cbnz	r4, 8011aba <__match+0x12>
 8011ab4:	6003      	str	r3, [r0, #0]
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	bd30      	pop	{r4, r5, pc}
 8011aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011abe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011ac2:	2d19      	cmp	r5, #25
 8011ac4:	bf98      	it	ls
 8011ac6:	3220      	addls	r2, #32
 8011ac8:	42a2      	cmp	r2, r4
 8011aca:	d0f0      	beq.n	8011aae <__match+0x6>
 8011acc:	2000      	movs	r0, #0
 8011ace:	e7f3      	b.n	8011ab8 <__match+0x10>

08011ad0 <__hexnan>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	680b      	ldr	r3, [r1, #0]
 8011ad6:	6801      	ldr	r1, [r0, #0]
 8011ad8:	115f      	asrs	r7, r3, #5
 8011ada:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011ade:	f013 031f 	ands.w	r3, r3, #31
 8011ae2:	b087      	sub	sp, #28
 8011ae4:	bf18      	it	ne
 8011ae6:	3704      	addne	r7, #4
 8011ae8:	2500      	movs	r5, #0
 8011aea:	1f3e      	subs	r6, r7, #4
 8011aec:	4682      	mov	sl, r0
 8011aee:	4690      	mov	r8, r2
 8011af0:	9301      	str	r3, [sp, #4]
 8011af2:	f847 5c04 	str.w	r5, [r7, #-4]
 8011af6:	46b1      	mov	r9, r6
 8011af8:	4634      	mov	r4, r6
 8011afa:	9502      	str	r5, [sp, #8]
 8011afc:	46ab      	mov	fp, r5
 8011afe:	784a      	ldrb	r2, [r1, #1]
 8011b00:	1c4b      	adds	r3, r1, #1
 8011b02:	9303      	str	r3, [sp, #12]
 8011b04:	b342      	cbz	r2, 8011b58 <__hexnan+0x88>
 8011b06:	4610      	mov	r0, r2
 8011b08:	9105      	str	r1, [sp, #20]
 8011b0a:	9204      	str	r2, [sp, #16]
 8011b0c:	f7ff fd84 	bl	8011618 <__hexdig_fun>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d143      	bne.n	8011b9c <__hexnan+0xcc>
 8011b14:	9a04      	ldr	r2, [sp, #16]
 8011b16:	9905      	ldr	r1, [sp, #20]
 8011b18:	2a20      	cmp	r2, #32
 8011b1a:	d818      	bhi.n	8011b4e <__hexnan+0x7e>
 8011b1c:	9b02      	ldr	r3, [sp, #8]
 8011b1e:	459b      	cmp	fp, r3
 8011b20:	dd13      	ble.n	8011b4a <__hexnan+0x7a>
 8011b22:	454c      	cmp	r4, r9
 8011b24:	d206      	bcs.n	8011b34 <__hexnan+0x64>
 8011b26:	2d07      	cmp	r5, #7
 8011b28:	dc04      	bgt.n	8011b34 <__hexnan+0x64>
 8011b2a:	462a      	mov	r2, r5
 8011b2c:	4649      	mov	r1, r9
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f7ff ffa8 	bl	8011a84 <L_shift>
 8011b34:	4544      	cmp	r4, r8
 8011b36:	d944      	bls.n	8011bc2 <__hexnan+0xf2>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	f1a4 0904 	sub.w	r9, r4, #4
 8011b3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b42:	f8cd b008 	str.w	fp, [sp, #8]
 8011b46:	464c      	mov	r4, r9
 8011b48:	461d      	mov	r5, r3
 8011b4a:	9903      	ldr	r1, [sp, #12]
 8011b4c:	e7d7      	b.n	8011afe <__hexnan+0x2e>
 8011b4e:	2a29      	cmp	r2, #41	; 0x29
 8011b50:	d14a      	bne.n	8011be8 <__hexnan+0x118>
 8011b52:	3102      	adds	r1, #2
 8011b54:	f8ca 1000 	str.w	r1, [sl]
 8011b58:	f1bb 0f00 	cmp.w	fp, #0
 8011b5c:	d044      	beq.n	8011be8 <__hexnan+0x118>
 8011b5e:	454c      	cmp	r4, r9
 8011b60:	d206      	bcs.n	8011b70 <__hexnan+0xa0>
 8011b62:	2d07      	cmp	r5, #7
 8011b64:	dc04      	bgt.n	8011b70 <__hexnan+0xa0>
 8011b66:	462a      	mov	r2, r5
 8011b68:	4649      	mov	r1, r9
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f7ff ff8a 	bl	8011a84 <L_shift>
 8011b70:	4544      	cmp	r4, r8
 8011b72:	d928      	bls.n	8011bc6 <__hexnan+0xf6>
 8011b74:	4643      	mov	r3, r8
 8011b76:	f854 2b04 	ldr.w	r2, [r4], #4
 8011b7a:	f843 2b04 	str.w	r2, [r3], #4
 8011b7e:	42a6      	cmp	r6, r4
 8011b80:	d2f9      	bcs.n	8011b76 <__hexnan+0xa6>
 8011b82:	2200      	movs	r2, #0
 8011b84:	f843 2b04 	str.w	r2, [r3], #4
 8011b88:	429e      	cmp	r6, r3
 8011b8a:	d2fb      	bcs.n	8011b84 <__hexnan+0xb4>
 8011b8c:	6833      	ldr	r3, [r6, #0]
 8011b8e:	b91b      	cbnz	r3, 8011b98 <__hexnan+0xc8>
 8011b90:	4546      	cmp	r6, r8
 8011b92:	d127      	bne.n	8011be4 <__hexnan+0x114>
 8011b94:	2301      	movs	r3, #1
 8011b96:	6033      	str	r3, [r6, #0]
 8011b98:	2005      	movs	r0, #5
 8011b9a:	e026      	b.n	8011bea <__hexnan+0x11a>
 8011b9c:	3501      	adds	r5, #1
 8011b9e:	2d08      	cmp	r5, #8
 8011ba0:	f10b 0b01 	add.w	fp, fp, #1
 8011ba4:	dd06      	ble.n	8011bb4 <__hexnan+0xe4>
 8011ba6:	4544      	cmp	r4, r8
 8011ba8:	d9cf      	bls.n	8011b4a <__hexnan+0x7a>
 8011baa:	2300      	movs	r3, #0
 8011bac:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bb0:	2501      	movs	r5, #1
 8011bb2:	3c04      	subs	r4, #4
 8011bb4:	6822      	ldr	r2, [r4, #0]
 8011bb6:	f000 000f 	and.w	r0, r0, #15
 8011bba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011bbe:	6020      	str	r0, [r4, #0]
 8011bc0:	e7c3      	b.n	8011b4a <__hexnan+0x7a>
 8011bc2:	2508      	movs	r5, #8
 8011bc4:	e7c1      	b.n	8011b4a <__hexnan+0x7a>
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0df      	beq.n	8011b8c <__hexnan+0xbc>
 8011bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd0:	f1c3 0320 	rsb	r3, r3, #32
 8011bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8011bd8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011bdc:	401a      	ands	r2, r3
 8011bde:	f847 2c04 	str.w	r2, [r7, #-4]
 8011be2:	e7d3      	b.n	8011b8c <__hexnan+0xbc>
 8011be4:	3e04      	subs	r6, #4
 8011be6:	e7d1      	b.n	8011b8c <__hexnan+0xbc>
 8011be8:	2004      	movs	r0, #4
 8011bea:	b007      	add	sp, #28
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bf0 <__locale_ctype_ptr_l>:
 8011bf0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011bf4:	4770      	bx	lr
	...

08011bf8 <__locale_ctype_ptr>:
 8011bf8:	4b04      	ldr	r3, [pc, #16]	; (8011c0c <__locale_ctype_ptr+0x14>)
 8011bfa:	4a05      	ldr	r2, [pc, #20]	; (8011c10 <__locale_ctype_ptr+0x18>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	bf08      	it	eq
 8011c04:	4613      	moveq	r3, r2
 8011c06:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8011c0a:	4770      	bx	lr
 8011c0c:	2000000c 	.word	0x2000000c
 8011c10:	20000070 	.word	0x20000070

08011c14 <__localeconv_l>:
 8011c14:	30f0      	adds	r0, #240	; 0xf0
 8011c16:	4770      	bx	lr

08011c18 <_localeconv_r>:
 8011c18:	4b04      	ldr	r3, [pc, #16]	; (8011c2c <_localeconv_r+0x14>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6a18      	ldr	r0, [r3, #32]
 8011c1e:	4b04      	ldr	r3, [pc, #16]	; (8011c30 <_localeconv_r+0x18>)
 8011c20:	2800      	cmp	r0, #0
 8011c22:	bf08      	it	eq
 8011c24:	4618      	moveq	r0, r3
 8011c26:	30f0      	adds	r0, #240	; 0xf0
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	2000000c 	.word	0x2000000c
 8011c30:	20000070 	.word	0x20000070

08011c34 <_lseek_r>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4c07      	ldr	r4, [pc, #28]	; (8011c54 <_lseek_r+0x20>)
 8011c38:	4605      	mov	r5, r0
 8011c3a:	4608      	mov	r0, r1
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	6022      	str	r2, [r4, #0]
 8011c42:	461a      	mov	r2, r3
 8011c44:	f7f2 f96a 	bl	8003f1c <_lseek>
 8011c48:	1c43      	adds	r3, r0, #1
 8011c4a:	d102      	bne.n	8011c52 <_lseek_r+0x1e>
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	b103      	cbz	r3, 8011c52 <_lseek_r+0x1e>
 8011c50:	602b      	str	r3, [r5, #0]
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	20005084 	.word	0x20005084

08011c58 <__swhatbuf_r>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	460e      	mov	r6, r1
 8011c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c60:	2900      	cmp	r1, #0
 8011c62:	b096      	sub	sp, #88	; 0x58
 8011c64:	4614      	mov	r4, r2
 8011c66:	461d      	mov	r5, r3
 8011c68:	da07      	bge.n	8011c7a <__swhatbuf_r+0x22>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	89b3      	ldrh	r3, [r6, #12]
 8011c70:	061a      	lsls	r2, r3, #24
 8011c72:	d410      	bmi.n	8011c96 <__swhatbuf_r+0x3e>
 8011c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c78:	e00e      	b.n	8011c98 <__swhatbuf_r+0x40>
 8011c7a:	466a      	mov	r2, sp
 8011c7c:	f001 fc2e 	bl	80134dc <_fstat_r>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	dbf2      	blt.n	8011c6a <__swhatbuf_r+0x12>
 8011c84:	9a01      	ldr	r2, [sp, #4]
 8011c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c8e:	425a      	negs	r2, r3
 8011c90:	415a      	adcs	r2, r3
 8011c92:	602a      	str	r2, [r5, #0]
 8011c94:	e7ee      	b.n	8011c74 <__swhatbuf_r+0x1c>
 8011c96:	2340      	movs	r3, #64	; 0x40
 8011c98:	2000      	movs	r0, #0
 8011c9a:	6023      	str	r3, [r4, #0]
 8011c9c:	b016      	add	sp, #88	; 0x58
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}

08011ca0 <__smakebuf_r>:
 8011ca0:	898b      	ldrh	r3, [r1, #12]
 8011ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ca4:	079d      	lsls	r5, r3, #30
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460c      	mov	r4, r1
 8011caa:	d507      	bpl.n	8011cbc <__smakebuf_r+0x1c>
 8011cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	6123      	str	r3, [r4, #16]
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	6163      	str	r3, [r4, #20]
 8011cb8:	b002      	add	sp, #8
 8011cba:	bd70      	pop	{r4, r5, r6, pc}
 8011cbc:	ab01      	add	r3, sp, #4
 8011cbe:	466a      	mov	r2, sp
 8011cc0:	f7ff ffca 	bl	8011c58 <__swhatbuf_r>
 8011cc4:	9900      	ldr	r1, [sp, #0]
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f000 fca9 	bl	8012620 <_malloc_r>
 8011cce:	b948      	cbnz	r0, 8011ce4 <__smakebuf_r+0x44>
 8011cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cd4:	059a      	lsls	r2, r3, #22
 8011cd6:	d4ef      	bmi.n	8011cb8 <__smakebuf_r+0x18>
 8011cd8:	f023 0303 	bic.w	r3, r3, #3
 8011cdc:	f043 0302 	orr.w	r3, r3, #2
 8011ce0:	81a3      	strh	r3, [r4, #12]
 8011ce2:	e7e3      	b.n	8011cac <__smakebuf_r+0xc>
 8011ce4:	4b0d      	ldr	r3, [pc, #52]	; (8011d1c <__smakebuf_r+0x7c>)
 8011ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ce8:	89a3      	ldrh	r3, [r4, #12]
 8011cea:	6020      	str	r0, [r4, #0]
 8011cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf0:	81a3      	strh	r3, [r4, #12]
 8011cf2:	9b00      	ldr	r3, [sp, #0]
 8011cf4:	6163      	str	r3, [r4, #20]
 8011cf6:	9b01      	ldr	r3, [sp, #4]
 8011cf8:	6120      	str	r0, [r4, #16]
 8011cfa:	b15b      	cbz	r3, 8011d14 <__smakebuf_r+0x74>
 8011cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d00:	4630      	mov	r0, r6
 8011d02:	f001 fbfd 	bl	8013500 <_isatty_r>
 8011d06:	b128      	cbz	r0, 8011d14 <__smakebuf_r+0x74>
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	f023 0303 	bic.w	r3, r3, #3
 8011d0e:	f043 0301 	orr.w	r3, r3, #1
 8011d12:	81a3      	strh	r3, [r4, #12]
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	431d      	orrs	r5, r3
 8011d18:	81a5      	strh	r5, [r4, #12]
 8011d1a:	e7cd      	b.n	8011cb8 <__smakebuf_r+0x18>
 8011d1c:	08011459 	.word	0x08011459

08011d20 <malloc>:
 8011d20:	4b02      	ldr	r3, [pc, #8]	; (8011d2c <malloc+0xc>)
 8011d22:	4601      	mov	r1, r0
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	f000 bc7b 	b.w	8012620 <_malloc_r>
 8011d2a:	bf00      	nop
 8011d2c:	2000000c 	.word	0x2000000c

08011d30 <__ascii_mbtowc>:
 8011d30:	b082      	sub	sp, #8
 8011d32:	b901      	cbnz	r1, 8011d36 <__ascii_mbtowc+0x6>
 8011d34:	a901      	add	r1, sp, #4
 8011d36:	b142      	cbz	r2, 8011d4a <__ascii_mbtowc+0x1a>
 8011d38:	b14b      	cbz	r3, 8011d4e <__ascii_mbtowc+0x1e>
 8011d3a:	7813      	ldrb	r3, [r2, #0]
 8011d3c:	600b      	str	r3, [r1, #0]
 8011d3e:	7812      	ldrb	r2, [r2, #0]
 8011d40:	1c10      	adds	r0, r2, #0
 8011d42:	bf18      	it	ne
 8011d44:	2001      	movne	r0, #1
 8011d46:	b002      	add	sp, #8
 8011d48:	4770      	bx	lr
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	e7fb      	b.n	8011d46 <__ascii_mbtowc+0x16>
 8011d4e:	f06f 0001 	mvn.w	r0, #1
 8011d52:	e7f8      	b.n	8011d46 <__ascii_mbtowc+0x16>

08011d54 <memcpy>:
 8011d54:	b510      	push	{r4, lr}
 8011d56:	1e43      	subs	r3, r0, #1
 8011d58:	440a      	add	r2, r1
 8011d5a:	4291      	cmp	r1, r2
 8011d5c:	d100      	bne.n	8011d60 <memcpy+0xc>
 8011d5e:	bd10      	pop	{r4, pc}
 8011d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d68:	e7f7      	b.n	8011d5a <memcpy+0x6>

08011d6a <_Balloc>:
 8011d6a:	b570      	push	{r4, r5, r6, lr}
 8011d6c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011d6e:	4604      	mov	r4, r0
 8011d70:	460e      	mov	r6, r1
 8011d72:	b93d      	cbnz	r5, 8011d84 <_Balloc+0x1a>
 8011d74:	2010      	movs	r0, #16
 8011d76:	f7ff ffd3 	bl	8011d20 <malloc>
 8011d7a:	6260      	str	r0, [r4, #36]	; 0x24
 8011d7c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011d80:	6005      	str	r5, [r0, #0]
 8011d82:	60c5      	str	r5, [r0, #12]
 8011d84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011d86:	68eb      	ldr	r3, [r5, #12]
 8011d88:	b183      	cbz	r3, 8011dac <_Balloc+0x42>
 8011d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d92:	b9b8      	cbnz	r0, 8011dc4 <_Balloc+0x5a>
 8011d94:	2101      	movs	r1, #1
 8011d96:	fa01 f506 	lsl.w	r5, r1, r6
 8011d9a:	1d6a      	adds	r2, r5, #5
 8011d9c:	0092      	lsls	r2, r2, #2
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fbe1 	bl	8012566 <_calloc_r>
 8011da4:	b160      	cbz	r0, 8011dc0 <_Balloc+0x56>
 8011da6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011daa:	e00e      	b.n	8011dca <_Balloc+0x60>
 8011dac:	2221      	movs	r2, #33	; 0x21
 8011dae:	2104      	movs	r1, #4
 8011db0:	4620      	mov	r0, r4
 8011db2:	f000 fbd8 	bl	8012566 <_calloc_r>
 8011db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011db8:	60e8      	str	r0, [r5, #12]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d1e4      	bne.n	8011d8a <_Balloc+0x20>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	6802      	ldr	r2, [r0, #0]
 8011dc6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011dd0:	e7f7      	b.n	8011dc2 <_Balloc+0x58>

08011dd2 <_Bfree>:
 8011dd2:	b570      	push	{r4, r5, r6, lr}
 8011dd4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	460d      	mov	r5, r1
 8011dda:	b93c      	cbnz	r4, 8011dec <_Bfree+0x1a>
 8011ddc:	2010      	movs	r0, #16
 8011dde:	f7ff ff9f 	bl	8011d20 <malloc>
 8011de2:	6270      	str	r0, [r6, #36]	; 0x24
 8011de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011de8:	6004      	str	r4, [r0, #0]
 8011dea:	60c4      	str	r4, [r0, #12]
 8011dec:	b13d      	cbz	r5, 8011dfe <_Bfree+0x2c>
 8011dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011df0:	686a      	ldr	r2, [r5, #4]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011df8:	6029      	str	r1, [r5, #0]
 8011dfa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011dfe:	bd70      	pop	{r4, r5, r6, pc}

08011e00 <__multadd>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	690d      	ldr	r5, [r1, #16]
 8011e06:	461f      	mov	r7, r3
 8011e08:	4606      	mov	r6, r0
 8011e0a:	460c      	mov	r4, r1
 8011e0c:	f101 0c14 	add.w	ip, r1, #20
 8011e10:	2300      	movs	r3, #0
 8011e12:	f8dc 0000 	ldr.w	r0, [ip]
 8011e16:	b281      	uxth	r1, r0
 8011e18:	fb02 7101 	mla	r1, r2, r1, r7
 8011e1c:	0c0f      	lsrs	r7, r1, #16
 8011e1e:	0c00      	lsrs	r0, r0, #16
 8011e20:	fb02 7000 	mla	r0, r2, r0, r7
 8011e24:	b289      	uxth	r1, r1
 8011e26:	3301      	adds	r3, #1
 8011e28:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011e2c:	429d      	cmp	r5, r3
 8011e2e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011e32:	f84c 1b04 	str.w	r1, [ip], #4
 8011e36:	dcec      	bgt.n	8011e12 <__multadd+0x12>
 8011e38:	b1d7      	cbz	r7, 8011e70 <__multadd+0x70>
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	42ab      	cmp	r3, r5
 8011e3e:	dc12      	bgt.n	8011e66 <__multadd+0x66>
 8011e40:	6861      	ldr	r1, [r4, #4]
 8011e42:	4630      	mov	r0, r6
 8011e44:	3101      	adds	r1, #1
 8011e46:	f7ff ff90 	bl	8011d6a <_Balloc>
 8011e4a:	6922      	ldr	r2, [r4, #16]
 8011e4c:	3202      	adds	r2, #2
 8011e4e:	f104 010c 	add.w	r1, r4, #12
 8011e52:	4680      	mov	r8, r0
 8011e54:	0092      	lsls	r2, r2, #2
 8011e56:	300c      	adds	r0, #12
 8011e58:	f7ff ff7c 	bl	8011d54 <memcpy>
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	4630      	mov	r0, r6
 8011e60:	f7ff ffb7 	bl	8011dd2 <_Bfree>
 8011e64:	4644      	mov	r4, r8
 8011e66:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e6a:	3501      	adds	r5, #1
 8011e6c:	615f      	str	r7, [r3, #20]
 8011e6e:	6125      	str	r5, [r4, #16]
 8011e70:	4620      	mov	r0, r4
 8011e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e76 <__s2b>:
 8011e76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	4615      	mov	r5, r2
 8011e7e:	461f      	mov	r7, r3
 8011e80:	2209      	movs	r2, #9
 8011e82:	3308      	adds	r3, #8
 8011e84:	4606      	mov	r6, r0
 8011e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	db20      	blt.n	8011ed4 <__s2b+0x5e>
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7ff ff69 	bl	8011d6a <_Balloc>
 8011e98:	9b08      	ldr	r3, [sp, #32]
 8011e9a:	6143      	str	r3, [r0, #20]
 8011e9c:	2d09      	cmp	r5, #9
 8011e9e:	f04f 0301 	mov.w	r3, #1
 8011ea2:	6103      	str	r3, [r0, #16]
 8011ea4:	dd19      	ble.n	8011eda <__s2b+0x64>
 8011ea6:	f104 0809 	add.w	r8, r4, #9
 8011eaa:	46c1      	mov	r9, r8
 8011eac:	442c      	add	r4, r5
 8011eae:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011eb2:	4601      	mov	r1, r0
 8011eb4:	3b30      	subs	r3, #48	; 0x30
 8011eb6:	220a      	movs	r2, #10
 8011eb8:	4630      	mov	r0, r6
 8011eba:	f7ff ffa1 	bl	8011e00 <__multadd>
 8011ebe:	45a1      	cmp	r9, r4
 8011ec0:	d1f5      	bne.n	8011eae <__s2b+0x38>
 8011ec2:	eb08 0405 	add.w	r4, r8, r5
 8011ec6:	3c08      	subs	r4, #8
 8011ec8:	1b2d      	subs	r5, r5, r4
 8011eca:	1963      	adds	r3, r4, r5
 8011ecc:	42bb      	cmp	r3, r7
 8011ece:	db07      	blt.n	8011ee0 <__s2b+0x6a>
 8011ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed4:	0052      	lsls	r2, r2, #1
 8011ed6:	3101      	adds	r1, #1
 8011ed8:	e7d9      	b.n	8011e8e <__s2b+0x18>
 8011eda:	340a      	adds	r4, #10
 8011edc:	2509      	movs	r5, #9
 8011ede:	e7f3      	b.n	8011ec8 <__s2b+0x52>
 8011ee0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ee4:	4601      	mov	r1, r0
 8011ee6:	3b30      	subs	r3, #48	; 0x30
 8011ee8:	220a      	movs	r2, #10
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ff ff88 	bl	8011e00 <__multadd>
 8011ef0:	e7eb      	b.n	8011eca <__s2b+0x54>

08011ef2 <__hi0bits>:
 8011ef2:	0c02      	lsrs	r2, r0, #16
 8011ef4:	0412      	lsls	r2, r2, #16
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	b9b2      	cbnz	r2, 8011f28 <__hi0bits+0x36>
 8011efa:	0403      	lsls	r3, r0, #16
 8011efc:	2010      	movs	r0, #16
 8011efe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011f02:	bf04      	itt	eq
 8011f04:	021b      	lsleq	r3, r3, #8
 8011f06:	3008      	addeq	r0, #8
 8011f08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011f0c:	bf04      	itt	eq
 8011f0e:	011b      	lsleq	r3, r3, #4
 8011f10:	3004      	addeq	r0, #4
 8011f12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011f16:	bf04      	itt	eq
 8011f18:	009b      	lsleq	r3, r3, #2
 8011f1a:	3002      	addeq	r0, #2
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	db06      	blt.n	8011f2e <__hi0bits+0x3c>
 8011f20:	005b      	lsls	r3, r3, #1
 8011f22:	d503      	bpl.n	8011f2c <__hi0bits+0x3a>
 8011f24:	3001      	adds	r0, #1
 8011f26:	4770      	bx	lr
 8011f28:	2000      	movs	r0, #0
 8011f2a:	e7e8      	b.n	8011efe <__hi0bits+0xc>
 8011f2c:	2020      	movs	r0, #32
 8011f2e:	4770      	bx	lr

08011f30 <__lo0bits>:
 8011f30:	6803      	ldr	r3, [r0, #0]
 8011f32:	f013 0207 	ands.w	r2, r3, #7
 8011f36:	4601      	mov	r1, r0
 8011f38:	d00b      	beq.n	8011f52 <__lo0bits+0x22>
 8011f3a:	07da      	lsls	r2, r3, #31
 8011f3c:	d423      	bmi.n	8011f86 <__lo0bits+0x56>
 8011f3e:	0798      	lsls	r0, r3, #30
 8011f40:	bf49      	itett	mi
 8011f42:	085b      	lsrmi	r3, r3, #1
 8011f44:	089b      	lsrpl	r3, r3, #2
 8011f46:	2001      	movmi	r0, #1
 8011f48:	600b      	strmi	r3, [r1, #0]
 8011f4a:	bf5c      	itt	pl
 8011f4c:	600b      	strpl	r3, [r1, #0]
 8011f4e:	2002      	movpl	r0, #2
 8011f50:	4770      	bx	lr
 8011f52:	b298      	uxth	r0, r3
 8011f54:	b9a8      	cbnz	r0, 8011f82 <__lo0bits+0x52>
 8011f56:	0c1b      	lsrs	r3, r3, #16
 8011f58:	2010      	movs	r0, #16
 8011f5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f5e:	bf04      	itt	eq
 8011f60:	0a1b      	lsreq	r3, r3, #8
 8011f62:	3008      	addeq	r0, #8
 8011f64:	071a      	lsls	r2, r3, #28
 8011f66:	bf04      	itt	eq
 8011f68:	091b      	lsreq	r3, r3, #4
 8011f6a:	3004      	addeq	r0, #4
 8011f6c:	079a      	lsls	r2, r3, #30
 8011f6e:	bf04      	itt	eq
 8011f70:	089b      	lsreq	r3, r3, #2
 8011f72:	3002      	addeq	r0, #2
 8011f74:	07da      	lsls	r2, r3, #31
 8011f76:	d402      	bmi.n	8011f7e <__lo0bits+0x4e>
 8011f78:	085b      	lsrs	r3, r3, #1
 8011f7a:	d006      	beq.n	8011f8a <__lo0bits+0x5a>
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	600b      	str	r3, [r1, #0]
 8011f80:	4770      	bx	lr
 8011f82:	4610      	mov	r0, r2
 8011f84:	e7e9      	b.n	8011f5a <__lo0bits+0x2a>
 8011f86:	2000      	movs	r0, #0
 8011f88:	4770      	bx	lr
 8011f8a:	2020      	movs	r0, #32
 8011f8c:	4770      	bx	lr

08011f8e <__i2b>:
 8011f8e:	b510      	push	{r4, lr}
 8011f90:	460c      	mov	r4, r1
 8011f92:	2101      	movs	r1, #1
 8011f94:	f7ff fee9 	bl	8011d6a <_Balloc>
 8011f98:	2201      	movs	r2, #1
 8011f9a:	6144      	str	r4, [r0, #20]
 8011f9c:	6102      	str	r2, [r0, #16]
 8011f9e:	bd10      	pop	{r4, pc}

08011fa0 <__multiply>:
 8011fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	690a      	ldr	r2, [r1, #16]
 8011fa8:	6923      	ldr	r3, [r4, #16]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	bfb8      	it	lt
 8011fae:	460b      	movlt	r3, r1
 8011fb0:	4688      	mov	r8, r1
 8011fb2:	bfbc      	itt	lt
 8011fb4:	46a0      	movlt	r8, r4
 8011fb6:	461c      	movlt	r4, r3
 8011fb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011fbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011fc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011fc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011fc8:	eb07 0609 	add.w	r6, r7, r9
 8011fcc:	42b3      	cmp	r3, r6
 8011fce:	bfb8      	it	lt
 8011fd0:	3101      	addlt	r1, #1
 8011fd2:	f7ff feca 	bl	8011d6a <_Balloc>
 8011fd6:	f100 0514 	add.w	r5, r0, #20
 8011fda:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011fde:	462b      	mov	r3, r5
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	4573      	cmp	r3, lr
 8011fe4:	d316      	bcc.n	8012014 <__multiply+0x74>
 8011fe6:	f104 0214 	add.w	r2, r4, #20
 8011fea:	f108 0114 	add.w	r1, r8, #20
 8011fee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011ff2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	9b00      	ldr	r3, [sp, #0]
 8011ffa:	9201      	str	r2, [sp, #4]
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d80c      	bhi.n	801201a <__multiply+0x7a>
 8012000:	2e00      	cmp	r6, #0
 8012002:	dd03      	ble.n	801200c <__multiply+0x6c>
 8012004:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012008:	2b00      	cmp	r3, #0
 801200a:	d05d      	beq.n	80120c8 <__multiply+0x128>
 801200c:	6106      	str	r6, [r0, #16]
 801200e:	b003      	add	sp, #12
 8012010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012014:	f843 2b04 	str.w	r2, [r3], #4
 8012018:	e7e3      	b.n	8011fe2 <__multiply+0x42>
 801201a:	f8b2 b000 	ldrh.w	fp, [r2]
 801201e:	f1bb 0f00 	cmp.w	fp, #0
 8012022:	d023      	beq.n	801206c <__multiply+0xcc>
 8012024:	4689      	mov	r9, r1
 8012026:	46ac      	mov	ip, r5
 8012028:	f04f 0800 	mov.w	r8, #0
 801202c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012030:	f8dc a000 	ldr.w	sl, [ip]
 8012034:	b2a3      	uxth	r3, r4
 8012036:	fa1f fa8a 	uxth.w	sl, sl
 801203a:	fb0b a303 	mla	r3, fp, r3, sl
 801203e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012042:	f8dc 4000 	ldr.w	r4, [ip]
 8012046:	4443      	add	r3, r8
 8012048:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801204c:	fb0b 840a 	mla	r4, fp, sl, r8
 8012050:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012054:	46e2      	mov	sl, ip
 8012056:	b29b      	uxth	r3, r3
 8012058:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801205c:	454f      	cmp	r7, r9
 801205e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012062:	f84a 3b04 	str.w	r3, [sl], #4
 8012066:	d82b      	bhi.n	80120c0 <__multiply+0x120>
 8012068:	f8cc 8004 	str.w	r8, [ip, #4]
 801206c:	9b01      	ldr	r3, [sp, #4]
 801206e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012072:	3204      	adds	r2, #4
 8012074:	f1ba 0f00 	cmp.w	sl, #0
 8012078:	d020      	beq.n	80120bc <__multiply+0x11c>
 801207a:	682b      	ldr	r3, [r5, #0]
 801207c:	4689      	mov	r9, r1
 801207e:	46a8      	mov	r8, r5
 8012080:	f04f 0b00 	mov.w	fp, #0
 8012084:	f8b9 c000 	ldrh.w	ip, [r9]
 8012088:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801208c:	fb0a 440c 	mla	r4, sl, ip, r4
 8012090:	445c      	add	r4, fp
 8012092:	46c4      	mov	ip, r8
 8012094:	b29b      	uxth	r3, r3
 8012096:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801209a:	f84c 3b04 	str.w	r3, [ip], #4
 801209e:	f859 3b04 	ldr.w	r3, [r9], #4
 80120a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80120a6:	0c1b      	lsrs	r3, r3, #16
 80120a8:	fb0a b303 	mla	r3, sl, r3, fp
 80120ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80120b0:	454f      	cmp	r7, r9
 80120b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80120b6:	d805      	bhi.n	80120c4 <__multiply+0x124>
 80120b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80120bc:	3504      	adds	r5, #4
 80120be:	e79b      	b.n	8011ff8 <__multiply+0x58>
 80120c0:	46d4      	mov	ip, sl
 80120c2:	e7b3      	b.n	801202c <__multiply+0x8c>
 80120c4:	46e0      	mov	r8, ip
 80120c6:	e7dd      	b.n	8012084 <__multiply+0xe4>
 80120c8:	3e01      	subs	r6, #1
 80120ca:	e799      	b.n	8012000 <__multiply+0x60>

080120cc <__pow5mult>:
 80120cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120d0:	4615      	mov	r5, r2
 80120d2:	f012 0203 	ands.w	r2, r2, #3
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	d007      	beq.n	80120ec <__pow5mult+0x20>
 80120dc:	3a01      	subs	r2, #1
 80120de:	4c21      	ldr	r4, [pc, #132]	; (8012164 <__pow5mult+0x98>)
 80120e0:	2300      	movs	r3, #0
 80120e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120e6:	f7ff fe8b 	bl	8011e00 <__multadd>
 80120ea:	4607      	mov	r7, r0
 80120ec:	10ad      	asrs	r5, r5, #2
 80120ee:	d035      	beq.n	801215c <__pow5mult+0x90>
 80120f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120f2:	b93c      	cbnz	r4, 8012104 <__pow5mult+0x38>
 80120f4:	2010      	movs	r0, #16
 80120f6:	f7ff fe13 	bl	8011d20 <malloc>
 80120fa:	6270      	str	r0, [r6, #36]	; 0x24
 80120fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012100:	6004      	str	r4, [r0, #0]
 8012102:	60c4      	str	r4, [r0, #12]
 8012104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801210c:	b94c      	cbnz	r4, 8012122 <__pow5mult+0x56>
 801210e:	f240 2171 	movw	r1, #625	; 0x271
 8012112:	4630      	mov	r0, r6
 8012114:	f7ff ff3b 	bl	8011f8e <__i2b>
 8012118:	2300      	movs	r3, #0
 801211a:	f8c8 0008 	str.w	r0, [r8, #8]
 801211e:	4604      	mov	r4, r0
 8012120:	6003      	str	r3, [r0, #0]
 8012122:	f04f 0800 	mov.w	r8, #0
 8012126:	07eb      	lsls	r3, r5, #31
 8012128:	d50a      	bpl.n	8012140 <__pow5mult+0x74>
 801212a:	4639      	mov	r1, r7
 801212c:	4622      	mov	r2, r4
 801212e:	4630      	mov	r0, r6
 8012130:	f7ff ff36 	bl	8011fa0 <__multiply>
 8012134:	4639      	mov	r1, r7
 8012136:	4681      	mov	r9, r0
 8012138:	4630      	mov	r0, r6
 801213a:	f7ff fe4a 	bl	8011dd2 <_Bfree>
 801213e:	464f      	mov	r7, r9
 8012140:	106d      	asrs	r5, r5, #1
 8012142:	d00b      	beq.n	801215c <__pow5mult+0x90>
 8012144:	6820      	ldr	r0, [r4, #0]
 8012146:	b938      	cbnz	r0, 8012158 <__pow5mult+0x8c>
 8012148:	4622      	mov	r2, r4
 801214a:	4621      	mov	r1, r4
 801214c:	4630      	mov	r0, r6
 801214e:	f7ff ff27 	bl	8011fa0 <__multiply>
 8012152:	6020      	str	r0, [r4, #0]
 8012154:	f8c0 8000 	str.w	r8, [r0]
 8012158:	4604      	mov	r4, r0
 801215a:	e7e4      	b.n	8012126 <__pow5mult+0x5a>
 801215c:	4638      	mov	r0, r7
 801215e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012162:	bf00      	nop
 8012164:	08013d48 	.word	0x08013d48

08012168 <__lshift>:
 8012168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801216c:	460c      	mov	r4, r1
 801216e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012172:	6923      	ldr	r3, [r4, #16]
 8012174:	6849      	ldr	r1, [r1, #4]
 8012176:	eb0a 0903 	add.w	r9, sl, r3
 801217a:	68a3      	ldr	r3, [r4, #8]
 801217c:	4607      	mov	r7, r0
 801217e:	4616      	mov	r6, r2
 8012180:	f109 0501 	add.w	r5, r9, #1
 8012184:	42ab      	cmp	r3, r5
 8012186:	db32      	blt.n	80121ee <__lshift+0x86>
 8012188:	4638      	mov	r0, r7
 801218a:	f7ff fdee 	bl	8011d6a <_Balloc>
 801218e:	2300      	movs	r3, #0
 8012190:	4680      	mov	r8, r0
 8012192:	f100 0114 	add.w	r1, r0, #20
 8012196:	461a      	mov	r2, r3
 8012198:	4553      	cmp	r3, sl
 801219a:	db2b      	blt.n	80121f4 <__lshift+0x8c>
 801219c:	6920      	ldr	r0, [r4, #16]
 801219e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121a2:	f104 0314 	add.w	r3, r4, #20
 80121a6:	f016 021f 	ands.w	r2, r6, #31
 80121aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121b2:	d025      	beq.n	8012200 <__lshift+0x98>
 80121b4:	f1c2 0e20 	rsb	lr, r2, #32
 80121b8:	2000      	movs	r0, #0
 80121ba:	681e      	ldr	r6, [r3, #0]
 80121bc:	468a      	mov	sl, r1
 80121be:	4096      	lsls	r6, r2
 80121c0:	4330      	orrs	r0, r6
 80121c2:	f84a 0b04 	str.w	r0, [sl], #4
 80121c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80121ca:	459c      	cmp	ip, r3
 80121cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80121d0:	d814      	bhi.n	80121fc <__lshift+0x94>
 80121d2:	6048      	str	r0, [r1, #4]
 80121d4:	b108      	cbz	r0, 80121da <__lshift+0x72>
 80121d6:	f109 0502 	add.w	r5, r9, #2
 80121da:	3d01      	subs	r5, #1
 80121dc:	4638      	mov	r0, r7
 80121de:	f8c8 5010 	str.w	r5, [r8, #16]
 80121e2:	4621      	mov	r1, r4
 80121e4:	f7ff fdf5 	bl	8011dd2 <_Bfree>
 80121e8:	4640      	mov	r0, r8
 80121ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121ee:	3101      	adds	r1, #1
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	e7c7      	b.n	8012184 <__lshift+0x1c>
 80121f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80121f8:	3301      	adds	r3, #1
 80121fa:	e7cd      	b.n	8012198 <__lshift+0x30>
 80121fc:	4651      	mov	r1, sl
 80121fe:	e7dc      	b.n	80121ba <__lshift+0x52>
 8012200:	3904      	subs	r1, #4
 8012202:	f853 2b04 	ldr.w	r2, [r3], #4
 8012206:	f841 2f04 	str.w	r2, [r1, #4]!
 801220a:	459c      	cmp	ip, r3
 801220c:	d8f9      	bhi.n	8012202 <__lshift+0x9a>
 801220e:	e7e4      	b.n	80121da <__lshift+0x72>

08012210 <__mcmp>:
 8012210:	6903      	ldr	r3, [r0, #16]
 8012212:	690a      	ldr	r2, [r1, #16]
 8012214:	1a9b      	subs	r3, r3, r2
 8012216:	b530      	push	{r4, r5, lr}
 8012218:	d10c      	bne.n	8012234 <__mcmp+0x24>
 801221a:	0092      	lsls	r2, r2, #2
 801221c:	3014      	adds	r0, #20
 801221e:	3114      	adds	r1, #20
 8012220:	1884      	adds	r4, r0, r2
 8012222:	4411      	add	r1, r2
 8012224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801222c:	4295      	cmp	r5, r2
 801222e:	d003      	beq.n	8012238 <__mcmp+0x28>
 8012230:	d305      	bcc.n	801223e <__mcmp+0x2e>
 8012232:	2301      	movs	r3, #1
 8012234:	4618      	mov	r0, r3
 8012236:	bd30      	pop	{r4, r5, pc}
 8012238:	42a0      	cmp	r0, r4
 801223a:	d3f3      	bcc.n	8012224 <__mcmp+0x14>
 801223c:	e7fa      	b.n	8012234 <__mcmp+0x24>
 801223e:	f04f 33ff 	mov.w	r3, #4294967295
 8012242:	e7f7      	b.n	8012234 <__mcmp+0x24>

08012244 <__mdiff>:
 8012244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012248:	460d      	mov	r5, r1
 801224a:	4607      	mov	r7, r0
 801224c:	4611      	mov	r1, r2
 801224e:	4628      	mov	r0, r5
 8012250:	4614      	mov	r4, r2
 8012252:	f7ff ffdd 	bl	8012210 <__mcmp>
 8012256:	1e06      	subs	r6, r0, #0
 8012258:	d108      	bne.n	801226c <__mdiff+0x28>
 801225a:	4631      	mov	r1, r6
 801225c:	4638      	mov	r0, r7
 801225e:	f7ff fd84 	bl	8011d6a <_Balloc>
 8012262:	2301      	movs	r3, #1
 8012264:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801226c:	bfa4      	itt	ge
 801226e:	4623      	movge	r3, r4
 8012270:	462c      	movge	r4, r5
 8012272:	4638      	mov	r0, r7
 8012274:	6861      	ldr	r1, [r4, #4]
 8012276:	bfa6      	itte	ge
 8012278:	461d      	movge	r5, r3
 801227a:	2600      	movge	r6, #0
 801227c:	2601      	movlt	r6, #1
 801227e:	f7ff fd74 	bl	8011d6a <_Balloc>
 8012282:	692b      	ldr	r3, [r5, #16]
 8012284:	60c6      	str	r6, [r0, #12]
 8012286:	6926      	ldr	r6, [r4, #16]
 8012288:	f105 0914 	add.w	r9, r5, #20
 801228c:	f104 0214 	add.w	r2, r4, #20
 8012290:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012294:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012298:	f100 0514 	add.w	r5, r0, #20
 801229c:	f04f 0e00 	mov.w	lr, #0
 80122a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80122a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80122a8:	fa1e f18a 	uxtah	r1, lr, sl
 80122ac:	b2a3      	uxth	r3, r4
 80122ae:	1ac9      	subs	r1, r1, r3
 80122b0:	0c23      	lsrs	r3, r4, #16
 80122b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80122b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80122ba:	b289      	uxth	r1, r1
 80122bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80122c0:	45c8      	cmp	r8, r9
 80122c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80122c6:	4694      	mov	ip, r2
 80122c8:	f845 3b04 	str.w	r3, [r5], #4
 80122cc:	d8e8      	bhi.n	80122a0 <__mdiff+0x5c>
 80122ce:	45bc      	cmp	ip, r7
 80122d0:	d304      	bcc.n	80122dc <__mdiff+0x98>
 80122d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80122d6:	b183      	cbz	r3, 80122fa <__mdiff+0xb6>
 80122d8:	6106      	str	r6, [r0, #16]
 80122da:	e7c5      	b.n	8012268 <__mdiff+0x24>
 80122dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80122e0:	fa1e f381 	uxtah	r3, lr, r1
 80122e4:	141a      	asrs	r2, r3, #16
 80122e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80122f4:	f845 3b04 	str.w	r3, [r5], #4
 80122f8:	e7e9      	b.n	80122ce <__mdiff+0x8a>
 80122fa:	3e01      	subs	r6, #1
 80122fc:	e7e9      	b.n	80122d2 <__mdiff+0x8e>
	...

08012300 <__ulp>:
 8012300:	4b12      	ldr	r3, [pc, #72]	; (801234c <__ulp+0x4c>)
 8012302:	ee10 2a90 	vmov	r2, s1
 8012306:	401a      	ands	r2, r3
 8012308:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801230c:	2b00      	cmp	r3, #0
 801230e:	dd04      	ble.n	801231a <__ulp+0x1a>
 8012310:	2000      	movs	r0, #0
 8012312:	4619      	mov	r1, r3
 8012314:	ec41 0b10 	vmov	d0, r0, r1
 8012318:	4770      	bx	lr
 801231a:	425b      	negs	r3, r3
 801231c:	151b      	asrs	r3, r3, #20
 801231e:	2b13      	cmp	r3, #19
 8012320:	f04f 0000 	mov.w	r0, #0
 8012324:	f04f 0100 	mov.w	r1, #0
 8012328:	dc04      	bgt.n	8012334 <__ulp+0x34>
 801232a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801232e:	fa42 f103 	asr.w	r1, r2, r3
 8012332:	e7ef      	b.n	8012314 <__ulp+0x14>
 8012334:	3b14      	subs	r3, #20
 8012336:	2b1e      	cmp	r3, #30
 8012338:	f04f 0201 	mov.w	r2, #1
 801233c:	bfda      	itte	le
 801233e:	f1c3 031f 	rsble	r3, r3, #31
 8012342:	fa02 f303 	lslle.w	r3, r2, r3
 8012346:	4613      	movgt	r3, r2
 8012348:	4618      	mov	r0, r3
 801234a:	e7e3      	b.n	8012314 <__ulp+0x14>
 801234c:	7ff00000 	.word	0x7ff00000

08012350 <__b2d>:
 8012350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012352:	6905      	ldr	r5, [r0, #16]
 8012354:	f100 0714 	add.w	r7, r0, #20
 8012358:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801235c:	1f2e      	subs	r6, r5, #4
 801235e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012362:	4620      	mov	r0, r4
 8012364:	f7ff fdc5 	bl	8011ef2 <__hi0bits>
 8012368:	f1c0 0320 	rsb	r3, r0, #32
 801236c:	280a      	cmp	r0, #10
 801236e:	600b      	str	r3, [r1, #0]
 8012370:	f8df c074 	ldr.w	ip, [pc, #116]	; 80123e8 <__b2d+0x98>
 8012374:	dc14      	bgt.n	80123a0 <__b2d+0x50>
 8012376:	f1c0 0e0b 	rsb	lr, r0, #11
 801237a:	fa24 f10e 	lsr.w	r1, r4, lr
 801237e:	42b7      	cmp	r7, r6
 8012380:	ea41 030c 	orr.w	r3, r1, ip
 8012384:	bf34      	ite	cc
 8012386:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801238a:	2100      	movcs	r1, #0
 801238c:	3015      	adds	r0, #21
 801238e:	fa04 f000 	lsl.w	r0, r4, r0
 8012392:	fa21 f10e 	lsr.w	r1, r1, lr
 8012396:	ea40 0201 	orr.w	r2, r0, r1
 801239a:	ec43 2b10 	vmov	d0, r2, r3
 801239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123a0:	42b7      	cmp	r7, r6
 80123a2:	bf3a      	itte	cc
 80123a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80123a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80123ac:	2100      	movcs	r1, #0
 80123ae:	380b      	subs	r0, #11
 80123b0:	d015      	beq.n	80123de <__b2d+0x8e>
 80123b2:	4084      	lsls	r4, r0
 80123b4:	f1c0 0520 	rsb	r5, r0, #32
 80123b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80123bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80123c0:	42be      	cmp	r6, r7
 80123c2:	fa21 fc05 	lsr.w	ip, r1, r5
 80123c6:	ea44 030c 	orr.w	r3, r4, ip
 80123ca:	bf8c      	ite	hi
 80123cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80123d0:	2400      	movls	r4, #0
 80123d2:	fa01 f000 	lsl.w	r0, r1, r0
 80123d6:	40ec      	lsrs	r4, r5
 80123d8:	ea40 0204 	orr.w	r2, r0, r4
 80123dc:	e7dd      	b.n	801239a <__b2d+0x4a>
 80123de:	ea44 030c 	orr.w	r3, r4, ip
 80123e2:	460a      	mov	r2, r1
 80123e4:	e7d9      	b.n	801239a <__b2d+0x4a>
 80123e6:	bf00      	nop
 80123e8:	3ff00000 	.word	0x3ff00000

080123ec <__d2b>:
 80123ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123f0:	460e      	mov	r6, r1
 80123f2:	2101      	movs	r1, #1
 80123f4:	ec59 8b10 	vmov	r8, r9, d0
 80123f8:	4615      	mov	r5, r2
 80123fa:	f7ff fcb6 	bl	8011d6a <_Balloc>
 80123fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012402:	4607      	mov	r7, r0
 8012404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012408:	bb34      	cbnz	r4, 8012458 <__d2b+0x6c>
 801240a:	9301      	str	r3, [sp, #4]
 801240c:	f1b8 0300 	subs.w	r3, r8, #0
 8012410:	d027      	beq.n	8012462 <__d2b+0x76>
 8012412:	a802      	add	r0, sp, #8
 8012414:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012418:	f7ff fd8a 	bl	8011f30 <__lo0bits>
 801241c:	9900      	ldr	r1, [sp, #0]
 801241e:	b1f0      	cbz	r0, 801245e <__d2b+0x72>
 8012420:	9a01      	ldr	r2, [sp, #4]
 8012422:	f1c0 0320 	rsb	r3, r0, #32
 8012426:	fa02 f303 	lsl.w	r3, r2, r3
 801242a:	430b      	orrs	r3, r1
 801242c:	40c2      	lsrs	r2, r0
 801242e:	617b      	str	r3, [r7, #20]
 8012430:	9201      	str	r2, [sp, #4]
 8012432:	9b01      	ldr	r3, [sp, #4]
 8012434:	61bb      	str	r3, [r7, #24]
 8012436:	2b00      	cmp	r3, #0
 8012438:	bf14      	ite	ne
 801243a:	2102      	movne	r1, #2
 801243c:	2101      	moveq	r1, #1
 801243e:	6139      	str	r1, [r7, #16]
 8012440:	b1c4      	cbz	r4, 8012474 <__d2b+0x88>
 8012442:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012446:	4404      	add	r4, r0
 8012448:	6034      	str	r4, [r6, #0]
 801244a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801244e:	6028      	str	r0, [r5, #0]
 8012450:	4638      	mov	r0, r7
 8012452:	b003      	add	sp, #12
 8012454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801245c:	e7d5      	b.n	801240a <__d2b+0x1e>
 801245e:	6179      	str	r1, [r7, #20]
 8012460:	e7e7      	b.n	8012432 <__d2b+0x46>
 8012462:	a801      	add	r0, sp, #4
 8012464:	f7ff fd64 	bl	8011f30 <__lo0bits>
 8012468:	9b01      	ldr	r3, [sp, #4]
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	2101      	movs	r1, #1
 801246e:	6139      	str	r1, [r7, #16]
 8012470:	3020      	adds	r0, #32
 8012472:	e7e5      	b.n	8012440 <__d2b+0x54>
 8012474:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801247c:	6030      	str	r0, [r6, #0]
 801247e:	6918      	ldr	r0, [r3, #16]
 8012480:	f7ff fd37 	bl	8011ef2 <__hi0bits>
 8012484:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012488:	e7e1      	b.n	801244e <__d2b+0x62>

0801248a <__ratio>:
 801248a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248e:	4688      	mov	r8, r1
 8012490:	4669      	mov	r1, sp
 8012492:	4681      	mov	r9, r0
 8012494:	f7ff ff5c 	bl	8012350 <__b2d>
 8012498:	a901      	add	r1, sp, #4
 801249a:	4640      	mov	r0, r8
 801249c:	ec57 6b10 	vmov	r6, r7, d0
 80124a0:	f7ff ff56 	bl	8012350 <__b2d>
 80124a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80124ac:	eba3 0c02 	sub.w	ip, r3, r2
 80124b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124b4:	1a9b      	subs	r3, r3, r2
 80124b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80124ba:	ec5b ab10 	vmov	sl, fp, d0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	bfce      	itee	gt
 80124c2:	463a      	movgt	r2, r7
 80124c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80124c8:	465a      	movle	r2, fp
 80124ca:	4659      	mov	r1, fp
 80124cc:	463d      	mov	r5, r7
 80124ce:	bfd4      	ite	le
 80124d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80124d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80124d8:	4630      	mov	r0, r6
 80124da:	ee10 2a10 	vmov	r2, s0
 80124de:	460b      	mov	r3, r1
 80124e0:	4629      	mov	r1, r5
 80124e2:	f7ee f9cb 	bl	800087c <__aeabi_ddiv>
 80124e6:	ec41 0b10 	vmov	d0, r0, r1
 80124ea:	b003      	add	sp, #12
 80124ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124f0 <__copybits>:
 80124f0:	3901      	subs	r1, #1
 80124f2:	b510      	push	{r4, lr}
 80124f4:	1149      	asrs	r1, r1, #5
 80124f6:	6914      	ldr	r4, [r2, #16]
 80124f8:	3101      	adds	r1, #1
 80124fa:	f102 0314 	add.w	r3, r2, #20
 80124fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012502:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012506:	42a3      	cmp	r3, r4
 8012508:	4602      	mov	r2, r0
 801250a:	d303      	bcc.n	8012514 <__copybits+0x24>
 801250c:	2300      	movs	r3, #0
 801250e:	428a      	cmp	r2, r1
 8012510:	d305      	bcc.n	801251e <__copybits+0x2e>
 8012512:	bd10      	pop	{r4, pc}
 8012514:	f853 2b04 	ldr.w	r2, [r3], #4
 8012518:	f840 2b04 	str.w	r2, [r0], #4
 801251c:	e7f3      	b.n	8012506 <__copybits+0x16>
 801251e:	f842 3b04 	str.w	r3, [r2], #4
 8012522:	e7f4      	b.n	801250e <__copybits+0x1e>

08012524 <__any_on>:
 8012524:	f100 0214 	add.w	r2, r0, #20
 8012528:	6900      	ldr	r0, [r0, #16]
 801252a:	114b      	asrs	r3, r1, #5
 801252c:	4298      	cmp	r0, r3
 801252e:	b510      	push	{r4, lr}
 8012530:	db11      	blt.n	8012556 <__any_on+0x32>
 8012532:	dd0a      	ble.n	801254a <__any_on+0x26>
 8012534:	f011 011f 	ands.w	r1, r1, #31
 8012538:	d007      	beq.n	801254a <__any_on+0x26>
 801253a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801253e:	fa24 f001 	lsr.w	r0, r4, r1
 8012542:	fa00 f101 	lsl.w	r1, r0, r1
 8012546:	428c      	cmp	r4, r1
 8012548:	d10b      	bne.n	8012562 <__any_on+0x3e>
 801254a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801254e:	4293      	cmp	r3, r2
 8012550:	d803      	bhi.n	801255a <__any_on+0x36>
 8012552:	2000      	movs	r0, #0
 8012554:	bd10      	pop	{r4, pc}
 8012556:	4603      	mov	r3, r0
 8012558:	e7f7      	b.n	801254a <__any_on+0x26>
 801255a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801255e:	2900      	cmp	r1, #0
 8012560:	d0f5      	beq.n	801254e <__any_on+0x2a>
 8012562:	2001      	movs	r0, #1
 8012564:	e7f6      	b.n	8012554 <__any_on+0x30>

08012566 <_calloc_r>:
 8012566:	b538      	push	{r3, r4, r5, lr}
 8012568:	fb02 f401 	mul.w	r4, r2, r1
 801256c:	4621      	mov	r1, r4
 801256e:	f000 f857 	bl	8012620 <_malloc_r>
 8012572:	4605      	mov	r5, r0
 8012574:	b118      	cbz	r0, 801257e <_calloc_r+0x18>
 8012576:	4622      	mov	r2, r4
 8012578:	2100      	movs	r1, #0
 801257a:	f7fc f91d 	bl	800e7b8 <memset>
 801257e:	4628      	mov	r0, r5
 8012580:	bd38      	pop	{r3, r4, r5, pc}
	...

08012584 <_free_r>:
 8012584:	b538      	push	{r3, r4, r5, lr}
 8012586:	4605      	mov	r5, r0
 8012588:	2900      	cmp	r1, #0
 801258a:	d045      	beq.n	8012618 <_free_r+0x94>
 801258c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012590:	1f0c      	subs	r4, r1, #4
 8012592:	2b00      	cmp	r3, #0
 8012594:	bfb8      	it	lt
 8012596:	18e4      	addlt	r4, r4, r3
 8012598:	f000 ffdb 	bl	8013552 <__malloc_lock>
 801259c:	4a1f      	ldr	r2, [pc, #124]	; (801261c <_free_r+0x98>)
 801259e:	6813      	ldr	r3, [r2, #0]
 80125a0:	4610      	mov	r0, r2
 80125a2:	b933      	cbnz	r3, 80125b2 <_free_r+0x2e>
 80125a4:	6063      	str	r3, [r4, #4]
 80125a6:	6014      	str	r4, [r2, #0]
 80125a8:	4628      	mov	r0, r5
 80125aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ae:	f000 bfd1 	b.w	8013554 <__malloc_unlock>
 80125b2:	42a3      	cmp	r3, r4
 80125b4:	d90c      	bls.n	80125d0 <_free_r+0x4c>
 80125b6:	6821      	ldr	r1, [r4, #0]
 80125b8:	1862      	adds	r2, r4, r1
 80125ba:	4293      	cmp	r3, r2
 80125bc:	bf04      	itt	eq
 80125be:	681a      	ldreq	r2, [r3, #0]
 80125c0:	685b      	ldreq	r3, [r3, #4]
 80125c2:	6063      	str	r3, [r4, #4]
 80125c4:	bf04      	itt	eq
 80125c6:	1852      	addeq	r2, r2, r1
 80125c8:	6022      	streq	r2, [r4, #0]
 80125ca:	6004      	str	r4, [r0, #0]
 80125cc:	e7ec      	b.n	80125a8 <_free_r+0x24>
 80125ce:	4613      	mov	r3, r2
 80125d0:	685a      	ldr	r2, [r3, #4]
 80125d2:	b10a      	cbz	r2, 80125d8 <_free_r+0x54>
 80125d4:	42a2      	cmp	r2, r4
 80125d6:	d9fa      	bls.n	80125ce <_free_r+0x4a>
 80125d8:	6819      	ldr	r1, [r3, #0]
 80125da:	1858      	adds	r0, r3, r1
 80125dc:	42a0      	cmp	r0, r4
 80125de:	d10b      	bne.n	80125f8 <_free_r+0x74>
 80125e0:	6820      	ldr	r0, [r4, #0]
 80125e2:	4401      	add	r1, r0
 80125e4:	1858      	adds	r0, r3, r1
 80125e6:	4282      	cmp	r2, r0
 80125e8:	6019      	str	r1, [r3, #0]
 80125ea:	d1dd      	bne.n	80125a8 <_free_r+0x24>
 80125ec:	6810      	ldr	r0, [r2, #0]
 80125ee:	6852      	ldr	r2, [r2, #4]
 80125f0:	605a      	str	r2, [r3, #4]
 80125f2:	4401      	add	r1, r0
 80125f4:	6019      	str	r1, [r3, #0]
 80125f6:	e7d7      	b.n	80125a8 <_free_r+0x24>
 80125f8:	d902      	bls.n	8012600 <_free_r+0x7c>
 80125fa:	230c      	movs	r3, #12
 80125fc:	602b      	str	r3, [r5, #0]
 80125fe:	e7d3      	b.n	80125a8 <_free_r+0x24>
 8012600:	6820      	ldr	r0, [r4, #0]
 8012602:	1821      	adds	r1, r4, r0
 8012604:	428a      	cmp	r2, r1
 8012606:	bf04      	itt	eq
 8012608:	6811      	ldreq	r1, [r2, #0]
 801260a:	6852      	ldreq	r2, [r2, #4]
 801260c:	6062      	str	r2, [r4, #4]
 801260e:	bf04      	itt	eq
 8012610:	1809      	addeq	r1, r1, r0
 8012612:	6021      	streq	r1, [r4, #0]
 8012614:	605c      	str	r4, [r3, #4]
 8012616:	e7c7      	b.n	80125a8 <_free_r+0x24>
 8012618:	bd38      	pop	{r3, r4, r5, pc}
 801261a:	bf00      	nop
 801261c:	200007ac 	.word	0x200007ac

08012620 <_malloc_r>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	1ccd      	adds	r5, r1, #3
 8012624:	f025 0503 	bic.w	r5, r5, #3
 8012628:	3508      	adds	r5, #8
 801262a:	2d0c      	cmp	r5, #12
 801262c:	bf38      	it	cc
 801262e:	250c      	movcc	r5, #12
 8012630:	2d00      	cmp	r5, #0
 8012632:	4606      	mov	r6, r0
 8012634:	db01      	blt.n	801263a <_malloc_r+0x1a>
 8012636:	42a9      	cmp	r1, r5
 8012638:	d903      	bls.n	8012642 <_malloc_r+0x22>
 801263a:	230c      	movs	r3, #12
 801263c:	6033      	str	r3, [r6, #0]
 801263e:	2000      	movs	r0, #0
 8012640:	bd70      	pop	{r4, r5, r6, pc}
 8012642:	f000 ff86 	bl	8013552 <__malloc_lock>
 8012646:	4a21      	ldr	r2, [pc, #132]	; (80126cc <_malloc_r+0xac>)
 8012648:	6814      	ldr	r4, [r2, #0]
 801264a:	4621      	mov	r1, r4
 801264c:	b991      	cbnz	r1, 8012674 <_malloc_r+0x54>
 801264e:	4c20      	ldr	r4, [pc, #128]	; (80126d0 <_malloc_r+0xb0>)
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	b91b      	cbnz	r3, 801265c <_malloc_r+0x3c>
 8012654:	4630      	mov	r0, r6
 8012656:	f000 fe19 	bl	801328c <_sbrk_r>
 801265a:	6020      	str	r0, [r4, #0]
 801265c:	4629      	mov	r1, r5
 801265e:	4630      	mov	r0, r6
 8012660:	f000 fe14 	bl	801328c <_sbrk_r>
 8012664:	1c43      	adds	r3, r0, #1
 8012666:	d124      	bne.n	80126b2 <_malloc_r+0x92>
 8012668:	230c      	movs	r3, #12
 801266a:	6033      	str	r3, [r6, #0]
 801266c:	4630      	mov	r0, r6
 801266e:	f000 ff71 	bl	8013554 <__malloc_unlock>
 8012672:	e7e4      	b.n	801263e <_malloc_r+0x1e>
 8012674:	680b      	ldr	r3, [r1, #0]
 8012676:	1b5b      	subs	r3, r3, r5
 8012678:	d418      	bmi.n	80126ac <_malloc_r+0x8c>
 801267a:	2b0b      	cmp	r3, #11
 801267c:	d90f      	bls.n	801269e <_malloc_r+0x7e>
 801267e:	600b      	str	r3, [r1, #0]
 8012680:	50cd      	str	r5, [r1, r3]
 8012682:	18cc      	adds	r4, r1, r3
 8012684:	4630      	mov	r0, r6
 8012686:	f000 ff65 	bl	8013554 <__malloc_unlock>
 801268a:	f104 000b 	add.w	r0, r4, #11
 801268e:	1d23      	adds	r3, r4, #4
 8012690:	f020 0007 	bic.w	r0, r0, #7
 8012694:	1ac3      	subs	r3, r0, r3
 8012696:	d0d3      	beq.n	8012640 <_malloc_r+0x20>
 8012698:	425a      	negs	r2, r3
 801269a:	50e2      	str	r2, [r4, r3]
 801269c:	e7d0      	b.n	8012640 <_malloc_r+0x20>
 801269e:	428c      	cmp	r4, r1
 80126a0:	684b      	ldr	r3, [r1, #4]
 80126a2:	bf16      	itet	ne
 80126a4:	6063      	strne	r3, [r4, #4]
 80126a6:	6013      	streq	r3, [r2, #0]
 80126a8:	460c      	movne	r4, r1
 80126aa:	e7eb      	b.n	8012684 <_malloc_r+0x64>
 80126ac:	460c      	mov	r4, r1
 80126ae:	6849      	ldr	r1, [r1, #4]
 80126b0:	e7cc      	b.n	801264c <_malloc_r+0x2c>
 80126b2:	1cc4      	adds	r4, r0, #3
 80126b4:	f024 0403 	bic.w	r4, r4, #3
 80126b8:	42a0      	cmp	r0, r4
 80126ba:	d005      	beq.n	80126c8 <_malloc_r+0xa8>
 80126bc:	1a21      	subs	r1, r4, r0
 80126be:	4630      	mov	r0, r6
 80126c0:	f000 fde4 	bl	801328c <_sbrk_r>
 80126c4:	3001      	adds	r0, #1
 80126c6:	d0cf      	beq.n	8012668 <_malloc_r+0x48>
 80126c8:	6025      	str	r5, [r4, #0]
 80126ca:	e7db      	b.n	8012684 <_malloc_r+0x64>
 80126cc:	200007ac 	.word	0x200007ac
 80126d0:	200007b0 	.word	0x200007b0

080126d4 <__ssputs_r>:
 80126d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d8:	688e      	ldr	r6, [r1, #8]
 80126da:	429e      	cmp	r6, r3
 80126dc:	4682      	mov	sl, r0
 80126de:	460c      	mov	r4, r1
 80126e0:	4690      	mov	r8, r2
 80126e2:	4699      	mov	r9, r3
 80126e4:	d837      	bhi.n	8012756 <__ssputs_r+0x82>
 80126e6:	898a      	ldrh	r2, [r1, #12]
 80126e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80126ec:	d031      	beq.n	8012752 <__ssputs_r+0x7e>
 80126ee:	6825      	ldr	r5, [r4, #0]
 80126f0:	6909      	ldr	r1, [r1, #16]
 80126f2:	1a6f      	subs	r7, r5, r1
 80126f4:	6965      	ldr	r5, [r4, #20]
 80126f6:	2302      	movs	r3, #2
 80126f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8012700:	f109 0301 	add.w	r3, r9, #1
 8012704:	443b      	add	r3, r7
 8012706:	429d      	cmp	r5, r3
 8012708:	bf38      	it	cc
 801270a:	461d      	movcc	r5, r3
 801270c:	0553      	lsls	r3, r2, #21
 801270e:	d530      	bpl.n	8012772 <__ssputs_r+0x9e>
 8012710:	4629      	mov	r1, r5
 8012712:	f7ff ff85 	bl	8012620 <_malloc_r>
 8012716:	4606      	mov	r6, r0
 8012718:	b950      	cbnz	r0, 8012730 <__ssputs_r+0x5c>
 801271a:	230c      	movs	r3, #12
 801271c:	f8ca 3000 	str.w	r3, [sl]
 8012720:	89a3      	ldrh	r3, [r4, #12]
 8012722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012726:	81a3      	strh	r3, [r4, #12]
 8012728:	f04f 30ff 	mov.w	r0, #4294967295
 801272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012730:	463a      	mov	r2, r7
 8012732:	6921      	ldr	r1, [r4, #16]
 8012734:	f7ff fb0e 	bl	8011d54 <memcpy>
 8012738:	89a3      	ldrh	r3, [r4, #12]
 801273a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012742:	81a3      	strh	r3, [r4, #12]
 8012744:	6126      	str	r6, [r4, #16]
 8012746:	6165      	str	r5, [r4, #20]
 8012748:	443e      	add	r6, r7
 801274a:	1bed      	subs	r5, r5, r7
 801274c:	6026      	str	r6, [r4, #0]
 801274e:	60a5      	str	r5, [r4, #8]
 8012750:	464e      	mov	r6, r9
 8012752:	454e      	cmp	r6, r9
 8012754:	d900      	bls.n	8012758 <__ssputs_r+0x84>
 8012756:	464e      	mov	r6, r9
 8012758:	4632      	mov	r2, r6
 801275a:	4641      	mov	r1, r8
 801275c:	6820      	ldr	r0, [r4, #0]
 801275e:	f000 fedf 	bl	8013520 <memmove>
 8012762:	68a3      	ldr	r3, [r4, #8]
 8012764:	1b9b      	subs	r3, r3, r6
 8012766:	60a3      	str	r3, [r4, #8]
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	441e      	add	r6, r3
 801276c:	6026      	str	r6, [r4, #0]
 801276e:	2000      	movs	r0, #0
 8012770:	e7dc      	b.n	801272c <__ssputs_r+0x58>
 8012772:	462a      	mov	r2, r5
 8012774:	f000 feef 	bl	8013556 <_realloc_r>
 8012778:	4606      	mov	r6, r0
 801277a:	2800      	cmp	r0, #0
 801277c:	d1e2      	bne.n	8012744 <__ssputs_r+0x70>
 801277e:	6921      	ldr	r1, [r4, #16]
 8012780:	4650      	mov	r0, sl
 8012782:	f7ff feff 	bl	8012584 <_free_r>
 8012786:	e7c8      	b.n	801271a <__ssputs_r+0x46>

08012788 <_svfiprintf_r>:
 8012788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	461d      	mov	r5, r3
 801278e:	898b      	ldrh	r3, [r1, #12]
 8012790:	061f      	lsls	r7, r3, #24
 8012792:	b09d      	sub	sp, #116	; 0x74
 8012794:	4680      	mov	r8, r0
 8012796:	460c      	mov	r4, r1
 8012798:	4616      	mov	r6, r2
 801279a:	d50f      	bpl.n	80127bc <_svfiprintf_r+0x34>
 801279c:	690b      	ldr	r3, [r1, #16]
 801279e:	b96b      	cbnz	r3, 80127bc <_svfiprintf_r+0x34>
 80127a0:	2140      	movs	r1, #64	; 0x40
 80127a2:	f7ff ff3d 	bl	8012620 <_malloc_r>
 80127a6:	6020      	str	r0, [r4, #0]
 80127a8:	6120      	str	r0, [r4, #16]
 80127aa:	b928      	cbnz	r0, 80127b8 <_svfiprintf_r+0x30>
 80127ac:	230c      	movs	r3, #12
 80127ae:	f8c8 3000 	str.w	r3, [r8]
 80127b2:	f04f 30ff 	mov.w	r0, #4294967295
 80127b6:	e0c8      	b.n	801294a <_svfiprintf_r+0x1c2>
 80127b8:	2340      	movs	r3, #64	; 0x40
 80127ba:	6163      	str	r3, [r4, #20]
 80127bc:	2300      	movs	r3, #0
 80127be:	9309      	str	r3, [sp, #36]	; 0x24
 80127c0:	2320      	movs	r3, #32
 80127c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127c6:	2330      	movs	r3, #48	; 0x30
 80127c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127cc:	9503      	str	r5, [sp, #12]
 80127ce:	f04f 0b01 	mov.w	fp, #1
 80127d2:	4637      	mov	r7, r6
 80127d4:	463d      	mov	r5, r7
 80127d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80127da:	b10b      	cbz	r3, 80127e0 <_svfiprintf_r+0x58>
 80127dc:	2b25      	cmp	r3, #37	; 0x25
 80127de:	d13e      	bne.n	801285e <_svfiprintf_r+0xd6>
 80127e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80127e4:	d00b      	beq.n	80127fe <_svfiprintf_r+0x76>
 80127e6:	4653      	mov	r3, sl
 80127e8:	4632      	mov	r2, r6
 80127ea:	4621      	mov	r1, r4
 80127ec:	4640      	mov	r0, r8
 80127ee:	f7ff ff71 	bl	80126d4 <__ssputs_r>
 80127f2:	3001      	adds	r0, #1
 80127f4:	f000 80a4 	beq.w	8012940 <_svfiprintf_r+0x1b8>
 80127f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127fa:	4453      	add	r3, sl
 80127fc:	9309      	str	r3, [sp, #36]	; 0x24
 80127fe:	783b      	ldrb	r3, [r7, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	f000 809d 	beq.w	8012940 <_svfiprintf_r+0x1b8>
 8012806:	2300      	movs	r3, #0
 8012808:	f04f 32ff 	mov.w	r2, #4294967295
 801280c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012810:	9304      	str	r3, [sp, #16]
 8012812:	9307      	str	r3, [sp, #28]
 8012814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012818:	931a      	str	r3, [sp, #104]	; 0x68
 801281a:	462f      	mov	r7, r5
 801281c:	2205      	movs	r2, #5
 801281e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012822:	4850      	ldr	r0, [pc, #320]	; (8012964 <_svfiprintf_r+0x1dc>)
 8012824:	f7ed fcf4 	bl	8000210 <memchr>
 8012828:	9b04      	ldr	r3, [sp, #16]
 801282a:	b9d0      	cbnz	r0, 8012862 <_svfiprintf_r+0xda>
 801282c:	06d9      	lsls	r1, r3, #27
 801282e:	bf44      	itt	mi
 8012830:	2220      	movmi	r2, #32
 8012832:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012836:	071a      	lsls	r2, r3, #28
 8012838:	bf44      	itt	mi
 801283a:	222b      	movmi	r2, #43	; 0x2b
 801283c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012840:	782a      	ldrb	r2, [r5, #0]
 8012842:	2a2a      	cmp	r2, #42	; 0x2a
 8012844:	d015      	beq.n	8012872 <_svfiprintf_r+0xea>
 8012846:	9a07      	ldr	r2, [sp, #28]
 8012848:	462f      	mov	r7, r5
 801284a:	2000      	movs	r0, #0
 801284c:	250a      	movs	r5, #10
 801284e:	4639      	mov	r1, r7
 8012850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012854:	3b30      	subs	r3, #48	; 0x30
 8012856:	2b09      	cmp	r3, #9
 8012858:	d94d      	bls.n	80128f6 <_svfiprintf_r+0x16e>
 801285a:	b1b8      	cbz	r0, 801288c <_svfiprintf_r+0x104>
 801285c:	e00f      	b.n	801287e <_svfiprintf_r+0xf6>
 801285e:	462f      	mov	r7, r5
 8012860:	e7b8      	b.n	80127d4 <_svfiprintf_r+0x4c>
 8012862:	4a40      	ldr	r2, [pc, #256]	; (8012964 <_svfiprintf_r+0x1dc>)
 8012864:	1a80      	subs	r0, r0, r2
 8012866:	fa0b f000 	lsl.w	r0, fp, r0
 801286a:	4318      	orrs	r0, r3
 801286c:	9004      	str	r0, [sp, #16]
 801286e:	463d      	mov	r5, r7
 8012870:	e7d3      	b.n	801281a <_svfiprintf_r+0x92>
 8012872:	9a03      	ldr	r2, [sp, #12]
 8012874:	1d11      	adds	r1, r2, #4
 8012876:	6812      	ldr	r2, [r2, #0]
 8012878:	9103      	str	r1, [sp, #12]
 801287a:	2a00      	cmp	r2, #0
 801287c:	db01      	blt.n	8012882 <_svfiprintf_r+0xfa>
 801287e:	9207      	str	r2, [sp, #28]
 8012880:	e004      	b.n	801288c <_svfiprintf_r+0x104>
 8012882:	4252      	negs	r2, r2
 8012884:	f043 0302 	orr.w	r3, r3, #2
 8012888:	9207      	str	r2, [sp, #28]
 801288a:	9304      	str	r3, [sp, #16]
 801288c:	783b      	ldrb	r3, [r7, #0]
 801288e:	2b2e      	cmp	r3, #46	; 0x2e
 8012890:	d10c      	bne.n	80128ac <_svfiprintf_r+0x124>
 8012892:	787b      	ldrb	r3, [r7, #1]
 8012894:	2b2a      	cmp	r3, #42	; 0x2a
 8012896:	d133      	bne.n	8012900 <_svfiprintf_r+0x178>
 8012898:	9b03      	ldr	r3, [sp, #12]
 801289a:	1d1a      	adds	r2, r3, #4
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	9203      	str	r2, [sp, #12]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	bfb8      	it	lt
 80128a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80128a8:	3702      	adds	r7, #2
 80128aa:	9305      	str	r3, [sp, #20]
 80128ac:	4d2e      	ldr	r5, [pc, #184]	; (8012968 <_svfiprintf_r+0x1e0>)
 80128ae:	7839      	ldrb	r1, [r7, #0]
 80128b0:	2203      	movs	r2, #3
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7ed fcac 	bl	8000210 <memchr>
 80128b8:	b138      	cbz	r0, 80128ca <_svfiprintf_r+0x142>
 80128ba:	2340      	movs	r3, #64	; 0x40
 80128bc:	1b40      	subs	r0, r0, r5
 80128be:	fa03 f000 	lsl.w	r0, r3, r0
 80128c2:	9b04      	ldr	r3, [sp, #16]
 80128c4:	4303      	orrs	r3, r0
 80128c6:	3701      	adds	r7, #1
 80128c8:	9304      	str	r3, [sp, #16]
 80128ca:	7839      	ldrb	r1, [r7, #0]
 80128cc:	4827      	ldr	r0, [pc, #156]	; (801296c <_svfiprintf_r+0x1e4>)
 80128ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128d2:	2206      	movs	r2, #6
 80128d4:	1c7e      	adds	r6, r7, #1
 80128d6:	f7ed fc9b 	bl	8000210 <memchr>
 80128da:	2800      	cmp	r0, #0
 80128dc:	d038      	beq.n	8012950 <_svfiprintf_r+0x1c8>
 80128de:	4b24      	ldr	r3, [pc, #144]	; (8012970 <_svfiprintf_r+0x1e8>)
 80128e0:	bb13      	cbnz	r3, 8012928 <_svfiprintf_r+0x1a0>
 80128e2:	9b03      	ldr	r3, [sp, #12]
 80128e4:	3307      	adds	r3, #7
 80128e6:	f023 0307 	bic.w	r3, r3, #7
 80128ea:	3308      	adds	r3, #8
 80128ec:	9303      	str	r3, [sp, #12]
 80128ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f0:	444b      	add	r3, r9
 80128f2:	9309      	str	r3, [sp, #36]	; 0x24
 80128f4:	e76d      	b.n	80127d2 <_svfiprintf_r+0x4a>
 80128f6:	fb05 3202 	mla	r2, r5, r2, r3
 80128fa:	2001      	movs	r0, #1
 80128fc:	460f      	mov	r7, r1
 80128fe:	e7a6      	b.n	801284e <_svfiprintf_r+0xc6>
 8012900:	2300      	movs	r3, #0
 8012902:	3701      	adds	r7, #1
 8012904:	9305      	str	r3, [sp, #20]
 8012906:	4619      	mov	r1, r3
 8012908:	250a      	movs	r5, #10
 801290a:	4638      	mov	r0, r7
 801290c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012910:	3a30      	subs	r2, #48	; 0x30
 8012912:	2a09      	cmp	r2, #9
 8012914:	d903      	bls.n	801291e <_svfiprintf_r+0x196>
 8012916:	2b00      	cmp	r3, #0
 8012918:	d0c8      	beq.n	80128ac <_svfiprintf_r+0x124>
 801291a:	9105      	str	r1, [sp, #20]
 801291c:	e7c6      	b.n	80128ac <_svfiprintf_r+0x124>
 801291e:	fb05 2101 	mla	r1, r5, r1, r2
 8012922:	2301      	movs	r3, #1
 8012924:	4607      	mov	r7, r0
 8012926:	e7f0      	b.n	801290a <_svfiprintf_r+0x182>
 8012928:	ab03      	add	r3, sp, #12
 801292a:	9300      	str	r3, [sp, #0]
 801292c:	4622      	mov	r2, r4
 801292e:	4b11      	ldr	r3, [pc, #68]	; (8012974 <_svfiprintf_r+0x1ec>)
 8012930:	a904      	add	r1, sp, #16
 8012932:	4640      	mov	r0, r8
 8012934:	f7fb ffdc 	bl	800e8f0 <_printf_float>
 8012938:	f1b0 3fff 	cmp.w	r0, #4294967295
 801293c:	4681      	mov	r9, r0
 801293e:	d1d6      	bne.n	80128ee <_svfiprintf_r+0x166>
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	065b      	lsls	r3, r3, #25
 8012944:	f53f af35 	bmi.w	80127b2 <_svfiprintf_r+0x2a>
 8012948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801294a:	b01d      	add	sp, #116	; 0x74
 801294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012950:	ab03      	add	r3, sp, #12
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	4622      	mov	r2, r4
 8012956:	4b07      	ldr	r3, [pc, #28]	; (8012974 <_svfiprintf_r+0x1ec>)
 8012958:	a904      	add	r1, sp, #16
 801295a:	4640      	mov	r0, r8
 801295c:	f7fc fa7e 	bl	800ee5c <_printf_i>
 8012960:	e7ea      	b.n	8012938 <_svfiprintf_r+0x1b0>
 8012962:	bf00      	nop
 8012964:	08013d54 	.word	0x08013d54
 8012968:	08013d5a 	.word	0x08013d5a
 801296c:	08013d5e 	.word	0x08013d5e
 8012970:	0800e8f1 	.word	0x0800e8f1
 8012974:	080126d5 	.word	0x080126d5

08012978 <_sungetc_r>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	1c4b      	adds	r3, r1, #1
 801297c:	4614      	mov	r4, r2
 801297e:	d103      	bne.n	8012988 <_sungetc_r+0x10>
 8012980:	f04f 35ff 	mov.w	r5, #4294967295
 8012984:	4628      	mov	r0, r5
 8012986:	bd38      	pop	{r3, r4, r5, pc}
 8012988:	8993      	ldrh	r3, [r2, #12]
 801298a:	f023 0320 	bic.w	r3, r3, #32
 801298e:	8193      	strh	r3, [r2, #12]
 8012990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012992:	6852      	ldr	r2, [r2, #4]
 8012994:	b2cd      	uxtb	r5, r1
 8012996:	b18b      	cbz	r3, 80129bc <_sungetc_r+0x44>
 8012998:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801299a:	4293      	cmp	r3, r2
 801299c:	dd08      	ble.n	80129b0 <_sungetc_r+0x38>
 801299e:	6823      	ldr	r3, [r4, #0]
 80129a0:	1e5a      	subs	r2, r3, #1
 80129a2:	6022      	str	r2, [r4, #0]
 80129a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80129a8:	6863      	ldr	r3, [r4, #4]
 80129aa:	3301      	adds	r3, #1
 80129ac:	6063      	str	r3, [r4, #4]
 80129ae:	e7e9      	b.n	8012984 <_sungetc_r+0xc>
 80129b0:	4621      	mov	r1, r4
 80129b2:	f000 fd4b 	bl	801344c <__submore>
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d0f1      	beq.n	801299e <_sungetc_r+0x26>
 80129ba:	e7e1      	b.n	8012980 <_sungetc_r+0x8>
 80129bc:	6921      	ldr	r1, [r4, #16]
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	b151      	cbz	r1, 80129d8 <_sungetc_r+0x60>
 80129c2:	4299      	cmp	r1, r3
 80129c4:	d208      	bcs.n	80129d8 <_sungetc_r+0x60>
 80129c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80129ca:	42a9      	cmp	r1, r5
 80129cc:	d104      	bne.n	80129d8 <_sungetc_r+0x60>
 80129ce:	3b01      	subs	r3, #1
 80129d0:	3201      	adds	r2, #1
 80129d2:	6023      	str	r3, [r4, #0]
 80129d4:	6062      	str	r2, [r4, #4]
 80129d6:	e7d5      	b.n	8012984 <_sungetc_r+0xc>
 80129d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80129dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129e0:	6363      	str	r3, [r4, #52]	; 0x34
 80129e2:	2303      	movs	r3, #3
 80129e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80129e6:	4623      	mov	r3, r4
 80129e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80129ec:	6023      	str	r3, [r4, #0]
 80129ee:	2301      	movs	r3, #1
 80129f0:	e7dc      	b.n	80129ac <_sungetc_r+0x34>

080129f2 <__ssrefill_r>:
 80129f2:	b510      	push	{r4, lr}
 80129f4:	460c      	mov	r4, r1
 80129f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80129f8:	b169      	cbz	r1, 8012a16 <__ssrefill_r+0x24>
 80129fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129fe:	4299      	cmp	r1, r3
 8012a00:	d001      	beq.n	8012a06 <__ssrefill_r+0x14>
 8012a02:	f7ff fdbf 	bl	8012584 <_free_r>
 8012a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a08:	6063      	str	r3, [r4, #4]
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8012a0e:	b113      	cbz	r3, 8012a16 <__ssrefill_r+0x24>
 8012a10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012a12:	6023      	str	r3, [r4, #0]
 8012a14:	bd10      	pop	{r4, pc}
 8012a16:	6923      	ldr	r3, [r4, #16]
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	6063      	str	r3, [r4, #4]
 8012a1e:	89a3      	ldrh	r3, [r4, #12]
 8012a20:	f043 0320 	orr.w	r3, r3, #32
 8012a24:	81a3      	strh	r3, [r4, #12]
 8012a26:	f04f 30ff 	mov.w	r0, #4294967295
 8012a2a:	e7f3      	b.n	8012a14 <__ssrefill_r+0x22>

08012a2c <__ssvfiscanf_r>:
 8012a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a30:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012a34:	460c      	mov	r4, r1
 8012a36:	2100      	movs	r1, #0
 8012a38:	9144      	str	r1, [sp, #272]	; 0x110
 8012a3a:	9145      	str	r1, [sp, #276]	; 0x114
 8012a3c:	499f      	ldr	r1, [pc, #636]	; (8012cbc <__ssvfiscanf_r+0x290>)
 8012a3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012a40:	f10d 0804 	add.w	r8, sp, #4
 8012a44:	499e      	ldr	r1, [pc, #632]	; (8012cc0 <__ssvfiscanf_r+0x294>)
 8012a46:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8012cc4 <__ssvfiscanf_r+0x298>
 8012a4a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012a4e:	4606      	mov	r6, r0
 8012a50:	4692      	mov	sl, r2
 8012a52:	91a1      	str	r1, [sp, #644]	; 0x284
 8012a54:	9300      	str	r3, [sp, #0]
 8012a56:	270a      	movs	r7, #10
 8012a58:	f89a 3000 	ldrb.w	r3, [sl]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 812a 	beq.w	8012cb6 <__ssvfiscanf_r+0x28a>
 8012a62:	4655      	mov	r5, sl
 8012a64:	f7ff f8c8 	bl	8011bf8 <__locale_ctype_ptr>
 8012a68:	f815 bb01 	ldrb.w	fp, [r5], #1
 8012a6c:	4458      	add	r0, fp
 8012a6e:	7843      	ldrb	r3, [r0, #1]
 8012a70:	f013 0308 	ands.w	r3, r3, #8
 8012a74:	d01c      	beq.n	8012ab0 <__ssvfiscanf_r+0x84>
 8012a76:	6863      	ldr	r3, [r4, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	dd12      	ble.n	8012aa2 <__ssvfiscanf_r+0x76>
 8012a7c:	f7ff f8bc 	bl	8011bf8 <__locale_ctype_ptr>
 8012a80:	6823      	ldr	r3, [r4, #0]
 8012a82:	781a      	ldrb	r2, [r3, #0]
 8012a84:	4410      	add	r0, r2
 8012a86:	7842      	ldrb	r2, [r0, #1]
 8012a88:	0712      	lsls	r2, r2, #28
 8012a8a:	d401      	bmi.n	8012a90 <__ssvfiscanf_r+0x64>
 8012a8c:	46aa      	mov	sl, r5
 8012a8e:	e7e3      	b.n	8012a58 <__ssvfiscanf_r+0x2c>
 8012a90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a92:	3201      	adds	r2, #1
 8012a94:	9245      	str	r2, [sp, #276]	; 0x114
 8012a96:	6862      	ldr	r2, [r4, #4]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	3a01      	subs	r2, #1
 8012a9c:	6062      	str	r2, [r4, #4]
 8012a9e:	6023      	str	r3, [r4, #0]
 8012aa0:	e7e9      	b.n	8012a76 <__ssvfiscanf_r+0x4a>
 8012aa2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	4798      	blx	r3
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	d0e6      	beq.n	8012a7c <__ssvfiscanf_r+0x50>
 8012aae:	e7ed      	b.n	8012a8c <__ssvfiscanf_r+0x60>
 8012ab0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8012ab4:	f040 8082 	bne.w	8012bbc <__ssvfiscanf_r+0x190>
 8012ab8:	9343      	str	r3, [sp, #268]	; 0x10c
 8012aba:	9341      	str	r3, [sp, #260]	; 0x104
 8012abc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ac2:	d103      	bne.n	8012acc <__ssvfiscanf_r+0xa0>
 8012ac4:	2310      	movs	r3, #16
 8012ac6:	9341      	str	r3, [sp, #260]	; 0x104
 8012ac8:	f10a 0502 	add.w	r5, sl, #2
 8012acc:	46aa      	mov	sl, r5
 8012ace:	f815 1b01 	ldrb.w	r1, [r5], #1
 8012ad2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012ad6:	2a09      	cmp	r2, #9
 8012ad8:	d922      	bls.n	8012b20 <__ssvfiscanf_r+0xf4>
 8012ada:	2203      	movs	r2, #3
 8012adc:	4879      	ldr	r0, [pc, #484]	; (8012cc4 <__ssvfiscanf_r+0x298>)
 8012ade:	f7ed fb97 	bl	8000210 <memchr>
 8012ae2:	b138      	cbz	r0, 8012af4 <__ssvfiscanf_r+0xc8>
 8012ae4:	eba0 0309 	sub.w	r3, r0, r9
 8012ae8:	2001      	movs	r0, #1
 8012aea:	4098      	lsls	r0, r3
 8012aec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012aee:	4318      	orrs	r0, r3
 8012af0:	9041      	str	r0, [sp, #260]	; 0x104
 8012af2:	46aa      	mov	sl, r5
 8012af4:	f89a 3000 	ldrb.w	r3, [sl]
 8012af8:	2b67      	cmp	r3, #103	; 0x67
 8012afa:	f10a 0501 	add.w	r5, sl, #1
 8012afe:	d82b      	bhi.n	8012b58 <__ssvfiscanf_r+0x12c>
 8012b00:	2b65      	cmp	r3, #101	; 0x65
 8012b02:	f080 809f 	bcs.w	8012c44 <__ssvfiscanf_r+0x218>
 8012b06:	2b47      	cmp	r3, #71	; 0x47
 8012b08:	d810      	bhi.n	8012b2c <__ssvfiscanf_r+0x100>
 8012b0a:	2b45      	cmp	r3, #69	; 0x45
 8012b0c:	f080 809a 	bcs.w	8012c44 <__ssvfiscanf_r+0x218>
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d06c      	beq.n	8012bee <__ssvfiscanf_r+0x1c2>
 8012b14:	2b25      	cmp	r3, #37	; 0x25
 8012b16:	d051      	beq.n	8012bbc <__ssvfiscanf_r+0x190>
 8012b18:	2303      	movs	r3, #3
 8012b1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b1c:	9742      	str	r7, [sp, #264]	; 0x108
 8012b1e:	e027      	b.n	8012b70 <__ssvfiscanf_r+0x144>
 8012b20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012b22:	fb07 1303 	mla	r3, r7, r3, r1
 8012b26:	3b30      	subs	r3, #48	; 0x30
 8012b28:	9343      	str	r3, [sp, #268]	; 0x10c
 8012b2a:	e7cf      	b.n	8012acc <__ssvfiscanf_r+0xa0>
 8012b2c:	2b5b      	cmp	r3, #91	; 0x5b
 8012b2e:	d06a      	beq.n	8012c06 <__ssvfiscanf_r+0x1da>
 8012b30:	d80c      	bhi.n	8012b4c <__ssvfiscanf_r+0x120>
 8012b32:	2b58      	cmp	r3, #88	; 0x58
 8012b34:	d1f0      	bne.n	8012b18 <__ssvfiscanf_r+0xec>
 8012b36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b3c:	9241      	str	r2, [sp, #260]	; 0x104
 8012b3e:	2210      	movs	r2, #16
 8012b40:	9242      	str	r2, [sp, #264]	; 0x108
 8012b42:	2b6e      	cmp	r3, #110	; 0x6e
 8012b44:	bf8c      	ite	hi
 8012b46:	2304      	movhi	r3, #4
 8012b48:	2303      	movls	r3, #3
 8012b4a:	e010      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012b4c:	2b63      	cmp	r3, #99	; 0x63
 8012b4e:	d065      	beq.n	8012c1c <__ssvfiscanf_r+0x1f0>
 8012b50:	2b64      	cmp	r3, #100	; 0x64
 8012b52:	d1e1      	bne.n	8012b18 <__ssvfiscanf_r+0xec>
 8012b54:	9742      	str	r7, [sp, #264]	; 0x108
 8012b56:	e7f4      	b.n	8012b42 <__ssvfiscanf_r+0x116>
 8012b58:	2b70      	cmp	r3, #112	; 0x70
 8012b5a:	d04b      	beq.n	8012bf4 <__ssvfiscanf_r+0x1c8>
 8012b5c:	d826      	bhi.n	8012bac <__ssvfiscanf_r+0x180>
 8012b5e:	2b6e      	cmp	r3, #110	; 0x6e
 8012b60:	d062      	beq.n	8012c28 <__ssvfiscanf_r+0x1fc>
 8012b62:	d84c      	bhi.n	8012bfe <__ssvfiscanf_r+0x1d2>
 8012b64:	2b69      	cmp	r3, #105	; 0x69
 8012b66:	d1d7      	bne.n	8012b18 <__ssvfiscanf_r+0xec>
 8012b68:	2300      	movs	r3, #0
 8012b6a:	9342      	str	r3, [sp, #264]	; 0x108
 8012b6c:	2303      	movs	r3, #3
 8012b6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8012b70:	6863      	ldr	r3, [r4, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	dd68      	ble.n	8012c48 <__ssvfiscanf_r+0x21c>
 8012b76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b78:	0659      	lsls	r1, r3, #25
 8012b7a:	d407      	bmi.n	8012b8c <__ssvfiscanf_r+0x160>
 8012b7c:	f7ff f83c 	bl	8011bf8 <__locale_ctype_ptr>
 8012b80:	6823      	ldr	r3, [r4, #0]
 8012b82:	781a      	ldrb	r2, [r3, #0]
 8012b84:	4410      	add	r0, r2
 8012b86:	7842      	ldrb	r2, [r0, #1]
 8012b88:	0712      	lsls	r2, r2, #28
 8012b8a:	d464      	bmi.n	8012c56 <__ssvfiscanf_r+0x22a>
 8012b8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012b8e:	2b02      	cmp	r3, #2
 8012b90:	dc73      	bgt.n	8012c7a <__ssvfiscanf_r+0x24e>
 8012b92:	466b      	mov	r3, sp
 8012b94:	4622      	mov	r2, r4
 8012b96:	a941      	add	r1, sp, #260	; 0x104
 8012b98:	4630      	mov	r0, r6
 8012b9a:	f000 f9d7 	bl	8012f4c <_scanf_chars>
 8012b9e:	2801      	cmp	r0, #1
 8012ba0:	f000 8089 	beq.w	8012cb6 <__ssvfiscanf_r+0x28a>
 8012ba4:	2802      	cmp	r0, #2
 8012ba6:	f47f af71 	bne.w	8012a8c <__ssvfiscanf_r+0x60>
 8012baa:	e01d      	b.n	8012be8 <__ssvfiscanf_r+0x1bc>
 8012bac:	2b75      	cmp	r3, #117	; 0x75
 8012bae:	d0d1      	beq.n	8012b54 <__ssvfiscanf_r+0x128>
 8012bb0:	2b78      	cmp	r3, #120	; 0x78
 8012bb2:	d0c0      	beq.n	8012b36 <__ssvfiscanf_r+0x10a>
 8012bb4:	2b73      	cmp	r3, #115	; 0x73
 8012bb6:	d1af      	bne.n	8012b18 <__ssvfiscanf_r+0xec>
 8012bb8:	2302      	movs	r3, #2
 8012bba:	e7d8      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012bbc:	6863      	ldr	r3, [r4, #4]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	dd0c      	ble.n	8012bdc <__ssvfiscanf_r+0x1b0>
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	781a      	ldrb	r2, [r3, #0]
 8012bc6:	455a      	cmp	r2, fp
 8012bc8:	d175      	bne.n	8012cb6 <__ssvfiscanf_r+0x28a>
 8012bca:	3301      	adds	r3, #1
 8012bcc:	6862      	ldr	r2, [r4, #4]
 8012bce:	6023      	str	r3, [r4, #0]
 8012bd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012bd2:	3a01      	subs	r2, #1
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	6062      	str	r2, [r4, #4]
 8012bd8:	9345      	str	r3, [sp, #276]	; 0x114
 8012bda:	e757      	b.n	8012a8c <__ssvfiscanf_r+0x60>
 8012bdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012bde:	4621      	mov	r1, r4
 8012be0:	4630      	mov	r0, r6
 8012be2:	4798      	blx	r3
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d0ec      	beq.n	8012bc2 <__ssvfiscanf_r+0x196>
 8012be8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d159      	bne.n	8012ca2 <__ssvfiscanf_r+0x276>
 8012bee:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf2:	e05c      	b.n	8012cae <__ssvfiscanf_r+0x282>
 8012bf4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012bf6:	f042 0220 	orr.w	r2, r2, #32
 8012bfa:	9241      	str	r2, [sp, #260]	; 0x104
 8012bfc:	e79b      	b.n	8012b36 <__ssvfiscanf_r+0x10a>
 8012bfe:	2308      	movs	r3, #8
 8012c00:	9342      	str	r3, [sp, #264]	; 0x108
 8012c02:	2304      	movs	r3, #4
 8012c04:	e7b3      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012c06:	4629      	mov	r1, r5
 8012c08:	4640      	mov	r0, r8
 8012c0a:	f000 fb4f 	bl	80132ac <__sccl>
 8012c0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c14:	9341      	str	r3, [sp, #260]	; 0x104
 8012c16:	4605      	mov	r5, r0
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e7a8      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012c1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c22:	9341      	str	r3, [sp, #260]	; 0x104
 8012c24:	2300      	movs	r3, #0
 8012c26:	e7a2      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012c28:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012c2a:	06c3      	lsls	r3, r0, #27
 8012c2c:	f53f af2e 	bmi.w	8012a8c <__ssvfiscanf_r+0x60>
 8012c30:	9b00      	ldr	r3, [sp, #0]
 8012c32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012c34:	1d19      	adds	r1, r3, #4
 8012c36:	9100      	str	r1, [sp, #0]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	07c0      	lsls	r0, r0, #31
 8012c3c:	bf4c      	ite	mi
 8012c3e:	801a      	strhmi	r2, [r3, #0]
 8012c40:	601a      	strpl	r2, [r3, #0]
 8012c42:	e723      	b.n	8012a8c <__ssvfiscanf_r+0x60>
 8012c44:	2305      	movs	r3, #5
 8012c46:	e792      	b.n	8012b6e <__ssvfiscanf_r+0x142>
 8012c48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	4798      	blx	r3
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d090      	beq.n	8012b76 <__ssvfiscanf_r+0x14a>
 8012c54:	e7c8      	b.n	8012be8 <__ssvfiscanf_r+0x1bc>
 8012c56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012c58:	3201      	adds	r2, #1
 8012c5a:	9245      	str	r2, [sp, #276]	; 0x114
 8012c5c:	6862      	ldr	r2, [r4, #4]
 8012c5e:	3a01      	subs	r2, #1
 8012c60:	2a00      	cmp	r2, #0
 8012c62:	6062      	str	r2, [r4, #4]
 8012c64:	dd02      	ble.n	8012c6c <__ssvfiscanf_r+0x240>
 8012c66:	3301      	adds	r3, #1
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	e787      	b.n	8012b7c <__ssvfiscanf_r+0x150>
 8012c6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c6e:	4621      	mov	r1, r4
 8012c70:	4630      	mov	r0, r6
 8012c72:	4798      	blx	r3
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d081      	beq.n	8012b7c <__ssvfiscanf_r+0x150>
 8012c78:	e7b6      	b.n	8012be8 <__ssvfiscanf_r+0x1bc>
 8012c7a:	2b04      	cmp	r3, #4
 8012c7c:	dc06      	bgt.n	8012c8c <__ssvfiscanf_r+0x260>
 8012c7e:	466b      	mov	r3, sp
 8012c80:	4622      	mov	r2, r4
 8012c82:	a941      	add	r1, sp, #260	; 0x104
 8012c84:	4630      	mov	r0, r6
 8012c86:	f000 f9c5 	bl	8013014 <_scanf_i>
 8012c8a:	e788      	b.n	8012b9e <__ssvfiscanf_r+0x172>
 8012c8c:	4b0e      	ldr	r3, [pc, #56]	; (8012cc8 <__ssvfiscanf_r+0x29c>)
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f43f aefc 	beq.w	8012a8c <__ssvfiscanf_r+0x60>
 8012c94:	466b      	mov	r3, sp
 8012c96:	4622      	mov	r2, r4
 8012c98:	a941      	add	r1, sp, #260	; 0x104
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7fc f9f0 	bl	800f080 <_scanf_float>
 8012ca0:	e77d      	b.n	8012b9e <__ssvfiscanf_r+0x172>
 8012ca2:	89a3      	ldrh	r3, [r4, #12]
 8012ca4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012ca8:	bf18      	it	ne
 8012caa:	f04f 30ff 	movne.w	r0, #4294967295
 8012cae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012cb8:	e7f9      	b.n	8012cae <__ssvfiscanf_r+0x282>
 8012cba:	bf00      	nop
 8012cbc:	08012979 	.word	0x08012979
 8012cc0:	080129f3 	.word	0x080129f3
 8012cc4:	08013d5a 	.word	0x08013d5a
 8012cc8:	0800f081 	.word	0x0800f081

08012ccc <__sfputc_r>:
 8012ccc:	6893      	ldr	r3, [r2, #8]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	b410      	push	{r4}
 8012cd4:	6093      	str	r3, [r2, #8]
 8012cd6:	da08      	bge.n	8012cea <__sfputc_r+0x1e>
 8012cd8:	6994      	ldr	r4, [r2, #24]
 8012cda:	42a3      	cmp	r3, r4
 8012cdc:	db01      	blt.n	8012ce2 <__sfputc_r+0x16>
 8012cde:	290a      	cmp	r1, #10
 8012ce0:	d103      	bne.n	8012cea <__sfputc_r+0x1e>
 8012ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ce6:	f7fd bbbd 	b.w	8010464 <__swbuf_r>
 8012cea:	6813      	ldr	r3, [r2, #0]
 8012cec:	1c58      	adds	r0, r3, #1
 8012cee:	6010      	str	r0, [r2, #0]
 8012cf0:	7019      	strb	r1, [r3, #0]
 8012cf2:	4608      	mov	r0, r1
 8012cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <__sfputs_r>:
 8012cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cfc:	4606      	mov	r6, r0
 8012cfe:	460f      	mov	r7, r1
 8012d00:	4614      	mov	r4, r2
 8012d02:	18d5      	adds	r5, r2, r3
 8012d04:	42ac      	cmp	r4, r5
 8012d06:	d101      	bne.n	8012d0c <__sfputs_r+0x12>
 8012d08:	2000      	movs	r0, #0
 8012d0a:	e007      	b.n	8012d1c <__sfputs_r+0x22>
 8012d0c:	463a      	mov	r2, r7
 8012d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ff ffda 	bl	8012ccc <__sfputc_r>
 8012d18:	1c43      	adds	r3, r0, #1
 8012d1a:	d1f3      	bne.n	8012d04 <__sfputs_r+0xa>
 8012d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d20 <_vfiprintf_r>:
 8012d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	460c      	mov	r4, r1
 8012d26:	b09d      	sub	sp, #116	; 0x74
 8012d28:	4617      	mov	r7, r2
 8012d2a:	461d      	mov	r5, r3
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	b118      	cbz	r0, 8012d38 <_vfiprintf_r+0x18>
 8012d30:	6983      	ldr	r3, [r0, #24]
 8012d32:	b90b      	cbnz	r3, 8012d38 <_vfiprintf_r+0x18>
 8012d34:	f7fe fbac 	bl	8011490 <__sinit>
 8012d38:	4b7c      	ldr	r3, [pc, #496]	; (8012f2c <_vfiprintf_r+0x20c>)
 8012d3a:	429c      	cmp	r4, r3
 8012d3c:	d158      	bne.n	8012df0 <_vfiprintf_r+0xd0>
 8012d3e:	6874      	ldr	r4, [r6, #4]
 8012d40:	89a3      	ldrh	r3, [r4, #12]
 8012d42:	0718      	lsls	r0, r3, #28
 8012d44:	d55e      	bpl.n	8012e04 <_vfiprintf_r+0xe4>
 8012d46:	6923      	ldr	r3, [r4, #16]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d05b      	beq.n	8012e04 <_vfiprintf_r+0xe4>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d50:	2320      	movs	r3, #32
 8012d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d56:	2330      	movs	r3, #48	; 0x30
 8012d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d5c:	9503      	str	r5, [sp, #12]
 8012d5e:	f04f 0b01 	mov.w	fp, #1
 8012d62:	46b8      	mov	r8, r7
 8012d64:	4645      	mov	r5, r8
 8012d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012d6a:	b10b      	cbz	r3, 8012d70 <_vfiprintf_r+0x50>
 8012d6c:	2b25      	cmp	r3, #37	; 0x25
 8012d6e:	d154      	bne.n	8012e1a <_vfiprintf_r+0xfa>
 8012d70:	ebb8 0a07 	subs.w	sl, r8, r7
 8012d74:	d00b      	beq.n	8012d8e <_vfiprintf_r+0x6e>
 8012d76:	4653      	mov	r3, sl
 8012d78:	463a      	mov	r2, r7
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f7ff ffbc 	bl	8012cfa <__sfputs_r>
 8012d82:	3001      	adds	r0, #1
 8012d84:	f000 80c2 	beq.w	8012f0c <_vfiprintf_r+0x1ec>
 8012d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d8a:	4453      	add	r3, sl
 8012d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d8e:	f898 3000 	ldrb.w	r3, [r8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f000 80ba 	beq.w	8012f0c <_vfiprintf_r+0x1ec>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012da2:	9304      	str	r3, [sp, #16]
 8012da4:	9307      	str	r3, [sp, #28]
 8012da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012daa:	931a      	str	r3, [sp, #104]	; 0x68
 8012dac:	46a8      	mov	r8, r5
 8012dae:	2205      	movs	r2, #5
 8012db0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012db4:	485e      	ldr	r0, [pc, #376]	; (8012f30 <_vfiprintf_r+0x210>)
 8012db6:	f7ed fa2b 	bl	8000210 <memchr>
 8012dba:	9b04      	ldr	r3, [sp, #16]
 8012dbc:	bb78      	cbnz	r0, 8012e1e <_vfiprintf_r+0xfe>
 8012dbe:	06d9      	lsls	r1, r3, #27
 8012dc0:	bf44      	itt	mi
 8012dc2:	2220      	movmi	r2, #32
 8012dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012dc8:	071a      	lsls	r2, r3, #28
 8012dca:	bf44      	itt	mi
 8012dcc:	222b      	movmi	r2, #43	; 0x2b
 8012dce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012dd2:	782a      	ldrb	r2, [r5, #0]
 8012dd4:	2a2a      	cmp	r2, #42	; 0x2a
 8012dd6:	d02a      	beq.n	8012e2e <_vfiprintf_r+0x10e>
 8012dd8:	9a07      	ldr	r2, [sp, #28]
 8012dda:	46a8      	mov	r8, r5
 8012ddc:	2000      	movs	r0, #0
 8012dde:	250a      	movs	r5, #10
 8012de0:	4641      	mov	r1, r8
 8012de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012de6:	3b30      	subs	r3, #48	; 0x30
 8012de8:	2b09      	cmp	r3, #9
 8012dea:	d969      	bls.n	8012ec0 <_vfiprintf_r+0x1a0>
 8012dec:	b360      	cbz	r0, 8012e48 <_vfiprintf_r+0x128>
 8012dee:	e024      	b.n	8012e3a <_vfiprintf_r+0x11a>
 8012df0:	4b50      	ldr	r3, [pc, #320]	; (8012f34 <_vfiprintf_r+0x214>)
 8012df2:	429c      	cmp	r4, r3
 8012df4:	d101      	bne.n	8012dfa <_vfiprintf_r+0xda>
 8012df6:	68b4      	ldr	r4, [r6, #8]
 8012df8:	e7a2      	b.n	8012d40 <_vfiprintf_r+0x20>
 8012dfa:	4b4f      	ldr	r3, [pc, #316]	; (8012f38 <_vfiprintf_r+0x218>)
 8012dfc:	429c      	cmp	r4, r3
 8012dfe:	bf08      	it	eq
 8012e00:	68f4      	ldreq	r4, [r6, #12]
 8012e02:	e79d      	b.n	8012d40 <_vfiprintf_r+0x20>
 8012e04:	4621      	mov	r1, r4
 8012e06:	4630      	mov	r0, r6
 8012e08:	f7fd fb90 	bl	801052c <__swsetup_r>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d09d      	beq.n	8012d4c <_vfiprintf_r+0x2c>
 8012e10:	f04f 30ff 	mov.w	r0, #4294967295
 8012e14:	b01d      	add	sp, #116	; 0x74
 8012e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1a:	46a8      	mov	r8, r5
 8012e1c:	e7a2      	b.n	8012d64 <_vfiprintf_r+0x44>
 8012e1e:	4a44      	ldr	r2, [pc, #272]	; (8012f30 <_vfiprintf_r+0x210>)
 8012e20:	1a80      	subs	r0, r0, r2
 8012e22:	fa0b f000 	lsl.w	r0, fp, r0
 8012e26:	4318      	orrs	r0, r3
 8012e28:	9004      	str	r0, [sp, #16]
 8012e2a:	4645      	mov	r5, r8
 8012e2c:	e7be      	b.n	8012dac <_vfiprintf_r+0x8c>
 8012e2e:	9a03      	ldr	r2, [sp, #12]
 8012e30:	1d11      	adds	r1, r2, #4
 8012e32:	6812      	ldr	r2, [r2, #0]
 8012e34:	9103      	str	r1, [sp, #12]
 8012e36:	2a00      	cmp	r2, #0
 8012e38:	db01      	blt.n	8012e3e <_vfiprintf_r+0x11e>
 8012e3a:	9207      	str	r2, [sp, #28]
 8012e3c:	e004      	b.n	8012e48 <_vfiprintf_r+0x128>
 8012e3e:	4252      	negs	r2, r2
 8012e40:	f043 0302 	orr.w	r3, r3, #2
 8012e44:	9207      	str	r2, [sp, #28]
 8012e46:	9304      	str	r3, [sp, #16]
 8012e48:	f898 3000 	ldrb.w	r3, [r8]
 8012e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e4e:	d10e      	bne.n	8012e6e <_vfiprintf_r+0x14e>
 8012e50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012e54:	2b2a      	cmp	r3, #42	; 0x2a
 8012e56:	d138      	bne.n	8012eca <_vfiprintf_r+0x1aa>
 8012e58:	9b03      	ldr	r3, [sp, #12]
 8012e5a:	1d1a      	adds	r2, r3, #4
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	9203      	str	r2, [sp, #12]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	bfb8      	it	lt
 8012e64:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e68:	f108 0802 	add.w	r8, r8, #2
 8012e6c:	9305      	str	r3, [sp, #20]
 8012e6e:	4d33      	ldr	r5, [pc, #204]	; (8012f3c <_vfiprintf_r+0x21c>)
 8012e70:	f898 1000 	ldrb.w	r1, [r8]
 8012e74:	2203      	movs	r2, #3
 8012e76:	4628      	mov	r0, r5
 8012e78:	f7ed f9ca 	bl	8000210 <memchr>
 8012e7c:	b140      	cbz	r0, 8012e90 <_vfiprintf_r+0x170>
 8012e7e:	2340      	movs	r3, #64	; 0x40
 8012e80:	1b40      	subs	r0, r0, r5
 8012e82:	fa03 f000 	lsl.w	r0, r3, r0
 8012e86:	9b04      	ldr	r3, [sp, #16]
 8012e88:	4303      	orrs	r3, r0
 8012e8a:	f108 0801 	add.w	r8, r8, #1
 8012e8e:	9304      	str	r3, [sp, #16]
 8012e90:	f898 1000 	ldrb.w	r1, [r8]
 8012e94:	482a      	ldr	r0, [pc, #168]	; (8012f40 <_vfiprintf_r+0x220>)
 8012e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e9a:	2206      	movs	r2, #6
 8012e9c:	f108 0701 	add.w	r7, r8, #1
 8012ea0:	f7ed f9b6 	bl	8000210 <memchr>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d037      	beq.n	8012f18 <_vfiprintf_r+0x1f8>
 8012ea8:	4b26      	ldr	r3, [pc, #152]	; (8012f44 <_vfiprintf_r+0x224>)
 8012eaa:	bb1b      	cbnz	r3, 8012ef4 <_vfiprintf_r+0x1d4>
 8012eac:	9b03      	ldr	r3, [sp, #12]
 8012eae:	3307      	adds	r3, #7
 8012eb0:	f023 0307 	bic.w	r3, r3, #7
 8012eb4:	3308      	adds	r3, #8
 8012eb6:	9303      	str	r3, [sp, #12]
 8012eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eba:	444b      	add	r3, r9
 8012ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8012ebe:	e750      	b.n	8012d62 <_vfiprintf_r+0x42>
 8012ec0:	fb05 3202 	mla	r2, r5, r2, r3
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	4688      	mov	r8, r1
 8012ec8:	e78a      	b.n	8012de0 <_vfiprintf_r+0xc0>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	f108 0801 	add.w	r8, r8, #1
 8012ed0:	9305      	str	r3, [sp, #20]
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	250a      	movs	r5, #10
 8012ed6:	4640      	mov	r0, r8
 8012ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012edc:	3a30      	subs	r2, #48	; 0x30
 8012ede:	2a09      	cmp	r2, #9
 8012ee0:	d903      	bls.n	8012eea <_vfiprintf_r+0x1ca>
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d0c3      	beq.n	8012e6e <_vfiprintf_r+0x14e>
 8012ee6:	9105      	str	r1, [sp, #20]
 8012ee8:	e7c1      	b.n	8012e6e <_vfiprintf_r+0x14e>
 8012eea:	fb05 2101 	mla	r1, r5, r1, r2
 8012eee:	2301      	movs	r3, #1
 8012ef0:	4680      	mov	r8, r0
 8012ef2:	e7f0      	b.n	8012ed6 <_vfiprintf_r+0x1b6>
 8012ef4:	ab03      	add	r3, sp, #12
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	4622      	mov	r2, r4
 8012efa:	4b13      	ldr	r3, [pc, #76]	; (8012f48 <_vfiprintf_r+0x228>)
 8012efc:	a904      	add	r1, sp, #16
 8012efe:	4630      	mov	r0, r6
 8012f00:	f7fb fcf6 	bl	800e8f0 <_printf_float>
 8012f04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012f08:	4681      	mov	r9, r0
 8012f0a:	d1d5      	bne.n	8012eb8 <_vfiprintf_r+0x198>
 8012f0c:	89a3      	ldrh	r3, [r4, #12]
 8012f0e:	065b      	lsls	r3, r3, #25
 8012f10:	f53f af7e 	bmi.w	8012e10 <_vfiprintf_r+0xf0>
 8012f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f16:	e77d      	b.n	8012e14 <_vfiprintf_r+0xf4>
 8012f18:	ab03      	add	r3, sp, #12
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	4622      	mov	r2, r4
 8012f1e:	4b0a      	ldr	r3, [pc, #40]	; (8012f48 <_vfiprintf_r+0x228>)
 8012f20:	a904      	add	r1, sp, #16
 8012f22:	4630      	mov	r0, r6
 8012f24:	f7fb ff9a 	bl	800ee5c <_printf_i>
 8012f28:	e7ec      	b.n	8012f04 <_vfiprintf_r+0x1e4>
 8012f2a:	bf00      	nop
 8012f2c:	08013c08 	.word	0x08013c08
 8012f30:	08013d54 	.word	0x08013d54
 8012f34:	08013c28 	.word	0x08013c28
 8012f38:	08013be8 	.word	0x08013be8
 8012f3c:	08013d5a 	.word	0x08013d5a
 8012f40:	08013d5e 	.word	0x08013d5e
 8012f44:	0800e8f1 	.word	0x0800e8f1
 8012f48:	08012cfb 	.word	0x08012cfb

08012f4c <_scanf_chars>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4615      	mov	r5, r2
 8012f52:	688a      	ldr	r2, [r1, #8]
 8012f54:	4680      	mov	r8, r0
 8012f56:	460c      	mov	r4, r1
 8012f58:	b932      	cbnz	r2, 8012f68 <_scanf_chars+0x1c>
 8012f5a:	698a      	ldr	r2, [r1, #24]
 8012f5c:	2a00      	cmp	r2, #0
 8012f5e:	bf14      	ite	ne
 8012f60:	f04f 32ff 	movne.w	r2, #4294967295
 8012f64:	2201      	moveq	r2, #1
 8012f66:	608a      	str	r2, [r1, #8]
 8012f68:	6822      	ldr	r2, [r4, #0]
 8012f6a:	06d1      	lsls	r1, r2, #27
 8012f6c:	bf5f      	itttt	pl
 8012f6e:	681a      	ldrpl	r2, [r3, #0]
 8012f70:	1d11      	addpl	r1, r2, #4
 8012f72:	6019      	strpl	r1, [r3, #0]
 8012f74:	6817      	ldrpl	r7, [r2, #0]
 8012f76:	2600      	movs	r6, #0
 8012f78:	69a3      	ldr	r3, [r4, #24]
 8012f7a:	b1db      	cbz	r3, 8012fb4 <_scanf_chars+0x68>
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d107      	bne.n	8012f90 <_scanf_chars+0x44>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	6962      	ldr	r2, [r4, #20]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	5cd3      	ldrb	r3, [r2, r3]
 8012f88:	b9a3      	cbnz	r3, 8012fb4 <_scanf_chars+0x68>
 8012f8a:	2e00      	cmp	r6, #0
 8012f8c:	d132      	bne.n	8012ff4 <_scanf_chars+0xa8>
 8012f8e:	e006      	b.n	8012f9e <_scanf_chars+0x52>
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d007      	beq.n	8012fa4 <_scanf_chars+0x58>
 8012f94:	2e00      	cmp	r6, #0
 8012f96:	d12d      	bne.n	8012ff4 <_scanf_chars+0xa8>
 8012f98:	69a3      	ldr	r3, [r4, #24]
 8012f9a:	2b01      	cmp	r3, #1
 8012f9c:	d12a      	bne.n	8012ff4 <_scanf_chars+0xa8>
 8012f9e:	2001      	movs	r0, #1
 8012fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa4:	f7fe fe28 	bl	8011bf8 <__locale_ctype_ptr>
 8012fa8:	682b      	ldr	r3, [r5, #0]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	4418      	add	r0, r3
 8012fae:	7843      	ldrb	r3, [r0, #1]
 8012fb0:	071b      	lsls	r3, r3, #28
 8012fb2:	d4ef      	bmi.n	8012f94 <_scanf_chars+0x48>
 8012fb4:	6823      	ldr	r3, [r4, #0]
 8012fb6:	06da      	lsls	r2, r3, #27
 8012fb8:	bf5e      	ittt	pl
 8012fba:	682b      	ldrpl	r3, [r5, #0]
 8012fbc:	781b      	ldrbpl	r3, [r3, #0]
 8012fbe:	703b      	strbpl	r3, [r7, #0]
 8012fc0:	682a      	ldr	r2, [r5, #0]
 8012fc2:	686b      	ldr	r3, [r5, #4]
 8012fc4:	f102 0201 	add.w	r2, r2, #1
 8012fc8:	602a      	str	r2, [r5, #0]
 8012fca:	68a2      	ldr	r2, [r4, #8]
 8012fcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8012fd0:	f102 32ff 	add.w	r2, r2, #4294967295
 8012fd4:	606b      	str	r3, [r5, #4]
 8012fd6:	f106 0601 	add.w	r6, r6, #1
 8012fda:	bf58      	it	pl
 8012fdc:	3701      	addpl	r7, #1
 8012fde:	60a2      	str	r2, [r4, #8]
 8012fe0:	b142      	cbz	r2, 8012ff4 <_scanf_chars+0xa8>
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	dcc8      	bgt.n	8012f78 <_scanf_chars+0x2c>
 8012fe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012fea:	4629      	mov	r1, r5
 8012fec:	4640      	mov	r0, r8
 8012fee:	4798      	blx	r3
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	d0c1      	beq.n	8012f78 <_scanf_chars+0x2c>
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	f013 0310 	ands.w	r3, r3, #16
 8012ffa:	d105      	bne.n	8013008 <_scanf_chars+0xbc>
 8012ffc:	68e2      	ldr	r2, [r4, #12]
 8012ffe:	3201      	adds	r2, #1
 8013000:	60e2      	str	r2, [r4, #12]
 8013002:	69a2      	ldr	r2, [r4, #24]
 8013004:	b102      	cbz	r2, 8013008 <_scanf_chars+0xbc>
 8013006:	703b      	strb	r3, [r7, #0]
 8013008:	6923      	ldr	r3, [r4, #16]
 801300a:	441e      	add	r6, r3
 801300c:	6126      	str	r6, [r4, #16]
 801300e:	2000      	movs	r0, #0
 8013010:	e7c6      	b.n	8012fa0 <_scanf_chars+0x54>
	...

08013014 <_scanf_i>:
 8013014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013018:	469a      	mov	sl, r3
 801301a:	4b74      	ldr	r3, [pc, #464]	; (80131ec <_scanf_i+0x1d8>)
 801301c:	460c      	mov	r4, r1
 801301e:	4683      	mov	fp, r0
 8013020:	4616      	mov	r6, r2
 8013022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013026:	b087      	sub	sp, #28
 8013028:	ab03      	add	r3, sp, #12
 801302a:	68a7      	ldr	r7, [r4, #8]
 801302c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013030:	4b6f      	ldr	r3, [pc, #444]	; (80131f0 <_scanf_i+0x1dc>)
 8013032:	69a1      	ldr	r1, [r4, #24]
 8013034:	4a6f      	ldr	r2, [pc, #444]	; (80131f4 <_scanf_i+0x1e0>)
 8013036:	2903      	cmp	r1, #3
 8013038:	bf08      	it	eq
 801303a:	461a      	moveq	r2, r3
 801303c:	1e7b      	subs	r3, r7, #1
 801303e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013042:	bf84      	itt	hi
 8013044:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013048:	60a3      	strhi	r3, [r4, #8]
 801304a:	6823      	ldr	r3, [r4, #0]
 801304c:	9200      	str	r2, [sp, #0]
 801304e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013052:	bf88      	it	hi
 8013054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013058:	f104 091c 	add.w	r9, r4, #28
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	bf8c      	ite	hi
 8013060:	197f      	addhi	r7, r7, r5
 8013062:	2700      	movls	r7, #0
 8013064:	464b      	mov	r3, r9
 8013066:	f04f 0800 	mov.w	r8, #0
 801306a:	9301      	str	r3, [sp, #4]
 801306c:	6831      	ldr	r1, [r6, #0]
 801306e:	ab03      	add	r3, sp, #12
 8013070:	2202      	movs	r2, #2
 8013072:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013076:	7809      	ldrb	r1, [r1, #0]
 8013078:	f7ed f8ca 	bl	8000210 <memchr>
 801307c:	9b01      	ldr	r3, [sp, #4]
 801307e:	b330      	cbz	r0, 80130ce <_scanf_i+0xba>
 8013080:	f1b8 0f01 	cmp.w	r8, #1
 8013084:	d15a      	bne.n	801313c <_scanf_i+0x128>
 8013086:	6862      	ldr	r2, [r4, #4]
 8013088:	b92a      	cbnz	r2, 8013096 <_scanf_i+0x82>
 801308a:	6822      	ldr	r2, [r4, #0]
 801308c:	2108      	movs	r1, #8
 801308e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013092:	6061      	str	r1, [r4, #4]
 8013094:	6022      	str	r2, [r4, #0]
 8013096:	6822      	ldr	r2, [r4, #0]
 8013098:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801309c:	6022      	str	r2, [r4, #0]
 801309e:	68a2      	ldr	r2, [r4, #8]
 80130a0:	1e51      	subs	r1, r2, #1
 80130a2:	60a1      	str	r1, [r4, #8]
 80130a4:	b19a      	cbz	r2, 80130ce <_scanf_i+0xba>
 80130a6:	6832      	ldr	r2, [r6, #0]
 80130a8:	1c51      	adds	r1, r2, #1
 80130aa:	6031      	str	r1, [r6, #0]
 80130ac:	7812      	ldrb	r2, [r2, #0]
 80130ae:	701a      	strb	r2, [r3, #0]
 80130b0:	1c5d      	adds	r5, r3, #1
 80130b2:	6873      	ldr	r3, [r6, #4]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	6073      	str	r3, [r6, #4]
 80130ba:	dc07      	bgt.n	80130cc <_scanf_i+0xb8>
 80130bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80130c0:	4631      	mov	r1, r6
 80130c2:	4658      	mov	r0, fp
 80130c4:	4798      	blx	r3
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f040 8086 	bne.w	80131d8 <_scanf_i+0x1c4>
 80130cc:	462b      	mov	r3, r5
 80130ce:	f108 0801 	add.w	r8, r8, #1
 80130d2:	f1b8 0f03 	cmp.w	r8, #3
 80130d6:	d1c8      	bne.n	801306a <_scanf_i+0x56>
 80130d8:	6862      	ldr	r2, [r4, #4]
 80130da:	b90a      	cbnz	r2, 80130e0 <_scanf_i+0xcc>
 80130dc:	220a      	movs	r2, #10
 80130de:	6062      	str	r2, [r4, #4]
 80130e0:	6862      	ldr	r2, [r4, #4]
 80130e2:	4945      	ldr	r1, [pc, #276]	; (80131f8 <_scanf_i+0x1e4>)
 80130e4:	6960      	ldr	r0, [r4, #20]
 80130e6:	9301      	str	r3, [sp, #4]
 80130e8:	1a89      	subs	r1, r1, r2
 80130ea:	f000 f8df 	bl	80132ac <__sccl>
 80130ee:	9b01      	ldr	r3, [sp, #4]
 80130f0:	f04f 0800 	mov.w	r8, #0
 80130f4:	461d      	mov	r5, r3
 80130f6:	68a3      	ldr	r3, [r4, #8]
 80130f8:	6822      	ldr	r2, [r4, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d03a      	beq.n	8013174 <_scanf_i+0x160>
 80130fe:	6831      	ldr	r1, [r6, #0]
 8013100:	6960      	ldr	r0, [r4, #20]
 8013102:	f891 c000 	ldrb.w	ip, [r1]
 8013106:	f810 000c 	ldrb.w	r0, [r0, ip]
 801310a:	2800      	cmp	r0, #0
 801310c:	d032      	beq.n	8013174 <_scanf_i+0x160>
 801310e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013112:	d121      	bne.n	8013158 <_scanf_i+0x144>
 8013114:	0510      	lsls	r0, r2, #20
 8013116:	d51f      	bpl.n	8013158 <_scanf_i+0x144>
 8013118:	f108 0801 	add.w	r8, r8, #1
 801311c:	b117      	cbz	r7, 8013124 <_scanf_i+0x110>
 801311e:	3301      	adds	r3, #1
 8013120:	3f01      	subs	r7, #1
 8013122:	60a3      	str	r3, [r4, #8]
 8013124:	6873      	ldr	r3, [r6, #4]
 8013126:	3b01      	subs	r3, #1
 8013128:	2b00      	cmp	r3, #0
 801312a:	6073      	str	r3, [r6, #4]
 801312c:	dd1b      	ble.n	8013166 <_scanf_i+0x152>
 801312e:	6833      	ldr	r3, [r6, #0]
 8013130:	3301      	adds	r3, #1
 8013132:	6033      	str	r3, [r6, #0]
 8013134:	68a3      	ldr	r3, [r4, #8]
 8013136:	3b01      	subs	r3, #1
 8013138:	60a3      	str	r3, [r4, #8]
 801313a:	e7dc      	b.n	80130f6 <_scanf_i+0xe2>
 801313c:	f1b8 0f02 	cmp.w	r8, #2
 8013140:	d1ad      	bne.n	801309e <_scanf_i+0x8a>
 8013142:	6822      	ldr	r2, [r4, #0]
 8013144:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013148:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801314c:	d1bf      	bne.n	80130ce <_scanf_i+0xba>
 801314e:	2110      	movs	r1, #16
 8013150:	6061      	str	r1, [r4, #4]
 8013152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013156:	e7a1      	b.n	801309c <_scanf_i+0x88>
 8013158:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801315c:	6022      	str	r2, [r4, #0]
 801315e:	780b      	ldrb	r3, [r1, #0]
 8013160:	702b      	strb	r3, [r5, #0]
 8013162:	3501      	adds	r5, #1
 8013164:	e7de      	b.n	8013124 <_scanf_i+0x110>
 8013166:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801316a:	4631      	mov	r1, r6
 801316c:	4658      	mov	r0, fp
 801316e:	4798      	blx	r3
 8013170:	2800      	cmp	r0, #0
 8013172:	d0df      	beq.n	8013134 <_scanf_i+0x120>
 8013174:	6823      	ldr	r3, [r4, #0]
 8013176:	05d9      	lsls	r1, r3, #23
 8013178:	d50c      	bpl.n	8013194 <_scanf_i+0x180>
 801317a:	454d      	cmp	r5, r9
 801317c:	d908      	bls.n	8013190 <_scanf_i+0x17c>
 801317e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013186:	4632      	mov	r2, r6
 8013188:	4658      	mov	r0, fp
 801318a:	4798      	blx	r3
 801318c:	1e6f      	subs	r7, r5, #1
 801318e:	463d      	mov	r5, r7
 8013190:	454d      	cmp	r5, r9
 8013192:	d029      	beq.n	80131e8 <_scanf_i+0x1d4>
 8013194:	6822      	ldr	r2, [r4, #0]
 8013196:	f012 0210 	ands.w	r2, r2, #16
 801319a:	d113      	bne.n	80131c4 <_scanf_i+0x1b0>
 801319c:	702a      	strb	r2, [r5, #0]
 801319e:	6863      	ldr	r3, [r4, #4]
 80131a0:	9e00      	ldr	r6, [sp, #0]
 80131a2:	4649      	mov	r1, r9
 80131a4:	4658      	mov	r0, fp
 80131a6:	47b0      	blx	r6
 80131a8:	f8da 3000 	ldr.w	r3, [sl]
 80131ac:	6821      	ldr	r1, [r4, #0]
 80131ae:	1d1a      	adds	r2, r3, #4
 80131b0:	f8ca 2000 	str.w	r2, [sl]
 80131b4:	f011 0f20 	tst.w	r1, #32
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	d010      	beq.n	80131de <_scanf_i+0x1ca>
 80131bc:	6018      	str	r0, [r3, #0]
 80131be:	68e3      	ldr	r3, [r4, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60e3      	str	r3, [r4, #12]
 80131c4:	eba5 0509 	sub.w	r5, r5, r9
 80131c8:	44a8      	add	r8, r5
 80131ca:	6925      	ldr	r5, [r4, #16]
 80131cc:	4445      	add	r5, r8
 80131ce:	6125      	str	r5, [r4, #16]
 80131d0:	2000      	movs	r0, #0
 80131d2:	b007      	add	sp, #28
 80131d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d8:	f04f 0800 	mov.w	r8, #0
 80131dc:	e7ca      	b.n	8013174 <_scanf_i+0x160>
 80131de:	07ca      	lsls	r2, r1, #31
 80131e0:	bf4c      	ite	mi
 80131e2:	8018      	strhmi	r0, [r3, #0]
 80131e4:	6018      	strpl	r0, [r3, #0]
 80131e6:	e7ea      	b.n	80131be <_scanf_i+0x1aa>
 80131e8:	2001      	movs	r0, #1
 80131ea:	e7f2      	b.n	80131d2 <_scanf_i+0x1be>
 80131ec:	080136c8 	.word	0x080136c8
 80131f0:	08010441 	.word	0x08010441
 80131f4:	08013429 	.word	0x08013429
 80131f8:	08013d75 	.word	0x08013d75

080131fc <_putc_r>:
 80131fc:	b570      	push	{r4, r5, r6, lr}
 80131fe:	460d      	mov	r5, r1
 8013200:	4614      	mov	r4, r2
 8013202:	4606      	mov	r6, r0
 8013204:	b118      	cbz	r0, 801320e <_putc_r+0x12>
 8013206:	6983      	ldr	r3, [r0, #24]
 8013208:	b90b      	cbnz	r3, 801320e <_putc_r+0x12>
 801320a:	f7fe f941 	bl	8011490 <__sinit>
 801320e:	4b13      	ldr	r3, [pc, #76]	; (801325c <_putc_r+0x60>)
 8013210:	429c      	cmp	r4, r3
 8013212:	d112      	bne.n	801323a <_putc_r+0x3e>
 8013214:	6874      	ldr	r4, [r6, #4]
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	3b01      	subs	r3, #1
 801321a:	2b00      	cmp	r3, #0
 801321c:	60a3      	str	r3, [r4, #8]
 801321e:	da16      	bge.n	801324e <_putc_r+0x52>
 8013220:	69a2      	ldr	r2, [r4, #24]
 8013222:	4293      	cmp	r3, r2
 8013224:	db02      	blt.n	801322c <_putc_r+0x30>
 8013226:	b2eb      	uxtb	r3, r5
 8013228:	2b0a      	cmp	r3, #10
 801322a:	d110      	bne.n	801324e <_putc_r+0x52>
 801322c:	4622      	mov	r2, r4
 801322e:	4629      	mov	r1, r5
 8013230:	4630      	mov	r0, r6
 8013232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013236:	f7fd b915 	b.w	8010464 <__swbuf_r>
 801323a:	4b09      	ldr	r3, [pc, #36]	; (8013260 <_putc_r+0x64>)
 801323c:	429c      	cmp	r4, r3
 801323e:	d101      	bne.n	8013244 <_putc_r+0x48>
 8013240:	68b4      	ldr	r4, [r6, #8]
 8013242:	e7e8      	b.n	8013216 <_putc_r+0x1a>
 8013244:	4b07      	ldr	r3, [pc, #28]	; (8013264 <_putc_r+0x68>)
 8013246:	429c      	cmp	r4, r3
 8013248:	bf08      	it	eq
 801324a:	68f4      	ldreq	r4, [r6, #12]
 801324c:	e7e3      	b.n	8013216 <_putc_r+0x1a>
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	1c5a      	adds	r2, r3, #1
 8013252:	6022      	str	r2, [r4, #0]
 8013254:	701d      	strb	r5, [r3, #0]
 8013256:	b2e8      	uxtb	r0, r5
 8013258:	bd70      	pop	{r4, r5, r6, pc}
 801325a:	bf00      	nop
 801325c:	08013c08 	.word	0x08013c08
 8013260:	08013c28 	.word	0x08013c28
 8013264:	08013be8 	.word	0x08013be8

08013268 <_read_r>:
 8013268:	b538      	push	{r3, r4, r5, lr}
 801326a:	4c07      	ldr	r4, [pc, #28]	; (8013288 <_read_r+0x20>)
 801326c:	4605      	mov	r5, r0
 801326e:	4608      	mov	r0, r1
 8013270:	4611      	mov	r1, r2
 8013272:	2200      	movs	r2, #0
 8013274:	6022      	str	r2, [r4, #0]
 8013276:	461a      	mov	r2, r3
 8013278:	f7f0 fe0c 	bl	8003e94 <_read>
 801327c:	1c43      	adds	r3, r0, #1
 801327e:	d102      	bne.n	8013286 <_read_r+0x1e>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	b103      	cbz	r3, 8013286 <_read_r+0x1e>
 8013284:	602b      	str	r3, [r5, #0]
 8013286:	bd38      	pop	{r3, r4, r5, pc}
 8013288:	20005084 	.word	0x20005084

0801328c <_sbrk_r>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	4c06      	ldr	r4, [pc, #24]	; (80132a8 <_sbrk_r+0x1c>)
 8013290:	2300      	movs	r3, #0
 8013292:	4605      	mov	r5, r0
 8013294:	4608      	mov	r0, r1
 8013296:	6023      	str	r3, [r4, #0]
 8013298:	f7f0 fe4e 	bl	8003f38 <_sbrk>
 801329c:	1c43      	adds	r3, r0, #1
 801329e:	d102      	bne.n	80132a6 <_sbrk_r+0x1a>
 80132a0:	6823      	ldr	r3, [r4, #0]
 80132a2:	b103      	cbz	r3, 80132a6 <_sbrk_r+0x1a>
 80132a4:	602b      	str	r3, [r5, #0]
 80132a6:	bd38      	pop	{r3, r4, r5, pc}
 80132a8:	20005084 	.word	0x20005084

080132ac <__sccl>:
 80132ac:	b570      	push	{r4, r5, r6, lr}
 80132ae:	780b      	ldrb	r3, [r1, #0]
 80132b0:	2b5e      	cmp	r3, #94	; 0x5e
 80132b2:	bf13      	iteet	ne
 80132b4:	1c4a      	addne	r2, r1, #1
 80132b6:	1c8a      	addeq	r2, r1, #2
 80132b8:	784b      	ldrbeq	r3, [r1, #1]
 80132ba:	2100      	movne	r1, #0
 80132bc:	bf08      	it	eq
 80132be:	2101      	moveq	r1, #1
 80132c0:	1e44      	subs	r4, r0, #1
 80132c2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80132c6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80132ca:	42ac      	cmp	r4, r5
 80132cc:	d1fb      	bne.n	80132c6 <__sccl+0x1a>
 80132ce:	b913      	cbnz	r3, 80132d6 <__sccl+0x2a>
 80132d0:	3a01      	subs	r2, #1
 80132d2:	4610      	mov	r0, r2
 80132d4:	bd70      	pop	{r4, r5, r6, pc}
 80132d6:	f081 0401 	eor.w	r4, r1, #1
 80132da:	54c4      	strb	r4, [r0, r3]
 80132dc:	1c51      	adds	r1, r2, #1
 80132de:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80132e2:	2d2d      	cmp	r5, #45	; 0x2d
 80132e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80132e8:	460a      	mov	r2, r1
 80132ea:	d006      	beq.n	80132fa <__sccl+0x4e>
 80132ec:	2d5d      	cmp	r5, #93	; 0x5d
 80132ee:	d0f0      	beq.n	80132d2 <__sccl+0x26>
 80132f0:	b90d      	cbnz	r5, 80132f6 <__sccl+0x4a>
 80132f2:	4632      	mov	r2, r6
 80132f4:	e7ed      	b.n	80132d2 <__sccl+0x26>
 80132f6:	462b      	mov	r3, r5
 80132f8:	e7ef      	b.n	80132da <__sccl+0x2e>
 80132fa:	780e      	ldrb	r6, [r1, #0]
 80132fc:	2e5d      	cmp	r6, #93	; 0x5d
 80132fe:	d0fa      	beq.n	80132f6 <__sccl+0x4a>
 8013300:	42b3      	cmp	r3, r6
 8013302:	dcf8      	bgt.n	80132f6 <__sccl+0x4a>
 8013304:	3301      	adds	r3, #1
 8013306:	429e      	cmp	r6, r3
 8013308:	54c4      	strb	r4, [r0, r3]
 801330a:	dcfb      	bgt.n	8013304 <__sccl+0x58>
 801330c:	3102      	adds	r1, #2
 801330e:	e7e6      	b.n	80132de <__sccl+0x32>

08013310 <strncmp>:
 8013310:	b510      	push	{r4, lr}
 8013312:	b16a      	cbz	r2, 8013330 <strncmp+0x20>
 8013314:	3901      	subs	r1, #1
 8013316:	1884      	adds	r4, r0, r2
 8013318:	f810 3b01 	ldrb.w	r3, [r0], #1
 801331c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013320:	4293      	cmp	r3, r2
 8013322:	d103      	bne.n	801332c <strncmp+0x1c>
 8013324:	42a0      	cmp	r0, r4
 8013326:	d001      	beq.n	801332c <strncmp+0x1c>
 8013328:	2b00      	cmp	r3, #0
 801332a:	d1f5      	bne.n	8013318 <strncmp+0x8>
 801332c:	1a98      	subs	r0, r3, r2
 801332e:	bd10      	pop	{r4, pc}
 8013330:	4610      	mov	r0, r2
 8013332:	e7fc      	b.n	801332e <strncmp+0x1e>

08013334 <_strtoul_l.isra.0>:
 8013334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013338:	4680      	mov	r8, r0
 801333a:	4689      	mov	r9, r1
 801333c:	4692      	mov	sl, r2
 801333e:	461e      	mov	r6, r3
 8013340:	460f      	mov	r7, r1
 8013342:	463d      	mov	r5, r7
 8013344:	9808      	ldr	r0, [sp, #32]
 8013346:	f815 4b01 	ldrb.w	r4, [r5], #1
 801334a:	f7fe fc51 	bl	8011bf0 <__locale_ctype_ptr_l>
 801334e:	4420      	add	r0, r4
 8013350:	7843      	ldrb	r3, [r0, #1]
 8013352:	f013 0308 	ands.w	r3, r3, #8
 8013356:	d130      	bne.n	80133ba <_strtoul_l.isra.0+0x86>
 8013358:	2c2d      	cmp	r4, #45	; 0x2d
 801335a:	d130      	bne.n	80133be <_strtoul_l.isra.0+0x8a>
 801335c:	787c      	ldrb	r4, [r7, #1]
 801335e:	1cbd      	adds	r5, r7, #2
 8013360:	2101      	movs	r1, #1
 8013362:	2e00      	cmp	r6, #0
 8013364:	d05c      	beq.n	8013420 <_strtoul_l.isra.0+0xec>
 8013366:	2e10      	cmp	r6, #16
 8013368:	d109      	bne.n	801337e <_strtoul_l.isra.0+0x4a>
 801336a:	2c30      	cmp	r4, #48	; 0x30
 801336c:	d107      	bne.n	801337e <_strtoul_l.isra.0+0x4a>
 801336e:	782b      	ldrb	r3, [r5, #0]
 8013370:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013374:	2b58      	cmp	r3, #88	; 0x58
 8013376:	d14e      	bne.n	8013416 <_strtoul_l.isra.0+0xe2>
 8013378:	786c      	ldrb	r4, [r5, #1]
 801337a:	2610      	movs	r6, #16
 801337c:	3502      	adds	r5, #2
 801337e:	f04f 32ff 	mov.w	r2, #4294967295
 8013382:	2300      	movs	r3, #0
 8013384:	fbb2 f2f6 	udiv	r2, r2, r6
 8013388:	fb06 fc02 	mul.w	ip, r6, r2
 801338c:	ea6f 0c0c 	mvn.w	ip, ip
 8013390:	4618      	mov	r0, r3
 8013392:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013396:	2f09      	cmp	r7, #9
 8013398:	d817      	bhi.n	80133ca <_strtoul_l.isra.0+0x96>
 801339a:	463c      	mov	r4, r7
 801339c:	42a6      	cmp	r6, r4
 801339e:	dd23      	ble.n	80133e8 <_strtoul_l.isra.0+0xb4>
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	db1e      	blt.n	80133e2 <_strtoul_l.isra.0+0xae>
 80133a4:	4282      	cmp	r2, r0
 80133a6:	d31c      	bcc.n	80133e2 <_strtoul_l.isra.0+0xae>
 80133a8:	d101      	bne.n	80133ae <_strtoul_l.isra.0+0x7a>
 80133aa:	45a4      	cmp	ip, r4
 80133ac:	db19      	blt.n	80133e2 <_strtoul_l.isra.0+0xae>
 80133ae:	fb00 4006 	mla	r0, r0, r6, r4
 80133b2:	2301      	movs	r3, #1
 80133b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133b8:	e7eb      	b.n	8013392 <_strtoul_l.isra.0+0x5e>
 80133ba:	462f      	mov	r7, r5
 80133bc:	e7c1      	b.n	8013342 <_strtoul_l.isra.0+0xe>
 80133be:	2c2b      	cmp	r4, #43	; 0x2b
 80133c0:	bf04      	itt	eq
 80133c2:	1cbd      	addeq	r5, r7, #2
 80133c4:	787c      	ldrbeq	r4, [r7, #1]
 80133c6:	4619      	mov	r1, r3
 80133c8:	e7cb      	b.n	8013362 <_strtoul_l.isra.0+0x2e>
 80133ca:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80133ce:	2f19      	cmp	r7, #25
 80133d0:	d801      	bhi.n	80133d6 <_strtoul_l.isra.0+0xa2>
 80133d2:	3c37      	subs	r4, #55	; 0x37
 80133d4:	e7e2      	b.n	801339c <_strtoul_l.isra.0+0x68>
 80133d6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80133da:	2f19      	cmp	r7, #25
 80133dc:	d804      	bhi.n	80133e8 <_strtoul_l.isra.0+0xb4>
 80133de:	3c57      	subs	r4, #87	; 0x57
 80133e0:	e7dc      	b.n	801339c <_strtoul_l.isra.0+0x68>
 80133e2:	f04f 33ff 	mov.w	r3, #4294967295
 80133e6:	e7e5      	b.n	80133b4 <_strtoul_l.isra.0+0x80>
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	da09      	bge.n	8013400 <_strtoul_l.isra.0+0xcc>
 80133ec:	2322      	movs	r3, #34	; 0x22
 80133ee:	f8c8 3000 	str.w	r3, [r8]
 80133f2:	f04f 30ff 	mov.w	r0, #4294967295
 80133f6:	f1ba 0f00 	cmp.w	sl, #0
 80133fa:	d107      	bne.n	801340c <_strtoul_l.isra.0+0xd8>
 80133fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013400:	b101      	cbz	r1, 8013404 <_strtoul_l.isra.0+0xd0>
 8013402:	4240      	negs	r0, r0
 8013404:	f1ba 0f00 	cmp.w	sl, #0
 8013408:	d0f8      	beq.n	80133fc <_strtoul_l.isra.0+0xc8>
 801340a:	b10b      	cbz	r3, 8013410 <_strtoul_l.isra.0+0xdc>
 801340c:	f105 39ff 	add.w	r9, r5, #4294967295
 8013410:	f8ca 9000 	str.w	r9, [sl]
 8013414:	e7f2      	b.n	80133fc <_strtoul_l.isra.0+0xc8>
 8013416:	2430      	movs	r4, #48	; 0x30
 8013418:	2e00      	cmp	r6, #0
 801341a:	d1b0      	bne.n	801337e <_strtoul_l.isra.0+0x4a>
 801341c:	2608      	movs	r6, #8
 801341e:	e7ae      	b.n	801337e <_strtoul_l.isra.0+0x4a>
 8013420:	2c30      	cmp	r4, #48	; 0x30
 8013422:	d0a4      	beq.n	801336e <_strtoul_l.isra.0+0x3a>
 8013424:	260a      	movs	r6, #10
 8013426:	e7aa      	b.n	801337e <_strtoul_l.isra.0+0x4a>

08013428 <_strtoul_r>:
 8013428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801342a:	4c06      	ldr	r4, [pc, #24]	; (8013444 <_strtoul_r+0x1c>)
 801342c:	4d06      	ldr	r5, [pc, #24]	; (8013448 <_strtoul_r+0x20>)
 801342e:	6824      	ldr	r4, [r4, #0]
 8013430:	6a24      	ldr	r4, [r4, #32]
 8013432:	2c00      	cmp	r4, #0
 8013434:	bf08      	it	eq
 8013436:	462c      	moveq	r4, r5
 8013438:	9400      	str	r4, [sp, #0]
 801343a:	f7ff ff7b 	bl	8013334 <_strtoul_l.isra.0>
 801343e:	b003      	add	sp, #12
 8013440:	bd30      	pop	{r4, r5, pc}
 8013442:	bf00      	nop
 8013444:	2000000c 	.word	0x2000000c
 8013448:	20000070 	.word	0x20000070

0801344c <__submore>:
 801344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013450:	460c      	mov	r4, r1
 8013452:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013458:	4299      	cmp	r1, r3
 801345a:	d11d      	bne.n	8013498 <__submore+0x4c>
 801345c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013460:	f7ff f8de 	bl	8012620 <_malloc_r>
 8013464:	b918      	cbnz	r0, 801346e <__submore+0x22>
 8013466:	f04f 30ff 	mov.w	r0, #4294967295
 801346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013472:	63a3      	str	r3, [r4, #56]	; 0x38
 8013474:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013478:	6360      	str	r0, [r4, #52]	; 0x34
 801347a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801347e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013482:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013486:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801348a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801348e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013492:	6020      	str	r0, [r4, #0]
 8013494:	2000      	movs	r0, #0
 8013496:	e7e8      	b.n	801346a <__submore+0x1e>
 8013498:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801349a:	0077      	lsls	r7, r6, #1
 801349c:	463a      	mov	r2, r7
 801349e:	f000 f85a 	bl	8013556 <_realloc_r>
 80134a2:	4605      	mov	r5, r0
 80134a4:	2800      	cmp	r0, #0
 80134a6:	d0de      	beq.n	8013466 <__submore+0x1a>
 80134a8:	eb00 0806 	add.w	r8, r0, r6
 80134ac:	4601      	mov	r1, r0
 80134ae:	4632      	mov	r2, r6
 80134b0:	4640      	mov	r0, r8
 80134b2:	f7fe fc4f 	bl	8011d54 <memcpy>
 80134b6:	f8c4 8000 	str.w	r8, [r4]
 80134ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80134be:	e7e9      	b.n	8013494 <__submore+0x48>

080134c0 <__ascii_wctomb>:
 80134c0:	b149      	cbz	r1, 80134d6 <__ascii_wctomb+0x16>
 80134c2:	2aff      	cmp	r2, #255	; 0xff
 80134c4:	bf85      	ittet	hi
 80134c6:	238a      	movhi	r3, #138	; 0x8a
 80134c8:	6003      	strhi	r3, [r0, #0]
 80134ca:	700a      	strbls	r2, [r1, #0]
 80134cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80134d0:	bf98      	it	ls
 80134d2:	2001      	movls	r0, #1
 80134d4:	4770      	bx	lr
 80134d6:	4608      	mov	r0, r1
 80134d8:	4770      	bx	lr
	...

080134dc <_fstat_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	4c07      	ldr	r4, [pc, #28]	; (80134fc <_fstat_r+0x20>)
 80134e0:	2300      	movs	r3, #0
 80134e2:	4605      	mov	r5, r0
 80134e4:	4608      	mov	r0, r1
 80134e6:	4611      	mov	r1, r2
 80134e8:	6023      	str	r3, [r4, #0]
 80134ea:	f7f0 fcfc 	bl	8003ee6 <_fstat>
 80134ee:	1c43      	adds	r3, r0, #1
 80134f0:	d102      	bne.n	80134f8 <_fstat_r+0x1c>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	b103      	cbz	r3, 80134f8 <_fstat_r+0x1c>
 80134f6:	602b      	str	r3, [r5, #0]
 80134f8:	bd38      	pop	{r3, r4, r5, pc}
 80134fa:	bf00      	nop
 80134fc:	20005084 	.word	0x20005084

08013500 <_isatty_r>:
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	4c06      	ldr	r4, [pc, #24]	; (801351c <_isatty_r+0x1c>)
 8013504:	2300      	movs	r3, #0
 8013506:	4605      	mov	r5, r0
 8013508:	4608      	mov	r0, r1
 801350a:	6023      	str	r3, [r4, #0]
 801350c:	f7f0 fcfb 	bl	8003f06 <_isatty>
 8013510:	1c43      	adds	r3, r0, #1
 8013512:	d102      	bne.n	801351a <_isatty_r+0x1a>
 8013514:	6823      	ldr	r3, [r4, #0]
 8013516:	b103      	cbz	r3, 801351a <_isatty_r+0x1a>
 8013518:	602b      	str	r3, [r5, #0]
 801351a:	bd38      	pop	{r3, r4, r5, pc}
 801351c:	20005084 	.word	0x20005084

08013520 <memmove>:
 8013520:	4288      	cmp	r0, r1
 8013522:	b510      	push	{r4, lr}
 8013524:	eb01 0302 	add.w	r3, r1, r2
 8013528:	d807      	bhi.n	801353a <memmove+0x1a>
 801352a:	1e42      	subs	r2, r0, #1
 801352c:	4299      	cmp	r1, r3
 801352e:	d00a      	beq.n	8013546 <memmove+0x26>
 8013530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013534:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013538:	e7f8      	b.n	801352c <memmove+0xc>
 801353a:	4283      	cmp	r3, r0
 801353c:	d9f5      	bls.n	801352a <memmove+0xa>
 801353e:	1881      	adds	r1, r0, r2
 8013540:	1ad2      	subs	r2, r2, r3
 8013542:	42d3      	cmn	r3, r2
 8013544:	d100      	bne.n	8013548 <memmove+0x28>
 8013546:	bd10      	pop	{r4, pc}
 8013548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801354c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013550:	e7f7      	b.n	8013542 <memmove+0x22>

08013552 <__malloc_lock>:
 8013552:	4770      	bx	lr

08013554 <__malloc_unlock>:
 8013554:	4770      	bx	lr

08013556 <_realloc_r>:
 8013556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013558:	4607      	mov	r7, r0
 801355a:	4614      	mov	r4, r2
 801355c:	460e      	mov	r6, r1
 801355e:	b921      	cbnz	r1, 801356a <_realloc_r+0x14>
 8013560:	4611      	mov	r1, r2
 8013562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013566:	f7ff b85b 	b.w	8012620 <_malloc_r>
 801356a:	b922      	cbnz	r2, 8013576 <_realloc_r+0x20>
 801356c:	f7ff f80a 	bl	8012584 <_free_r>
 8013570:	4625      	mov	r5, r4
 8013572:	4628      	mov	r0, r5
 8013574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013576:	f000 f814 	bl	80135a2 <_malloc_usable_size_r>
 801357a:	42a0      	cmp	r0, r4
 801357c:	d20f      	bcs.n	801359e <_realloc_r+0x48>
 801357e:	4621      	mov	r1, r4
 8013580:	4638      	mov	r0, r7
 8013582:	f7ff f84d 	bl	8012620 <_malloc_r>
 8013586:	4605      	mov	r5, r0
 8013588:	2800      	cmp	r0, #0
 801358a:	d0f2      	beq.n	8013572 <_realloc_r+0x1c>
 801358c:	4631      	mov	r1, r6
 801358e:	4622      	mov	r2, r4
 8013590:	f7fe fbe0 	bl	8011d54 <memcpy>
 8013594:	4631      	mov	r1, r6
 8013596:	4638      	mov	r0, r7
 8013598:	f7fe fff4 	bl	8012584 <_free_r>
 801359c:	e7e9      	b.n	8013572 <_realloc_r+0x1c>
 801359e:	4635      	mov	r5, r6
 80135a0:	e7e7      	b.n	8013572 <_realloc_r+0x1c>

080135a2 <_malloc_usable_size_r>:
 80135a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135a6:	1f18      	subs	r0, r3, #4
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	bfbc      	itt	lt
 80135ac:	580b      	ldrlt	r3, [r1, r0]
 80135ae:	18c0      	addlt	r0, r0, r3
 80135b0:	4770      	bx	lr
	...

080135b4 <_init>:
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b6:	bf00      	nop
 80135b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ba:	bc08      	pop	{r3}
 80135bc:	469e      	mov	lr, r3
 80135be:	4770      	bx	lr

080135c0 <_fini>:
 80135c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c2:	bf00      	nop
 80135c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135c6:	bc08      	pop	{r3}
 80135c8:	469e      	mov	lr, r3
 80135ca:	4770      	bx	lr
